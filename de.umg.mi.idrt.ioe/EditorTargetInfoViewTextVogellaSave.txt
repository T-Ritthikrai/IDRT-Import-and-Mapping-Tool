package edu.goettingen.i2b2.importtool.view;

import org.eclipse.jface.viewers.ArrayContentProvider;
import org.eclipse.jface.viewers.ColumnLabelProvider;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.TableViewerColumn;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.TableItem;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.part.ViewPart;
import edu.goettingen.i2b2.importtool.Activator;
import edu.goettingen.i2b2.importtool.Debug;
import edu.goettingen.i2b2.importtool.Resource;
import edu.goettingen.i2b2.importtool.OntologyTree.OntologyTreeNode;
import edu.goettingen.i2b2.importtool.OntologyTree.TargetNodeAttributes;
import edu.goettingen.i2b2.importtool.idrt.table.MetadataEditingSupport;



/*
 import de.vogella.jface.tableviewer.model.ModelProvider;
 import de.vogella.jface.tableviewer.model.Person;
 import de.vogella.jface.tableviewer.sorter.MyViewerComparator;
 */

public class EditorTargetInfoView extends ViewPart {
	public EditorTargetInfoView() {
	}

	public static final String ID = "de.vogella.jface.tableviewer.view";
	OntologyTreeNode _node = null;
	private Composite _parent = null;

	// private MyViewerComparator comparator;

	private TableViewer viewer;
	private Table _infoTable;
	// We use icons
	private static final Image CHECKED = Activator.getImageDescriptor(
			"images/i2b2_ca.gif").createImage();
	private static final Image UNCHECKED = Activator.getImageDescriptor(
			"images/i2b2_fa.gif").createImage();

	public void createPartControl(Composite parent) {
		GridLayout layout = new GridLayout(2, false);
		parent.setLayout(layout);
		Label searchLabel = new Label(parent, SWT.NONE);
		searchLabel.setText("Search: ");
		final Text searchText = new Text(parent, SWT.BORDER | SWT.SEARCH);
		searchText.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL
				| GridData.HORIZONTAL_ALIGN_FILL));
		createViewer(parent);
		// Set the sorter for the table
		// comparator = new MyViewerComparator();
		// viewer.setComparator(comparator);
		
		_parent = parent;

	}

	private void createViewer(Composite parent) {
		viewer = new TableViewer(parent, SWT.MULTI | SWT.H_SCROLL
				| SWT.V_SCROLL | SWT.FULL_SELECTION | SWT.BORDER);
		createColumns(parent, viewer);
		final Table table = viewer.getTable();
		table.setHeaderVisible(true);
		table.setLinesVisible(true);

		viewer.setContentProvider(new ArrayContentProvider());
		// Get the content for the viewer, setInput will call getElements in the
		// contentProvider
		// viewer.setInput(ModelProvider.INSTANCE.getPersons());
		// Make the selection available to other views
		getSite().setSelectionProvider(viewer);

		// Layout the viewer
		GridData gridData = new GridData();
		gridData.verticalAlignment = GridData.FILL;
		gridData.horizontalSpan = 2;
		gridData.grabExcessHorizontalSpace = true;
		gridData.grabExcessVerticalSpace = true;
		gridData.horizontalAlignment = GridData.FILL;
		viewer.getControl().setLayoutData(gridData);
	}

	public TableViewer getViewer() {
		return viewer;
	}

	// This will create the columns for the table
	private void createColumns(final Composite parent, final TableViewer viewer) {
		String[] titles = { "item", "value" };
		int[] bounds = { 120, 200, };

		// First column is for the first name
		TableViewerColumn col = createTableViewerColumn(titles[0], bounds[0], 0);
		col.setLabelProvider(new ColumnLabelProvider() {
			@Override
			public String getText(Object element) {
				// Person p = (Person) element;
				return "name";
			}
		});

		// Second column is for the last name
		col = createTableViewerColumn(titles[1], bounds[1], 1);
		col.setLabelProvider(new ColumnLabelProvider() {
			@Override
			public String getText(Object element) {
				// Person p = (Person) element;
				return "name2";
			}
		});
		col.setEditingSupport(new MetadataEditingSupport(viewer));
		
		// Now the gender
		/*
		col = createTableViewerColumn(titles[2], bounds[2], 2);
		col.setLabelProvider(new ColumnLabelProvider() {
			@Override
			public String getText(Object element) {
				// Person p = (Person) element;
				return "gender";
			}
		});

		// // Now the status married
		col = createTableViewerColumn(titles[3], bounds[3], 3);
		col.setLabelProvider(new ColumnLabelProvider() {
			@Override
			public String getText(Object element) {
				return null;
			}

			@Override
			public Image getImage(Object element) {

				if (true) {
					return CHECKED;
				} else {
					return UNCHECKED;
				}

			}
		});
	*/
	}

	private TableViewerColumn createTableViewerColumn(String title, int bound,
			final int colNumber) {
		final TableViewerColumn viewerColumn = new TableViewerColumn(viewer,
				SWT.NONE);
		final TableColumn column = viewerColumn.getColumn();
		column.setText(title);
		column.setWidth(bound);
		column.setResizable(true);
		column.setMoveable(true);
		column.addSelectionListener(getSelectionAdapter(column, colNumber));
		return viewerColumn;
	}

	private SelectionAdapter getSelectionAdapter(final TableColumn column,
			final int index) {
		SelectionAdapter selectionAdapter = new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				/*
				 * comparator.setColumn(index); int dir =
				 * comparator.getDirection();
				 * viewer.getTable().setSortDirection(dir);
				 * viewer.getTable().setSortColumn(column);
				 */
				viewer.refresh();
			}
		};
		return selectionAdapter;
	}

	/**
	 * Passing the focus request to the viewer's control.
	 */

	public void setFocus() {
		viewer.getControl().setFocus();
	}

	public void refresh() {
		viewer.refresh();
	}

	public void setNode(OntologyTreeNode node) {// , List<String> answersList,
												// MyOntologyTreeItemLists
												// itemLists){
		// Debug.f("setNode",this);
		// Console.info("setting node");
		System.out.println("setting node (" + node.getName() + ")");
		_node = node;
		// refresh();
	}
	
	private boolean hasNode() {
		if (_node != null)
			return true;
		else
			return false;
	}
	
	public TableItem addValueItem( TableItem[] items, int row, String value ){
		if (items[row] == null){
			Debug.e("Could not add an item to a table in EditorSourceInfoView, because there was no row #"+row+".");
			return null;
		}
		TableItem item = items[row];
		item.setText (1, value != null && !value.equals("null") ? value : "" );
		return item;
	}
	
	/*
	
	public void executeRefresh(){
		System.out.println("executeRefresh for text:\""+ this._node.getName() +"\"");
		
		if(_parent.getParent() == null){
			Debug.e("no pane avaible @OntologyNodeEditorView");
			return;
		}

		createTable();
		
		TargetNodeAttributes attributes = _node.getTargetNodeAttributes();
		
		TableItem[] items = _infoTable.getItems();

		int row = 0;

		addValueItem(items, row++, String.valueOf( attributes.getSourcePath() ) );
		addValueItem(items, row++, String.valueOf( _node.getName() ) );
		addValueItem(items, row++, String.valueOf( attributes.isChanged() == true ? "true" : false ) );
		addValueItem(items, row++, String.valueOf( attributes.getStartDateSource() ) );
		addValueItem(items, row++, String.valueOf( attributes.getEndDateSource() ) );
		addValueItem(items, row++, String.valueOf( attributes.getVisualattribute() ) );

		*/
		/*
		TableItem item = new TableItem (_infoTable, SWT.NONE);
		item.setText (2, String.valueOf( attributes.getC_HLEVEL() ) );
		item = new TableItem (_infoTable, SWT.NONE);
		item.setText (new String[] {"C_FULLNAME", attributes.getC_FULLNAME()});
		item = new TableItem (_infoTable, SWT.NONE);
		item.setText (new String[] {"C_NAME", attributes.getC_NAME()});
		item = new TableItem (_infoTable, SWT.NONE);
		item.setText (new String[] {"C_SYNONYM_CD", attributes.getC_SYNONYM_CD()});
		item = new TableItem (_infoTable, SWT.NONE);
		item.setText (new String[] {"C_VISUALATTRIBUTES", attributes.getC_VISUALATTRIBUTES()});
		item = new TableItem (_infoTable, SWT.NONE);
		item.setText (new String[] {"C_TOTALNUM", String.valueOf( attributes.getC_TOTALNUM() )});
		item = new TableItem (_infoTable, SWT.NONE);
		item.setText (new String[] {"C_BASECODE", attributes.getC_BASECODE()});
		item = new TableItem (_infoTable, SWT.NONE);
		item.setText (new String[] {"C_METADATAXML", String.valueOf( attributes.getC_METADATAXML() )});
		item = new TableItem (_infoTable, SWT.NONE);
		item.setText (new String[] {"C_FACTTABLECOLUMN", attributes.getC_FACTTABLECOLUMN()});
		item = new TableItem (_infoTable, SWT.NONE);
		item.setText (new String[] {"C_TABLENAME", attributes.getC_TABLENAME()});
		item = new TableItem (_infoTable, SWT.NONE);
		item.setText (new String[] {"C_COLUMNNAME", attributes.getC_COLUMNNAME()});
		item = new TableItem (_infoTable, SWT.NONE);
		item.setText (new String[] {"C_COLUMNDATATYPE", attributes.getC_COLUMNDATATYPE()});
		item = new TableItem (_infoTable, SWT.NONE);
		item.setText (new String[] {"C_OPERATOR", attributes.getC_OPERATOR()});
		item = new TableItem (_infoTable, SWT.NONE);
		item.setText (new String[] {"C_DIMCODE", attributes.getC_DIMCODE()});
		item = new TableItem (_infoTable, SWT.NONE);
		item.setText (new String[] {"C_COMMENT", String.valueOf( attributes.getC_COMMENT() )});
		item = new TableItem (_infoTable, SWT.NONE);
		item.setText (new String[] {"C_TOOLTIP", attributes.getC_TOOLTIP()});
		item = new TableItem (_infoTable, SWT.NONE);
		item.setText (new String[] {"M_APPLIED_PATH", attributes.getM_APPLIED_PATH()});
		item = new TableItem (_infoTable, SWT.NONE);
		item.setText (new String[] {"UPDATE_DATE", String.valueOf( attributes.getUPDATE_DATE() )});
		item = new TableItem (_infoTable, SWT.NONE);
		item.setText (new String[] {"DOWNLOAD_DATE", String.valueOf( attributes.getDOWNLOAD_DATE() )});
		item = new TableItem (_infoTable, SWT.NONE);
		item.setText (new String[] {"IMPORT_DATE", String.valueOf( attributes.getIMPORT_DATE() )});
		item = new TableItem (_infoTable, SWT.NONE);
		item.setText (new String[] {"SOURCESYSTEM_CD", attributes.getSOURCESYSTEM_CD()});
		item = new TableItem (_infoTable, SWT.NONE);
		item.setText (new String[] {"VALUETYPE_CD", attributes.getVALUETYPE_CD()});
		item = new TableItem (_infoTable, SWT.NONE);
		item.setText (new String[] {"M_EXCLUSIVE_CD", attributes.getM_EXCLUSION_CD()});
		item = new TableItem (_infoTable, SWT.NONE);
		item.setText (new String[] {"C_PATH", attributes.getC_PATH()});
		item = new TableItem (_infoTable, SWT.NONE);
		item.setText (new String[] {"C_SYMBOL", attributes.getC_SYMBOL()});
		*/
		
		//_infoTable.getColumn(1)
		
		
		/*
		
		// recreate bottom-label
		if ( _itemNode == null ){
			
			disposeChildren(_editorComposite);
			
			Group grpLabel = new Group(_editorComposite, SWT.NONE);
			grpLabel.setText("label");
			grpLabel.setLayout(new GridLayout(2, false));
			
			//_bottomLabel = new Label(grpLabel, SWT.NONE);
			//_bottomLabel.setText("New Label");
		}

		if ( _itemNode != null ){
			
			path = _itemNode.getTreePath();
			name = _itemNode.getName();
			nodeType = _itemNode.getNodeType().toString();
			
			

			bottomLabel = "ItemNode";

			disposeChildren(_editorComposite);

			_editorComposite.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
			_editorComposite.setLayout(new FillLayout(SWT.VERTICAL));
			
			NodeEditorCompositeInteger bottomComposite = new NodeEditorCompositeInteger(this._editorComposite, SWT.NONE);
			
		} 
		
		if ( _node != null ) {
			
			//if ( _node.getNodeType().equals(NodeType.ANSWER) ){
			//	_node = (OTNode)_node.getParent();
			//	if ( _node.getNodeType().equals(NodeType.ANSWER) ){
			//		_node = (OTNode)_node.getParent();
			//		if ( _node.getNodeType().equals(NodeType.ANSWER) ){
			//			_node = (OTNode)_node.getParent();
			//		}
			//	}
			//}
			
			path = _node.getTreePath();
			name = _node.getName();
			nodeType = _node.getNodeType().toString();
			importPath = _node.getImportPath();
			treePath = _node.getTreePath();
			i2b2Path = _node.getI2B2Path();
			i2b2Level = String.valueOf(_node.getLevel());
			if ( _node.isAdditionalData() ){
				OTNode additionalDataParent = _node.getAdditionalDataParentNode();
				
				if ( _node.isAdditionDataParent() ) {
					additionalDataParentNodePath = "*";
				} else if ( additionalDataParent != null ){
					additionalDataParentNodePath = additionalDataParent.getImportPath();
				}
			}
			additionalDataParentNodePath = ( _node != null && _node.hastAdditionalDataParentNode() ) ? _node.getAdditionalDataParentNode().getImportPath() : "-";
			
			bottomLabel = "Node";
			
		} else {
			path = ">";
			name = "Name";
			nodeType = "Type";
			
			bottomLabel = "nothing";
		}
		
		if (_node != null){
			i2b2Info = _node.getLevel() + "|" + _node.getI2B2Path();
			
			//Console.info("checkID2");
			//_checkboxIsVisible.setSelection(_node.isVisable());
			//_checkboxIsVisible.update();
		}
		
		*/
		
		/*
		_infoLabelPath.setText(path);
		_infoLabelPath.update();
		_infoLabelName.setText(name);
		_infoLabelName.update();
		//_infoLabelI2B2InfoData.setText(i2b2Info);
		//_infoLabelI2B2InfoData.update();
		if (nodeType != null)
			_infoLabelNodeType.setText(nodeType + ( ( ( (nodeType.equals(NodeType.ITEM.toString() ) && _itemNode != null )  ) ?  " (" + _itemNode.getDataType() + ")" : "") ));
		
		_infoLabelNodeType.update();
		_infoLabelImportPathData.setText(importPath);
		_infoLabelImportPathData.update();
		_infoLabelTreePathData.setText(treePath);
		_infoLabelTreePathData.update();
		_infoLabelI2B2PathData.setText(i2b2Path);
		_infoLabelI2B2PathData.update();
		_infoLabelI2B2LevelData.setText(i2b2Level);
		_infoLabelI2B2LevelData.update();
		_infoLabelAdditionalDataParentPathData.setText(additionalDataParentNodePath);
		_infoLabelAdditionalDataParentPathData.update();
		
		_infoLabelNodeType.getParent().layout();
		
		// only edit if there is a active instance
		if (!_bottomLabel.isDisposed()){
			_bottomLabel.setText(bottomLabel);
			_bottomLabel.update();
			
		}
		
		*/
		
		
		//_editorComposite.dispose();
		//_editorComposite = new NodeEditorCompositeInteger(this._editorComposite, SWT.NONE);
		
		/*
		Label _bottomLabel2 = new Label(_editorComposite, SWT.NONE);
		_bottomLabel2.setText("New Label2 (XX)");
		_bottomLabel2.update();
		*/
		
		//_editorComposite.update();
		//_editorComposite.layout();
		
		
		/*
		_editorComposite.update();
		_editorComposite.layout();
		
		_parent.layout();
		
	}
	*/
	
	/*
private void createTable() {
	
	TableColumn infoTableDBColumn;
	TableColumn infoTableValue;
		
		if (_infoTable != null)
			return;
		
		 int[] bounds = { 100, 100 };
		
		_infoTable = new Table(_parent, SWT.BORDER | SWT.MULTI);
		_infoTable.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		_infoTable.setHeaderVisible(true);
		_infoTable.setLinesVisible(true);
		
		//_infoTable.get

		infoTableDBColumn = new TableColumn(_infoTable, SWT.NONE);
		infoTableDBColumn.setWidth(170);
		infoTableDBColumn.setText("column");

		infoTableValue = new TableColumn(_infoTable, SWT.NONE);
		infoTableValue.setWidth(600);
		infoTableValue.setText("value");
		infoTableValue.

		addColumItem(Resource.I2B2.NODE.TARGET.SOURCE_PATH);
		addColumItem(Resource.I2B2.NODE.TARGET.NAME);
		addColumItem(Resource.I2B2.NODE.TARGET.CHANGED);
		addColumItem(Resource.I2B2.NODE.TARGET.STARTDATE_SOURCE_PATH);
		addColumItem(Resource.I2B2.NODE.TARGET.ENDDATE_SOURCE_PATH);
		addColumItem(Resource.I2B2.NODE.TARGET.VISUALATTRIBUTE);
		
		
		 TableViewerColumn col = createTableViewerColumn(Resource.I2B2.NODE.TARGET.SOURCE_PATH, bounds[0], 0);
		
		tableItem = new TableItem(_infoTable, SWT.NONE);
		tableItem.setText("New TableItem");
		
		tableCursor = new TableCursor(_infoTable, SWT.NONE);

	}

	private TableItem addColumItem( String text ){
	TableItem item = new TableItem (_infoTable, SWT.NONE);
	item.setText (new String[] { text, "" });
	return item;
}
*/
}