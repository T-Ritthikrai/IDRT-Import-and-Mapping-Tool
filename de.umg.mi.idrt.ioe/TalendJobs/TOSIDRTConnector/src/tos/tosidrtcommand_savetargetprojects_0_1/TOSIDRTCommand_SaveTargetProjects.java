// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package tos.tosidrtcommand_savetargetprojects_0_1;

import routines.IIT;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.ExportDB;
import routines.enc_num_routine;
import routines.testRoutine;
import routines.Mathematical;
import routines.Relational;
import routines.TalendDate;
import routines.IDRTHelper;
import routines.TOSHandler2;
import routines.PIDGen;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tLibraryLoad_1
import de.umg.mi.idrt.ioe.tos.TOSHandler;

//the import part of tJava_1
//import java.util.List;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJava_7
//import java.util.List;

//the import part of tJavaFlex_1
//import java.util.List;

//the import part of tJavaFlex_3
//import java.util.List;

//the import part of tJava_2
//import java.util.List;

//the import part of tJava_5
//import java.util.List;

//the import part of tJava_6
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: TOSIDRTCommand_SaveTargetProjects Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.3.1.r104014
 * @status 
 */
public class TOSIDRTCommand_SaveTargetProjects implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (currentTargetProjectID != null) {

				this.setProperty("currentTargetProjectID",
						currentTargetProjectID.toString());

			}

			if (TargetProjectID != null) {

				this.setProperty("TargetProjectID", TargetProjectID.toString());

			}

			if (TargetID != null) {

				this.setProperty("TargetID", TargetID.toString());

			}

			if (DateCreated != null) {

				String pattern_DateCreated = "yyyy-MM-dd HH:mm:ss";
				String value_DateCreated = "";
				String[] parts_DateCreated = value_DateCreated.split(";");
				if (parts_DateCreated.length > 1) {
					pattern_DateCreated = parts_DateCreated[0];
					this.setProperty(
							"DateCreated",
							pattern_DateCreated
									+ ";"
									+ FormatterUtils.format_Date(DateCreated,
											pattern_DateCreated));
				} else {
					this.setProperty("DateCreated", FormatterUtils.format_Date(
							DateCreated, pattern_DateCreated));
				}

			}

			if (Version != null) {

				this.setProperty("Version", Version.toString());

			}

			if (DB_StagingI2B2_Host != null) {

				this.setProperty("DB_StagingI2B2_Host",
						DB_StagingI2B2_Host.toString());

			}

			if (DB_StagingI2B2_Instance != null) {

				this.setProperty("DB_StagingI2B2_Instance",
						DB_StagingI2B2_Instance.toString());

			}

			if (DB_StagingI2B2_jdbcurl != null) {

				this.setProperty("DB_StagingI2B2_jdbcurl",
						DB_StagingI2B2_jdbcurl.toString());

			}

			if (DB_StagingI2B2_Password != null) {

				this.setProperty("DB_StagingI2B2_Password",
						DB_StagingI2B2_Password.toString());

			}

			if (DB_StagingI2B2_Port != null) {

				this.setProperty("DB_StagingI2B2_Port",
						DB_StagingI2B2_Port.toString());

			}

			if (DB_StagingI2B2_Schema != null) {

				this.setProperty("DB_StagingI2B2_Schema",
						DB_StagingI2B2_Schema.toString());

			}

			if (DB_StagingI2B2_sqlclassname != null) {

				this.setProperty("DB_StagingI2B2_sqlclassname",
						DB_StagingI2B2_sqlclassname.toString());

			}

			if (DB_StagingI2B2_Username != null) {

				this.setProperty("DB_StagingI2B2_Username",
						DB_StagingI2B2_Username.toString());

			}

			if (DB_TargetI2B2_Host != null) {

				this.setProperty("DB_TargetI2B2_Host",
						DB_TargetI2B2_Host.toString());

			}

			if (DB_TargetI2B2_Instance != null) {

				this.setProperty("DB_TargetI2B2_Instance",
						DB_TargetI2B2_Instance.toString());

			}

			if (DB_TargetI2B2_jdbcurl != null) {

				this.setProperty("DB_TargetI2B2_jdbcurl",
						DB_TargetI2B2_jdbcurl.toString());

			}

			if (DB_TargetI2B2_Password != null) {

				this.setProperty("DB_TargetI2B2_Password",
						DB_TargetI2B2_Password.toString());

			}

			if (DB_TargetI2B2_Port != null) {

				this.setProperty("DB_TargetI2B2_Port",
						DB_TargetI2B2_Port.toString());

			}

			if (DB_TargetI2B2_Schema != null) {

				this.setProperty("DB_TargetI2B2_Schema",
						DB_TargetI2B2_Schema.toString());

			}

			if (DB_TargetI2B2_sqlclassname != null) {

				this.setProperty("DB_TargetI2B2_sqlclassname",
						DB_TargetI2B2_sqlclassname.toString());

			}

			if (DB_TargetI2B2_Username != null) {

				this.setProperty("DB_TargetI2B2_Username",
						DB_TargetI2B2_Username.toString());

			}

			if (DataFile != null) {

				this.setProperty("DataFile", DataFile.toString());

			}

			if (ErrorMessage != null) {

				this.setProperty("ErrorMessage", ErrorMessage.toString());

			}

			if (IfValue != null) {

				this.setProperty("IfValue", IfValue.toString());

			}

			if (JDBC_URL != null) {

				this.setProperty("JDBC_URL", JDBC_URL.toString());

			}

			if (JDBCDriver != null) {

				this.setProperty("JDBCDriver", JDBCDriver.toString());

			}

			if (Job != null) {

				this.setProperty("Job", Job.toString());

			}

			if (OracleDB != null) {

				this.setProperty("OracleDB", OracleDB.toString());

			}

			if (OracleHost != null) {

				this.setProperty("OracleHost", OracleHost.toString());

			}

			if (OraclePassword != null) {

				this.setProperty("OraclePassword", OraclePassword.toString());

			}

			if (OraclePort != null) {

				this.setProperty("OraclePort", OraclePort.toString());

			}

			if (OracleSchema != null) {

				this.setProperty("OracleSchema", OracleSchema.toString());

			}

			if (OracleUsername != null) {

				this.setProperty("OracleUsername", OracleUsername.toString());

			}

			if (SQLCommand != null) {

				this.setProperty("SQLCommand", SQLCommand.toString());

			}

			if (SQLCommand2 != null) {

				this.setProperty("SQLCommand2", SQLCommand2.toString());

			}

			if (SQLTable != null) {

				this.setProperty("SQLTable", SQLTable.toString());

			}

			if (SQLTable2 != null) {

				this.setProperty("SQLTable2", SQLTable2.toString());

			}

			if (StatusMessage != null) {

				this.setProperty("StatusMessage", StatusMessage.toString());

			}

			if (TableIOETarget != null) {

				this.setProperty("TableIOETarget", TableIOETarget.toString());

			}

			if (TableIOETargetOntology != null) {

				this.setProperty("TableIOETargetOntology",
						TableIOETargetOntology.toString());

			}

			if (TableIOETargetProject != null) {

				this.setProperty("TableIOETargetProject",
						TableIOETargetProject.toString());

			}

			if (TOSHandler != null) {

				this.setProperty("TOSHandler", TOSHandler.toString());

			}

		}

		public Integer currentTargetProjectID;

		public Integer getCurrentTargetProjectID() {
			return this.currentTargetProjectID;
		}

		public Integer TargetProjectID;

		public Integer getTargetProjectID() {
			return this.TargetProjectID;
		}

		public Integer TargetID;

		public Integer getTargetID() {
			return this.TargetID;
		}

		public java.util.Date DateCreated;

		public java.util.Date getDateCreated() {
			return this.DateCreated;
		}

		public Integer Version;

		public Integer getVersion() {
			return this.Version;
		}

		public String DB_StagingI2B2_Host;

		public String getDB_StagingI2B2_Host() {
			return this.DB_StagingI2B2_Host;
		}

		public String DB_StagingI2B2_Instance;

		public String getDB_StagingI2B2_Instance() {
			return this.DB_StagingI2B2_Instance;
		}

		public String DB_StagingI2B2_jdbcurl;

		public String getDB_StagingI2B2_jdbcurl() {
			return this.DB_StagingI2B2_jdbcurl;
		}

		public java.lang.String DB_StagingI2B2_Password;

		public java.lang.String getDB_StagingI2B2_Password() {
			return this.DB_StagingI2B2_Password;
		}

		public String DB_StagingI2B2_Port;

		public String getDB_StagingI2B2_Port() {
			return this.DB_StagingI2B2_Port;
		}

		public String DB_StagingI2B2_Schema;

		public String getDB_StagingI2B2_Schema() {
			return this.DB_StagingI2B2_Schema;
		}

		public String DB_StagingI2B2_sqlclassname;

		public String getDB_StagingI2B2_sqlclassname() {
			return this.DB_StagingI2B2_sqlclassname;
		}

		public String DB_StagingI2B2_Username;

		public String getDB_StagingI2B2_Username() {
			return this.DB_StagingI2B2_Username;
		}

		public String DB_TargetI2B2_Host;

		public String getDB_TargetI2B2_Host() {
			return this.DB_TargetI2B2_Host;
		}

		public String DB_TargetI2B2_Instance;

		public String getDB_TargetI2B2_Instance() {
			return this.DB_TargetI2B2_Instance;
		}

		public String DB_TargetI2B2_jdbcurl;

		public String getDB_TargetI2B2_jdbcurl() {
			return this.DB_TargetI2B2_jdbcurl;
		}

		public java.lang.String DB_TargetI2B2_Password;

		public java.lang.String getDB_TargetI2B2_Password() {
			return this.DB_TargetI2B2_Password;
		}

		public String DB_TargetI2B2_Port;

		public String getDB_TargetI2B2_Port() {
			return this.DB_TargetI2B2_Port;
		}

		public String DB_TargetI2B2_Schema;

		public String getDB_TargetI2B2_Schema() {
			return this.DB_TargetI2B2_Schema;
		}

		public String DB_TargetI2B2_sqlclassname;

		public String getDB_TargetI2B2_sqlclassname() {
			return this.DB_TargetI2B2_sqlclassname;
		}

		public String DB_TargetI2B2_Username;

		public String getDB_TargetI2B2_Username() {
			return this.DB_TargetI2B2_Username;
		}

		public String DataFile;

		public String getDataFile() {
			return this.DataFile;
		}

		public String ErrorMessage;

		public String getErrorMessage() {
			return this.ErrorMessage;
		}

		public Boolean IfValue;

		public Boolean getIfValue() {
			return this.IfValue;
		}

		public String JDBC_URL;

		public String getJDBC_URL() {
			return this.JDBC_URL;
		}

		public String JDBCDriver;

		public String getJDBCDriver() {
			return this.JDBCDriver;
		}

		public String Job;

		public String getJob() {
			return this.Job;
		}

		public String OracleDB;

		public String getOracleDB() {
			return this.OracleDB;
		}

		public String OracleHost;

		public String getOracleHost() {
			return this.OracleHost;
		}

		public java.lang.String OraclePassword;

		public java.lang.String getOraclePassword() {
			return this.OraclePassword;
		}

		public String OraclePort;

		public String getOraclePort() {
			return this.OraclePort;
		}

		public String OracleSchema;

		public String getOracleSchema() {
			return this.OracleSchema;
		}

		public String OracleUsername;

		public String getOracleUsername() {
			return this.OracleUsername;
		}

		public String SQLCommand;

		public String getSQLCommand() {
			return this.SQLCommand;
		}

		public String SQLCommand2;

		public String getSQLCommand2() {
			return this.SQLCommand2;
		}

		public String SQLTable;

		public String getSQLTable() {
			return this.SQLTable;
		}

		public String SQLTable2;

		public String getSQLTable2() {
			return this.SQLTable2;
		}

		public String StatusMessage;

		public String getStatusMessage() {
			return this.StatusMessage;
		}

		public String TableIOETarget;

		public String getTableIOETarget() {
			return this.TableIOETarget;
		}

		public String TableIOETargetOntology;

		public String getTableIOETargetOntology() {
			return this.TableIOETargetOntology;
		}

		public String TableIOETargetProject;

		public String getTableIOETargetProject() {
			return this.TableIOETargetProject;
		}

		public Object TOSHandler;

		public Object getTOSHandler() {
			return this.TOSHandler;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "TOSIDRTCommand_SaveTargetProjects";
	private final String projectName = "TOS";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					TOSIDRTCommand_SaveTargetProjects.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(TOSIDRTCommand_SaveTargetProjects.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tPrejob_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPrejob_1", System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLibraryLoad_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

		status = "failure";

		tLibraryLoad_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_1", System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJDBCConnection_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCConnection_1", System.currentTimeMillis());

		status = "failure";

		tJDBCConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_1", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_7", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCConnection_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCConnection_2", System.currentTimeMillis());

		status = "failure";

		tJDBCConnection_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_3", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaFlex_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaFlex_1", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCConnection_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCConnection_4", System.currentTimeMillis());

		status = "failure";

		tJDBCConnection_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_2", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaFlex_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaFlex_3", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_1", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_2", System.currentTimeMillis());

		status = "failure";

		tJava_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_5", System.currentTimeMillis());

		status = "failure";

		tJava_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostjob_1", System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCConnection_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCConnection_3", System.currentTimeMillis());

		status = "failure";

		tJDBCConnection_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJDBCOutput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJDBCOutput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJDBCCommit_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCCommit_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_6", System.currentTimeMillis());

		status = "failure";

		tJava_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLibraryLoad_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCConnection_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCConnection_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCConnection_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCConnection_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_6_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());
				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */
				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */
				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				tLibraryLoad_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tLibraryLoad_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLibraryLoad_1 begin ] start
				 */

				ok_Hash.put("tLibraryLoad_1", false);
				start_Hash.put("tLibraryLoad_1", System.currentTimeMillis());
				currentComponent = "tLibraryLoad_1";

				int tos_count_tLibraryLoad_1 = 0;

				/**
				 * [tLibraryLoad_1 begin ] stop
				 */
				/**
				 * [tLibraryLoad_1 main ] start
				 */

				currentComponent = "tLibraryLoad_1";

				tos_count_tLibraryLoad_1++;

				/**
				 * [tLibraryLoad_1 main ] stop
				 */
				/**
				 * [tLibraryLoad_1 end ] start
				 */

				currentComponent = "tLibraryLoad_1";

				ok_Hash.put("tLibraryLoad_1", true);
				end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				/**
				 * [tLibraryLoad_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tLibraryLoad_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());
				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				TOSHandler.status("Doing TOS-Job \"SaveTargetProjects\"...");

				/**
				 * [tJava_1 begin ] stop
				 */
				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */
				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_SaveTargetProjects = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects = new byte[0];

		public Integer TARGETPROJECT_ID;

		public Integer getTARGETPROJECT_ID() {
			return this.TARGETPROJECT_ID;
		}

		public Integer TARGET_ID;

		public Integer getTARGET_ID() {
			return this.TARGET_ID;
		}

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		public Integer VERSION;

		public Integer getVERSION() {
			return this.VERSION;
		}

		public String TARGET_DB_SCHEMA;

		public String getTARGET_DB_SCHEMA() {
			return this.TARGET_DB_SCHEMA;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_SaveTargetProjects) {

				try {

					int length = 0;

					this.TARGETPROJECT_ID = readInteger(dis);

					this.TARGET_ID = readInteger(dis);

					this.NAME = readString(dis);

					this.DESCRIPTION = readString(dis);

					this.VERSION = readInteger(dis);

					this.TARGET_DB_SCHEMA = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.TARGETPROJECT_ID, dos);

				// Integer

				writeInteger(this.TARGET_ID, dos);

				// String

				writeString(this.NAME, dos);

				// String

				writeString(this.DESCRIPTION, dos);

				// Integer

				writeInteger(this.VERSION, dos);

				// String

				writeString(this.TARGET_DB_SCHEMA, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TARGETPROJECT_ID=" + String.valueOf(TARGETPROJECT_ID));
			sb.append(",TARGET_ID=" + String.valueOf(TARGET_ID));
			sb.append(",NAME=" + NAME);
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append(",VERSION=" + String.valueOf(VERSION));
			sb.append(",TARGET_DB_SCHEMA=" + TARGET_DB_SCHEMA);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());
				currentComponent = "tJavaRow_1";

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;

				char fieldSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_1 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_1 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_1 = /**
				 * Start field
				 * tFileInputDelimited_1:FILENAME
				 */
				context.DataFile/** End field tFileInputDelimited_1:FILENAME */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

				try {

					String[] rowtFileInputDelimited_1 = null;
					int currentLinetFileInputDelimited_1 = 0;
					int outputLinetFileInputDelimited_1 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0;
							if (footer_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_1,
									fieldSeparator_tFileInputDelimited_1[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_1)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_1[0]);
						}

						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
							csvReadertFileInputDelimited_1.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_1[0]);

						csvReadertFileInputDelimited_1.setQuoteChar('\"');

						csvReadertFileInputDelimited_1.setEscapeChar('\\');

						if (footer_tFileInputDelimited_1 > 0) {
							for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
							csvReadertFileInputDelimited_1
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_1.readNext()) {

								rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
										.getValues();
								if (!(rowtFileInputDelimited_1.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_1[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_1++;

								}

							}
							int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
									- footer_tFileInputDelimited_1 < 0 ? 0
									: totalLinetFileInputDelimited_1
											- footer_tFileInputDelimited_1;
							if (lastLinetFileInputDelimited_1 > 0) {
								lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1
										: lastLineTemptFileInputDelimited_1;
							} else {
								lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
							}

							csvReadertFileInputDelimited_1.close();
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_1)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_1[0]);
							}
							csvReadertFileInputDelimited_1
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('\"');

							csvReadertFileInputDelimited_1.setEscapeChar('\\');

						}

						if (limittFileInputDelimited_1 != 0) {
							for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 1; currentLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
						}
						csvReadertFileInputDelimited_1
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_1 != 0
							&& csvReadertFileInputDelimited_1 != null
							&& csvReadertFileInputDelimited_1.readNext()) {

						rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
								.getValues();

						if (rowtFileInputDelimited_1.length == 1
								&& ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_1++;

						if (lastLinetFileInputDelimited_1 > -1
								&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
							break;
						}
						outputLinetFileInputDelimited_1++;
						if (limittFileInputDelimited_1 > 0
								&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
							break;
						}

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							if (rowtFileInputDelimited_1.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row1.TARGETPROJECT_ID = null;

								row1.TARGET_ID = null;

								row1.NAME = null;

								row1.DESCRIPTION = null;

								row1.VERSION = null;

								row1.TARGET_DB_SCHEMA = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_1 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_1 = 0;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										row1.TARGETPROJECT_ID = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

									} else {
										row1.TARGETPROJECT_ID = null;
									}

								} else {
									row1.TARGETPROJECT_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 1;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										row1.TARGET_ID = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

									} else {
										row1.TARGET_ID = null;
									}

								} else {
									row1.TARGET_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 2;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.NAME = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.NAME = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 3;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.DESCRIPTION = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.DESCRIPTION = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 4;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										row1.VERSION = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

									} else {
										row1.VERSION = null;
									}

								} else {
									row1.VERSION = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 5;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.TARGET_DB_SCHEMA = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.TARGET_DB_SCHEMA = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tJavaRow_1 main ] start
							 */

							currentComponent = "tJavaRow_1";

							context.TargetProjectID = row1.TARGETPROJECT_ID != null ? row1.TARGETPROJECT_ID
									: -1;
							context.TargetID = row1.TARGET_ID != null ? row1.TARGET_ID
									: -1;
							context.Version = row1.VERSION != null ? row1.VERSION
									: -1;

							System.out
									.println("TOSIDRTCommand_SaveTargetProjects");
							System.out.println("TARGETPROJECT_ID: "
									+ context.TargetProjectID + "!");
							System.out.println("TARGET_ID: " + context.TargetID
									+ "!");
							System.out.println("VERSION: " + context.Version
									+ "!");

							System.out
									.println("context.DB_StagingI2B2_Schema: "
											+ context.DB_StagingI2B2_Schema
											+ "!");
							System.out
									.println("context.TableIOETargetProject: "
											+ context.TableIOETargetProject
											+ "!");

							System.out.println("DataFile: " + context.DataFile
									+ "!");

							nb_line_tJavaRow_1++;

							tos_count_tJavaRow_1++;

							/**
							 * [tJavaRow_1 main ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						nb_line_tFileInputDelimited_1++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_1 != null) {
							csvReadertFileInputDelimited_1.close();
						}
					}
					if (csvReadertFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								nb_line_tFileInputDelimited_1);
					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if (context.TargetProjectID < 0) {

					tJDBCConnection_1Process(globalMap);
				}

				if (context.TargetID < 0) {

					tJDBCConnection_2Process(globalMap);
				}

				if (context.Version < 1) {

					tJDBCConnection_4Process(globalMap);
				}

				/**
				 * [tJavaRow_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_5Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public void tJDBCConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCConnection_1 begin ] start
				 */

				ok_Hash.put("tJDBCConnection_1", false);
				start_Hash.put("tJDBCConnection_1", System.currentTimeMillis());
				currentComponent = "tJDBCConnection_1";

				int tos_count_tJDBCConnection_1 = 0;

				String url_tJDBCConnection_1 = context.DB_StagingI2B2_jdbcurl;

				String userName_tJDBCConnection_1 = context.DB_StagingI2B2_Username;
				String password_tJDBCConnection_1 = context.DB_StagingI2B2_Password;

				java.sql.Connection conn_tJDBCConnection_1 = null;

				String sharedConnectionName_tJDBCConnection_1 = "dbConnection";
				conn_tJDBCConnection_1 = SharedDBConnection.getDBConnection(
						context.DB_StagingI2B2_sqlclassname,
						url_tJDBCConnection_1, userName_tJDBCConnection_1,
						password_tJDBCConnection_1,
						sharedConnectionName_tJDBCConnection_1);
				if (null != conn_tJDBCConnection_1) {

					conn_tJDBCConnection_1.setAutoCommit(false);
				}

				globalMap.put("conn_tJDBCConnection_1", conn_tJDBCConnection_1);
				globalMap.put("url_tJDBCConnection_1", url_tJDBCConnection_1);
				// globalMap.put("user_tJDBCConnection_1",
				// userName_tJDBCConnection_1);
				// globalMap.put("pass_tJDBCConnection_1",
				// password_tJDBCConnection_1);

				/**
				 * [tJDBCConnection_1 begin ] stop
				 */
				/**
				 * [tJDBCConnection_1 main ] start
				 */

				currentComponent = "tJDBCConnection_1";

				tos_count_tJDBCConnection_1++;

				/**
				 * [tJDBCConnection_1 main ] stop
				 */
				/**
				 * [tJDBCConnection_1 end ] start
				 */

				currentComponent = "tJDBCConnection_1";

				ok_Hash.put("tJDBCConnection_1", true);
				end_Hash.put("tJDBCConnection_1", System.currentTimeMillis());

				/**
				 * [tJDBCConnection_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJDBCConnection_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tJDBCInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class targetProjectIDCheckStruct implements
			routines.system.IPersistableRow<targetProjectIDCheckStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_SaveTargetProjects = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects = new byte[0];

		public Integer TargetProjectID;

		public Integer getTargetProjectID() {
			return this.TargetProjectID;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_SaveTargetProjects) {

				try {

					int length = 0;

					this.TargetProjectID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.TargetProjectID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TargetProjectID=" + String.valueOf(TargetProjectID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(targetProjectIDCheckStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				targetProjectIDCheckStruct targetProjectIDCheck = new targetProjectIDCheckStruct();

				/**
				 * [tJava_7 begin ] start
				 */

				ok_Hash.put("tJava_7", false);
				start_Hash.put("tJava_7", System.currentTimeMillis());
				currentComponent = "tJava_7";

				int tos_count_tJava_7 = 0;

				if (targetProjectIDCheck.TargetProjectID != null) {

					context.TargetProjectID = targetProjectIDCheck.TargetProjectID + 1;
					System.out
							.println("Saves this target project with TargetProjectID="
									+ context.TargetProjectID + ".");

				}

				/**
				 * [tJava_7 begin ] stop
				 */

				/**
				 * [tJDBCInput_1 begin ] start
				 */

				ok_Hash.put("tJDBCInput_1", false);
				start_Hash.put("tJDBCInput_1", System.currentTimeMillis());
				currentComponent = "tJDBCInput_1";

				int tos_count_tJDBCInput_1 = 0;

				int nb_line_tJDBCInput_1 = 0;
				java.sql.Connection conn_tJDBCInput_1 = null;
				conn_tJDBCInput_1 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");
				if (null == conn_tJDBCInput_1) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCInput_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tJDBCInput_1 = dataSources_tJDBCInput_1.get("")
							.getConnection();
					// globalMap.put("conn_tJDBCConnection_1",
					// conn_tJDBCInput_1);
				}

				java.sql.Statement stmt_tJDBCInput_1 = conn_tJDBCInput_1
						.createStatement();

				String dbquery_tJDBCInput_1 = "select  TARGETPROJECT_ID  from "
						+ context.DB_StagingI2B2_Schema + "."
						+ context.TableIOETargetProject
						+ " ORDER BY TARGETPROJECT_ID DESC";

				globalMap.put("tJDBCInput_1_QUERY", dbquery_tJDBCInput_1);

				java.sql.ResultSet rs_tJDBCInput_1 = stmt_tJDBCInput_1
						.executeQuery(dbquery_tJDBCInput_1);
				java.sql.ResultSetMetaData rsmd_tJDBCInput_1 = rs_tJDBCInput_1
						.getMetaData();
				int colQtyInRs_tJDBCInput_1 = rsmd_tJDBCInput_1
						.getColumnCount();

				String tmpContent_tJDBCInput_1 = null;
				int column_index_tJDBCInput_1 = 1;
				while (rs_tJDBCInput_1.next()) {
					nb_line_tJDBCInput_1++;

					column_index_tJDBCInput_1 = 1;

					if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
						targetProjectIDCheck.TargetProjectID = null;
					} else {

						if (rs_tJDBCInput_1
								.getObject(column_index_tJDBCInput_1) != null) {
							targetProjectIDCheck.TargetProjectID = rs_tJDBCInput_1
									.getInt(column_index_tJDBCInput_1);
						} else {
							targetProjectIDCheck.TargetProjectID = null;
						}

						if (rs_tJDBCInput_1.wasNull()) {
							targetProjectIDCheck.TargetProjectID = null;
						}
					}

					/**
					 * [tJDBCInput_1 begin ] stop
					 */
					/**
					 * [tJDBCInput_1 main ] start
					 */

					currentComponent = "tJDBCInput_1";

					tos_count_tJDBCInput_1++;

					/**
					 * [tJDBCInput_1 main ] stop
					 */

					/**
					 * [tJava_7 main ] start
					 */

					currentComponent = "tJava_7";

					tos_count_tJava_7++;

					/**
					 * [tJava_7 main ] stop
					 */

					/**
					 * [tJDBCInput_1 end ] start
					 */

					currentComponent = "tJDBCInput_1";

				}
				rs_tJDBCInput_1.close();
				stmt_tJDBCInput_1.close();

				globalMap.put("tJDBCInput_1_NB_LINE", nb_line_tJDBCInput_1);

				ok_Hash.put("tJDBCInput_1", true);
				end_Hash.put("tJDBCInput_1", System.currentTimeMillis());

				/**
				 * [tJDBCInput_1 end ] stop
				 */

				/**
				 * [tJava_7 end ] start
				 */

				currentComponent = "tJava_7";

				ok_Hash.put("tJava_7", true);
				end_Hash.put("tJava_7", System.currentTimeMillis());

				if (context.TargetID < 0) {

					tJDBCConnection_2Process(globalMap);
				}

				if (context.Version < 1) {

					tJDBCConnection_4Process(globalMap);
				}

				/**
				 * [tJava_7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCInput_1_SUBPROCESS_STATE", 1);
	}

	public void tJDBCConnection_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCConnection_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCConnection_2 begin ] start
				 */

				ok_Hash.put("tJDBCConnection_2", false);
				start_Hash.put("tJDBCConnection_2", System.currentTimeMillis());
				currentComponent = "tJDBCConnection_2";

				int tos_count_tJDBCConnection_2 = 0;

				String url_tJDBCConnection_2 = context.DB_StagingI2B2_jdbcurl;

				String userName_tJDBCConnection_2 = context.DB_StagingI2B2_Username;
				String password_tJDBCConnection_2 = context.DB_StagingI2B2_Password;

				java.sql.Connection conn_tJDBCConnection_2 = null;

				String sharedConnectionName_tJDBCConnection_2 = "dbConnection";
				conn_tJDBCConnection_2 = SharedDBConnection.getDBConnection(
						context.DB_StagingI2B2_sqlclassname,
						url_tJDBCConnection_2, userName_tJDBCConnection_2,
						password_tJDBCConnection_2,
						sharedConnectionName_tJDBCConnection_2);
				if (null != conn_tJDBCConnection_2) {

					conn_tJDBCConnection_2.setAutoCommit(false);
				}

				globalMap.put("conn_tJDBCConnection_2", conn_tJDBCConnection_2);
				globalMap.put("url_tJDBCConnection_2", url_tJDBCConnection_2);
				// globalMap.put("user_tJDBCConnection_2",
				// userName_tJDBCConnection_2);
				// globalMap.put("pass_tJDBCConnection_2",
				// password_tJDBCConnection_2);

				/**
				 * [tJDBCConnection_2 begin ] stop
				 */
				/**
				 * [tJDBCConnection_2 main ] start
				 */

				currentComponent = "tJDBCConnection_2";

				tos_count_tJDBCConnection_2++;

				/**
				 * [tJDBCConnection_2 main ] stop
				 */
				/**
				 * [tJDBCConnection_2 end ] start
				 */

				currentComponent = "tJDBCConnection_2";

				ok_Hash.put("tJDBCConnection_2", true);
				end_Hash.put("tJDBCConnection_2", System.currentTimeMillis());

				/**
				 * [tJDBCConnection_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJDBCConnection_2:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tJDBCInput_3Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCConnection_2_SUBPROCESS_STATE", 1);
	}

	public static class targetIDCheckStruct implements
			routines.system.IPersistableRow<targetIDCheckStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_SaveTargetProjects = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects = new byte[0];

		public Integer TargetID;

		public Integer getTargetID() {
			return this.TargetID;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_SaveTargetProjects) {

				try {

					int length = 0;

					this.TargetID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.TargetID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TargetID=" + String.valueOf(TargetID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(targetIDCheckStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				targetIDCheckStruct targetIDCheck = new targetIDCheckStruct();

				/**
				 * [tJavaFlex_1 begin ] start
				 */

				ok_Hash.put("tJavaFlex_1", false);
				start_Hash.put("tJavaFlex_1", System.currentTimeMillis());
				currentComponent = "tJavaFlex_1";

				int tos_count_tJavaFlex_1 = 0;

				// start part of your Java code
				int counter = 0;

				/**
				 * [tJavaFlex_1 begin ] stop
				 */

				/**
				 * [tJDBCInput_3 begin ] start
				 */

				ok_Hash.put("tJDBCInput_3", false);
				start_Hash.put("tJDBCInput_3", System.currentTimeMillis());
				currentComponent = "tJDBCInput_3";

				int tos_count_tJDBCInput_3 = 0;

				int nb_line_tJDBCInput_3 = 0;
				java.sql.Connection conn_tJDBCInput_3 = null;
				conn_tJDBCInput_3 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");
				if (null == conn_tJDBCInput_3) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCInput_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tJDBCInput_3 = dataSources_tJDBCInput_3.get("")
							.getConnection();
					// globalMap.put("conn_tJDBCConnection_2",
					// conn_tJDBCInput_3);
				}

				java.sql.Statement stmt_tJDBCInput_3 = conn_tJDBCInput_3
						.createStatement();

				String dbquery_tJDBCInput_3 = "select  TARGET_ID  from "
						+ context.DB_StagingI2B2_Schema + "."
						+ context.TableIOETarget + " ORDER BY TARGET_ID DESC";

				globalMap.put("tJDBCInput_3_QUERY", dbquery_tJDBCInput_3);

				java.sql.ResultSet rs_tJDBCInput_3 = stmt_tJDBCInput_3
						.executeQuery(dbquery_tJDBCInput_3);
				java.sql.ResultSetMetaData rsmd_tJDBCInput_3 = rs_tJDBCInput_3
						.getMetaData();
				int colQtyInRs_tJDBCInput_3 = rsmd_tJDBCInput_3
						.getColumnCount();

				String tmpContent_tJDBCInput_3 = null;
				int column_index_tJDBCInput_3 = 1;
				while (rs_tJDBCInput_3.next()) {
					nb_line_tJDBCInput_3++;

					column_index_tJDBCInput_3 = 1;

					if (colQtyInRs_tJDBCInput_3 < column_index_tJDBCInput_3) {
						targetIDCheck.TargetID = null;
					} else {

						if (rs_tJDBCInput_3
								.getObject(column_index_tJDBCInput_3) != null) {
							targetIDCheck.TargetID = rs_tJDBCInput_3
									.getInt(column_index_tJDBCInput_3);
						} else {
							targetIDCheck.TargetID = null;
						}

						if (rs_tJDBCInput_3.wasNull()) {
							targetIDCheck.TargetID = null;
						}
					}

					/**
					 * [tJDBCInput_3 begin ] stop
					 */
					/**
					 * [tJDBCInput_3 main ] start
					 */

					currentComponent = "tJDBCInput_3";

					tos_count_tJDBCInput_3++;

					/**
					 * [tJDBCInput_3 main ] stop
					 */

					/**
					 * [tJavaFlex_1 main ] start
					 */

					currentComponent = "tJavaFlex_1";

					if ((counter == 0) && (targetIDCheck.TargetID != null)) {

						context.TargetID = targetIDCheck.TargetID + 1;
						context.DateCreated = TalendDate.parseDate(
								"dd-MM-yyyy hh:mm:ss",
								TalendDate.getDate("dd-MM-yyyy hh:mm:ss"));
						System.out
								.println("Saves this target project with TargetProjectID="
										+ context.TargetID + ".");

					}
					counter++;

					tos_count_tJavaFlex_1++;

					/**
					 * [tJavaFlex_1 main ] stop
					 */

					/**
					 * [tJDBCInput_3 end ] start
					 */

					currentComponent = "tJDBCInput_3";

				}
				rs_tJDBCInput_3.close();
				stmt_tJDBCInput_3.close();

				globalMap.put("tJDBCInput_3_NB_LINE", nb_line_tJDBCInput_3);

				ok_Hash.put("tJDBCInput_3", true);
				end_Hash.put("tJDBCInput_3", System.currentTimeMillis());

				/**
				 * [tJDBCInput_3 end ] stop
				 */

				/**
				 * [tJavaFlex_1 end ] start
				 */

				currentComponent = "tJavaFlex_1";

				// end of the component, outside/closing the loop

				ok_Hash.put("tJavaFlex_1", true);
				end_Hash.put("tJavaFlex_1", System.currentTimeMillis());

				if (context.Version < 1) {

					tJDBCConnection_4Process(globalMap);
				}

				/**
				 * [tJavaFlex_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCInput_3_SUBPROCESS_STATE", 1);
	}

	public void tJDBCConnection_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCConnection_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCConnection_4 begin ] start
				 */

				ok_Hash.put("tJDBCConnection_4", false);
				start_Hash.put("tJDBCConnection_4", System.currentTimeMillis());
				currentComponent = "tJDBCConnection_4";

				int tos_count_tJDBCConnection_4 = 0;

				String url_tJDBCConnection_4 = context.DB_StagingI2B2_jdbcurl;

				String userName_tJDBCConnection_4 = context.DB_StagingI2B2_Username;
				String password_tJDBCConnection_4 = context.DB_StagingI2B2_Password;

				java.sql.Connection conn_tJDBCConnection_4 = null;

				String sharedConnectionName_tJDBCConnection_4 = "dbConnection";
				conn_tJDBCConnection_4 = SharedDBConnection.getDBConnection(
						context.DB_StagingI2B2_sqlclassname,
						url_tJDBCConnection_4, userName_tJDBCConnection_4,
						password_tJDBCConnection_4,
						sharedConnectionName_tJDBCConnection_4);
				if (null != conn_tJDBCConnection_4) {

					conn_tJDBCConnection_4.setAutoCommit(false);
				}

				globalMap.put("conn_tJDBCConnection_4", conn_tJDBCConnection_4);
				globalMap.put("url_tJDBCConnection_4", url_tJDBCConnection_4);
				// globalMap.put("user_tJDBCConnection_4",
				// userName_tJDBCConnection_4);
				// globalMap.put("pass_tJDBCConnection_4",
				// password_tJDBCConnection_4);

				/**
				 * [tJDBCConnection_4 begin ] stop
				 */
				/**
				 * [tJDBCConnection_4 main ] start
				 */

				currentComponent = "tJDBCConnection_4";

				tos_count_tJDBCConnection_4++;

				/**
				 * [tJDBCConnection_4 main ] stop
				 */
				/**
				 * [tJDBCConnection_4 end ] start
				 */

				currentComponent = "tJDBCConnection_4";

				ok_Hash.put("tJDBCConnection_4", true);
				end_Hash.put("tJDBCConnection_4", System.currentTimeMillis());

				/**
				 * [tJDBCConnection_4 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJDBCConnection_4:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tJDBCInput_2Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCConnection_4_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_SaveTargetProjects = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects = new byte[0];

		public Integer Version;

		public Integer getVersion() {
			return this.Version;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_SaveTargetProjects) {

				try {

					int length = 0;

					this.Version = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Version, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Version=" + String.valueOf(Version));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class versionCheckStruct implements
			routines.system.IPersistableRow<versionCheckStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_SaveTargetProjects = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects = new byte[0];

		public Integer Version;

		public Integer getVersion() {
			return this.Version;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_SaveTargetProjects) {

				try {

					int length = 0;

					this.Version = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Version, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Version=" + String.valueOf(Version));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(versionCheckStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				versionCheckStruct versionCheck = new versionCheckStruct();
				row2Struct row2 = new row2Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());
				currentComponent = "tLogRow_1";

				int tos_count_tLogRow_1 = 0;

				// /////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[1];

					public void addRow(String[] row) {

						for (int i = 0; i < 1; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i],
										row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 0 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 0 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(
									new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(),
									(Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);

						// last column
						for (int i = 0; i < colLengths[0]
								- fillChars[0].length() - fillChars[1].length()
								+ 2; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}
				}
				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
				util_tLogRow_1.setTableName("tLogRow_1");
				util_tLogRow_1.addRow(new String[] { "Version", });
				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
				// /////////////////////

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tJavaFlex_3 begin ] start
				 */

				ok_Hash.put("tJavaFlex_3", false);
				start_Hash.put("tJavaFlex_3", System.currentTimeMillis());
				currentComponent = "tJavaFlex_3";

				int tos_count_tJavaFlex_3 = 0;

				// start part of your Java code
				int counter = 0;

				/**
				 * [tJavaFlex_3 begin ] stop
				 */

				/**
				 * [tJDBCInput_2 begin ] start
				 */

				ok_Hash.put("tJDBCInput_2", false);
				start_Hash.put("tJDBCInput_2", System.currentTimeMillis());
				currentComponent = "tJDBCInput_2";

				int tos_count_tJDBCInput_2 = 0;

				int nb_line_tJDBCInput_2 = 0;
				java.sql.Connection conn_tJDBCInput_2 = null;
				conn_tJDBCInput_2 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_4");
				if (null == conn_tJDBCInput_2) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCInput_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tJDBCInput_2 = dataSources_tJDBCInput_2.get("")
							.getConnection();
					// globalMap.put("conn_tJDBCConnection_4",
					// conn_tJDBCInput_2);
				}

				java.sql.Statement stmt_tJDBCInput_2 = conn_tJDBCInput_2
						.createStatement();

				String dbquery_tJDBCInput_2 = "select VERSION  from "
						+ context.DB_StagingI2B2_Schema + "."
						+ context.TableIOETarget + " WHERE TARGETPROJECT_ID="
						+ context.TargetProjectID + " ORDER BY VERSION DESC";

				globalMap.put("tJDBCInput_2_QUERY", dbquery_tJDBCInput_2);

				java.sql.ResultSet rs_tJDBCInput_2 = stmt_tJDBCInput_2
						.executeQuery(dbquery_tJDBCInput_2);
				java.sql.ResultSetMetaData rsmd_tJDBCInput_2 = rs_tJDBCInput_2
						.getMetaData();
				int colQtyInRs_tJDBCInput_2 = rsmd_tJDBCInput_2
						.getColumnCount();

				String tmpContent_tJDBCInput_2 = null;
				int column_index_tJDBCInput_2 = 1;
				while (rs_tJDBCInput_2.next()) {
					nb_line_tJDBCInput_2++;

					column_index_tJDBCInput_2 = 1;

					if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
						versionCheck.Version = null;
					} else {

						if (rs_tJDBCInput_2
								.getObject(column_index_tJDBCInput_2) != null) {
							versionCheck.Version = rs_tJDBCInput_2
									.getInt(column_index_tJDBCInput_2);
						} else {
							versionCheck.Version = null;
						}

						if (rs_tJDBCInput_2.wasNull()) {
							versionCheck.Version = null;
						}
					}

					/**
					 * [tJDBCInput_2 begin ] stop
					 */
					/**
					 * [tJDBCInput_2 main ] start
					 */

					currentComponent = "tJDBCInput_2";

					tos_count_tJDBCInput_2++;

					/**
					 * [tJDBCInput_2 main ] stop
					 */

					/**
					 * [tJavaFlex_3 main ] start
					 */

					currentComponent = "tJavaFlex_3";

					row2.Version = versionCheck.Version;

					if ((counter == 0) && (versionCheck.Version != null)) {

						context.Version = versionCheck.Version + 1;
						context.DateCreated = TalendDate.parseDate(
								"dd-MM-yyyy HH:mm:ss",
								TalendDate.getDate("dd-MM-yyyy HH:mm:ss"));
						System.out
								.println("Saves this target project with a new version="
										+ context.Version
										+ " (Created: "
										+ context.DateCreated + ").");

					}
					counter++;

					tos_count_tJavaFlex_3++;

					/**
					 * [tJavaFlex_3 main ] stop
					 */

					/**
					 * [tLogRow_1 main ] start
					 */

					currentComponent = "tLogRow_1";

					// /////////////////////

					String[] row_tLogRow_1 = new String[1];

					if (row2.Version != null) { //
						row_tLogRow_1[0] = String.valueOf(row2.Version);

					} //

					util_tLogRow_1.addRow(row_tLogRow_1);
					nb_line_tLogRow_1++;
					// ////

					// ////

					// /////////////////////

					tos_count_tLogRow_1++;

					/**
					 * [tLogRow_1 main ] stop
					 */

					/**
					 * [tJDBCInput_2 end ] start
					 */

					currentComponent = "tJDBCInput_2";

				}
				rs_tJDBCInput_2.close();
				stmt_tJDBCInput_2.close();

				globalMap.put("tJDBCInput_2_NB_LINE", nb_line_tJDBCInput_2);

				ok_Hash.put("tJDBCInput_2", true);
				end_Hash.put("tJDBCInput_2", System.currentTimeMillis());

				/**
				 * [tJDBCInput_2 end ] stop
				 */

				/**
				 * [tJavaFlex_3 end ] start
				 */

				currentComponent = "tJavaFlex_3";

				ok_Hash.put("tJavaFlex_3", true);
				end_Hash.put("tJavaFlex_3", System.currentTimeMillis());

				/**
				 * [tJavaFlex_3 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				// ////

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
							.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(
							new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				consoleOut_tLogRow_1
						.println(util_tLogRow_1.format().toString());
				consoleOut_tLogRow_1.flush();
				// ////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

				// /////////////////////

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCInput_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());
				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				TOSHandler
						.statusError("Coudln't load temp file for saving target related metadata.");
				System.out
						.println("Coudln't load temp file for saving target related metadata.");

				/**
				 * [tJava_2 begin ] stop
				 */
				/**
				 * [tJava_2 main ] start
				 */

				currentComponent = "tJava_2";

				tos_count_tJava_2++;

				/**
				 * [tJava_2 main ] stop
				 */
				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				/**
				 * [tJava_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_5 begin ] start
				 */

				ok_Hash.put("tJava_5", false);
				start_Hash.put("tJava_5", System.currentTimeMillis());
				currentComponent = "tJava_5";

				int tos_count_tJava_5 = 0;

				if (context.TargetProjectID < 0) {

					System.out
							.println("Saves this target project as the first entry of this i2b2 project with TargetProjectID=0.");

				}

				if (context.TargetID < 0) {

					System.out
							.println("Saves this target as the first entry of this target project with TargetID=0.");

				}

				if (context.Version < 1) {

					System.out
							.println("Saves this target as the first entry of this target project with Version=1.");

				}

				context.TargetProjectID = context.TargetProjectID < 0 ? 0
						: context.TargetProjectID;
				context.TargetID = context.TargetID < 0 ? 0 : context.TargetID;
				context.Version = context.Version < 1 ? 1 : context.Version;

				System.out.println("1:" + context.OracleSchema);
				System.out.println("2:" + context.TableIOETarget);
				System.out.println("3:" + context.TargetProjectID);
				System.out.println("4:" + context.Version);

				/**
				 * [tJava_5 begin ] stop
				 */
				/**
				 * [tJava_5 main ] start
				 */

				currentComponent = "tJava_5";

				tos_count_tJava_5++;

				/**
				 * [tJava_5 main ] stop
				 */
				/**
				 * [tJava_5 end ] start
				 */

				currentComponent = "tJava_5";

				ok_Hash.put("tJava_5", true);
				end_Hash.put("tJava_5", System.currentTimeMillis());

				/**
				 * [tJava_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());
				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				/**
				 * [tPostjob_1 begin ] stop
				 */
				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */
				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				tJDBCConnection_3Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tJDBCConnection_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCConnection_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCConnection_3 begin ] start
				 */

				ok_Hash.put("tJDBCConnection_3", false);
				start_Hash.put("tJDBCConnection_3", System.currentTimeMillis());
				currentComponent = "tJDBCConnection_3";

				int tos_count_tJDBCConnection_3 = 0;

				String url_tJDBCConnection_3 = context.DB_StagingI2B2_jdbcurl;

				String userName_tJDBCConnection_3 = context.DB_StagingI2B2_Username;
				String password_tJDBCConnection_3 = context.DB_StagingI2B2_Password;

				java.sql.Connection conn_tJDBCConnection_3 = null;

				String sharedConnectionName_tJDBCConnection_3 = "dbConnection";
				conn_tJDBCConnection_3 = SharedDBConnection.getDBConnection(
						context.DB_StagingI2B2_sqlclassname,
						url_tJDBCConnection_3, userName_tJDBCConnection_3,
						password_tJDBCConnection_3,
						sharedConnectionName_tJDBCConnection_3);
				if (null != conn_tJDBCConnection_3) {

					conn_tJDBCConnection_3.setAutoCommit(false);
				}

				globalMap.put("conn_tJDBCConnection_3", conn_tJDBCConnection_3);
				globalMap.put("url_tJDBCConnection_3", url_tJDBCConnection_3);
				// globalMap.put("user_tJDBCConnection_3",
				// userName_tJDBCConnection_3);
				// globalMap.put("pass_tJDBCConnection_3",
				// password_tJDBCConnection_3);

				/**
				 * [tJDBCConnection_3 begin ] stop
				 */
				/**
				 * [tJDBCConnection_3 main ] start
				 */

				currentComponent = "tJDBCConnection_3";

				tos_count_tJDBCConnection_3++;

				/**
				 * [tJDBCConnection_3 main ] stop
				 */
				/**
				 * [tJDBCConnection_3 end ] start
				 */

				currentComponent = "tJDBCConnection_3";

				ok_Hash.put("tJDBCConnection_3", true);
				end_Hash.put("tJDBCConnection_3", System.currentTimeMillis());

				/**
				 * [tJDBCConnection_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJDBCConnection_3:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tFileInputDelimited_2Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCConnection_3_SUBPROCESS_STATE", 1);
	}

	public static class commitStruct implements
			routines.system.IPersistableRow<commitStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_SaveTargetProjects = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer TARGET_ID;

		public Integer getTARGET_ID() {
			return this.TARGET_ID;
		}

		public Integer TARGETPROJECT_ID;

		public Integer getTARGETPROJECT_ID() {
			return this.TARGETPROJECT_ID;
		}

		public Integer VERSION;

		public Integer getVERSION() {
			return this.VERSION;
		}

		public java.util.Date CREATED;

		public java.util.Date getCREATED() {
			return this.CREATED;
		}

		public java.util.Date LAST_MODIFIED;

		public java.util.Date getLAST_MODIFIED() {
			return this.LAST_MODIFIED;
		}

		public String USER_ID;

		public String getUSER_ID() {
			return this.USER_ID;
		}

		public String TARGET_DB_SCHEMA;

		public String getTARGET_DB_SCHEMA() {
			return this.TARGET_DB_SCHEMA;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.TARGET_ID == null) ? 0 : this.TARGET_ID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final commitStruct other = (commitStruct) obj;

			if (this.TARGET_ID == null) {
				if (other.TARGET_ID != null)
					return false;
			} else if (!this.TARGET_ID.equals(other.TARGET_ID))
				return false;

			return true;
		}

		public void copyDataTo(commitStruct other) {

			other.TARGET_ID = this.TARGET_ID;
			other.TARGETPROJECT_ID = this.TARGETPROJECT_ID;
			other.VERSION = this.VERSION;
			other.CREATED = this.CREATED;
			other.LAST_MODIFIED = this.LAST_MODIFIED;
			other.USER_ID = this.USER_ID;
			other.TARGET_DB_SCHEMA = this.TARGET_DB_SCHEMA;

		}

		public void copyKeysDataTo(commitStruct other) {

			other.TARGET_ID = this.TARGET_ID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_SaveTargetProjects) {

				try {

					int length = 0;

					this.TARGET_ID = readInteger(dis);

					this.TARGETPROJECT_ID = readInteger(dis);

					this.VERSION = readInteger(dis);

					this.CREATED = readDate(dis);

					this.LAST_MODIFIED = readDate(dis);

					this.USER_ID = readString(dis);

					this.TARGET_DB_SCHEMA = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.TARGET_ID, dos);

				// Integer

				writeInteger(this.TARGETPROJECT_ID, dos);

				// Integer

				writeInteger(this.VERSION, dos);

				// java.util.Date

				writeDate(this.CREATED, dos);

				// java.util.Date

				writeDate(this.LAST_MODIFIED, dos);

				// String

				writeString(this.USER_ID, dos);

				// String

				writeString(this.TARGET_DB_SCHEMA, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TARGET_ID=" + String.valueOf(TARGET_ID));
			sb.append(",TARGETPROJECT_ID=" + String.valueOf(TARGETPROJECT_ID));
			sb.append(",VERSION=" + String.valueOf(VERSION));
			sb.append(",CREATED=" + String.valueOf(CREATED));
			sb.append(",LAST_MODIFIED=" + String.valueOf(LAST_MODIFIED));
			sb.append(",USER_ID=" + USER_ID);
			sb.append(",TARGET_DB_SCHEMA=" + TARGET_DB_SCHEMA);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(commitStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.TARGET_ID, other.TARGET_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class writeTargetProjectsStruct implements
			routines.system.IPersistableRow<writeTargetProjectsStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_SaveTargetProjects = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer TARGETPROJECT_ID;

		public Integer getTARGETPROJECT_ID() {
			return this.TARGETPROJECT_ID;
		}

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.TARGETPROJECT_ID == null) ? 0
								: this.TARGETPROJECT_ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final writeTargetProjectsStruct other = (writeTargetProjectsStruct) obj;

			if (this.TARGETPROJECT_ID == null) {
				if (other.TARGETPROJECT_ID != null)
					return false;
			} else if (!this.TARGETPROJECT_ID.equals(other.TARGETPROJECT_ID))
				return false;

			return true;
		}

		public void copyDataTo(writeTargetProjectsStruct other) {

			other.TARGETPROJECT_ID = this.TARGETPROJECT_ID;
			other.NAME = this.NAME;
			other.DESCRIPTION = this.DESCRIPTION;

		}

		public void copyKeysDataTo(writeTargetProjectsStruct other) {

			other.TARGETPROJECT_ID = this.TARGETPROJECT_ID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_SaveTargetProjects) {

				try {

					int length = 0;

					this.TARGETPROJECT_ID = readInteger(dis);

					this.NAME = readString(dis);

					this.DESCRIPTION = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.TARGETPROJECT_ID, dos);

				// String

				writeString(this.NAME, dos);

				// String

				writeString(this.DESCRIPTION, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TARGETPROJECT_ID=" + String.valueOf(TARGETPROJECT_ID));
			sb.append(",NAME=" + NAME);
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(writeTargetProjectsStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.TARGETPROJECT_ID,
					other.TARGETPROJECT_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class writeTargetVersionsStruct implements
			routines.system.IPersistableRow<writeTargetVersionsStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_SaveTargetProjects = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer TARGET_ID;

		public Integer getTARGET_ID() {
			return this.TARGET_ID;
		}

		public Integer TARGETPROJECT_ID;

		public Integer getTARGETPROJECT_ID() {
			return this.TARGETPROJECT_ID;
		}

		public Integer VERSION;

		public Integer getVERSION() {
			return this.VERSION;
		}

		public java.util.Date CREATED;

		public java.util.Date getCREATED() {
			return this.CREATED;
		}

		public java.util.Date LAST_MODIFIED;

		public java.util.Date getLAST_MODIFIED() {
			return this.LAST_MODIFIED;
		}

		public String USER_ID;

		public String getUSER_ID() {
			return this.USER_ID;
		}

		public String TARGET_DB_SCHEMA;

		public String getTARGET_DB_SCHEMA() {
			return this.TARGET_DB_SCHEMA;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.TARGET_ID == null) ? 0 : this.TARGET_ID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final writeTargetVersionsStruct other = (writeTargetVersionsStruct) obj;

			if (this.TARGET_ID == null) {
				if (other.TARGET_ID != null)
					return false;
			} else if (!this.TARGET_ID.equals(other.TARGET_ID))
				return false;

			return true;
		}

		public void copyDataTo(writeTargetVersionsStruct other) {

			other.TARGET_ID = this.TARGET_ID;
			other.TARGETPROJECT_ID = this.TARGETPROJECT_ID;
			other.VERSION = this.VERSION;
			other.CREATED = this.CREATED;
			other.LAST_MODIFIED = this.LAST_MODIFIED;
			other.USER_ID = this.USER_ID;
			other.TARGET_DB_SCHEMA = this.TARGET_DB_SCHEMA;

		}

		public void copyKeysDataTo(writeTargetVersionsStruct other) {

			other.TARGET_ID = this.TARGET_ID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_SaveTargetProjects) {

				try {

					int length = 0;

					this.TARGET_ID = readInteger(dis);

					this.TARGETPROJECT_ID = readInteger(dis);

					this.VERSION = readInteger(dis);

					this.CREATED = readDate(dis);

					this.LAST_MODIFIED = readDate(dis);

					this.USER_ID = readString(dis);

					this.TARGET_DB_SCHEMA = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.TARGET_ID, dos);

				// Integer

				writeInteger(this.TARGETPROJECT_ID, dos);

				// Integer

				writeInteger(this.VERSION, dos);

				// java.util.Date

				writeDate(this.CREATED, dos);

				// java.util.Date

				writeDate(this.LAST_MODIFIED, dos);

				// String

				writeString(this.USER_ID, dos);

				// String

				writeString(this.TARGET_DB_SCHEMA, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TARGET_ID=" + String.valueOf(TARGET_ID));
			sb.append(",TARGETPROJECT_ID=" + String.valueOf(TARGETPROJECT_ID));
			sb.append(",VERSION=" + String.valueOf(VERSION));
			sb.append(",CREATED=" + String.valueOf(CREATED));
			sb.append(",LAST_MODIFIED=" + String.valueOf(LAST_MODIFIED));
			sb.append(",USER_ID=" + USER_ID);
			sb.append(",TARGET_DB_SCHEMA=" + TARGET_DB_SCHEMA);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(writeTargetVersionsStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.TARGET_ID, other.TARGET_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class tmpFileRowStruct implements
			routines.system.IPersistableRow<tmpFileRowStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_SaveTargetProjects = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects = new byte[0];

		public Integer TARGETPROJECT_ID;

		public Integer getTARGETPROJECT_ID() {
			return this.TARGETPROJECT_ID;
		}

		public Integer TARGET_ID;

		public Integer getTARGET_ID() {
			return this.TARGET_ID;
		}

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		public Integer VERSION;

		public Integer getVERSION() {
			return this.VERSION;
		}

		public String TARGET_DB_SCHEMA;

		public String getTARGET_DB_SCHEMA() {
			return this.TARGET_DB_SCHEMA;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_SaveTargetProjects,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_SaveTargetProjects) {

				try {

					int length = 0;

					this.TARGETPROJECT_ID = readInteger(dis);

					this.TARGET_ID = readInteger(dis);

					this.NAME = readString(dis);

					this.DESCRIPTION = readString(dis);

					this.VERSION = readInteger(dis);

					this.TARGET_DB_SCHEMA = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.TARGETPROJECT_ID, dos);

				// Integer

				writeInteger(this.TARGET_ID, dos);

				// String

				writeString(this.NAME, dos);

				// String

				writeString(this.DESCRIPTION, dos);

				// Integer

				writeInteger(this.VERSION, dos);

				// String

				writeString(this.TARGET_DB_SCHEMA, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TARGETPROJECT_ID=" + String.valueOf(TARGETPROJECT_ID));
			sb.append(",TARGET_ID=" + String.valueOf(TARGET_ID));
			sb.append(",NAME=" + NAME);
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append(",VERSION=" + String.valueOf(VERSION));
			sb.append(",TARGET_DB_SCHEMA=" + TARGET_DB_SCHEMA);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tmpFileRowStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tmpFileRowStruct tmpFileRow = new tmpFileRowStruct();
				writeTargetProjectsStruct writeTargetProjects = new writeTargetProjectsStruct();
				writeTargetVersionsStruct writeTargetVersions = new writeTargetVersionsStruct();
				commitStruct commit = new commitStruct();

				/**
				 * [tJDBCOutput_1 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_1", false);
				start_Hash.put("tJDBCOutput_1", System.currentTimeMillis());
				currentComponent = "tJDBCOutput_1";

				int tos_count_tJDBCOutput_1 = 0;

				int updateKeyCount_tJDBCOutput_1 = 1;
				if (updateKeyCount_tJDBCOutput_1 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tJDBCOutput_1 = 0;
				int nb_line_update_tJDBCOutput_1 = 0;
				int nb_line_inserted_tJDBCOutput_1 = 0;
				int nb_line_deleted_tJDBCOutput_1 = 0;
				int nb_line_rejected_tJDBCOutput_1 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_1 = 0;

				int deletedCount_tJDBCOutput_1 = 0;
				int updatedCount_tJDBCOutput_1 = 0;
				int insertedCount_tJDBCOutput_1 = 0;
				int rejectedCount_tJDBCOutput_1 = 0;

				boolean whetherReject_tJDBCOutput_1 = false;

				java.sql.Connection connection_tJDBCOutput_1 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_3");
				if (null == connection_tJDBCOutput_1) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCOutput_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					connection_tJDBCOutput_1 = dataSources_tJDBCOutput_1
							.get("").getConnection();
				}

				int batchSize_tJDBCOutput_1 = 10000;
				int batchSizeCounter_tJDBCOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tJDBCOutput_1 = connection_tJDBCOutput_1
						.prepareStatement("SELECT COUNT(1) FROM "
								+ context.DB_StagingI2B2_Schema + "."
								+ context.TableIOETargetProject
								+ " WHERE TARGETPROJECT_ID = ?");
				String insert_tJDBCOutput_1 = "INSERT INTO "
						+ context.DB_StagingI2B2_Schema + "."
						+ context.TableIOETargetProject
						+ " (TARGETPROJECT_ID,NAME,DESCRIPTION) VALUES (?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tJDBCOutput_1 = connection_tJDBCOutput_1
						.prepareStatement(insert_tJDBCOutput_1);
				String update_tJDBCOutput_1 = "UPDATE "
						+ context.DB_StagingI2B2_Schema
						+ "."
						+ context.TableIOETargetProject
						+ " SET NAME = ?,DESCRIPTION = ? WHERE TARGETPROJECT_ID = ?";
				java.sql.PreparedStatement pstmtUpdate_tJDBCOutput_1 = connection_tJDBCOutput_1
						.prepareStatement(update_tJDBCOutput_1);

				/**
				 * [tJDBCOutput_1 begin ] stop
				 */

				/**
				 * [tJDBCCommit_1 begin ] start
				 */

				ok_Hash.put("tJDBCCommit_1", false);
				start_Hash.put("tJDBCCommit_1", System.currentTimeMillis());
				currentComponent = "tJDBCCommit_1";

				int tos_count_tJDBCCommit_1 = 0;

				/**
				 * [tJDBCCommit_1 begin ] stop
				 */

				/**
				 * [tJDBCOutput_2 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_2", false);
				start_Hash.put("tJDBCOutput_2", System.currentTimeMillis());
				currentComponent = "tJDBCOutput_2";

				int tos_count_tJDBCOutput_2 = 0;

				int updateKeyCount_tJDBCOutput_2 = 1;
				if (updateKeyCount_tJDBCOutput_2 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tJDBCOutput_2 = 0;
				int nb_line_update_tJDBCOutput_2 = 0;
				int nb_line_inserted_tJDBCOutput_2 = 0;
				int nb_line_deleted_tJDBCOutput_2 = 0;
				int nb_line_rejected_tJDBCOutput_2 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_2 = 0;

				int deletedCount_tJDBCOutput_2 = 0;
				int updatedCount_tJDBCOutput_2 = 0;
				int insertedCount_tJDBCOutput_2 = 0;
				int rejectedCount_tJDBCOutput_2 = 0;

				boolean whetherReject_tJDBCOutput_2 = false;

				java.sql.Connection connection_tJDBCOutput_2 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_3");
				if (null == connection_tJDBCOutput_2) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCOutput_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					connection_tJDBCOutput_2 = dataSources_tJDBCOutput_2
							.get("").getConnection();
				}

				int batchSize_tJDBCOutput_2 = 10000;
				int batchSizeCounter_tJDBCOutput_2 = 0;

				java.sql.PreparedStatement pstmt_tJDBCOutput_2 = connection_tJDBCOutput_2
						.prepareStatement("SELECT COUNT(1) FROM "
								+ context.DB_StagingI2B2_Schema + "."
								+ context.TableIOETarget
								+ " WHERE TARGET_ID = ?");
				String insert_tJDBCOutput_2 = "INSERT INTO "
						+ context.DB_StagingI2B2_Schema
						+ "."
						+ context.TableIOETarget
						+ " (TARGET_ID,TARGETPROJECT_ID,VERSION,CREATED,LAST_MODIFIED,USER_ID,TARGET_DB_SCHEMA) VALUES (?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tJDBCOutput_2 = connection_tJDBCOutput_2
						.prepareStatement(insert_tJDBCOutput_2);
				String update_tJDBCOutput_2 = "UPDATE "
						+ context.DB_StagingI2B2_Schema
						+ "."
						+ context.TableIOETarget
						+ " SET TARGETPROJECT_ID = ?,VERSION = ?,CREATED = ?,LAST_MODIFIED = ?,USER_ID = ?,TARGET_DB_SCHEMA = ? WHERE TARGET_ID = ?";
				java.sql.PreparedStatement pstmtUpdate_tJDBCOutput_2 = connection_tJDBCOutput_2
						.prepareStatement(update_tJDBCOutput_2);

				/**
				 * [tJDBCOutput_2 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());
				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
					int TargetProjectID;
					int TargetID;
					int Version;
					java.util.Date CurrentDate;
					java.util.Date CreatedDate;
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				writeTargetProjectsStruct writeTargetProjects_tmp = new writeTargetProjectsStruct();
				writeTargetVersionsStruct writeTargetVersions_tmp = new writeTargetVersionsStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;

				char fieldSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_2 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_2 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_2 = /**
				 * Start field
				 * tFileInputDelimited_2:FILENAME
				 */
				context.DataFile/** End field tFileInputDelimited_2:FILENAME */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;

				try {

					String[] rowtFileInputDelimited_2 = null;
					int currentLinetFileInputDelimited_2 = 0;
					int outputLinetFileInputDelimited_2 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_2 = 0;
							if (footer_value_tFileInputDelimited_2 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_2,
									fieldSeparator_tFileInputDelimited_2[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_2)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_2[0]);
						}

						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
							csvReadertFileInputDelimited_2.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_2[0]);

						csvReadertFileInputDelimited_2.setQuoteChar('\"');

						csvReadertFileInputDelimited_2.setEscapeChar('\\');

						if (footer_tFileInputDelimited_2 > 0) {
							for (totalLinetFileInputDelimited_2 = 0; totalLinetFileInputDelimited_2 < 1; totalLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
							csvReadertFileInputDelimited_2
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_2.readNext()) {

								rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
										.getValues();
								if (!(rowtFileInputDelimited_2.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_2[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_2++;

								}

							}
							int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2
									- footer_tFileInputDelimited_2 < 0 ? 0
									: totalLinetFileInputDelimited_2
											- footer_tFileInputDelimited_2;
							if (lastLinetFileInputDelimited_2 > 0) {
								lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2
										: lastLineTemptFileInputDelimited_2;
							} else {
								lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
							}

							csvReadertFileInputDelimited_2.close();
							if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_2,
										fieldSeparator_tFileInputDelimited_2[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_2)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_2[0]);
							}
							csvReadertFileInputDelimited_2
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
								csvReadertFileInputDelimited_2
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_2[0]);

							csvReadertFileInputDelimited_2.setQuoteChar('\"');

							csvReadertFileInputDelimited_2.setEscapeChar('\\');

						}

						if (limittFileInputDelimited_2 != 0) {
							for (currentLinetFileInputDelimited_2 = 0; currentLinetFileInputDelimited_2 < 1; currentLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
						}
						csvReadertFileInputDelimited_2
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_2 != 0
							&& csvReadertFileInputDelimited_2 != null
							&& csvReadertFileInputDelimited_2.readNext()) {

						rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
								.getValues();

						if (rowtFileInputDelimited_2.length == 1
								&& ("\015").equals(rowtFileInputDelimited_2[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_2++;

						if (lastLinetFileInputDelimited_2 > -1
								&& currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
							break;
						}
						outputLinetFileInputDelimited_2++;
						if (limittFileInputDelimited_2 > 0
								&& outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
							break;
						}

						tmpFileRow = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						tmpFileRow = new tmpFileRowStruct();
						try {

							if (rowtFileInputDelimited_2.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_2[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								tmpFileRow.TARGETPROJECT_ID = null;

								tmpFileRow.TARGET_ID = null;

								tmpFileRow.NAME = null;

								tmpFileRow.DESCRIPTION = null;

								tmpFileRow.VERSION = null;

								tmpFileRow.TARGET_DB_SCHEMA = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_2 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_2 = 0;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										tmpFileRow.TARGETPROJECT_ID = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);

									} else {
										tmpFileRow.TARGETPROJECT_ID = null;
									}

								} else {
									tmpFileRow.TARGETPROJECT_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 1;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										tmpFileRow.TARGET_ID = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);

									} else {
										tmpFileRow.TARGET_ID = null;
									}

								} else {
									tmpFileRow.TARGET_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 2;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									tmpFileRow.NAME = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									tmpFileRow.NAME = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 3;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									tmpFileRow.DESCRIPTION = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									tmpFileRow.DESCRIPTION = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 4;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										tmpFileRow.VERSION = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);

									} else {
										tmpFileRow.VERSION = null;
									}

								} else {
									tmpFileRow.VERSION = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 5;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									tmpFileRow.TARGET_DB_SCHEMA = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									tmpFileRow.TARGET_DB_SCHEMA = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							tmpFileRow = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */
						// Start of branch "tmpFileRow"
						if (tmpFileRow != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;
								Var.TargetProjectID = context.TargetProjectID;
								Var.TargetID = context.TargetID;
								Var.Version = context.Version;
								Var.CurrentDate = TalendDate
										.parseDate(
												"yyyy/MM/dd/hh/mm/ss",
												TalendDate
														.getDate("CCYY/MM/DD/HH/mm/ss"));
								Var.CreatedDate = (context.DateCreated == null ? TalendDate
										.parseDate(
												"yyyy/MM/dd/hh/mm/ss",
												TalendDate
														.getDate("CCYY/MM/DD/hh/mm/ss"))
										: TalendDate
												.parseDate(
														"yyyy/MM/dd/hh/mm/ss",
														TalendDate
																.getDate("CCYY/MM/DD/hh/mm/ss")));// ###############################
								// ###############################
								// # Output tables

								writeTargetProjects = null;
								writeTargetVersions = null;

								// # Output table : 'writeTargetProjects'
								writeTargetProjects_tmp.TARGETPROJECT_ID = Var.TargetProjectID;
								writeTargetProjects_tmp.NAME = tmpFileRow.NAME;
								writeTargetProjects_tmp.DESCRIPTION = tmpFileRow.DESCRIPTION;
								writeTargetProjects = writeTargetProjects_tmp;

								// # Output table : 'writeTargetVersions'
								writeTargetVersions_tmp.TARGET_ID = Var.TargetID;
								writeTargetVersions_tmp.TARGETPROJECT_ID = Var.TargetProjectID;
								writeTargetVersions_tmp.VERSION = Var.Version;
								writeTargetVersions_tmp.CREATED = Var.CreatedDate;
								writeTargetVersions_tmp.LAST_MODIFIED = Var.CurrentDate;
								writeTargetVersions_tmp.USER_ID = "";
								writeTargetVersions_tmp.TARGET_DB_SCHEMA = tmpFileRow.TARGET_DB_SCHEMA;
								writeTargetVersions = writeTargetVersions_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */
							// Start of branch "writeTargetProjects"
							if (writeTargetProjects != null) {

								/**
								 * [tJDBCOutput_1 main ] start
								 */

								currentComponent = "tJDBCOutput_1";

								whetherReject_tJDBCOutput_1 = false;
								if (writeTargetProjects.TARGETPROJECT_ID == null) {
									pstmt_tJDBCOutput_1.setNull(1,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tJDBCOutput_1
											.setInt(1,
													writeTargetProjects.TARGETPROJECT_ID);
								}

								java.sql.ResultSet rs_tJDBCOutput_1 = pstmt_tJDBCOutput_1
										.executeQuery();
								int checkCount_tJDBCOutput_1 = -1;
								while (rs_tJDBCOutput_1.next()) {
									checkCount_tJDBCOutput_1 = rs_tJDBCOutput_1
											.getInt(1);
								}
								if (checkCount_tJDBCOutput_1 > 0) {
									if (writeTargetProjects.NAME == null) {
										pstmtUpdate_tJDBCOutput_1.setNull(1,
												java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tJDBCOutput_1.setString(1,
												writeTargetProjects.NAME);
									}

									if (writeTargetProjects.DESCRIPTION == null) {
										pstmtUpdate_tJDBCOutput_1.setNull(2,
												java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tJDBCOutput_1
												.setString(
														2,
														writeTargetProjects.DESCRIPTION);
									}

									if (writeTargetProjects.TARGETPROJECT_ID == null) {
										pstmtUpdate_tJDBCOutput_1.setNull(3,
												java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tJDBCOutput_1
												.setInt(3,
														writeTargetProjects.TARGETPROJECT_ID);
									}

									try {
										updatedCount_tJDBCOutput_1 = updatedCount_tJDBCOutput_1
												+ pstmtUpdate_tJDBCOutput_1
														.executeUpdate();
									} catch (java.lang.Exception e) {
										whetherReject_tJDBCOutput_1 = true;
										System.err.print(e.getMessage());
									}
								} else {
									if (writeTargetProjects.TARGETPROJECT_ID == null) {
										pstmtInsert_tJDBCOutput_1.setNull(1,
												java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tJDBCOutput_1
												.setInt(1,
														writeTargetProjects.TARGETPROJECT_ID);
									}

									if (writeTargetProjects.NAME == null) {
										pstmtInsert_tJDBCOutput_1.setNull(2,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tJDBCOutput_1.setString(2,
												writeTargetProjects.NAME);
									}

									if (writeTargetProjects.DESCRIPTION == null) {
										pstmtInsert_tJDBCOutput_1.setNull(3,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tJDBCOutput_1
												.setString(
														3,
														writeTargetProjects.DESCRIPTION);
									}

									try {
										insertedCount_tJDBCOutput_1 = insertedCount_tJDBCOutput_1
												+ pstmtInsert_tJDBCOutput_1
														.executeUpdate();
									} catch (java.lang.Exception e) {
										whetherReject_tJDBCOutput_1 = true;
										System.err.print(e.getMessage());
									}
								}
								nb_line_tJDBCOutput_1++;

								tos_count_tJDBCOutput_1++;

								/**
								 * [tJDBCOutput_1 main ] stop
								 */

							} // End of branch "writeTargetProjects"

							// Start of branch "writeTargetVersions"
							if (writeTargetVersions != null) {

								/**
								 * [tJDBCOutput_2 main ] start
								 */

								currentComponent = "tJDBCOutput_2";

								commit = null;
								whetherReject_tJDBCOutput_2 = false;
								if (writeTargetVersions.TARGET_ID == null) {
									pstmt_tJDBCOutput_2.setNull(1,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tJDBCOutput_2.setInt(1,
											writeTargetVersions.TARGET_ID);
								}

								java.sql.ResultSet rs_tJDBCOutput_2 = pstmt_tJDBCOutput_2
										.executeQuery();
								int checkCount_tJDBCOutput_2 = -1;
								while (rs_tJDBCOutput_2.next()) {
									checkCount_tJDBCOutput_2 = rs_tJDBCOutput_2
											.getInt(1);
								}
								if (checkCount_tJDBCOutput_2 > 0) {
									if (writeTargetVersions.TARGETPROJECT_ID == null) {
										pstmtUpdate_tJDBCOutput_2.setNull(1,
												java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tJDBCOutput_2
												.setInt(1,
														writeTargetVersions.TARGETPROJECT_ID);
									}

									if (writeTargetVersions.VERSION == null) {
										pstmtUpdate_tJDBCOutput_2.setNull(2,
												java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tJDBCOutput_2.setInt(2,
												writeTargetVersions.VERSION);
									}

									if (writeTargetVersions.CREATED != null) {
										pstmtUpdate_tJDBCOutput_2
												.setTimestamp(
														3,
														new java.sql.Timestamp(
																writeTargetVersions.CREATED
																		.getTime()));
									} else {
										pstmtUpdate_tJDBCOutput_2.setNull(3,
												java.sql.Types.DATE);
									}

									if (writeTargetVersions.LAST_MODIFIED != null) {
										pstmtUpdate_tJDBCOutput_2
												.setTimestamp(
														4,
														new java.sql.Timestamp(
																writeTargetVersions.LAST_MODIFIED
																		.getTime()));
									} else {
										pstmtUpdate_tJDBCOutput_2.setNull(4,
												java.sql.Types.DATE);
									}

									if (writeTargetVersions.USER_ID == null) {
										pstmtUpdate_tJDBCOutput_2.setNull(5,
												java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tJDBCOutput_2.setString(5,
												writeTargetVersions.USER_ID);
									}

									if (writeTargetVersions.TARGET_DB_SCHEMA == null) {
										pstmtUpdate_tJDBCOutput_2.setNull(6,
												java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tJDBCOutput_2
												.setString(
														6,
														writeTargetVersions.TARGET_DB_SCHEMA);
									}

									if (writeTargetVersions.TARGET_ID == null) {
										pstmtUpdate_tJDBCOutput_2.setNull(7,
												java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tJDBCOutput_2.setInt(7,
												writeTargetVersions.TARGET_ID);
									}

									try {
										updatedCount_tJDBCOutput_2 = updatedCount_tJDBCOutput_2
												+ pstmtUpdate_tJDBCOutput_2
														.executeUpdate();
									} catch (java.lang.Exception e) {
										whetherReject_tJDBCOutput_2 = true;
										System.err.print(e.getMessage());
									}
								} else {
									if (writeTargetVersions.TARGET_ID == null) {
										pstmtInsert_tJDBCOutput_2.setNull(1,
												java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tJDBCOutput_2.setInt(1,
												writeTargetVersions.TARGET_ID);
									}

									if (writeTargetVersions.TARGETPROJECT_ID == null) {
										pstmtInsert_tJDBCOutput_2.setNull(2,
												java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tJDBCOutput_2
												.setInt(2,
														writeTargetVersions.TARGETPROJECT_ID);
									}

									if (writeTargetVersions.VERSION == null) {
										pstmtInsert_tJDBCOutput_2.setNull(3,
												java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tJDBCOutput_2.setInt(3,
												writeTargetVersions.VERSION);
									}

									if (writeTargetVersions.CREATED != null) {
										pstmtInsert_tJDBCOutput_2
												.setTimestamp(
														4,
														new java.sql.Timestamp(
																writeTargetVersions.CREATED
																		.getTime()));
									} else {
										pstmtInsert_tJDBCOutput_2.setNull(4,
												java.sql.Types.DATE);
									}

									if (writeTargetVersions.LAST_MODIFIED != null) {
										pstmtInsert_tJDBCOutput_2
												.setTimestamp(
														5,
														new java.sql.Timestamp(
																writeTargetVersions.LAST_MODIFIED
																		.getTime()));
									} else {
										pstmtInsert_tJDBCOutput_2.setNull(5,
												java.sql.Types.DATE);
									}

									if (writeTargetVersions.USER_ID == null) {
										pstmtInsert_tJDBCOutput_2.setNull(6,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tJDBCOutput_2.setString(6,
												writeTargetVersions.USER_ID);
									}

									if (writeTargetVersions.TARGET_DB_SCHEMA == null) {
										pstmtInsert_tJDBCOutput_2.setNull(7,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tJDBCOutput_2
												.setString(
														7,
														writeTargetVersions.TARGET_DB_SCHEMA);
									}

									try {
										insertedCount_tJDBCOutput_2 = insertedCount_tJDBCOutput_2
												+ pstmtInsert_tJDBCOutput_2
														.executeUpdate();
									} catch (java.lang.Exception e) {
										whetherReject_tJDBCOutput_2 = true;
										System.err.print(e.getMessage());
									}
								}
								nb_line_tJDBCOutput_2++;
								if (!whetherReject_tJDBCOutput_2) {
									commit = new commitStruct();
									commit.TARGET_ID = writeTargetVersions.TARGET_ID;
									commit.TARGETPROJECT_ID = writeTargetVersions.TARGETPROJECT_ID;
									commit.VERSION = writeTargetVersions.VERSION;
									commit.CREATED = writeTargetVersions.CREATED;
									commit.LAST_MODIFIED = writeTargetVersions.LAST_MODIFIED;
									commit.USER_ID = writeTargetVersions.USER_ID;
									commit.TARGET_DB_SCHEMA = writeTargetVersions.TARGET_DB_SCHEMA;
								}

								tos_count_tJDBCOutput_2++;

								/**
								 * [tJDBCOutput_2 main ] stop
								 */
								// Start of branch "commit"
								if (commit != null) {

									/**
									 * [tJDBCCommit_1 main ] start
									 */

									currentComponent = "tJDBCCommit_1";

									java.sql.Connection conn_tJDBCCommit_1 = (java.sql.Connection) globalMap
											.get("conn_tJDBCConnection_3");
									if (null == conn_tJDBCCommit_1) {
										java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCCommit_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
												.get(KEY_DB_DATASOURCES);
										if (dataSources_tJDBCCommit_1 != null) {
											if (dataSources_tJDBCCommit_1
													.get("") != null) {
												conn_tJDBCCommit_1 = dataSources_tJDBCCommit_1
														.get("")
														.getConnection();
											}
										}
									}

									if (conn_tJDBCCommit_1 != null
											&& !conn_tJDBCCommit_1.isClosed()) {
										conn_tJDBCCommit_1.commit();
										conn_tJDBCCommit_1.close();
									}

									tos_count_tJDBCCommit_1++;

									/**
									 * [tJDBCCommit_1 main ] stop
									 */

								} // End of branch "commit"

							} // End of branch "writeTargetVersions"

						} // End of branch "tmpFileRow"

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						nb_line_tFileInputDelimited_2++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_2 != null) {
							csvReadertFileInputDelimited_2.close();
						}
					}
					if (csvReadertFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE",
								nb_line_tFileInputDelimited_2);
					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tJDBCOutput_2 end ] start
				 */

				currentComponent = "tJDBCOutput_2";

				if (pstmtUpdate_tJDBCOutput_2 != null) {

					pstmtUpdate_tJDBCOutput_2.close();

				}
				if (pstmtInsert_tJDBCOutput_2 != null) {

					pstmtInsert_tJDBCOutput_2.close();

				}
				if (pstmt_tJDBCOutput_2 != null) {

					pstmt_tJDBCOutput_2.close();

				}

				nb_line_deleted_tJDBCOutput_2 = nb_line_deleted_tJDBCOutput_2
						+ deletedCount_tJDBCOutput_2;
				nb_line_update_tJDBCOutput_2 = nb_line_update_tJDBCOutput_2
						+ updatedCount_tJDBCOutput_2;
				nb_line_inserted_tJDBCOutput_2 = nb_line_inserted_tJDBCOutput_2
						+ insertedCount_tJDBCOutput_2;
				nb_line_rejected_tJDBCOutput_2 = nb_line_rejected_tJDBCOutput_2
						+ rejectedCount_tJDBCOutput_2;

				globalMap.put("tJDBCOutput_2_NB_LINE", nb_line_tJDBCOutput_2);
				globalMap.put("tJDBCOutput_2_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_2);
				globalMap.put("tJDBCOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_2);
				globalMap.put("tJDBCOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_2);
				globalMap.put("tJDBCOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_2);

				ok_Hash.put("tJDBCOutput_2", true);
				end_Hash.put("tJDBCOutput_2", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_2 end ] stop
				 */

				/**
				 * [tJDBCCommit_1 end ] start
				 */

				currentComponent = "tJDBCCommit_1";

				ok_Hash.put("tJDBCCommit_1", true);
				end_Hash.put("tJDBCCommit_1", System.currentTimeMillis());

				tJava_6Process(globalMap);

				/**
				 * [tJDBCCommit_1 end ] stop
				 */

				/**
				 * [tJDBCOutput_1 end ] start
				 */

				currentComponent = "tJDBCOutput_1";

				if (pstmtUpdate_tJDBCOutput_1 != null) {

					pstmtUpdate_tJDBCOutput_1.close();

				}
				if (pstmtInsert_tJDBCOutput_1 != null) {

					pstmtInsert_tJDBCOutput_1.close();

				}
				if (pstmt_tJDBCOutput_1 != null) {

					pstmt_tJDBCOutput_1.close();

				}

				nb_line_deleted_tJDBCOutput_1 = nb_line_deleted_tJDBCOutput_1
						+ deletedCount_tJDBCOutput_1;
				nb_line_update_tJDBCOutput_1 = nb_line_update_tJDBCOutput_1
						+ updatedCount_tJDBCOutput_1;
				nb_line_inserted_tJDBCOutput_1 = nb_line_inserted_tJDBCOutput_1
						+ insertedCount_tJDBCOutput_1;
				nb_line_rejected_tJDBCOutput_1 = nb_line_rejected_tJDBCOutput_1
						+ rejectedCount_tJDBCOutput_1;

				globalMap.put("tJDBCOutput_1_NB_LINE", nb_line_tJDBCOutput_1);
				globalMap.put("tJDBCOutput_1_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_1);
				globalMap.put("tJDBCOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_1);
				globalMap.put("tJDBCOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_1);
				globalMap.put("tJDBCOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_1);

				ok_Hash.put("tJDBCOutput_1", true);
				end_Hash.put("tJDBCOutput_1", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_6 begin ] start
				 */

				ok_Hash.put("tJava_6", false);
				start_Hash.put("tJava_6", System.currentTimeMillis());
				currentComponent = "tJava_6";

				int tos_count_tJava_6 = 0;

				TOSHandler.addIDsToSelectedTarget(context.TargetProjectID,
						context.TargetID, context.Version);

				/**
				 * [tJava_6 begin ] stop
				 */
				/**
				 * [tJava_6 main ] start
				 */

				currentComponent = "tJava_6";

				tos_count_tJava_6++;

				/**
				 * [tJava_6 main ] stop
				 */
				/**
				 * [tJava_6 end ] start
				 */

				currentComponent = "tJava_6";

				ok_Hash.put("tJava_6", true);
				end_Hash.put("tJava_6", System.currentTimeMillis());

				/**
				 * [tJava_6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_6_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final TOSIDRTCommand_SaveTargetProjects TOSIDRTCommand_SaveTargetProjectsClass = new TOSIDRTCommand_SaveTargetProjects();

		int exitCode = TOSIDRTCommand_SaveTargetProjectsClass.runJobInTOS(args);
		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = TOSIDRTCommand_SaveTargetProjects.class
					.getClassLoader().getResourceAsStream(
							"tos/tosidrtcommand_savetargetprojects_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			try {
				context.currentTargetProjectID = routines.system.ParserUtils
						.parseTo_Integer(context
								.getProperty("currentTargetProjectID"));
			} catch (NumberFormatException e) {
				context.currentTargetProjectID = null;
			}
			try {
				context.TargetProjectID = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("TargetProjectID"));
			} catch (NumberFormatException e) {
				context.TargetProjectID = null;
			}
			try {
				context.TargetID = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("TargetID"));
			} catch (NumberFormatException e) {
				context.TargetID = null;
			}
			try {
				String context_DateCreated_value = context
						.getProperty("DateCreated");
				if (context_DateCreated_value == null) {
					context_DateCreated_value = "";
				}
				int context_DateCreated_pos = context_DateCreated_value
						.indexOf(";");
				String context_DateCreated_pattern = "yyyy-MM-dd HH:mm:ss";
				if (context_DateCreated_pos > -1) {
					context_DateCreated_pattern = context_DateCreated_value
							.substring(0, context_DateCreated_pos);
					context_DateCreated_value = context_DateCreated_value
							.substring(context_DateCreated_pos + 1);
				}

				context.DateCreated = (java.util.Date) (new java.text.SimpleDateFormat(
						context_DateCreated_pattern)
						.parse(context_DateCreated_value));

			} catch (ParseException e) {
				context.DateCreated = null;
			}
			try {
				context.Version = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("Version"));
			} catch (NumberFormatException e) {
				context.Version = null;
			}
			context.DB_StagingI2B2_Host = (String) context
					.getProperty("DB_StagingI2B2_Host");
			context.DB_StagingI2B2_Instance = (String) context
					.getProperty("DB_StagingI2B2_Instance");
			context.DB_StagingI2B2_jdbcurl = (String) context
					.getProperty("DB_StagingI2B2_jdbcurl");
			context.DB_StagingI2B2_Password = (java.lang.String) context
					.getProperty("DB_StagingI2B2_Password");
			context.DB_StagingI2B2_Port = (String) context
					.getProperty("DB_StagingI2B2_Port");
			context.DB_StagingI2B2_Schema = (String) context
					.getProperty("DB_StagingI2B2_Schema");
			context.DB_StagingI2B2_sqlclassname = (String) context
					.getProperty("DB_StagingI2B2_sqlclassname");
			context.DB_StagingI2B2_Username = (String) context
					.getProperty("DB_StagingI2B2_Username");
			context.DB_TargetI2B2_Host = (String) context
					.getProperty("DB_TargetI2B2_Host");
			context.DB_TargetI2B2_Instance = (String) context
					.getProperty("DB_TargetI2B2_Instance");
			context.DB_TargetI2B2_jdbcurl = (String) context
					.getProperty("DB_TargetI2B2_jdbcurl");
			context.DB_TargetI2B2_Password = (java.lang.String) context
					.getProperty("DB_TargetI2B2_Password");
			context.DB_TargetI2B2_Port = (String) context
					.getProperty("DB_TargetI2B2_Port");
			context.DB_TargetI2B2_Schema = (String) context
					.getProperty("DB_TargetI2B2_Schema");
			context.DB_TargetI2B2_sqlclassname = (String) context
					.getProperty("DB_TargetI2B2_sqlclassname");
			context.DB_TargetI2B2_Username = (String) context
					.getProperty("DB_TargetI2B2_Username");
			context.DataFile = (String) context.getProperty("DataFile");
			context.ErrorMessage = (String) context.getProperty("ErrorMessage");
			try {
				context.IfValue = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("IfValue"));
			} catch (NumberFormatException e) {
				context.IfValue = null;
			}
			context.JDBC_URL = (String) context.getProperty("JDBC_URL");
			context.JDBCDriver = (String) context.getProperty("JDBCDriver");
			context.Job = (String) context.getProperty("Job");
			context.OracleDB = (String) context.getProperty("OracleDB");
			context.OracleHost = (String) context.getProperty("OracleHost");
			context.OraclePassword = (java.lang.String) context
					.getProperty("OraclePassword");
			context.OraclePort = (String) context.getProperty("OraclePort");
			context.OracleSchema = (String) context.getProperty("OracleSchema");
			context.OracleUsername = (String) context
					.getProperty("OracleUsername");
			context.SQLCommand = (String) context.getProperty("SQLCommand");
			context.SQLCommand2 = (String) context.getProperty("SQLCommand2");
			context.SQLTable = (String) context.getProperty("SQLTable");
			context.SQLTable2 = (String) context.getProperty("SQLTable2");
			context.StatusMessage = (String) context
					.getProperty("StatusMessage");
			context.TableIOETarget = (String) context
					.getProperty("TableIOETarget");
			context.TableIOETargetOntology = (String) context
					.getProperty("TableIOETargetOntology");
			context.TableIOETargetProject = (String) context
					.getProperty("TableIOETargetProject");
			context.TOSHandler = (Object) context.getProperty("TOSHandler");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("currentTargetProjectID")) {
				context.currentTargetProjectID = (Integer) parentContextMap
						.get("currentTargetProjectID");
			}
			if (parentContextMap.containsKey("TargetProjectID")) {
				context.TargetProjectID = (Integer) parentContextMap
						.get("TargetProjectID");
			}
			if (parentContextMap.containsKey("TargetID")) {
				context.TargetID = (Integer) parentContextMap.get("TargetID");
			}
			if (parentContextMap.containsKey("DateCreated")) {
				context.DateCreated = (java.util.Date) parentContextMap
						.get("DateCreated");
			}
			if (parentContextMap.containsKey("Version")) {
				context.Version = (Integer) parentContextMap.get("Version");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Host")) {
				context.DB_StagingI2B2_Host = (String) parentContextMap
						.get("DB_StagingI2B2_Host");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Instance")) {
				context.DB_StagingI2B2_Instance = (String) parentContextMap
						.get("DB_StagingI2B2_Instance");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_jdbcurl")) {
				context.DB_StagingI2B2_jdbcurl = (String) parentContextMap
						.get("DB_StagingI2B2_jdbcurl");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Password")) {
				context.DB_StagingI2B2_Password = (java.lang.String) parentContextMap
						.get("DB_StagingI2B2_Password");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Port")) {
				context.DB_StagingI2B2_Port = (String) parentContextMap
						.get("DB_StagingI2B2_Port");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Schema")) {
				context.DB_StagingI2B2_Schema = (String) parentContextMap
						.get("DB_StagingI2B2_Schema");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_sqlclassname")) {
				context.DB_StagingI2B2_sqlclassname = (String) parentContextMap
						.get("DB_StagingI2B2_sqlclassname");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Username")) {
				context.DB_StagingI2B2_Username = (String) parentContextMap
						.get("DB_StagingI2B2_Username");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Host")) {
				context.DB_TargetI2B2_Host = (String) parentContextMap
						.get("DB_TargetI2B2_Host");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Instance")) {
				context.DB_TargetI2B2_Instance = (String) parentContextMap
						.get("DB_TargetI2B2_Instance");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_jdbcurl")) {
				context.DB_TargetI2B2_jdbcurl = (String) parentContextMap
						.get("DB_TargetI2B2_jdbcurl");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Password")) {
				context.DB_TargetI2B2_Password = (java.lang.String) parentContextMap
						.get("DB_TargetI2B2_Password");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Port")) {
				context.DB_TargetI2B2_Port = (String) parentContextMap
						.get("DB_TargetI2B2_Port");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Schema")) {
				context.DB_TargetI2B2_Schema = (String) parentContextMap
						.get("DB_TargetI2B2_Schema");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_sqlclassname")) {
				context.DB_TargetI2B2_sqlclassname = (String) parentContextMap
						.get("DB_TargetI2B2_sqlclassname");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Username")) {
				context.DB_TargetI2B2_Username = (String) parentContextMap
						.get("DB_TargetI2B2_Username");
			}
			if (parentContextMap.containsKey("DataFile")) {
				context.DataFile = (String) parentContextMap.get("DataFile");
			}
			if (parentContextMap.containsKey("ErrorMessage")) {
				context.ErrorMessage = (String) parentContextMap
						.get("ErrorMessage");
			}
			if (parentContextMap.containsKey("IfValue")) {
				context.IfValue = (Boolean) parentContextMap.get("IfValue");
			}
			if (parentContextMap.containsKey("JDBC_URL")) {
				context.JDBC_URL = (String) parentContextMap.get("JDBC_URL");
			}
			if (parentContextMap.containsKey("JDBCDriver")) {
				context.JDBCDriver = (String) parentContextMap
						.get("JDBCDriver");
			}
			if (parentContextMap.containsKey("Job")) {
				context.Job = (String) parentContextMap.get("Job");
			}
			if (parentContextMap.containsKey("OracleDB")) {
				context.OracleDB = (String) parentContextMap.get("OracleDB");
			}
			if (parentContextMap.containsKey("OracleHost")) {
				context.OracleHost = (String) parentContextMap
						.get("OracleHost");
			}
			if (parentContextMap.containsKey("OraclePassword")) {
				context.OraclePassword = (java.lang.String) parentContextMap
						.get("OraclePassword");
			}
			if (parentContextMap.containsKey("OraclePort")) {
				context.OraclePort = (String) parentContextMap
						.get("OraclePort");
			}
			if (parentContextMap.containsKey("OracleSchema")) {
				context.OracleSchema = (String) parentContextMap
						.get("OracleSchema");
			}
			if (parentContextMap.containsKey("OracleUsername")) {
				context.OracleUsername = (String) parentContextMap
						.get("OracleUsername");
			}
			if (parentContextMap.containsKey("SQLCommand")) {
				context.SQLCommand = (String) parentContextMap
						.get("SQLCommand");
			}
			if (parentContextMap.containsKey("SQLCommand2")) {
				context.SQLCommand2 = (String) parentContextMap
						.get("SQLCommand2");
			}
			if (parentContextMap.containsKey("SQLTable")) {
				context.SQLTable = (String) parentContextMap.get("SQLTable");
			}
			if (parentContextMap.containsKey("SQLTable2")) {
				context.SQLTable2 = (String) parentContextMap.get("SQLTable2");
			}
			if (parentContextMap.containsKey("StatusMessage")) {
				context.StatusMessage = (String) parentContextMap
						.get("StatusMessage");
			}
			if (parentContextMap.containsKey("TableIOETarget")) {
				context.TableIOETarget = (String) parentContextMap
						.get("TableIOETarget");
			}
			if (parentContextMap.containsKey("TableIOETargetOntology")) {
				context.TableIOETargetOntology = (String) parentContextMap
						.get("TableIOETargetOntology");
			}
			if (parentContextMap.containsKey("TableIOETargetProject")) {
				context.TableIOETargetProject = (String) parentContextMap
						.get("TableIOETargetProject");
			}
			if (parentContextMap.containsKey("TOSHandler")) {
				context.TOSHandler = (Object) parentContextMap
						.get("TOSHandler");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {

			e_tPrejob_1.printStackTrace();
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {

			e_tFileInputDelimited_1.printStackTrace();
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {

			e_tPostjob_1.printStackTrace();
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : TOSIDRTCommand_SaveTargetProjects");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 190597 characters generated by Talend Open Studio for Data Integration on the
 * 9. Dezember 2013 14:12:29 MEZ
 ************************************************************************************************/
