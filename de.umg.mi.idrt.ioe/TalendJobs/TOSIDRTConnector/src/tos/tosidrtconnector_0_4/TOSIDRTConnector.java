// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package tos.tosidrtconnector_0_4;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TOSHandler2;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tLibraryLoad_1
import de.umg.mi.idrt.ioe.tos.TOSHandler;

//the import part of tLibraryLoad_2
//import java.util.List;

//the import part of tLibraryLoad_3
//import java.util.List;

//the import part of tLibraryLoad_5
//import java.util.List;

//the import part of tJava_6
//import java.util.List;
import routines.TOSHandler2;

//the import part of tJava_1
//import java.util.List;

//the import part of tJava_10
//import java.util.List;

//the import part of tJava_2
//import java.util.List;

//the import part of tJavaFlex_1

//the import part of tJava_3
//import java.util.List;

//the import part of tJavaFlex_3

//the import part of tJavaFlex_4

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJavaFlex_5

//the import part of tJava_4
//import java.util.List;

//the import part of tJava_5
//import java.util.List;

//the import part of tJava_12
//import java.util.List;

//the import part of tJava_7
//import java.util.List;

//the import part of tJavaFlex_7

//the import part of tJava_8
//import java.util.List;

//the import part of tJava_9
//import java.util.List;

//the import part of tJava_11
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: TOSIDRTConnector Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.3.1.r104014
 * @status DEV
 */
public class TOSIDRTConnector implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (Var1 != null) {

				this.setProperty("Var1", Var1.toString());

			}

			if (Var2 != null) {

				this.setProperty("Var2", Var2.toString());

			}

			if (Var3 != null) {

				this.setProperty("Var3", Var3.toString());

			}

			if (DataFile != null) {

				this.setProperty("DataFile", DataFile.toString());

			}

			if (ErrorMessage != null) {

				this.setProperty("ErrorMessage", ErrorMessage.toString());

			}

			if (IfValue != null) {

				this.setProperty("IfValue", IfValue.toString());

			}

			if (Job != null) {

				this.setProperty("Job", Job.toString());

			}

			if (OracleDB != null) {

				this.setProperty("OracleDB", OracleDB.toString());

			}

			if (OracleHost != null) {

				this.setProperty("OracleHost", OracleHost.toString());

			}

			if (OraclePassword != null) {

				this.setProperty("OraclePassword", OraclePassword.toString());

			}

			if (OraclePort != null) {

				this.setProperty("OraclePort", OraclePort.toString());

			}

			if (OracleSchema != null) {

				this.setProperty("OracleSchema", OracleSchema.toString());

			}

			if (OracleUsername != null) {

				this.setProperty("OracleUsername", OracleUsername.toString());

			}

			if (SQLCommand != null) {

				this.setProperty("SQLCommand", SQLCommand.toString());

			}

			if (SQLCommand2 != null) {

				this.setProperty("SQLCommand2", SQLCommand2.toString());

			}

			if (SQLTable != null) {

				this.setProperty("SQLTable", SQLTable.toString());

			}

			if (SQLTable2 != null) {

				this.setProperty("SQLTable2", SQLTable2.toString());

			}

			if (StatusMessage != null) {

				this.setProperty("StatusMessage", StatusMessage.toString());

			}

			if (TableIEOTargetOntology != null) {

				this.setProperty("TableIEOTargetOntology",
						TableIEOTargetOntology.toString());

			}

			if (TableIEOTargetProject != null) {

				this.setProperty("TableIEOTargetProject",
						TableIEOTargetProject.toString());

			}

			if (TableIEOTarget != null) {

				this.setProperty("TableIEOTarget", TableIEOTarget.toString());

			}

			if (TOSHandler != null) {

				this.setProperty("TOSHandler", TOSHandler.toString());

			}

		}

		public String Var1;

		public String getVar1() {
			return this.Var1;
		}

		public String Var2;

		public String getVar2() {
			return this.Var2;
		}

		public String Var3;

		public String getVar3() {
			return this.Var3;
		}

		public String DataFile;

		public String getDataFile() {
			return this.DataFile;
		}

		public String ErrorMessage;

		public String getErrorMessage() {
			return this.ErrorMessage;
		}

		public Boolean IfValue;

		public Boolean getIfValue() {
			return this.IfValue;
		}

		public String Job;

		public String getJob() {
			return this.Job;
		}

		public String OracleDB;

		public String getOracleDB() {
			return this.OracleDB;
		}

		public String OracleHost;

		public String getOracleHost() {
			return this.OracleHost;
		}

		public String OraclePassword;

		public String getOraclePassword() {
			return this.OraclePassword;
		}

		public String OraclePort;

		public String getOraclePort() {
			return this.OraclePort;
		}

		public String OracleSchema;

		public String getOracleSchema() {
			return this.OracleSchema;
		}

		public String OracleUsername;

		public String getOracleUsername() {
			return this.OracleUsername;
		}

		public String SQLCommand;

		public String getSQLCommand() {
			return this.SQLCommand;
		}

		public String SQLCommand2;

		public String getSQLCommand2() {
			return this.SQLCommand2;
		}

		public String SQLTable;

		public String getSQLTable() {
			return this.SQLTable;
		}

		public String SQLTable2;

		public String getSQLTable2() {
			return this.SQLTable2;
		}

		public String StatusMessage;

		public String getStatusMessage() {
			return this.StatusMessage;
		}

		public String TableIEOTargetOntology;

		public String getTableIEOTargetOntology() {
			return this.TableIEOTargetOntology;
		}

		public String TableIEOTargetProject;

		public String getTableIEOTargetProject() {
			return this.TableIEOTargetProject;
		}

		public String TableIEOTarget;

		public String getTableIEOTarget() {
			return this.TableIEOTarget;
		}

		public Object TOSHandler;

		public Object getTOSHandler() {
			return this.TOSHandler;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.4";
	private final String jobName = "TOSIDRTConnector";
	private final String projectName = "TOS";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					TOSIDRTConnector.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(TOSIDRTConnector.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tPrejob_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPrejob_1", System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLibraryLoad_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

		status = "failure";

		tLibraryLoad_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLibraryLoad_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLibraryLoad_2", System.currentTimeMillis());

		status = "failure";

		tLibraryLoad_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLibraryLoad_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLibraryLoad_3", System.currentTimeMillis());

		status = "failure";

		tLibraryLoad_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLibraryLoad_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLibraryLoad_5", System.currentTimeMillis());

		status = "failure";

		tLibraryLoad_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_6", System.currentTimeMillis());

		status = "failure";

		tJava_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCConnection_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCConnection_1", System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_11Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tJDBCConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleConnection_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleConnection_2", System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tOracleConnection_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_1", System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCRow_2", System.currentTimeMillis());

		tJDBCRow_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_10", System.currentTimeMillis());

		status = "failure";

		tJava_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_2", System.currentTimeMillis());

		status = "failure";

		tJava_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleInput_1", System.currentTimeMillis());

		status = "failure";

		tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaFlex_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaFlex_1", System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_3", System.currentTimeMillis());

		status = "failure";

		tJava_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleInput_5", System.currentTimeMillis());

		status = "failure";

		tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaFlex_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaFlex_3", System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleInput_3", System.currentTimeMillis());

		status = "failure";

		tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaFlex_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaFlex_4", System.currentTimeMillis());

		status = "failure";

		tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleInput_8", System.currentTimeMillis());

		status = "failure";

		tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_1", System.currentTimeMillis());

		status = "failure";

		tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tDie_1", System.currentTimeMillis());

		status = "failure";

		tDie_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tDie_2", System.currentTimeMillis());

		status = "failure";

		tDie_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleInput_4", System.currentTimeMillis());

		status = "failure";

		tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaFlex_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaFlex_5", System.currentTimeMillis());

		status = "failure";

		tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_4", System.currentTimeMillis());

		status = "failure";

		tJava_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tOracleOutput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleOutput_1", System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_7Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_5", System.currentTimeMillis());

		status = "failure";

		tJava_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_12", System.currentTimeMillis());

		status = "failure";

		tJava_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileDelete_1", System.currentTimeMillis());

		status = "failure";

		tFileDelete_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_7", System.currentTimeMillis());

		status = "failure";

		tJava_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleRow_1", System.currentTimeMillis());

		status = "failure";

		tOracleRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleInput_7", System.currentTimeMillis());

		status = "failure";

		tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaFlex_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaFlex_7", System.currentTimeMillis());

		status = "failure";

		tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_8", System.currentTimeMillis());

		status = "failure";

		tJava_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_1", System.currentTimeMillis());

		status = "failure";

		tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_9", System.currentTimeMillis());

		status = "failure";

		tJava_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCRow_1", System.currentTimeMillis());

		status = "failure";

		tJDBCRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCRow_3", System.currentTimeMillis());

		status = "failure";

		tJDBCRow_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCRow_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCRow_4", System.currentTimeMillis());

		status = "failure";

		tJDBCRow_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_11", System.currentTimeMillis());

		status = "failure";

		tJava_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLibraryLoad_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLibraryLoad_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLibraryLoad_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLibraryLoad_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_6_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCConnection_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleConnection_2_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCRow_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "ERROR", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

		try {

			errorCode = null;
			tJava_9Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}
	}

	public void tJava_10_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleInput_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleInput_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleInput_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleInput_8_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleInput_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_12_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_7_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleRow_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleInput_7_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_8_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_9_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCRow_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCRow_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCRow_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_11_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());
				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */
				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */
				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				tLibraryLoad_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tLibraryLoad_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLibraryLoad_1 begin ] start
				 */

				ok_Hash.put("tLibraryLoad_1", false);
				start_Hash.put("tLibraryLoad_1", System.currentTimeMillis());
				currentComponent = "tLibraryLoad_1";

				int tos_count_tLibraryLoad_1 = 0;

				/**
				 * [tLibraryLoad_1 begin ] stop
				 */
				/**
				 * [tLibraryLoad_1 main ] start
				 */

				currentComponent = "tLibraryLoad_1";

				tos_count_tLibraryLoad_1++;

				/**
				 * [tLibraryLoad_1 main ] stop
				 */
				/**
				 * [tLibraryLoad_1 end ] start
				 */

				currentComponent = "tLibraryLoad_1";

				ok_Hash.put("tLibraryLoad_1", true);
				end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				/**
				 * [tLibraryLoad_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tLibraryLoad_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tLibraryLoad_2Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 1);
	}

	public void tLibraryLoad_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLibraryLoad_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLibraryLoad_2 begin ] start
				 */

				ok_Hash.put("tLibraryLoad_2", false);
				start_Hash.put("tLibraryLoad_2", System.currentTimeMillis());
				currentComponent = "tLibraryLoad_2";

				int tos_count_tLibraryLoad_2 = 0;

				/**
				 * [tLibraryLoad_2 begin ] stop
				 */
				/**
				 * [tLibraryLoad_2 main ] start
				 */

				currentComponent = "tLibraryLoad_2";

				tos_count_tLibraryLoad_2++;

				/**
				 * [tLibraryLoad_2 main ] stop
				 */
				/**
				 * [tLibraryLoad_2 end ] start
				 */

				currentComponent = "tLibraryLoad_2";

				ok_Hash.put("tLibraryLoad_2", true);
				end_Hash.put("tLibraryLoad_2", System.currentTimeMillis());

				/**
				 * [tLibraryLoad_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tLibraryLoad_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tLibraryLoad_3Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tLibraryLoad_2_SUBPROCESS_STATE", 1);
	}

	public void tLibraryLoad_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLibraryLoad_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLibraryLoad_3 begin ] start
				 */

				ok_Hash.put("tLibraryLoad_3", false);
				start_Hash.put("tLibraryLoad_3", System.currentTimeMillis());
				currentComponent = "tLibraryLoad_3";

				int tos_count_tLibraryLoad_3 = 0;

				/**
				 * [tLibraryLoad_3 begin ] stop
				 */
				/**
				 * [tLibraryLoad_3 main ] start
				 */

				currentComponent = "tLibraryLoad_3";

				tos_count_tLibraryLoad_3++;

				/**
				 * [tLibraryLoad_3 main ] stop
				 */
				/**
				 * [tLibraryLoad_3 end ] start
				 */

				currentComponent = "tLibraryLoad_3";

				ok_Hash.put("tLibraryLoad_3", true);
				end_Hash.put("tLibraryLoad_3", System.currentTimeMillis());

				/**
				 * [tLibraryLoad_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tLibraryLoad_3:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tLibraryLoad_5Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tLibraryLoad_3_SUBPROCESS_STATE", 1);
	}

	public void tLibraryLoad_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLibraryLoad_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLibraryLoad_5 begin ] start
				 */

				ok_Hash.put("tLibraryLoad_5", false);
				start_Hash.put("tLibraryLoad_5", System.currentTimeMillis());
				currentComponent = "tLibraryLoad_5";

				int tos_count_tLibraryLoad_5 = 0;

				/**
				 * [tLibraryLoad_5 begin ] stop
				 */
				/**
				 * [tLibraryLoad_5 main ] start
				 */

				currentComponent = "tLibraryLoad_5";

				tos_count_tLibraryLoad_5++;

				/**
				 * [tLibraryLoad_5 main ] stop
				 */
				/**
				 * [tLibraryLoad_5 end ] start
				 */

				currentComponent = "tLibraryLoad_5";

				ok_Hash.put("tLibraryLoad_5", true);
				end_Hash.put("tLibraryLoad_5", System.currentTimeMillis());

				/**
				 * [tLibraryLoad_5 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tLibraryLoad_5:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_6Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tLibraryLoad_5_SUBPROCESS_STATE", 1);
	}

	public void tJava_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_6 begin ] start
				 */

				ok_Hash.put("tJava_6", false);
				start_Hash.put("tJava_6", System.currentTimeMillis());
				currentComponent = "tJava_6";

				int tos_count_tJava_6 = 0;

				context.TOSHandler = new TOSHandler();

				System.out.println("TOS: ----initial vars-----");
				System.out.println(" - context.OracleHost: \""
						+ context.OracleHost + "\"");
				System.out.println(" - context.OraclePort: \""
						+ context.OraclePort + "\"");
				System.out.println(" - context.OracleUsername: \""
						+ context.OracleUsername + "\"");
				System.out.println(" - context.OracleSID(DB): \""
						+ context.OracleDB + "\"");
				System.out.println(" - context.OracleSchema: \""
						+ context.OracleSchema + "\"");
				System.out.println(" - context.Job: \"" + context.Job + "\"");
				System.out.println(" - context.SQLTable: \"" + context.SQLTable
						+ "\"");
				System.out.println(" - context.SQLCommand: \""
						+ context.SQLCommand + "\"");
				System.out.println(" - context.SQLTable2: \""
						+ context.SQLTable2 + "\"");
				System.out.println(" - context.SQLCommand2: \""
						+ context.SQLCommand2 + "\"");
				System.out.println(" - context.Var1: \"" + context.Var1 + "\"");
				System.out.println(" - context.Var2: \"" + context.Var2 + "\"");
				System.out.println(" - context.Var3: \"" + context.Var3 + "\"");
				System.out.println(" - context.DataFile: \"" + context.DataFile
						+ "\"");
				System.out.println(" - context.TableIEOTargetOntology_test: \""
						+ context.TableIEOTargetOntology + "\"");

				context.TableIEOTargetOntology = TOSHandler.TableIEOTargetOntology;
				context.TableIEOTarget = TOSHandler.TableIEOTarget;
				context.TableIEOTargetProject = TOSHandler.TableIEOTargetProject;

				/**
				 * [tJava_6 begin ] stop
				 */
				/**
				 * [tJava_6 main ] start
				 */

				currentComponent = "tJava_6";

				tos_count_tJava_6++;

				/**
				 * [tJava_6 main ] stop
				 */
				/**
				 * [tJava_6 end ] start
				 */

				currentComponent = "tJava_6";

				ok_Hash.put("tJava_6", true);
				end_Hash.put("tJava_6", System.currentTimeMillis());

				/**
				 * [tJava_6 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_6:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCConnection_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_6_SUBPROCESS_STATE", 1);
	}

	public void tJDBCConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCConnection_1 begin ] start
				 */

				ok_Hash.put("tJDBCConnection_1", false);
				start_Hash.put("tJDBCConnection_1", System.currentTimeMillis());
				currentComponent = "tJDBCConnection_1";

				int tos_count_tJDBCConnection_1 = 0;

				String url_tJDBCConnection_1 = "jdbc:oracle:thin:@"
						+ context.OracleHost + ":" + context.OraclePort + ":"
						+ context.OracleDB;

				String userName_tJDBCConnection_1 = context.OracleUsername;
				String password_tJDBCConnection_1 = context.OraclePassword;

				java.sql.Connection conn_tJDBCConnection_1 = null;

				if ((null == globalMap.get(KEY_DB_DATASOURCES))
						|| "".equals("")) {

					java.lang.Class.forName("oracle.jdbc.driver.OracleDriver");

					conn_tJDBCConnection_1 = java.sql.DriverManager
							.getConnection(url_tJDBCConnection_1,
									userName_tJDBCConnection_1,
									password_tJDBCConnection_1);
					globalMap.put("conn_tJDBCConnection_1",
							conn_tJDBCConnection_1);
				}
				if (null != conn_tJDBCConnection_1) {

					conn_tJDBCConnection_1.setAutoCommit(false);
				}

				globalMap.put("conn_tJDBCConnection_1", conn_tJDBCConnection_1);
				globalMap.put("url_tJDBCConnection_1", url_tJDBCConnection_1);
				// globalMap.put("user_tJDBCConnection_1",
				// userName_tJDBCConnection_1);
				// globalMap.put("pass_tJDBCConnection_1",
				// password_tJDBCConnection_1);

				/**
				 * [tJDBCConnection_1 begin ] stop
				 */
				/**
				 * [tJDBCConnection_1 main ] start
				 */

				currentComponent = "tJDBCConnection_1";

				tos_count_tJDBCConnection_1++;

				/**
				 * [tJDBCConnection_1 main ] stop
				 */
				/**
				 * [tJDBCConnection_1 end ] start
				 */

				currentComponent = "tJDBCConnection_1";

				ok_Hash.put("tJDBCConnection_1", true);
				end_Hash.put("tJDBCConnection_1", System.currentTimeMillis());

				/**
				 * [tJDBCConnection_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJDBCConnection_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tOracleConnection_2Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tOracleConnection_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleConnection_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tOracleConnection_2 begin ] start
				 */

				ok_Hash.put("tOracleConnection_2", false);
				start_Hash.put("tOracleConnection_2",
						System.currentTimeMillis());
				currentComponent = "tOracleConnection_2";

				int tos_count_tOracleConnection_2 = 0;

				String url_tOracleConnection_2 = "jdbc:oracle:thin:@"
						+ context.OracleHost + ":" + context.OraclePort + ":"
						+ context.OracleDB;
				globalMap.put("connectionType_" + "tOracleConnection_2",
						"ORACLE_SID");

				String userName_tOracleConnection_2 = context.OracleUsername;
				String password_tOracleConnection_2 = context.OraclePassword;

				java.sql.Connection conn_tOracleConnection_2 = null;

				if ((null == globalMap.get(KEY_DB_DATASOURCES))
						|| "".equals("")) {

					java.lang.Class.forName("oracle.jdbc.OracleDriver");

					conn_tOracleConnection_2 = java.sql.DriverManager
							.getConnection(url_tOracleConnection_2,
									userName_tOracleConnection_2,
									password_tOracleConnection_2);
					globalMap.put("conn_tOracleConnection_2",
							conn_tOracleConnection_2);
				}
				if (null != conn_tOracleConnection_2) {

					conn_tOracleConnection_2.setAutoCommit(true);
				}
				globalMap.put("host_" + "tOracleConnection_2",
						context.OracleHost);
				globalMap.put("port_" + "tOracleConnection_2",
						context.OraclePort);
				globalMap.put("dbname_" + "tOracleConnection_2",
						context.OracleDB);

				globalMap.put("conn_" + "tOracleConnection_2",
						conn_tOracleConnection_2);
				globalMap.put("dbschema_" + "tOracleConnection_2",
						context.OracleSchema);
				globalMap.put("username_" + "tOracleConnection_2",
						context.OracleUsername);
				globalMap.put("password_" + "tOracleConnection_2",
						context.OraclePassword);

				/**
				 * [tOracleConnection_2 begin ] stop
				 */
				/**
				 * [tOracleConnection_2 main ] start
				 */

				currentComponent = "tOracleConnection_2";

				tos_count_tOracleConnection_2++;

				/**
				 * [tOracleConnection_2 main ] stop
				 */
				/**
				 * [tOracleConnection_2 end ] start
				 */

				currentComponent = "tOracleConnection_2";

				ok_Hash.put("tOracleConnection_2", true);
				end_Hash.put("tOracleConnection_2", System.currentTimeMillis());

				/**
				 * [tOracleConnection_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tOracleConnection_2:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tJDBCRow_2Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tOracleConnection_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());
				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				((TOSHandler) context.TOSHandler)
						.status("Error while connection to the db. (Oracle)");
				System.out
						.println("Error while connection to the db. (Oracle)");

				/**
				 * [tJava_1 begin ] stop
				 */
				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */
				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public void tJDBCRow_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCRow_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCRow_2 begin ] start
				 */

				ok_Hash.put("tJDBCRow_2", false);
				start_Hash.put("tJDBCRow_2", System.currentTimeMillis());
				currentComponent = "tJDBCRow_2";

				int tos_count_tJDBCRow_2 = 0;

				java.sql.Connection connection_tJDBCRow_2 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");
				if (null == connection_tJDBCRow_2) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCRow_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					connection_tJDBCRow_2 = dataSources_tJDBCRow_2.get("")
							.getConnection();
				}

				java.sql.Statement stmt_tJDBCRow_2 = connection_tJDBCRow_2
						.createStatement();
				String query_tJDBCRow_2 = "";
				boolean whetherReject_tJDBCRow_2 = false;

				/**
				 * [tJDBCRow_2 begin ] stop
				 */
				/**
				 * [tJDBCRow_2 main ] start
				 */

				currentComponent = "tJDBCRow_2";

				query_tJDBCRow_2 = "select * from " + context.OracleSchema
						+ "." + context.TableIEOTargetOntology;
				whetherReject_tJDBCRow_2 = false;
				globalMap.put("tJDBCRow_2_QUERY", query_tJDBCRow_2);
				try {
					stmt_tJDBCRow_2.execute(query_tJDBCRow_2);

				} catch (java.lang.Exception e) {
					whetherReject_tJDBCRow_2 = true;
					throw (e);
				}

				if (!whetherReject_tJDBCRow_2) {
				}

				tos_count_tJDBCRow_2++;

				/**
				 * [tJDBCRow_2 main ] stop
				 */
				/**
				 * [tJDBCRow_2 end ] start
				 */

				currentComponent = "tJDBCRow_2";

				stmt_tJDBCRow_2.close();

				ok_Hash.put("tJDBCRow_2", true);
				end_Hash.put("tJDBCRow_2", System.currentTimeMillis());

				tJava_10Process(globalMap);

				/**
				 * [tJDBCRow_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCRow_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_10Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_10 begin ] start
				 */

				ok_Hash.put("tJava_10", false);
				start_Hash.put("tJava_10", System.currentTimeMillis());
				currentComponent = "tJava_10";

				int tos_count_tJava_10 = 0;

				((TOSHandler) context.TOSHandler)
						.statusSuccess("IEO tables already existed.");

				/**
				 * [tJava_10 begin ] stop
				 */
				/**
				 * [tJava_10 main ] start
				 */

				currentComponent = "tJava_10";

				tos_count_tJava_10++;

				/**
				 * [tJava_10 main ] stop
				 */
				/**
				 * [tJava_10 end ] start
				 */

				currentComponent = "tJava_10";

				ok_Hash.put("tJava_10", true);
				end_Hash.put("tJava_10", System.currentTimeMillis());

				tJava_2Process(globalMap);

				/**
				 * [tJava_10 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_10_SUBPROCESS_STATE", 1);
	}

	public void tJava_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());
				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				// INNER JOIN I2B2KFO179.i2b2 ON concept_dimension.CONCEPT_PATH
				// = i2b2.C_DIMCODE ORDER BY concept_dimension.CONCEPT_PATH ASC
				/*
				 * context.Job = "ontology"; context.SQLTable = "i2b2";
				 * context.SQLCommand =
				 * "SELECT * FROM I2B2IDRT.I2B2 WHERE C_HLEVEL < 10 ORDER BY C_HLEVEL ASC"
				 * ; //context.Job = "ontology_dimensions"; //context.SQLTable =
				 * "concept_dimension"; //context.SQLCommand =
				 * "SELECT * FROM I2B2KFO179.concept_dimension FULL OUTER JOIN I2B2KFO179.modifier_dimension ON concept_dimension.CONCEPT_PATH = i2b2.C_DIMCODE "
				 * ;
				 */

				if (context.OracleSchema.isEmpty()) {
					System.out
							.println("TOS: No context.OracleSchema set. Using \"i2b2idrt\" now.");
					context.OracleSchema = "i2b2idrt";
				}

				if (context.SQLTable.isEmpty()) {
					System.out
							.println("TOS: No SQLTable set. Using \"i2b2idrt\" now.");
					context.SQLTable = "i2b2idrt";
				}

				boolean sqlCommandIsEmpty = StringHandling
						.LEN(context.SQLCommand) < 1;

				if (context.Job.isEmpty()) {
					context.Job = "ontology";
					System.out
							.println("TOS: context.Job is empty. Set to \"ontology\" now.");
					context.SQLCommand = "SELECT * FROM "
							+ context.OracleSchema
							+ ".I2B2 ORDER BY C_HLEVEL, C_NAME ASC";
				} else if (context.Job.equals("ontology") && sqlCommandIsEmpty) {
					context.SQLCommand = "SELECT * FROM "
							+ context.OracleSchema
							+ ".I2B2 ORDER BY C_HLEVEL ASC";
					System.out.println("context.Job is " + context.Job
							+ ", but context.SQLCommand is empty. Set to \""
							+ context.SQLCommand + "\" now.");
				} else if (context.Job.equals("ontology_dimensions")
						&& sqlCommandIsEmpty) {
					context.SQLCommand = "SELECT * FROM "
							+ context.OracleSchema
							+ ".I2B2 ORDER BY C_HLEVEL ASC";
					System.out.println("context.Job is " + context.Job
							+ ", but context.SQLCommand is empty. Set to \""
							+ context.SQLCommand + "\" now.");
				}

				if (context.DataFile == null || "null".equals(context.DataFile)) {
					context.DataFile = "";
				}

				System.out.println("TOS: ----actual vars-----");
				System.out.println(" - context.OracleSchema: \""
						+ context.OracleSchema + "\"");
				System.out.println(" - context.Job: \"" + context.Job + "\"");
				System.out.println(" - context.SQLTable: \"" + context.SQLTable
						+ "\"");
				System.out.println(" - context.SQLCommand: \""
						+ context.SQLCommand + "\"");
				System.out.println(" - context.SQLTable2: \""
						+ context.SQLTable2 + "\"");
				System.out.println(" - context.SQLCommand2: \""
						+ context.SQLCommand2 + "\"");
				System.out.println(" - context.Var1: \"" + context.Var1 + "\"");
				System.out.println(" - context.Var2: \"" + context.Var2 + "\"");
				System.out.println(" - context.Var3: \"" + context.Var3 + "\"");
				System.out.println(" - context.DataFile: \"" + context.DataFile
						+ "\"");

				/**
				 * [tJava_2 begin ] stop
				 */
				/**
				 * [tJava_2 main ] start
				 */

				currentComponent = "tJava_2";

				tos_count_tJava_2++;

				/**
				 * [tJava_2 main ] stop
				 */
				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				if (context.Job.equals("ontology")) {

					tOracleInput_1Process(globalMap);
				}

				if (context.Job.equals("ontology_dimensions")) {

					tOracleInput_5Process(globalMap);
				}

				if (context.Job.equals("check_ontology_empty")) {

					tOracleInput_8Process(globalMap);
				}

				if (context.Job.equals("list_targetprojects")) {

					tOracleInput_4Process(globalMap);
				}

				if (context.Job.equals("add_target_ontology")
						|| context.Job.equals("write_target_ontology")) {

					tJava_4Process(globalMap);
				}

				if (context.Job.equals("delete_target_ontology")) {

					tOracleRow_1Process(globalMap);
				}

				if (context.Job.equals("read_target_ontology")) {

					tOracleInput_7Process(globalMap);
				}

				if (context.Job.equals("etlStagingI2B2ToTargetI2B2")) {

					tJava_8Process(globalMap);
				}

				/**
				 * [tJava_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}

	public static class dbrowStruct implements
			routines.system.IPersistableRow<dbrowStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTConnector = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTConnector = new byte[0];

		public BigDecimal C_HLEVEL;

		public BigDecimal getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String C_SYNONYM_CD;

		public String getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public Integer C_TOTALNUM;

		public Integer getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public String C_COLUMNDATATYPE;

		public String getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTConnector.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTConnector.length == 0) {
						commonByteArray_TOS_TOSIDRTConnector = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTConnector = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_TOSIDRTConnector, 0, length);
				strReturn = new String(commonByteArray_TOS_TOSIDRTConnector, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTConnector) {

				try {

					int length = 0;

					this.C_HLEVEL = (BigDecimal) dis.readObject();

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					this.C_SYNONYM_CD = readString(dis);

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readInteger(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					this.C_COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.C_HLEVEL);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.C_SYNONYM_CD, dos);

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// Integer

				writeInteger(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// String

				writeString(this.C_COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + C_SYNONYM_CD);
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + String.valueOf(C_TOTALNUM));
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + C_COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(dbrowStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				dbrowStruct dbrow = new dbrowStruct();

				/**
				 * [tJavaFlex_1 begin ] start
				 */

				ok_Hash.put("tJavaFlex_1", false);
				start_Hash.put("tJavaFlex_1", System.currentTimeMillis());
				currentComponent = "tJavaFlex_1";

				int tos_count_tJavaFlex_1 = 0;

				System.out
						.println("TOS: Starting Talend-Job \"ontology\" as TOS-Code.");

				int number_of_ontology_items = 0;

				/**
				 * [tJavaFlex_1 begin ] stop
				 */

				/**
				 * [tOracleInput_1 begin ] start
				 */

				ok_Hash.put("tOracleInput_1", false);
				start_Hash.put("tOracleInput_1", System.currentTimeMillis());
				currentComponent = "tOracleInput_1";

				int tos_count_tOracleInput_1 = 0;

				int nb_line_tOracleInput_1 = 0;
				java.sql.Connection conn_tOracleInput_1 = null;
				conn_tOracleInput_1 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_2");
				if (null == conn_tOracleInput_1) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleInput_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tOracleInput_1 = dataSources_tOracleInput_1.get("")
							.getConnection();
					// globalMap.put("conn_tOracleConnection_2",
					// conn_tOracleInput_1);
				}
				if (((oracle.jdbc.OracleConnection) conn_tOracleInput_1)
						.getSessionTimeZone() == null) {
					java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1
							.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1
							.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_1 = java.util.TimeZone
							.getDefault().getID();
					while (rsGetTZ_tOracleInput_1.next()) {
						sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1
								.getString(1);
					}
					((oracle.jdbc.OracleConnection) conn_tOracleInput_1)
							.setSessionTimeZone(sessionTimezone_tOracleInput_1);
				}

				java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1
						.createStatement();

				String dbquery_tOracleInput_1 = context.SQLCommand;

				globalMap.put("tOracleInput_1_QUERY", dbquery_tOracleInput_1);

				java.sql.ResultSet rs_tOracleInput_1 = stmt_tOracleInput_1
						.executeQuery(dbquery_tOracleInput_1);
				java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1
						.getMetaData();
				int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1
						.getColumnCount();

				String tmpContent_tOracleInput_1 = null;
				int column_index_tOracleInput_1 = 1;
				while (rs_tOracleInput_1.next()) {
					nb_line_tOracleInput_1++;

					column_index_tOracleInput_1 = 1;

					if (colQtyInRs_tOracleInput_1 < column_index_tOracleInput_1) {
						dbrow.C_HLEVEL = null;
					} else {

						if (rs_tOracleInput_1
								.getObject(column_index_tOracleInput_1) != null) {
							dbrow.C_HLEVEL = rs_tOracleInput_1
									.getBigDecimal(column_index_tOracleInput_1);
						} else {

							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tOracleInput_1 = 2;

					if (colQtyInRs_tOracleInput_1 < column_index_tOracleInput_1) {
						dbrow.C_FULLNAME = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(column_index_tOracleInput_1);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.C_FULLNAME = tmpContent_tOracleInput_1;
						} else {
							dbrow.C_FULLNAME = null;
						}

					}
					column_index_tOracleInput_1 = 3;

					if (colQtyInRs_tOracleInput_1 < column_index_tOracleInput_1) {
						dbrow.C_NAME = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(column_index_tOracleInput_1);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.C_NAME = tmpContent_tOracleInput_1;
						} else {
							dbrow.C_NAME = null;
						}

					}
					column_index_tOracleInput_1 = 4;

					if (colQtyInRs_tOracleInput_1 < column_index_tOracleInput_1) {
						dbrow.C_SYNONYM_CD = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(column_index_tOracleInput_1);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.C_SYNONYM_CD = tmpContent_tOracleInput_1;
						} else {
							dbrow.C_SYNONYM_CD = null;
						}

					}
					column_index_tOracleInput_1 = 5;

					if (colQtyInRs_tOracleInput_1 < column_index_tOracleInput_1) {
						dbrow.C_VISUALATTRIBUTES = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(column_index_tOracleInput_1);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.C_VISUALATTRIBUTES = tmpContent_tOracleInput_1;
						} else {
							dbrow.C_VISUALATTRIBUTES = null;
						}

					}
					column_index_tOracleInput_1 = 6;

					if (colQtyInRs_tOracleInput_1 < column_index_tOracleInput_1) {
						dbrow.C_TOTALNUM = null;
					} else {

						if (rs_tOracleInput_1
								.getObject(column_index_tOracleInput_1) != null) {
							dbrow.C_TOTALNUM = rs_tOracleInput_1
									.getInt(column_index_tOracleInput_1);
						} else {

							dbrow.C_TOTALNUM = null;
						}

					}
					column_index_tOracleInput_1 = 7;

					if (colQtyInRs_tOracleInput_1 < column_index_tOracleInput_1) {
						dbrow.C_BASECODE = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(column_index_tOracleInput_1);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.C_BASECODE = tmpContent_tOracleInput_1;
						} else {
							dbrow.C_BASECODE = null;
						}

					}
					column_index_tOracleInput_1 = 8;

					if (colQtyInRs_tOracleInput_1 < column_index_tOracleInput_1) {
						dbrow.C_METADATAXML = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(column_index_tOracleInput_1);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.C_METADATAXML = tmpContent_tOracleInput_1;
						} else {
							dbrow.C_METADATAXML = null;
						}

					}
					column_index_tOracleInput_1 = 9;

					if (colQtyInRs_tOracleInput_1 < column_index_tOracleInput_1) {
						dbrow.C_FACTTABLECOLUMN = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(column_index_tOracleInput_1);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.C_FACTTABLECOLUMN = tmpContent_tOracleInput_1;
						} else {
							dbrow.C_FACTTABLECOLUMN = null;
						}

					}
					column_index_tOracleInput_1 = 10;

					if (colQtyInRs_tOracleInput_1 < column_index_tOracleInput_1) {
						dbrow.C_TABLENAME = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(column_index_tOracleInput_1);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.C_TABLENAME = tmpContent_tOracleInput_1;
						} else {
							dbrow.C_TABLENAME = null;
						}

					}
					column_index_tOracleInput_1 = 11;

					if (colQtyInRs_tOracleInput_1 < column_index_tOracleInput_1) {
						dbrow.C_COLUMNNAME = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(column_index_tOracleInput_1);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.C_COLUMNNAME = tmpContent_tOracleInput_1;
						} else {
							dbrow.C_COLUMNNAME = null;
						}

					}
					column_index_tOracleInput_1 = 12;

					if (colQtyInRs_tOracleInput_1 < column_index_tOracleInput_1) {
						dbrow.C_COLUMNDATATYPE = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(column_index_tOracleInput_1);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.C_COLUMNDATATYPE = tmpContent_tOracleInput_1;
						} else {
							dbrow.C_COLUMNDATATYPE = null;
						}

					}
					column_index_tOracleInput_1 = 13;

					if (colQtyInRs_tOracleInput_1 < column_index_tOracleInput_1) {
						dbrow.C_OPERATOR = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(column_index_tOracleInput_1);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.C_OPERATOR = tmpContent_tOracleInput_1;
						} else {
							dbrow.C_OPERATOR = null;
						}

					}
					column_index_tOracleInput_1 = 14;

					if (colQtyInRs_tOracleInput_1 < column_index_tOracleInput_1) {
						dbrow.C_DIMCODE = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(column_index_tOracleInput_1);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.C_DIMCODE = tmpContent_tOracleInput_1;
						} else {
							dbrow.C_DIMCODE = null;
						}

					}
					column_index_tOracleInput_1 = 15;

					if (colQtyInRs_tOracleInput_1 < column_index_tOracleInput_1) {
						dbrow.C_COMMENT = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(column_index_tOracleInput_1);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.C_COMMENT = tmpContent_tOracleInput_1;
						} else {
							dbrow.C_COMMENT = null;
						}

					}
					column_index_tOracleInput_1 = 16;

					if (colQtyInRs_tOracleInput_1 < column_index_tOracleInput_1) {
						dbrow.C_TOOLTIP = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(column_index_tOracleInput_1);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.C_TOOLTIP = tmpContent_tOracleInput_1;
						} else {
							dbrow.C_TOOLTIP = null;
						}

					}
					column_index_tOracleInput_1 = 17;

					if (colQtyInRs_tOracleInput_1 < column_index_tOracleInput_1) {
						dbrow.M_APPLIED_PATH = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(column_index_tOracleInput_1);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.M_APPLIED_PATH = tmpContent_tOracleInput_1;
						} else {
							dbrow.M_APPLIED_PATH = null;
						}

					}
					column_index_tOracleInput_1 = 18;

					if (colQtyInRs_tOracleInput_1 < column_index_tOracleInput_1) {
						dbrow.UPDATE_DATE = null;
					} else {

						if (rs_tOracleInput_1
								.getTimestamp(column_index_tOracleInput_1) != null) {
							dbrow.UPDATE_DATE = new java.util.Date(
									rs_tOracleInput_1.getTimestamp(
											column_index_tOracleInput_1)
											.getTime());
						} else {
							dbrow.UPDATE_DATE = null;
						}

					}
					column_index_tOracleInput_1 = 19;

					if (colQtyInRs_tOracleInput_1 < column_index_tOracleInput_1) {
						dbrow.DOWNLOAD_DATE = null;
					} else {

						if (rs_tOracleInput_1
								.getTimestamp(column_index_tOracleInput_1) != null) {
							dbrow.DOWNLOAD_DATE = new java.util.Date(
									rs_tOracleInput_1.getTimestamp(
											column_index_tOracleInput_1)
											.getTime());
						} else {
							dbrow.DOWNLOAD_DATE = null;
						}

					}
					column_index_tOracleInput_1 = 20;

					if (colQtyInRs_tOracleInput_1 < column_index_tOracleInput_1) {
						dbrow.IMPORT_DATE = null;
					} else {

						if (rs_tOracleInput_1
								.getTimestamp(column_index_tOracleInput_1) != null) {
							dbrow.IMPORT_DATE = new java.util.Date(
									rs_tOracleInput_1.getTimestamp(
											column_index_tOracleInput_1)
											.getTime());
						} else {
							dbrow.IMPORT_DATE = null;
						}

					}
					column_index_tOracleInput_1 = 21;

					if (colQtyInRs_tOracleInput_1 < column_index_tOracleInput_1) {
						dbrow.SOURCESYSTEM_CD = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(column_index_tOracleInput_1);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.SOURCESYSTEM_CD = tmpContent_tOracleInput_1;
						} else {
							dbrow.SOURCESYSTEM_CD = null;
						}

					}
					column_index_tOracleInput_1 = 22;

					if (colQtyInRs_tOracleInput_1 < column_index_tOracleInput_1) {
						dbrow.VALUETYPE_CD = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(column_index_tOracleInput_1);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.VALUETYPE_CD = tmpContent_tOracleInput_1;
						} else {
							dbrow.VALUETYPE_CD = null;
						}

					}
					column_index_tOracleInput_1 = 23;

					if (colQtyInRs_tOracleInput_1 < column_index_tOracleInput_1) {
						dbrow.M_EXCLUSION_CD = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(column_index_tOracleInput_1);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.M_EXCLUSION_CD = tmpContent_tOracleInput_1;
						} else {
							dbrow.M_EXCLUSION_CD = null;
						}

					}
					column_index_tOracleInput_1 = 24;

					if (colQtyInRs_tOracleInput_1 < column_index_tOracleInput_1) {
						dbrow.C_PATH = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(column_index_tOracleInput_1);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.C_PATH = tmpContent_tOracleInput_1;
						} else {
							dbrow.C_PATH = null;
						}

					}
					column_index_tOracleInput_1 = 25;

					if (colQtyInRs_tOracleInput_1 < column_index_tOracleInput_1) {
						dbrow.C_SYMBOL = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(column_index_tOracleInput_1);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.C_SYMBOL = tmpContent_tOracleInput_1;
						} else {
							dbrow.C_SYMBOL = null;
						}

					}

					/**
					 * [tOracleInput_1 begin ] stop
					 */
					/**
					 * [tOracleInput_1 main ] start
					 */

					currentComponent = "tOracleInput_1";

					tos_count_tOracleInput_1++;

					/**
					 * [tOracleInput_1 main ] stop
					 */

					/**
					 * [tJavaFlex_1 main ] start
					 */

					currentComponent = "tJavaFlex_1";

					((TOSHandler) context.TOSHandler)
							.addi2b2OntologyItemToTree(dbrow.C_HLEVEL
									.intValue(), dbrow.C_FULLNAME,
									dbrow.C_NAME, dbrow.C_SYNONYM_CD,
									dbrow.C_VISUALATTRIBUTES, Relational
											.ISNULL(dbrow.C_TOTALNUM) ? 0
											: dbrow.C_TOTALNUM.intValue(),
									dbrow.C_BASECODE, dbrow.C_METADATAXML,
									dbrow.C_FACTTABLECOLUMN, dbrow.C_TABLENAME,
									dbrow.C_COLUMNNAME, dbrow.C_COLUMNDATATYPE,
									dbrow.C_OPERATOR, dbrow.C_DIMCODE,
									dbrow.C_COMMENT, dbrow.C_TOOLTIP,
									dbrow.M_APPLIED_PATH, dbrow.UPDATE_DATE,
									dbrow.DOWNLOAD_DATE, dbrow.IMPORT_DATE,
									dbrow.SOURCESYSTEM_CD, dbrow.VALUETYPE_CD,
									dbrow.M_EXCLUSION_CD, dbrow.C_PATH,
									dbrow.C_SYMBOL);
					number_of_ontology_items++;

					tos_count_tJavaFlex_1++;

					/**
					 * [tJavaFlex_1 main ] stop
					 */

					/**
					 * [tOracleInput_1 end ] start
					 */

					currentComponent = "tOracleInput_1";

				}
				stmt_tOracleInput_1.close();

				globalMap.put("tOracleInput_1_NB_LINE", nb_line_tOracleInput_1);

				ok_Hash.put("tOracleInput_1", true);
				end_Hash.put("tOracleInput_1", System.currentTimeMillis());

				/**
				 * [tOracleInput_1 end ] stop
				 */

				/**
				 * [tJavaFlex_1 end ] start
				 */

				currentComponent = "tJavaFlex_1";

				System.out.println("TOS: Ontology read with "
						+ number_of_ontology_items + " items.");

				ok_Hash.put("tJavaFlex_1", true);
				end_Hash.put("tJavaFlex_1", System.currentTimeMillis());

				/**
				 * [tJavaFlex_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_3 begin ] start
				 */

				ok_Hash.put("tJava_3", false);
				start_Hash.put("tJava_3", System.currentTimeMillis());
				currentComponent = "tJava_3";

				int tos_count_tJava_3 = 0;

				context.ErrorMessage = "Error while getting data from to the db.";
				((TOSHandler) context.TOSHandler).status(context.ErrorMessage);
				System.out.println(context.ErrorMessage);

				/**
				 * [tJava_3 begin ] stop
				 */
				/**
				 * [tJava_3 main ] start
				 */

				currentComponent = "tJava_3";

				tos_count_tJava_3++;

				/**
				 * [tJava_3 main ] stop
				 */
				/**
				 * [tJava_3 end ] start
				 */

				currentComponent = "tJava_3";

				ok_Hash.put("tJava_3", true);
				end_Hash.put("tJava_3", System.currentTimeMillis());

				/**
				 * [tJava_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}

	public static class conceptDimensionStruct implements
			routines.system.IPersistableRow<conceptDimensionStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTConnector = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTConnector = new byte[0];

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTConnector.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTConnector.length == 0) {
						commonByteArray_TOS_TOSIDRTConnector = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTConnector = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_TOSIDRTConnector, 0, length);
				strReturn = new String(commonByteArray_TOS_TOSIDRTConnector, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTConnector) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.CONCEPT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.CONCEPT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(conceptDimensionStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				conceptDimensionStruct conceptDimension = new conceptDimensionStruct();

				/**
				 * [tJavaFlex_3 begin ] start
				 */

				ok_Hash.put("tJavaFlex_3", false);
				start_Hash.put("tJavaFlex_3", System.currentTimeMillis());
				currentComponent = "tJavaFlex_3";

				int tos_count_tJavaFlex_3 = 0;

				System.out.println("Starting Talend-Job as TOS-Code.");

				/**
				 * [tJavaFlex_3 begin ] stop
				 */

				/**
				 * [tOracleInput_5 begin ] start
				 */

				ok_Hash.put("tOracleInput_5", false);
				start_Hash.put("tOracleInput_5", System.currentTimeMillis());
				currentComponent = "tOracleInput_5";

				int tos_count_tOracleInput_5 = 0;

				int nb_line_tOracleInput_5 = 0;
				java.sql.Connection conn_tOracleInput_5 = null;
				conn_tOracleInput_5 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_2");
				if (null == conn_tOracleInput_5) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleInput_5 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tOracleInput_5 = dataSources_tOracleInput_5.get("")
							.getConnection();
					// globalMap.put("conn_tOracleConnection_2",
					// conn_tOracleInput_5);
				}
				if (((oracle.jdbc.OracleConnection) conn_tOracleInput_5)
						.getSessionTimeZone() == null) {
					java.sql.Statement stmtGetTZ_tOracleInput_5 = conn_tOracleInput_5
							.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_5 = stmtGetTZ_tOracleInput_5
							.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_5 = java.util.TimeZone
							.getDefault().getID();
					while (rsGetTZ_tOracleInput_5.next()) {
						sessionTimezone_tOracleInput_5 = rsGetTZ_tOracleInput_5
								.getString(1);
					}
					((oracle.jdbc.OracleConnection) conn_tOracleInput_5)
							.setSessionTimeZone(sessionTimezone_tOracleInput_5);
				}

				java.sql.Statement stmt_tOracleInput_5 = conn_tOracleInput_5
						.createStatement();

				String dbquery_tOracleInput_5 = "Select * from i2b2idrt.concept_dimension" /*
																							 * context
																							 * .
																							 * SQLCommand
																							 */;

				globalMap.put("tOracleInput_5_QUERY", dbquery_tOracleInput_5);

				java.sql.ResultSet rs_tOracleInput_5 = stmt_tOracleInput_5
						.executeQuery(dbquery_tOracleInput_5);
				java.sql.ResultSetMetaData rsmd_tOracleInput_5 = rs_tOracleInput_5
						.getMetaData();
				int colQtyInRs_tOracleInput_5 = rsmd_tOracleInput_5
						.getColumnCount();

				String tmpContent_tOracleInput_5 = null;
				int column_index_tOracleInput_5 = 1;
				while (rs_tOracleInput_5.next()) {
					nb_line_tOracleInput_5++;

					column_index_tOracleInput_5 = 1;

					if (colQtyInRs_tOracleInput_5 < column_index_tOracleInput_5) {
						conceptDimension.CONCEPT_PATH = null;
					} else {

						tmpContent_tOracleInput_5 = rs_tOracleInput_5
								.getString(column_index_tOracleInput_5);
						if (tmpContent_tOracleInput_5 != null) {
							conceptDimension.CONCEPT_PATH = tmpContent_tOracleInput_5;
						} else {
							conceptDimension.CONCEPT_PATH = null;
						}

					}
					column_index_tOracleInput_5 = 2;

					if (colQtyInRs_tOracleInput_5 < column_index_tOracleInput_5) {
						conceptDimension.CONCEPT_CD = null;
					} else {

						tmpContent_tOracleInput_5 = rs_tOracleInput_5
								.getString(column_index_tOracleInput_5);
						if (tmpContent_tOracleInput_5 != null) {
							conceptDimension.CONCEPT_CD = tmpContent_tOracleInput_5;
						} else {
							conceptDimension.CONCEPT_CD = null;
						}

					}
					column_index_tOracleInput_5 = 3;

					if (colQtyInRs_tOracleInput_5 < column_index_tOracleInput_5) {
						conceptDimension.NAME_CHAR = null;
					} else {

						tmpContent_tOracleInput_5 = rs_tOracleInput_5
								.getString(column_index_tOracleInput_5);
						if (tmpContent_tOracleInput_5 != null) {
							conceptDimension.NAME_CHAR = tmpContent_tOracleInput_5;
						} else {
							conceptDimension.NAME_CHAR = null;
						}

					}
					column_index_tOracleInput_5 = 4;

					if (colQtyInRs_tOracleInput_5 < column_index_tOracleInput_5) {
						conceptDimension.CONCEPT_BLOB = null;
					} else {

						tmpContent_tOracleInput_5 = rs_tOracleInput_5
								.getString(column_index_tOracleInput_5);
						if (tmpContent_tOracleInput_5 != null) {
							conceptDimension.CONCEPT_BLOB = tmpContent_tOracleInput_5;
						} else {
							conceptDimension.CONCEPT_BLOB = null;
						}

					}
					column_index_tOracleInput_5 = 5;

					if (colQtyInRs_tOracleInput_5 < column_index_tOracleInput_5) {
						conceptDimension.UPDATE_DATE = null;
					} else {

						if (rs_tOracleInput_5
								.getTimestamp(column_index_tOracleInput_5) != null) {
							conceptDimension.UPDATE_DATE = new java.util.Date(
									rs_tOracleInput_5.getTimestamp(
											column_index_tOracleInput_5)
											.getTime());
						} else {
							conceptDimension.UPDATE_DATE = null;
						}

					}
					column_index_tOracleInput_5 = 6;

					if (colQtyInRs_tOracleInput_5 < column_index_tOracleInput_5) {
						conceptDimension.DOWNLOAD_DATE = null;
					} else {

						if (rs_tOracleInput_5
								.getTimestamp(column_index_tOracleInput_5) != null) {
							conceptDimension.DOWNLOAD_DATE = new java.util.Date(
									rs_tOracleInput_5.getTimestamp(
											column_index_tOracleInput_5)
											.getTime());
						} else {
							conceptDimension.DOWNLOAD_DATE = null;
						}

					}
					column_index_tOracleInput_5 = 7;

					if (colQtyInRs_tOracleInput_5 < column_index_tOracleInput_5) {
						conceptDimension.IMPORT_DATE = null;
					} else {

						if (rs_tOracleInput_5
								.getTimestamp(column_index_tOracleInput_5) != null) {
							conceptDimension.IMPORT_DATE = new java.util.Date(
									rs_tOracleInput_5.getTimestamp(
											column_index_tOracleInput_5)
											.getTime());
						} else {
							conceptDimension.IMPORT_DATE = null;
						}

					}
					column_index_tOracleInput_5 = 8;

					if (colQtyInRs_tOracleInput_5 < column_index_tOracleInput_5) {
						conceptDimension.SOURCESYSTEM_CD = null;
					} else {

						tmpContent_tOracleInput_5 = rs_tOracleInput_5
								.getString(column_index_tOracleInput_5);
						if (tmpContent_tOracleInput_5 != null) {
							conceptDimension.SOURCESYSTEM_CD = tmpContent_tOracleInput_5;
						} else {
							conceptDimension.SOURCESYSTEM_CD = null;
						}

					}
					column_index_tOracleInput_5 = 9;

					if (colQtyInRs_tOracleInput_5 < column_index_tOracleInput_5) {
						conceptDimension.UPLOAD_ID = null;
					} else {

						tmpContent_tOracleInput_5 = rs_tOracleInput_5
								.getString(column_index_tOracleInput_5);
						if (tmpContent_tOracleInput_5 != null) {
							conceptDimension.UPLOAD_ID = tmpContent_tOracleInput_5;
						} else {
							conceptDimension.UPLOAD_ID = null;
						}

					}

					/**
					 * [tOracleInput_5 begin ] stop
					 */
					/**
					 * [tOracleInput_5 main ] start
					 */

					currentComponent = "tOracleInput_5";

					tos_count_tOracleInput_5++;

					/**
					 * [tOracleInput_5 main ] stop
					 */

					/**
					 * [tJavaFlex_3 main ] start
					 */

					currentComponent = "tJavaFlex_3";

					((TOSHandler) context.TOSHandler)
							.addi2b2ConceptDimensionItemToTree(true,
									conceptDimension.CONCEPT_PATH,
									conceptDimension.CONCEPT_CD,
									conceptDimension.NAME_CHAR,
									conceptDimension.CONCEPT_BLOB,
									conceptDimension.UPDATE_DATE,
									conceptDimension.DOWNLOAD_DATE,
									conceptDimension.IMPORT_DATE,
									conceptDimension.SOURCESYSTEM_CD,
									conceptDimension.UPLOAD_ID);

					tos_count_tJavaFlex_3++;

					/**
					 * [tJavaFlex_3 main ] stop
					 */

					/**
					 * [tOracleInput_5 end ] start
					 */

					currentComponent = "tOracleInput_5";

				}
				stmt_tOracleInput_5.close();

				globalMap.put("tOracleInput_5_NB_LINE", nb_line_tOracleInput_5);

				ok_Hash.put("tOracleInput_5", true);
				end_Hash.put("tOracleInput_5", System.currentTimeMillis());

				/**
				 * [tOracleInput_5 end ] stop
				 */

				/**
				 * [tJavaFlex_3 end ] start
				 */

				currentComponent = "tJavaFlex_3";

				// end of the component, outside/closing the loop

				ok_Hash.put("tJavaFlex_3", true);
				end_Hash.put("tJavaFlex_3", System.currentTimeMillis());

				/**
				 * [tJavaFlex_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tOracleInput_5:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tOracleInput_3Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 1);
	}

	public static class modifierDimensionStruct implements
			routines.system.IPersistableRow<modifierDimensionStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTConnector = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTConnector = new byte[0];

		public String MODIFIER_PATH;

		public String getMODIFIER_PATH() {
			return this.MODIFIER_PATH;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String MODIFIER_BLOB;

		public String getMODIFIER_BLOB() {
			return this.MODIFIER_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTConnector.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTConnector.length == 0) {
						commonByteArray_TOS_TOSIDRTConnector = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTConnector = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_TOSIDRTConnector, 0, length);
				strReturn = new String(commonByteArray_TOS_TOSIDRTConnector, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTConnector) {

				try {

					int length = 0;

					this.MODIFIER_PATH = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.MODIFIER_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MODIFIER_PATH, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.MODIFIER_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MODIFIER_PATH=" + MODIFIER_PATH);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",MODIFIER_BLOB=" + MODIFIER_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(modifierDimensionStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				modifierDimensionStruct modifierDimension = new modifierDimensionStruct();

				/**
				 * [tJavaFlex_4 begin ] start
				 */

				ok_Hash.put("tJavaFlex_4", false);
				start_Hash.put("tJavaFlex_4", System.currentTimeMillis());
				currentComponent = "tJavaFlex_4";

				int tos_count_tJavaFlex_4 = 0;

				System.out.println("Starting Talend-Job as TOS-Code.");

				/**
				 * [tJavaFlex_4 begin ] stop
				 */

				/**
				 * [tOracleInput_3 begin ] start
				 */

				ok_Hash.put("tOracleInput_3", false);
				start_Hash.put("tOracleInput_3", System.currentTimeMillis());
				currentComponent = "tOracleInput_3";

				int tos_count_tOracleInput_3 = 0;

				int nb_line_tOracleInput_3 = 0;
				java.sql.Connection conn_tOracleInput_3 = null;
				conn_tOracleInput_3 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_2");
				if (null == conn_tOracleInput_3) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleInput_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tOracleInput_3 = dataSources_tOracleInput_3.get("")
							.getConnection();
					// globalMap.put("conn_tOracleConnection_2",
					// conn_tOracleInput_3);
				}
				if (((oracle.jdbc.OracleConnection) conn_tOracleInput_3)
						.getSessionTimeZone() == null) {
					java.sql.Statement stmtGetTZ_tOracleInput_3 = conn_tOracleInput_3
							.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_3 = stmtGetTZ_tOracleInput_3
							.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_3 = java.util.TimeZone
							.getDefault().getID();
					while (rsGetTZ_tOracleInput_3.next()) {
						sessionTimezone_tOracleInput_3 = rsGetTZ_tOracleInput_3
								.getString(1);
					}
					((oracle.jdbc.OracleConnection) conn_tOracleInput_3)
							.setSessionTimeZone(sessionTimezone_tOracleInput_3);
				}

				java.sql.Statement stmt_tOracleInput_3 = conn_tOracleInput_3
						.createStatement();

				String dbquery_tOracleInput_3 = "Select * from i2b2idrt.modifier_dimension" /*
																							 * context
																							 * .
																							 * SQLCommand2
																							 */;

				globalMap.put("tOracleInput_3_QUERY", dbquery_tOracleInput_3);

				java.sql.ResultSet rs_tOracleInput_3 = stmt_tOracleInput_3
						.executeQuery(dbquery_tOracleInput_3);
				java.sql.ResultSetMetaData rsmd_tOracleInput_3 = rs_tOracleInput_3
						.getMetaData();
				int colQtyInRs_tOracleInput_3 = rsmd_tOracleInput_3
						.getColumnCount();

				String tmpContent_tOracleInput_3 = null;
				int column_index_tOracleInput_3 = 1;
				while (rs_tOracleInput_3.next()) {
					nb_line_tOracleInput_3++;

					column_index_tOracleInput_3 = 1;

					if (colQtyInRs_tOracleInput_3 < column_index_tOracleInput_3) {
						modifierDimension.MODIFIER_PATH = null;
					} else {

						tmpContent_tOracleInput_3 = rs_tOracleInput_3
								.getString(column_index_tOracleInput_3);
						if (tmpContent_tOracleInput_3 != null) {
							modifierDimension.MODIFIER_PATH = tmpContent_tOracleInput_3;
						} else {
							modifierDimension.MODIFIER_PATH = null;
						}

					}
					column_index_tOracleInput_3 = 2;

					if (colQtyInRs_tOracleInput_3 < column_index_tOracleInput_3) {
						modifierDimension.MODIFIER_CD = null;
					} else {

						tmpContent_tOracleInput_3 = rs_tOracleInput_3
								.getString(column_index_tOracleInput_3);
						if (tmpContent_tOracleInput_3 != null) {
							modifierDimension.MODIFIER_CD = tmpContent_tOracleInput_3;
						} else {
							modifierDimension.MODIFIER_CD = null;
						}

					}
					column_index_tOracleInput_3 = 3;

					if (colQtyInRs_tOracleInput_3 < column_index_tOracleInput_3) {
						modifierDimension.NAME_CHAR = null;
					} else {

						tmpContent_tOracleInput_3 = rs_tOracleInput_3
								.getString(column_index_tOracleInput_3);
						if (tmpContent_tOracleInput_3 != null) {
							modifierDimension.NAME_CHAR = tmpContent_tOracleInput_3;
						} else {
							modifierDimension.NAME_CHAR = null;
						}

					}
					column_index_tOracleInput_3 = 4;

					if (colQtyInRs_tOracleInput_3 < column_index_tOracleInput_3) {
						modifierDimension.MODIFIER_BLOB = null;
					} else {

						tmpContent_tOracleInput_3 = rs_tOracleInput_3
								.getString(column_index_tOracleInput_3);
						if (tmpContent_tOracleInput_3 != null) {
							modifierDimension.MODIFIER_BLOB = tmpContent_tOracleInput_3;
						} else {
							modifierDimension.MODIFIER_BLOB = null;
						}

					}
					column_index_tOracleInput_3 = 5;

					if (colQtyInRs_tOracleInput_3 < column_index_tOracleInput_3) {
						modifierDimension.UPDATE_DATE = null;
					} else {

						if (rs_tOracleInput_3
								.getTimestamp(column_index_tOracleInput_3) != null) {
							modifierDimension.UPDATE_DATE = new java.util.Date(
									rs_tOracleInput_3.getTimestamp(
											column_index_tOracleInput_3)
											.getTime());
						} else {
							modifierDimension.UPDATE_DATE = null;
						}

					}
					column_index_tOracleInput_3 = 6;

					if (colQtyInRs_tOracleInput_3 < column_index_tOracleInput_3) {
						modifierDimension.DOWNLOAD_DATE = null;
					} else {

						if (rs_tOracleInput_3
								.getTimestamp(column_index_tOracleInput_3) != null) {
							modifierDimension.DOWNLOAD_DATE = new java.util.Date(
									rs_tOracleInput_3.getTimestamp(
											column_index_tOracleInput_3)
											.getTime());
						} else {
							modifierDimension.DOWNLOAD_DATE = null;
						}

					}
					column_index_tOracleInput_3 = 7;

					if (colQtyInRs_tOracleInput_3 < column_index_tOracleInput_3) {
						modifierDimension.IMPORT_DATE = null;
					} else {

						if (rs_tOracleInput_3
								.getTimestamp(column_index_tOracleInput_3) != null) {
							modifierDimension.IMPORT_DATE = new java.util.Date(
									rs_tOracleInput_3.getTimestamp(
											column_index_tOracleInput_3)
											.getTime());
						} else {
							modifierDimension.IMPORT_DATE = null;
						}

					}
					column_index_tOracleInput_3 = 8;

					if (colQtyInRs_tOracleInput_3 < column_index_tOracleInput_3) {
						modifierDimension.SOURCESYSTEM_CD = null;
					} else {

						tmpContent_tOracleInput_3 = rs_tOracleInput_3
								.getString(column_index_tOracleInput_3);
						if (tmpContent_tOracleInput_3 != null) {
							modifierDimension.SOURCESYSTEM_CD = tmpContent_tOracleInput_3;
						} else {
							modifierDimension.SOURCESYSTEM_CD = null;
						}

					}
					column_index_tOracleInput_3 = 9;

					if (colQtyInRs_tOracleInput_3 < column_index_tOracleInput_3) {
						modifierDimension.UPLOAD_ID = null;
					} else {

						tmpContent_tOracleInput_3 = rs_tOracleInput_3
								.getString(column_index_tOracleInput_3);
						if (tmpContent_tOracleInput_3 != null) {
							modifierDimension.UPLOAD_ID = tmpContent_tOracleInput_3;
						} else {
							modifierDimension.UPLOAD_ID = null;
						}

					}

					/**
					 * [tOracleInput_3 begin ] stop
					 */
					/**
					 * [tOracleInput_3 main ] start
					 */

					currentComponent = "tOracleInput_3";

					tos_count_tOracleInput_3++;

					/**
					 * [tOracleInput_3 main ] stop
					 */

					/**
					 * [tJavaFlex_4 main ] start
					 */

					currentComponent = "tJavaFlex_4";

					((TOSHandler) context.TOSHandler)
							.addi2b2ConceptDimensionItemToTree(false,
									modifierDimension.MODIFIER_PATH,
									modifierDimension.MODIFIER_CD,
									modifierDimension.NAME_CHAR,
									modifierDimension.MODIFIER_BLOB,
									modifierDimension.UPDATE_DATE,
									modifierDimension.DOWNLOAD_DATE,
									modifierDimension.IMPORT_DATE,
									modifierDimension.SOURCESYSTEM_CD,
									modifierDimension.UPLOAD_ID);

					tos_count_tJavaFlex_4++;

					/**
					 * [tJavaFlex_4 main ] stop
					 */

					/**
					 * [tOracleInput_3 end ] start
					 */

					currentComponent = "tOracleInput_3";

				}
				stmt_tOracleInput_3.close();

				globalMap.put("tOracleInput_3_NB_LINE", nb_line_tOracleInput_3);

				ok_Hash.put("tOracleInput_3", true);
				end_Hash.put("tOracleInput_3", System.currentTimeMillis());

				/**
				 * [tOracleInput_3 end ] stop
				 */

				/**
				 * [tJavaFlex_4 end ] start
				 */

				currentComponent = "tJavaFlex_4";

				// end of the component, outside/closing the loop

				ok_Hash.put("tJavaFlex_4", true);
				end_Hash.put("tJavaFlex_4", System.currentTimeMillis());

				/**
				 * [tJavaFlex_4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 1);
	}

	public static class checkStruct implements
			routines.system.IPersistableRow<checkStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTConnector = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTConnector = new byte[0];

		public String ontologyCount;

		public String getOntologyCount() {
			return this.ontologyCount;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTConnector.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTConnector.length == 0) {
						commonByteArray_TOS_TOSIDRTConnector = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTConnector = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_TOSIDRTConnector, 0, length);
				strReturn = new String(commonByteArray_TOS_TOSIDRTConnector, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTConnector) {

				try {

					int length = 0;

					this.ontologyCount = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ontologyCount, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ontologyCount=" + ontologyCount);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(checkStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_8Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleInput_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				checkStruct check = new checkStruct();

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());
				currentComponent = "tJavaRow_1";

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tOracleInput_8 begin ] start
				 */

				ok_Hash.put("tOracleInput_8", false);
				start_Hash.put("tOracleInput_8", System.currentTimeMillis());
				currentComponent = "tOracleInput_8";

				int tos_count_tOracleInput_8 = 0;

				int nb_line_tOracleInput_8 = 0;
				java.sql.Connection conn_tOracleInput_8 = null;
				conn_tOracleInput_8 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_2");
				if (null == conn_tOracleInput_8) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleInput_8 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tOracleInput_8 = dataSources_tOracleInput_8.get("")
							.getConnection();
					// globalMap.put("conn_tOracleConnection_2",
					// conn_tOracleInput_8);
				}
				if (((oracle.jdbc.OracleConnection) conn_tOracleInput_8)
						.getSessionTimeZone() == null) {
					java.sql.Statement stmtGetTZ_tOracleInput_8 = conn_tOracleInput_8
							.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_8 = stmtGetTZ_tOracleInput_8
							.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_8 = java.util.TimeZone
							.getDefault().getID();
					while (rsGetTZ_tOracleInput_8.next()) {
						sessionTimezone_tOracleInput_8 = rsGetTZ_tOracleInput_8
								.getString(1);
					}
					((oracle.jdbc.OracleConnection) conn_tOracleInput_8)
							.setSessionTimeZone(sessionTimezone_tOracleInput_8);
				}

				java.sql.Statement stmt_tOracleInput_8 = conn_tOracleInput_8
						.createStatement();

				String dbquery_tOracleInput_8 = "Select COUNT(C_FULLNAME) from "
						+ context.OracleSchema + ".i2b2";

				globalMap.put("tOracleInput_8_QUERY", dbquery_tOracleInput_8);

				java.sql.ResultSet rs_tOracleInput_8 = stmt_tOracleInput_8
						.executeQuery(dbquery_tOracleInput_8);
				java.sql.ResultSetMetaData rsmd_tOracleInput_8 = rs_tOracleInput_8
						.getMetaData();
				int colQtyInRs_tOracleInput_8 = rsmd_tOracleInput_8
						.getColumnCount();

				String tmpContent_tOracleInput_8 = null;
				int column_index_tOracleInput_8 = 1;
				while (rs_tOracleInput_8.next()) {
					nb_line_tOracleInput_8++;

					column_index_tOracleInput_8 = 1;

					if (colQtyInRs_tOracleInput_8 < column_index_tOracleInput_8) {
						check.ontologyCount = null;
					} else {

						tmpContent_tOracleInput_8 = rs_tOracleInput_8
								.getString(column_index_tOracleInput_8);
						if (tmpContent_tOracleInput_8 != null) {
							check.ontologyCount = tmpContent_tOracleInput_8;
						} else {
							check.ontologyCount = null;
						}

					}

					/**
					 * [tOracleInput_8 begin ] stop
					 */
					/**
					 * [tOracleInput_8 main ] start
					 */

					currentComponent = "tOracleInput_8";

					tos_count_tOracleInput_8++;

					/**
					 * [tOracleInput_8 main ] stop
					 */

					/**
					 * [tJavaRow_1 main ] start
					 */

					currentComponent = "tJavaRow_1";

					System.out.println("count: " + check.ontologyCount);
					if (Integer.valueOf(check.ontologyCount) > 1) {
						context.IfValue = true;
					} else {
						context.IfValue = false;
					}

					nb_line_tJavaRow_1++;

					tos_count_tJavaRow_1++;

					/**
					 * [tJavaRow_1 main ] stop
					 */

					/**
					 * [tOracleInput_8 end ] start
					 */

					currentComponent = "tOracleInput_8";

				}
				stmt_tOracleInput_8.close();

				globalMap.put("tOracleInput_8_NB_LINE", nb_line_tOracleInput_8);

				ok_Hash.put("tOracleInput_8", true);
				end_Hash.put("tOracleInput_8", System.currentTimeMillis());

				/**
				 * [tOracleInput_8 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if (context.IfValue) {

					tDie_1Process(globalMap);
				}

				if (!context.IfValue) {

					tDie_2Process(globalMap);
				}

				/**
				 * [tJavaRow_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tOracleInput_8_SUBPROCESS_STATE", 1);
	}

	public void tDie_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_1 begin ] start
				 */

				ok_Hash.put("tDie_1", false);
				start_Hash.put("tDie_1", System.currentTimeMillis());
				currentComponent = "tDie_1";

				int tos_count_tDie_1 = 0;

				/**
				 * [tDie_1 begin ] stop
				 */
				/**
				 * [tDie_1 main ] start
				 */

				currentComponent = "tDie_1";

				globalMap.put("tDie_1_DIE_PRIORITY", 3);
				System.err.println("its good");
				globalMap.put("tDie_1_DIE_MESSAGE", "its good");
				globalMap.put("tDie_1_DIE_MESSAGES", "its good");
				currentComponent = "tDie_1";
				status = "failure";
				errorCode = new Integer(0);
				globalMap.put("tDie_1_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_1++;

				/**
				 * [tDie_1 main ] stop
				 */
				/**
				 * [tDie_1 end ] start
				 */

				currentComponent = "tDie_1";

				ok_Hash.put("tDie_1", true);
				end_Hash.put("tDie_1", System.currentTimeMillis());

				/**
				 * [tDie_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}

	public void tDie_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_2 begin ] start
				 */

				ok_Hash.put("tDie_2", false);
				start_Hash.put("tDie_2", System.currentTimeMillis());
				currentComponent = "tDie_2";

				int tos_count_tDie_2 = 0;

				/**
				 * [tDie_2 begin ] stop
				 */
				/**
				 * [tDie_2 main ] start
				 */

				currentComponent = "tDie_2";

				globalMap.put("tDie_2_DIE_PRIORITY", 3);
				System.err.println("no ontology");
				globalMap.put("tDie_2_DIE_MESSAGE", "no ontology");
				globalMap.put("tDie_2_DIE_MESSAGES", "no ontology");
				currentComponent = "tDie_2";
				status = "failure";
				errorCode = new Integer(10);
				globalMap.put("tDie_2_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_2++;

				/**
				 * [tDie_2 main ] stop
				 */
				/**
				 * [tDie_2 end ] start
				 */

				currentComponent = "tDie_2";

				ok_Hash.put("tDie_2", true);
				end_Hash.put("tDie_2", System.currentTimeMillis());

				/**
				 * [tDie_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tDie_2_SUBPROCESS_STATE", 1);
	}

	public static class targetrow1Struct implements
			routines.system.IPersistableRow<targetrow1Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTConnector = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTConnector = new byte[0];

		public BigDecimal TARGET_ID;

		public BigDecimal getTARGET_ID() {
			return this.TARGET_ID;
		}

		public BigDecimal TARGETPROJECT_ID;

		public BigDecimal getTARGETPROJECT_ID() {
			return this.TARGETPROJECT_ID;
		}

		public BigDecimal VERSION;

		public BigDecimal getVERSION() {
			return this.VERSION;
		}

		public java.util.Date CREATED;

		public java.util.Date getCREATED() {
			return this.CREATED;
		}

		public java.util.Date LAST_MODIFIED;

		public java.util.Date getLAST_MODIFIED() {
			return this.LAST_MODIFIED;
		}

		public String USER_ID;

		public String getUSER_ID() {
			return this.USER_ID;
		}

		public String TARGET_DB_SCHEMA;

		public String getTARGET_DB_SCHEMA() {
			return this.TARGET_DB_SCHEMA;
		}

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTConnector.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTConnector.length == 0) {
						commonByteArray_TOS_TOSIDRTConnector = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTConnector = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_TOSIDRTConnector, 0, length);
				strReturn = new String(commonByteArray_TOS_TOSIDRTConnector, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTConnector) {

				try {

					int length = 0;

					this.TARGET_ID = (BigDecimal) dis.readObject();

					this.TARGETPROJECT_ID = (BigDecimal) dis.readObject();

					this.VERSION = (BigDecimal) dis.readObject();

					this.CREATED = readDate(dis);

					this.LAST_MODIFIED = readDate(dis);

					this.USER_ID = readString(dis);

					this.TARGET_DB_SCHEMA = readString(dis);

					this.NAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.TARGET_ID);

				// BigDecimal

				dos.writeObject(this.TARGETPROJECT_ID);

				// BigDecimal

				dos.writeObject(this.VERSION);

				// java.util.Date

				writeDate(this.CREATED, dos);

				// java.util.Date

				writeDate(this.LAST_MODIFIED, dos);

				// String

				writeString(this.USER_ID, dos);

				// String

				writeString(this.TARGET_DB_SCHEMA, dos);

				// String

				writeString(this.NAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TARGET_ID=" + String.valueOf(TARGET_ID));
			sb.append(",TARGETPROJECT_ID=" + String.valueOf(TARGETPROJECT_ID));
			sb.append(",VERSION=" + String.valueOf(VERSION));
			sb.append(",CREATED=" + String.valueOf(CREATED));
			sb.append(",LAST_MODIFIED=" + String.valueOf(LAST_MODIFIED));
			sb.append(",USER_ID=" + USER_ID);
			sb.append(",TARGET_DB_SCHEMA=" + TARGET_DB_SCHEMA);
			sb.append(",NAME=" + NAME);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(targetrow1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				targetrow1Struct targetrow1 = new targetrow1Struct();

				/**
				 * [tJavaFlex_5 begin ] start
				 */

				ok_Hash.put("tJavaFlex_5", false);
				start_Hash.put("tJavaFlex_5", System.currentTimeMillis());
				currentComponent = "tJavaFlex_5";

				int tos_count_tJavaFlex_5 = 0;

				System.out.println("Starting Talend-Job as TOS-Code.");

				/**
				 * [tJavaFlex_5 begin ] stop
				 */

				/**
				 * [tOracleInput_4 begin ] start
				 */

				ok_Hash.put("tOracleInput_4", false);
				start_Hash.put("tOracleInput_4", System.currentTimeMillis());
				currentComponent = "tOracleInput_4";

				int tos_count_tOracleInput_4 = 0;

				int nb_line_tOracleInput_4 = 0;
				java.sql.Connection conn_tOracleInput_4 = null;
				conn_tOracleInput_4 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_2");
				if (null == conn_tOracleInput_4) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleInput_4 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tOracleInput_4 = dataSources_tOracleInput_4.get("")
							.getConnection();
					// globalMap.put("conn_tOracleConnection_2",
					// conn_tOracleInput_4);
				}
				if (((oracle.jdbc.OracleConnection) conn_tOracleInput_4)
						.getSessionTimeZone() == null) {
					java.sql.Statement stmtGetTZ_tOracleInput_4 = conn_tOracleInput_4
							.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_4 = stmtGetTZ_tOracleInput_4
							.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_4 = java.util.TimeZone
							.getDefault().getID();
					while (rsGetTZ_tOracleInput_4.next()) {
						sessionTimezone_tOracleInput_4 = rsGetTZ_tOracleInput_4
								.getString(1);
					}
					((oracle.jdbc.OracleConnection) conn_tOracleInput_4)
							.setSessionTimeZone(sessionTimezone_tOracleInput_4);
				}

				java.sql.Statement stmt_tOracleInput_4 = conn_tOracleInput_4
						.createStatement();

				String dbquery_tOracleInput_4 = "Select i2b2idrt.ioe_target.*, i2b2idrt.ioe_targetproject.name from i2b2idrt.ioe_target INNER JOIN I2B2IDRT.ioe_targetproject ON i2b2idrt.ioe_target.targetproject_id=I2B2IDRT.ioe_targetproject.targetproject_id";

				globalMap.put("tOracleInput_4_QUERY", dbquery_tOracleInput_4);

				java.sql.ResultSet rs_tOracleInput_4 = stmt_tOracleInput_4
						.executeQuery(dbquery_tOracleInput_4);
				java.sql.ResultSetMetaData rsmd_tOracleInput_4 = rs_tOracleInput_4
						.getMetaData();
				int colQtyInRs_tOracleInput_4 = rsmd_tOracleInput_4
						.getColumnCount();

				String tmpContent_tOracleInput_4 = null;
				int column_index_tOracleInput_4 = 1;
				while (rs_tOracleInput_4.next()) {
					nb_line_tOracleInput_4++;

					column_index_tOracleInput_4 = 1;

					if (colQtyInRs_tOracleInput_4 < column_index_tOracleInput_4) {
						targetrow1.TARGET_ID = null;
					} else {

						if (rs_tOracleInput_4
								.getObject(column_index_tOracleInput_4) != null) {
							targetrow1.TARGET_ID = rs_tOracleInput_4
									.getBigDecimal(column_index_tOracleInput_4);
						} else {

							targetrow1.TARGET_ID = null;
						}

					}
					column_index_tOracleInput_4 = 2;

					if (colQtyInRs_tOracleInput_4 < column_index_tOracleInput_4) {
						targetrow1.TARGETPROJECT_ID = null;
					} else {

						if (rs_tOracleInput_4
								.getObject(column_index_tOracleInput_4) != null) {
							targetrow1.TARGETPROJECT_ID = rs_tOracleInput_4
									.getBigDecimal(column_index_tOracleInput_4);
						} else {

							targetrow1.TARGETPROJECT_ID = null;
						}

					}
					column_index_tOracleInput_4 = 3;

					if (colQtyInRs_tOracleInput_4 < column_index_tOracleInput_4) {
						targetrow1.VERSION = null;
					} else {

						if (rs_tOracleInput_4
								.getObject(column_index_tOracleInput_4) != null) {
							targetrow1.VERSION = rs_tOracleInput_4
									.getBigDecimal(column_index_tOracleInput_4);
						} else {

							targetrow1.VERSION = null;
						}

					}
					column_index_tOracleInput_4 = 4;

					if (colQtyInRs_tOracleInput_4 < column_index_tOracleInput_4) {
						targetrow1.CREATED = null;
					} else {

						if (rs_tOracleInput_4
								.getTimestamp(column_index_tOracleInput_4) != null) {
							targetrow1.CREATED = new java.util.Date(
									rs_tOracleInput_4.getTimestamp(
											column_index_tOracleInput_4)
											.getTime());
						} else {
							targetrow1.CREATED = null;
						}

					}
					column_index_tOracleInput_4 = 5;

					if (colQtyInRs_tOracleInput_4 < column_index_tOracleInput_4) {
						targetrow1.LAST_MODIFIED = null;
					} else {

						if (rs_tOracleInput_4
								.getTimestamp(column_index_tOracleInput_4) != null) {
							targetrow1.LAST_MODIFIED = new java.util.Date(
									rs_tOracleInput_4.getTimestamp(
											column_index_tOracleInput_4)
											.getTime());
						} else {
							targetrow1.LAST_MODIFIED = null;
						}

					}
					column_index_tOracleInput_4 = 6;

					if (colQtyInRs_tOracleInput_4 < column_index_tOracleInput_4) {
						targetrow1.USER_ID = null;
					} else {

						tmpContent_tOracleInput_4 = rs_tOracleInput_4
								.getString(column_index_tOracleInput_4);
						if (tmpContent_tOracleInput_4 != null) {
							targetrow1.USER_ID = tmpContent_tOracleInput_4;
						} else {
							targetrow1.USER_ID = null;
						}

					}
					column_index_tOracleInput_4 = 7;

					if (colQtyInRs_tOracleInput_4 < column_index_tOracleInput_4) {
						targetrow1.TARGET_DB_SCHEMA = null;
					} else {

						tmpContent_tOracleInput_4 = rs_tOracleInput_4
								.getString(column_index_tOracleInput_4);
						if (tmpContent_tOracleInput_4 != null) {
							targetrow1.TARGET_DB_SCHEMA = tmpContent_tOracleInput_4;
						} else {
							targetrow1.TARGET_DB_SCHEMA = null;
						}

					}
					column_index_tOracleInput_4 = 8;

					if (colQtyInRs_tOracleInput_4 < column_index_tOracleInput_4) {
						targetrow1.NAME = null;
					} else {

						tmpContent_tOracleInput_4 = rs_tOracleInput_4
								.getString(column_index_tOracleInput_4);
						if (tmpContent_tOracleInput_4 != null) {
							targetrow1.NAME = tmpContent_tOracleInput_4;
						} else {
							targetrow1.NAME = null;
						}

					}

					/**
					 * [tOracleInput_4 begin ] stop
					 */
					/**
					 * [tOracleInput_4 main ] start
					 */

					currentComponent = "tOracleInput_4";

					tos_count_tOracleInput_4++;

					/**
					 * [tOracleInput_4 main ] stop
					 */

					/**
					 * [tJavaFlex_5 main ] start
					 */

					currentComponent = "tJavaFlex_5";

					System.out.println("targetrow1.TARGETPROJECT_ID:"
							+ targetrow1.TARGETPROJECT_ID);
					System.out.println("targetrow1.TARGETPROJECT_ID:"
							+ targetrow1.TARGETPROJECT_ID);
					System.out.println("targetrow1.NAME:" + targetrow1.NAME);
					/*
					 * ((TOSHandler)context.TOSHandler).getOntologyDimensions(true
					 * , row1.CONCEPT_PATH, row1.CONCEPT_CD, row1.NAME_CHAR,
					 * row1.CONCEPT_BLOB, row1.UPDATE_DATE, row1.DOWNLOAD_DATE,
					 * row1.IMPORT_DATE, row1.SOURCESYSTEM_CD, row1.UPLOAD_ID);
					 */

					tos_count_tJavaFlex_5++;

					/**
					 * [tJavaFlex_5 main ] stop
					 */

					/**
					 * [tOracleInput_4 end ] start
					 */

					currentComponent = "tOracleInput_4";

				}
				stmt_tOracleInput_4.close();

				globalMap.put("tOracleInput_4_NB_LINE", nb_line_tOracleInput_4);

				ok_Hash.put("tOracleInput_4", true);
				end_Hash.put("tOracleInput_4", System.currentTimeMillis());

				/**
				 * [tOracleInput_4 end ] stop
				 */

				/**
				 * [tJavaFlex_5 end ] start
				 */

				currentComponent = "tJavaFlex_5";

				// end of the component, outside/closing the loop

				ok_Hash.put("tJavaFlex_5", true);
				end_Hash.put("tJavaFlex_5", System.currentTimeMillis());

				/**
				 * [tJavaFlex_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 1);
	}

	public void tJava_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_4 begin ] start
				 */

				ok_Hash.put("tJava_4", false);
				start_Hash.put("tJava_4", System.currentTimeMillis());
				currentComponent = "tJava_4";

				int tos_count_tJava_4 = 0;

				// System.out.println("Deleting old ontology ...");

				/**
				 * [tJava_4 begin ] stop
				 */
				/**
				 * [tJava_4 main ] start
				 */

				currentComponent = "tJava_4";

				tos_count_tJava_4++;

				/**
				 * [tJava_4 main ] stop
				 */
				/**
				 * [tJava_4 end ] start
				 */

				currentComponent = "tJava_4";

				ok_Hash.put("tJava_4", true);
				end_Hash.put("tJava_4", System.currentTimeMillis());

				tOracleRow_1Process(globalMap);

				/**
				 * [tJava_4 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_4:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}

	public static class tmpRowStruct implements
			routines.system.IPersistableRow<tmpRowStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTConnector = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTConnector = new byte[0];

		public Integer TARGET_ID;

		public Integer getTARGET_ID() {
			return this.TARGET_ID;
		}

		public Integer TREE_LEVEL;

		public Integer getTREE_LEVEL() {
			return this.TREE_LEVEL;
		}

		public String TREE_PATH;

		public String getTREE_PATH() {
			return this.TREE_PATH;
		}

		public String SOURCE_PATH;

		public String getSOURCE_PATH() {
			return this.SOURCE_PATH;
		}

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		public String CHANGED;

		public String getCHANGED() {
			return this.CHANGED;
		}

		public String STARTDATE_SOURCE_PATH;

		public String getSTARTDATE_SOURCE_PATH() {
			return this.STARTDATE_SOURCE_PATH;
		}

		public String ENDDATE_SOURCE_PATH;

		public String getENDDATE_SOURCE_PATH() {
			return this.ENDDATE_SOURCE_PATH;
		}

		public String VISUALATTRIBUTES;

		public String getVISUALATTRIBUTES() {
			return this.VISUALATTRIBUTES;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTConnector.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTConnector.length == 0) {
						commonByteArray_TOS_TOSIDRTConnector = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTConnector = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_TOSIDRTConnector, 0, length);
				strReturn = new String(commonByteArray_TOS_TOSIDRTConnector, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTConnector) {

				try {

					int length = 0;

					this.TARGET_ID = readInteger(dis);

					this.TREE_LEVEL = readInteger(dis);

					this.TREE_PATH = readString(dis);

					this.SOURCE_PATH = readString(dis);

					this.NAME = readString(dis);

					this.CHANGED = readString(dis);

					this.STARTDATE_SOURCE_PATH = readString(dis);

					this.ENDDATE_SOURCE_PATH = readString(dis);

					this.VISUALATTRIBUTES = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.TARGET_ID, dos);

				// Integer

				writeInteger(this.TREE_LEVEL, dos);

				// String

				writeString(this.TREE_PATH, dos);

				// String

				writeString(this.SOURCE_PATH, dos);

				// String

				writeString(this.NAME, dos);

				// String

				writeString(this.CHANGED, dos);

				// String

				writeString(this.STARTDATE_SOURCE_PATH, dos);

				// String

				writeString(this.ENDDATE_SOURCE_PATH, dos);

				// String

				writeString(this.VISUALATTRIBUTES, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TARGET_ID=" + String.valueOf(TARGET_ID));
			sb.append(",TREE_LEVEL=" + String.valueOf(TREE_LEVEL));
			sb.append(",TREE_PATH=" + TREE_PATH);
			sb.append(",SOURCE_PATH=" + SOURCE_PATH);
			sb.append(",NAME=" + NAME);
			sb.append(",CHANGED=" + CHANGED);
			sb.append(",STARTDATE_SOURCE_PATH=" + STARTDATE_SOURCE_PATH);
			sb.append(",ENDDATE_SOURCE_PATH=" + ENDDATE_SOURCE_PATH);
			sb.append(",VISUALATTRIBUTES=" + VISUALATTRIBUTES);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tmpRowStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class iRow1Struct implements
			routines.system.IPersistableRow<iRow1Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTConnector = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTConnector = new byte[0];

		public String TARGET_ID;

		public String getTARGET_ID() {
			return this.TARGET_ID;
		}

		public String TREE_LEVEL;

		public String getTREE_LEVEL() {
			return this.TREE_LEVEL;
		}

		public String TREE_PATH;

		public String getTREE_PATH() {
			return this.TREE_PATH;
		}

		public String SOURCE_PATH;

		public String getSOURCE_PATH() {
			return this.SOURCE_PATH;
		}

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		public String CHANGED;

		public String getCHANGED() {
			return this.CHANGED;
		}

		public String STARTDATE_PATH;

		public String getSTARTDATE_PATH() {
			return this.STARTDATE_PATH;
		}

		public String ENDDATE_PATH;

		public String getENDDATE_PATH() {
			return this.ENDDATE_PATH;
		}

		public String VISUALATTRIBUTE;

		public String getVISUALATTRIBUTE() {
			return this.VISUALATTRIBUTE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTConnector.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTConnector.length == 0) {
						commonByteArray_TOS_TOSIDRTConnector = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTConnector = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_TOSIDRTConnector, 0, length);
				strReturn = new String(commonByteArray_TOS_TOSIDRTConnector, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTConnector) {

				try {

					int length = 0;

					this.TARGET_ID = readString(dis);

					this.TREE_LEVEL = readString(dis);

					this.TREE_PATH = readString(dis);

					this.SOURCE_PATH = readString(dis);

					this.NAME = readString(dis);

					this.CHANGED = readString(dis);

					this.STARTDATE_PATH = readString(dis);

					this.ENDDATE_PATH = readString(dis);

					this.VISUALATTRIBUTE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.TARGET_ID, dos);

				// String

				writeString(this.TREE_LEVEL, dos);

				// String

				writeString(this.TREE_PATH, dos);

				// String

				writeString(this.SOURCE_PATH, dos);

				// String

				writeString(this.NAME, dos);

				// String

				writeString(this.CHANGED, dos);

				// String

				writeString(this.STARTDATE_PATH, dos);

				// String

				writeString(this.ENDDATE_PATH, dos);

				// String

				writeString(this.VISUALATTRIBUTE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TARGET_ID=" + TARGET_ID);
			sb.append(",TREE_LEVEL=" + TREE_LEVEL);
			sb.append(",TREE_PATH=" + TREE_PATH);
			sb.append(",SOURCE_PATH=" + SOURCE_PATH);
			sb.append(",NAME=" + NAME);
			sb.append(",CHANGED=" + CHANGED);
			sb.append(",STARTDATE_PATH=" + STARTDATE_PATH);
			sb.append(",ENDDATE_PATH=" + ENDDATE_PATH);
			sb.append(",VISUALATTRIBUTE=" + VISUALATTRIBUTE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(iRow1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				iRow1Struct iRow1 = new iRow1Struct();
				tmpRowStruct tmpRow = new tmpRowStruct();

				/**
				 * [tOracleOutput_1 begin ] start
				 */

				ok_Hash.put("tOracleOutput_1", false);
				start_Hash.put("tOracleOutput_1", System.currentTimeMillis());
				currentComponent = "tOracleOutput_1";

				int tos_count_tOracleOutput_1 = 0;

				int nb_line_tOracleOutput_1 = 0;
				int nb_line_update_tOracleOutput_1 = 0;
				int nb_line_inserted_tOracleOutput_1 = 0;
				int nb_line_deleted_tOracleOutput_1 = 0;
				int nb_line_rejected_tOracleOutput_1 = 0;

				int tmp_batchUpdateCount_tOracleOutput_1 = 0;

				int deletedCount_tOracleOutput_1 = 0;
				int updatedCount_tOracleOutput_1 = 0;
				int insertedCount_tOracleOutput_1 = 0;
				int rejectedCount_tOracleOutput_1 = 0;

				boolean whetherReject_tOracleOutput_1 = false;

				java.sql.Connection conn_tOracleOutput_1 = null;

				// optional table
				String dbschema_tOracleOutput_1 = null;
				String tableName_tOracleOutput_1 = null;
				dbschema_tOracleOutput_1 = (String) globalMap
						.get("dbschema_tOracleConnection_2");
				conn_tOracleOutput_1 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_2");
				if (null == conn_tOracleOutput_1) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleOutput_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tOracleOutput_1 = dataSources_tOracleOutput_1.get("")
							.getConnection();
				}
				int batchSize_tOracleOutput_1 = 10000;
				int batchSizeCounter_tOracleOutput_1 = 0;

				int count_tOracleOutput_1 = 0;

				if (dbschema_tOracleOutput_1 == null
						|| dbschema_tOracleOutput_1.trim().length() == 0) {
					tableName_tOracleOutput_1 = "ioe_target_ontology";
				} else {
					tableName_tOracleOutput_1 = dbschema_tOracleOutput_1 + "."
							+ "ioe_target_ontology";
				}
				String insert_tOracleOutput_1 = "INSERT INTO "
						+ tableName_tOracleOutput_1
						+ " (TARGET_ID,TREE_LEVEL,TREE_PATH,SOURCE_PATH,NAME,CHANGED,STARTDATE_SOURCE_PATH,ENDDATE_SOURCE_PATH,VISUALATTRIBUTES) VALUES (?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tOracleOutput_1 = conn_tOracleOutput_1
						.prepareStatement(insert_tOracleOutput_1);

				/**
				 * [tOracleOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());
				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				tmpRowStruct tmpRow_tmp = new tmpRowStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;

				char fieldSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_1 = ((String) ",")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_1 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_1 = /**
				 * Start field
				 * tFileInputDelimited_1:FILENAME
				 */
				context.DataFile/** End field tFileInputDelimited_1:FILENAME */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

				try {

					String[] rowtFileInputDelimited_1 = null;
					int currentLinetFileInputDelimited_1 = 0;
					int outputLinetFileInputDelimited_1 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0;
							if (footer_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_1,
									fieldSeparator_tFileInputDelimited_1[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_1)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_1[0]);
						}

						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
							csvReadertFileInputDelimited_1.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_1[0]);

						csvReadertFileInputDelimited_1.setQuoteChar('"');

						csvReadertFileInputDelimited_1
								.setEscapeChar(csvReadertFileInputDelimited_1
										.getQuoteChar());

						if (footer_tFileInputDelimited_1 > 0) {
							for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
							csvReadertFileInputDelimited_1
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_1.readNext()) {

								rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
										.getValues();
								if (!(rowtFileInputDelimited_1.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_1[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_1++;

								}

							}
							int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
									- footer_tFileInputDelimited_1 < 0 ? 0
									: totalLinetFileInputDelimited_1
											- footer_tFileInputDelimited_1;
							if (lastLinetFileInputDelimited_1 > 0) {
								lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1
										: lastLineTemptFileInputDelimited_1;
							} else {
								lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
							}

							csvReadertFileInputDelimited_1.close();
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_1)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_1[0]);
							}
							csvReadertFileInputDelimited_1
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('"');

							csvReadertFileInputDelimited_1
									.setEscapeChar(csvReadertFileInputDelimited_1
											.getQuoteChar());

						}

						if (limittFileInputDelimited_1 != 0) {
							for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 1; currentLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
						}
						csvReadertFileInputDelimited_1
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_1 != 0
							&& csvReadertFileInputDelimited_1 != null
							&& csvReadertFileInputDelimited_1.readNext()) {

						rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
								.getValues();

						if (rowtFileInputDelimited_1.length == 1
								&& ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_1++;

						if (lastLinetFileInputDelimited_1 > -1
								&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
							break;
						}
						outputLinetFileInputDelimited_1++;
						if (limittFileInputDelimited_1 > 0
								&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
							break;
						}

						iRow1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						iRow1 = new iRow1Struct();
						try {

							if (rowtFileInputDelimited_1.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								iRow1.TARGET_ID = null;

								iRow1.TREE_LEVEL = null;

								iRow1.TREE_PATH = null;

								iRow1.SOURCE_PATH = null;

								iRow1.NAME = null;

								iRow1.CHANGED = null;

								iRow1.STARTDATE_PATH = null;

								iRow1.ENDDATE_PATH = null;

								iRow1.VISUALATTRIBUTE = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_1 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_1 = 0;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									iRow1.TARGET_ID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									iRow1.TARGET_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 1;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									iRow1.TREE_LEVEL = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									iRow1.TREE_LEVEL = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 2;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									iRow1.TREE_PATH = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									iRow1.TREE_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 3;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									iRow1.SOURCE_PATH = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									iRow1.SOURCE_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 4;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									iRow1.NAME = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									iRow1.NAME = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 5;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									iRow1.CHANGED = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									iRow1.CHANGED = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 6;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									iRow1.STARTDATE_PATH = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									iRow1.STARTDATE_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 7;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									iRow1.ENDDATE_PATH = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									iRow1.ENDDATE_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 8;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									iRow1.VISUALATTRIBUTE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									iRow1.VISUALATTRIBUTE = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							iRow1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "iRow1"
						if (iRow1 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								tmpRow = null;

								// # Output table : 'tmpRow'
								tmpRow_tmp.TARGET_ID = Integer
										.parseInt(iRow1.TARGET_ID);
								tmpRow_tmp.TREE_LEVEL = Integer
										.parseInt(iRow1.TREE_LEVEL);
								tmpRow_tmp.TREE_PATH = iRow1.TREE_PATH;
								tmpRow_tmp.SOURCE_PATH = iRow1.SOURCE_PATH;
								tmpRow_tmp.NAME = iRow1.NAME;
								tmpRow_tmp.CHANGED = iRow1.CHANGED;
								tmpRow_tmp.STARTDATE_SOURCE_PATH = iRow1.STARTDATE_PATH;
								tmpRow_tmp.ENDDATE_SOURCE_PATH = iRow1.ENDDATE_PATH;
								tmpRow_tmp.VISUALATTRIBUTES = iRow1.VISUALATTRIBUTE;
								tmpRow = tmpRow_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */
							// Start of branch "tmpRow"
							if (tmpRow != null) {

								/**
								 * [tOracleOutput_1 main ] start
								 */

								currentComponent = "tOracleOutput_1";

								whetherReject_tOracleOutput_1 = false;
								if (tmpRow.TARGET_ID == null) {
									pstmt_tOracleOutput_1.setNull(1,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tOracleOutput_1.setInt(1,
											tmpRow.TARGET_ID);
								}

								if (tmpRow.TREE_LEVEL == null) {
									pstmt_tOracleOutput_1.setNull(2,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tOracleOutput_1.setInt(2,
											tmpRow.TREE_LEVEL);
								}

								if (tmpRow.TREE_PATH == null) {
									pstmt_tOracleOutput_1.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_1.setString(3,
											tmpRow.TREE_PATH);
								}

								if (tmpRow.SOURCE_PATH == null) {
									pstmt_tOracleOutput_1.setNull(4,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_1.setString(4,
											tmpRow.SOURCE_PATH);
								}

								if (tmpRow.NAME == null) {
									pstmt_tOracleOutput_1.setNull(5,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_1.setString(5,
											tmpRow.NAME);
								}

								if (tmpRow.CHANGED == null) {
									pstmt_tOracleOutput_1.setNull(6,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_1.setString(6,
											tmpRow.CHANGED);
								}

								if (tmpRow.STARTDATE_SOURCE_PATH == null) {
									pstmt_tOracleOutput_1.setNull(7,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_1.setString(7,
											tmpRow.STARTDATE_SOURCE_PATH);
								}

								if (tmpRow.ENDDATE_SOURCE_PATH == null) {
									pstmt_tOracleOutput_1.setNull(8,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_1.setString(8,
											tmpRow.ENDDATE_SOURCE_PATH);
								}

								if (tmpRow.VISUALATTRIBUTES == null) {
									pstmt_tOracleOutput_1.setNull(9,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_1.setString(9,
											tmpRow.VISUALATTRIBUTES);
								}

								try {
									insertedCount_tOracleOutput_1 = insertedCount_tOracleOutput_1
											+ pstmt_tOracleOutput_1
													.executeUpdate();
									nb_line_tOracleOutput_1++;
								} catch (java.lang.Exception e_tOracleOutput_1) {
									whetherReject_tOracleOutput_1 = true;
									throw (e_tOracleOutput_1);
								}

								if (!whetherReject_tOracleOutput_1) {
								}

								tos_count_tOracleOutput_1++;

								/**
								 * [tOracleOutput_1 main ] stop
								 */

							} // End of branch "tmpRow"

						} // End of branch "iRow1"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						nb_line_tFileInputDelimited_1++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_1 != null) {
							csvReadertFileInputDelimited_1.close();
						}
					}
					if (csvReadertFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								nb_line_tFileInputDelimited_1);
					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tOracleOutput_1 end ] start
				 */

				currentComponent = "tOracleOutput_1";

				if (pstmt_tOracleOutput_1 != null) {

					pstmt_tOracleOutput_1.close();

				}

				nb_line_deleted_tOracleOutput_1 = nb_line_deleted_tOracleOutput_1
						+ deletedCount_tOracleOutput_1;
				nb_line_update_tOracleOutput_1 = nb_line_update_tOracleOutput_1
						+ updatedCount_tOracleOutput_1;
				nb_line_inserted_tOracleOutput_1 = nb_line_inserted_tOracleOutput_1
						+ insertedCount_tOracleOutput_1;
				nb_line_rejected_tOracleOutput_1 = nb_line_rejected_tOracleOutput_1
						+ rejectedCount_tOracleOutput_1;

				globalMap.put("tOracleOutput_1_NB_LINE",
						nb_line_tOracleOutput_1);
				globalMap.put("tOracleOutput_1_NB_LINE_UPDATED",
						nb_line_update_tOracleOutput_1);
				globalMap.put("tOracleOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tOracleOutput_1);
				globalMap.put("tOracleOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tOracleOutput_1);
				globalMap.put("tOracleOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tOracleOutput_1);

				ok_Hash.put("tOracleOutput_1", true);
				end_Hash.put("tOracleOutput_1", System.currentTimeMillis());

				if (true) {

					tJava_5Process(globalMap);
				}

				/**
				 * [tOracleOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_5 begin ] start
				 */

				ok_Hash.put("tJava_5", false);
				start_Hash.put("tJava_5", System.currentTimeMillis());
				currentComponent = "tJava_5";

				int tos_count_tJava_5 = 0;

				((TOSHandler) context.TOSHandler)
						.status("tOracleOutput_1_NB_LINE_INSERTED: "
								+ ((Integer) globalMap
										.get("tOracleOutput_1_NB_LINE_INSERTED")));

				context.StatusMessage = "Target I2B2 ontology saved ("
						+ ((Integer) globalMap
								.get("tOracleOutput_1_NB_LINE_INSERTED"))
						+ " lines).";

				((TOSHandler) context.TOSHandler)
						.statusSuccess(context.StatusMessage);
				System.out.println(context.StatusMessage);

				/**
				 * [tJava_5 begin ] stop
				 */
				/**
				 * [tJava_5 main ] start
				 */

				currentComponent = "tJava_5";

				tos_count_tJava_5++;

				/**
				 * [tJava_5 main ] stop
				 */
				/**
				 * [tJava_5 end ] start
				 */

				currentComponent = "tJava_5";

				ok_Hash.put("tJava_5", true);
				end_Hash.put("tJava_5", System.currentTimeMillis());

				/**
				 * [tJava_5 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_5:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_12Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}

	public void tJava_12Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_12 begin ] start
				 */

				ok_Hash.put("tJava_12", false);
				start_Hash.put("tJava_12", System.currentTimeMillis());
				currentComponent = "tJava_12";

				int tos_count_tJava_12 = 0;

				if (!("".equals(context.DataFile))) {
					((TOSHandler) context.TOSHandler)
							.status("Deleting TOS tmp file.");

				}

				/**
				 * [tJava_12 begin ] stop
				 */
				/**
				 * [tJava_12 main ] start
				 */

				currentComponent = "tJava_12";

				tos_count_tJava_12++;

				/**
				 * [tJava_12 main ] stop
				 */
				/**
				 * [tJava_12 end ] start
				 */

				currentComponent = "tJava_12";

				ok_Hash.put("tJava_12", true);
				end_Hash.put("tJava_12", System.currentTimeMillis());

				if (!("".equals(context.DataFile))) {

					tFileDelete_1Process(globalMap);
				}

				/**
				 * [tJava_12 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_12_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_1 begin ] start
				 */

				ok_Hash.put("tFileDelete_1", false);
				start_Hash.put("tFileDelete_1", System.currentTimeMillis());
				currentComponent = "tFileDelete_1";

				int tos_count_tFileDelete_1 = 0;

				/**
				 * [tFileDelete_1 begin ] stop
				 */
				/**
				 * [tFileDelete_1 main ] start
				 */

				currentComponent = "tFileDelete_1";

				class DeleteFoldertFileDelete_1 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_1 = new java.io.File(
						context.DataFile);
				if (file_tFileDelete_1.exists() && file_tFileDelete_1.isFile()) {
					if (file_tFileDelete_1.delete()) {
						globalMap.put("tFileDelete_1_CURRENT_STATUS",
								"File deleted.");
					} else {
						globalMap.put("tFileDelete_1_CURRENT_STATUS",
								"No file deleted.");
					}
				} else {
					globalMap.put("tFileDelete_1_CURRENT_STATUS",
							"File does not exists or is invalid.");
				}
				globalMap.put("tFileDelete_1_DELETE_PATH", context.DataFile);

				tos_count_tFileDelete_1++;

				/**
				 * [tFileDelete_1 main ] stop
				 */
				/**
				 * [tFileDelete_1 end ] start
				 */

				currentComponent = "tFileDelete_1";

				ok_Hash.put("tFileDelete_1", true);
				end_Hash.put("tFileDelete_1", System.currentTimeMillis());

				/**
				 * [tFileDelete_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_7 begin ] start
				 */

				ok_Hash.put("tJava_7", false);
				start_Hash.put("tJava_7", System.currentTimeMillis());
				currentComponent = "tJava_7";

				int tos_count_tJava_7 = 0;

				context.ErrorMessage = "Error while writing target ontology to database.";
				System.out.println("--#ERROR#--");
				System.out.println(((String) globalMap
						.get("tOracleOutput_1_QUERY")));
				System.out.println(((String) globalMap
						.get("tOracleOutput_1_ERROR_MESSAGE")));
				System.out.println(((Integer) globalMap
						.get("tOracleOutput_1_NB_LINE")));
				System.out.println(((Integer) globalMap
						.get("tOracleOutput_1_NB_LINE_INSERTED")));

				/**
				 * [tJava_7 begin ] stop
				 */
				/**
				 * [tJava_7 main ] start
				 */

				currentComponent = "tJava_7";

				tos_count_tJava_7++;

				/**
				 * [tJava_7 main ] stop
				 */
				/**
				 * [tJava_7 end ] start
				 */

				currentComponent = "tJava_7";

				ok_Hash.put("tJava_7", true);
				end_Hash.put("tJava_7", System.currentTimeMillis());

				tJava_12Process(globalMap);

				/**
				 * [tJava_7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_7_SUBPROCESS_STATE", 1);
	}

	public void tOracleRow_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tOracleRow_1 begin ] start
				 */

				ok_Hash.put("tOracleRow_1", false);
				start_Hash.put("tOracleRow_1", System.currentTimeMillis());
				currentComponent = "tOracleRow_1";

				int tos_count_tOracleRow_1 = 0;

				java.sql.Connection conn_tOracleRow_1 = null;
				conn_tOracleRow_1 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_2");
				if (null == conn_tOracleRow_1) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleRow_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tOracleRow_1 = dataSources_tOracleRow_1.get("")
							.getConnection();
				}

				java.sql.Statement stmt_tOracleRow_1 = conn_tOracleRow_1
						.createStatement();
				String query_tOracleRow_1 = "";
				boolean whetherReject_tOracleRow_1 = false;

				/**
				 * [tOracleRow_1 begin ] stop
				 */
				/**
				 * [tOracleRow_1 main ] start
				 */

				currentComponent = "tOracleRow_1";

				query_tOracleRow_1 = "DELETE FROM " + context.OracleSchema
						+ ".ioe_target_ontology  WHERE target_id = '"
						+ context.Var1 + "'";
				whetherReject_tOracleRow_1 = false;

				globalMap.put("tOracleRow_1_QUERY", query_tOracleRow_1);
				try {
					stmt_tOracleRow_1.execute(query_tOracleRow_1);

				} catch (java.lang.Exception e) {
					whetherReject_tOracleRow_1 = true;
					System.err.print(e.getMessage());
				}

				tos_count_tOracleRow_1++;

				/**
				 * [tOracleRow_1 main ] stop
				 */
				/**
				 * [tOracleRow_1 end ] start
				 */

				currentComponent = "tOracleRow_1";

				stmt_tOracleRow_1.close();

				ok_Hash.put("tOracleRow_1", true);
				end_Hash.put("tOracleRow_1", System.currentTimeMillis());

				/**
				 * [tOracleRow_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tOracleRow_1_SUBPROCESS_STATE", 1);
	}

	public static class output1Struct implements
			routines.system.IPersistableRow<output1Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTConnector = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTConnector = new byte[0];

		public String TARGET_ID;

		public String getTARGET_ID() {
			return this.TARGET_ID;
		}

		public String TREE_LEVEL;

		public String getTREE_LEVEL() {
			return this.TREE_LEVEL;
		}

		public String TREE_PATH;

		public String getTREE_PATH() {
			return this.TREE_PATH;
		}

		public String SOURCE_PATH;

		public String getSOURCE_PATH() {
			return this.SOURCE_PATH;
		}

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		public String CHANGED;

		public String getCHANGED() {
			return this.CHANGED;
		}

		public String STARTDATE_SOURCE_PATH;

		public String getSTARTDATE_SOURCE_PATH() {
			return this.STARTDATE_SOURCE_PATH;
		}

		public String ENDDATE_SOURCE_PATH;

		public String getENDDATE_SOURCE_PATH() {
			return this.ENDDATE_SOURCE_PATH;
		}

		public String VISUALATTRIBUTE;

		public String getVISUALATTRIBUTE() {
			return this.VISUALATTRIBUTE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTConnector.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTConnector.length == 0) {
						commonByteArray_TOS_TOSIDRTConnector = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTConnector = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_TOSIDRTConnector, 0, length);
				strReturn = new String(commonByteArray_TOS_TOSIDRTConnector, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTConnector) {

				try {

					int length = 0;

					this.TARGET_ID = readString(dis);

					this.TREE_LEVEL = readString(dis);

					this.TREE_PATH = readString(dis);

					this.SOURCE_PATH = readString(dis);

					this.NAME = readString(dis);

					this.CHANGED = readString(dis);

					this.STARTDATE_SOURCE_PATH = readString(dis);

					this.ENDDATE_SOURCE_PATH = readString(dis);

					this.VISUALATTRIBUTE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.TARGET_ID, dos);

				// String

				writeString(this.TREE_LEVEL, dos);

				// String

				writeString(this.TREE_PATH, dos);

				// String

				writeString(this.SOURCE_PATH, dos);

				// String

				writeString(this.NAME, dos);

				// String

				writeString(this.CHANGED, dos);

				// String

				writeString(this.STARTDATE_SOURCE_PATH, dos);

				// String

				writeString(this.ENDDATE_SOURCE_PATH, dos);

				// String

				writeString(this.VISUALATTRIBUTE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TARGET_ID=" + TARGET_ID);
			sb.append(",TREE_LEVEL=" + TREE_LEVEL);
			sb.append(",TREE_PATH=" + TREE_PATH);
			sb.append(",SOURCE_PATH=" + SOURCE_PATH);
			sb.append(",NAME=" + NAME);
			sb.append(",CHANGED=" + CHANGED);
			sb.append(",STARTDATE_SOURCE_PATH=" + STARTDATE_SOURCE_PATH);
			sb.append(",ENDDATE_SOURCE_PATH=" + ENDDATE_SOURCE_PATH);
			sb.append(",VISUALATTRIBUTE=" + VISUALATTRIBUTE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(output1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				output1Struct output1 = new output1Struct();

				/**
				 * [tJavaFlex_7 begin ] start
				 */

				ok_Hash.put("tJavaFlex_7", false);
				start_Hash.put("tJavaFlex_7", System.currentTimeMillis());
				currentComponent = "tJavaFlex_7";

				int tos_count_tJavaFlex_7 = 0;

				System.out.println("TOS: Starting Talend-Job as TOS-Code.");

				/**
				 * [tJavaFlex_7 begin ] stop
				 */

				/**
				 * [tOracleInput_7 begin ] start
				 */

				ok_Hash.put("tOracleInput_7", false);
				start_Hash.put("tOracleInput_7", System.currentTimeMillis());
				currentComponent = "tOracleInput_7";

				int tos_count_tOracleInput_7 = 0;

				int nb_line_tOracleInput_7 = 0;
				java.sql.Connection conn_tOracleInput_7 = null;
				conn_tOracleInput_7 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_2");
				if (null == conn_tOracleInput_7) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleInput_7 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tOracleInput_7 = dataSources_tOracleInput_7.get("")
							.getConnection();
					// globalMap.put("conn_tOracleConnection_2",
					// conn_tOracleInput_7);
				}
				if (((oracle.jdbc.OracleConnection) conn_tOracleInput_7)
						.getSessionTimeZone() == null) {
					java.sql.Statement stmtGetTZ_tOracleInput_7 = conn_tOracleInput_7
							.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_7 = stmtGetTZ_tOracleInput_7
							.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_7 = java.util.TimeZone
							.getDefault().getID();
					while (rsGetTZ_tOracleInput_7.next()) {
						sessionTimezone_tOracleInput_7 = rsGetTZ_tOracleInput_7
								.getString(1);
					}
					((oracle.jdbc.OracleConnection) conn_tOracleInput_7)
							.setSessionTimeZone(sessionTimezone_tOracleInput_7);
				}

				java.sql.Statement stmt_tOracleInput_7 = conn_tOracleInput_7
						.createStatement();

				String dbquery_tOracleInput_7 = "SELECT * FROM "
						+ context.OracleSchema
						+ ".OE_TARGET_ONTOLOGY  ORDER BY TREE_LEVEL ASC";

				globalMap.put("tOracleInput_7_QUERY", dbquery_tOracleInput_7);

				java.sql.ResultSet rs_tOracleInput_7 = stmt_tOracleInput_7
						.executeQuery(dbquery_tOracleInput_7);
				java.sql.ResultSetMetaData rsmd_tOracleInput_7 = rs_tOracleInput_7
						.getMetaData();
				int colQtyInRs_tOracleInput_7 = rsmd_tOracleInput_7
						.getColumnCount();

				String tmpContent_tOracleInput_7 = null;
				int column_index_tOracleInput_7 = 1;
				while (rs_tOracleInput_7.next()) {
					nb_line_tOracleInput_7++;

					column_index_tOracleInput_7 = 1;

					if (colQtyInRs_tOracleInput_7 < column_index_tOracleInput_7) {
						output1.TARGET_ID = null;
					} else {

						tmpContent_tOracleInput_7 = rs_tOracleInput_7
								.getString(column_index_tOracleInput_7);
						if (tmpContent_tOracleInput_7 != null) {
							output1.TARGET_ID = tmpContent_tOracleInput_7;
						} else {
							output1.TARGET_ID = null;
						}

					}
					column_index_tOracleInput_7 = 2;

					if (colQtyInRs_tOracleInput_7 < column_index_tOracleInput_7) {
						output1.TREE_LEVEL = null;
					} else {

						tmpContent_tOracleInput_7 = rs_tOracleInput_7
								.getString(column_index_tOracleInput_7);
						if (tmpContent_tOracleInput_7 != null) {
							output1.TREE_LEVEL = tmpContent_tOracleInput_7;
						} else {
							output1.TREE_LEVEL = null;
						}

					}
					column_index_tOracleInput_7 = 3;

					if (colQtyInRs_tOracleInput_7 < column_index_tOracleInput_7) {
						output1.TREE_PATH = null;
					} else {

						tmpContent_tOracleInput_7 = rs_tOracleInput_7
								.getString(column_index_tOracleInput_7);
						if (tmpContent_tOracleInput_7 != null) {
							output1.TREE_PATH = tmpContent_tOracleInput_7;
						} else {
							output1.TREE_PATH = null;
						}

					}
					column_index_tOracleInput_7 = 4;

					if (colQtyInRs_tOracleInput_7 < column_index_tOracleInput_7) {
						output1.SOURCE_PATH = null;
					} else {

						tmpContent_tOracleInput_7 = rs_tOracleInput_7
								.getString(column_index_tOracleInput_7);
						if (tmpContent_tOracleInput_7 != null) {
							output1.SOURCE_PATH = tmpContent_tOracleInput_7;
						} else {
							output1.SOURCE_PATH = null;
						}

					}
					column_index_tOracleInput_7 = 5;

					if (colQtyInRs_tOracleInput_7 < column_index_tOracleInput_7) {
						output1.NAME = null;
					} else {

						tmpContent_tOracleInput_7 = rs_tOracleInput_7
								.getString(column_index_tOracleInput_7);
						if (tmpContent_tOracleInput_7 != null) {
							output1.NAME = tmpContent_tOracleInput_7;
						} else {
							output1.NAME = null;
						}

					}
					column_index_tOracleInput_7 = 6;

					if (colQtyInRs_tOracleInput_7 < column_index_tOracleInput_7) {
						output1.CHANGED = null;
					} else {

						tmpContent_tOracleInput_7 = rs_tOracleInput_7
								.getString(column_index_tOracleInput_7);
						if (tmpContent_tOracleInput_7 != null) {
							output1.CHANGED = tmpContent_tOracleInput_7;
						} else {
							output1.CHANGED = null;
						}

					}
					column_index_tOracleInput_7 = 7;

					if (colQtyInRs_tOracleInput_7 < column_index_tOracleInput_7) {
						output1.STARTDATE_SOURCE_PATH = null;
					} else {

						tmpContent_tOracleInput_7 = rs_tOracleInput_7
								.getString(column_index_tOracleInput_7);
						if (tmpContent_tOracleInput_7 != null) {
							output1.STARTDATE_SOURCE_PATH = tmpContent_tOracleInput_7;
						} else {
							output1.STARTDATE_SOURCE_PATH = null;
						}

					}
					column_index_tOracleInput_7 = 8;

					if (colQtyInRs_tOracleInput_7 < column_index_tOracleInput_7) {
						output1.ENDDATE_SOURCE_PATH = null;
					} else {

						tmpContent_tOracleInput_7 = rs_tOracleInput_7
								.getString(column_index_tOracleInput_7);
						if (tmpContent_tOracleInput_7 != null) {
							output1.ENDDATE_SOURCE_PATH = tmpContent_tOracleInput_7;
						} else {
							output1.ENDDATE_SOURCE_PATH = null;
						}

					}
					column_index_tOracleInput_7 = 9;

					if (colQtyInRs_tOracleInput_7 < column_index_tOracleInput_7) {
						output1.VISUALATTRIBUTE = null;
					} else {

						tmpContent_tOracleInput_7 = rs_tOracleInput_7
								.getString(column_index_tOracleInput_7);
						if (tmpContent_tOracleInput_7 != null) {
							output1.VISUALATTRIBUTE = tmpContent_tOracleInput_7;
						} else {
							output1.VISUALATTRIBUTE = null;
						}

					}

					/**
					 * [tOracleInput_7 begin ] stop
					 */
					/**
					 * [tOracleInput_7 main ] start
					 */

					currentComponent = "tOracleInput_7";

					tos_count_tOracleInput_7++;

					/**
					 * [tOracleInput_7 main ] stop
					 */

					/**
					 * [tJavaFlex_7 main ] start
					 */

					currentComponent = "tJavaFlex_7";

					((TOSHandler) context.TOSHandler).readTargetOntology(
							Integer.parseInt(output1.TREE_LEVEL),
							output1.TREE_PATH, output1.SOURCE_PATH,
							output1.NAME, Integer.parseInt(output1.CHANGED),
							output1.STARTDATE_SOURCE_PATH,
							output1.ENDDATE_SOURCE_PATH,
							output1.VISUALATTRIBUTE);

					tos_count_tJavaFlex_7++;

					/**
					 * [tJavaFlex_7 main ] stop
					 */

					/**
					 * [tOracleInput_7 end ] start
					 */

					currentComponent = "tOracleInput_7";

				}
				stmt_tOracleInput_7.close();

				globalMap.put("tOracleInput_7_NB_LINE", nb_line_tOracleInput_7);

				ok_Hash.put("tOracleInput_7", true);
				end_Hash.put("tOracleInput_7", System.currentTimeMillis());

				/**
				 * [tOracleInput_7 end ] stop
				 */

				/**
				 * [tJavaFlex_7 end ] start
				 */

				currentComponent = "tJavaFlex_7";

				// end of the component, outside/closing the loop

				ok_Hash.put("tJavaFlex_7", true);
				end_Hash.put("tJavaFlex_7", System.currentTimeMillis());

				/**
				 * [tJavaFlex_7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 1);
	}

	public void tJava_8Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_8 begin ] start
				 */

				ok_Hash.put("tJava_8", false);
				start_Hash.put("tJava_8", System.currentTimeMillis());
				currentComponent = "tJava_8";

				int tos_count_tJava_8 = 0;

				TOSHandler
						.status("Starting external TOS-Job \"etlStagingI2B2ToTargetI2B2\".");

				/**
				 * [tJava_8 begin ] stop
				 */
				/**
				 * [tJava_8 main ] start
				 */

				currentComponent = "tJava_8";

				tos_count_tJava_8++;

				/**
				 * [tJava_8 main ] stop
				 */
				/**
				 * [tJava_8 end ] start
				 */

				currentComponent = "tJava_8";

				ok_Hash.put("tJava_8", true);
				end_Hash.put("tJava_8", System.currentTimeMillis());

				if (true) {

					tRunJob_1Process(globalMap);
				}

				/**
				 * [tJava_8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_8_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_1 begin ] start
				 */

				ok_Hash.put("tRunJob_1", false);
				start_Hash.put("tRunJob_1", System.currentTimeMillis());
				currentComponent = "tRunJob_1";

				int tos_count_tRunJob_1 = 0;

				/**
				 * [tRunJob_1 begin ] stop
				 */
				/**
				 * [tRunJob_1 main ] start
				 */

				currentComponent = "tRunJob_1";

				java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
				paraList_tRunJob_1.add("--father_pid=" + pid);

				paraList_tRunJob_1.add("--root_pid=" + rootPid);

				paraList_tRunJob_1.add("--father_node=tRunJob_1");

				paraList_tRunJob_1.add("--context=Default");

				// for feature:10589
				paraList_tRunJob_1.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_1.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_1 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_1 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_1".equals(tRunJobName_tRunJob_1)
						&& childResumePath_tRunJob_1 != null) {
					paraList_tRunJob_1
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_1");

				java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_1 = context
						.propertyNames();
				while (propertyNames_tRunJob_1.hasMoreElements()) {
					String key_tRunJob_1 = (String) propertyNames_tRunJob_1
							.nextElement();
					Object value_tRunJob_1 = (Object) context
							.get(key_tRunJob_1);
					paraList_tRunJob_1.add("--context_param " + key_tRunJob_1
							+ "=" + value_tRunJob_1);
				}

				parentContextMap_tRunJob_1.put("Var1", context.Var1);
				parentContextMap_tRunJob_1.put("Var2", context.Var2);
				parentContextMap_tRunJob_1.put("Var3", context.Var3);
				parentContextMap_tRunJob_1.put("DataFile", context.DataFile);
				parentContextMap_tRunJob_1.put("ErrorMessage",
						context.ErrorMessage);
				parentContextMap_tRunJob_1.put("IfValue", context.IfValue);
				parentContextMap_tRunJob_1.put("Job", context.Job);
				parentContextMap_tRunJob_1.put("OracleDB", context.OracleDB);
				parentContextMap_tRunJob_1
						.put("OracleHost", context.OracleHost);
				parentContextMap_tRunJob_1.put("OraclePassword",
						context.OraclePassword);
				parentContextMap_tRunJob_1
						.put("OraclePort", context.OraclePort);
				parentContextMap_tRunJob_1.put("OracleSchema",
						context.OracleSchema);
				parentContextMap_tRunJob_1.put("OracleUsername",
						context.OracleUsername);
				parentContextMap_tRunJob_1
						.put("SQLCommand", context.SQLCommand);
				parentContextMap_tRunJob_1.put("SQLCommand2",
						context.SQLCommand2);
				parentContextMap_tRunJob_1.put("SQLTable", context.SQLTable);
				parentContextMap_tRunJob_1.put("SQLTable2", context.SQLTable2);
				parentContextMap_tRunJob_1.put("StatusMessage",
						context.StatusMessage);
				parentContextMap_tRunJob_1.put("TableIEOTargetOntology",
						context.TableIEOTargetOntology);
				parentContextMap_tRunJob_1.put("TableIEOTargetProject",
						context.TableIEOTargetProject);
				parentContextMap_tRunJob_1.put("TableIEOTarget",
						context.TableIEOTarget);
				parentContextMap_tRunJob_1
						.put("TOSHandler", context.TOSHandler);

				Object obj_tRunJob_1 = null;

				tos.transformation_to_target_0_1.Transformation_to_target childJob_tRunJob_1 = new tos.transformation_to_target_0_1.Transformation_to_target();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_1) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
							.entrySet()) {
						dataSources_tRunJob_1.put(
								talendDataSourceEntry_tRunJob_1.getKey(),
								talendDataSourceEntry_tRunJob_1.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
				}
				childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
				String[][] childReturn_tRunJob_1 = childJob_tRunJob_1
						.runJob((String[]) paraList_tRunJob_1
								.toArray(new String[paraList_tRunJob_1.size()]));
				errorCode = childJob_tRunJob_1.getErrorCode();

				if (childJob_tRunJob_1.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_1
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getErrorCode());
				}
				if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_1.getExceptionStackTrace());
				}

				if (childJob_tRunJob_1.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_1.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_1++;

				/**
				 * [tRunJob_1 main ] stop
				 */
				/**
				 * [tRunJob_1 end ] start
				 */

				currentComponent = "tRunJob_1";

				ok_Hash.put("tRunJob_1", true);
				end_Hash.put("tRunJob_1", System.currentTimeMillis());

				/**
				 * [tRunJob_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_9Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_9 begin ] start
				 */

				ok_Hash.put("tJava_9", false);
				start_Hash.put("tJava_9", System.currentTimeMillis());
				currentComponent = "tJava_9";

				int tos_count_tJava_9 = 0;

				((TOSHandler) context.TOSHandler)
						.statusSuccess("IEO tables did not exist. Creating tables ...");

				/**
				 * [tJava_9 begin ] stop
				 */
				/**
				 * [tJava_9 main ] start
				 */

				currentComponent = "tJava_9";

				tos_count_tJava_9++;

				/**
				 * [tJava_9 main ] stop
				 */
				/**
				 * [tJava_9 end ] start
				 */

				currentComponent = "tJava_9";

				ok_Hash.put("tJava_9", true);
				end_Hash.put("tJava_9", System.currentTimeMillis());

				/**
				 * [tJava_9 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_9:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCRow_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_9_SUBPROCESS_STATE", 1);
	}

	public void tJDBCRow_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCRow_1 begin ] start
				 */

				ok_Hash.put("tJDBCRow_1", false);
				start_Hash.put("tJDBCRow_1", System.currentTimeMillis());
				currentComponent = "tJDBCRow_1";

				int tos_count_tJDBCRow_1 = 0;

				java.sql.Connection connection_tJDBCRow_1 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");
				if (null == connection_tJDBCRow_1) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCRow_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					connection_tJDBCRow_1 = dataSources_tJDBCRow_1.get("")
							.getConnection();
				}

				java.sql.Statement stmt_tJDBCRow_1 = connection_tJDBCRow_1
						.createStatement();
				String query_tJDBCRow_1 = "";
				boolean whetherReject_tJDBCRow_1 = false;

				/**
				 * [tJDBCRow_1 begin ] stop
				 */
				/**
				 * [tJDBCRow_1 main ] start
				 */

				currentComponent = "tJDBCRow_1";

				query_tJDBCRow_1 = "  CREATE TABLE "
						+ context.OracleSchema
						+ "."
						+ context.TableIEOTargetOntology
						+ "    (      TARGET_ID            INTEGER,    TREE_LEVEL            INTEGER,      TREE_PATH             VARCHAR(3500),      SOURCE_LEVEL          INTEGER,      SOURCE_PATH           VARCHAR(3500),      SOURCE_DIMENSION     VARCHAR(1000),      \"NAME\"  VARCHAR(1000),      CHANGED               VARCHAR(10),      STARTDATE_SOURCE_PATH VARCHAR(3500),      ENDDATE_SOURCE_PATH  VARCHAR(3500),      VISUALATTRIBUTES     VARCHAR(300)    )  ";
				whetherReject_tJDBCRow_1 = false;
				globalMap.put("tJDBCRow_1_QUERY", query_tJDBCRow_1);
				try {
					stmt_tJDBCRow_1.execute(query_tJDBCRow_1);

				} catch (java.lang.Exception e) {
					whetherReject_tJDBCRow_1 = true;
					System.err.print(e.getMessage());
				}

				if (!whetherReject_tJDBCRow_1) {
				}

				tos_count_tJDBCRow_1++;

				/**
				 * [tJDBCRow_1 main ] stop
				 */
				/**
				 * [tJDBCRow_1 end ] start
				 */

				currentComponent = "tJDBCRow_1";

				stmt_tJDBCRow_1.close();

				ok_Hash.put("tJDBCRow_1", true);
				end_Hash.put("tJDBCRow_1", System.currentTimeMillis());

				/**
				 * [tJDBCRow_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCRow_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCRow_3Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCRow_1_SUBPROCESS_STATE", 1);
	}

	public void tJDBCRow_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCRow_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCRow_3 begin ] start
				 */

				ok_Hash.put("tJDBCRow_3", false);
				start_Hash.put("tJDBCRow_3", System.currentTimeMillis());
				currentComponent = "tJDBCRow_3";

				int tos_count_tJDBCRow_3 = 0;

				java.sql.Connection connection_tJDBCRow_3 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");
				if (null == connection_tJDBCRow_3) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCRow_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					connection_tJDBCRow_3 = dataSources_tJDBCRow_3.get("")
							.getConnection();
				}

				java.sql.Statement stmt_tJDBCRow_3 = connection_tJDBCRow_3
						.createStatement();
				String query_tJDBCRow_3 = "";
				boolean whetherReject_tJDBCRow_3 = false;

				/**
				 * [tJDBCRow_3 begin ] stop
				 */
				/**
				 * [tJDBCRow_3 main ] start
				 */

				currentComponent = "tJDBCRow_3";

				query_tJDBCRow_3 = "  CREATE TABLE "
						+ context.OracleSchema
						+ "."
						+ context.TableIEOTarget
						+ "    (      TARGET_ID            INTEGER,      TARGETPROJECT_ID            INTEGER,      VERSION             INTEGER,      CREATED          DATE,      LAST_MODIFIED           DATE,      \"USER_ID\"     VARCHAR(3500),      TARGET_DB_SCHEMA  VARCHAR(3500)    )  ";
				whetherReject_tJDBCRow_3 = false;
				globalMap.put("tJDBCRow_3_QUERY", query_tJDBCRow_3);
				try {
					stmt_tJDBCRow_3.execute(query_tJDBCRow_3);

				} catch (java.lang.Exception e) {
					whetherReject_tJDBCRow_3 = true;
					System.err.print(e.getMessage());
				}

				if (!whetherReject_tJDBCRow_3) {
				}

				tos_count_tJDBCRow_3++;

				/**
				 * [tJDBCRow_3 main ] stop
				 */
				/**
				 * [tJDBCRow_3 end ] start
				 */

				currentComponent = "tJDBCRow_3";

				stmt_tJDBCRow_3.close();

				ok_Hash.put("tJDBCRow_3", true);
				end_Hash.put("tJDBCRow_3", System.currentTimeMillis());

				/**
				 * [tJDBCRow_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCRow_3:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCRow_4Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCRow_3_SUBPROCESS_STATE", 1);
	}

	public void tJDBCRow_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCRow_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCRow_4 begin ] start
				 */

				ok_Hash.put("tJDBCRow_4", false);
				start_Hash.put("tJDBCRow_4", System.currentTimeMillis());
				currentComponent = "tJDBCRow_4";

				int tos_count_tJDBCRow_4 = 0;

				java.sql.Connection connection_tJDBCRow_4 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");
				if (null == connection_tJDBCRow_4) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCRow_4 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					connection_tJDBCRow_4 = dataSources_tJDBCRow_4.get("")
							.getConnection();
				}

				java.sql.Statement stmt_tJDBCRow_4 = connection_tJDBCRow_4
						.createStatement();
				String query_tJDBCRow_4 = "";
				boolean whetherReject_tJDBCRow_4 = false;

				/**
				 * [tJDBCRow_4 begin ] stop
				 */
				/**
				 * [tJDBCRow_4 main ] start
				 */

				currentComponent = "tJDBCRow_4";

				query_tJDBCRow_4 = "  CREATE TABLE "
						+ context.OracleSchema
						+ "."
						+ context.TableIEOTargetProject
						+ "    (       TARGETPROJECT_ID            INTEGER,      \"NAME\"             VARCHAR(3500),     DESCRIPTION             VARCHAR(3500)    )  ";
				whetherReject_tJDBCRow_4 = false;
				globalMap.put("tJDBCRow_4_QUERY", query_tJDBCRow_4);
				try {
					stmt_tJDBCRow_4.execute(query_tJDBCRow_4);

				} catch (java.lang.Exception e) {
					whetherReject_tJDBCRow_4 = true;
					System.err.print(e.getMessage());
				}

				if (!whetherReject_tJDBCRow_4) {
				}

				tos_count_tJDBCRow_4++;

				/**
				 * [tJDBCRow_4 main ] stop
				 */
				/**
				 * [tJDBCRow_4 end ] start
				 */

				currentComponent = "tJDBCRow_4";

				stmt_tJDBCRow_4.close();

				ok_Hash.put("tJDBCRow_4", true);
				end_Hash.put("tJDBCRow_4", System.currentTimeMillis());

				tJava_2Process(globalMap);

				/**
				 * [tJDBCRow_4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCRow_4_SUBPROCESS_STATE", 1);
	}

	public void tJava_11Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_11 begin ] start
				 */

				ok_Hash.put("tJava_11", false);
				start_Hash.put("tJava_11", System.currentTimeMillis());
				currentComponent = "tJava_11";

				int tos_count_tJava_11 = 0;

				((TOSHandler) context.TOSHandler)
						.status("Error while connection to the db. (JDBC)");
				System.out.println("Error while connection to the db. (JDBC)");

				/**
				 * [tJava_11 begin ] stop
				 */
				/**
				 * [tJava_11 main ] start
				 */

				currentComponent = "tJava_11";

				tos_count_tJava_11++;

				/**
				 * [tJava_11 main ] stop
				 */
				/**
				 * [tJava_11 end ] start
				 */

				currentComponent = "tJava_11";

				ok_Hash.put("tJava_11", true);
				end_Hash.put("tJava_11", System.currentTimeMillis());

				/**
				 * [tJava_11 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_11_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final TOSIDRTConnector TOSIDRTConnectorClass = new TOSIDRTConnector();

		int exitCode = TOSIDRTConnectorClass.runJobInTOS(args);
		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = TOSIDRTConnector.class
					.getClassLoader().getResourceAsStream(
							"tos/tosidrtconnector_0_4/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.Var1 = (String) context.getProperty("Var1");
			context.Var2 = (String) context.getProperty("Var2");
			context.Var3 = (String) context.getProperty("Var3");
			context.DataFile = (String) context.getProperty("DataFile");
			context.ErrorMessage = (String) context.getProperty("ErrorMessage");
			try {
				context.IfValue = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("IfValue"));
			} catch (NumberFormatException e) {
				context.IfValue = null;
			}
			context.Job = (String) context.getProperty("Job");
			context.OracleDB = (String) context.getProperty("OracleDB");
			context.OracleHost = (String) context.getProperty("OracleHost");
			context.OraclePassword = (String) context
					.getProperty("OraclePassword");
			context.OraclePort = (String) context.getProperty("OraclePort");
			context.OracleSchema = (String) context.getProperty("OracleSchema");
			context.OracleUsername = (String) context
					.getProperty("OracleUsername");
			context.SQLCommand = (String) context.getProperty("SQLCommand");
			context.SQLCommand2 = (String) context.getProperty("SQLCommand2");
			context.SQLTable = (String) context.getProperty("SQLTable");
			context.SQLTable2 = (String) context.getProperty("SQLTable2");
			context.StatusMessage = (String) context
					.getProperty("StatusMessage");
			context.TableIEOTargetOntology = (String) context
					.getProperty("TableIEOTargetOntology");
			context.TableIEOTargetProject = (String) context
					.getProperty("TableIEOTargetProject");
			context.TableIEOTarget = (String) context
					.getProperty("TableIEOTarget");
			context.TOSHandler = (Object) context.getProperty("TOSHandler");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("Var1")) {
				context.Var1 = (String) parentContextMap.get("Var1");
			}
			if (parentContextMap.containsKey("Var2")) {
				context.Var2 = (String) parentContextMap.get("Var2");
			}
			if (parentContextMap.containsKey("Var3")) {
				context.Var3 = (String) parentContextMap.get("Var3");
			}
			if (parentContextMap.containsKey("DataFile")) {
				context.DataFile = (String) parentContextMap.get("DataFile");
			}
			if (parentContextMap.containsKey("ErrorMessage")) {
				context.ErrorMessage = (String) parentContextMap
						.get("ErrorMessage");
			}
			if (parentContextMap.containsKey("IfValue")) {
				context.IfValue = (Boolean) parentContextMap.get("IfValue");
			}
			if (parentContextMap.containsKey("Job")) {
				context.Job = (String) parentContextMap.get("Job");
			}
			if (parentContextMap.containsKey("OracleDB")) {
				context.OracleDB = (String) parentContextMap.get("OracleDB");
			}
			if (parentContextMap.containsKey("OracleHost")) {
				context.OracleHost = (String) parentContextMap
						.get("OracleHost");
			}
			if (parentContextMap.containsKey("OraclePassword")) {
				context.OraclePassword = (String) parentContextMap
						.get("OraclePassword");
			}
			if (parentContextMap.containsKey("OraclePort")) {
				context.OraclePort = (String) parentContextMap
						.get("OraclePort");
			}
			if (parentContextMap.containsKey("OracleSchema")) {
				context.OracleSchema = (String) parentContextMap
						.get("OracleSchema");
			}
			if (parentContextMap.containsKey("OracleUsername")) {
				context.OracleUsername = (String) parentContextMap
						.get("OracleUsername");
			}
			if (parentContextMap.containsKey("SQLCommand")) {
				context.SQLCommand = (String) parentContextMap
						.get("SQLCommand");
			}
			if (parentContextMap.containsKey("SQLCommand2")) {
				context.SQLCommand2 = (String) parentContextMap
						.get("SQLCommand2");
			}
			if (parentContextMap.containsKey("SQLTable")) {
				context.SQLTable = (String) parentContextMap.get("SQLTable");
			}
			if (parentContextMap.containsKey("SQLTable2")) {
				context.SQLTable2 = (String) parentContextMap.get("SQLTable2");
			}
			if (parentContextMap.containsKey("StatusMessage")) {
				context.StatusMessage = (String) parentContextMap
						.get("StatusMessage");
			}
			if (parentContextMap.containsKey("TableIEOTargetOntology")) {
				context.TableIEOTargetOntology = (String) parentContextMap
						.get("TableIEOTargetOntology");
			}
			if (parentContextMap.containsKey("TableIEOTargetProject")) {
				context.TableIEOTargetProject = (String) parentContextMap
						.get("TableIEOTargetProject");
			}
			if (parentContextMap.containsKey("TableIEOTarget")) {
				context.TableIEOTarget = (String) parentContextMap
						.get("TableIEOTarget");
			}
			if (parentContextMap.containsKey("TOSHandler")) {
				context.TOSHandler = (Object) parentContextMap
						.get("TOSHandler");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {

			e_tPrejob_1.printStackTrace();
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = false;// to run others jobs

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : TOSIDRTConnector");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 264693 characters generated by Talend Open Studio for Data Integration on the
 * 9. Oktober 2013 16:00:15 MESZ
 ************************************************************************************************/
