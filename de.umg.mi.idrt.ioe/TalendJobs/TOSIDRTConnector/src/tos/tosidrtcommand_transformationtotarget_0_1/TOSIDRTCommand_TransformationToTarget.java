// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package tos.tosidrtcommand_transformationtotarget_0_1;

import routines.IIT;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.ExportDB;
import routines.Visit;
import routines.enc_num_routine;
import routines.Mathematical;
import routines.Relational;
import routines.TalendDate;
import routines.IDRTHelper;
import routines.PIDGen;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_2
//import java.util.List;

//the import part of tJava_4
//import java.util.List;

//the import part of tJava_5
//import java.util.List;

//the import part of tJava_6
//import java.util.List;

//the import part of tJava_7
//import java.util.List;

//the import part of tJava_3
//import java.util.List;

//the import part of tJava_8
//import java.util.List;

//the import part of tJava_9
//import java.util.List;

//the import part of tJava_10
//import java.util.List;

//the import part of tJava_11
//import java.util.List;

//the import part of tJava_12
//import java.util.List;

//the import part of tJava_13
//import java.util.List;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJavaRow_4
//import java.util.List;

//the import part of tJava_14
//import java.util.List;

//the import part of tJavaRow_2
//import java.util.List;

//the import part of tJava_15
//import java.util.List;

//the import part of tJavaRow_3
//import java.util.List;

//the import part of tJava_16
//import java.util.List;

//the import part of tJava_17
//import java.util.List;

//the import part of tJava_18
//import java.util.List;

//the import part of tJava_1
//import java.util.List;

//the import part of tLibraryLoad_1
import de.goettingen.i2b2.importtool.idrt.StatusListener.StatusListener;

@SuppressWarnings("unused")
/**
 * Job: TOSIDRTCommand_TransformationToTarget Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.3.1.r104014
 * @status 
 */
public class TOSIDRTCommand_TransformationToTarget implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (folderOutput != null) {

				this.setProperty("folderOutput", folderOutput.toString());

			}

			if (folderMain != null) {

				this.setProperty("folderMain", folderMain.toString());

			}

			if (DB_StagingI2B2_sqlclassname != null) {

				this.setProperty("DB_StagingI2B2_sqlclassname",
						DB_StagingI2B2_sqlclassname.toString());

			}

			if (TargetID != null) {

				this.setProperty("TargetID", TargetID.toString());

			}

			if (sql != null) {

				this.setProperty("sql", sql.toString());

			}

			if (DB_StagingI2B2_DatabaseType != null) {

				this.setProperty("DB_StagingI2B2_DatabaseType",
						DB_StagingI2B2_DatabaseType.toString());

			}

			if (DB_StagingI2B2_DriverClass != null) {

				this.setProperty("DB_StagingI2B2_DriverClass",
						DB_StagingI2B2_DriverClass.toString());

			}

			if (DB_StagingI2B2_Host != null) {

				this.setProperty("DB_StagingI2B2_Host",
						DB_StagingI2B2_Host.toString());

			}

			if (DB_StagingI2B2_Instance != null) {

				this.setProperty("DB_StagingI2B2_Instance",
						DB_StagingI2B2_Instance.toString());

			}

			if (DB_StagingI2B2_jdbcurl != null) {

				this.setProperty("DB_StagingI2B2_jdbcurl",
						DB_StagingI2B2_jdbcurl.toString());

			}

			if (DB_StagingI2B2_Password != null) {

				this.setProperty("DB_StagingI2B2_Password",
						DB_StagingI2B2_Password.toString());

			}

			if (DB_StagingI2B2_Port != null) {

				this.setProperty("DB_StagingI2B2_Port",
						DB_StagingI2B2_Port.toString());

			}

			if (DB_StagingI2B2_Schema != null) {

				this.setProperty("DB_StagingI2B2_Schema",
						DB_StagingI2B2_Schema.toString());

			}

			if (DB_StagingI2B2_Username != null) {

				this.setProperty("DB_StagingI2B2_Username",
						DB_StagingI2B2_Username.toString());

			}

			if (DB_TargetI2B2_DatabaseType != null) {

				this.setProperty("DB_TargetI2B2_DatabaseType",
						DB_TargetI2B2_DatabaseType.toString());

			}

			if (DB_TargetI2B2_DriverClass != null) {

				this.setProperty("DB_TargetI2B2_DriverClass",
						DB_TargetI2B2_DriverClass.toString());

			}

			if (DB_TargetI2B2_Host != null) {

				this.setProperty("DB_TargetI2B2_Host",
						DB_TargetI2B2_Host.toString());

			}

			if (DB_TargetI2B2_Instance != null) {

				this.setProperty("DB_TargetI2B2_Instance",
						DB_TargetI2B2_Instance.toString());

			}

			if (DB_TargetI2B2_jdbcurl != null) {

				this.setProperty("DB_TargetI2B2_jdbcurl",
						DB_TargetI2B2_jdbcurl.toString());

			}

			if (DB_TargetI2B2_Password != null) {

				this.setProperty("DB_TargetI2B2_Password",
						DB_TargetI2B2_Password.toString());

			}

			if (DB_TargetI2B2_Port != null) {

				this.setProperty("DB_TargetI2B2_Port",
						DB_TargetI2B2_Port.toString());

			}

			if (DB_TargetI2B2_Schema != null) {

				this.setProperty("DB_TargetI2B2_Schema",
						DB_TargetI2B2_Schema.toString());

			}

			if (DB_TargetI2B2_sqlclassname != null) {

				this.setProperty("DB_TargetI2B2_sqlclassname",
						DB_TargetI2B2_sqlclassname.toString());

			}

			if (DB_TargetI2B2_Username != null) {

				this.setProperty("DB_TargetI2B2_Username",
						DB_TargetI2B2_Username.toString());

			}

			if (currentQuery != null) {

				this.setProperty("currentQuery", currentQuery.toString());

			}

		}

		public String folderOutput;

		public String getFolderOutput() {
			return this.folderOutput;
		}

		public String folderMain;

		public String getFolderMain() {
			return this.folderMain;
		}

		public String DB_StagingI2B2_sqlclassname;

		public String getDB_StagingI2B2_sqlclassname() {
			return this.DB_StagingI2B2_sqlclassname;
		}

		public Integer TargetID;

		public Integer getTargetID() {
			return this.TargetID;
		}

		public String sql;

		public String getSql() {
			return this.sql;
		}

		public String DB_StagingI2B2_DatabaseType;

		public String getDB_StagingI2B2_DatabaseType() {
			return this.DB_StagingI2B2_DatabaseType;
		}

		public String DB_StagingI2B2_DriverClass;

		public String getDB_StagingI2B2_DriverClass() {
			return this.DB_StagingI2B2_DriverClass;
		}

		public String DB_StagingI2B2_Host;

		public String getDB_StagingI2B2_Host() {
			return this.DB_StagingI2B2_Host;
		}

		public String DB_StagingI2B2_Instance;

		public String getDB_StagingI2B2_Instance() {
			return this.DB_StagingI2B2_Instance;
		}

		public String DB_StagingI2B2_jdbcurl;

		public String getDB_StagingI2B2_jdbcurl() {
			return this.DB_StagingI2B2_jdbcurl;
		}

		public java.lang.String DB_StagingI2B2_Password;

		public java.lang.String getDB_StagingI2B2_Password() {
			return this.DB_StagingI2B2_Password;
		}

		public String DB_StagingI2B2_Port;

		public String getDB_StagingI2B2_Port() {
			return this.DB_StagingI2B2_Port;
		}

		public String DB_StagingI2B2_Schema;

		public String getDB_StagingI2B2_Schema() {
			return this.DB_StagingI2B2_Schema;
		}

		public String DB_StagingI2B2_Username;

		public String getDB_StagingI2B2_Username() {
			return this.DB_StagingI2B2_Username;
		}

		public String DB_TargetI2B2_DatabaseType;

		public String getDB_TargetI2B2_DatabaseType() {
			return this.DB_TargetI2B2_DatabaseType;
		}

		public String DB_TargetI2B2_DriverClass;

		public String getDB_TargetI2B2_DriverClass() {
			return this.DB_TargetI2B2_DriverClass;
		}

		public String DB_TargetI2B2_Host;

		public String getDB_TargetI2B2_Host() {
			return this.DB_TargetI2B2_Host;
		}

		public String DB_TargetI2B2_Instance;

		public String getDB_TargetI2B2_Instance() {
			return this.DB_TargetI2B2_Instance;
		}

		public String DB_TargetI2B2_jdbcurl;

		public String getDB_TargetI2B2_jdbcurl() {
			return this.DB_TargetI2B2_jdbcurl;
		}

		public java.lang.String DB_TargetI2B2_Password;

		public java.lang.String getDB_TargetI2B2_Password() {
			return this.DB_TargetI2B2_Password;
		}

		public String DB_TargetI2B2_Port;

		public String getDB_TargetI2B2_Port() {
			return this.DB_TargetI2B2_Port;
		}

		public String DB_TargetI2B2_Schema;

		public String getDB_TargetI2B2_Schema() {
			return this.DB_TargetI2B2_Schema;
		}

		public String DB_TargetI2B2_sqlclassname;

		public String getDB_TargetI2B2_sqlclassname() {
			return this.DB_TargetI2B2_sqlclassname;
		}

		public String DB_TargetI2B2_Username;

		public String getDB_TargetI2B2_Username() {
			return this.DB_TargetI2B2_Username;
		}

		public String currentQuery;

		public String getCurrentQuery() {
			return this.currentQuery;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "TOSIDRTCommand_TransformationToTarget";
	private final String projectName = "TOS";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					TOSIDRTCommand_TransformationToTarget.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(
									TOSIDRTCommand_TransformationToTarget.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tJDBCConnection_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCConnection_1", System.currentTimeMillis());

		status = "failure";

		tJDBCConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_2", System.currentTimeMillis());

		status = "failure";

		tJava_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_4", System.currentTimeMillis());

		status = "failure";

		tJava_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_1", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_5", System.currentTimeMillis());

		status = "failure";

		tJava_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_2", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_6", System.currentTimeMillis());

		status = "failure";

		tJava_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_9", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_16", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_7", System.currentTimeMillis());

		status = "failure";

		tJava_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_16", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_23_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_23", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_3", System.currentTimeMillis());

		status = "failure";

		tJava_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_8", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_15", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_8", System.currentTimeMillis());

		status = "failure";

		tJava_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_9", System.currentTimeMillis());

		status = "failure";

		tJava_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_5", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_8", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_10", System.currentTimeMillis());

		status = "failure";

		tJava_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_6", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_9", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_11", System.currentTimeMillis());

		status = "failure";

		tJava_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_7", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_14", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_12", System.currentTimeMillis());

		status = "failure";

		tJava_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_17", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_31_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_31", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_13", System.currentTimeMillis());

		status = "failure";

		tJava_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_19_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_19", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_29_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_29", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_28_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_28", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_28_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_21_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_21", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_28_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_32_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_32", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_28_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_14", System.currentTimeMillis());

		status = "failure";

		tJava_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_5", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_6", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_10", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_11", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_15", System.currentTimeMillis());

		status = "failure";

		tJava_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_16", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_16", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_24_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_24", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_25_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_25", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_26_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_26", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_16", System.currentTimeMillis());

		status = "failure";

		tJava_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_26_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_26", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_26_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_10", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_26_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_27_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_27", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_26_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_18_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_18", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_18_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_9", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_18_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_28_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_28", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_18_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_13", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_13_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJDBCClose_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCClose_1", System.currentTimeMillis());

		status = "failure";

		tJDBCClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_17", System.currentTimeMillis());

		status = "failure";

		tJava_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_2", System.currentTimeMillis());

		status = "failure";

		tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_18_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_18", System.currentTimeMillis());

		status = "failure";

		tJava_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_1", System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_3", System.currentTimeMillis());

		status = "failure";

		tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tCreateTemporaryFile_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_1", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLibraryLoad_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

		status = "failure";

		tLibraryLoad_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tCreateTemporaryFile_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_2", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_3", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_31_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_31", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_31_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_32_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_32", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_32_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_4", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_11", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_11_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_10", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_12", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_12_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_5", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_6", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_7", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_8", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_9", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_10", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_15", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_15_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_17", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_17_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_19_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_19", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_19_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_20_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_20", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_20_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_21_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_21", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_21_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_22_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_22", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_22_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_23_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_23", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_23_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_25_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_25", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_25_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_11", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_11_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_12", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_12_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_33_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_33", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_33_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_from_src_ont_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_from_src_ont", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row47_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row47", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_31_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row48_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row48", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_32_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_from_src_conc_dim_error(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_from_src_conc_dim",
				System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_from_srxc_obsfct_error(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_from_srxc_obsfct",
				System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_11_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row17", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_12_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row27_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row27", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_15_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row29_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row29", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_17_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row31_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row31", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_19_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row32_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row32", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_20_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row33_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row33", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_21_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row35_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row35", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_22_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row36_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row36", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_23_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row30_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row30", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_25_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row49_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row49", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_33_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_3_TMAP_OUT_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_3_TMAP_OUT", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_3_TMAP_IN_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_3_TMAP_IN", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_4_TMAP_OUT_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_4_TMAP_OUT", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_4_TMAP_IN_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_4_TMAP_IN", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_9_TMAP_OUT_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_9_TMAP_OUT", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_9_TMAP_IN_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_9_TMAP_IN", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_8_TMAP_OUT_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_8_TMAP_OUT", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_8_TMAP_IN_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_8_TMAP_IN", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_6_TMAP_OUT_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_6_TMAP_OUT", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_6_TMAP_IN_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_6_TMAP_IN", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_7_TMAP_OUT_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_7_TMAP_OUT", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_7_TMAP_IN_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_7_TMAP_IN", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_12_TMAP_OUT_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_12_TMAP_OUT", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_12_TMAP_IN_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_12_TMAP_IN", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_13_TMAP_OUT_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_13_TMAP_OUT", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_13_TMAP_IN_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_13_TMAP_IN", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_15_TMAP_OUT_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_15_TMAP_OUT", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_15_TMAP_IN_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_15_TMAP_IN", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_14_TMAP_OUT_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_14_TMAP_OUT", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_14_TMAP_IN_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_14_TMAP_IN", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_17_TMAP_OUT_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_17_TMAP_OUT", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_17_TMAP_IN_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_17_TMAP_IN", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_18_TMAP_OUT_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_18_TMAP_OUT", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_18_TMAP_IN_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_18_TMAP_IN", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJDBCConnection_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_6_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_9_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_7_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_16_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_8_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_8_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_9_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_10_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_6_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_11_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_7_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_12_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_17_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_13_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_28_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_14_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_5_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_15_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_16_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_16_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_26_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_18_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_13_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCClose_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_17_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_18_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLibraryLoad_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_2_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_3_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_31_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_32_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_4_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_4_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_11_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_10_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_9_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_12_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_6_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_7_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_5_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_6_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_7_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_8_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_9_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_10_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_15_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_17_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_19_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_20_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_21_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_22_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_23_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_25_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_11_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_12_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_33_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCConnection_1 begin ] start
				 */

				ok_Hash.put("tJDBCConnection_1", false);
				start_Hash.put("tJDBCConnection_1", System.currentTimeMillis());
				currentComponent = "tJDBCConnection_1";

				int tos_count_tJDBCConnection_1 = 0;

				String url_tJDBCConnection_1 = context.DB_StagingI2B2_jdbcurl;

				String userName_tJDBCConnection_1 = context.DB_StagingI2B2_Username;
				String password_tJDBCConnection_1 = context.DB_StagingI2B2_Password;

				java.sql.Connection conn_tJDBCConnection_1 = null;

				if ((null == globalMap.get(KEY_DB_DATASOURCES))
						|| "".equals("")) {

					java.lang.Class.forName(context.DB_StagingI2B2_DriverClass);

					conn_tJDBCConnection_1 = java.sql.DriverManager
							.getConnection(url_tJDBCConnection_1,
									userName_tJDBCConnection_1,
									password_tJDBCConnection_1);
					globalMap.put("conn_tJDBCConnection_1",
							conn_tJDBCConnection_1);
				}
				if (null != conn_tJDBCConnection_1) {

				}

				globalMap.put("conn_tJDBCConnection_1", conn_tJDBCConnection_1);
				globalMap.put("url_tJDBCConnection_1", url_tJDBCConnection_1);
				// globalMap.put("user_tJDBCConnection_1",
				// userName_tJDBCConnection_1);
				// globalMap.put("pass_tJDBCConnection_1",
				// password_tJDBCConnection_1);

				/**
				 * [tJDBCConnection_1 begin ] stop
				 */
				/**
				 * [tJDBCConnection_1 main ] start
				 */

				currentComponent = "tJDBCConnection_1";

				tos_count_tJDBCConnection_1++;

				/**
				 * [tJDBCConnection_1 main ] stop
				 */
				/**
				 * [tJDBCConnection_1 end ] start
				 */

				currentComponent = "tJDBCConnection_1";

				ok_Hash.put("tJDBCConnection_1", true);
				end_Hash.put("tJDBCConnection_1", System.currentTimeMillis());

				/**
				 * [tJDBCConnection_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJDBCConnection_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tJava_2Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());
				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				System.out.println("Extracting Staging Data...");
				StatusListener.setStatus(10, "Extracting Staging Data...", "");

				/**
				 * [tJava_2 begin ] stop
				 */
				/**
				 * [tJava_2 main ] start
				 */

				currentComponent = "tJava_2";

				tos_count_tJava_2++;

				/**
				 * [tJava_2 main ] stop
				 */
				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				/**
				 * [tJava_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk1", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_4Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk2", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_5Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk3", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_6Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk4", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_7Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk5", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_3Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk6", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_8Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk7", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_9Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk8", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_10Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk9", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_11Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk10", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_12Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk11", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_13Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_4 begin ] start
				 */

				ok_Hash.put("tJava_4", false);
				start_Hash.put("tJava_4", System.currentTimeMillis());
				currentComponent = "tJava_4";

				int tos_count_tJava_4 = 0;

				StatusListener.setSubStatus(0, "Getting Target Ontology...");
				if (context.DB_StagingI2B2_DatabaseType
						.equalsIgnoreCase("oracle"))
					context.currentQuery = "select * from "
							+ context.DB_StagingI2B2_Schema
							+ ".IOE_TARGET_ONTOLOGY where target_id = "
							+ context.TargetID;
				else {
					context.currentQuery = "select * from i2b2metadata.IOE_TARGET_ONTOLOGY where target_id = "
							+ context.TargetID;

				}

				/**
				 * [tJava_4 begin ] stop
				 */
				/**
				 * [tJava_4 main ] start
				 */

				currentComponent = "tJava_4";

				tos_count_tJava_4++;

				/**
				 * [tJava_4 main ] stop
				 */
				/**
				 * [tJava_4 end ] start
				 */

				currentComponent = "tJava_4";

				ok_Hash.put("tJava_4", true);
				end_Hash.put("tJava_4", System.currentTimeMillis());

				/**
				 * [tJava_4 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_4:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public Integer TARGET_ID;

		public Integer getTARGET_ID() {
			return this.TARGET_ID;
		}

		public Integer TREE_LEVEL;

		public Integer getTREE_LEVEL() {
			return this.TREE_LEVEL;
		}

		public String TREE_PATH;

		public String getTREE_PATH() {
			return this.TREE_PATH;
		}

		public String STAGING_PATH;

		public String getSTAGING_PATH() {
			return this.STAGING_PATH;
		}

		public String STAGING_DIMENSION;

		public String getSTAGING_DIMENSION() {
			return this.STAGING_DIMENSION;
		}

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		public String STARTDATE_STAGING_PATH;

		public String getSTARTDATE_STAGING_PATH() {
			return this.STARTDATE_STAGING_PATH;
		}

		public String ENDDATE_STAGING_PATH;

		public String getENDDATE_STAGING_PATH() {
			return this.ENDDATE_STAGING_PATH;
		}

		public String VISUALATTRIBUTES;

		public String getVISUALATTRIBUTES() {
			return this.VISUALATTRIBUTES;
		}

		public String BASECODE;

		public String getBASECODE() {
			return this.BASECODE;
		}

		public String METADATAXML;

		public String getMETADATAXML() {
			return this.METADATAXML;
		}

		public String COLUMNDATATYPE;

		public String getCOLUMNDATATYPE() {
			return this.COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String TOOLTIP;

		public String getTOOLTIP() {
			return this.TOOLTIP;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.TARGET_ID = readInteger(dis);

					this.TREE_LEVEL = readInteger(dis);

					this.TREE_PATH = readString(dis);

					this.STAGING_PATH = readString(dis);

					this.STAGING_DIMENSION = readString(dis);

					this.NAME = readString(dis);

					this.STARTDATE_STAGING_PATH = readString(dis);

					this.ENDDATE_STAGING_PATH = readString(dis);

					this.VISUALATTRIBUTES = readString(dis);

					this.BASECODE = readString(dis);

					this.METADATAXML = readString(dis);

					this.COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_COMMENT = readString(dis);

					this.TOOLTIP = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.TARGET_ID, dos);

				// Integer

				writeInteger(this.TREE_LEVEL, dos);

				// String

				writeString(this.TREE_PATH, dos);

				// String

				writeString(this.STAGING_PATH, dos);

				// String

				writeString(this.STAGING_DIMENSION, dos);

				// String

				writeString(this.NAME, dos);

				// String

				writeString(this.STARTDATE_STAGING_PATH, dos);

				// String

				writeString(this.ENDDATE_STAGING_PATH, dos);

				// String

				writeString(this.VISUALATTRIBUTES, dos);

				// String

				writeString(this.BASECODE, dos);

				// String

				writeString(this.METADATAXML, dos);

				// String

				writeString(this.COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.TOOLTIP, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TARGET_ID=" + String.valueOf(TARGET_ID));
			sb.append(",TREE_LEVEL=" + String.valueOf(TREE_LEVEL));
			sb.append(",TREE_PATH=" + TREE_PATH);
			sb.append(",STAGING_PATH=" + STAGING_PATH);
			sb.append(",STAGING_DIMENSION=" + STAGING_DIMENSION);
			sb.append(",NAME=" + NAME);
			sb.append(",STARTDATE_STAGING_PATH=" + STARTDATE_STAGING_PATH);
			sb.append(",ENDDATE_STAGING_PATH=" + ENDDATE_STAGING_PATH);
			sb.append(",VISUALATTRIBUTES=" + VISUALATTRIBUTES);
			sb.append(",BASECODE=" + BASECODE);
			sb.append(",METADATAXML=" + METADATAXML);
			sb.append(",COLUMNDATATYPE=" + COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",TOOLTIP=" + TOOLTIP);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_1";

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						((String) globalMap
								.get("tCreateTemporaryFile_1_FILEPATH"))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);

				String[] headColutFileOutputDelimited_1 = new String[21];
				class CSVBasicSet_tFileOutputDelimited_1 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_1[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_1 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_1[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_1[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_1 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_1[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_1[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_1 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_1[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_1 = 0;
				int splitEvery_tFileOutputDelimited_1 = 1000;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				CSVBasicSet_tFileOutputDelimited_1 csvSettings_tFileOutputDelimited_1 = new CSVBasicSet_tFileOutputDelimited_1();
				csvSettings_tFileOutputDelimited_1.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_1.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_1.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = null;
				try {
					CsvWritertFileOutputDelimited_1 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_1,
													false), "UTF-8")));
					CsvWritertFileOutputDelimited_1
							.setSeparator(csvSettings_tFileOutputDelimited_1
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_1
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_1.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_1.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_1.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_1
										.getRowDelim());
					}

					if (filetFileOutputDelimited_1.length() == 0) {

						headColutFileOutputDelimited_1[0] = "TARGET_ID";

						headColutFileOutputDelimited_1[1] = "TREE_LEVEL";

						headColutFileOutputDelimited_1[2] = "TREE_PATH";

						headColutFileOutputDelimited_1[3] = "STAGING_PATH";

						headColutFileOutputDelimited_1[4] = "STAGING_DIMENSION";

						headColutFileOutputDelimited_1[5] = "NAME";

						headColutFileOutputDelimited_1[6] = "STARTDATE_STAGING_PATH";

						headColutFileOutputDelimited_1[7] = "ENDDATE_STAGING_PATH";

						headColutFileOutputDelimited_1[8] = "VISUALATTRIBUTES";

						headColutFileOutputDelimited_1[9] = "BASECODE";

						headColutFileOutputDelimited_1[10] = "METADATAXML";

						headColutFileOutputDelimited_1[11] = "COLUMNDATATYPE";

						headColutFileOutputDelimited_1[12] = "C_OPERATOR";

						headColutFileOutputDelimited_1[13] = "C_COMMENT";

						headColutFileOutputDelimited_1[14] = "TOOLTIP";

						headColutFileOutputDelimited_1[15] = "UPDATE_DATE";

						headColutFileOutputDelimited_1[16] = "DOWNLOAD_DATE";

						headColutFileOutputDelimited_1[17] = "IMPORT_DATE";

						headColutFileOutputDelimited_1[18] = "SOURCESYSTEM_CD";

						headColutFileOutputDelimited_1[19] = "VALUETYPE_CD";

						headColutFileOutputDelimited_1[20] = "M_APPLIED_PATH";

						CsvWritertFileOutputDelimited_1
								.writeNext(headColutFileOutputDelimited_1);
						CsvWritertFileOutputDelimited_1.flush();

					}

					CsvWritertFileOutputDelimited_1
							.setEscapeChar(csvSettings_tFileOutputDelimited_1
									.getEscapeChar());
					CsvWritertFileOutputDelimited_1
							.setQuoteChar(csvSettings_tFileOutputDelimited_1
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_1
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_1 begin ] stop
					 */

					/**
					 * [tJDBCInput_1 begin ] start
					 */

					ok_Hash.put("tJDBCInput_1", false);
					start_Hash.put("tJDBCInput_1", System.currentTimeMillis());
					currentComponent = "tJDBCInput_1";

					int tos_count_tJDBCInput_1 = 0;

					int nb_line_tJDBCInput_1 = 0;
					java.sql.Connection conn_tJDBCInput_1 = null;
					conn_tJDBCInput_1 = (java.sql.Connection) globalMap
							.get("conn_tJDBCConnection_1");
					if (null == conn_tJDBCInput_1) {
						java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCInput_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
								.get(KEY_DB_DATASOURCES);
						conn_tJDBCInput_1 = dataSources_tJDBCInput_1.get("")
								.getConnection();
						// globalMap.put("conn_tJDBCConnection_1",
						// conn_tJDBCInput_1);
					}

					java.sql.Statement stmt_tJDBCInput_1 = conn_tJDBCInput_1
							.createStatement();

					String dbquery_tJDBCInput_1 = context.currentQuery;

					globalMap.put("tJDBCInput_1_QUERY", dbquery_tJDBCInput_1);

					java.sql.ResultSet rs_tJDBCInput_1 = stmt_tJDBCInput_1
							.executeQuery(dbquery_tJDBCInput_1);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_1 = rs_tJDBCInput_1
							.getMetaData();
					int colQtyInRs_tJDBCInput_1 = rsmd_tJDBCInput_1
							.getColumnCount();

					String tmpContent_tJDBCInput_1 = null;
					int column_index_tJDBCInput_1 = 1;
					while (rs_tJDBCInput_1.next()) {
						nb_line_tJDBCInput_1++;

						column_index_tJDBCInput_1 = 1;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.TARGET_ID = null;
						} else {

							if (rs_tJDBCInput_1
									.getObject(column_index_tJDBCInput_1) != null) {
								row1.TARGET_ID = rs_tJDBCInput_1
										.getInt(column_index_tJDBCInput_1);
							} else {
								row1.TARGET_ID = null;
							}

							if (rs_tJDBCInput_1.wasNull()) {
								row1.TARGET_ID = null;
							}
						}
						column_index_tJDBCInput_1 = 2;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.TREE_LEVEL = null;
						} else {

							if (rs_tJDBCInput_1
									.getObject(column_index_tJDBCInput_1) != null) {
								row1.TREE_LEVEL = rs_tJDBCInput_1
										.getInt(column_index_tJDBCInput_1);
							} else {
								row1.TREE_LEVEL = null;
							}

							if (rs_tJDBCInput_1.wasNull()) {
								row1.TREE_LEVEL = null;
							}
						}
						column_index_tJDBCInput_1 = 3;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.TREE_PATH = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(column_index_tJDBCInput_1);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.TREE_PATH = tmpContent_tJDBCInput_1;
							} else {
								row1.TREE_PATH = null;
							}

							if (rs_tJDBCInput_1.wasNull()) {
								row1.TREE_PATH = null;
							}
						}
						column_index_tJDBCInput_1 = 4;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.STAGING_PATH = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(column_index_tJDBCInput_1);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.STAGING_PATH = tmpContent_tJDBCInput_1;
							} else {
								row1.STAGING_PATH = null;
							}

							if (rs_tJDBCInput_1.wasNull()) {
								row1.STAGING_PATH = null;
							}
						}
						column_index_tJDBCInput_1 = 5;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.STAGING_DIMENSION = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(column_index_tJDBCInput_1);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.STAGING_DIMENSION = tmpContent_tJDBCInput_1;
							} else {
								row1.STAGING_DIMENSION = null;
							}

							if (rs_tJDBCInput_1.wasNull()) {
								row1.STAGING_DIMENSION = null;
							}
						}
						column_index_tJDBCInput_1 = 6;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.NAME = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(column_index_tJDBCInput_1);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.NAME = tmpContent_tJDBCInput_1;
							} else {
								row1.NAME = null;
							}

							if (rs_tJDBCInput_1.wasNull()) {
								row1.NAME = null;
							}
						}
						column_index_tJDBCInput_1 = 7;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.STARTDATE_STAGING_PATH = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(column_index_tJDBCInput_1);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.STARTDATE_STAGING_PATH = tmpContent_tJDBCInput_1;
							} else {
								row1.STARTDATE_STAGING_PATH = null;
							}

							if (rs_tJDBCInput_1.wasNull()) {
								row1.STARTDATE_STAGING_PATH = null;
							}
						}
						column_index_tJDBCInput_1 = 8;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.ENDDATE_STAGING_PATH = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(column_index_tJDBCInput_1);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.ENDDATE_STAGING_PATH = tmpContent_tJDBCInput_1;
							} else {
								row1.ENDDATE_STAGING_PATH = null;
							}

							if (rs_tJDBCInput_1.wasNull()) {
								row1.ENDDATE_STAGING_PATH = null;
							}
						}
						column_index_tJDBCInput_1 = 9;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.VISUALATTRIBUTES = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(column_index_tJDBCInput_1);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.VISUALATTRIBUTES = tmpContent_tJDBCInput_1;
							} else {
								row1.VISUALATTRIBUTES = null;
							}

							if (rs_tJDBCInput_1.wasNull()) {
								row1.VISUALATTRIBUTES = null;
							}
						}
						column_index_tJDBCInput_1 = 10;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.BASECODE = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(column_index_tJDBCInput_1);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.BASECODE = tmpContent_tJDBCInput_1;
							} else {
								row1.BASECODE = null;
							}

							if (rs_tJDBCInput_1.wasNull()) {
								row1.BASECODE = null;
							}
						}
						column_index_tJDBCInput_1 = 11;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.METADATAXML = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(column_index_tJDBCInput_1);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.METADATAXML = tmpContent_tJDBCInput_1;
							} else {
								row1.METADATAXML = null;
							}

							if (rs_tJDBCInput_1.wasNull()) {
								row1.METADATAXML = null;
							}
						}
						column_index_tJDBCInput_1 = 12;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.COLUMNDATATYPE = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(column_index_tJDBCInput_1);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.COLUMNDATATYPE = tmpContent_tJDBCInput_1;
							} else {
								row1.COLUMNDATATYPE = null;
							}

							if (rs_tJDBCInput_1.wasNull()) {
								row1.COLUMNDATATYPE = null;
							}
						}
						column_index_tJDBCInput_1 = 13;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.C_OPERATOR = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(column_index_tJDBCInput_1);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.C_OPERATOR = tmpContent_tJDBCInput_1;
							} else {
								row1.C_OPERATOR = null;
							}

							if (rs_tJDBCInput_1.wasNull()) {
								row1.C_OPERATOR = null;
							}
						}
						column_index_tJDBCInput_1 = 14;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.C_COMMENT = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(column_index_tJDBCInput_1);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.C_COMMENT = tmpContent_tJDBCInput_1;
							} else {
								row1.C_COMMENT = null;
							}

							if (rs_tJDBCInput_1.wasNull()) {
								row1.C_COMMENT = null;
							}
						}
						column_index_tJDBCInput_1 = 15;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.TOOLTIP = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(column_index_tJDBCInput_1);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.TOOLTIP = tmpContent_tJDBCInput_1;
							} else {
								row1.TOOLTIP = null;
							}

							if (rs_tJDBCInput_1.wasNull()) {
								row1.TOOLTIP = null;
							}
						}
						column_index_tJDBCInput_1 = 16;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.UPDATE_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_1 = null;
							try {
								date_tJDBCInput_1 = rs_tJDBCInput_1
										.getTimestamp(column_index_tJDBCInput_1);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_1 = rs_tJDBCInput_1
										.getDate(column_index_tJDBCInput_1);
							}
							row1.UPDATE_DATE = date_tJDBCInput_1;

							if (rs_tJDBCInput_1.wasNull()) {
								row1.UPDATE_DATE = null;
							}
						}
						column_index_tJDBCInput_1 = 17;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.DOWNLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_1 = null;
							try {
								date_tJDBCInput_1 = rs_tJDBCInput_1
										.getTimestamp(column_index_tJDBCInput_1);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_1 = rs_tJDBCInput_1
										.getDate(column_index_tJDBCInput_1);
							}
							row1.DOWNLOAD_DATE = date_tJDBCInput_1;

							if (rs_tJDBCInput_1.wasNull()) {
								row1.DOWNLOAD_DATE = null;
							}
						}
						column_index_tJDBCInput_1 = 18;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.IMPORT_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_1 = null;
							try {
								date_tJDBCInput_1 = rs_tJDBCInput_1
										.getTimestamp(column_index_tJDBCInput_1);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_1 = rs_tJDBCInput_1
										.getDate(column_index_tJDBCInput_1);
							}
							row1.IMPORT_DATE = date_tJDBCInput_1;

							if (rs_tJDBCInput_1.wasNull()) {
								row1.IMPORT_DATE = null;
							}
						}
						column_index_tJDBCInput_1 = 19;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.SOURCESYSTEM_CD = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(column_index_tJDBCInput_1);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.SOURCESYSTEM_CD = tmpContent_tJDBCInput_1;
							} else {
								row1.SOURCESYSTEM_CD = null;
							}

							if (rs_tJDBCInput_1.wasNull()) {
								row1.SOURCESYSTEM_CD = null;
							}
						}
						column_index_tJDBCInput_1 = 20;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.VALUETYPE_CD = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(column_index_tJDBCInput_1);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.VALUETYPE_CD = tmpContent_tJDBCInput_1;
							} else {
								row1.VALUETYPE_CD = null;
							}

							if (rs_tJDBCInput_1.wasNull()) {
								row1.VALUETYPE_CD = null;
							}
						}
						column_index_tJDBCInput_1 = 21;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.M_APPLIED_PATH = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(column_index_tJDBCInput_1);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.M_APPLIED_PATH = tmpContent_tJDBCInput_1;
							} else {
								row1.M_APPLIED_PATH = null;
							}

							if (rs_tJDBCInput_1.wasNull()) {
								row1.M_APPLIED_PATH = null;
							}
						}

						/**
						 * [tJDBCInput_1 begin ] stop
						 */
						/**
						 * [tJDBCInput_1 main ] start
						 */

						currentComponent = "tJDBCInput_1";

						tos_count_tJDBCInput_1++;

						/**
						 * [tJDBCInput_1 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 main ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						String[] rowtFileOutputDelimited_1 = new String[21];

						rowtFileOutputDelimited_1[0] = row1.TARGET_ID == null ? ""
								: String.valueOf(row1.TARGET_ID);

						rowtFileOutputDelimited_1[1] = row1.TREE_LEVEL == null ? ""
								: String.valueOf(row1.TREE_LEVEL);

						rowtFileOutputDelimited_1[2] = row1.TREE_PATH == null ? ""
								: row1.TREE_PATH;

						rowtFileOutputDelimited_1[3] = row1.STAGING_PATH == null ? ""
								: row1.STAGING_PATH;

						rowtFileOutputDelimited_1[4] = row1.STAGING_DIMENSION == null ? ""
								: row1.STAGING_DIMENSION;

						rowtFileOutputDelimited_1[5] = row1.NAME == null ? ""
								: row1.NAME;

						rowtFileOutputDelimited_1[6] = row1.STARTDATE_STAGING_PATH == null ? ""
								: row1.STARTDATE_STAGING_PATH;

						rowtFileOutputDelimited_1[7] = row1.ENDDATE_STAGING_PATH == null ? ""
								: row1.ENDDATE_STAGING_PATH;

						rowtFileOutputDelimited_1[8] = row1.VISUALATTRIBUTES == null ? ""
								: row1.VISUALATTRIBUTES;

						rowtFileOutputDelimited_1[9] = row1.BASECODE == null ? ""
								: row1.BASECODE;

						rowtFileOutputDelimited_1[10] = row1.METADATAXML == null ? ""
								: row1.METADATAXML;

						rowtFileOutputDelimited_1[11] = row1.COLUMNDATATYPE == null ? ""
								: row1.COLUMNDATATYPE;

						rowtFileOutputDelimited_1[12] = row1.C_OPERATOR == null ? ""
								: row1.C_OPERATOR;

						rowtFileOutputDelimited_1[13] = row1.C_COMMENT == null ? ""
								: row1.C_COMMENT;

						rowtFileOutputDelimited_1[14] = row1.TOOLTIP == null ? ""
								: row1.TOOLTIP;

						rowtFileOutputDelimited_1[15] = row1.UPDATE_DATE == null ? ""
								: FormatterUtils.format_Date(row1.UPDATE_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_1[16] = row1.DOWNLOAD_DATE == null ? ""
								: FormatterUtils.format_Date(
										row1.DOWNLOAD_DATE, "dd-MM-yyyy");

						rowtFileOutputDelimited_1[17] = row1.IMPORT_DATE == null ? ""
								: FormatterUtils.format_Date(row1.IMPORT_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_1[18] = row1.SOURCESYSTEM_CD == null ? ""
								: row1.SOURCESYSTEM_CD;

						rowtFileOutputDelimited_1[19] = row1.VALUETYPE_CD == null ? ""
								: row1.VALUETYPE_CD;

						rowtFileOutputDelimited_1[20] = row1.M_APPLIED_PATH == null ? ""
								: row1.M_APPLIED_PATH;

						nb_line_tFileOutputDelimited_1++;
						CsvWritertFileOutputDelimited_1
								.writeNext(rowtFileOutputDelimited_1);

						tos_count_tFileOutputDelimited_1++;

						/**
						 * [tFileOutputDelimited_1 main ] stop
						 */

						/**
						 * [tJDBCInput_1 end ] start
						 */

						currentComponent = "tJDBCInput_1";

					}
					rs_tJDBCInput_1.close();
					stmt_tJDBCInput_1.close();

					globalMap.put("tJDBCInput_1_NB_LINE", nb_line_tJDBCInput_1);

					ok_Hash.put("tJDBCInput_1", true);
					end_Hash.put("tJDBCInput_1", System.currentTimeMillis());

					/**
					 * [tJDBCInput_1 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 end ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

				} finally {

					if (CsvWritertFileOutputDelimited_1 != null) {
						CsvWritertFileOutputDelimited_1.close();
					}
					globalMap.put("tFileOutputDelimited_1_NB_LINE",
							nb_line_tFileOutputDelimited_1);
				} // finally

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCInput_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_5 begin ] start
				 */

				ok_Hash.put("tJava_5", false);
				start_Hash.put("tJava_5", System.currentTimeMillis());
				currentComponent = "tJava_5";

				int tos_count_tJava_5 = 0;

				StatusListener.setSubStatus(10, "Getting Staging Ontology...");
				if (context.DB_StagingI2B2_DatabaseType
						.equalsIgnoreCase("oracle"))
					context.currentQuery = "select * from "
							+ context.DB_StagingI2B2_Schema
							+ ".i2b2 INNER JOIN "
							+ context.DB_StagingI2B2_Schema
							+ ".ioe_target_ontology ON "
							+ context.DB_StagingI2B2_Schema
							+ ".i2b2.c_fullname = "
							+ context.DB_StagingI2B2_Schema
							+ ".ioe_target_ontology.staging_path where "
							+ context.DB_StagingI2B2_Schema
							+ ".ioe_target_ontology.target_id = "
							+ context.TargetID;
				else {
					context.currentQuery = "select * from i2b2metadata.i2b2_secure INNER JOIN i2b2metadata.ioe_target_ontology ON i2b2metadata.i2b2_secure.c_fullname = i2b2metadata.ioe_target_ontology.staging_path where i2b2metadata.ioe_target_ontology.target_id = "
							+ context.TargetID;

				}

				/**
				 * [tJava_5 begin ] stop
				 */
				/**
				 * [tJava_5 main ] start
				 */

				currentComponent = "tJava_5";

				tos_count_tJava_5++;

				/**
				 * [tJava_5 main ] stop
				 */
				/**
				 * [tJava_5 end ] start
				 */

				currentComponent = "tJava_5";

				ok_Hash.put("tJava_5", true);
				end_Hash.put("tJava_5", System.currentTimeMillis());

				/**
				 * [tJava_5 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_5:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCInput_2Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal C_HLEVEL;

		public BigDecimal getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String C_SYNONYM_CD;

		public String getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public BigDecimal C_TOTALNUM;

		public BigDecimal getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public String C_COLUMNDATATYPE;

		public String getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public Object C_COMMENT;

		public Object getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.C_HLEVEL = (BigDecimal) dis.readObject();

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					this.C_SYNONYM_CD = readString(dis);

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = (BigDecimal) dis.readObject();

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					this.C_COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = (Object) dis.readObject();

					this.C_TOOLTIP = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.C_HLEVEL);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.C_SYNONYM_CD, dos);

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// BigDecimal

				dos.writeObject(this.C_TOTALNUM);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// String

				writeString(this.C_COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// Object

				dos.writeObject(this.C_COMMENT);

				// String

				writeString(this.C_TOOLTIP, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + C_SYNONYM_CD);
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + String.valueOf(C_TOTALNUM));
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + C_COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + String.valueOf(C_COMMENT));
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_2";

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						((String) globalMap
								.get("tCreateTemporaryFile_2_FILEPATH"))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(0, fileName_tFileOutputDelimited_2
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);

				String[] headColutFileOutputDelimited_2 = new String[25];
				class CSVBasicSet_tFileOutputDelimited_2 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_2[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_2 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_2[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_2[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_2 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_2[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_2[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_2 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_2[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_2 = 0;
				int splitEvery_tFileOutputDelimited_2 = 1000;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				CSVBasicSet_tFileOutputDelimited_2 csvSettings_tFileOutputDelimited_2 = new CSVBasicSet_tFileOutputDelimited_2();
				csvSettings_tFileOutputDelimited_2.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_2.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_2.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null
						&& directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
							directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_2 = null;
				try {
					CsvWritertFileOutputDelimited_2 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_2,
													false), "UTF-8")));
					CsvWritertFileOutputDelimited_2
							.setSeparator(csvSettings_tFileOutputDelimited_2
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_2
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_2.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_2.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_2.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_2
										.getRowDelim());
					}

					if (filetFileOutputDelimited_2.length() == 0) {

						headColutFileOutputDelimited_2[0] = "C_HLEVEL";

						headColutFileOutputDelimited_2[1] = "C_FULLNAME";

						headColutFileOutputDelimited_2[2] = "C_NAME";

						headColutFileOutputDelimited_2[3] = "C_SYNONYM_CD";

						headColutFileOutputDelimited_2[4] = "C_VISUALATTRIBUTES";

						headColutFileOutputDelimited_2[5] = "C_TOTALNUM";

						headColutFileOutputDelimited_2[6] = "C_BASECODE";

						headColutFileOutputDelimited_2[7] = "C_METADATAXML";

						headColutFileOutputDelimited_2[8] = "C_FACTTABLECOLUMN";

						headColutFileOutputDelimited_2[9] = "C_TABLENAME";

						headColutFileOutputDelimited_2[10] = "C_COLUMNNAME";

						headColutFileOutputDelimited_2[11] = "C_COLUMNDATATYPE";

						headColutFileOutputDelimited_2[12] = "C_OPERATOR";

						headColutFileOutputDelimited_2[13] = "C_DIMCODE";

						headColutFileOutputDelimited_2[14] = "C_COMMENT";

						headColutFileOutputDelimited_2[15] = "C_TOOLTIP";

						headColutFileOutputDelimited_2[16] = "M_APPLIED_PATH";

						headColutFileOutputDelimited_2[17] = "UPDATE_DATE";

						headColutFileOutputDelimited_2[18] = "DOWNLOAD_DATE";

						headColutFileOutputDelimited_2[19] = "IMPORT_DATE";

						headColutFileOutputDelimited_2[20] = "SOURCESYSTEM_CD";

						headColutFileOutputDelimited_2[21] = "VALUETYPE_CD";

						headColutFileOutputDelimited_2[22] = "M_EXCLUSION_CD";

						headColutFileOutputDelimited_2[23] = "C_PATH";

						headColutFileOutputDelimited_2[24] = "C_SYMBOL";

						CsvWritertFileOutputDelimited_2
								.writeNext(headColutFileOutputDelimited_2);
						CsvWritertFileOutputDelimited_2.flush();

					}

					CsvWritertFileOutputDelimited_2
							.setEscapeChar(csvSettings_tFileOutputDelimited_2
									.getEscapeChar());
					CsvWritertFileOutputDelimited_2
							.setQuoteChar(csvSettings_tFileOutputDelimited_2
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_2
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_2 begin ] stop
					 */

					/**
					 * [tJDBCInput_2 begin ] start
					 */

					ok_Hash.put("tJDBCInput_2", false);
					start_Hash.put("tJDBCInput_2", System.currentTimeMillis());
					currentComponent = "tJDBCInput_2";

					int tos_count_tJDBCInput_2 = 0;

					int nb_line_tJDBCInput_2 = 0;
					java.sql.Connection conn_tJDBCInput_2 = null;
					conn_tJDBCInput_2 = (java.sql.Connection) globalMap
							.get("conn_tJDBCConnection_1");
					if (null == conn_tJDBCInput_2) {
						java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCInput_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
								.get(KEY_DB_DATASOURCES);
						conn_tJDBCInput_2 = dataSources_tJDBCInput_2.get("")
								.getConnection();
						// globalMap.put("conn_tJDBCConnection_1",
						// conn_tJDBCInput_2);
					}

					java.sql.Statement stmt_tJDBCInput_2 = conn_tJDBCInput_2
							.createStatement();

					String dbquery_tJDBCInput_2 = context.currentQuery;

					globalMap.put("tJDBCInput_2_QUERY", dbquery_tJDBCInput_2);

					java.sql.ResultSet rs_tJDBCInput_2 = stmt_tJDBCInput_2
							.executeQuery(dbquery_tJDBCInput_2);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_2 = rs_tJDBCInput_2
							.getMetaData();
					int colQtyInRs_tJDBCInput_2 = rsmd_tJDBCInput_2
							.getColumnCount();

					String tmpContent_tJDBCInput_2 = null;
					int column_index_tJDBCInput_2 = 1;
					while (rs_tJDBCInput_2.next()) {
						nb_line_tJDBCInput_2++;

						column_index_tJDBCInput_2 = 1;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.C_HLEVEL = null;
						} else {

							if (rs_tJDBCInput_2
									.getObject(column_index_tJDBCInput_2) != null) {
								row2.C_HLEVEL = rs_tJDBCInput_2
										.getBigDecimal(column_index_tJDBCInput_2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}
						column_index_tJDBCInput_2 = 2;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.C_FULLNAME = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_FULLNAME = tmpContent_tJDBCInput_2;
							} else {
								row2.C_FULLNAME = null;
							}

						}
						column_index_tJDBCInput_2 = 3;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.C_NAME = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_NAME = tmpContent_tJDBCInput_2;
							} else {
								row2.C_NAME = null;
							}

						}
						column_index_tJDBCInput_2 = 4;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.C_SYNONYM_CD = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_SYNONYM_CD = tmpContent_tJDBCInput_2;
							} else {
								row2.C_SYNONYM_CD = null;
							}

						}
						column_index_tJDBCInput_2 = 5;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.C_VISUALATTRIBUTES = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_VISUALATTRIBUTES = tmpContent_tJDBCInput_2;
							} else {
								row2.C_VISUALATTRIBUTES = null;
							}

						}
						column_index_tJDBCInput_2 = 6;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.C_TOTALNUM = null;
						} else {

							if (rs_tJDBCInput_2
									.getObject(column_index_tJDBCInput_2) != null) {
								row2.C_TOTALNUM = rs_tJDBCInput_2
										.getBigDecimal(column_index_tJDBCInput_2);
							} else {
								row2.C_TOTALNUM = null;
							}

							if (rs_tJDBCInput_2.wasNull()) {
								row2.C_TOTALNUM = null;
							}
						}
						column_index_tJDBCInput_2 = 7;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.C_BASECODE = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_BASECODE = tmpContent_tJDBCInput_2;
							} else {
								row2.C_BASECODE = null;
							}

							if (rs_tJDBCInput_2.wasNull()) {
								row2.C_BASECODE = null;
							}
						}
						column_index_tJDBCInput_2 = 8;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.C_METADATAXML = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_METADATAXML = tmpContent_tJDBCInput_2;
							} else {
								row2.C_METADATAXML = null;
							}

							if (rs_tJDBCInput_2.wasNull()) {
								row2.C_METADATAXML = null;
							}
						}
						column_index_tJDBCInput_2 = 9;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.C_FACTTABLECOLUMN = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_FACTTABLECOLUMN = tmpContent_tJDBCInput_2;
							} else {
								row2.C_FACTTABLECOLUMN = null;
							}

						}
						column_index_tJDBCInput_2 = 10;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.C_TABLENAME = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_TABLENAME = tmpContent_tJDBCInput_2;
							} else {
								row2.C_TABLENAME = null;
							}

						}
						column_index_tJDBCInput_2 = 11;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.C_COLUMNNAME = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_COLUMNNAME = tmpContent_tJDBCInput_2;
							} else {
								row2.C_COLUMNNAME = null;
							}

						}
						column_index_tJDBCInput_2 = 12;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.C_COLUMNDATATYPE = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_COLUMNDATATYPE = tmpContent_tJDBCInput_2;
							} else {
								row2.C_COLUMNDATATYPE = null;
							}

						}
						column_index_tJDBCInput_2 = 13;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.C_OPERATOR = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_OPERATOR = tmpContent_tJDBCInput_2;
							} else {
								row2.C_OPERATOR = null;
							}

						}
						column_index_tJDBCInput_2 = 14;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.C_DIMCODE = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_DIMCODE = tmpContent_tJDBCInput_2;
							} else {
								row2.C_DIMCODE = null;
							}

						}
						column_index_tJDBCInput_2 = 15;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.C_COMMENT = null;
						} else {

							if (rs_tJDBCInput_2
									.getObject(column_index_tJDBCInput_2) != null) {
								row2.C_COMMENT = rs_tJDBCInput_2
										.getObject(column_index_tJDBCInput_2);
							} else {
								row2.C_COMMENT = null;
							}

							if (rs_tJDBCInput_2.wasNull()) {
								row2.C_COMMENT = null;
							}
						}
						column_index_tJDBCInput_2 = 16;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.C_TOOLTIP = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_TOOLTIP = tmpContent_tJDBCInput_2;
							} else {
								row2.C_TOOLTIP = null;
							}

							if (rs_tJDBCInput_2.wasNull()) {
								row2.C_TOOLTIP = null;
							}
						}
						column_index_tJDBCInput_2 = 17;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.M_APPLIED_PATH = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.M_APPLIED_PATH = tmpContent_tJDBCInput_2;
							} else {
								row2.M_APPLIED_PATH = null;
							}

						}
						column_index_tJDBCInput_2 = 18;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.UPDATE_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_2 = null;
							try {
								date_tJDBCInput_2 = rs_tJDBCInput_2
										.getTimestamp(column_index_tJDBCInput_2);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_2 = rs_tJDBCInput_2
										.getDate(column_index_tJDBCInput_2);
							}
							row2.UPDATE_DATE = date_tJDBCInput_2;

						}
						column_index_tJDBCInput_2 = 19;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.DOWNLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_2 = null;
							try {
								date_tJDBCInput_2 = rs_tJDBCInput_2
										.getTimestamp(column_index_tJDBCInput_2);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_2 = rs_tJDBCInput_2
										.getDate(column_index_tJDBCInput_2);
							}
							row2.DOWNLOAD_DATE = date_tJDBCInput_2;

							if (rs_tJDBCInput_2.wasNull()) {
								row2.DOWNLOAD_DATE = null;
							}
						}
						column_index_tJDBCInput_2 = 20;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.IMPORT_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_2 = null;
							try {
								date_tJDBCInput_2 = rs_tJDBCInput_2
										.getTimestamp(column_index_tJDBCInput_2);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_2 = rs_tJDBCInput_2
										.getDate(column_index_tJDBCInput_2);
							}
							row2.IMPORT_DATE = date_tJDBCInput_2;

							if (rs_tJDBCInput_2.wasNull()) {
								row2.IMPORT_DATE = null;
							}
						}
						column_index_tJDBCInput_2 = 21;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.SOURCESYSTEM_CD = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.SOURCESYSTEM_CD = tmpContent_tJDBCInput_2;
							} else {
								row2.SOURCESYSTEM_CD = null;
							}

							if (rs_tJDBCInput_2.wasNull()) {
								row2.SOURCESYSTEM_CD = null;
							}
						}
						column_index_tJDBCInput_2 = 22;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.VALUETYPE_CD = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.VALUETYPE_CD = tmpContent_tJDBCInput_2;
							} else {
								row2.VALUETYPE_CD = null;
							}

							if (rs_tJDBCInput_2.wasNull()) {
								row2.VALUETYPE_CD = null;
							}
						}
						column_index_tJDBCInput_2 = 23;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.M_EXCLUSION_CD = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.M_EXCLUSION_CD = tmpContent_tJDBCInput_2;
							} else {
								row2.M_EXCLUSION_CD = null;
							}

							if (rs_tJDBCInput_2.wasNull()) {
								row2.M_EXCLUSION_CD = null;
							}
						}
						column_index_tJDBCInput_2 = 24;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.C_PATH = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_PATH = tmpContent_tJDBCInput_2;
							} else {
								row2.C_PATH = null;
							}

							if (rs_tJDBCInput_2.wasNull()) {
								row2.C_PATH = null;
							}
						}
						column_index_tJDBCInput_2 = 25;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.C_SYMBOL = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_SYMBOL = tmpContent_tJDBCInput_2;
							} else {
								row2.C_SYMBOL = null;
							}

							if (rs_tJDBCInput_2.wasNull()) {
								row2.C_SYMBOL = null;
							}
						}

						/**
						 * [tJDBCInput_2 begin ] stop
						 */
						/**
						 * [tJDBCInput_2 main ] start
						 */

						currentComponent = "tJDBCInput_2";

						tos_count_tJDBCInput_2++;

						/**
						 * [tJDBCInput_2 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_2 main ] start
						 */

						currentComponent = "tFileOutputDelimited_2";

						String[] rowtFileOutputDelimited_2 = new String[25];

						rowtFileOutputDelimited_2[0] = row2.C_HLEVEL == null ? ""
								: row2.C_HLEVEL.setScale(0,
										java.math.RoundingMode.HALF_UP)
										.toPlainString();

						rowtFileOutputDelimited_2[1] = row2.C_FULLNAME == null ? ""
								: row2.C_FULLNAME;

						rowtFileOutputDelimited_2[2] = row2.C_NAME == null ? ""
								: row2.C_NAME;

						rowtFileOutputDelimited_2[3] = row2.C_SYNONYM_CD == null ? ""
								: row2.C_SYNONYM_CD;

						rowtFileOutputDelimited_2[4] = row2.C_VISUALATTRIBUTES == null ? ""
								: row2.C_VISUALATTRIBUTES;

						rowtFileOutputDelimited_2[5] = row2.C_TOTALNUM == null ? ""
								: row2.C_TOTALNUM.setScale(0,
										java.math.RoundingMode.HALF_UP)
										.toPlainString();

						rowtFileOutputDelimited_2[6] = row2.C_BASECODE == null ? ""
								: row2.C_BASECODE;

						rowtFileOutputDelimited_2[7] = row2.C_METADATAXML == null ? ""
								: row2.C_METADATAXML;

						rowtFileOutputDelimited_2[8] = row2.C_FACTTABLECOLUMN == null ? ""
								: row2.C_FACTTABLECOLUMN;

						rowtFileOutputDelimited_2[9] = row2.C_TABLENAME == null ? ""
								: row2.C_TABLENAME;

						rowtFileOutputDelimited_2[10] = row2.C_COLUMNNAME == null ? ""
								: row2.C_COLUMNNAME;

						rowtFileOutputDelimited_2[11] = row2.C_COLUMNDATATYPE == null ? ""
								: row2.C_COLUMNDATATYPE;

						rowtFileOutputDelimited_2[12] = row2.C_OPERATOR == null ? ""
								: row2.C_OPERATOR;

						rowtFileOutputDelimited_2[13] = row2.C_DIMCODE == null ? ""
								: row2.C_DIMCODE;

						rowtFileOutputDelimited_2[14] = row2.C_COMMENT == null ? ""
								: String.valueOf(row2.C_COMMENT);

						rowtFileOutputDelimited_2[15] = row2.C_TOOLTIP == null ? ""
								: row2.C_TOOLTIP;

						rowtFileOutputDelimited_2[16] = row2.M_APPLIED_PATH == null ? ""
								: row2.M_APPLIED_PATH;

						rowtFileOutputDelimited_2[17] = row2.UPDATE_DATE == null ? ""
								: FormatterUtils.format_Date(row2.UPDATE_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_2[18] = row2.DOWNLOAD_DATE == null ? ""
								: FormatterUtils.format_Date(
										row2.DOWNLOAD_DATE, "dd-MM-yyyy");

						rowtFileOutputDelimited_2[19] = row2.IMPORT_DATE == null ? ""
								: FormatterUtils.format_Date(row2.IMPORT_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_2[20] = row2.SOURCESYSTEM_CD == null ? ""
								: row2.SOURCESYSTEM_CD;

						rowtFileOutputDelimited_2[21] = row2.VALUETYPE_CD == null ? ""
								: row2.VALUETYPE_CD;

						rowtFileOutputDelimited_2[22] = row2.M_EXCLUSION_CD == null ? ""
								: row2.M_EXCLUSION_CD;

						rowtFileOutputDelimited_2[23] = row2.C_PATH == null ? ""
								: row2.C_PATH;

						rowtFileOutputDelimited_2[24] = row2.C_SYMBOL == null ? ""
								: row2.C_SYMBOL;

						nb_line_tFileOutputDelimited_2++;
						CsvWritertFileOutputDelimited_2
								.writeNext(rowtFileOutputDelimited_2);

						tos_count_tFileOutputDelimited_2++;

						/**
						 * [tFileOutputDelimited_2 main ] stop
						 */

						/**
						 * [tJDBCInput_2 end ] start
						 */

						currentComponent = "tJDBCInput_2";

					}
					rs_tJDBCInput_2.close();
					stmt_tJDBCInput_2.close();

					globalMap.put("tJDBCInput_2_NB_LINE", nb_line_tJDBCInput_2);

					ok_Hash.put("tJDBCInput_2", true);
					end_Hash.put("tJDBCInput_2", System.currentTimeMillis());

					/**
					 * [tJDBCInput_2 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_2 end ] start
					 */

					currentComponent = "tFileOutputDelimited_2";

				} finally {

					if (CsvWritertFileOutputDelimited_2 != null) {
						CsvWritertFileOutputDelimited_2.close();
					}
					globalMap.put("tFileOutputDelimited_2_NB_LINE",
							nb_line_tFileOutputDelimited_2);
				} // finally

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCInput_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_6 begin ] start
				 */

				ok_Hash.put("tJava_6", false);
				start_Hash.put("tJava_6", System.currentTimeMillis());
				currentComponent = "tJava_6";

				int tos_count_tJava_6 = 0;

				StatusListener.setSubStatus(20,
						"Getting Staging Concept_Dimension...");
				if (context.DB_StagingI2B2_DatabaseType
						.equalsIgnoreCase("oracle"))
					context.currentQuery = "SELECT * FROM "
							+ context.DB_StagingI2B2_Schema
							+ ".concept_dimension";
				else {
					context.currentQuery = "SELECT * FROM i2b2demodata.concept_dimension";

				}

				/**
				 * [tJava_6 begin ] stop
				 */
				/**
				 * [tJava_6 main ] start
				 */

				currentComponent = "tJava_6";

				tos_count_tJava_6++;

				/**
				 * [tJava_6 main ] stop
				 */
				/**
				 * [tJava_6 end ] start
				 */

				currentComponent = "tJava_6";

				ok_Hash.put("tJava_6", true);
				end_Hash.put("tJava_6", System.currentTimeMillis());

				/**
				 * [tJava_6 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_6:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCInput_9Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_6_SUBPROCESS_STATE", 1);
	}

	public static class row24Struct implements
			routines.system.IPersistableRow<row24Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.CONCEPT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.CONCEPT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_9Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row24Struct row24 = new row24Struct();

				/**
				 * [tFileOutputDelimited_16 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_16", false);
				start_Hash.put("tFileOutputDelimited_16",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_16";

				int tos_count_tFileOutputDelimited_16 = 0;

				String fileName_tFileOutputDelimited_16 = "";
				fileName_tFileOutputDelimited_16 = (new java.io.File(
						((String) globalMap
								.get("tCreateTemporaryFile_4_FILEPATH"))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_16 = null;
				String extension_tFileOutputDelimited_16 = null;
				String directory_tFileOutputDelimited_16 = null;
				if ((fileName_tFileOutputDelimited_16.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_16.lastIndexOf(".") < fileName_tFileOutputDelimited_16
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16;
						extension_tFileOutputDelimited_16 = "";
					} else {
						fullName_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16
								.substring(0, fileName_tFileOutputDelimited_16
										.lastIndexOf("."));
						extension_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16
								.substring(fileName_tFileOutputDelimited_16
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16
							.substring(0, fileName_tFileOutputDelimited_16
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_16.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16
								.substring(0, fileName_tFileOutputDelimited_16
										.lastIndexOf("."));
						extension_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16
								.substring(fileName_tFileOutputDelimited_16
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16;
						extension_tFileOutputDelimited_16 = "";
					}
					directory_tFileOutputDelimited_16 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_16 = true;
				java.io.File filetFileOutputDelimited_16 = new java.io.File(
						fileName_tFileOutputDelimited_16);
				globalMap.put("tFileOutputDelimited_16_FILE_NAME",
						fileName_tFileOutputDelimited_16);

				String[] headColutFileOutputDelimited_16 = new String[9];
				class CSVBasicSet_tFileOutputDelimited_16 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_16[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_16 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_16[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_16[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_16 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_16[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_16[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_16 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_16[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_16 = 0;
				int splitEvery_tFileOutputDelimited_16 = 1000;
				int splitedFileNo_tFileOutputDelimited_16 = 0;
				int currentRow_tFileOutputDelimited_16 = 0;

				CSVBasicSet_tFileOutputDelimited_16 csvSettings_tFileOutputDelimited_16 = new CSVBasicSet_tFileOutputDelimited_16();
				csvSettings_tFileOutputDelimited_16.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_16.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_16.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_16 != null
						&& directory_tFileOutputDelimited_16.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_16 = new java.io.File(
							directory_tFileOutputDelimited_16);
					if (!dir_tFileOutputDelimited_16.exists()) {
						dir_tFileOutputDelimited_16.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_16 = null;
				try {
					CsvWritertFileOutputDelimited_16 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_16,
													false), "UTF-8")));
					CsvWritertFileOutputDelimited_16
							.setSeparator(csvSettings_tFileOutputDelimited_16
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_16
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_16
									.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_16
									.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_16.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_16
										.getRowDelim());
					}

					if (filetFileOutputDelimited_16.length() == 0) {

						headColutFileOutputDelimited_16[0] = "CONCEPT_PATH";

						headColutFileOutputDelimited_16[1] = "CONCEPT_CD";

						headColutFileOutputDelimited_16[2] = "NAME_CHAR";

						headColutFileOutputDelimited_16[3] = "CONCEPT_BLOB";

						headColutFileOutputDelimited_16[4] = "UPDATE_DATE";

						headColutFileOutputDelimited_16[5] = "DOWNLOAD_DATE";

						headColutFileOutputDelimited_16[6] = "IMPORT_DATE";

						headColutFileOutputDelimited_16[7] = "SOURCESYSTEM_CD";

						headColutFileOutputDelimited_16[8] = "UPLOAD_ID";

						CsvWritertFileOutputDelimited_16
								.writeNext(headColutFileOutputDelimited_16);
						CsvWritertFileOutputDelimited_16.flush();

					}

					CsvWritertFileOutputDelimited_16
							.setEscapeChar(csvSettings_tFileOutputDelimited_16
									.getEscapeChar());
					CsvWritertFileOutputDelimited_16
							.setQuoteChar(csvSettings_tFileOutputDelimited_16
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_16
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_16 begin ] stop
					 */

					/**
					 * [tJDBCInput_9 begin ] start
					 */

					ok_Hash.put("tJDBCInput_9", false);
					start_Hash.put("tJDBCInput_9", System.currentTimeMillis());
					currentComponent = "tJDBCInput_9";

					int tos_count_tJDBCInput_9 = 0;

					int nb_line_tJDBCInput_9 = 0;
					java.sql.Connection conn_tJDBCInput_9 = null;
					conn_tJDBCInput_9 = (java.sql.Connection) globalMap
							.get("conn_tJDBCConnection_1");
					if (null == conn_tJDBCInput_9) {
						java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCInput_9 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
								.get(KEY_DB_DATASOURCES);
						conn_tJDBCInput_9 = dataSources_tJDBCInput_9.get("")
								.getConnection();
						// globalMap.put("conn_tJDBCConnection_1",
						// conn_tJDBCInput_9);
					}

					java.sql.Statement stmt_tJDBCInput_9 = conn_tJDBCInput_9
							.createStatement();

					String dbquery_tJDBCInput_9 = context.currentQuery;

					globalMap.put("tJDBCInput_9_QUERY", dbquery_tJDBCInput_9);

					java.sql.ResultSet rs_tJDBCInput_9 = stmt_tJDBCInput_9
							.executeQuery(dbquery_tJDBCInput_9);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_9 = rs_tJDBCInput_9
							.getMetaData();
					int colQtyInRs_tJDBCInput_9 = rsmd_tJDBCInput_9
							.getColumnCount();

					String tmpContent_tJDBCInput_9 = null;
					int column_index_tJDBCInput_9 = 1;
					while (rs_tJDBCInput_9.next()) {
						nb_line_tJDBCInput_9++;

						column_index_tJDBCInput_9 = 1;

						if (colQtyInRs_tJDBCInput_9 < column_index_tJDBCInput_9) {
							row24.CONCEPT_PATH = null;
						} else {

							tmpContent_tJDBCInput_9 = rs_tJDBCInput_9
									.getString(column_index_tJDBCInput_9);
							if (tmpContent_tJDBCInput_9 != null) {
								row24.CONCEPT_PATH = tmpContent_tJDBCInput_9;
							} else {
								row24.CONCEPT_PATH = null;
							}

						}
						column_index_tJDBCInput_9 = 2;

						if (colQtyInRs_tJDBCInput_9 < column_index_tJDBCInput_9) {
							row24.CONCEPT_CD = null;
						} else {

							tmpContent_tJDBCInput_9 = rs_tJDBCInput_9
									.getString(column_index_tJDBCInput_9);
							if (tmpContent_tJDBCInput_9 != null) {
								row24.CONCEPT_CD = tmpContent_tJDBCInput_9;
							} else {
								row24.CONCEPT_CD = null;
							}

						}
						column_index_tJDBCInput_9 = 3;

						if (colQtyInRs_tJDBCInput_9 < column_index_tJDBCInput_9) {
							row24.NAME_CHAR = null;
						} else {

							tmpContent_tJDBCInput_9 = rs_tJDBCInput_9
									.getString(column_index_tJDBCInput_9);
							if (tmpContent_tJDBCInput_9 != null) {
								row24.NAME_CHAR = tmpContent_tJDBCInput_9;
							} else {
								row24.NAME_CHAR = null;
							}

							if (rs_tJDBCInput_9.wasNull()) {
								row24.NAME_CHAR = null;
							}
						}
						column_index_tJDBCInput_9 = 4;

						if (colQtyInRs_tJDBCInput_9 < column_index_tJDBCInput_9) {
							row24.CONCEPT_BLOB = null;
						} else {

							tmpContent_tJDBCInput_9 = rs_tJDBCInput_9
									.getString(column_index_tJDBCInput_9);
							if (tmpContent_tJDBCInput_9 != null) {
								row24.CONCEPT_BLOB = tmpContent_tJDBCInput_9;
							} else {
								row24.CONCEPT_BLOB = null;
							}

							if (rs_tJDBCInput_9.wasNull()) {
								row24.CONCEPT_BLOB = null;
							}
						}
						column_index_tJDBCInput_9 = 5;

						if (colQtyInRs_tJDBCInput_9 < column_index_tJDBCInput_9) {
							row24.UPDATE_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_9 = null;
							try {
								date_tJDBCInput_9 = rs_tJDBCInput_9
										.getTimestamp(column_index_tJDBCInput_9);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_9 = rs_tJDBCInput_9
										.getDate(column_index_tJDBCInput_9);
							}
							row24.UPDATE_DATE = date_tJDBCInput_9;

							if (rs_tJDBCInput_9.wasNull()) {
								row24.UPDATE_DATE = null;
							}
						}
						column_index_tJDBCInput_9 = 6;

						if (colQtyInRs_tJDBCInput_9 < column_index_tJDBCInput_9) {
							row24.DOWNLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_9 = null;
							try {
								date_tJDBCInput_9 = rs_tJDBCInput_9
										.getTimestamp(column_index_tJDBCInput_9);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_9 = rs_tJDBCInput_9
										.getDate(column_index_tJDBCInput_9);
							}
							row24.DOWNLOAD_DATE = date_tJDBCInput_9;

							if (rs_tJDBCInput_9.wasNull()) {
								row24.DOWNLOAD_DATE = null;
							}
						}
						column_index_tJDBCInput_9 = 7;

						if (colQtyInRs_tJDBCInput_9 < column_index_tJDBCInput_9) {
							row24.IMPORT_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_9 = null;
							try {
								date_tJDBCInput_9 = rs_tJDBCInput_9
										.getTimestamp(column_index_tJDBCInput_9);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_9 = rs_tJDBCInput_9
										.getDate(column_index_tJDBCInput_9);
							}
							row24.IMPORT_DATE = date_tJDBCInput_9;

							if (rs_tJDBCInput_9.wasNull()) {
								row24.IMPORT_DATE = null;
							}
						}
						column_index_tJDBCInput_9 = 8;

						if (colQtyInRs_tJDBCInput_9 < column_index_tJDBCInput_9) {
							row24.SOURCESYSTEM_CD = null;
						} else {

							tmpContent_tJDBCInput_9 = rs_tJDBCInput_9
									.getString(column_index_tJDBCInput_9);
							if (tmpContent_tJDBCInput_9 != null) {
								row24.SOURCESYSTEM_CD = tmpContent_tJDBCInput_9;
							} else {
								row24.SOURCESYSTEM_CD = null;
							}

							if (rs_tJDBCInput_9.wasNull()) {
								row24.SOURCESYSTEM_CD = null;
							}
						}
						column_index_tJDBCInput_9 = 9;

						if (colQtyInRs_tJDBCInput_9 < column_index_tJDBCInput_9) {
							row24.UPLOAD_ID = null;
						} else {

							tmpContent_tJDBCInput_9 = rs_tJDBCInput_9
									.getString(column_index_tJDBCInput_9);
							if (tmpContent_tJDBCInput_9 != null) {
								row24.UPLOAD_ID = tmpContent_tJDBCInput_9;
							} else {
								row24.UPLOAD_ID = null;
							}

							if (rs_tJDBCInput_9.wasNull()) {
								row24.UPLOAD_ID = null;
							}
						}

						/**
						 * [tJDBCInput_9 begin ] stop
						 */
						/**
						 * [tJDBCInput_9 main ] start
						 */

						currentComponent = "tJDBCInput_9";

						tos_count_tJDBCInput_9++;

						/**
						 * [tJDBCInput_9 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_16 main ] start
						 */

						currentComponent = "tFileOutputDelimited_16";

						String[] rowtFileOutputDelimited_16 = new String[9];

						rowtFileOutputDelimited_16[0] = row24.CONCEPT_PATH == null ? ""
								: row24.CONCEPT_PATH;

						rowtFileOutputDelimited_16[1] = row24.CONCEPT_CD == null ? ""
								: row24.CONCEPT_CD;

						rowtFileOutputDelimited_16[2] = row24.NAME_CHAR == null ? ""
								: row24.NAME_CHAR;

						rowtFileOutputDelimited_16[3] = row24.CONCEPT_BLOB == null ? ""
								: row24.CONCEPT_BLOB;

						rowtFileOutputDelimited_16[4] = row24.UPDATE_DATE == null ? ""
								: FormatterUtils.format_Date(row24.UPDATE_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_16[5] = row24.DOWNLOAD_DATE == null ? ""
								: FormatterUtils.format_Date(
										row24.DOWNLOAD_DATE, "dd-MM-yyyy");

						rowtFileOutputDelimited_16[6] = row24.IMPORT_DATE == null ? ""
								: FormatterUtils.format_Date(row24.IMPORT_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_16[7] = row24.SOURCESYSTEM_CD == null ? ""
								: row24.SOURCESYSTEM_CD;

						rowtFileOutputDelimited_16[8] = row24.UPLOAD_ID == null ? ""
								: row24.UPLOAD_ID;

						nb_line_tFileOutputDelimited_16++;
						CsvWritertFileOutputDelimited_16
								.writeNext(rowtFileOutputDelimited_16);

						tos_count_tFileOutputDelimited_16++;

						/**
						 * [tFileOutputDelimited_16 main ] stop
						 */

						/**
						 * [tJDBCInput_9 end ] start
						 */

						currentComponent = "tJDBCInput_9";

					}
					rs_tJDBCInput_9.close();
					stmt_tJDBCInput_9.close();

					globalMap.put("tJDBCInput_9_NB_LINE", nb_line_tJDBCInput_9);

					ok_Hash.put("tJDBCInput_9", true);
					end_Hash.put("tJDBCInput_9", System.currentTimeMillis());

					/**
					 * [tJDBCInput_9 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_16 end ] start
					 */

					currentComponent = "tFileOutputDelimited_16";

				} finally {

					if (CsvWritertFileOutputDelimited_16 != null) {
						CsvWritertFileOutputDelimited_16.close();
					}
					globalMap.put("tFileOutputDelimited_16_NB_LINE",
							nb_line_tFileOutputDelimited_16);
				} // finally

				ok_Hash.put("tFileOutputDelimited_16", true);
				end_Hash.put("tFileOutputDelimited_16",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_16 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCInput_9_SUBPROCESS_STATE", 1);
	}

	public void tJava_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_7 begin ] start
				 */

				ok_Hash.put("tJava_7", false);
				start_Hash.put("tJava_7", System.currentTimeMillis());
				currentComponent = "tJava_7";

				int tos_count_tJava_7 = 0;

				StatusListener.setSubStatus(30,
						"Getting Staging Modifier_Dimension...");
				if (context.DB_StagingI2B2_DatabaseType
						.equalsIgnoreCase("oracle"))
					context.currentQuery = "SELECT * FROM "
							+ context.DB_StagingI2B2_Schema
							+ ".modifier_dimension";
				else {
					context.currentQuery = "SELECT * FROM i2b2demodata.modifier_dimension";

				}

				/**
				 * [tJava_7 begin ] stop
				 */
				/**
				 * [tJava_7 main ] start
				 */

				currentComponent = "tJava_7";

				tos_count_tJava_7++;

				/**
				 * [tJava_7 main ] stop
				 */
				/**
				 * [tJava_7 end ] start
				 */

				currentComponent = "tJava_7";

				ok_Hash.put("tJava_7", true);
				end_Hash.put("tJava_7", System.currentTimeMillis());

				/**
				 * [tJava_7 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_7:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCInput_16Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_7_SUBPROCESS_STATE", 1);
	}

	public static class row26Struct implements
			routines.system.IPersistableRow<row26Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String MODIFIER_PATH;

		public String getMODIFIER_PATH() {
			return this.MODIFIER_PATH;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String MODIFIER_BLOB;

		public String getMODIFIER_BLOB() {
			return this.MODIFIER_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.MODIFIER_PATH = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.MODIFIER_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MODIFIER_PATH, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.MODIFIER_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MODIFIER_PATH=" + MODIFIER_PATH);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",MODIFIER_BLOB=" + MODIFIER_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row26Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_16Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row26Struct row26 = new row26Struct();

				/**
				 * [tFileOutputDelimited_23 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_23", false);
				start_Hash.put("tFileOutputDelimited_23",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_23";

				int tos_count_tFileOutputDelimited_23 = 0;

				String fileName_tFileOutputDelimited_23 = "";
				fileName_tFileOutputDelimited_23 = (new java.io.File(
						((String) globalMap
								.get("tCreateTemporaryFile_10_FILEPATH"))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_23 = null;
				String extension_tFileOutputDelimited_23 = null;
				String directory_tFileOutputDelimited_23 = null;
				if ((fileName_tFileOutputDelimited_23.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_23.lastIndexOf(".") < fileName_tFileOutputDelimited_23
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_23 = fileName_tFileOutputDelimited_23;
						extension_tFileOutputDelimited_23 = "";
					} else {
						fullName_tFileOutputDelimited_23 = fileName_tFileOutputDelimited_23
								.substring(0, fileName_tFileOutputDelimited_23
										.lastIndexOf("."));
						extension_tFileOutputDelimited_23 = fileName_tFileOutputDelimited_23
								.substring(fileName_tFileOutputDelimited_23
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_23 = fileName_tFileOutputDelimited_23
							.substring(0, fileName_tFileOutputDelimited_23
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_23.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_23 = fileName_tFileOutputDelimited_23
								.substring(0, fileName_tFileOutputDelimited_23
										.lastIndexOf("."));
						extension_tFileOutputDelimited_23 = fileName_tFileOutputDelimited_23
								.substring(fileName_tFileOutputDelimited_23
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_23 = fileName_tFileOutputDelimited_23;
						extension_tFileOutputDelimited_23 = "";
					}
					directory_tFileOutputDelimited_23 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_23 = true;
				java.io.File filetFileOutputDelimited_23 = new java.io.File(
						fileName_tFileOutputDelimited_23);
				globalMap.put("tFileOutputDelimited_23_FILE_NAME",
						fileName_tFileOutputDelimited_23);

				String[] headColutFileOutputDelimited_23 = new String[9];
				class CSVBasicSet_tFileOutputDelimited_23 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_23[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_23 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_23[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_23[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_23 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_23[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_23[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_23 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_23[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_23 = 0;
				int splitEvery_tFileOutputDelimited_23 = 1000;
				int splitedFileNo_tFileOutputDelimited_23 = 0;
				int currentRow_tFileOutputDelimited_23 = 0;

				CSVBasicSet_tFileOutputDelimited_23 csvSettings_tFileOutputDelimited_23 = new CSVBasicSet_tFileOutputDelimited_23();
				csvSettings_tFileOutputDelimited_23.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_23.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_23.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_23 != null
						&& directory_tFileOutputDelimited_23.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_23 = new java.io.File(
							directory_tFileOutputDelimited_23);
					if (!dir_tFileOutputDelimited_23.exists()) {
						dir_tFileOutputDelimited_23.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_23 = null;
				try {
					CsvWritertFileOutputDelimited_23 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_23,
													false), "UTF-8")));
					CsvWritertFileOutputDelimited_23
							.setSeparator(csvSettings_tFileOutputDelimited_23
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_23
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_23
									.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_23
									.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_23.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_23
										.getRowDelim());
					}

					if (filetFileOutputDelimited_23.length() == 0) {

						headColutFileOutputDelimited_23[0] = "MODIFIER_PATH";

						headColutFileOutputDelimited_23[1] = "MODIFIER_CD";

						headColutFileOutputDelimited_23[2] = "NAME_CHAR";

						headColutFileOutputDelimited_23[3] = "MODIFIER_BLOB";

						headColutFileOutputDelimited_23[4] = "UPDATE_DATE";

						headColutFileOutputDelimited_23[5] = "DOWNLOAD_DATE";

						headColutFileOutputDelimited_23[6] = "IMPORT_DATE";

						headColutFileOutputDelimited_23[7] = "SOURCESYSTEM_CD";

						headColutFileOutputDelimited_23[8] = "UPLOAD_ID";

						CsvWritertFileOutputDelimited_23
								.writeNext(headColutFileOutputDelimited_23);
						CsvWritertFileOutputDelimited_23.flush();

					}

					CsvWritertFileOutputDelimited_23
							.setEscapeChar(csvSettings_tFileOutputDelimited_23
									.getEscapeChar());
					CsvWritertFileOutputDelimited_23
							.setQuoteChar(csvSettings_tFileOutputDelimited_23
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_23
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_23 begin ] stop
					 */

					/**
					 * [tJDBCInput_16 begin ] start
					 */

					ok_Hash.put("tJDBCInput_16", false);
					start_Hash.put("tJDBCInput_16", System.currentTimeMillis());
					currentComponent = "tJDBCInput_16";

					int tos_count_tJDBCInput_16 = 0;

					int nb_line_tJDBCInput_16 = 0;
					java.sql.Connection conn_tJDBCInput_16 = null;
					conn_tJDBCInput_16 = (java.sql.Connection) globalMap
							.get("conn_tJDBCConnection_1");
					if (null == conn_tJDBCInput_16) {
						java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCInput_16 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
								.get(KEY_DB_DATASOURCES);
						conn_tJDBCInput_16 = dataSources_tJDBCInput_16.get("")
								.getConnection();
						// globalMap.put("conn_tJDBCConnection_1",
						// conn_tJDBCInput_16);
					}

					java.sql.Statement stmt_tJDBCInput_16 = conn_tJDBCInput_16
							.createStatement();

					String dbquery_tJDBCInput_16 = context.currentQuery;

					globalMap.put("tJDBCInput_16_QUERY", dbquery_tJDBCInput_16);

					java.sql.ResultSet rs_tJDBCInput_16 = stmt_tJDBCInput_16
							.executeQuery(dbquery_tJDBCInput_16);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_16 = rs_tJDBCInput_16
							.getMetaData();
					int colQtyInRs_tJDBCInput_16 = rsmd_tJDBCInput_16
							.getColumnCount();

					String tmpContent_tJDBCInput_16 = null;
					int column_index_tJDBCInput_16 = 1;
					while (rs_tJDBCInput_16.next()) {
						nb_line_tJDBCInput_16++;

						column_index_tJDBCInput_16 = 1;

						if (colQtyInRs_tJDBCInput_16 < column_index_tJDBCInput_16) {
							row26.MODIFIER_PATH = null;
						} else {

							tmpContent_tJDBCInput_16 = rs_tJDBCInput_16
									.getString(column_index_tJDBCInput_16);
							if (tmpContent_tJDBCInput_16 != null) {
								row26.MODIFIER_PATH = tmpContent_tJDBCInput_16;
							} else {
								row26.MODIFIER_PATH = null;
							}

						}
						column_index_tJDBCInput_16 = 2;

						if (colQtyInRs_tJDBCInput_16 < column_index_tJDBCInput_16) {
							row26.MODIFIER_CD = null;
						} else {

							tmpContent_tJDBCInput_16 = rs_tJDBCInput_16
									.getString(column_index_tJDBCInput_16);
							if (tmpContent_tJDBCInput_16 != null) {
								row26.MODIFIER_CD = tmpContent_tJDBCInput_16;
							} else {
								row26.MODIFIER_CD = null;
							}

						}
						column_index_tJDBCInput_16 = 3;

						if (colQtyInRs_tJDBCInput_16 < column_index_tJDBCInput_16) {
							row26.NAME_CHAR = null;
						} else {

							tmpContent_tJDBCInput_16 = rs_tJDBCInput_16
									.getString(column_index_tJDBCInput_16);
							if (tmpContent_tJDBCInput_16 != null) {
								row26.NAME_CHAR = tmpContent_tJDBCInput_16;
							} else {
								row26.NAME_CHAR = null;
							}

							if (rs_tJDBCInput_16.wasNull()) {
								row26.NAME_CHAR = null;
							}
						}
						column_index_tJDBCInput_16 = 4;

						if (colQtyInRs_tJDBCInput_16 < column_index_tJDBCInput_16) {
							row26.MODIFIER_BLOB = null;
						} else {

							tmpContent_tJDBCInput_16 = rs_tJDBCInput_16
									.getString(column_index_tJDBCInput_16);
							if (tmpContent_tJDBCInput_16 != null) {
								row26.MODIFIER_BLOB = tmpContent_tJDBCInput_16;
							} else {
								row26.MODIFIER_BLOB = null;
							}

							if (rs_tJDBCInput_16.wasNull()) {
								row26.MODIFIER_BLOB = null;
							}
						}
						column_index_tJDBCInput_16 = 5;

						if (colQtyInRs_tJDBCInput_16 < column_index_tJDBCInput_16) {
							row26.UPDATE_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_16 = null;
							try {
								date_tJDBCInput_16 = rs_tJDBCInput_16
										.getTimestamp(column_index_tJDBCInput_16);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_16 = rs_tJDBCInput_16
										.getDate(column_index_tJDBCInput_16);
							}
							row26.UPDATE_DATE = date_tJDBCInput_16;

							if (rs_tJDBCInput_16.wasNull()) {
								row26.UPDATE_DATE = null;
							}
						}
						column_index_tJDBCInput_16 = 6;

						if (colQtyInRs_tJDBCInput_16 < column_index_tJDBCInput_16) {
							row26.DOWNLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_16 = null;
							try {
								date_tJDBCInput_16 = rs_tJDBCInput_16
										.getTimestamp(column_index_tJDBCInput_16);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_16 = rs_tJDBCInput_16
										.getDate(column_index_tJDBCInput_16);
							}
							row26.DOWNLOAD_DATE = date_tJDBCInput_16;

							if (rs_tJDBCInput_16.wasNull()) {
								row26.DOWNLOAD_DATE = null;
							}
						}
						column_index_tJDBCInput_16 = 7;

						if (colQtyInRs_tJDBCInput_16 < column_index_tJDBCInput_16) {
							row26.IMPORT_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_16 = null;
							try {
								date_tJDBCInput_16 = rs_tJDBCInput_16
										.getTimestamp(column_index_tJDBCInput_16);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_16 = rs_tJDBCInput_16
										.getDate(column_index_tJDBCInput_16);
							}
							row26.IMPORT_DATE = date_tJDBCInput_16;

							if (rs_tJDBCInput_16.wasNull()) {
								row26.IMPORT_DATE = null;
							}
						}
						column_index_tJDBCInput_16 = 8;

						if (colQtyInRs_tJDBCInput_16 < column_index_tJDBCInput_16) {
							row26.SOURCESYSTEM_CD = null;
						} else {

							tmpContent_tJDBCInput_16 = rs_tJDBCInput_16
									.getString(column_index_tJDBCInput_16);
							if (tmpContent_tJDBCInput_16 != null) {
								row26.SOURCESYSTEM_CD = tmpContent_tJDBCInput_16;
							} else {
								row26.SOURCESYSTEM_CD = null;
							}

							if (rs_tJDBCInput_16.wasNull()) {
								row26.SOURCESYSTEM_CD = null;
							}
						}
						column_index_tJDBCInput_16 = 9;

						if (colQtyInRs_tJDBCInput_16 < column_index_tJDBCInput_16) {
							row26.UPLOAD_ID = null;
						} else {

							tmpContent_tJDBCInput_16 = rs_tJDBCInput_16
									.getString(column_index_tJDBCInput_16);
							if (tmpContent_tJDBCInput_16 != null) {
								row26.UPLOAD_ID = tmpContent_tJDBCInput_16;
							} else {
								row26.UPLOAD_ID = null;
							}

							if (rs_tJDBCInput_16.wasNull()) {
								row26.UPLOAD_ID = null;
							}
						}

						/**
						 * [tJDBCInput_16 begin ] stop
						 */
						/**
						 * [tJDBCInput_16 main ] start
						 */

						currentComponent = "tJDBCInput_16";

						tos_count_tJDBCInput_16++;

						/**
						 * [tJDBCInput_16 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_23 main ] start
						 */

						currentComponent = "tFileOutputDelimited_23";

						String[] rowtFileOutputDelimited_23 = new String[9];

						rowtFileOutputDelimited_23[0] = row26.MODIFIER_PATH == null ? ""
								: row26.MODIFIER_PATH;

						rowtFileOutputDelimited_23[1] = row26.MODIFIER_CD == null ? ""
								: row26.MODIFIER_CD;

						rowtFileOutputDelimited_23[2] = row26.NAME_CHAR == null ? ""
								: row26.NAME_CHAR;

						rowtFileOutputDelimited_23[3] = row26.MODIFIER_BLOB == null ? ""
								: row26.MODIFIER_BLOB;

						rowtFileOutputDelimited_23[4] = row26.UPDATE_DATE == null ? ""
								: FormatterUtils.format_Date(row26.UPDATE_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_23[5] = row26.DOWNLOAD_DATE == null ? ""
								: FormatterUtils.format_Date(
										row26.DOWNLOAD_DATE, "dd-MM-yyyy");

						rowtFileOutputDelimited_23[6] = row26.IMPORT_DATE == null ? ""
								: FormatterUtils.format_Date(row26.IMPORT_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_23[7] = row26.SOURCESYSTEM_CD == null ? ""
								: row26.SOURCESYSTEM_CD;

						rowtFileOutputDelimited_23[8] = row26.UPLOAD_ID == null ? ""
								: row26.UPLOAD_ID;

						nb_line_tFileOutputDelimited_23++;
						CsvWritertFileOutputDelimited_23
								.writeNext(rowtFileOutputDelimited_23);

						tos_count_tFileOutputDelimited_23++;

						/**
						 * [tFileOutputDelimited_23 main ] stop
						 */

						/**
						 * [tJDBCInput_16 end ] start
						 */

						currentComponent = "tJDBCInput_16";

					}
					rs_tJDBCInput_16.close();
					stmt_tJDBCInput_16.close();

					globalMap.put("tJDBCInput_16_NB_LINE",
							nb_line_tJDBCInput_16);

					ok_Hash.put("tJDBCInput_16", true);
					end_Hash.put("tJDBCInput_16", System.currentTimeMillis());

					/**
					 * [tJDBCInput_16 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_23 end ] start
					 */

					currentComponent = "tFileOutputDelimited_23";

				} finally {

					if (CsvWritertFileOutputDelimited_23 != null) {
						CsvWritertFileOutputDelimited_23.close();
					}
					globalMap.put("tFileOutputDelimited_23_NB_LINE",
							nb_line_tFileOutputDelimited_23);
				} // finally

				ok_Hash.put("tFileOutputDelimited_23", true);
				end_Hash.put("tFileOutputDelimited_23",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_23 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCInput_16_SUBPROCESS_STATE", 1);
	}

	public void tJava_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_3 begin ] start
				 */

				ok_Hash.put("tJava_3", false);
				start_Hash.put("tJava_3", System.currentTimeMillis());
				currentComponent = "tJava_3";

				int tos_count_tJava_3 = 0;

				StatusListener.setSubStatus(40,
						"Getting Staging Observation_Fact...");
				if (context.DB_StagingI2B2_DatabaseType
						.equalsIgnoreCase("oracle"))
					context.currentQuery = "Select * from "
							+ context.DB_StagingI2B2_Schema
							+ ".observation_fact";
				else {
					context.currentQuery = "Select * from i2b2demodata.observation_fact";

				}

				/**
				 * [tJava_3 begin ] stop
				 */
				/**
				 * [tJava_3 main ] start
				 */

				currentComponent = "tJava_3";

				tos_count_tJava_3++;

				/**
				 * [tJava_3 main ] stop
				 */
				/**
				 * [tJava_3 end ] start
				 */

				currentComponent = "tJava_3";

				ok_Hash.put("tJava_3", true);
				end_Hash.put("tJava_3", System.currentTimeMillis());

				/**
				 * [tJava_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_3:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCInput_8Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}

	public static class row20Struct implements
			routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readDate(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readDate(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_8Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row20Struct row20 = new row20Struct();

				/**
				 * [tFileOutputDelimited_15 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_15", false);
				start_Hash.put("tFileOutputDelimited_15",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_15";

				int tos_count_tFileOutputDelimited_15 = 0;

				String fileName_tFileOutputDelimited_15 = "";
				fileName_tFileOutputDelimited_15 = (new java.io.File(
						((String) globalMap
								.get("tCreateTemporaryFile_3_FILEPATH"))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_15 = null;
				String extension_tFileOutputDelimited_15 = null;
				String directory_tFileOutputDelimited_15 = null;
				if ((fileName_tFileOutputDelimited_15.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_15.lastIndexOf(".") < fileName_tFileOutputDelimited_15
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15;
						extension_tFileOutputDelimited_15 = "";
					} else {
						fullName_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15
								.substring(0, fileName_tFileOutputDelimited_15
										.lastIndexOf("."));
						extension_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15
								.substring(fileName_tFileOutputDelimited_15
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15
							.substring(0, fileName_tFileOutputDelimited_15
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_15.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15
								.substring(0, fileName_tFileOutputDelimited_15
										.lastIndexOf("."));
						extension_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15
								.substring(fileName_tFileOutputDelimited_15
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15;
						extension_tFileOutputDelimited_15 = "";
					}
					directory_tFileOutputDelimited_15 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_15 = true;
				java.io.File filetFileOutputDelimited_15 = new java.io.File(
						fileName_tFileOutputDelimited_15);
				globalMap.put("tFileOutputDelimited_15_FILE_NAME",
						fileName_tFileOutputDelimited_15);

				String[] headColutFileOutputDelimited_15 = new String[22];
				class CSVBasicSet_tFileOutputDelimited_15 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_15[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_15 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_15[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_15[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_15 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_15[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_15[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_15 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_15[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_15 = 0;
				int splitEvery_tFileOutputDelimited_15 = 1000;
				int splitedFileNo_tFileOutputDelimited_15 = 0;
				int currentRow_tFileOutputDelimited_15 = 0;

				CSVBasicSet_tFileOutputDelimited_15 csvSettings_tFileOutputDelimited_15 = new CSVBasicSet_tFileOutputDelimited_15();
				csvSettings_tFileOutputDelimited_15.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_15.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_15.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_15 != null
						&& directory_tFileOutputDelimited_15.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_15 = new java.io.File(
							directory_tFileOutputDelimited_15);
					if (!dir_tFileOutputDelimited_15.exists()) {
						dir_tFileOutputDelimited_15.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_15 = null;
				try {
					CsvWritertFileOutputDelimited_15 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_15,
													false), "UTF-8")));
					CsvWritertFileOutputDelimited_15
							.setSeparator(csvSettings_tFileOutputDelimited_15
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_15
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_15
									.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_15
									.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_15.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_15
										.getRowDelim());
					}

					CsvWritertFileOutputDelimited_15
							.setEscapeChar(csvSettings_tFileOutputDelimited_15
									.getEscapeChar());
					CsvWritertFileOutputDelimited_15
							.setQuoteChar(csvSettings_tFileOutputDelimited_15
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_15
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_15 begin ] stop
					 */

					/**
					 * [tJDBCInput_8 begin ] start
					 */

					ok_Hash.put("tJDBCInput_8", false);
					start_Hash.put("tJDBCInput_8", System.currentTimeMillis());
					currentComponent = "tJDBCInput_8";

					int tos_count_tJDBCInput_8 = 0;

					int nb_line_tJDBCInput_8 = 0;
					java.sql.Connection conn_tJDBCInput_8 = null;
					conn_tJDBCInput_8 = (java.sql.Connection) globalMap
							.get("conn_tJDBCConnection_1");
					if (null == conn_tJDBCInput_8) {
						java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCInput_8 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
								.get(KEY_DB_DATASOURCES);
						conn_tJDBCInput_8 = dataSources_tJDBCInput_8.get("")
								.getConnection();
						// globalMap.put("conn_tJDBCConnection_1",
						// conn_tJDBCInput_8);
					}

					java.sql.Statement stmt_tJDBCInput_8 = conn_tJDBCInput_8
							.createStatement();

					String dbquery_tJDBCInput_8 = context.currentQuery;

					globalMap.put("tJDBCInput_8_QUERY", dbquery_tJDBCInput_8);

					java.sql.ResultSet rs_tJDBCInput_8 = stmt_tJDBCInput_8
							.executeQuery(dbquery_tJDBCInput_8);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_8 = rs_tJDBCInput_8
							.getMetaData();
					int colQtyInRs_tJDBCInput_8 = rsmd_tJDBCInput_8
							.getColumnCount();

					String tmpContent_tJDBCInput_8 = null;
					int column_index_tJDBCInput_8 = 1;
					while (rs_tJDBCInput_8.next()) {
						nb_line_tJDBCInput_8++;

						column_index_tJDBCInput_8 = 1;

						if (colQtyInRs_tJDBCInput_8 < column_index_tJDBCInput_8) {
							row20.ENCOUNTER_NUM = null;
						} else {

							if (rs_tJDBCInput_8
									.getObject(column_index_tJDBCInput_8) != null) {
								row20.ENCOUNTER_NUM = rs_tJDBCInput_8
										.getBigDecimal(column_index_tJDBCInput_8);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}
						column_index_tJDBCInput_8 = 2;

						if (colQtyInRs_tJDBCInput_8 < column_index_tJDBCInput_8) {
							row20.PATIENT_NUM = null;
						} else {

							if (rs_tJDBCInput_8
									.getObject(column_index_tJDBCInput_8) != null) {
								row20.PATIENT_NUM = rs_tJDBCInput_8
										.getBigDecimal(column_index_tJDBCInput_8);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}
						column_index_tJDBCInput_8 = 3;

						if (colQtyInRs_tJDBCInput_8 < column_index_tJDBCInput_8) {
							row20.CONCEPT_CD = null;
						} else {

							tmpContent_tJDBCInput_8 = rs_tJDBCInput_8
									.getString(column_index_tJDBCInput_8);
							if (tmpContent_tJDBCInput_8 != null) {
								row20.CONCEPT_CD = tmpContent_tJDBCInput_8;
							} else {
								row20.CONCEPT_CD = null;
							}

						}
						column_index_tJDBCInput_8 = 4;

						if (colQtyInRs_tJDBCInput_8 < column_index_tJDBCInput_8) {
							row20.PROVIDER_ID = null;
						} else {

							tmpContent_tJDBCInput_8 = rs_tJDBCInput_8
									.getString(column_index_tJDBCInput_8);
							if (tmpContent_tJDBCInput_8 != null) {
								row20.PROVIDER_ID = tmpContent_tJDBCInput_8;
							} else {
								row20.PROVIDER_ID = null;
							}

						}
						column_index_tJDBCInput_8 = 5;

						if (colQtyInRs_tJDBCInput_8 < column_index_tJDBCInput_8) {
							row20.START_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_8 = null;
							try {
								date_tJDBCInput_8 = rs_tJDBCInput_8
										.getTimestamp(column_index_tJDBCInput_8);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_8 = rs_tJDBCInput_8
										.getDate(column_index_tJDBCInput_8);
							}
							row20.START_DATE = date_tJDBCInput_8;

						}
						column_index_tJDBCInput_8 = 6;

						if (colQtyInRs_tJDBCInput_8 < column_index_tJDBCInput_8) {
							row20.MODIFIER_CD = null;
						} else {

							tmpContent_tJDBCInput_8 = rs_tJDBCInput_8
									.getString(column_index_tJDBCInput_8);
							if (tmpContent_tJDBCInput_8 != null) {
								row20.MODIFIER_CD = tmpContent_tJDBCInput_8;
							} else {
								row20.MODIFIER_CD = null;
							}

						}
						column_index_tJDBCInput_8 = 7;

						if (colQtyInRs_tJDBCInput_8 < column_index_tJDBCInput_8) {
							row20.INSTANCE_NUM = null;
						} else {

							tmpContent_tJDBCInput_8 = rs_tJDBCInput_8
									.getString(column_index_tJDBCInput_8);
							if (tmpContent_tJDBCInput_8 != null) {
								row20.INSTANCE_NUM = tmpContent_tJDBCInput_8;
							} else {
								row20.INSTANCE_NUM = null;
							}

						}
						column_index_tJDBCInput_8 = 8;

						if (colQtyInRs_tJDBCInput_8 < column_index_tJDBCInput_8) {
							row20.VALTYPE_CD = null;
						} else {

							tmpContent_tJDBCInput_8 = rs_tJDBCInput_8
									.getString(column_index_tJDBCInput_8);
							if (tmpContent_tJDBCInput_8 != null) {
								row20.VALTYPE_CD = tmpContent_tJDBCInput_8;
							} else {
								row20.VALTYPE_CD = null;
							}

							if (rs_tJDBCInput_8.wasNull()) {
								row20.VALTYPE_CD = null;
							}
						}
						column_index_tJDBCInput_8 = 9;

						if (colQtyInRs_tJDBCInput_8 < column_index_tJDBCInput_8) {
							row20.TVAL_CHAR = null;
						} else {

							tmpContent_tJDBCInput_8 = rs_tJDBCInput_8
									.getString(column_index_tJDBCInput_8);
							if (tmpContent_tJDBCInput_8 != null) {
								row20.TVAL_CHAR = tmpContent_tJDBCInput_8;
							} else {
								row20.TVAL_CHAR = null;
							}

							if (rs_tJDBCInput_8.wasNull()) {
								row20.TVAL_CHAR = null;
							}
						}
						column_index_tJDBCInput_8 = 10;

						if (colQtyInRs_tJDBCInput_8 < column_index_tJDBCInput_8) {
							row20.NVAL_NUM = null;
						} else {

							if (rs_tJDBCInput_8
									.getObject(column_index_tJDBCInput_8) != null) {
								row20.NVAL_NUM = rs_tJDBCInput_8
										.getFloat(column_index_tJDBCInput_8);
							} else {
								row20.NVAL_NUM = null;
							}

							if (rs_tJDBCInput_8.wasNull()) {
								row20.NVAL_NUM = null;
							}
						}
						column_index_tJDBCInput_8 = 11;

						if (colQtyInRs_tJDBCInput_8 < column_index_tJDBCInput_8) {
							row20.VALUEFLAG_CD = null;
						} else {

							tmpContent_tJDBCInput_8 = rs_tJDBCInput_8
									.getString(column_index_tJDBCInput_8);
							if (tmpContent_tJDBCInput_8 != null) {
								row20.VALUEFLAG_CD = tmpContent_tJDBCInput_8;
							} else {
								row20.VALUEFLAG_CD = null;
							}

							if (rs_tJDBCInput_8.wasNull()) {
								row20.VALUEFLAG_CD = null;
							}
						}
						column_index_tJDBCInput_8 = 12;

						if (colQtyInRs_tJDBCInput_8 < column_index_tJDBCInput_8) {
							row20.QUANTITY_NUM = null;
						} else {

							tmpContent_tJDBCInput_8 = rs_tJDBCInput_8
									.getString(column_index_tJDBCInput_8);
							if (tmpContent_tJDBCInput_8 != null) {
								row20.QUANTITY_NUM = tmpContent_tJDBCInput_8;
							} else {
								row20.QUANTITY_NUM = null;
							}

							if (rs_tJDBCInput_8.wasNull()) {
								row20.QUANTITY_NUM = null;
							}
						}
						column_index_tJDBCInput_8 = 13;

						if (colQtyInRs_tJDBCInput_8 < column_index_tJDBCInput_8) {
							row20.UNITS_CD = null;
						} else {

							tmpContent_tJDBCInput_8 = rs_tJDBCInput_8
									.getString(column_index_tJDBCInput_8);
							if (tmpContent_tJDBCInput_8 != null) {
								row20.UNITS_CD = tmpContent_tJDBCInput_8;
							} else {
								row20.UNITS_CD = null;
							}

							if (rs_tJDBCInput_8.wasNull()) {
								row20.UNITS_CD = null;
							}
						}
						column_index_tJDBCInput_8 = 14;

						if (colQtyInRs_tJDBCInput_8 < column_index_tJDBCInput_8) {
							row20.END_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_8 = null;
							try {
								date_tJDBCInput_8 = rs_tJDBCInput_8
										.getTimestamp(column_index_tJDBCInput_8);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_8 = rs_tJDBCInput_8
										.getDate(column_index_tJDBCInput_8);
							}
							row20.END_DATE = date_tJDBCInput_8;

							if (rs_tJDBCInput_8.wasNull()) {
								row20.END_DATE = null;
							}
						}
						column_index_tJDBCInput_8 = 15;

						if (colQtyInRs_tJDBCInput_8 < column_index_tJDBCInput_8) {
							row20.LOCATION_CD = null;
						} else {

							tmpContent_tJDBCInput_8 = rs_tJDBCInput_8
									.getString(column_index_tJDBCInput_8);
							if (tmpContent_tJDBCInput_8 != null) {
								row20.LOCATION_CD = tmpContent_tJDBCInput_8;
							} else {
								row20.LOCATION_CD = null;
							}

							if (rs_tJDBCInput_8.wasNull()) {
								row20.LOCATION_CD = null;
							}
						}
						column_index_tJDBCInput_8 = 16;

						if (colQtyInRs_tJDBCInput_8 < column_index_tJDBCInput_8) {
							row20.OBSERVATION_BLOB = null;
						} else {

							tmpContent_tJDBCInput_8 = rs_tJDBCInput_8
									.getString(column_index_tJDBCInput_8);
							if (tmpContent_tJDBCInput_8 != null) {
								row20.OBSERVATION_BLOB = tmpContent_tJDBCInput_8;
							} else {
								row20.OBSERVATION_BLOB = null;
							}

							if (rs_tJDBCInput_8.wasNull()) {
								row20.OBSERVATION_BLOB = null;
							}
						}
						column_index_tJDBCInput_8 = 17;

						if (colQtyInRs_tJDBCInput_8 < column_index_tJDBCInput_8) {
							row20.CONFIDENCE_NUM = null;
						} else {

							tmpContent_tJDBCInput_8 = rs_tJDBCInput_8
									.getString(column_index_tJDBCInput_8);
							if (tmpContent_tJDBCInput_8 != null) {
								row20.CONFIDENCE_NUM = tmpContent_tJDBCInput_8;
							} else {
								row20.CONFIDENCE_NUM = null;
							}

							if (rs_tJDBCInput_8.wasNull()) {
								row20.CONFIDENCE_NUM = null;
							}
						}
						column_index_tJDBCInput_8 = 18;

						if (colQtyInRs_tJDBCInput_8 < column_index_tJDBCInput_8) {
							row20.UPDATE_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_8 = null;
							try {
								date_tJDBCInput_8 = rs_tJDBCInput_8
										.getTimestamp(column_index_tJDBCInput_8);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_8 = rs_tJDBCInput_8
										.getDate(column_index_tJDBCInput_8);
							}
							row20.UPDATE_DATE = date_tJDBCInput_8;

							if (rs_tJDBCInput_8.wasNull()) {
								row20.UPDATE_DATE = null;
							}
						}
						column_index_tJDBCInput_8 = 19;

						if (colQtyInRs_tJDBCInput_8 < column_index_tJDBCInput_8) {
							row20.DOWNLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_8 = null;
							try {
								date_tJDBCInput_8 = rs_tJDBCInput_8
										.getTimestamp(column_index_tJDBCInput_8);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_8 = rs_tJDBCInput_8
										.getDate(column_index_tJDBCInput_8);
							}
							row20.DOWNLOAD_DATE = date_tJDBCInput_8;

							if (rs_tJDBCInput_8.wasNull()) {
								row20.DOWNLOAD_DATE = null;
							}
						}
						column_index_tJDBCInput_8 = 20;

						if (colQtyInRs_tJDBCInput_8 < column_index_tJDBCInput_8) {
							row20.IMPORT_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_8 = null;
							try {
								date_tJDBCInput_8 = rs_tJDBCInput_8
										.getTimestamp(column_index_tJDBCInput_8);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_8 = rs_tJDBCInput_8
										.getDate(column_index_tJDBCInput_8);
							}
							row20.IMPORT_DATE = date_tJDBCInput_8;

							if (rs_tJDBCInput_8.wasNull()) {
								row20.IMPORT_DATE = null;
							}
						}
						column_index_tJDBCInput_8 = 21;

						if (colQtyInRs_tJDBCInput_8 < column_index_tJDBCInput_8) {
							row20.SOURCESYSTEM_CD = null;
						} else {

							tmpContent_tJDBCInput_8 = rs_tJDBCInput_8
									.getString(column_index_tJDBCInput_8);
							if (tmpContent_tJDBCInput_8 != null) {
								row20.SOURCESYSTEM_CD = tmpContent_tJDBCInput_8;
							} else {
								row20.SOURCESYSTEM_CD = null;
							}

							if (rs_tJDBCInput_8.wasNull()) {
								row20.SOURCESYSTEM_CD = null;
							}
						}
						column_index_tJDBCInput_8 = 22;

						if (colQtyInRs_tJDBCInput_8 < column_index_tJDBCInput_8) {
							row20.UPLOAD_ID = null;
						} else {

							tmpContent_tJDBCInput_8 = rs_tJDBCInput_8
									.getString(column_index_tJDBCInput_8);
							if (tmpContent_tJDBCInput_8 != null) {
								row20.UPLOAD_ID = tmpContent_tJDBCInput_8;
							} else {
								row20.UPLOAD_ID = null;
							}

							if (rs_tJDBCInput_8.wasNull()) {
								row20.UPLOAD_ID = null;
							}
						}

						/**
						 * [tJDBCInput_8 begin ] stop
						 */
						/**
						 * [tJDBCInput_8 main ] start
						 */

						currentComponent = "tJDBCInput_8";

						tos_count_tJDBCInput_8++;

						/**
						 * [tJDBCInput_8 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_15 main ] start
						 */

						currentComponent = "tFileOutputDelimited_15";

						String[] rowtFileOutputDelimited_15 = new String[22];

						rowtFileOutputDelimited_15[0] = row20.ENCOUNTER_NUM == null ? ""
								: row20.ENCOUNTER_NUM.toPlainString();

						rowtFileOutputDelimited_15[1] = row20.PATIENT_NUM == null ? ""
								: row20.PATIENT_NUM.toPlainString();

						rowtFileOutputDelimited_15[2] = row20.CONCEPT_CD == null ? ""
								: row20.CONCEPT_CD;

						rowtFileOutputDelimited_15[3] = row20.PROVIDER_ID == null ? ""
								: row20.PROVIDER_ID;

						rowtFileOutputDelimited_15[4] = row20.START_DATE == null ? ""
								: FormatterUtils.format_Date(row20.START_DATE,
										"yyyy-MM-dd");

						rowtFileOutputDelimited_15[5] = row20.MODIFIER_CD == null ? ""
								: row20.MODIFIER_CD;

						rowtFileOutputDelimited_15[6] = row20.INSTANCE_NUM == null ? ""
								: row20.INSTANCE_NUM;

						rowtFileOutputDelimited_15[7] = row20.VALTYPE_CD == null ? ""
								: row20.VALTYPE_CD;

						rowtFileOutputDelimited_15[8] = row20.TVAL_CHAR == null ? ""
								: row20.TVAL_CHAR;

						rowtFileOutputDelimited_15[9] = row20.NVAL_NUM == null ? ""
								: String.valueOf(row20.NVAL_NUM);

						rowtFileOutputDelimited_15[10] = row20.VALUEFLAG_CD == null ? ""
								: row20.VALUEFLAG_CD;

						rowtFileOutputDelimited_15[11] = row20.QUANTITY_NUM == null ? ""
								: row20.QUANTITY_NUM;

						rowtFileOutputDelimited_15[12] = row20.UNITS_CD == null ? ""
								: row20.UNITS_CD;

						rowtFileOutputDelimited_15[13] = row20.END_DATE == null ? ""
								: FormatterUtils.format_Date(row20.END_DATE,
										"yyyy-MM-dd");

						rowtFileOutputDelimited_15[14] = row20.LOCATION_CD == null ? ""
								: row20.LOCATION_CD;

						rowtFileOutputDelimited_15[15] = row20.OBSERVATION_BLOB == null ? ""
								: row20.OBSERVATION_BLOB;

						rowtFileOutputDelimited_15[16] = row20.CONFIDENCE_NUM == null ? ""
								: row20.CONFIDENCE_NUM;

						rowtFileOutputDelimited_15[17] = row20.UPDATE_DATE == null ? ""
								: FormatterUtils.format_Date(row20.UPDATE_DATE,
										"yyyy-MM-dd");

						rowtFileOutputDelimited_15[18] = row20.DOWNLOAD_DATE == null ? ""
								: FormatterUtils.format_Date(
										row20.DOWNLOAD_DATE, "yyyy-MM-dd");

						rowtFileOutputDelimited_15[19] = row20.IMPORT_DATE == null ? ""
								: FormatterUtils.format_Date(row20.IMPORT_DATE,
										"yyyy-MM-dd");

						rowtFileOutputDelimited_15[20] = row20.SOURCESYSTEM_CD == null ? ""
								: row20.SOURCESYSTEM_CD;

						rowtFileOutputDelimited_15[21] = row20.UPLOAD_ID == null ? ""
								: row20.UPLOAD_ID;

						nb_line_tFileOutputDelimited_15++;
						CsvWritertFileOutputDelimited_15
								.writeNext(rowtFileOutputDelimited_15);

						tos_count_tFileOutputDelimited_15++;

						/**
						 * [tFileOutputDelimited_15 main ] stop
						 */

						/**
						 * [tJDBCInput_8 end ] start
						 */

						currentComponent = "tJDBCInput_8";

					}
					rs_tJDBCInput_8.close();
					stmt_tJDBCInput_8.close();

					globalMap.put("tJDBCInput_8_NB_LINE", nb_line_tJDBCInput_8);

					ok_Hash.put("tJDBCInput_8", true);
					end_Hash.put("tJDBCInput_8", System.currentTimeMillis());

					/**
					 * [tJDBCInput_8 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_15 end ] start
					 */

					currentComponent = "tFileOutputDelimited_15";

				} finally {

					if (CsvWritertFileOutputDelimited_15 != null) {
						CsvWritertFileOutputDelimited_15.close();
					}
					globalMap.put("tFileOutputDelimited_15_NB_LINE",
							nb_line_tFileOutputDelimited_15);
				} // finally

				ok_Hash.put("tFileOutputDelimited_15", true);
				end_Hash.put("tFileOutputDelimited_15",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_15 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCInput_8_SUBPROCESS_STATE", 1);
	}

	public void tJava_8Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_8 begin ] start
				 */

				ok_Hash.put("tJava_8", false);
				start_Hash.put("tJava_8", System.currentTimeMillis());
				currentComponent = "tJava_8";

				int tos_count_tJava_8 = 0;

				StatusListener.setSubStatus(50,
						"Getting Staging Observation_Fact...");

				/**
				 * [tJava_8 begin ] stop
				 */
				/**
				 * [tJava_8 main ] start
				 */

				currentComponent = "tJava_8";

				tos_count_tJava_8++;

				/**
				 * [tJava_8 main ] stop
				 */
				/**
				 * [tJava_8 end ] start
				 */

				currentComponent = "tJava_8";

				ok_Hash.put("tJava_8", true);
				end_Hash.put("tJava_8", System.currentTimeMillis());

				/**
				 * [tJava_8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_8_SUBPROCESS_STATE", 1);
	}

	public void tJava_9Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_9 begin ] start
				 */

				ok_Hash.put("tJava_9", false);
				start_Hash.put("tJava_9", System.currentTimeMillis());
				currentComponent = "tJava_9";

				int tos_count_tJava_9 = 0;

				StatusListener.setSubStatus(60,
						"Getting Staging Patient_Mapping...");
				if (context.DB_StagingI2B2_DatabaseType
						.equalsIgnoreCase("oracle"))
					context.currentQuery = "SELECT * FROM  "
							+ context.DB_StagingI2B2_Schema
							+ ".patient_mapping ";
				else {
					context.currentQuery = "SELECT * FROM  i2b2demodata.patient_mapping ";

				}

				/**
				 * [tJava_9 begin ] stop
				 */
				/**
				 * [tJava_9 main ] start
				 */

				currentComponent = "tJava_9";

				tos_count_tJava_9++;

				/**
				 * [tJava_9 main ] stop
				 */
				/**
				 * [tJava_9 end ] start
				 */

				currentComponent = "tJava_9";

				ok_Hash.put("tJava_9", true);
				end_Hash.put("tJava_9", System.currentTimeMillis());

				/**
				 * [tJava_9 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_9:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCInput_5Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_9_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.PATIENT_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tFileOutputDelimited_8 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_8", false);
				start_Hash.put("tFileOutputDelimited_8",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_8";

				int tos_count_tFileOutputDelimited_8 = 0;

				String fileName_tFileOutputDelimited_8 = "";
				fileName_tFileOutputDelimited_8 = (new java.io.File(
						((String) globalMap
								.get("tCreateTemporaryFile_5_FILEPATH"))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_8 = null;
				String extension_tFileOutputDelimited_8 = null;
				String directory_tFileOutputDelimited_8 = null;
				if ((fileName_tFileOutputDelimited_8.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_8.lastIndexOf(".") < fileName_tFileOutputDelimited_8
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
						extension_tFileOutputDelimited_8 = "";
					} else {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
								.substring(0, fileName_tFileOutputDelimited_8
										.lastIndexOf("."));
						extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
								.substring(fileName_tFileOutputDelimited_8
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
							.substring(0, fileName_tFileOutputDelimited_8
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_8.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
								.substring(0, fileName_tFileOutputDelimited_8
										.lastIndexOf("."));
						extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
								.substring(fileName_tFileOutputDelimited_8
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
						extension_tFileOutputDelimited_8 = "";
					}
					directory_tFileOutputDelimited_8 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_8 = true;
				java.io.File filetFileOutputDelimited_8 = new java.io.File(
						fileName_tFileOutputDelimited_8);
				globalMap.put("tFileOutputDelimited_8_FILE_NAME",
						fileName_tFileOutputDelimited_8);

				String[] headColutFileOutputDelimited_8 = new String[10];
				class CSVBasicSet_tFileOutputDelimited_8 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_8[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_8 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_8[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_8[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_8 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_8[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_8[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_8 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_8[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_8 = 0;
				int splitEvery_tFileOutputDelimited_8 = 1000;
				int splitedFileNo_tFileOutputDelimited_8 = 0;
				int currentRow_tFileOutputDelimited_8 = 0;

				CSVBasicSet_tFileOutputDelimited_8 csvSettings_tFileOutputDelimited_8 = new CSVBasicSet_tFileOutputDelimited_8();
				csvSettings_tFileOutputDelimited_8.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_8.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_8.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_8 != null
						&& directory_tFileOutputDelimited_8.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_8 = new java.io.File(
							directory_tFileOutputDelimited_8);
					if (!dir_tFileOutputDelimited_8.exists()) {
						dir_tFileOutputDelimited_8.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_8 = null;
				try {
					CsvWritertFileOutputDelimited_8 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_8,
													false), "UTF-8")));
					CsvWritertFileOutputDelimited_8
							.setSeparator(csvSettings_tFileOutputDelimited_8
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_8
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_8.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_8.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_8.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_8
										.getRowDelim());
					}

					if (filetFileOutputDelimited_8.length() == 0) {

						headColutFileOutputDelimited_8[0] = "PATIENT_IDE";

						headColutFileOutputDelimited_8[1] = "PATIENT_IDE_SOURCE";

						headColutFileOutputDelimited_8[2] = "PATIENT_NUM";

						headColutFileOutputDelimited_8[3] = "PATIENT_IDE_STATUS";

						headColutFileOutputDelimited_8[4] = "UPLOAD_DATE";

						headColutFileOutputDelimited_8[5] = "UPDATE_DATE";

						headColutFileOutputDelimited_8[6] = "DOWNLOAD_DATE";

						headColutFileOutputDelimited_8[7] = "IMPORT_DATE";

						headColutFileOutputDelimited_8[8] = "SOURCESYSTEM_CD";

						headColutFileOutputDelimited_8[9] = "UPLOAD_ID";

						CsvWritertFileOutputDelimited_8
								.writeNext(headColutFileOutputDelimited_8);
						CsvWritertFileOutputDelimited_8.flush();

					}

					CsvWritertFileOutputDelimited_8
							.setEscapeChar(csvSettings_tFileOutputDelimited_8
									.getEscapeChar());
					CsvWritertFileOutputDelimited_8
							.setQuoteChar(csvSettings_tFileOutputDelimited_8
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_8
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_8 begin ] stop
					 */

					/**
					 * [tJDBCInput_5 begin ] start
					 */

					ok_Hash.put("tJDBCInput_5", false);
					start_Hash.put("tJDBCInput_5", System.currentTimeMillis());
					currentComponent = "tJDBCInput_5";

					int tos_count_tJDBCInput_5 = 0;

					int nb_line_tJDBCInput_5 = 0;
					java.sql.Connection conn_tJDBCInput_5 = null;
					conn_tJDBCInput_5 = (java.sql.Connection) globalMap
							.get("conn_tJDBCConnection_1");
					if (null == conn_tJDBCInput_5) {
						java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCInput_5 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
								.get(KEY_DB_DATASOURCES);
						conn_tJDBCInput_5 = dataSources_tJDBCInput_5.get("")
								.getConnection();
						// globalMap.put("conn_tJDBCConnection_1",
						// conn_tJDBCInput_5);
					}

					java.sql.Statement stmt_tJDBCInput_5 = conn_tJDBCInput_5
							.createStatement();

					String dbquery_tJDBCInput_5 = context.currentQuery;

					globalMap.put("tJDBCInput_5_QUERY", dbquery_tJDBCInput_5);

					java.sql.ResultSet rs_tJDBCInput_5 = stmt_tJDBCInput_5
							.executeQuery(dbquery_tJDBCInput_5);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_5 = rs_tJDBCInput_5
							.getMetaData();
					int colQtyInRs_tJDBCInput_5 = rsmd_tJDBCInput_5
							.getColumnCount();

					String tmpContent_tJDBCInput_5 = null;
					int column_index_tJDBCInput_5 = 1;
					while (rs_tJDBCInput_5.next()) {
						nb_line_tJDBCInput_5++;

						column_index_tJDBCInput_5 = 1;

						if (colQtyInRs_tJDBCInput_5 < column_index_tJDBCInput_5) {
							row7.PATIENT_IDE = null;
						} else {

							tmpContent_tJDBCInput_5 = rs_tJDBCInput_5
									.getString(column_index_tJDBCInput_5);
							if (tmpContent_tJDBCInput_5 != null) {
								row7.PATIENT_IDE = tmpContent_tJDBCInput_5;
							} else {
								row7.PATIENT_IDE = null;
							}

						}
						column_index_tJDBCInput_5 = 2;

						if (colQtyInRs_tJDBCInput_5 < column_index_tJDBCInput_5) {
							row7.PATIENT_IDE_SOURCE = null;
						} else {

							tmpContent_tJDBCInput_5 = rs_tJDBCInput_5
									.getString(column_index_tJDBCInput_5);
							if (tmpContent_tJDBCInput_5 != null) {
								row7.PATIENT_IDE_SOURCE = tmpContent_tJDBCInput_5;
							} else {
								row7.PATIENT_IDE_SOURCE = null;
							}

						}
						column_index_tJDBCInput_5 = 3;

						if (colQtyInRs_tJDBCInput_5 < column_index_tJDBCInput_5) {
							row7.PATIENT_NUM = null;
						} else {

							if (rs_tJDBCInput_5
									.getObject(column_index_tJDBCInput_5) != null) {
								row7.PATIENT_NUM = rs_tJDBCInput_5
										.getBigDecimal(column_index_tJDBCInput_5);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}
						column_index_tJDBCInput_5 = 4;

						if (colQtyInRs_tJDBCInput_5 < column_index_tJDBCInput_5) {
							row7.PATIENT_IDE_STATUS = null;
						} else {

							tmpContent_tJDBCInput_5 = rs_tJDBCInput_5
									.getString(column_index_tJDBCInput_5);
							if (tmpContent_tJDBCInput_5 != null) {
								row7.PATIENT_IDE_STATUS = tmpContent_tJDBCInput_5;
							} else {
								row7.PATIENT_IDE_STATUS = null;
							}

							if (rs_tJDBCInput_5.wasNull()) {
								row7.PATIENT_IDE_STATUS = null;
							}
						}
						column_index_tJDBCInput_5 = 5;

						if (colQtyInRs_tJDBCInput_5 < column_index_tJDBCInput_5) {
							row7.UPLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_5 = null;
							try {
								date_tJDBCInput_5 = rs_tJDBCInput_5
										.getTimestamp(column_index_tJDBCInput_5);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_5 = rs_tJDBCInput_5
										.getDate(column_index_tJDBCInput_5);
							}
							row7.UPLOAD_DATE = date_tJDBCInput_5;

							if (rs_tJDBCInput_5.wasNull()) {
								row7.UPLOAD_DATE = null;
							}
						}
						column_index_tJDBCInput_5 = 6;

						if (colQtyInRs_tJDBCInput_5 < column_index_tJDBCInput_5) {
							row7.UPDATE_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_5 = null;
							try {
								date_tJDBCInput_5 = rs_tJDBCInput_5
										.getTimestamp(column_index_tJDBCInput_5);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_5 = rs_tJDBCInput_5
										.getDate(column_index_tJDBCInput_5);
							}
							row7.UPDATE_DATE = date_tJDBCInput_5;

							if (rs_tJDBCInput_5.wasNull()) {
								row7.UPDATE_DATE = null;
							}
						}
						column_index_tJDBCInput_5 = 7;

						if (colQtyInRs_tJDBCInput_5 < column_index_tJDBCInput_5) {
							row7.DOWNLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_5 = null;
							try {
								date_tJDBCInput_5 = rs_tJDBCInput_5
										.getTimestamp(column_index_tJDBCInput_5);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_5 = rs_tJDBCInput_5
										.getDate(column_index_tJDBCInput_5);
							}
							row7.DOWNLOAD_DATE = date_tJDBCInput_5;

							if (rs_tJDBCInput_5.wasNull()) {
								row7.DOWNLOAD_DATE = null;
							}
						}
						column_index_tJDBCInput_5 = 8;

						if (colQtyInRs_tJDBCInput_5 < column_index_tJDBCInput_5) {
							row7.IMPORT_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_5 = null;
							try {
								date_tJDBCInput_5 = rs_tJDBCInput_5
										.getTimestamp(column_index_tJDBCInput_5);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_5 = rs_tJDBCInput_5
										.getDate(column_index_tJDBCInput_5);
							}
							row7.IMPORT_DATE = date_tJDBCInput_5;

							if (rs_tJDBCInput_5.wasNull()) {
								row7.IMPORT_DATE = null;
							}
						}
						column_index_tJDBCInput_5 = 9;

						if (colQtyInRs_tJDBCInput_5 < column_index_tJDBCInput_5) {
							row7.SOURCESYSTEM_CD = null;
						} else {

							tmpContent_tJDBCInput_5 = rs_tJDBCInput_5
									.getString(column_index_tJDBCInput_5);
							if (tmpContent_tJDBCInput_5 != null) {
								row7.SOURCESYSTEM_CD = tmpContent_tJDBCInput_5;
							} else {
								row7.SOURCESYSTEM_CD = null;
							}

							if (rs_tJDBCInput_5.wasNull()) {
								row7.SOURCESYSTEM_CD = null;
							}
						}
						column_index_tJDBCInput_5 = 10;

						if (colQtyInRs_tJDBCInput_5 < column_index_tJDBCInput_5) {
							row7.UPLOAD_ID = null;
						} else {

							tmpContent_tJDBCInput_5 = rs_tJDBCInput_5
									.getString(column_index_tJDBCInput_5);
							if (tmpContent_tJDBCInput_5 != null) {
								row7.UPLOAD_ID = tmpContent_tJDBCInput_5;
							} else {
								row7.UPLOAD_ID = null;
							}

							if (rs_tJDBCInput_5.wasNull()) {
								row7.UPLOAD_ID = null;
							}
						}

						/**
						 * [tJDBCInput_5 begin ] stop
						 */
						/**
						 * [tJDBCInput_5 main ] start
						 */

						currentComponent = "tJDBCInput_5";

						tos_count_tJDBCInput_5++;

						/**
						 * [tJDBCInput_5 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_8 main ] start
						 */

						currentComponent = "tFileOutputDelimited_8";

						String[] rowtFileOutputDelimited_8 = new String[10];

						rowtFileOutputDelimited_8[0] = row7.PATIENT_IDE == null ? ""
								: row7.PATIENT_IDE;

						rowtFileOutputDelimited_8[1] = row7.PATIENT_IDE_SOURCE == null ? ""
								: row7.PATIENT_IDE_SOURCE;

						rowtFileOutputDelimited_8[2] = row7.PATIENT_NUM == null ? ""
								: row7.PATIENT_NUM.toPlainString();

						rowtFileOutputDelimited_8[3] = row7.PATIENT_IDE_STATUS == null ? ""
								: row7.PATIENT_IDE_STATUS;

						rowtFileOutputDelimited_8[4] = row7.UPLOAD_DATE == null ? ""
								: FormatterUtils.format_Date(row7.UPLOAD_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_8[5] = row7.UPDATE_DATE == null ? ""
								: FormatterUtils.format_Date(row7.UPDATE_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_8[6] = row7.DOWNLOAD_DATE == null ? ""
								: FormatterUtils.format_Date(
										row7.DOWNLOAD_DATE, "dd-MM-yyyy");

						rowtFileOutputDelimited_8[7] = row7.IMPORT_DATE == null ? ""
								: FormatterUtils.format_Date(row7.IMPORT_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_8[8] = row7.SOURCESYSTEM_CD == null ? ""
								: row7.SOURCESYSTEM_CD;

						rowtFileOutputDelimited_8[9] = row7.UPLOAD_ID == null ? ""
								: row7.UPLOAD_ID;

						nb_line_tFileOutputDelimited_8++;
						CsvWritertFileOutputDelimited_8
								.writeNext(rowtFileOutputDelimited_8);

						tos_count_tFileOutputDelimited_8++;

						/**
						 * [tFileOutputDelimited_8 main ] stop
						 */

						/**
						 * [tJDBCInput_5 end ] start
						 */

						currentComponent = "tJDBCInput_5";

					}
					rs_tJDBCInput_5.close();
					stmt_tJDBCInput_5.close();

					globalMap.put("tJDBCInput_5_NB_LINE", nb_line_tJDBCInput_5);

					ok_Hash.put("tJDBCInput_5", true);
					end_Hash.put("tJDBCInput_5", System.currentTimeMillis());

					/**
					 * [tJDBCInput_5 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_8 end ] start
					 */

					currentComponent = "tFileOutputDelimited_8";

				} finally {

					if (CsvWritertFileOutputDelimited_8 != null) {
						CsvWritertFileOutputDelimited_8.close();
					}
					globalMap.put("tFileOutputDelimited_8_NB_LINE",
							nb_line_tFileOutputDelimited_8);
				} // finally

				ok_Hash.put("tFileOutputDelimited_8", true);
				end_Hash.put("tFileOutputDelimited_8",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCInput_5_SUBPROCESS_STATE", 1);
	}

	public void tJava_10Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_10 begin ] start
				 */

				ok_Hash.put("tJava_10", false);
				start_Hash.put("tJava_10", System.currentTimeMillis());
				currentComponent = "tJava_10";

				int tos_count_tJava_10 = 0;

				StatusListener.setSubStatus(70,
						"Getting Staging Patient_Dimension...");
				if (context.DB_StagingI2B2_DatabaseType
						.equalsIgnoreCase("oracle"))
					context.currentQuery = "SELECT * FROM  "
							+ context.DB_StagingI2B2_Schema
							+ ".patient_dimension";
				else {
					context.currentQuery = "SELECT * FROM  i2b2demodata.patient_dimension";

				}

				/**
				 * [tJava_10 begin ] stop
				 */
				/**
				 * [tJava_10 main ] start
				 */

				currentComponent = "tJava_10";

				tos_count_tJava_10++;

				/**
				 * [tJava_10 main ] stop
				 */
				/**
				 * [tJava_10 end ] start
				 */

				currentComponent = "tJava_10";

				ok_Hash.put("tJava_10", true);
				end_Hash.put("tJava_10", System.currentTimeMillis());

				/**
				 * [tJava_10 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_10:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCInput_6Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_10_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String VITAL_STATUS_CD;

		public String getVITAL_STATUS_CD() {
			return this.VITAL_STATUS_CD;
		}

		public String BIRTH_DATE;

		public String getBIRTH_DATE() {
			return this.BIRTH_DATE;
		}

		public String DEATH_DATE;

		public String getDEATH_DATE() {
			return this.DEATH_DATE;
		}

		public String SEX_CD;

		public String getSEX_CD() {
			return this.SEX_CD;
		}

		public String AGE_IN_YEARS_NUM;

		public String getAGE_IN_YEARS_NUM() {
			return this.AGE_IN_YEARS_NUM;
		}

		public String LANGUAGE_CD;

		public String getLANGUAGE_CD() {
			return this.LANGUAGE_CD;
		}

		public String RACE_CD;

		public String getRACE_CD() {
			return this.RACE_CD;
		}

		public String MARITAL_STATUS_CD;

		public String getMARITAL_STATUS_CD() {
			return this.MARITAL_STATUS_CD;
		}

		public String RELIGION_CD;

		public String getRELIGION_CD() {
			return this.RELIGION_CD;
		}

		public String ZIP_CD;

		public String getZIP_CD() {
			return this.ZIP_CD;
		}

		public String STATECITYZIP_PATH;

		public String getSTATECITYZIP_PATH() {
			return this.STATECITYZIP_PATH;
		}

		public String INCOME_CD;

		public String getINCOME_CD() {
			return this.INCOME_CD;
		}

		public Object PATIENT_BLOB;

		public Object getPATIENT_BLOB() {
			return this.PATIENT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.VITAL_STATUS_CD = readString(dis);

					this.BIRTH_DATE = readString(dis);

					this.DEATH_DATE = readString(dis);

					this.SEX_CD = readString(dis);

					this.AGE_IN_YEARS_NUM = readString(dis);

					this.LANGUAGE_CD = readString(dis);

					this.RACE_CD = readString(dis);

					this.MARITAL_STATUS_CD = readString(dis);

					this.RELIGION_CD = readString(dis);

					this.ZIP_CD = readString(dis);

					this.STATECITYZIP_PATH = readString(dis);

					this.INCOME_CD = readString(dis);

					this.PATIENT_BLOB = (Object) dis.readObject();

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.VITAL_STATUS_CD, dos);

				// String

				writeString(this.BIRTH_DATE, dos);

				// String

				writeString(this.DEATH_DATE, dos);

				// String

				writeString(this.SEX_CD, dos);

				// String

				writeString(this.AGE_IN_YEARS_NUM, dos);

				// String

				writeString(this.LANGUAGE_CD, dos);

				// String

				writeString(this.RACE_CD, dos);

				// String

				writeString(this.MARITAL_STATUS_CD, dos);

				// String

				writeString(this.RELIGION_CD, dos);

				// String

				writeString(this.ZIP_CD, dos);

				// String

				writeString(this.STATECITYZIP_PATH, dos);

				// String

				writeString(this.INCOME_CD, dos);

				// Object

				dos.writeObject(this.PATIENT_BLOB);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",VITAL_STATUS_CD=" + VITAL_STATUS_CD);
			sb.append(",BIRTH_DATE=" + BIRTH_DATE);
			sb.append(",DEATH_DATE=" + DEATH_DATE);
			sb.append(",SEX_CD=" + SEX_CD);
			sb.append(",AGE_IN_YEARS_NUM=" + AGE_IN_YEARS_NUM);
			sb.append(",LANGUAGE_CD=" + LANGUAGE_CD);
			sb.append(",RACE_CD=" + RACE_CD);
			sb.append(",MARITAL_STATUS_CD=" + MARITAL_STATUS_CD);
			sb.append(",RELIGION_CD=" + RELIGION_CD);
			sb.append(",ZIP_CD=" + ZIP_CD);
			sb.append(",STATECITYZIP_PATH=" + STATECITYZIP_PATH);
			sb.append(",INCOME_CD=" + INCOME_CD);
			sb.append(",PATIENT_BLOB=" + String.valueOf(PATIENT_BLOB));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();

				/**
				 * [tFileOutputDelimited_9 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_9", false);
				start_Hash.put("tFileOutputDelimited_9",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_9";

				int tos_count_tFileOutputDelimited_9 = 0;

				String fileName_tFileOutputDelimited_9 = "";
				fileName_tFileOutputDelimited_9 = (new java.io.File(
						((String) globalMap
								.get("tCreateTemporaryFile_6_FILEPATH"))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_9 = null;
				String extension_tFileOutputDelimited_9 = null;
				String directory_tFileOutputDelimited_9 = null;
				if ((fileName_tFileOutputDelimited_9.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_9.lastIndexOf(".") < fileName_tFileOutputDelimited_9
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9;
						extension_tFileOutputDelimited_9 = "";
					} else {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
								.substring(0, fileName_tFileOutputDelimited_9
										.lastIndexOf("."));
						extension_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
								.substring(fileName_tFileOutputDelimited_9
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
							.substring(0, fileName_tFileOutputDelimited_9
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_9.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
								.substring(0, fileName_tFileOutputDelimited_9
										.lastIndexOf("."));
						extension_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
								.substring(fileName_tFileOutputDelimited_9
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9;
						extension_tFileOutputDelimited_9 = "";
					}
					directory_tFileOutputDelimited_9 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_9 = true;
				java.io.File filetFileOutputDelimited_9 = new java.io.File(
						fileName_tFileOutputDelimited_9);
				globalMap.put("tFileOutputDelimited_9_FILE_NAME",
						fileName_tFileOutputDelimited_9);

				String[] headColutFileOutputDelimited_9 = new String[19];
				class CSVBasicSet_tFileOutputDelimited_9 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_9[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_9 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_9[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_9[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_9 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_9[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_9[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_9 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_9[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_9 = 0;
				int splitEvery_tFileOutputDelimited_9 = 1000;
				int splitedFileNo_tFileOutputDelimited_9 = 0;
				int currentRow_tFileOutputDelimited_9 = 0;

				CSVBasicSet_tFileOutputDelimited_9 csvSettings_tFileOutputDelimited_9 = new CSVBasicSet_tFileOutputDelimited_9();
				csvSettings_tFileOutputDelimited_9.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_9.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_9.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_9 != null
						&& directory_tFileOutputDelimited_9.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_9 = new java.io.File(
							directory_tFileOutputDelimited_9);
					if (!dir_tFileOutputDelimited_9.exists()) {
						dir_tFileOutputDelimited_9.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_9 = null;
				try {
					CsvWritertFileOutputDelimited_9 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_9,
													false), "UTF-8")));
					CsvWritertFileOutputDelimited_9
							.setSeparator(csvSettings_tFileOutputDelimited_9
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_9
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_9.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_9.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_9.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_9
										.getRowDelim());
					}

					if (filetFileOutputDelimited_9.length() == 0) {

						headColutFileOutputDelimited_9[0] = "PATIENT_NUM";

						headColutFileOutputDelimited_9[1] = "VITAL_STATUS_CD";

						headColutFileOutputDelimited_9[2] = "BIRTH_DATE";

						headColutFileOutputDelimited_9[3] = "DEATH_DATE";

						headColutFileOutputDelimited_9[4] = "SEX_CD";

						headColutFileOutputDelimited_9[5] = "AGE_IN_YEARS_NUM";

						headColutFileOutputDelimited_9[6] = "LANGUAGE_CD";

						headColutFileOutputDelimited_9[7] = "RACE_CD";

						headColutFileOutputDelimited_9[8] = "MARITAL_STATUS_CD";

						headColutFileOutputDelimited_9[9] = "RELIGION_CD";

						headColutFileOutputDelimited_9[10] = "ZIP_CD";

						headColutFileOutputDelimited_9[11] = "STATECITYZIP_PATH";

						headColutFileOutputDelimited_9[12] = "INCOME_CD";

						headColutFileOutputDelimited_9[13] = "PATIENT_BLOB";

						headColutFileOutputDelimited_9[14] = "UPDATE_DATE";

						headColutFileOutputDelimited_9[15] = "DOWNLOAD_DATE";

						headColutFileOutputDelimited_9[16] = "IMPORT_DATE";

						headColutFileOutputDelimited_9[17] = "SOURCESYSTEM_CD";

						headColutFileOutputDelimited_9[18] = "UPLOAD_ID";

						CsvWritertFileOutputDelimited_9
								.writeNext(headColutFileOutputDelimited_9);
						CsvWritertFileOutputDelimited_9.flush();

					}

					CsvWritertFileOutputDelimited_9
							.setEscapeChar(csvSettings_tFileOutputDelimited_9
									.getEscapeChar());
					CsvWritertFileOutputDelimited_9
							.setQuoteChar(csvSettings_tFileOutputDelimited_9
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_9
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_9 begin ] stop
					 */

					/**
					 * [tJDBCInput_6 begin ] start
					 */

					ok_Hash.put("tJDBCInput_6", false);
					start_Hash.put("tJDBCInput_6", System.currentTimeMillis());
					currentComponent = "tJDBCInput_6";

					int tos_count_tJDBCInput_6 = 0;

					int nb_line_tJDBCInput_6 = 0;
					java.sql.Connection conn_tJDBCInput_6 = null;
					conn_tJDBCInput_6 = (java.sql.Connection) globalMap
							.get("conn_tJDBCConnection_1");
					if (null == conn_tJDBCInput_6) {
						java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCInput_6 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
								.get(KEY_DB_DATASOURCES);
						conn_tJDBCInput_6 = dataSources_tJDBCInput_6.get("")
								.getConnection();
						// globalMap.put("conn_tJDBCConnection_1",
						// conn_tJDBCInput_6);
					}

					java.sql.Statement stmt_tJDBCInput_6 = conn_tJDBCInput_6
							.createStatement();

					String dbquery_tJDBCInput_6 = context.currentQuery;

					globalMap.put("tJDBCInput_6_QUERY", dbquery_tJDBCInput_6);

					java.sql.ResultSet rs_tJDBCInput_6 = stmt_tJDBCInput_6
							.executeQuery(dbquery_tJDBCInput_6);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_6 = rs_tJDBCInput_6
							.getMetaData();
					int colQtyInRs_tJDBCInput_6 = rsmd_tJDBCInput_6
							.getColumnCount();

					String tmpContent_tJDBCInput_6 = null;
					int column_index_tJDBCInput_6 = 1;
					while (rs_tJDBCInput_6.next()) {
						nb_line_tJDBCInput_6++;

						column_index_tJDBCInput_6 = 1;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.PATIENT_NUM = null;
						} else {

							if (rs_tJDBCInput_6
									.getObject(column_index_tJDBCInput_6) != null) {
								row8.PATIENT_NUM = rs_tJDBCInput_6
										.getBigDecimal(column_index_tJDBCInput_6);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}
						column_index_tJDBCInput_6 = 2;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.VITAL_STATUS_CD = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(column_index_tJDBCInput_6);
							if (tmpContent_tJDBCInput_6 != null) {
								row8.VITAL_STATUS_CD = tmpContent_tJDBCInput_6;
							} else {
								row8.VITAL_STATUS_CD = null;
							}

							if (rs_tJDBCInput_6.wasNull()) {
								row8.VITAL_STATUS_CD = null;
							}
						}
						column_index_tJDBCInput_6 = 3;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.BIRTH_DATE = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(column_index_tJDBCInput_6);
							if (tmpContent_tJDBCInput_6 != null) {
								row8.BIRTH_DATE = tmpContent_tJDBCInput_6;
							} else {
								row8.BIRTH_DATE = null;
							}

							if (rs_tJDBCInput_6.wasNull()) {
								row8.BIRTH_DATE = null;
							}
						}
						column_index_tJDBCInput_6 = 4;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.DEATH_DATE = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(column_index_tJDBCInput_6);
							if (tmpContent_tJDBCInput_6 != null) {
								row8.DEATH_DATE = tmpContent_tJDBCInput_6;
							} else {
								row8.DEATH_DATE = null;
							}

							if (rs_tJDBCInput_6.wasNull()) {
								row8.DEATH_DATE = null;
							}
						}
						column_index_tJDBCInput_6 = 5;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.SEX_CD = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(column_index_tJDBCInput_6);
							if (tmpContent_tJDBCInput_6 != null) {
								row8.SEX_CD = tmpContent_tJDBCInput_6;
							} else {
								row8.SEX_CD = null;
							}

							if (rs_tJDBCInput_6.wasNull()) {
								row8.SEX_CD = null;
							}
						}
						column_index_tJDBCInput_6 = 6;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.AGE_IN_YEARS_NUM = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(column_index_tJDBCInput_6);
							if (tmpContent_tJDBCInput_6 != null) {
								row8.AGE_IN_YEARS_NUM = tmpContent_tJDBCInput_6;
							} else {
								row8.AGE_IN_YEARS_NUM = null;
							}

							if (rs_tJDBCInput_6.wasNull()) {
								row8.AGE_IN_YEARS_NUM = null;
							}
						}
						column_index_tJDBCInput_6 = 7;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.LANGUAGE_CD = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(column_index_tJDBCInput_6);
							if (tmpContent_tJDBCInput_6 != null) {
								row8.LANGUAGE_CD = tmpContent_tJDBCInput_6;
							} else {
								row8.LANGUAGE_CD = null;
							}

							if (rs_tJDBCInput_6.wasNull()) {
								row8.LANGUAGE_CD = null;
							}
						}
						column_index_tJDBCInput_6 = 8;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.RACE_CD = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(column_index_tJDBCInput_6);
							if (tmpContent_tJDBCInput_6 != null) {
								row8.RACE_CD = tmpContent_tJDBCInput_6;
							} else {
								row8.RACE_CD = null;
							}

							if (rs_tJDBCInput_6.wasNull()) {
								row8.RACE_CD = null;
							}
						}
						column_index_tJDBCInput_6 = 9;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.MARITAL_STATUS_CD = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(column_index_tJDBCInput_6);
							if (tmpContent_tJDBCInput_6 != null) {
								row8.MARITAL_STATUS_CD = tmpContent_tJDBCInput_6;
							} else {
								row8.MARITAL_STATUS_CD = null;
							}

							if (rs_tJDBCInput_6.wasNull()) {
								row8.MARITAL_STATUS_CD = null;
							}
						}
						column_index_tJDBCInput_6 = 10;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.RELIGION_CD = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(column_index_tJDBCInput_6);
							if (tmpContent_tJDBCInput_6 != null) {
								row8.RELIGION_CD = tmpContent_tJDBCInput_6;
							} else {
								row8.RELIGION_CD = null;
							}

							if (rs_tJDBCInput_6.wasNull()) {
								row8.RELIGION_CD = null;
							}
						}
						column_index_tJDBCInput_6 = 11;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.ZIP_CD = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(column_index_tJDBCInput_6);
							if (tmpContent_tJDBCInput_6 != null) {
								row8.ZIP_CD = tmpContent_tJDBCInput_6;
							} else {
								row8.ZIP_CD = null;
							}

							if (rs_tJDBCInput_6.wasNull()) {
								row8.ZIP_CD = null;
							}
						}
						column_index_tJDBCInput_6 = 12;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.STATECITYZIP_PATH = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(column_index_tJDBCInput_6);
							if (tmpContent_tJDBCInput_6 != null) {
								row8.STATECITYZIP_PATH = tmpContent_tJDBCInput_6;
							} else {
								row8.STATECITYZIP_PATH = null;
							}

							if (rs_tJDBCInput_6.wasNull()) {
								row8.STATECITYZIP_PATH = null;
							}
						}
						column_index_tJDBCInput_6 = 13;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.INCOME_CD = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(column_index_tJDBCInput_6);
							if (tmpContent_tJDBCInput_6 != null) {
								row8.INCOME_CD = tmpContent_tJDBCInput_6;
							} else {
								row8.INCOME_CD = null;
							}

							if (rs_tJDBCInput_6.wasNull()) {
								row8.INCOME_CD = null;
							}
						}
						column_index_tJDBCInput_6 = 14;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.PATIENT_BLOB = null;
						} else {

							if (rs_tJDBCInput_6
									.getObject(column_index_tJDBCInput_6) != null) {
								row8.PATIENT_BLOB = rs_tJDBCInput_6
										.getObject(column_index_tJDBCInput_6);
							} else {
								row8.PATIENT_BLOB = null;
							}

							if (rs_tJDBCInput_6.wasNull()) {
								row8.PATIENT_BLOB = null;
							}
						}
						column_index_tJDBCInput_6 = 15;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.UPDATE_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_6 = null;
							try {
								date_tJDBCInput_6 = rs_tJDBCInput_6
										.getTimestamp(column_index_tJDBCInput_6);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_6 = rs_tJDBCInput_6
										.getDate(column_index_tJDBCInput_6);
							}
							row8.UPDATE_DATE = date_tJDBCInput_6;

							if (rs_tJDBCInput_6.wasNull()) {
								row8.UPDATE_DATE = null;
							}
						}
						column_index_tJDBCInput_6 = 16;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.DOWNLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_6 = null;
							try {
								date_tJDBCInput_6 = rs_tJDBCInput_6
										.getTimestamp(column_index_tJDBCInput_6);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_6 = rs_tJDBCInput_6
										.getDate(column_index_tJDBCInput_6);
							}
							row8.DOWNLOAD_DATE = date_tJDBCInput_6;

							if (rs_tJDBCInput_6.wasNull()) {
								row8.DOWNLOAD_DATE = null;
							}
						}
						column_index_tJDBCInput_6 = 17;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.IMPORT_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_6 = null;
							try {
								date_tJDBCInput_6 = rs_tJDBCInput_6
										.getTimestamp(column_index_tJDBCInput_6);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_6 = rs_tJDBCInput_6
										.getDate(column_index_tJDBCInput_6);
							}
							row8.IMPORT_DATE = date_tJDBCInput_6;

							if (rs_tJDBCInput_6.wasNull()) {
								row8.IMPORT_DATE = null;
							}
						}
						column_index_tJDBCInput_6 = 18;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.SOURCESYSTEM_CD = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(column_index_tJDBCInput_6);
							if (tmpContent_tJDBCInput_6 != null) {
								row8.SOURCESYSTEM_CD = tmpContent_tJDBCInput_6;
							} else {
								row8.SOURCESYSTEM_CD = null;
							}

							if (rs_tJDBCInput_6.wasNull()) {
								row8.SOURCESYSTEM_CD = null;
							}
						}
						column_index_tJDBCInput_6 = 19;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.UPLOAD_ID = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(column_index_tJDBCInput_6);
							if (tmpContent_tJDBCInput_6 != null) {
								row8.UPLOAD_ID = tmpContent_tJDBCInput_6;
							} else {
								row8.UPLOAD_ID = null;
							}

							if (rs_tJDBCInput_6.wasNull()) {
								row8.UPLOAD_ID = null;
							}
						}

						/**
						 * [tJDBCInput_6 begin ] stop
						 */
						/**
						 * [tJDBCInput_6 main ] start
						 */

						currentComponent = "tJDBCInput_6";

						tos_count_tJDBCInput_6++;

						/**
						 * [tJDBCInput_6 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_9 main ] start
						 */

						currentComponent = "tFileOutputDelimited_9";

						String[] rowtFileOutputDelimited_9 = new String[19];

						rowtFileOutputDelimited_9[0] = row8.PATIENT_NUM == null ? ""
								: row8.PATIENT_NUM.toPlainString();

						rowtFileOutputDelimited_9[1] = row8.VITAL_STATUS_CD == null ? ""
								: row8.VITAL_STATUS_CD;

						rowtFileOutputDelimited_9[2] = row8.BIRTH_DATE == null ? ""
								: row8.BIRTH_DATE;

						rowtFileOutputDelimited_9[3] = row8.DEATH_DATE == null ? ""
								: row8.DEATH_DATE;

						rowtFileOutputDelimited_9[4] = row8.SEX_CD == null ? ""
								: row8.SEX_CD;

						rowtFileOutputDelimited_9[5] = row8.AGE_IN_YEARS_NUM == null ? ""
								: row8.AGE_IN_YEARS_NUM;

						rowtFileOutputDelimited_9[6] = row8.LANGUAGE_CD == null ? ""
								: row8.LANGUAGE_CD;

						rowtFileOutputDelimited_9[7] = row8.RACE_CD == null ? ""
								: row8.RACE_CD;

						rowtFileOutputDelimited_9[8] = row8.MARITAL_STATUS_CD == null ? ""
								: row8.MARITAL_STATUS_CD;

						rowtFileOutputDelimited_9[9] = row8.RELIGION_CD == null ? ""
								: row8.RELIGION_CD;

						rowtFileOutputDelimited_9[10] = row8.ZIP_CD == null ? ""
								: row8.ZIP_CD;

						rowtFileOutputDelimited_9[11] = row8.STATECITYZIP_PATH == null ? ""
								: row8.STATECITYZIP_PATH;

						rowtFileOutputDelimited_9[12] = row8.INCOME_CD == null ? ""
								: row8.INCOME_CD;

						rowtFileOutputDelimited_9[13] = row8.PATIENT_BLOB == null ? ""
								: String.valueOf(row8.PATIENT_BLOB);

						rowtFileOutputDelimited_9[14] = row8.UPDATE_DATE == null ? ""
								: FormatterUtils.format_Date(row8.UPDATE_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_9[15] = row8.DOWNLOAD_DATE == null ? ""
								: FormatterUtils.format_Date(
										row8.DOWNLOAD_DATE, "dd-MM-yyyy");

						rowtFileOutputDelimited_9[16] = row8.IMPORT_DATE == null ? ""
								: FormatterUtils.format_Date(row8.IMPORT_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_9[17] = row8.SOURCESYSTEM_CD == null ? ""
								: row8.SOURCESYSTEM_CD;

						rowtFileOutputDelimited_9[18] = row8.UPLOAD_ID == null ? ""
								: row8.UPLOAD_ID;

						nb_line_tFileOutputDelimited_9++;
						CsvWritertFileOutputDelimited_9
								.writeNext(rowtFileOutputDelimited_9);

						tos_count_tFileOutputDelimited_9++;

						/**
						 * [tFileOutputDelimited_9 main ] stop
						 */

						/**
						 * [tJDBCInput_6 end ] start
						 */

						currentComponent = "tJDBCInput_6";

					}
					rs_tJDBCInput_6.close();
					stmt_tJDBCInput_6.close();

					globalMap.put("tJDBCInput_6_NB_LINE", nb_line_tJDBCInput_6);

					ok_Hash.put("tJDBCInput_6", true);
					end_Hash.put("tJDBCInput_6", System.currentTimeMillis());

					/**
					 * [tJDBCInput_6 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_9 end ] start
					 */

					currentComponent = "tFileOutputDelimited_9";

				} finally {

					if (CsvWritertFileOutputDelimited_9 != null) {
						CsvWritertFileOutputDelimited_9.close();
					}
					globalMap.put("tFileOutputDelimited_9_NB_LINE",
							nb_line_tFileOutputDelimited_9);
				} // finally

				ok_Hash.put("tFileOutputDelimited_9", true);
				end_Hash.put("tFileOutputDelimited_9",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_9 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCInput_6_SUBPROCESS_STATE", 1);
	}

	public void tJava_11Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_11 begin ] start
				 */

				ok_Hash.put("tJava_11", false);
				start_Hash.put("tJava_11", System.currentTimeMillis());
				currentComponent = "tJava_11";

				int tos_count_tJava_11 = 0;

				StatusListener.setSubStatus(80,
						"Getting Staging Encounter_Mapping...");
				if (context.DB_StagingI2B2_DatabaseType
						.equalsIgnoreCase("oracle"))
					context.currentQuery = "SELECT * FROM "
							+ context.DB_StagingI2B2_Schema
							+ ".encounter_mapping";
				else {
					context.currentQuery = "SELECT * FROM i2b2demodata.encounter_mapping";

				}

				/**
				 * [tJava_11 begin ] stop
				 */
				/**
				 * [tJava_11 main ] start
				 */

				currentComponent = "tJava_11";

				tos_count_tJava_11++;

				/**
				 * [tJava_11 main ] stop
				 */
				/**
				 * [tJava_11 end ] start
				 */

				currentComponent = "tJava_11";

				ok_Hash.put("tJava_11", true);
				end_Hash.put("tJava_11", System.currentTimeMillis());

				/**
				 * [tJava_11 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_11:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCInput_7Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_11_SUBPROCESS_STATE", 1);
	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String ENCOUNTER_IDE;

		public String getENCOUNTER_IDE() {
			return this.ENCOUNTER_IDE;
		}

		public String ENCOUNTER_IDE_SOURCE;

		public String getENCOUNTER_IDE_SOURCE() {
			return this.ENCOUNTER_IDE_SOURCE;
		}

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public String ENCOUNTER_IDE_STATUS;

		public String getENCOUNTER_IDE_STATUS() {
			return this.ENCOUNTER_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_IDE = readString(dis);

					this.ENCOUNTER_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ENCOUNTER_IDE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_IDE=" + ENCOUNTER_IDE);
			sb.append(",ENCOUNTER_IDE_SOURCE=" + ENCOUNTER_IDE_SOURCE);
			sb.append(",ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",ENCOUNTER_IDE_STATUS=" + ENCOUNTER_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row13Struct row13 = new row13Struct();

				/**
				 * [tFileOutputDelimited_14 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_14", false);
				start_Hash.put("tFileOutputDelimited_14",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_14";

				int tos_count_tFileOutputDelimited_14 = 0;

				String fileName_tFileOutputDelimited_14 = "";
				fileName_tFileOutputDelimited_14 = (new java.io.File(
						context.folderMain + context.folderOutput
								+ "/encounter_mapping.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_14 = null;
				String extension_tFileOutputDelimited_14 = null;
				String directory_tFileOutputDelimited_14 = null;
				if ((fileName_tFileOutputDelimited_14.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_14.lastIndexOf(".") < fileName_tFileOutputDelimited_14
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14;
						extension_tFileOutputDelimited_14 = "";
					} else {
						fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14
								.substring(0, fileName_tFileOutputDelimited_14
										.lastIndexOf("."));
						extension_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14
								.substring(fileName_tFileOutputDelimited_14
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14
							.substring(0, fileName_tFileOutputDelimited_14
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_14.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14
								.substring(0, fileName_tFileOutputDelimited_14
										.lastIndexOf("."));
						extension_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14
								.substring(fileName_tFileOutputDelimited_14
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14;
						extension_tFileOutputDelimited_14 = "";
					}
					directory_tFileOutputDelimited_14 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_14 = true;
				java.io.File filetFileOutputDelimited_14 = new java.io.File(
						fileName_tFileOutputDelimited_14);
				globalMap.put("tFileOutputDelimited_14_FILE_NAME",
						fileName_tFileOutputDelimited_14);

				String[] headColutFileOutputDelimited_14 = new String[12];
				class CSVBasicSet_tFileOutputDelimited_14 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_14[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_14 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_14[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_14[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_14 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_14[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_14[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_14 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_14[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_14 = 0;
				int splitEvery_tFileOutputDelimited_14 = 1000;
				int splitedFileNo_tFileOutputDelimited_14 = 0;
				int currentRow_tFileOutputDelimited_14 = 0;

				CSVBasicSet_tFileOutputDelimited_14 csvSettings_tFileOutputDelimited_14 = new CSVBasicSet_tFileOutputDelimited_14();
				csvSettings_tFileOutputDelimited_14.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_14.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_14.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_14 != null
						&& directory_tFileOutputDelimited_14.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_14 = new java.io.File(
							directory_tFileOutputDelimited_14);
					if (!dir_tFileOutputDelimited_14.exists()) {
						dir_tFileOutputDelimited_14.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_14 = null;
				try {
					CsvWritertFileOutputDelimited_14 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_14,
													false), "UTF-8")));
					CsvWritertFileOutputDelimited_14
							.setSeparator(csvSettings_tFileOutputDelimited_14
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_14
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_14
									.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_14
									.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_14.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_14
										.getRowDelim());
					}

					if (filetFileOutputDelimited_14.length() == 0) {

						headColutFileOutputDelimited_14[0] = "ENCOUNTER_IDE";

						headColutFileOutputDelimited_14[1] = "ENCOUNTER_IDE_SOURCE";

						headColutFileOutputDelimited_14[2] = "ENCOUNTER_NUM";

						headColutFileOutputDelimited_14[3] = "PATIENT_IDE";

						headColutFileOutputDelimited_14[4] = "PATIENT_IDE_SOURCE";

						headColutFileOutputDelimited_14[5] = "ENCOUNTER_IDE_STATUS";

						headColutFileOutputDelimited_14[6] = "UPLOAD_DATE";

						headColutFileOutputDelimited_14[7] = "UPDATE_DATE";

						headColutFileOutputDelimited_14[8] = "DOWNLOAD_DATE";

						headColutFileOutputDelimited_14[9] = "IMPORT_DATE";

						headColutFileOutputDelimited_14[10] = "SOURCESYSTEM_CD";

						headColutFileOutputDelimited_14[11] = "UPLOAD_ID";

						CsvWritertFileOutputDelimited_14
								.writeNext(headColutFileOutputDelimited_14);
						CsvWritertFileOutputDelimited_14.flush();

					}

					CsvWritertFileOutputDelimited_14
							.setEscapeChar(csvSettings_tFileOutputDelimited_14
									.getEscapeChar());
					CsvWritertFileOutputDelimited_14
							.setQuoteChar(csvSettings_tFileOutputDelimited_14
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_14
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_14 begin ] stop
					 */

					/**
					 * [tJDBCInput_7 begin ] start
					 */

					ok_Hash.put("tJDBCInput_7", false);
					start_Hash.put("tJDBCInput_7", System.currentTimeMillis());
					currentComponent = "tJDBCInput_7";

					int tos_count_tJDBCInput_7 = 0;

					int nb_line_tJDBCInput_7 = 0;
					java.sql.Connection conn_tJDBCInput_7 = null;
					conn_tJDBCInput_7 = (java.sql.Connection) globalMap
							.get("conn_tJDBCConnection_1");
					if (null == conn_tJDBCInput_7) {
						java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCInput_7 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
								.get(KEY_DB_DATASOURCES);
						conn_tJDBCInput_7 = dataSources_tJDBCInput_7.get("")
								.getConnection();
						// globalMap.put("conn_tJDBCConnection_1",
						// conn_tJDBCInput_7);
					}

					java.sql.Statement stmt_tJDBCInput_7 = conn_tJDBCInput_7
							.createStatement();

					String dbquery_tJDBCInput_7 = context.currentQuery;

					globalMap.put("tJDBCInput_7_QUERY", dbquery_tJDBCInput_7);

					java.sql.ResultSet rs_tJDBCInput_7 = stmt_tJDBCInput_7
							.executeQuery(dbquery_tJDBCInput_7);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_7 = rs_tJDBCInput_7
							.getMetaData();
					int colQtyInRs_tJDBCInput_7 = rsmd_tJDBCInput_7
							.getColumnCount();

					String tmpContent_tJDBCInput_7 = null;
					int column_index_tJDBCInput_7 = 1;
					while (rs_tJDBCInput_7.next()) {
						nb_line_tJDBCInput_7++;

						column_index_tJDBCInput_7 = 1;

						if (colQtyInRs_tJDBCInput_7 < column_index_tJDBCInput_7) {
							row13.ENCOUNTER_IDE = null;
						} else {

							tmpContent_tJDBCInput_7 = rs_tJDBCInput_7
									.getString(column_index_tJDBCInput_7);
							if (tmpContent_tJDBCInput_7 != null) {
								row13.ENCOUNTER_IDE = tmpContent_tJDBCInput_7;
							} else {
								row13.ENCOUNTER_IDE = null;
							}

						}
						column_index_tJDBCInput_7 = 2;

						if (colQtyInRs_tJDBCInput_7 < column_index_tJDBCInput_7) {
							row13.ENCOUNTER_IDE_SOURCE = null;
						} else {

							tmpContent_tJDBCInput_7 = rs_tJDBCInput_7
									.getString(column_index_tJDBCInput_7);
							if (tmpContent_tJDBCInput_7 != null) {
								row13.ENCOUNTER_IDE_SOURCE = tmpContent_tJDBCInput_7;
							} else {
								row13.ENCOUNTER_IDE_SOURCE = null;
							}

						}
						column_index_tJDBCInput_7 = 3;

						if (colQtyInRs_tJDBCInput_7 < column_index_tJDBCInput_7) {
							row13.ENCOUNTER_NUM = null;
						} else {

							if (rs_tJDBCInput_7
									.getObject(column_index_tJDBCInput_7) != null) {
								row13.ENCOUNTER_NUM = rs_tJDBCInput_7
										.getBigDecimal(column_index_tJDBCInput_7);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}
						column_index_tJDBCInput_7 = 4;

						if (colQtyInRs_tJDBCInput_7 < column_index_tJDBCInput_7) {
							row13.PATIENT_IDE = null;
						} else {

							tmpContent_tJDBCInput_7 = rs_tJDBCInput_7
									.getString(column_index_tJDBCInput_7);
							if (tmpContent_tJDBCInput_7 != null) {
								row13.PATIENT_IDE = tmpContent_tJDBCInput_7;
							} else {
								row13.PATIENT_IDE = null;
							}

							if (rs_tJDBCInput_7.wasNull()) {
								row13.PATIENT_IDE = null;
							}
						}
						column_index_tJDBCInput_7 = 5;

						if (colQtyInRs_tJDBCInput_7 < column_index_tJDBCInput_7) {
							row13.PATIENT_IDE_SOURCE = null;
						} else {

							tmpContent_tJDBCInput_7 = rs_tJDBCInput_7
									.getString(column_index_tJDBCInput_7);
							if (tmpContent_tJDBCInput_7 != null) {
								row13.PATIENT_IDE_SOURCE = tmpContent_tJDBCInput_7;
							} else {
								row13.PATIENT_IDE_SOURCE = null;
							}

							if (rs_tJDBCInput_7.wasNull()) {
								row13.PATIENT_IDE_SOURCE = null;
							}
						}
						column_index_tJDBCInput_7 = 6;

						if (colQtyInRs_tJDBCInput_7 < column_index_tJDBCInput_7) {
							row13.ENCOUNTER_IDE_STATUS = null;
						} else {

							tmpContent_tJDBCInput_7 = rs_tJDBCInput_7
									.getString(column_index_tJDBCInput_7);
							if (tmpContent_tJDBCInput_7 != null) {
								row13.ENCOUNTER_IDE_STATUS = tmpContent_tJDBCInput_7;
							} else {
								row13.ENCOUNTER_IDE_STATUS = null;
							}

							if (rs_tJDBCInput_7.wasNull()) {
								row13.ENCOUNTER_IDE_STATUS = null;
							}
						}
						column_index_tJDBCInput_7 = 7;

						if (colQtyInRs_tJDBCInput_7 < column_index_tJDBCInput_7) {
							row13.UPLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_7 = null;
							try {
								date_tJDBCInput_7 = rs_tJDBCInput_7
										.getTimestamp(column_index_tJDBCInput_7);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_7 = rs_tJDBCInput_7
										.getDate(column_index_tJDBCInput_7);
							}
							row13.UPLOAD_DATE = date_tJDBCInput_7;

							if (rs_tJDBCInput_7.wasNull()) {
								row13.UPLOAD_DATE = null;
							}
						}
						column_index_tJDBCInput_7 = 8;

						if (colQtyInRs_tJDBCInput_7 < column_index_tJDBCInput_7) {
							row13.UPDATE_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_7 = null;
							try {
								date_tJDBCInput_7 = rs_tJDBCInput_7
										.getTimestamp(column_index_tJDBCInput_7);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_7 = rs_tJDBCInput_7
										.getDate(column_index_tJDBCInput_7);
							}
							row13.UPDATE_DATE = date_tJDBCInput_7;

							if (rs_tJDBCInput_7.wasNull()) {
								row13.UPDATE_DATE = null;
							}
						}
						column_index_tJDBCInput_7 = 9;

						if (colQtyInRs_tJDBCInput_7 < column_index_tJDBCInput_7) {
							row13.DOWNLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_7 = null;
							try {
								date_tJDBCInput_7 = rs_tJDBCInput_7
										.getTimestamp(column_index_tJDBCInput_7);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_7 = rs_tJDBCInput_7
										.getDate(column_index_tJDBCInput_7);
							}
							row13.DOWNLOAD_DATE = date_tJDBCInput_7;

							if (rs_tJDBCInput_7.wasNull()) {
								row13.DOWNLOAD_DATE = null;
							}
						}
						column_index_tJDBCInput_7 = 10;

						if (colQtyInRs_tJDBCInput_7 < column_index_tJDBCInput_7) {
							row13.IMPORT_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_7 = null;
							try {
								date_tJDBCInput_7 = rs_tJDBCInput_7
										.getTimestamp(column_index_tJDBCInput_7);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_7 = rs_tJDBCInput_7
										.getDate(column_index_tJDBCInput_7);
							}
							row13.IMPORT_DATE = date_tJDBCInput_7;

							if (rs_tJDBCInput_7.wasNull()) {
								row13.IMPORT_DATE = null;
							}
						}
						column_index_tJDBCInput_7 = 11;

						if (colQtyInRs_tJDBCInput_7 < column_index_tJDBCInput_7) {
							row13.SOURCESYSTEM_CD = null;
						} else {

							tmpContent_tJDBCInput_7 = rs_tJDBCInput_7
									.getString(column_index_tJDBCInput_7);
							if (tmpContent_tJDBCInput_7 != null) {
								row13.SOURCESYSTEM_CD = tmpContent_tJDBCInput_7;
							} else {
								row13.SOURCESYSTEM_CD = null;
							}

							if (rs_tJDBCInput_7.wasNull()) {
								row13.SOURCESYSTEM_CD = null;
							}
						}
						column_index_tJDBCInput_7 = 12;

						if (colQtyInRs_tJDBCInput_7 < column_index_tJDBCInput_7) {
							row13.UPLOAD_ID = null;
						} else {

							tmpContent_tJDBCInput_7 = rs_tJDBCInput_7
									.getString(column_index_tJDBCInput_7);
							if (tmpContent_tJDBCInput_7 != null) {
								row13.UPLOAD_ID = tmpContent_tJDBCInput_7;
							} else {
								row13.UPLOAD_ID = null;
							}

							if (rs_tJDBCInput_7.wasNull()) {
								row13.UPLOAD_ID = null;
							}
						}

						/**
						 * [tJDBCInput_7 begin ] stop
						 */
						/**
						 * [tJDBCInput_7 main ] start
						 */

						currentComponent = "tJDBCInput_7";

						tos_count_tJDBCInput_7++;

						/**
						 * [tJDBCInput_7 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_14 main ] start
						 */

						currentComponent = "tFileOutputDelimited_14";

						String[] rowtFileOutputDelimited_14 = new String[12];

						rowtFileOutputDelimited_14[0] = row13.ENCOUNTER_IDE == null ? ""
								: row13.ENCOUNTER_IDE;

						rowtFileOutputDelimited_14[1] = row13.ENCOUNTER_IDE_SOURCE == null ? ""
								: row13.ENCOUNTER_IDE_SOURCE;

						rowtFileOutputDelimited_14[2] = row13.ENCOUNTER_NUM == null ? ""
								: row13.ENCOUNTER_NUM.toPlainString();

						rowtFileOutputDelimited_14[3] = row13.PATIENT_IDE == null ? ""
								: row13.PATIENT_IDE;

						rowtFileOutputDelimited_14[4] = row13.PATIENT_IDE_SOURCE == null ? ""
								: row13.PATIENT_IDE_SOURCE;

						rowtFileOutputDelimited_14[5] = row13.ENCOUNTER_IDE_STATUS == null ? ""
								: row13.ENCOUNTER_IDE_STATUS;

						rowtFileOutputDelimited_14[6] = row13.UPLOAD_DATE == null ? ""
								: FormatterUtils.format_Date(row13.UPLOAD_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_14[7] = row13.UPDATE_DATE == null ? ""
								: FormatterUtils.format_Date(row13.UPDATE_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_14[8] = row13.DOWNLOAD_DATE == null ? ""
								: FormatterUtils.format_Date(
										row13.DOWNLOAD_DATE, "dd-MM-yyyy");

						rowtFileOutputDelimited_14[9] = row13.IMPORT_DATE == null ? ""
								: FormatterUtils.format_Date(row13.IMPORT_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_14[10] = row13.SOURCESYSTEM_CD == null ? ""
								: row13.SOURCESYSTEM_CD;

						rowtFileOutputDelimited_14[11] = row13.UPLOAD_ID == null ? ""
								: row13.UPLOAD_ID;

						nb_line_tFileOutputDelimited_14++;
						CsvWritertFileOutputDelimited_14
								.writeNext(rowtFileOutputDelimited_14);

						tos_count_tFileOutputDelimited_14++;

						/**
						 * [tFileOutputDelimited_14 main ] stop
						 */

						/**
						 * [tJDBCInput_7 end ] start
						 */

						currentComponent = "tJDBCInput_7";

					}
					rs_tJDBCInput_7.close();
					stmt_tJDBCInput_7.close();

					globalMap.put("tJDBCInput_7_NB_LINE", nb_line_tJDBCInput_7);

					ok_Hash.put("tJDBCInput_7", true);
					end_Hash.put("tJDBCInput_7", System.currentTimeMillis());

					/**
					 * [tJDBCInput_7 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_14 end ] start
					 */

					currentComponent = "tFileOutputDelimited_14";

				} finally {

					if (CsvWritertFileOutputDelimited_14 != null) {
						CsvWritertFileOutputDelimited_14.close();
					}
					globalMap.put("tFileOutputDelimited_14_NB_LINE",
							nb_line_tFileOutputDelimited_14);
				} // finally

				ok_Hash.put("tFileOutputDelimited_14", true);
				end_Hash.put("tFileOutputDelimited_14",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_14 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCInput_7_SUBPROCESS_STATE", 1);
	}

	public void tJava_12Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_12 begin ] start
				 */

				ok_Hash.put("tJava_12", false);
				start_Hash.put("tJava_12", System.currentTimeMillis());
				currentComponent = "tJava_12";

				int tos_count_tJava_12 = 0;

				StatusListener.setSubStatus(90,
						"Getting Staging Visit_Dimension...");
				if (context.DB_StagingI2B2_DatabaseType
						.equalsIgnoreCase("oracle"))
					context.currentQuery = "SELECT * FROM "
							+ context.DB_StagingI2B2_Schema
							+ ".visit_dimension";
				else {
					context.currentQuery = "SELECT * FROM i2b2demodata.visit_dimension";

				}

				/**
				 * [tJava_12 begin ] stop
				 */
				/**
				 * [tJava_12 main ] start
				 */

				currentComponent = "tJava_12";

				tos_count_tJava_12++;

				/**
				 * [tJava_12 main ] stop
				 */
				/**
				 * [tJava_12 end ] start
				 */

				currentComponent = "tJava_12";

				ok_Hash.put("tJava_12", true);
				end_Hash.put("tJava_12", System.currentTimeMillis());

				/**
				 * [tJava_12 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_12:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCInput_17Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_12_SUBPROCESS_STATE", 1);
	}

	public static class row37Struct implements
			routines.system.IPersistableRow<row37Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String ACTIVE_STATUS_CD;

		public String getACTIVE_STATUS_CD() {
			return this.ACTIVE_STATUS_CD;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String INOUT_CD;

		public String getINOUT_CD() {
			return this.INOUT_CD;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String LOCATION_PATH;

		public String getLOCATION_PATH() {
			return this.LOCATION_PATH;
		}

		public Integer LENGTH_OF_STAY;

		public Integer getLENGTH_OF_STAY() {
			return this.LENGTH_OF_STAY;
		}

		public String VISIT_BLOB;

		public String getVISIT_BLOB() {
			return this.VISIT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.ACTIVE_STATUS_CD = readString(dis);

					this.START_DATE = readDate(dis);

					this.END_DATE = readDate(dis);

					this.INOUT_CD = readString(dis);

					this.LOCATION_CD = readString(dis);

					this.LOCATION_PATH = readString(dis);

					this.LENGTH_OF_STAY = readInteger(dis);

					this.VISIT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.ACTIVE_STATUS_CD, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.INOUT_CD, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.LOCATION_PATH, dos);

				// Integer

				writeInteger(this.LENGTH_OF_STAY, dos);

				// String

				writeString(this.VISIT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",ACTIVE_STATUS_CD=" + ACTIVE_STATUS_CD);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",INOUT_CD=" + INOUT_CD);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",LOCATION_PATH=" + LOCATION_PATH);
			sb.append(",LENGTH_OF_STAY=" + String.valueOf(LENGTH_OF_STAY));
			sb.append(",VISIT_BLOB=" + VISIT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row37Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_17Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_17_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row37Struct row37 = new row37Struct();

				/**
				 * [tFileOutputDelimited_31 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_31", false);
				start_Hash.put("tFileOutputDelimited_31",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_31";

				int tos_count_tFileOutputDelimited_31 = 0;

				String fileName_tFileOutputDelimited_31 = "";
				fileName_tFileOutputDelimited_31 = (new java.io.File(
						context.folderMain + context.folderOutput
								+ "/visit_dimension.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_31 = null;
				String extension_tFileOutputDelimited_31 = null;
				String directory_tFileOutputDelimited_31 = null;
				if ((fileName_tFileOutputDelimited_31.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_31.lastIndexOf(".") < fileName_tFileOutputDelimited_31
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_31 = fileName_tFileOutputDelimited_31;
						extension_tFileOutputDelimited_31 = "";
					} else {
						fullName_tFileOutputDelimited_31 = fileName_tFileOutputDelimited_31
								.substring(0, fileName_tFileOutputDelimited_31
										.lastIndexOf("."));
						extension_tFileOutputDelimited_31 = fileName_tFileOutputDelimited_31
								.substring(fileName_tFileOutputDelimited_31
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_31 = fileName_tFileOutputDelimited_31
							.substring(0, fileName_tFileOutputDelimited_31
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_31.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_31 = fileName_tFileOutputDelimited_31
								.substring(0, fileName_tFileOutputDelimited_31
										.lastIndexOf("."));
						extension_tFileOutputDelimited_31 = fileName_tFileOutputDelimited_31
								.substring(fileName_tFileOutputDelimited_31
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_31 = fileName_tFileOutputDelimited_31;
						extension_tFileOutputDelimited_31 = "";
					}
					directory_tFileOutputDelimited_31 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_31 = true;
				java.io.File filetFileOutputDelimited_31 = new java.io.File(
						fileName_tFileOutputDelimited_31);
				globalMap.put("tFileOutputDelimited_31_FILE_NAME",
						fileName_tFileOutputDelimited_31);

				String[] headColutFileOutputDelimited_31 = new String[15];
				class CSVBasicSet_tFileOutputDelimited_31 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_31[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_31 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_31[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_31[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_31 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_31[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_31[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_31 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_31[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_31 = 0;
				int splitEvery_tFileOutputDelimited_31 = 1000;
				int splitedFileNo_tFileOutputDelimited_31 = 0;
				int currentRow_tFileOutputDelimited_31 = 0;

				CSVBasicSet_tFileOutputDelimited_31 csvSettings_tFileOutputDelimited_31 = new CSVBasicSet_tFileOutputDelimited_31();
				csvSettings_tFileOutputDelimited_31.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_31.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_31.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_31 != null
						&& directory_tFileOutputDelimited_31.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_31 = new java.io.File(
							directory_tFileOutputDelimited_31);
					if (!dir_tFileOutputDelimited_31.exists()) {
						dir_tFileOutputDelimited_31.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_31 = null;
				try {
					CsvWritertFileOutputDelimited_31 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_31,
													false), "UTF-8")));
					CsvWritertFileOutputDelimited_31
							.setSeparator(csvSettings_tFileOutputDelimited_31
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_31
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_31
									.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_31
									.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_31.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_31
										.getRowDelim());
					}

					if (filetFileOutputDelimited_31.length() == 0) {

						headColutFileOutputDelimited_31[0] = "ENCOUNTER_NUM";

						headColutFileOutputDelimited_31[1] = "PATIENT_NUM";

						headColutFileOutputDelimited_31[2] = "ACTIVE_STATUS_CD";

						headColutFileOutputDelimited_31[3] = "START_DATE";

						headColutFileOutputDelimited_31[4] = "END_DATE";

						headColutFileOutputDelimited_31[5] = "INOUT_CD";

						headColutFileOutputDelimited_31[6] = "LOCATION_CD";

						headColutFileOutputDelimited_31[7] = "LOCATION_PATH";

						headColutFileOutputDelimited_31[8] = "LENGTH_OF_STAY";

						headColutFileOutputDelimited_31[9] = "VISIT_BLOB";

						headColutFileOutputDelimited_31[10] = "UPDATE_DATE";

						headColutFileOutputDelimited_31[11] = "DOWNLOAD_DATE";

						headColutFileOutputDelimited_31[12] = "IMPORT_DATE";

						headColutFileOutputDelimited_31[13] = "SOURCESYSTEM_CD";

						headColutFileOutputDelimited_31[14] = "UPLOAD_ID";

						CsvWritertFileOutputDelimited_31
								.writeNext(headColutFileOutputDelimited_31);
						CsvWritertFileOutputDelimited_31.flush();

					}

					CsvWritertFileOutputDelimited_31
							.setEscapeChar(csvSettings_tFileOutputDelimited_31
									.getEscapeChar());
					CsvWritertFileOutputDelimited_31
							.setQuoteChar(csvSettings_tFileOutputDelimited_31
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_31
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_31 begin ] stop
					 */

					/**
					 * [tJDBCInput_17 begin ] start
					 */

					ok_Hash.put("tJDBCInput_17", false);
					start_Hash.put("tJDBCInput_17", System.currentTimeMillis());
					currentComponent = "tJDBCInput_17";

					int tos_count_tJDBCInput_17 = 0;

					int nb_line_tJDBCInput_17 = 0;
					java.sql.Connection conn_tJDBCInput_17 = null;
					conn_tJDBCInput_17 = (java.sql.Connection) globalMap
							.get("conn_tJDBCConnection_1");
					if (null == conn_tJDBCInput_17) {
						java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCInput_17 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
								.get(KEY_DB_DATASOURCES);
						conn_tJDBCInput_17 = dataSources_tJDBCInput_17.get("")
								.getConnection();
						// globalMap.put("conn_tJDBCConnection_1",
						// conn_tJDBCInput_17);
					}

					java.sql.Statement stmt_tJDBCInput_17 = conn_tJDBCInput_17
							.createStatement();

					String dbquery_tJDBCInput_17 = context.currentQuery;

					globalMap.put("tJDBCInput_17_QUERY", dbquery_tJDBCInput_17);

					java.sql.ResultSet rs_tJDBCInput_17 = stmt_tJDBCInput_17
							.executeQuery(dbquery_tJDBCInput_17);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_17 = rs_tJDBCInput_17
							.getMetaData();
					int colQtyInRs_tJDBCInput_17 = rsmd_tJDBCInput_17
							.getColumnCount();

					String tmpContent_tJDBCInput_17 = null;
					int column_index_tJDBCInput_17 = 1;
					while (rs_tJDBCInput_17.next()) {
						nb_line_tJDBCInput_17++;

						column_index_tJDBCInput_17 = 1;

						if (colQtyInRs_tJDBCInput_17 < column_index_tJDBCInput_17) {
							row37.ENCOUNTER_NUM = null;
						} else {

							if (rs_tJDBCInput_17
									.getObject(column_index_tJDBCInput_17) != null) {
								row37.ENCOUNTER_NUM = rs_tJDBCInput_17
										.getBigDecimal(column_index_tJDBCInput_17);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}
						column_index_tJDBCInput_17 = 2;

						if (colQtyInRs_tJDBCInput_17 < column_index_tJDBCInput_17) {
							row37.PATIENT_NUM = null;
						} else {

							if (rs_tJDBCInput_17
									.getObject(column_index_tJDBCInput_17) != null) {
								row37.PATIENT_NUM = rs_tJDBCInput_17
										.getBigDecimal(column_index_tJDBCInput_17);
							} else {
								row37.PATIENT_NUM = null;
							}

							if (rs_tJDBCInput_17.wasNull()) {
								row37.PATIENT_NUM = null;
							}
						}
						column_index_tJDBCInput_17 = 3;

						if (colQtyInRs_tJDBCInput_17 < column_index_tJDBCInput_17) {
							row37.ACTIVE_STATUS_CD = null;
						} else {

							tmpContent_tJDBCInput_17 = rs_tJDBCInput_17
									.getString(column_index_tJDBCInput_17);
							if (tmpContent_tJDBCInput_17 != null) {
								row37.ACTIVE_STATUS_CD = tmpContent_tJDBCInput_17;
							} else {
								row37.ACTIVE_STATUS_CD = null;
							}

							if (rs_tJDBCInput_17.wasNull()) {
								row37.ACTIVE_STATUS_CD = null;
							}
						}
						column_index_tJDBCInput_17 = 4;

						if (colQtyInRs_tJDBCInput_17 < column_index_tJDBCInput_17) {
							row37.START_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_17 = null;
							try {
								date_tJDBCInput_17 = rs_tJDBCInput_17
										.getTimestamp(column_index_tJDBCInput_17);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_17 = rs_tJDBCInput_17
										.getDate(column_index_tJDBCInput_17);
							}
							row37.START_DATE = date_tJDBCInput_17;

							if (rs_tJDBCInput_17.wasNull()) {
								row37.START_DATE = null;
							}
						}
						column_index_tJDBCInput_17 = 5;

						if (colQtyInRs_tJDBCInput_17 < column_index_tJDBCInput_17) {
							row37.END_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_17 = null;
							try {
								date_tJDBCInput_17 = rs_tJDBCInput_17
										.getTimestamp(column_index_tJDBCInput_17);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_17 = rs_tJDBCInput_17
										.getDate(column_index_tJDBCInput_17);
							}
							row37.END_DATE = date_tJDBCInput_17;

							if (rs_tJDBCInput_17.wasNull()) {
								row37.END_DATE = null;
							}
						}
						column_index_tJDBCInput_17 = 6;

						if (colQtyInRs_tJDBCInput_17 < column_index_tJDBCInput_17) {
							row37.INOUT_CD = null;
						} else {

							tmpContent_tJDBCInput_17 = rs_tJDBCInput_17
									.getString(column_index_tJDBCInput_17);
							if (tmpContent_tJDBCInput_17 != null) {
								row37.INOUT_CD = tmpContent_tJDBCInput_17;
							} else {
								row37.INOUT_CD = null;
							}

							if (rs_tJDBCInput_17.wasNull()) {
								row37.INOUT_CD = null;
							}
						}
						column_index_tJDBCInput_17 = 7;

						if (colQtyInRs_tJDBCInput_17 < column_index_tJDBCInput_17) {
							row37.LOCATION_CD = null;
						} else {

							tmpContent_tJDBCInput_17 = rs_tJDBCInput_17
									.getString(column_index_tJDBCInput_17);
							if (tmpContent_tJDBCInput_17 != null) {
								row37.LOCATION_CD = tmpContent_tJDBCInput_17;
							} else {
								row37.LOCATION_CD = null;
							}

							if (rs_tJDBCInput_17.wasNull()) {
								row37.LOCATION_CD = null;
							}
						}
						column_index_tJDBCInput_17 = 8;

						if (colQtyInRs_tJDBCInput_17 < column_index_tJDBCInput_17) {
							row37.LOCATION_PATH = null;
						} else {

							tmpContent_tJDBCInput_17 = rs_tJDBCInput_17
									.getString(column_index_tJDBCInput_17);
							if (tmpContent_tJDBCInput_17 != null) {
								row37.LOCATION_PATH = tmpContent_tJDBCInput_17;
							} else {
								row37.LOCATION_PATH = null;
							}

							if (rs_tJDBCInput_17.wasNull()) {
								row37.LOCATION_PATH = null;
							}
						}
						column_index_tJDBCInput_17 = 9;

						if (colQtyInRs_tJDBCInput_17 < column_index_tJDBCInput_17) {
							row37.LENGTH_OF_STAY = null;
						} else {

							if (rs_tJDBCInput_17
									.getObject(column_index_tJDBCInput_17) != null) {
								row37.LENGTH_OF_STAY = rs_tJDBCInput_17
										.getInt(column_index_tJDBCInput_17);
							} else {
								row37.LENGTH_OF_STAY = null;
							}

							if (rs_tJDBCInput_17.wasNull()) {
								row37.LENGTH_OF_STAY = null;
							}
						}
						column_index_tJDBCInput_17 = 10;

						if (colQtyInRs_tJDBCInput_17 < column_index_tJDBCInput_17) {
							row37.VISIT_BLOB = null;
						} else {

							tmpContent_tJDBCInput_17 = rs_tJDBCInput_17
									.getString(column_index_tJDBCInput_17);
							if (tmpContent_tJDBCInput_17 != null) {
								row37.VISIT_BLOB = tmpContent_tJDBCInput_17;
							} else {
								row37.VISIT_BLOB = null;
							}

							if (rs_tJDBCInput_17.wasNull()) {
								row37.VISIT_BLOB = null;
							}
						}
						column_index_tJDBCInput_17 = 11;

						if (colQtyInRs_tJDBCInput_17 < column_index_tJDBCInput_17) {
							row37.UPDATE_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_17 = null;
							try {
								date_tJDBCInput_17 = rs_tJDBCInput_17
										.getTimestamp(column_index_tJDBCInput_17);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_17 = rs_tJDBCInput_17
										.getDate(column_index_tJDBCInput_17);
							}
							row37.UPDATE_DATE = date_tJDBCInput_17;

							if (rs_tJDBCInput_17.wasNull()) {
								row37.UPDATE_DATE = null;
							}
						}
						column_index_tJDBCInput_17 = 12;

						if (colQtyInRs_tJDBCInput_17 < column_index_tJDBCInput_17) {
							row37.DOWNLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_17 = null;
							try {
								date_tJDBCInput_17 = rs_tJDBCInput_17
										.getTimestamp(column_index_tJDBCInput_17);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_17 = rs_tJDBCInput_17
										.getDate(column_index_tJDBCInput_17);
							}
							row37.DOWNLOAD_DATE = date_tJDBCInput_17;

							if (rs_tJDBCInput_17.wasNull()) {
								row37.DOWNLOAD_DATE = null;
							}
						}
						column_index_tJDBCInput_17 = 13;

						if (colQtyInRs_tJDBCInput_17 < column_index_tJDBCInput_17) {
							row37.IMPORT_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_17 = null;
							try {
								date_tJDBCInput_17 = rs_tJDBCInput_17
										.getTimestamp(column_index_tJDBCInput_17);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_17 = rs_tJDBCInput_17
										.getDate(column_index_tJDBCInput_17);
							}
							row37.IMPORT_DATE = date_tJDBCInput_17;

							if (rs_tJDBCInput_17.wasNull()) {
								row37.IMPORT_DATE = null;
							}
						}
						column_index_tJDBCInput_17 = 14;

						if (colQtyInRs_tJDBCInput_17 < column_index_tJDBCInput_17) {
							row37.SOURCESYSTEM_CD = null;
						} else {

							tmpContent_tJDBCInput_17 = rs_tJDBCInput_17
									.getString(column_index_tJDBCInput_17);
							if (tmpContent_tJDBCInput_17 != null) {
								row37.SOURCESYSTEM_CD = tmpContent_tJDBCInput_17;
							} else {
								row37.SOURCESYSTEM_CD = null;
							}

							if (rs_tJDBCInput_17.wasNull()) {
								row37.SOURCESYSTEM_CD = null;
							}
						}
						column_index_tJDBCInput_17 = 15;

						if (colQtyInRs_tJDBCInput_17 < column_index_tJDBCInput_17) {
							row37.UPLOAD_ID = null;
						} else {

							tmpContent_tJDBCInput_17 = rs_tJDBCInput_17
									.getString(column_index_tJDBCInput_17);
							if (tmpContent_tJDBCInput_17 != null) {
								row37.UPLOAD_ID = tmpContent_tJDBCInput_17;
							} else {
								row37.UPLOAD_ID = null;
							}

							if (rs_tJDBCInput_17.wasNull()) {
								row37.UPLOAD_ID = null;
							}
						}

						/**
						 * [tJDBCInput_17 begin ] stop
						 */
						/**
						 * [tJDBCInput_17 main ] start
						 */

						currentComponent = "tJDBCInput_17";

						tos_count_tJDBCInput_17++;

						/**
						 * [tJDBCInput_17 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_31 main ] start
						 */

						currentComponent = "tFileOutputDelimited_31";

						String[] rowtFileOutputDelimited_31 = new String[15];

						rowtFileOutputDelimited_31[0] = row37.ENCOUNTER_NUM == null ? ""
								: row37.ENCOUNTER_NUM.toPlainString();

						rowtFileOutputDelimited_31[1] = row37.PATIENT_NUM == null ? ""
								: row37.PATIENT_NUM.toPlainString();

						rowtFileOutputDelimited_31[2] = row37.ACTIVE_STATUS_CD == null ? ""
								: row37.ACTIVE_STATUS_CD;

						rowtFileOutputDelimited_31[3] = row37.START_DATE == null ? ""
								: FormatterUtils.format_Date(row37.START_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_31[4] = row37.END_DATE == null ? ""
								: FormatterUtils.format_Date(row37.END_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_31[5] = row37.INOUT_CD == null ? ""
								: row37.INOUT_CD;

						rowtFileOutputDelimited_31[6] = row37.LOCATION_CD == null ? ""
								: row37.LOCATION_CD;

						rowtFileOutputDelimited_31[7] = row37.LOCATION_PATH == null ? ""
								: row37.LOCATION_PATH;

						rowtFileOutputDelimited_31[8] = row37.LENGTH_OF_STAY == null ? ""
								: String.valueOf(row37.LENGTH_OF_STAY);

						rowtFileOutputDelimited_31[9] = row37.VISIT_BLOB == null ? ""
								: row37.VISIT_BLOB;

						rowtFileOutputDelimited_31[10] = row37.UPDATE_DATE == null ? ""
								: FormatterUtils.format_Date(row37.UPDATE_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_31[11] = row37.DOWNLOAD_DATE == null ? ""
								: FormatterUtils.format_Date(
										row37.DOWNLOAD_DATE, "dd-MM-yyyy");

						rowtFileOutputDelimited_31[12] = row37.IMPORT_DATE == null ? ""
								: FormatterUtils.format_Date(row37.IMPORT_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_31[13] = row37.SOURCESYSTEM_CD == null ? ""
								: row37.SOURCESYSTEM_CD;

						rowtFileOutputDelimited_31[14] = row37.UPLOAD_ID == null ? ""
								: row37.UPLOAD_ID;

						nb_line_tFileOutputDelimited_31++;
						CsvWritertFileOutputDelimited_31
								.writeNext(rowtFileOutputDelimited_31);

						tos_count_tFileOutputDelimited_31++;

						/**
						 * [tFileOutputDelimited_31 main ] stop
						 */

						/**
						 * [tJDBCInput_17 end ] start
						 */

						currentComponent = "tJDBCInput_17";

					}
					rs_tJDBCInput_17.close();
					stmt_tJDBCInput_17.close();

					globalMap.put("tJDBCInput_17_NB_LINE",
							nb_line_tJDBCInput_17);

					ok_Hash.put("tJDBCInput_17", true);
					end_Hash.put("tJDBCInput_17", System.currentTimeMillis());

					/**
					 * [tJDBCInput_17 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_31 end ] start
					 */

					currentComponent = "tFileOutputDelimited_31";

				} finally {

					if (CsvWritertFileOutputDelimited_31 != null) {
						CsvWritertFileOutputDelimited_31.close();
					}
					globalMap.put("tFileOutputDelimited_31_NB_LINE",
							nb_line_tFileOutputDelimited_31);
				} // finally

				ok_Hash.put("tFileOutputDelimited_31", true);
				end_Hash.put("tFileOutputDelimited_31",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_31 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCInput_17_SUBPROCESS_STATE", 1);
	}

	public void tJava_13Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_13 begin ] start
				 */

				ok_Hash.put("tJava_13", false);
				start_Hash.put("tJava_13", System.currentTimeMillis());
				currentComponent = "tJava_13";

				int tos_count_tJava_13 = 0;

				System.out.println("Extracting Source Data...");
				StatusListener.setStatus(30, "Transforming Staging to Target",
						"");
				StatusListener.setSubStatus(0, null);

				/**
				 * [tJava_13 begin ] stop
				 */
				/**
				 * [tJava_13 main ] start
				 */

				currentComponent = "tJava_13";

				tos_count_tJava_13++;

				/**
				 * [tJava_13 main ] stop
				 */
				/**
				 * [tJava_13 end ] start
				 */

				currentComponent = "tJava_13";

				ok_Hash.put("tJava_13", true);
				end_Hash.put("tJava_13", System.currentTimeMillis());

				/**
				 * [tJava_13 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_13:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_13_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String MODIFIER_PATH;

		public String getMODIFIER_PATH() {
			return this.MODIFIER_PATH;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String MODIFIER_BLOB;

		public String getMODIFIER_BLOB() {
			return this.MODIFIER_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.MODIFIER_PATH = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.MODIFIER_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MODIFIER_PATH, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.MODIFIER_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MODIFIER_PATH=" + MODIFIER_PATH);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",MODIFIER_BLOB=" + MODIFIER_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfto_conc_dimStruct implements
			routines.system.IPersistableRow<copyOfto_conc_dimStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String MODIFIER_PATH;

		public String getMODIFIER_PATH() {
			return this.MODIFIER_PATH;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String MODIFIER_BLOB;

		public String getMODIFIER_BLOB() {
			return this.MODIFIER_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.MODIFIER_PATH = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.MODIFIER_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MODIFIER_PATH, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.MODIFIER_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MODIFIER_PATH=" + MODIFIER_PATH);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",MODIFIER_BLOB=" + MODIFIER_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfto_conc_dimStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String MODIFIER_PATH;

		public String getMODIFIER_PATH() {
			return this.MODIFIER_PATH;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String MODIFIER_BLOB;

		public String getMODIFIER_BLOB() {
			return this.MODIFIER_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.MODIFIER_PATH = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.MODIFIER_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MODIFIER_PATH, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.MODIFIER_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MODIFIER_PATH=" + MODIFIER_PATH);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",MODIFIER_BLOB=" + MODIFIER_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row18Struct implements
			routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.CONCEPT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.CONCEPT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class to_conc_dimStruct implements
			routines.system.IPersistableRow<to_conc_dimStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.CONCEPT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.CONCEPT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(to_conc_dimStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.CONCEPT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.CONCEPT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row19Struct implements
			routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public int C_HLEVEL;

		public int getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String C_SYNONYM_CD;

		public String getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public BigDecimal C_TOTALNUM;

		public BigDecimal getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public String C_COLUMNDATATYPE;

		public String getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public Object C_COMMENT;

		public Object getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.C_HLEVEL = dis.readInt();

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					this.C_SYNONYM_CD = readString(dis);

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = (BigDecimal) dis.readObject();

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					this.C_COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = (Object) dis.readObject();

					this.C_TOOLTIP = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.C_HLEVEL);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.C_SYNONYM_CD, dos);

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// BigDecimal

				dos.writeObject(this.C_TOTALNUM);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// String

				writeString(this.C_COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// Object

				dos.writeObject(this.C_COMMENT);

				// String

				writeString(this.C_TOOLTIP, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + C_SYNONYM_CD);
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + String.valueOf(C_TOTALNUM));
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + C_COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + String.valueOf(C_COMMENT));
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class target_ontStruct implements
			routines.system.IPersistableRow<target_ontStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public int C_HLEVEL;

		public int getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String C_SYNONYM_CD;

		public String getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public BigDecimal C_TOTALNUM;

		public BigDecimal getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public String C_COLUMNDATATYPE;

		public String getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public Object C_COMMENT;

		public Object getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.C_HLEVEL = dis.readInt();

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					this.C_SYNONYM_CD = readString(dis);

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = (BigDecimal) dis.readObject();

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					this.C_COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = (Object) dis.readObject();

					this.C_TOOLTIP = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.C_HLEVEL);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.C_SYNONYM_CD, dos);

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// BigDecimal

				dos.writeObject(this.C_TOTALNUM);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// String

				writeString(this.C_COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// Object

				dos.writeObject(this.C_COMMENT);

				// String

				writeString(this.C_TOOLTIP, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + C_SYNONYM_CD);
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + String.valueOf(C_TOTALNUM));
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + C_COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + String.valueOf(C_COMMENT));
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(target_ontStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class to_cd_dimStruct implements
			routines.system.IPersistableRow<to_cd_dimStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.CONCEPT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.CONCEPT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(to_cd_dimStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class to_mod_dimStruct implements
			routines.system.IPersistableRow<to_mod_dimStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String MODIFIER_PATH;

		public String getMODIFIER_PATH() {
			return this.MODIFIER_PATH;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String MODIFIER_BLOB;

		public String getMODIFIER_BLOB() {
			return this.MODIFIER_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.MODIFIER_PATH = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.MODIFIER_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MODIFIER_PATH, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.MODIFIER_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MODIFIER_PATH=" + MODIFIER_PATH);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",MODIFIER_BLOB=" + MODIFIER_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(to_mod_dimStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class from_OE_ONTStruct implements
			routines.system.IPersistableRow<from_OE_ONTStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public Integer TARGET_ID;

		public Integer getTARGET_ID() {
			return this.TARGET_ID;
		}

		public Integer TREE_LEVEL;

		public Integer getTREE_LEVEL() {
			return this.TREE_LEVEL;
		}

		public String TREE_PATH;

		public String getTREE_PATH() {
			return this.TREE_PATH;
		}

		public String STAGING_PATH;

		public String getSTAGING_PATH() {
			return this.STAGING_PATH;
		}

		public String STAGING_DIMENSION;

		public String getSTAGING_DIMENSION() {
			return this.STAGING_DIMENSION;
		}

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		public String STARTDATE_STAGING_PATH;

		public String getSTARTDATE_STAGING_PATH() {
			return this.STARTDATE_STAGING_PATH;
		}

		public String ENDDATE_STAGING_PATH;

		public String getENDDATE_STAGING_PATH() {
			return this.ENDDATE_STAGING_PATH;
		}

		public String VISUALATTRIBUTES;

		public String getVISUALATTRIBUTES() {
			return this.VISUALATTRIBUTES;
		}

		public String BASECODE;

		public String getBASECODE() {
			return this.BASECODE;
		}

		public String METADATAXML;

		public String getMETADATAXML() {
			return this.METADATAXML;
		}

		public String COLUMNDATATYPE;

		public String getCOLUMNDATATYPE() {
			return this.COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String TOOLTIP;

		public String getTOOLTIP() {
			return this.TOOLTIP;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.TARGET_ID = readInteger(dis);

					this.TREE_LEVEL = readInteger(dis);

					this.TREE_PATH = readString(dis);

					this.STAGING_PATH = readString(dis);

					this.STAGING_DIMENSION = readString(dis);

					this.NAME = readString(dis);

					this.STARTDATE_STAGING_PATH = readString(dis);

					this.ENDDATE_STAGING_PATH = readString(dis);

					this.VISUALATTRIBUTES = readString(dis);

					this.BASECODE = readString(dis);

					this.METADATAXML = readString(dis);

					this.COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_COMMENT = readString(dis);

					this.TOOLTIP = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.TARGET_ID, dos);

				// Integer

				writeInteger(this.TREE_LEVEL, dos);

				// String

				writeString(this.TREE_PATH, dos);

				// String

				writeString(this.STAGING_PATH, dos);

				// String

				writeString(this.STAGING_DIMENSION, dos);

				// String

				writeString(this.NAME, dos);

				// String

				writeString(this.STARTDATE_STAGING_PATH, dos);

				// String

				writeString(this.ENDDATE_STAGING_PATH, dos);

				// String

				writeString(this.VISUALATTRIBUTES, dos);

				// String

				writeString(this.BASECODE, dos);

				// String

				writeString(this.METADATAXML, dos);

				// String

				writeString(this.COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.TOOLTIP, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TARGET_ID=" + String.valueOf(TARGET_ID));
			sb.append(",TREE_LEVEL=" + String.valueOf(TREE_LEVEL));
			sb.append(",TREE_PATH=" + TREE_PATH);
			sb.append(",STAGING_PATH=" + STAGING_PATH);
			sb.append(",STAGING_DIMENSION=" + STAGING_DIMENSION);
			sb.append(",NAME=" + NAME);
			sb.append(",STARTDATE_STAGING_PATH=" + STARTDATE_STAGING_PATH);
			sb.append(",ENDDATE_STAGING_PATH=" + ENDDATE_STAGING_PATH);
			sb.append(",VISUALATTRIBUTES=" + VISUALATTRIBUTES);
			sb.append(",BASECODE=" + BASECODE);
			sb.append(",METADATAXML=" + METADATAXML);
			sb.append(",COLUMNDATATYPE=" + COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",TOOLTIP=" + TOOLTIP);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(from_OE_ONTStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_1Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public Integer TARGET_ID;

		public Integer getTARGET_ID() {
			return this.TARGET_ID;
		}

		public Integer TREE_LEVEL;

		public Integer getTREE_LEVEL() {
			return this.TREE_LEVEL;
		}

		public String TREE_PATH;

		public String getTREE_PATH() {
			return this.TREE_PATH;
		}

		public String STAGING_PATH;

		public String getSTAGING_PATH() {
			return this.STAGING_PATH;
		}

		public String STAGING_DIMENSION;

		public String getSTAGING_DIMENSION() {
			return this.STAGING_DIMENSION;
		}

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		public String STARTDATE_STAGING_PATH;

		public String getSTARTDATE_STAGING_PATH() {
			return this.STARTDATE_STAGING_PATH;
		}

		public String ENDDATE_STAGING_PATH;

		public String getENDDATE_STAGING_PATH() {
			return this.ENDDATE_STAGING_PATH;
		}

		public String VISUALATTRIBUTES;

		public String getVISUALATTRIBUTES() {
			return this.VISUALATTRIBUTES;
		}

		public String BASECODE;

		public String getBASECODE() {
			return this.BASECODE;
		}

		public String METADATAXML;

		public String getMETADATAXML() {
			return this.METADATAXML;
		}

		public String COLUMNDATATYPE;

		public String getCOLUMNDATATYPE() {
			return this.COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String TOOLTIP;

		public String getTOOLTIP() {
			return this.TOOLTIP;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.TARGET_ID = readInteger(dis);

					this.TREE_LEVEL = readInteger(dis);

					this.TREE_PATH = readString(dis);

					this.STAGING_PATH = readString(dis);

					this.STAGING_DIMENSION = readString(dis);

					this.NAME = readString(dis);

					this.STARTDATE_STAGING_PATH = readString(dis);

					this.ENDDATE_STAGING_PATH = readString(dis);

					this.VISUALATTRIBUTES = readString(dis);

					this.BASECODE = readString(dis);

					this.METADATAXML = readString(dis);

					this.COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_COMMENT = readString(dis);

					this.TOOLTIP = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.TARGET_ID, dos);

				// Integer

				writeInteger(this.TREE_LEVEL, dos);

				// String

				writeString(this.TREE_PATH, dos);

				// String

				writeString(this.STAGING_PATH, dos);

				// String

				writeString(this.STAGING_DIMENSION, dos);

				// String

				writeString(this.NAME, dos);

				// String

				writeString(this.STARTDATE_STAGING_PATH, dos);

				// String

				writeString(this.ENDDATE_STAGING_PATH, dos);

				// String

				writeString(this.VISUALATTRIBUTES, dos);

				// String

				writeString(this.BASECODE, dos);

				// String

				writeString(this.METADATAXML, dos);

				// String

				writeString(this.COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.TOOLTIP, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TARGET_ID=" + String.valueOf(TARGET_ID));
			sb.append(",TREE_LEVEL=" + String.valueOf(TREE_LEVEL));
			sb.append(",TREE_PATH=" + TREE_PATH);
			sb.append(",STAGING_PATH=" + STAGING_PATH);
			sb.append(",STAGING_DIMENSION=" + STAGING_DIMENSION);
			sb.append(",NAME=" + NAME);
			sb.append(",STARTDATE_STAGING_PATH=" + STARTDATE_STAGING_PATH);
			sb.append(",ENDDATE_STAGING_PATH=" + ENDDATE_STAGING_PATH);
			sb.append(",VISUALATTRIBUTES=" + VISUALATTRIBUTES);
			sb.append(",BASECODE=" + BASECODE);
			sb.append(",METADATAXML=" + METADATAXML);
			sb.append(",COLUMNDATATYPE=" + COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",TOOLTIP=" + TOOLTIP);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_2Process(globalMap);
				tFileInputDelimited_31Process(globalMap);
				tFileInputDelimited_32Process(globalMap);

				from_OE_ONTStruct from_OE_ONT = new from_OE_ONTStruct();
				target_ontStruct target_ont = new target_ontStruct();
				row19Struct row19 = new row19Struct();
				to_cd_dimStruct to_cd_dim = new to_cd_dimStruct();
				row4Struct row4 = new row4Struct();
				to_conc_dimStruct to_conc_dim = new to_conc_dimStruct();
				row18Struct row18 = new row18Struct();
				to_mod_dimStruct to_mod_dim = new to_mod_dimStruct();
				row11Struct row11 = new row11Struct();
				copyOfto_conc_dimStruct copyOfto_conc_dim = new copyOfto_conc_dimStruct();
				row12Struct row12 = new row12Struct();

				/**
				 * [tFileOutputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_4", false);
				start_Hash.put("tFileOutputDelimited_4",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_4";

				int tos_count_tFileOutputDelimited_4 = 0;

				String fileName_tFileOutputDelimited_4 = "";
				fileName_tFileOutputDelimited_4 = (new java.io.File(
						context.folderMain + context.folderOutput
								+ "/ontology.csv")).getAbsolutePath().replace(
						"\\", "/");
				String fullName_tFileOutputDelimited_4 = null;
				String extension_tFileOutputDelimited_4 = null;
				String directory_tFileOutputDelimited_4 = null;
				if ((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(0, fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
							.substring(0, fileName_tFileOutputDelimited_4
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(0, fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					}
					directory_tFileOutputDelimited_4 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_4 = true;
				java.io.File filetFileOutputDelimited_4 = new java.io.File(
						fileName_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME",
						fileName_tFileOutputDelimited_4);

				String[] headColutFileOutputDelimited_4 = new String[25];
				class CSVBasicSet_tFileOutputDelimited_4 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_4[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_4 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_4[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_4[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_4 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_4[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_4[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_4 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_4[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_4 = 0;
				int splitEvery_tFileOutputDelimited_4 = 1000;
				int splitedFileNo_tFileOutputDelimited_4 = 0;
				int currentRow_tFileOutputDelimited_4 = 0;

				CSVBasicSet_tFileOutputDelimited_4 csvSettings_tFileOutputDelimited_4 = new CSVBasicSet_tFileOutputDelimited_4();
				csvSettings_tFileOutputDelimited_4.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_4.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_4.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_4 != null
						&& directory_tFileOutputDelimited_4.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_4 = new java.io.File(
							directory_tFileOutputDelimited_4);
					if (!dir_tFileOutputDelimited_4.exists()) {
						dir_tFileOutputDelimited_4.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_4 = null;
				try {
					CsvWritertFileOutputDelimited_4 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_4,
													false), "UTF-8")));
					CsvWritertFileOutputDelimited_4
							.setSeparator(csvSettings_tFileOutputDelimited_4
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_4
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_4.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_4.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_4.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_4
										.getRowDelim());
					}

					if (filetFileOutputDelimited_4.length() == 0) {

						headColutFileOutputDelimited_4[0] = "C_HLEVEL";

						headColutFileOutputDelimited_4[1] = "C_FULLNAME";

						headColutFileOutputDelimited_4[2] = "C_NAME";

						headColutFileOutputDelimited_4[3] = "C_SYNONYM_CD";

						headColutFileOutputDelimited_4[4] = "C_VISUALATTRIBUTES";

						headColutFileOutputDelimited_4[5] = "C_TOTALNUM";

						headColutFileOutputDelimited_4[6] = "C_BASECODE";

						headColutFileOutputDelimited_4[7] = "C_METADATAXML";

						headColutFileOutputDelimited_4[8] = "C_FACTTABLECOLUMN";

						headColutFileOutputDelimited_4[9] = "C_TABLENAME";

						headColutFileOutputDelimited_4[10] = "C_COLUMNNAME";

						headColutFileOutputDelimited_4[11] = "C_COLUMNDATATYPE";

						headColutFileOutputDelimited_4[12] = "C_OPERATOR";

						headColutFileOutputDelimited_4[13] = "C_DIMCODE";

						headColutFileOutputDelimited_4[14] = "C_COMMENT";

						headColutFileOutputDelimited_4[15] = "C_TOOLTIP";

						headColutFileOutputDelimited_4[16] = "M_APPLIED_PATH";

						headColutFileOutputDelimited_4[17] = "UPDATE_DATE";

						headColutFileOutputDelimited_4[18] = "DOWNLOAD_DATE";

						headColutFileOutputDelimited_4[19] = "IMPORT_DATE";

						headColutFileOutputDelimited_4[20] = "SOURCESYSTEM_CD";

						headColutFileOutputDelimited_4[21] = "VALUETYPE_CD";

						headColutFileOutputDelimited_4[22] = "M_EXCLUSION_CD";

						headColutFileOutputDelimited_4[23] = "C_PATH";

						headColutFileOutputDelimited_4[24] = "C_SYMBOL";

						CsvWritertFileOutputDelimited_4
								.writeNext(headColutFileOutputDelimited_4);
						CsvWritertFileOutputDelimited_4.flush();

					}

					CsvWritertFileOutputDelimited_4
							.setEscapeChar(csvSettings_tFileOutputDelimited_4
									.getEscapeChar());
					CsvWritertFileOutputDelimited_4
							.setQuoteChar(csvSettings_tFileOutputDelimited_4
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_4
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_4 begin ] stop
					 */

					/**
					 * [tUniqRow_4 begin ] start
					 */

					ok_Hash.put("tUniqRow_4", false);
					start_Hash.put("tUniqRow_4", System.currentTimeMillis());
					currentComponent = "tUniqRow_4";

					int tos_count_tUniqRow_4 = 0;

					class KeyStruct_tUniqRow_4 {

						private static final int DEFAULT_HASHCODE = 1;
						private static final int PRIME = 31;
						private int hashCode = DEFAULT_HASHCODE;
						public boolean hashCodeDirty = true;

						String C_FULLNAME;

						@Override
						public int hashCode() {
							if (this.hashCodeDirty) {
								final int prime = PRIME;
								int result = DEFAULT_HASHCODE;

								result = prime
										* result
										+ ((this.C_FULLNAME == null) ? 0
												: this.C_FULLNAME.hashCode());

								this.hashCode = result;
								this.hashCodeDirty = false;
							}
							return this.hashCode;
						}

						@Override
						public boolean equals(Object obj) {
							if (this == obj)
								return true;
							if (obj == null)
								return false;
							if (getClass() != obj.getClass())
								return false;
							final KeyStruct_tUniqRow_4 other = (KeyStruct_tUniqRow_4) obj;

							if (this.C_FULLNAME == null) {
								if (other.C_FULLNAME != null)
									return false;
							} else if (!this.C_FULLNAME
									.equals(other.C_FULLNAME))
								return false;

							return true;
						}

					}

					int nb_uniques_tUniqRow_4 = 0;
					int nb_duplicates_tUniqRow_4 = 0;
					KeyStruct_tUniqRow_4 finder_tUniqRow_4 = new KeyStruct_tUniqRow_4();
					java.util.Set<KeyStruct_tUniqRow_4> keystUniqRow_4 = new java.util.HashSet<KeyStruct_tUniqRow_4>();

					/**
					 * [tUniqRow_4 begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_5 begin ] start
					 */

					ok_Hash.put("tFileOutputDelimited_5", false);
					start_Hash.put("tFileOutputDelimited_5",
							System.currentTimeMillis());
					currentComponent = "tFileOutputDelimited_5";

					int tos_count_tFileOutputDelimited_5 = 0;

					String fileName_tFileOutputDelimited_5 = "";
					fileName_tFileOutputDelimited_5 = (new java.io.File(
							context.folderMain + context.folderOutput
									+ "/concept_dimension.csv"))
							.getAbsolutePath().replace("\\", "/");
					String fullName_tFileOutputDelimited_5 = null;
					String extension_tFileOutputDelimited_5 = null;
					String directory_tFileOutputDelimited_5 = null;
					if ((fileName_tFileOutputDelimited_5.indexOf("/") != -1)) {
						if (fileName_tFileOutputDelimited_5.lastIndexOf(".") < fileName_tFileOutputDelimited_5
								.lastIndexOf("/")) {
							fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
							extension_tFileOutputDelimited_5 = "";
						} else {
							fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
									.substring(0,
											fileName_tFileOutputDelimited_5
													.lastIndexOf("."));
							extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
									.substring(fileName_tFileOutputDelimited_5
											.lastIndexOf("."));
						}
						directory_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(0, fileName_tFileOutputDelimited_5
										.lastIndexOf("/"));
					} else {
						if (fileName_tFileOutputDelimited_5.lastIndexOf(".") != -1) {
							fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
									.substring(0,
											fileName_tFileOutputDelimited_5
													.lastIndexOf("."));
							extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
									.substring(fileName_tFileOutputDelimited_5
											.lastIndexOf("."));
						} else {
							fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
							extension_tFileOutputDelimited_5 = "";
						}
						directory_tFileOutputDelimited_5 = "";
					}
					boolean isFileGenerated_tFileOutputDelimited_5 = true;
					java.io.File filetFileOutputDelimited_5 = new java.io.File(
							fileName_tFileOutputDelimited_5);
					globalMap.put("tFileOutputDelimited_5_FILE_NAME",
							fileName_tFileOutputDelimited_5);

					String[] headColutFileOutputDelimited_5 = new String[9];
					class CSVBasicSet_tFileOutputDelimited_5 {
						private char field_Delim;
						private char row_Delim;
						private char escape;
						private char textEnclosure;
						private boolean useCRLFRecordDelimiter;

						public boolean isUseCRLFRecordDelimiter() {
							return useCRLFRecordDelimiter;
						}

						public void setFieldSeparator(String fieldSep)
								throws IllegalArgumentException {
							char field_Delim_tFileOutputDelimited_5[] = null;

							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (fieldSep.length() > 0) {
								field_Delim_tFileOutputDelimited_5 = fieldSep
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							this.field_Delim = field_Delim_tFileOutputDelimited_5[0];
						}

						public char getFieldDelim() {
							if (this.field_Delim == 0) {
								setFieldSeparator("\t");
							}
							return this.field_Delim;
						}

						public void setRowSeparator(String rowSep) {
							if ("\r\n".equals(rowSep)) {
								useCRLFRecordDelimiter = true;
								return;
							}
							char row_DelimtFileOutputDelimited_5[] = null;

							// support passing value (property: Row Separator)
							// by 'context.rs' or 'globalMap.get("rs")'.
							if (rowSep.length() > 0) {
								row_DelimtFileOutputDelimited_5 = rowSep
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Row Separator must be assigned a char.");
							}
							this.row_Delim = row_DelimtFileOutputDelimited_5[0];
						}

						public char getRowDelim() {
							if (this.row_Delim == 0) {
								setRowSeparator("\n");
							}
							return this.row_Delim;
						}

						public void setEscapeAndTextEnclosure(String strEscape,
								String strTextEnclosure)
								throws IllegalArgumentException {
							if (strEscape.length() <= 0) {
								throw new IllegalArgumentException(
										"Escape Char must be assigned a char.");
							}

							if ("".equals(strTextEnclosure))
								strTextEnclosure = "\0";
							char textEnclosure_tFileOutputDelimited_5[] = null;

							if (strTextEnclosure.length() > 0) {
								textEnclosure_tFileOutputDelimited_5 = strTextEnclosure
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Text Enclosure must be assigned a char.");
							}

							this.textEnclosure = textEnclosure_tFileOutputDelimited_5[0];

							if (("\\").equals(strEscape)) {
								this.escape = '\\';
							} else if (strEscape.equals(strTextEnclosure)) {
								this.escape = this.textEnclosure;
							} else {
								// the default escape mode is double escape
								this.escape = this.textEnclosure;
							}

						}

						public char getEscapeChar() {
							return (char) this.escape;
						}

						public char getTextEnclosure() {
							return this.textEnclosure;
						}
					}

					int nb_line_tFileOutputDelimited_5 = 0;
					int splitEvery_tFileOutputDelimited_5 = 1000;
					int splitedFileNo_tFileOutputDelimited_5 = 0;
					int currentRow_tFileOutputDelimited_5 = 0;

					CSVBasicSet_tFileOutputDelimited_5 csvSettings_tFileOutputDelimited_5 = new CSVBasicSet_tFileOutputDelimited_5();
					csvSettings_tFileOutputDelimited_5.setFieldSeparator("\t");
					csvSettings_tFileOutputDelimited_5.setRowSeparator("\n");
					csvSettings_tFileOutputDelimited_5
							.setEscapeAndTextEnclosure("\"", "\"");
					// create directory only if not exists
					if (directory_tFileOutputDelimited_5 != null
							&& directory_tFileOutputDelimited_5.trim().length() != 0) {
						java.io.File dir_tFileOutputDelimited_5 = new java.io.File(
								directory_tFileOutputDelimited_5);
						if (!dir_tFileOutputDelimited_5.exists()) {
							dir_tFileOutputDelimited_5.mkdirs();
						}
					}
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_5 = null;
					try {
						CsvWritertFileOutputDelimited_5 = new com.talend.csv.CSVWriter(
								new java.io.BufferedWriter(
										new java.io.OutputStreamWriter(
												new java.io.FileOutputStream(
														fileName_tFileOutputDelimited_5,
														false), "UTF-8")));
						CsvWritertFileOutputDelimited_5
								.setSeparator(csvSettings_tFileOutputDelimited_5
										.getFieldDelim());

						if (!csvSettings_tFileOutputDelimited_5
								.isUseCRLFRecordDelimiter()
								&& csvSettings_tFileOutputDelimited_5
										.getRowDelim() != '\r'
								&& csvSettings_tFileOutputDelimited_5
										.getRowDelim() != '\n') {
							CsvWritertFileOutputDelimited_5.setLineEnd(""
									+ csvSettings_tFileOutputDelimited_5
											.getRowDelim());
						}

						if (filetFileOutputDelimited_5.length() == 0) {

							headColutFileOutputDelimited_5[0] = "CONCEPT_PATH";

							headColutFileOutputDelimited_5[1] = "CONCEPT_CD";

							headColutFileOutputDelimited_5[2] = "NAME_CHAR";

							headColutFileOutputDelimited_5[3] = "CONCEPT_BLOB";

							headColutFileOutputDelimited_5[4] = "UPDATE_DATE";

							headColutFileOutputDelimited_5[5] = "DOWNLOAD_DATE";

							headColutFileOutputDelimited_5[6] = "IMPORT_DATE";

							headColutFileOutputDelimited_5[7] = "SOURCESYSTEM_CD";

							headColutFileOutputDelimited_5[8] = "UPLOAD_ID";

							CsvWritertFileOutputDelimited_5
									.writeNext(headColutFileOutputDelimited_5);
							CsvWritertFileOutputDelimited_5.flush();

						}

						CsvWritertFileOutputDelimited_5
								.setEscapeChar(csvSettings_tFileOutputDelimited_5
										.getEscapeChar());
						CsvWritertFileOutputDelimited_5
								.setQuoteChar(csvSettings_tFileOutputDelimited_5
										.getTextEnclosure());
						CsvWritertFileOutputDelimited_5
								.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

						/**
						 * [tFileOutputDelimited_5 begin ] stop
						 */

						/**
						 * [tUniqRow_3 begin ] start
						 */

						ok_Hash.put("tUniqRow_3", false);
						start_Hash
								.put("tUniqRow_3", System.currentTimeMillis());
						currentComponent = "tUniqRow_3";

						int tos_count_tUniqRow_3 = 0;

						class KeyStruct_tUniqRow_3 {

							private static final int DEFAULT_HASHCODE = 1;
							private static final int PRIME = 31;
							private int hashCode = DEFAULT_HASHCODE;
							public boolean hashCodeDirty = true;

							String CONCEPT_PATH;

							@Override
							public int hashCode() {
								if (this.hashCodeDirty) {
									final int prime = PRIME;
									int result = DEFAULT_HASHCODE;

									result = prime
											* result
											+ ((this.CONCEPT_PATH == null) ? 0
													: this.CONCEPT_PATH
															.hashCode());

									this.hashCode = result;
									this.hashCodeDirty = false;
								}
								return this.hashCode;
							}

							@Override
							public boolean equals(Object obj) {
								if (this == obj)
									return true;
								if (obj == null)
									return false;
								if (getClass() != obj.getClass())
									return false;
								final KeyStruct_tUniqRow_3 other = (KeyStruct_tUniqRow_3) obj;

								if (this.CONCEPT_PATH == null) {
									if (other.CONCEPT_PATH != null)
										return false;
								} else if (!this.CONCEPT_PATH
										.equals(other.CONCEPT_PATH))
									return false;

								return true;
							}

						}

						int nb_uniques_tUniqRow_3 = 0;
						int nb_duplicates_tUniqRow_3 = 0;
						KeyStruct_tUniqRow_3 finder_tUniqRow_3 = new KeyStruct_tUniqRow_3();
						java.util.Set<KeyStruct_tUniqRow_3> keystUniqRow_3 = new java.util.HashSet<KeyStruct_tUniqRow_3>();

						/**
						 * [tUniqRow_3 begin ] stop
						 */

						/**
						 * [tMap_2 begin ] start
						 */

						ok_Hash.put("tMap_2", false);
						start_Hash.put("tMap_2", System.currentTimeMillis());
						currentComponent = "tMap_2";

						int tos_count_tMap_2 = 0;

						// ###############################
						// # Lookup's keys initialization

						org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row48Struct> tHash_Lookup_row48 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row48Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row48Struct>) globalMap
								.get("tHash_Lookup_row48"));

						row48Struct row48HashKey = new row48Struct();
						row48Struct row48Default = new row48Struct();
						// ###############################

						// ###############################
						// # Vars initialization
						class Var__tMap_2__Struct {
						}
						Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
						// ###############################

						// ###############################
						// # Outputs initialization
						to_conc_dimStruct to_conc_dim_tmp = new to_conc_dimStruct();
						// ###############################

						/**
						 * [tMap_2 begin ] stop
						 */

						/**
						 * [tJavaRow_1 begin ] start
						 */

						ok_Hash.put("tJavaRow_1", false);
						start_Hash
								.put("tJavaRow_1", System.currentTimeMillis());
						currentComponent = "tJavaRow_1";

						int tos_count_tJavaRow_1 = 0;

						int nb_line_tJavaRow_1 = 0;

						/**
						 * [tJavaRow_1 begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_29 begin ] start
						 */

						ok_Hash.put("tFileOutputDelimited_29", false);
						start_Hash.put("tFileOutputDelimited_29",
								System.currentTimeMillis());
						currentComponent = "tFileOutputDelimited_29";

						int tos_count_tFileOutputDelimited_29 = 0;

						String fileName_tFileOutputDelimited_29 = "";
						fileName_tFileOutputDelimited_29 = (new java.io.File(
								context.folderMain + context.folderOutput
										+ "/modifier_dimension.csv"))
								.getAbsolutePath().replace("\\", "/");
						String fullName_tFileOutputDelimited_29 = null;
						String extension_tFileOutputDelimited_29 = null;
						String directory_tFileOutputDelimited_29 = null;
						if ((fileName_tFileOutputDelimited_29.indexOf("/") != -1)) {
							if (fileName_tFileOutputDelimited_29
									.lastIndexOf(".") < fileName_tFileOutputDelimited_29
									.lastIndexOf("/")) {
								fullName_tFileOutputDelimited_29 = fileName_tFileOutputDelimited_29;
								extension_tFileOutputDelimited_29 = "";
							} else {
								fullName_tFileOutputDelimited_29 = fileName_tFileOutputDelimited_29
										.substring(0,
												fileName_tFileOutputDelimited_29
														.lastIndexOf("."));
								extension_tFileOutputDelimited_29 = fileName_tFileOutputDelimited_29
										.substring(fileName_tFileOutputDelimited_29
												.lastIndexOf("."));
							}
							directory_tFileOutputDelimited_29 = fileName_tFileOutputDelimited_29
									.substring(0,
											fileName_tFileOutputDelimited_29
													.lastIndexOf("/"));
						} else {
							if (fileName_tFileOutputDelimited_29
									.lastIndexOf(".") != -1) {
								fullName_tFileOutputDelimited_29 = fileName_tFileOutputDelimited_29
										.substring(0,
												fileName_tFileOutputDelimited_29
														.lastIndexOf("."));
								extension_tFileOutputDelimited_29 = fileName_tFileOutputDelimited_29
										.substring(fileName_tFileOutputDelimited_29
												.lastIndexOf("."));
							} else {
								fullName_tFileOutputDelimited_29 = fileName_tFileOutputDelimited_29;
								extension_tFileOutputDelimited_29 = "";
							}
							directory_tFileOutputDelimited_29 = "";
						}
						boolean isFileGenerated_tFileOutputDelimited_29 = true;
						java.io.File filetFileOutputDelimited_29 = new java.io.File(
								fileName_tFileOutputDelimited_29);
						globalMap.put("tFileOutputDelimited_29_FILE_NAME",
								fileName_tFileOutputDelimited_29);

						String[] headColutFileOutputDelimited_29 = new String[9];
						class CSVBasicSet_tFileOutputDelimited_29 {
							private char field_Delim;
							private char row_Delim;
							private char escape;
							private char textEnclosure;
							private boolean useCRLFRecordDelimiter;

							public boolean isUseCRLFRecordDelimiter() {
								return useCRLFRecordDelimiter;
							}

							public void setFieldSeparator(String fieldSep)
									throws IllegalArgumentException {
								char field_Delim_tFileOutputDelimited_29[] = null;

								// support passing value (property: Field
								// Separator) by 'context.fs' or
								// 'globalMap.get("fs")'.
								if (fieldSep.length() > 0) {
									field_Delim_tFileOutputDelimited_29 = fieldSep
											.toCharArray();
								} else {
									throw new IllegalArgumentException(
											"Field Separator must be assigned a char.");
								}
								this.field_Delim = field_Delim_tFileOutputDelimited_29[0];
							}

							public char getFieldDelim() {
								if (this.field_Delim == 0) {
									setFieldSeparator("\t");
								}
								return this.field_Delim;
							}

							public void setRowSeparator(String rowSep) {
								if ("\r\n".equals(rowSep)) {
									useCRLFRecordDelimiter = true;
									return;
								}
								char row_DelimtFileOutputDelimited_29[] = null;

								// support passing value (property: Row
								// Separator) by 'context.rs' or
								// 'globalMap.get("rs")'.
								if (rowSep.length() > 0) {
									row_DelimtFileOutputDelimited_29 = rowSep
											.toCharArray();
								} else {
									throw new IllegalArgumentException(
											"Row Separator must be assigned a char.");
								}
								this.row_Delim = row_DelimtFileOutputDelimited_29[0];
							}

							public char getRowDelim() {
								if (this.row_Delim == 0) {
									setRowSeparator("\n");
								}
								return this.row_Delim;
							}

							public void setEscapeAndTextEnclosure(
									String strEscape, String strTextEnclosure)
									throws IllegalArgumentException {
								if (strEscape.length() <= 0) {
									throw new IllegalArgumentException(
											"Escape Char must be assigned a char.");
								}

								if ("".equals(strTextEnclosure))
									strTextEnclosure = "\0";
								char textEnclosure_tFileOutputDelimited_29[] = null;

								if (strTextEnclosure.length() > 0) {
									textEnclosure_tFileOutputDelimited_29 = strTextEnclosure
											.toCharArray();
								} else {
									throw new IllegalArgumentException(
											"Text Enclosure must be assigned a char.");
								}

								this.textEnclosure = textEnclosure_tFileOutputDelimited_29[0];

								if (("\\").equals(strEscape)) {
									this.escape = '\\';
								} else if (strEscape.equals(strTextEnclosure)) {
									this.escape = this.textEnclosure;
								} else {
									// the default escape mode is double escape
									this.escape = this.textEnclosure;
								}

							}

							public char getEscapeChar() {
								return (char) this.escape;
							}

							public char getTextEnclosure() {
								return this.textEnclosure;
							}
						}

						int nb_line_tFileOutputDelimited_29 = 0;
						int splitEvery_tFileOutputDelimited_29 = 1000;
						int splitedFileNo_tFileOutputDelimited_29 = 0;
						int currentRow_tFileOutputDelimited_29 = 0;

						CSVBasicSet_tFileOutputDelimited_29 csvSettings_tFileOutputDelimited_29 = new CSVBasicSet_tFileOutputDelimited_29();
						csvSettings_tFileOutputDelimited_29
								.setFieldSeparator("\t");
						csvSettings_tFileOutputDelimited_29
								.setRowSeparator("\n");
						csvSettings_tFileOutputDelimited_29
								.setEscapeAndTextEnclosure("\"", "\"");
						// create directory only if not exists
						if (directory_tFileOutputDelimited_29 != null
								&& directory_tFileOutputDelimited_29.trim()
										.length() != 0) {
							java.io.File dir_tFileOutputDelimited_29 = new java.io.File(
									directory_tFileOutputDelimited_29);
							if (!dir_tFileOutputDelimited_29.exists()) {
								dir_tFileOutputDelimited_29.mkdirs();
							}
						}
						com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_29 = null;
						try {
							CsvWritertFileOutputDelimited_29 = new com.talend.csv.CSVWriter(
									new java.io.BufferedWriter(
											new java.io.OutputStreamWriter(
													new java.io.FileOutputStream(
															fileName_tFileOutputDelimited_29,
															false), "UTF-8")));
							CsvWritertFileOutputDelimited_29
									.setSeparator(csvSettings_tFileOutputDelimited_29
											.getFieldDelim());

							if (!csvSettings_tFileOutputDelimited_29
									.isUseCRLFRecordDelimiter()
									&& csvSettings_tFileOutputDelimited_29
											.getRowDelim() != '\r'
									&& csvSettings_tFileOutputDelimited_29
											.getRowDelim() != '\n') {
								CsvWritertFileOutputDelimited_29.setLineEnd(""
										+ csvSettings_tFileOutputDelimited_29
												.getRowDelim());
							}

							if (filetFileOutputDelimited_29.length() == 0) {

								headColutFileOutputDelimited_29[0] = "MODIFIER_PATH";

								headColutFileOutputDelimited_29[1] = "MODIFIER_CD";

								headColutFileOutputDelimited_29[2] = "NAME_CHAR";

								headColutFileOutputDelimited_29[3] = "MODIFIER_BLOB";

								headColutFileOutputDelimited_29[4] = "UPDATE_DATE";

								headColutFileOutputDelimited_29[5] = "DOWNLOAD_DATE";

								headColutFileOutputDelimited_29[6] = "IMPORT_DATE";

								headColutFileOutputDelimited_29[7] = "SOURCESYSTEM_CD";

								headColutFileOutputDelimited_29[8] = "UPLOAD_ID";

								CsvWritertFileOutputDelimited_29
										.writeNext(headColutFileOutputDelimited_29);
								CsvWritertFileOutputDelimited_29.flush();

							}

							CsvWritertFileOutputDelimited_29
									.setEscapeChar(csvSettings_tFileOutputDelimited_29
											.getEscapeChar());
							CsvWritertFileOutputDelimited_29
									.setQuoteChar(csvSettings_tFileOutputDelimited_29
											.getTextEnclosure());
							CsvWritertFileOutputDelimited_29
									.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

							/**
							 * [tFileOutputDelimited_29 begin ] stop
							 */

							/**
							 * [tUniqRow_1 begin ] start
							 */

							ok_Hash.put("tUniqRow_1", false);
							start_Hash.put("tUniqRow_1",
									System.currentTimeMillis());
							currentComponent = "tUniqRow_1";

							int tos_count_tUniqRow_1 = 0;

							int nb_uniques_tUniqRow_1 = 0;
							int nb_duplicates_tUniqRow_1 = 0;

							/**
							 * [tUniqRow_1 begin ] stop
							 */

							/**
							 * [tMap_19 begin ] start
							 */

							ok_Hash.put("tMap_19", false);
							start_Hash.put("tMap_19",
									System.currentTimeMillis());
							currentComponent = "tMap_19";

							int tos_count_tMap_19 = 0;

							// ###############################
							// # Lookup's keys initialization

							org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row47Struct> tHash_Lookup_row47 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row47Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row47Struct>) globalMap
									.get("tHash_Lookup_row47"));

							row47Struct row47HashKey = new row47Struct();
							row47Struct row47Default = new row47Struct();
							// ###############################

							// ###############################
							// # Vars initialization
							class Var__tMap_19__Struct {
							}
							Var__tMap_19__Struct Var__tMap_19 = new Var__tMap_19__Struct();
							// ###############################

							// ###############################
							// # Outputs initialization
							copyOfto_conc_dimStruct copyOfto_conc_dim_tmp = new copyOfto_conc_dimStruct();
							// ###############################

							/**
							 * [tMap_19 begin ] stop
							 */

							/**
							 * [tJavaRow_4 begin ] start
							 */

							ok_Hash.put("tJavaRow_4", false);
							start_Hash.put("tJavaRow_4",
									System.currentTimeMillis());
							currentComponent = "tJavaRow_4";

							int tos_count_tJavaRow_4 = 0;

							int nb_line_tJavaRow_4 = 0;

							/**
							 * [tJavaRow_4 begin ] stop
							 */

							/**
							 * [tMap_1 begin ] start
							 */

							ok_Hash.put("tMap_1", false);
							start_Hash
									.put("tMap_1", System.currentTimeMillis());
							currentComponent = "tMap_1";

							int tos_count_tMap_1 = 0;

							// ###############################
							// # Lookup's keys initialization

							org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<from_src_ontStruct> tHash_Lookup_from_src_ont = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<from_src_ontStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<from_src_ontStruct>) globalMap
									.get("tHash_Lookup_from_src_ont"));

							from_src_ontStruct from_src_ontHashKey = new from_src_ontStruct();
							from_src_ontStruct from_src_ontDefault = new from_src_ontStruct();
							// ###############################

							// ###############################
							// # Vars initialization
							class Var__tMap_1__Struct {
								boolean var1;
							}
							Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
							// ###############################

							// ###############################
							// # Outputs initialization
							target_ontStruct target_ont_tmp = new target_ontStruct();
							to_cd_dimStruct to_cd_dim_tmp = new to_cd_dimStruct();
							to_mod_dimStruct to_mod_dim_tmp = new to_mod_dimStruct();
							// ###############################

							List<target_ontStruct> target_ont_List = new java.util.ArrayList<target_ontStruct>();
							List<to_cd_dimStruct> to_cd_dim_List = new java.util.ArrayList<to_cd_dimStruct>();
							List<to_mod_dimStruct> to_mod_dim_List = new java.util.ArrayList<to_mod_dimStruct>();

							/**
							 * [tMap_1 begin ] stop
							 */

							/**
							 * [tFileInputDelimited_1 begin ] start
							 */

							ok_Hash.put("tFileInputDelimited_1", false);
							start_Hash.put("tFileInputDelimited_1",
									System.currentTimeMillis());
							currentComponent = "tFileInputDelimited_1";

							int tos_count_tFileInputDelimited_1 = 0;

							int nb_line_tFileInputDelimited_1 = 0;
							int footer_tFileInputDelimited_1 = 0;
							int totalLinetFileInputDelimited_1 = 0;
							int limittFileInputDelimited_1 = -1;
							int lastLinetFileInputDelimited_1 = -1;

							char fieldSeparator_tFileInputDelimited_1[] = null;

							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_1 = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}

							char rowSeparator_tFileInputDelimited_1[] = null;

							// support passing value (property: Row Separator)
							// by 'context.rs' or 'globalMap.get("rs")'.
							if (((String) "\n").length() > 0) {
								rowSeparator_tFileInputDelimited_1 = ((String) "\n")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Row Separator must be assigned a char.");
							}

							Object filename_tFileInputDelimited_1 = /**
							 * Start
							 * field tFileInputDelimited_1:FILENAME
							 */
							((String) globalMap
									.get("tCreateTemporaryFile_1_FILEPATH"))/**
							 * 
							 * End field tFileInputDelimited_1:FILENAME
							 */
							;
							com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

							try {

								String[] rowtFileInputDelimited_1 = null;
								int currentLinetFileInputDelimited_1 = 0;
								int outputLinetFileInputDelimited_1 = 0;
								try {// TD110 begin
									if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

										int footer_value_tFileInputDelimited_1 = 0;
										if (footer_value_tFileInputDelimited_1 > 0) {
											throw new java.lang.Exception(
													"When the input source is a stream,footer shouldn't be bigger than 0.");
										}

										csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
												(java.io.InputStream) filename_tFileInputDelimited_1,
												fieldSeparator_tFileInputDelimited_1[0],
												"UTF-8");
									} else {
										csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
												new java.io.BufferedReader(
														new java.io.InputStreamReader(
																new java.io.FileInputStream(
																		String.valueOf(filename_tFileInputDelimited_1)),
																"UTF-8")),
												fieldSeparator_tFileInputDelimited_1[0]);
									}

									csvReadertFileInputDelimited_1
											.setTrimWhitespace(false);
									if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
											&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
										csvReadertFileInputDelimited_1
												.setLineEnd(""
														+ rowSeparator_tFileInputDelimited_1[0]);

									csvReadertFileInputDelimited_1
											.setQuoteChar('"');

									csvReadertFileInputDelimited_1
											.setEscapeChar(csvReadertFileInputDelimited_1
													.getQuoteChar());

									if (footer_tFileInputDelimited_1 > 0) {
										for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++) {
											csvReadertFileInputDelimited_1
													.readNext();
										}
										csvReadertFileInputDelimited_1
												.setSkipEmptyRecords(true);
										while (csvReadertFileInputDelimited_1
												.readNext()) {

											rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
													.getValues();
											if (!(rowtFileInputDelimited_1.length == 1 && ("\015")
													.equals(rowtFileInputDelimited_1[0]))) {// empty
																							// line
																							// when
																							// row
																							// separator
																							// is
																							// '\n'

												totalLinetFileInputDelimited_1++;

											}

										}
										int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
												- footer_tFileInputDelimited_1 < 0 ? 0
												: totalLinetFileInputDelimited_1
														- footer_tFileInputDelimited_1;
										if (lastLinetFileInputDelimited_1 > 0) {
											lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1
													: lastLineTemptFileInputDelimited_1;
										} else {
											lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
										}

										csvReadertFileInputDelimited_1.close();
										if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
											csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
													(java.io.InputStream) filename_tFileInputDelimited_1,
													fieldSeparator_tFileInputDelimited_1[0],
													"UTF-8");
										} else {
											csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
													new java.io.BufferedReader(
															new java.io.InputStreamReader(
																	new java.io.FileInputStream(
																			String.valueOf(filename_tFileInputDelimited_1)),
																	"UTF-8")),
													fieldSeparator_tFileInputDelimited_1[0]);
										}
										csvReadertFileInputDelimited_1
												.setTrimWhitespace(false);
										if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
												&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
											csvReadertFileInputDelimited_1
													.setLineEnd(""
															+ rowSeparator_tFileInputDelimited_1[0]);

										csvReadertFileInputDelimited_1
												.setQuoteChar('"');

										csvReadertFileInputDelimited_1
												.setEscapeChar(csvReadertFileInputDelimited_1
														.getQuoteChar());

									}

									if (limittFileInputDelimited_1 != 0) {
										for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 1; currentLinetFileInputDelimited_1++) {
											csvReadertFileInputDelimited_1
													.readNext();
										}
									}
									csvReadertFileInputDelimited_1
											.setSkipEmptyRecords(true);

								} catch (java.lang.Exception e) {

									System.err.println(e.getMessage());

								}// TD110 end

								while (limittFileInputDelimited_1 != 0
										&& csvReadertFileInputDelimited_1 != null
										&& csvReadertFileInputDelimited_1
												.readNext()) {

									rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
											.getValues();

									if (rowtFileInputDelimited_1.length == 1
											&& ("\015")
													.equals(rowtFileInputDelimited_1[0])) {// empty
																							// line
																							// when
																							// row
																							// separator
																							// is
																							// '\n'
										continue;
									}

									currentLinetFileInputDelimited_1++;

									if (lastLinetFileInputDelimited_1 > -1
											&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
										break;
									}
									outputLinetFileInputDelimited_1++;
									if (limittFileInputDelimited_1 > 0
											&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
										break;
									}

									from_OE_ONT = null;

									boolean whetherReject_tFileInputDelimited_1 = false;
									from_OE_ONT = new from_OE_ONTStruct();
									try {

										if (rowtFileInputDelimited_1.length == 1
												&& ("\015")
														.equals(rowtFileInputDelimited_1[0])) {// empty
																								// line
																								// when
																								// row
																								// separator
																								// is
																								// '\n'

											from_OE_ONT.TARGET_ID = null;

											from_OE_ONT.TREE_LEVEL = null;

											from_OE_ONT.TREE_PATH = null;

											from_OE_ONT.STAGING_PATH = null;

											from_OE_ONT.STAGING_DIMENSION = null;

											from_OE_ONT.NAME = null;

											from_OE_ONT.STARTDATE_STAGING_PATH = null;

											from_OE_ONT.ENDDATE_STAGING_PATH = null;

											from_OE_ONT.VISUALATTRIBUTES = null;

											from_OE_ONT.BASECODE = null;

											from_OE_ONT.METADATAXML = null;

											from_OE_ONT.COLUMNDATATYPE = null;

											from_OE_ONT.C_OPERATOR = null;

											from_OE_ONT.C_COMMENT = null;

											from_OE_ONT.TOOLTIP = null;

											from_OE_ONT.UPDATE_DATE = null;

											from_OE_ONT.DOWNLOAD_DATE = null;

											from_OE_ONT.IMPORT_DATE = null;

											from_OE_ONT.SOURCESYSTEM_CD = null;

											from_OE_ONT.VALUETYPE_CD = null;

											from_OE_ONT.M_APPLIED_PATH = null;

										} else {

											int columnIndexWithD_tFileInputDelimited_1 = 0; // Column
																							// Index

											columnIndexWithD_tFileInputDelimited_1 = 0;

											if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

												if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
														.length() > 0) {

													from_OE_ONT.TARGET_ID = ParserUtils
															.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

												} else {
													from_OE_ONT.TARGET_ID = null;
												}

											} else {
												from_OE_ONT.TARGET_ID = null;
											}

											columnIndexWithD_tFileInputDelimited_1 = 1;

											if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

												if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
														.length() > 0) {

													from_OE_ONT.TREE_LEVEL = ParserUtils
															.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

												} else {
													from_OE_ONT.TREE_LEVEL = null;
												}

											} else {
												from_OE_ONT.TREE_LEVEL = null;
											}

											columnIndexWithD_tFileInputDelimited_1 = 2;

											if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

												from_OE_ONT.TREE_PATH = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

											} else {
												from_OE_ONT.TREE_PATH = null;
											}

											columnIndexWithD_tFileInputDelimited_1 = 3;

											if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

												from_OE_ONT.STAGING_PATH = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

											} else {
												from_OE_ONT.STAGING_PATH = null;
											}

											columnIndexWithD_tFileInputDelimited_1 = 4;

											if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

												from_OE_ONT.STAGING_DIMENSION = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

											} else {
												from_OE_ONT.STAGING_DIMENSION = null;
											}

											columnIndexWithD_tFileInputDelimited_1 = 5;

											if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

												from_OE_ONT.NAME = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

											} else {
												from_OE_ONT.NAME = null;
											}

											columnIndexWithD_tFileInputDelimited_1 = 6;

											if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

												from_OE_ONT.STARTDATE_STAGING_PATH = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

											} else {
												from_OE_ONT.STARTDATE_STAGING_PATH = null;
											}

											columnIndexWithD_tFileInputDelimited_1 = 7;

											if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

												from_OE_ONT.ENDDATE_STAGING_PATH = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

											} else {
												from_OE_ONT.ENDDATE_STAGING_PATH = null;
											}

											columnIndexWithD_tFileInputDelimited_1 = 8;

											if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

												from_OE_ONT.VISUALATTRIBUTES = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

											} else {
												from_OE_ONT.VISUALATTRIBUTES = null;
											}

											columnIndexWithD_tFileInputDelimited_1 = 9;

											if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

												from_OE_ONT.BASECODE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

											} else {
												from_OE_ONT.BASECODE = null;
											}

											columnIndexWithD_tFileInputDelimited_1 = 10;

											if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

												from_OE_ONT.METADATAXML = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

											} else {
												from_OE_ONT.METADATAXML = null;
											}

											columnIndexWithD_tFileInputDelimited_1 = 11;

											if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

												from_OE_ONT.COLUMNDATATYPE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

											} else {
												from_OE_ONT.COLUMNDATATYPE = null;
											}

											columnIndexWithD_tFileInputDelimited_1 = 12;

											if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

												from_OE_ONT.C_OPERATOR = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

											} else {
												from_OE_ONT.C_OPERATOR = null;
											}

											columnIndexWithD_tFileInputDelimited_1 = 13;

											if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

												from_OE_ONT.C_COMMENT = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

											} else {
												from_OE_ONT.C_COMMENT = null;
											}

											columnIndexWithD_tFileInputDelimited_1 = 14;

											if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

												from_OE_ONT.TOOLTIP = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

											} else {
												from_OE_ONT.TOOLTIP = null;
											}

											columnIndexWithD_tFileInputDelimited_1 = 15;

											if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

												if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
														.length() > 0) {

													from_OE_ONT.UPDATE_DATE = ParserUtils
															.parseTo_Date(
																	rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
																	"dd-MM-yyyy");

												} else {
													from_OE_ONT.UPDATE_DATE = null;
												}

											} else {
												from_OE_ONT.UPDATE_DATE = null;
											}

											columnIndexWithD_tFileInputDelimited_1 = 16;

											if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

												if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
														.length() > 0) {

													from_OE_ONT.DOWNLOAD_DATE = ParserUtils
															.parseTo_Date(
																	rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
																	"dd-MM-yyyy");

												} else {
													from_OE_ONT.DOWNLOAD_DATE = null;
												}

											} else {
												from_OE_ONT.DOWNLOAD_DATE = null;
											}

											columnIndexWithD_tFileInputDelimited_1 = 17;

											if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

												if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
														.length() > 0) {

													from_OE_ONT.IMPORT_DATE = ParserUtils
															.parseTo_Date(
																	rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
																	"dd-MM-yyyy");

												} else {
													from_OE_ONT.IMPORT_DATE = null;
												}

											} else {
												from_OE_ONT.IMPORT_DATE = null;
											}

											columnIndexWithD_tFileInputDelimited_1 = 18;

											if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

												from_OE_ONT.SOURCESYSTEM_CD = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

											} else {
												from_OE_ONT.SOURCESYSTEM_CD = null;
											}

											columnIndexWithD_tFileInputDelimited_1 = 19;

											if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

												from_OE_ONT.VALUETYPE_CD = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

											} else {
												from_OE_ONT.VALUETYPE_CD = null;
											}

											columnIndexWithD_tFileInputDelimited_1 = 20;

											if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

												from_OE_ONT.M_APPLIED_PATH = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

											} else {
												from_OE_ONT.M_APPLIED_PATH = null;
											}

										}

									} catch (java.lang.Exception e) {
										whetherReject_tFileInputDelimited_1 = true;

										System.err.println(e.getMessage());
										from_OE_ONT = null;

									}

									/**
									 * [tFileInputDelimited_1 begin ] stop
									 */
									/**
									 * [tFileInputDelimited_1 main ] start
									 */

									currentComponent = "tFileInputDelimited_1";

									tos_count_tFileInputDelimited_1++;

									/**
									 * [tFileInputDelimited_1 main ] stop
									 */
									// Start of branch "from_OE_ONT"
									if (from_OE_ONT != null) {

										/**
										 * [tMap_1 main ] start
										 */

										currentComponent = "tMap_1";

										boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

										// ###############################
										// # Input tables (lookups)
										boolean rejectedInnerJoin_tMap_1 = false;
										boolean mainRowRejected_tMap_1 = false;

										// /////////////////////////////////////////////
										// Starting Lookup Table "from_src_ont"
										// /////////////////////////////////////////////

										boolean forceLoopfrom_src_ont = false;

										from_src_ontStruct from_src_ontObjectFromLookup = null;

										if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

											hasCasePrimitiveKeyWithNull_tMap_1 = false;

											from_src_ontHashKey.C_FULLNAME = from_OE_ONT.STAGING_PATH;

											from_src_ontHashKey.hashCodeDirty = true;

											tHash_Lookup_from_src_ont
													.lookup(from_src_ontHashKey);

											if (!tHash_Lookup_from_src_ont
													.hasNext()) { // G_TM_M_090

												rejectedInnerJoin_tMap_1 = true;

												forceLoopfrom_src_ont = true;

											} // G_TM_M_090

										} // G_TM_M_020

										else { // G 20 - G 21
											forceLoopfrom_src_ont = true;
										} // G 21

										from_src_ontStruct from_src_ont = null;

										while ((tHash_Lookup_from_src_ont != null && tHash_Lookup_from_src_ont
												.hasNext())
												|| forceLoopfrom_src_ont) { // G_TM_M_043

											// CALL close loop of lookup
											// 'from_src_ont'

											from_src_ontStruct fromLookup_from_src_ont = null;
											from_src_ont = from_src_ontDefault;

											if (!forceLoopfrom_src_ont) { // G
																			// 46

												fromLookup_from_src_ont = tHash_Lookup_from_src_ont
														.next();

												if (fromLookup_from_src_ont != null) {
													from_src_ont = fromLookup_from_src_ont;
												}

											} // G 46

											forceLoopfrom_src_ont = false;

											// ###############################
											{ // start of Var scope

												// ###############################
												// # Vars tables

												Var__tMap_1__Struct Var = Var__tMap_1;
												Var.var1 = (from_OE_ONT.BASECODE
														.split(":").length > 1) ? (from_OE_ONT.BASECODE
														.split(":")[1]
														.equals("xml") ? true
														: false) : false;
												;// ###############################
												// ###############################
												// # Output tables

												target_ont = null;
												target_ont_List.clear();
												to_cd_dim = null;
												to_cd_dim_List.clear();
												to_mod_dim = null;
												to_mod_dim_List.clear();

												if (!rejectedInnerJoin_tMap_1) {

													// # Output table :
													// 'target_ont'
													target_ont_tmp.C_HLEVEL = from_OE_ONT.TREE_LEVEL;
													target_ont_tmp.C_FULLNAME = from_OE_ONT.TREE_PATH;
													target_ont_tmp.C_NAME = from_OE_ONT.NAME;
													target_ont_tmp.C_SYNONYM_CD = "N";
													target_ont_tmp.C_VISUALATTRIBUTES = from_OE_ONT.VISUALATTRIBUTES;
													target_ont_tmp.C_TOTALNUM = from_src_ont.C_TOTALNUM;
													target_ont_tmp.C_BASECODE = from_OE_ONT.BASECODE;
													target_ont_tmp.C_METADATAXML = Var.var1 ? "<?xml version=\"1.0\"?><ValueMetadata><Version>3.02</Version><CreationDateTime>"
															+ TalendDate
																	.getDate("YYYY-MM-DD")
															+ "</CreationDateTime><TestID>U/UTP</TestID><TestName>"
															+ from_OE_ONT.NAME
															+ "</TestName><DataType>Integer</DataType><Flagstouse>HL</Flagstouse><Oktousevalues>Y</Oktousevalues><UnitValues><NormalUnits></NormalUnits><EqualUnits>"
															+ from_OE_ONT.NAME
															+ "</EqualUnits><ExcludingUnits/><ConvertingUnits><Units/><MultiplyingFactor/></ConvertingUnits></UnitValues><Analysis><Enums /><Counts /><New/></Analysis><i2b2><sourceDataType>durationDateTime</sourceDataType></i2b2></ValueMetadata>"
															: "";
													target_ont_tmp.C_FACTTABLECOLUMN = from_OE_ONT.STAGING_DIMENSION
															.equalsIgnoreCase("concept_dimension") ? "concept_cd"
															: "modifier_cd";
													target_ont_tmp.C_TABLENAME = from_OE_ONT.STAGING_DIMENSION;
													target_ont_tmp.C_COLUMNNAME = from_OE_ONT.STAGING_DIMENSION
															.equalsIgnoreCase("concept_dimension") ? "concept_path"
															: "modifier_path";
													target_ont_tmp.C_COLUMNDATATYPE = from_src_ont.C_COLUMNDATATYPE;
													target_ont_tmp.C_OPERATOR = from_src_ont.C_OPERATOR;
													target_ont_tmp.C_DIMCODE = from_OE_ONT.STAGING_PATH
															.length() > 0 ? from_OE_ONT.STAGING_PATH
															: from_OE_ONT.TREE_PATH;
													target_ont_tmp.C_COMMENT = from_src_ont.C_COMMENT;
													target_ont_tmp.C_TOOLTIP = from_src_ont.C_TOOLTIP;
													target_ont_tmp.M_APPLIED_PATH = from_OE_ONT.M_APPLIED_PATH;
													target_ont_tmp.UPDATE_DATE = from_src_ont.UPDATE_DATE;
													target_ont_tmp.DOWNLOAD_DATE = from_src_ont.DOWNLOAD_DATE;
													target_ont_tmp.IMPORT_DATE = from_src_ont.IMPORT_DATE;
													target_ont_tmp.SOURCESYSTEM_CD = from_src_ont.SOURCESYSTEM_CD;
													target_ont_tmp.VALUETYPE_CD = from_src_ont.VALUETYPE_CD;
													target_ont_tmp.M_EXCLUSION_CD = from_src_ont.M_EXCLUSION_CD;
													target_ont_tmp.C_PATH = from_OE_ONT.TREE_PATH;
													target_ont_tmp.C_SYMBOL = from_src_ont.C_SYMBOL;
													target_ont_List
															.add(target_ont_tmp);
													target_ont = target_ont_tmp;

													// # Output table :
													// 'to_cd_dim'
													// # Filter conditions
													if (

													from_OE_ONT.VISUALATTRIBUTES
															.toLowerCase()
															.startsWith("l")

													) {
														to_cd_dim_tmp.CONCEPT_PATH = from_OE_ONT.STAGING_PATH;
														to_cd_dim_tmp.CONCEPT_CD = from_OE_ONT.STAGING_PATH
																.substring(
																		0,
																		from_OE_ONT.STAGING_PATH
																				.length() - 1)
																.replaceAll(
																		"\\\\",
																		"|");
														to_cd_dim_tmp.NAME_CHAR = from_OE_ONT.NAME;
														to_cd_dim_tmp.CONCEPT_BLOB = null;
														to_cd_dim_tmp.UPDATE_DATE = from_src_ont.UPDATE_DATE;
														to_cd_dim_tmp.DOWNLOAD_DATE = from_src_ont.DOWNLOAD_DATE;
														to_cd_dim_tmp.IMPORT_DATE = from_src_ont.IMPORT_DATE;
														to_cd_dim_tmp.SOURCESYSTEM_CD = from_src_ont.SOURCESYSTEM_CD;
														to_cd_dim_tmp.UPLOAD_ID = null;
														to_cd_dim_List
																.add(to_cd_dim_tmp);
														to_cd_dim = to_cd_dim_tmp;
													} // closing filter/reject

													// # Output table :
													// 'to_mod_dim'
													// # Filter conditions
													if (

													from_OE_ONT.VISUALATTRIBUTES
															.toLowerCase()
															.startsWith("r")

													) {
														to_mod_dim_tmp.MODIFIER_PATH = from_OE_ONT.STAGING_PATH;
														to_mod_dim_tmp.MODIFIER_CD = from_OE_ONT.STAGING_PATH
																.substring(
																		0,
																		from_OE_ONT.STAGING_PATH
																				.length() - 1)
																.replaceAll(
																		"\\\\",
																		"|");
														to_mod_dim_tmp.NAME_CHAR = from_OE_ONT.NAME;
														to_mod_dim_tmp.MODIFIER_BLOB = null;
														to_mod_dim_tmp.UPDATE_DATE = from_src_ont.UPDATE_DATE;
														to_mod_dim_tmp.DOWNLOAD_DATE = from_src_ont.DOWNLOAD_DATE;
														to_mod_dim_tmp.IMPORT_DATE = from_src_ont.IMPORT_DATE;
														to_mod_dim_tmp.SOURCESYSTEM_CD = from_src_ont.SOURCESYSTEM_CD;
														to_mod_dim_tmp.UPLOAD_ID = null;
														to_mod_dim_List
																.add(to_mod_dim_tmp);
														to_mod_dim = to_mod_dim_tmp;
													} // closing filter/reject
												} // closing inner join bracket
													// (1)
													// ###### START REJECTS
													// #####

												// # Output reject table :
												// 'out4'
												// # Filter conditions
												if (rejectedInnerJoin_tMap_1) {
													target_ont_tmp = new target_ontStruct();

													target_ont_tmp.C_HLEVEL = from_OE_ONT.TREE_LEVEL;
													target_ont_tmp.C_FULLNAME = from_OE_ONT.TREE_PATH;
													target_ont_tmp.C_NAME = from_OE_ONT.NAME;
													target_ont_tmp.C_SYNONYM_CD = "N";
													target_ont_tmp.C_VISUALATTRIBUTES = from_OE_ONT.VISUALATTRIBUTES;
													target_ont_tmp.C_TOTALNUM = from_src_ont.C_TOTALNUM;
													target_ont_tmp.C_BASECODE = from_OE_ONT.BASECODE;
													target_ont_tmp.C_METADATAXML = from_src_ont.C_METADATAXML;
													target_ont_tmp.C_FACTTABLECOLUMN = "concept_cd";
													target_ont_tmp.C_TABLENAME = "concept_dimension";
													target_ont_tmp.C_COLUMNNAME = "concept_path";
													target_ont_tmp.C_COLUMNDATATYPE = "T";
													target_ont_tmp.C_OPERATOR = "LIKE";
													target_ont_tmp.C_DIMCODE = from_OE_ONT.STAGING_PATH
															.length() > 0 ? from_OE_ONT.STAGING_PATH
															: from_OE_ONT.TREE_PATH;
													target_ont_tmp.C_COMMENT = from_src_ont.C_COMMENT;
													target_ont_tmp.C_TOOLTIP = from_src_ont.C_TOOLTIP;
													target_ont_tmp.M_APPLIED_PATH = "@";
													target_ont_tmp.UPDATE_DATE = TalendDate
															.getCurrentDate();
													target_ont_tmp.DOWNLOAD_DATE = TalendDate
															.getCurrentDate();
													target_ont_tmp.IMPORT_DATE = TalendDate
															.getCurrentDate();
													target_ont_tmp.SOURCESYSTEM_CD = from_src_ont.SOURCESYSTEM_CD;
													target_ont_tmp.VALUETYPE_CD = from_src_ont.VALUETYPE_CD;
													target_ont_tmp.M_EXCLUSION_CD = from_src_ont.M_EXCLUSION_CD;
													target_ont_tmp.C_PATH = from_OE_ONT.TREE_PATH;
													target_ont_tmp.C_SYMBOL = from_src_ont.C_SYMBOL;
													target_ont_List
															.add(target_ont_tmp);
													target_ont = target_ont_tmp;
												} // closing filter/reject

												// # Output reject table :
												// 'out5'
												// # Filter conditions
												if (rejectedInnerJoin_tMap_1
														&& (

														from_OE_ONT.VISUALATTRIBUTES
																.toLowerCase()
																.startsWith("l")

														)) {
													to_cd_dim_tmp = new to_cd_dimStruct();

													to_cd_dim_tmp.CONCEPT_PATH = from_OE_ONT.STAGING_PATH;
													to_cd_dim_tmp.CONCEPT_CD = from_OE_ONT.STAGING_PATH
															.substring(
																	0,
																	from_OE_ONT.STAGING_PATH
																			.length() - 1)
															.replaceAll("\\\\",
																	"|");
													to_cd_dim_tmp.NAME_CHAR = from_OE_ONT.NAME;
													to_cd_dim_tmp.CONCEPT_BLOB = null;
													to_cd_dim_tmp.UPDATE_DATE = from_src_ont.UPDATE_DATE;
													to_cd_dim_tmp.DOWNLOAD_DATE = from_src_ont.DOWNLOAD_DATE;
													to_cd_dim_tmp.IMPORT_DATE = from_src_ont.IMPORT_DATE;
													to_cd_dim_tmp.SOURCESYSTEM_CD = from_src_ont.SOURCESYSTEM_CD;
													to_cd_dim_tmp.UPLOAD_ID = null;
													to_cd_dim_List
															.add(to_cd_dim_tmp);
													to_cd_dim = to_cd_dim_tmp;
												} // closing filter/reject

												// # Output reject table :
												// 'out6'
												// # Filter conditions
												if (rejectedInnerJoin_tMap_1
														&& (

														from_OE_ONT.VISUALATTRIBUTES
																.toLowerCase()
																.startsWith("r")

														)) {
													to_mod_dim_tmp = new to_mod_dimStruct();

													to_mod_dim_tmp.MODIFIER_PATH = from_OE_ONT.STAGING_PATH;
													to_mod_dim_tmp.MODIFIER_CD = from_OE_ONT.STAGING_PATH
															.substring(
																	0,
																	from_OE_ONT.STAGING_PATH
																			.length() - 1)
															.replaceAll("\\\\",
																	"|");
													to_mod_dim_tmp.NAME_CHAR = from_OE_ONT.NAME;
													to_mod_dim_tmp.MODIFIER_BLOB = null;
													to_mod_dim_tmp.UPDATE_DATE = from_src_ont.UPDATE_DATE;
													to_mod_dim_tmp.DOWNLOAD_DATE = from_src_ont.DOWNLOAD_DATE;
													to_mod_dim_tmp.IMPORT_DATE = from_src_ont.IMPORT_DATE;
													to_mod_dim_tmp.SOURCESYSTEM_CD = from_src_ont.SOURCESYSTEM_CD;
													to_mod_dim_tmp.UPLOAD_ID = null;
													to_mod_dim_List
															.add(to_mod_dim_tmp);
													to_mod_dim = to_mod_dim_tmp;
												} // closing filter/reject
													// ###############################

											} // end of Var scope

											rejectedInnerJoin_tMap_1 = false;

											tos_count_tMap_1++;

											/**
											 * [tMap_1 main ] stop
											 */
											// Start of branch "target_ont"
											if (target_ont != null) {
												// start of joined table loop
												for (target_ontStruct cur_target_ont : target_ont_List) {
													target_ont = cur_target_ont;

													/**
													 * [tUniqRow_4 main ] start
													 */

													currentComponent = "tUniqRow_4";

													row19 = null;
													if (target_ont.C_FULLNAME == null) {
														finder_tUniqRow_4.C_FULLNAME = null;
													} else {
														finder_tUniqRow_4.C_FULLNAME = target_ont.C_FULLNAME
																.toLowerCase();
													}
													finder_tUniqRow_4.hashCodeDirty = true;
													if (!keystUniqRow_4
															.contains(finder_tUniqRow_4)) {
														KeyStruct_tUniqRow_4 new_tUniqRow_4 = new KeyStruct_tUniqRow_4();

														if (target_ont.C_FULLNAME == null) {
															new_tUniqRow_4.C_FULLNAME = null;
														} else {
															new_tUniqRow_4.C_FULLNAME = target_ont.C_FULLNAME
																	.toLowerCase();
														}

														keystUniqRow_4
																.add(new_tUniqRow_4);
														if (row19 == null) {
															row19 = new row19Struct();
														}
														row19.C_HLEVEL = target_ont.C_HLEVEL;
														row19.C_FULLNAME = target_ont.C_FULLNAME;
														row19.C_NAME = target_ont.C_NAME;
														row19.C_SYNONYM_CD = target_ont.C_SYNONYM_CD;
														row19.C_VISUALATTRIBUTES = target_ont.C_VISUALATTRIBUTES;
														row19.C_TOTALNUM = target_ont.C_TOTALNUM;
														row19.C_BASECODE = target_ont.C_BASECODE;
														row19.C_METADATAXML = target_ont.C_METADATAXML;
														row19.C_FACTTABLECOLUMN = target_ont.C_FACTTABLECOLUMN;
														row19.C_TABLENAME = target_ont.C_TABLENAME;
														row19.C_COLUMNNAME = target_ont.C_COLUMNNAME;
														row19.C_COLUMNDATATYPE = target_ont.C_COLUMNDATATYPE;
														row19.C_OPERATOR = target_ont.C_OPERATOR;
														row19.C_DIMCODE = target_ont.C_DIMCODE;
														row19.C_COMMENT = target_ont.C_COMMENT;
														row19.C_TOOLTIP = target_ont.C_TOOLTIP;
														row19.M_APPLIED_PATH = target_ont.M_APPLIED_PATH;
														row19.UPDATE_DATE = target_ont.UPDATE_DATE;
														row19.DOWNLOAD_DATE = target_ont.DOWNLOAD_DATE;
														row19.IMPORT_DATE = target_ont.IMPORT_DATE;
														row19.SOURCESYSTEM_CD = target_ont.SOURCESYSTEM_CD;
														row19.VALUETYPE_CD = target_ont.VALUETYPE_CD;
														row19.M_EXCLUSION_CD = target_ont.M_EXCLUSION_CD;
														row19.C_PATH = target_ont.C_PATH;
														row19.C_SYMBOL = target_ont.C_SYMBOL;
														nb_uniques_tUniqRow_4++;
													} else {
														nb_duplicates_tUniqRow_4++;
													}

													tos_count_tUniqRow_4++;

													/**
													 * [tUniqRow_4 main ] stop
													 */
													// Start of branch "row19"
													if (row19 != null) {

														/**
														 * [
														 * tFileOutputDelimited_4
														 * main ] start
														 */

														currentComponent = "tFileOutputDelimited_4";

														String[] rowtFileOutputDelimited_4 = new String[25];

														rowtFileOutputDelimited_4[0] = String
																.valueOf(row19.C_HLEVEL);

														rowtFileOutputDelimited_4[1] = row19.C_FULLNAME == null ? ""
																: row19.C_FULLNAME;

														rowtFileOutputDelimited_4[2] = row19.C_NAME == null ? ""
																: row19.C_NAME;

														rowtFileOutputDelimited_4[3] = row19.C_SYNONYM_CD == null ? ""
																: row19.C_SYNONYM_CD;

														rowtFileOutputDelimited_4[4] = row19.C_VISUALATTRIBUTES == null ? ""
																: row19.C_VISUALATTRIBUTES;

														rowtFileOutputDelimited_4[5] = row19.C_TOTALNUM == null ? ""
																: row19.C_TOTALNUM
																		.setScale(
																				0,
																				java.math.RoundingMode.HALF_UP)
																		.toPlainString();

														rowtFileOutputDelimited_4[6] = row19.C_BASECODE == null ? ""
																: row19.C_BASECODE;

														rowtFileOutputDelimited_4[7] = row19.C_METADATAXML == null ? ""
																: row19.C_METADATAXML;

														rowtFileOutputDelimited_4[8] = row19.C_FACTTABLECOLUMN == null ? ""
																: row19.C_FACTTABLECOLUMN;

														rowtFileOutputDelimited_4[9] = row19.C_TABLENAME == null ? ""
																: row19.C_TABLENAME;

														rowtFileOutputDelimited_4[10] = row19.C_COLUMNNAME == null ? ""
																: row19.C_COLUMNNAME;

														rowtFileOutputDelimited_4[11] = row19.C_COLUMNDATATYPE == null ? ""
																: row19.C_COLUMNDATATYPE;

														rowtFileOutputDelimited_4[12] = row19.C_OPERATOR == null ? ""
																: row19.C_OPERATOR;

														rowtFileOutputDelimited_4[13] = row19.C_DIMCODE == null ? ""
																: row19.C_DIMCODE;

														rowtFileOutputDelimited_4[14] = row19.C_COMMENT == null ? ""
																: String.valueOf(row19.C_COMMENT);

														rowtFileOutputDelimited_4[15] = row19.C_TOOLTIP == null ? ""
																: row19.C_TOOLTIP;

														rowtFileOutputDelimited_4[16] = row19.M_APPLIED_PATH == null ? ""
																: row19.M_APPLIED_PATH;

														rowtFileOutputDelimited_4[17] = row19.UPDATE_DATE == null ? ""
																: FormatterUtils
																		.format_Date(
																				row19.UPDATE_DATE,
																				"dd-MM-yyyy");

														rowtFileOutputDelimited_4[18] = row19.DOWNLOAD_DATE == null ? ""
																: FormatterUtils
																		.format_Date(
																				row19.DOWNLOAD_DATE,
																				"dd-MM-yyyy");

														rowtFileOutputDelimited_4[19] = row19.IMPORT_DATE == null ? ""
																: FormatterUtils
																		.format_Date(
																				row19.IMPORT_DATE,
																				"dd-MM-yyyy");

														rowtFileOutputDelimited_4[20] = row19.SOURCESYSTEM_CD == null ? ""
																: row19.SOURCESYSTEM_CD;

														rowtFileOutputDelimited_4[21] = row19.VALUETYPE_CD == null ? ""
																: row19.VALUETYPE_CD;

														rowtFileOutputDelimited_4[22] = row19.M_EXCLUSION_CD == null ? ""
																: row19.M_EXCLUSION_CD;

														rowtFileOutputDelimited_4[23] = row19.C_PATH == null ? ""
																: row19.C_PATH;

														rowtFileOutputDelimited_4[24] = row19.C_SYMBOL == null ? ""
																: row19.C_SYMBOL;

														nb_line_tFileOutputDelimited_4++;
														CsvWritertFileOutputDelimited_4
																.writeNext(rowtFileOutputDelimited_4);

														tos_count_tFileOutputDelimited_4++;

														/**
														 * [
														 * tFileOutputDelimited_4
														 * main ] stop
														 */

													} // End of branch "row19"

												} // end of joined table loop
												target_ont_List.clear();

											} // End of branch "target_ont"

											// Start of branch "to_cd_dim"
											if (to_cd_dim != null) {
												// start of joined table loop
												for (to_cd_dimStruct cur_to_cd_dim : to_cd_dim_List) {
													to_cd_dim = cur_to_cd_dim;

													/**
													 * [tJavaRow_1 main ] start
													 */

													currentComponent = "tJavaRow_1";

													// Code generated according
													// to input schema and
													// output schema
													row4.CONCEPT_PATH = to_cd_dim.CONCEPT_PATH;

													if (to_cd_dim.CONCEPT_CD
															.lastIndexOf("|") > 0) {
														StringBuilder b = new StringBuilder(
																to_cd_dim.CONCEPT_CD);
														b.replace(
																to_cd_dim.CONCEPT_CD
																		.lastIndexOf("|"),
																to_cd_dim.CONCEPT_CD
																		.lastIndexOf("|") + 1,
																":");
														row4.CONCEPT_CD = b
																.toString();
													} else {
														row4.CONCEPT_CD = to_cd_dim.CONCEPT_CD;

													}

													row4.NAME_CHAR = to_cd_dim.NAME_CHAR;
													row4.CONCEPT_BLOB = to_cd_dim.CONCEPT_BLOB;
													row4.UPDATE_DATE = to_cd_dim.UPDATE_DATE;
													row4.DOWNLOAD_DATE = to_cd_dim.DOWNLOAD_DATE;
													row4.IMPORT_DATE = to_cd_dim.IMPORT_DATE;
													row4.SOURCESYSTEM_CD = to_cd_dim.SOURCESYSTEM_CD;
													row4.UPLOAD_ID = to_cd_dim.UPLOAD_ID;

													nb_line_tJavaRow_1++;

													tos_count_tJavaRow_1++;

													/**
													 * [tJavaRow_1 main ] stop
													 */

													/**
													 * [tMap_2 main ] start
													 */

													currentComponent = "tMap_2";

													boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

													// ###############################
													// # Input tables (lookups)
													boolean rejectedInnerJoin_tMap_2 = false;
													boolean mainRowRejected_tMap_2 = false;

													// /////////////////////////////////////////////
													// Starting Lookup Table
													// "row48"
													// /////////////////////////////////////////////

													boolean forceLooprow48 = false;

													row48Struct row48ObjectFromLookup = null;

													if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

														hasCasePrimitiveKeyWithNull_tMap_2 = false;

														row48HashKey.CONCEPT_PATH = row4.CONCEPT_PATH;

														row48HashKey.hashCodeDirty = true;

														tHash_Lookup_row48
																.lookup(row48HashKey);

														if (!tHash_Lookup_row48
																.hasNext()) { // G_TM_M_090

															rejectedInnerJoin_tMap_2 = true;

															forceLooprow48 = true;

														} // G_TM_M_090

													} // G_TM_M_020

													else { // G 20 - G 21
														forceLooprow48 = true;
													} // G 21

													row48Struct row48 = null;

													while ((tHash_Lookup_row48 != null && tHash_Lookup_row48
															.hasNext())
															|| forceLooprow48) { // G_TM_M_043

														// CALL close loop of
														// lookup 'row48'

														row48Struct fromLookup_row48 = null;
														row48 = row48Default;

														if (!forceLooprow48) { // G
																				// 46

															fromLookup_row48 = tHash_Lookup_row48
																	.next();

															if (fromLookup_row48 != null) {
																row48 = fromLookup_row48;
															}

														} // G 46

														forceLooprow48 = false;

														// ###############################
														{ // start of Var scope

															// ###############################
															// # Vars tables

															Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
															// ###############################
															// # Output tables

															to_conc_dim = null;

															if (!rejectedInnerJoin_tMap_2) {

																// # Output
																// table :
																// 'to_conc_dim'
																to_conc_dim_tmp.CONCEPT_PATH = row4.CONCEPT_PATH;
																to_conc_dim_tmp.CONCEPT_CD = row48.CONCEPT_CD;
																to_conc_dim_tmp.NAME_CHAR = row4.NAME_CHAR;
																to_conc_dim_tmp.CONCEPT_BLOB = row4.CONCEPT_BLOB;
																to_conc_dim_tmp.UPDATE_DATE = row4.UPDATE_DATE;
																to_conc_dim_tmp.DOWNLOAD_DATE = row4.DOWNLOAD_DATE;
																to_conc_dim_tmp.IMPORT_DATE = row4.IMPORT_DATE;
																to_conc_dim_tmp.SOURCESYSTEM_CD = row4.SOURCESYSTEM_CD;
																to_conc_dim_tmp.UPLOAD_ID = row4.UPLOAD_ID;
																to_conc_dim = to_conc_dim_tmp;
															} // closing inner
																// join bracket
																// (2)
																// ###############################

														} // end of Var scope

														rejectedInnerJoin_tMap_2 = false;

														tos_count_tMap_2++;

														/**
														 * [tMap_2 main ] stop
														 */
														// Start of branch
														// "to_conc_dim"
														if (to_conc_dim != null) {

															/**
															 * [tUniqRow_3 main
															 * ] start
															 */

															currentComponent = "tUniqRow_3";

															row18 = null;
															if (to_conc_dim.CONCEPT_PATH == null) {
																finder_tUniqRow_3.CONCEPT_PATH = null;
															} else {
																finder_tUniqRow_3.CONCEPT_PATH = to_conc_dim.CONCEPT_PATH
																		.toLowerCase();
															}
															finder_tUniqRow_3.hashCodeDirty = true;
															if (!keystUniqRow_3
																	.contains(finder_tUniqRow_3)) {
																KeyStruct_tUniqRow_3 new_tUniqRow_3 = new KeyStruct_tUniqRow_3();

																if (to_conc_dim.CONCEPT_PATH == null) {
																	new_tUniqRow_3.CONCEPT_PATH = null;
																} else {
																	new_tUniqRow_3.CONCEPT_PATH = to_conc_dim.CONCEPT_PATH
																			.toLowerCase();
																}

																keystUniqRow_3
																		.add(new_tUniqRow_3);
																if (row18 == null) {
																	row18 = new row18Struct();
																}
																row18.CONCEPT_PATH = to_conc_dim.CONCEPT_PATH;
																row18.CONCEPT_CD = to_conc_dim.CONCEPT_CD;
																row18.NAME_CHAR = to_conc_dim.NAME_CHAR;
																row18.CONCEPT_BLOB = to_conc_dim.CONCEPT_BLOB;
																row18.UPDATE_DATE = to_conc_dim.UPDATE_DATE;
																row18.DOWNLOAD_DATE = to_conc_dim.DOWNLOAD_DATE;
																row18.IMPORT_DATE = to_conc_dim.IMPORT_DATE;
																row18.SOURCESYSTEM_CD = to_conc_dim.SOURCESYSTEM_CD;
																row18.UPLOAD_ID = to_conc_dim.UPLOAD_ID;
																nb_uniques_tUniqRow_3++;
															} else {
																nb_duplicates_tUniqRow_3++;
															}

															tos_count_tUniqRow_3++;

															/**
															 * [tUniqRow_3 main
															 * ] stop
															 */
															// Start of branch
															// "row18"
															if (row18 != null) {

																/**
																 * [
																 * tFileOutputDelimited_5
																 * main ] start
																 */

																currentComponent = "tFileOutputDelimited_5";

																String[] rowtFileOutputDelimited_5 = new String[9];

																rowtFileOutputDelimited_5[0] = row18.CONCEPT_PATH == null ? ""
																		: row18.CONCEPT_PATH;

																rowtFileOutputDelimited_5[1] = row18.CONCEPT_CD == null ? ""
																		: row18.CONCEPT_CD;

																rowtFileOutputDelimited_5[2] = row18.NAME_CHAR == null ? ""
																		: row18.NAME_CHAR;

																rowtFileOutputDelimited_5[3] = row18.CONCEPT_BLOB == null ? ""
																		: row18.CONCEPT_BLOB;

																rowtFileOutputDelimited_5[4] = row18.UPDATE_DATE == null ? ""
																		: FormatterUtils
																				.format_Date(
																						row18.UPDATE_DATE,
																						"yyyy-MM-dd");

																rowtFileOutputDelimited_5[5] = row18.DOWNLOAD_DATE == null ? ""
																		: FormatterUtils
																				.format_Date(
																						row18.DOWNLOAD_DATE,
																						"yyyy-MM-dd");

																rowtFileOutputDelimited_5[6] = row18.IMPORT_DATE == null ? ""
																		: FormatterUtils
																				.format_Date(
																						row18.IMPORT_DATE,
																						"yyyy-MM-dd");

																rowtFileOutputDelimited_5[7] = row18.SOURCESYSTEM_CD == null ? ""
																		: row18.SOURCESYSTEM_CD;

																rowtFileOutputDelimited_5[8] = row18.UPLOAD_ID == null ? ""
																		: row18.UPLOAD_ID;

																nb_line_tFileOutputDelimited_5++;
																CsvWritertFileOutputDelimited_5
																		.writeNext(rowtFileOutputDelimited_5);

																tos_count_tFileOutputDelimited_5++;

																/**
																 * [
																 * tFileOutputDelimited_5
																 * main ] stop
																 */

															} // End of branch
																// "row18"

														} // End of branch
															// "to_conc_dim"

													} // close loop of lookup
														// 'row48' // G_TM_M_043

												} // end of joined table loop
												to_cd_dim_List.clear();

											} // End of branch "to_cd_dim"

											// Start of branch "to_mod_dim"
											if (to_mod_dim != null) {
												// start of joined table loop
												for (to_mod_dimStruct cur_to_mod_dim : to_mod_dim_List) {
													to_mod_dim = cur_to_mod_dim;

													/**
													 * [tJavaRow_4 main ] start
													 */

													currentComponent = "tJavaRow_4";

													// Code generated according
													// to input schema and
													// output schema
													row11.MODIFIER_PATH = to_mod_dim.MODIFIER_PATH;

													if (to_mod_dim.MODIFIER_CD
															.lastIndexOf("|") > 0) {
														StringBuilder b = new StringBuilder(
																to_mod_dim.MODIFIER_CD);
														b.replace(
																to_mod_dim.MODIFIER_CD
																		.lastIndexOf("|"),
																to_mod_dim.MODIFIER_CD
																		.lastIndexOf("|") + 1,
																":");
														row11.MODIFIER_CD = b
																.toString();
													} else {
														row11.MODIFIER_CD = to_mod_dim.MODIFIER_CD;

													}

													row11.NAME_CHAR = to_mod_dim.NAME_CHAR;
													row11.MODIFIER_BLOB = to_mod_dim.MODIFIER_BLOB;
													row11.UPDATE_DATE = to_mod_dim.UPDATE_DATE;
													row11.DOWNLOAD_DATE = to_mod_dim.DOWNLOAD_DATE;
													row11.IMPORT_DATE = to_mod_dim.IMPORT_DATE;
													row11.SOURCESYSTEM_CD = to_mod_dim.SOURCESYSTEM_CD;
													row11.UPLOAD_ID = to_mod_dim.UPLOAD_ID;

													nb_line_tJavaRow_4++;

													tos_count_tJavaRow_4++;

													/**
													 * [tJavaRow_4 main ] stop
													 */

													/**
													 * [tMap_19 main ] start
													 */

													currentComponent = "tMap_19";

													boolean hasCasePrimitiveKeyWithNull_tMap_19 = false;

													// ###############################
													// # Input tables (lookups)
													boolean rejectedInnerJoin_tMap_19 = false;
													boolean mainRowRejected_tMap_19 = false;

													// /////////////////////////////////////////////
													// Starting Lookup Table
													// "row47"
													// /////////////////////////////////////////////

													boolean forceLooprow47 = false;

													row47Struct row47ObjectFromLookup = null;

													if (!rejectedInnerJoin_tMap_19) { // G_TM_M_020

														hasCasePrimitiveKeyWithNull_tMap_19 = false;

														row47HashKey.MODIFIER_PATH = row11.MODIFIER_PATH;

														row47HashKey.hashCodeDirty = true;

														tHash_Lookup_row47
																.lookup(row47HashKey);

													} // G_TM_M_020

													if (tHash_Lookup_row47 != null
															&& tHash_Lookup_row47
																	.getCount(row47HashKey) > 1) { // G
																									// 071

														// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row47' and it contains more one result from keys :  row47.MODIFIER_PATH = '"
														// +
														// row47HashKey.MODIFIER_PATH
														// + "'");
													} // G 071

													row47Struct row47 = null;

													row47Struct fromLookup_row47 = null;
													row47 = row47Default;

													if (tHash_Lookup_row47 != null
															&& tHash_Lookup_row47
																	.hasNext()) { // G
																					// 099

														fromLookup_row47 = tHash_Lookup_row47
																.next();

													} // G 099

													if (fromLookup_row47 != null) {
														row47 = fromLookup_row47;
													}

													// ###############################
													{ // start of Var scope

														// ###############################
														// # Vars tables

														Var__tMap_19__Struct Var = Var__tMap_19;// ###############################
														// ###############################
														// # Output tables

														copyOfto_conc_dim = null;

														// # Output table :
														// 'copyOfto_conc_dim'
														copyOfto_conc_dim_tmp.MODIFIER_PATH = row11.MODIFIER_PATH;
														copyOfto_conc_dim_tmp.MODIFIER_CD = row47.MODIFIER_CD;
														copyOfto_conc_dim_tmp.NAME_CHAR = row11.NAME_CHAR;
														copyOfto_conc_dim_tmp.MODIFIER_BLOB = row11.MODIFIER_BLOB;
														copyOfto_conc_dim_tmp.UPDATE_DATE = row11.UPDATE_DATE;
														copyOfto_conc_dim_tmp.DOWNLOAD_DATE = row11.DOWNLOAD_DATE;
														copyOfto_conc_dim_tmp.IMPORT_DATE = row11.IMPORT_DATE;
														copyOfto_conc_dim_tmp.SOURCESYSTEM_CD = row11.SOURCESYSTEM_CD;
														copyOfto_conc_dim_tmp.UPLOAD_ID = row11.UPLOAD_ID;
														copyOfto_conc_dim = copyOfto_conc_dim_tmp;
														// ###############################

													} // end of Var scope

													rejectedInnerJoin_tMap_19 = false;

													tos_count_tMap_19++;

													/**
													 * [tMap_19 main ] stop
													 */
													// Start of branch
													// "copyOfto_conc_dim"
													if (copyOfto_conc_dim != null) {

														/**
														 * [tUniqRow_1 main ]
														 * start
														 */

														currentComponent = "tUniqRow_1";

														row12.MODIFIER_PATH = copyOfto_conc_dim.MODIFIER_PATH;
														row12.MODIFIER_CD = copyOfto_conc_dim.MODIFIER_CD;
														row12.NAME_CHAR = copyOfto_conc_dim.NAME_CHAR;
														row12.MODIFIER_BLOB = copyOfto_conc_dim.MODIFIER_BLOB;
														row12.UPDATE_DATE = copyOfto_conc_dim.UPDATE_DATE;
														row12.DOWNLOAD_DATE = copyOfto_conc_dim.DOWNLOAD_DATE;
														row12.IMPORT_DATE = copyOfto_conc_dim.IMPORT_DATE;
														row12.SOURCESYSTEM_CD = copyOfto_conc_dim.SOURCESYSTEM_CD;
														row12.UPLOAD_ID = copyOfto_conc_dim.UPLOAD_ID;

														tos_count_tUniqRow_1++;

														/**
														 * [tUniqRow_1 main ]
														 * stop
														 */
														// Start of branch
														// "row12"
														if (row12 != null) {

															/**
															 * [
															 * tFileOutputDelimited_29
															 * main ] start
															 */

															currentComponent = "tFileOutputDelimited_29";

															String[] rowtFileOutputDelimited_29 = new String[9];

															rowtFileOutputDelimited_29[0] = row12.MODIFIER_PATH == null ? ""
																	: row12.MODIFIER_PATH;

															rowtFileOutputDelimited_29[1] = row12.MODIFIER_CD == null ? ""
																	: row12.MODIFIER_CD;

															rowtFileOutputDelimited_29[2] = row12.NAME_CHAR == null ? ""
																	: row12.NAME_CHAR;

															rowtFileOutputDelimited_29[3] = row12.MODIFIER_BLOB == null ? ""
																	: row12.MODIFIER_BLOB;

															rowtFileOutputDelimited_29[4] = row12.UPDATE_DATE == null ? ""
																	: FormatterUtils
																			.format_Date(
																					row12.UPDATE_DATE,
																					"yyyy-MM-dd");

															rowtFileOutputDelimited_29[5] = row12.DOWNLOAD_DATE == null ? ""
																	: FormatterUtils
																			.format_Date(
																					row12.DOWNLOAD_DATE,
																					"yyyy-MM-dd");

															rowtFileOutputDelimited_29[6] = row12.IMPORT_DATE == null ? ""
																	: FormatterUtils
																			.format_Date(
																					row12.IMPORT_DATE,
																					"yyyy-MM-dd");

															rowtFileOutputDelimited_29[7] = row12.SOURCESYSTEM_CD == null ? ""
																	: row12.SOURCESYSTEM_CD;

															rowtFileOutputDelimited_29[8] = row12.UPLOAD_ID == null ? ""
																	: row12.UPLOAD_ID;

															nb_line_tFileOutputDelimited_29++;
															CsvWritertFileOutputDelimited_29
																	.writeNext(rowtFileOutputDelimited_29);

															tos_count_tFileOutputDelimited_29++;

															/**
															 * [
															 * tFileOutputDelimited_29
															 * main ] stop
															 */

														} // End of branch
															// "row12"

													} // End of branch
														// "copyOfto_conc_dim"

												} // end of joined table loop
												to_mod_dim_List.clear();

											} // End of branch "to_mod_dim"

										} // close loop of lookup 'from_src_ont'
											// // G_TM_M_043

									} // End of branch "from_OE_ONT"

									/**
									 * [tFileInputDelimited_1 end ] start
									 */

									currentComponent = "tFileInputDelimited_1";

									nb_line_tFileInputDelimited_1++;
								}

							} finally {
								if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
									if (csvReadertFileInputDelimited_1 != null) {
										csvReadertFileInputDelimited_1.close();
									}
								}
								if (csvReadertFileInputDelimited_1 != null) {
									globalMap.put(
											"tFileInputDelimited_1_NB_LINE",
											nb_line_tFileInputDelimited_1);
								}
							}

							ok_Hash.put("tFileInputDelimited_1", true);
							end_Hash.put("tFileInputDelimited_1",
									System.currentTimeMillis());

							/**
							 * [tFileInputDelimited_1 end ] stop
							 */

							/**
							 * [tMap_1 end ] start
							 */

							currentComponent = "tMap_1";

							// ###############################
							// # Lookup hashes releasing
							if (tHash_Lookup_from_src_ont != null) {
								tHash_Lookup_from_src_ont.endGet();
							}
							globalMap.remove("tHash_Lookup_from_src_ont");

							// ###############################

							ok_Hash.put("tMap_1", true);
							end_Hash.put("tMap_1", System.currentTimeMillis());

							/**
							 * [tMap_1 end ] stop
							 */

							/**
							 * [tJavaRow_4 end ] start
							 */

							currentComponent = "tJavaRow_4";

							globalMap.put("tJavaRow_4_NB_LINE",
									nb_line_tJavaRow_4);

							ok_Hash.put("tJavaRow_4", true);
							end_Hash.put("tJavaRow_4",
									System.currentTimeMillis());

							/**
							 * [tJavaRow_4 end ] stop
							 */

							/**
							 * [tMap_19 end ] start
							 */

							currentComponent = "tMap_19";

							// ###############################
							// # Lookup hashes releasing
							if (tHash_Lookup_row47 != null) {
								tHash_Lookup_row47.endGet();
							}
							globalMap.remove("tHash_Lookup_row47");

							// ###############################

							ok_Hash.put("tMap_19", true);
							end_Hash.put("tMap_19", System.currentTimeMillis());

							/**
							 * [tMap_19 end ] stop
							 */

							/**
							 * [tUniqRow_1 end ] start
							 */

							currentComponent = "tUniqRow_1";

							globalMap.put("tUniqRow_1_NB_UNIQUES",
									nb_uniques_tUniqRow_1);
							globalMap.put("tUniqRow_1_NB_DUPLICATES",
									nb_duplicates_tUniqRow_1);

							ok_Hash.put("tUniqRow_1", true);
							end_Hash.put("tUniqRow_1",
									System.currentTimeMillis());

							/**
							 * [tUniqRow_1 end ] stop
							 */

							/**
							 * [tFileOutputDelimited_29 end ] start
							 */

							currentComponent = "tFileOutputDelimited_29";

						} finally {

							if (CsvWritertFileOutputDelimited_29 != null) {
								CsvWritertFileOutputDelimited_29.close();
							}
							globalMap.put("tFileOutputDelimited_29_NB_LINE",
									nb_line_tFileOutputDelimited_29);
						} // finally

						ok_Hash.put("tFileOutputDelimited_29", true);
						end_Hash.put("tFileOutputDelimited_29",
								System.currentTimeMillis());

						/**
						 * [tFileOutputDelimited_29 end ] stop
						 */

						/**
						 * [tJavaRow_1 end ] start
						 */

						currentComponent = "tJavaRow_1";

						globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

						ok_Hash.put("tJavaRow_1", true);
						end_Hash.put("tJavaRow_1", System.currentTimeMillis());

						/**
						 * [tJavaRow_1 end ] stop
						 */

						/**
						 * [tMap_2 end ] start
						 */

						currentComponent = "tMap_2";

						// ###############################
						// # Lookup hashes releasing
						if (tHash_Lookup_row48 != null) {
							tHash_Lookup_row48.endGet();
						}
						globalMap.remove("tHash_Lookup_row48");

						// ###############################

						ok_Hash.put("tMap_2", true);
						end_Hash.put("tMap_2", System.currentTimeMillis());

						/**
						 * [tMap_2 end ] stop
						 */

						/**
						 * [tUniqRow_3 end ] start
						 */

						currentComponent = "tUniqRow_3";

						globalMap.put("tUniqRow_3_NB_UNIQUES",
								nb_uniques_tUniqRow_3);
						globalMap.put("tUniqRow_3_NB_DUPLICATES",
								nb_duplicates_tUniqRow_3);

						ok_Hash.put("tUniqRow_3", true);
						end_Hash.put("tUniqRow_3", System.currentTimeMillis());

						/**
						 * [tUniqRow_3 end ] stop
						 */

						/**
						 * [tFileOutputDelimited_5 end ] start
						 */

						currentComponent = "tFileOutputDelimited_5";

					} finally {

						if (CsvWritertFileOutputDelimited_5 != null) {
							CsvWritertFileOutputDelimited_5.close();
						}
						globalMap.put("tFileOutputDelimited_5_NB_LINE",
								nb_line_tFileOutputDelimited_5);
					} // finally

					ok_Hash.put("tFileOutputDelimited_5", true);
					end_Hash.put("tFileOutputDelimited_5",
							System.currentTimeMillis());

					/**
					 * [tFileOutputDelimited_5 end ] stop
					 */

					/**
					 * [tUniqRow_4 end ] start
					 */

					currentComponent = "tUniqRow_4";

					globalMap.put("tUniqRow_4_NB_UNIQUES",
							nb_uniques_tUniqRow_4);
					globalMap.put("tUniqRow_4_NB_DUPLICATES",
							nb_duplicates_tUniqRow_4);

					ok_Hash.put("tUniqRow_4", true);
					end_Hash.put("tUniqRow_4", System.currentTimeMillis());

					/**
					 * [tUniqRow_4 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_4 end ] start
					 */

					currentComponent = "tFileOutputDelimited_4";

				} finally {

					if (CsvWritertFileOutputDelimited_4 != null) {
						CsvWritertFileOutputDelimited_4.close();
					}
					globalMap.put("tFileOutputDelimited_4_NB_LINE",
							nb_line_tFileOutputDelimited_4);
				} // finally

				ok_Hash.put("tFileOutputDelimited_4", true);
				end_Hash.put("tFileOutputDelimited_4",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_4 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk1",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputDelimited_28Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk2",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_14Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		} finally {
			// free memory for "tMap_19"
			globalMap.remove("tHash_Lookup_row47");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row48");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_from_src_ont");

		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class toCD_ModStruct implements
			routines.system.IPersistableRow<toCD_ModStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.CONCEPT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.CONCEPT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(toCD_ModStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row43Struct implements
			routines.system.IPersistableRow<row43Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public Integer TARGET_ID;

		public Integer getTARGET_ID() {
			return this.TARGET_ID;
		}

		public Integer TREE_LEVEL;

		public Integer getTREE_LEVEL() {
			return this.TREE_LEVEL;
		}

		public String TREE_PATH;

		public String getTREE_PATH() {
			return this.TREE_PATH;
		}

		public String STAGING_PATH;

		public String getSTAGING_PATH() {
			return this.STAGING_PATH;
		}

		public String STAGING_DIMENSION;

		public String getSTAGING_DIMENSION() {
			return this.STAGING_DIMENSION;
		}

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		public String STARTDATE_STAGING_PATH;

		public String getSTARTDATE_STAGING_PATH() {
			return this.STARTDATE_STAGING_PATH;
		}

		public String ENDDATE_STAGING_PATH;

		public String getENDDATE_STAGING_PATH() {
			return this.ENDDATE_STAGING_PATH;
		}

		public String VISUALATTRIBUTES;

		public String getVISUALATTRIBUTES() {
			return this.VISUALATTRIBUTES;
		}

		public String BASECODE;

		public String getBASECODE() {
			return this.BASECODE;
		}

		public String METADATAXML;

		public String getMETADATAXML() {
			return this.METADATAXML;
		}

		public String COLUMNDATATYPE;

		public String getCOLUMNDATATYPE() {
			return this.COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String TOOLTIP;

		public String getTOOLTIP() {
			return this.TOOLTIP;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.TARGET_ID = readInteger(dis);

					this.TREE_LEVEL = readInteger(dis);

					this.TREE_PATH = readString(dis);

					this.STAGING_PATH = readString(dis);

					this.STAGING_DIMENSION = readString(dis);

					this.NAME = readString(dis);

					this.STARTDATE_STAGING_PATH = readString(dis);

					this.ENDDATE_STAGING_PATH = readString(dis);

					this.VISUALATTRIBUTES = readString(dis);

					this.BASECODE = readString(dis);

					this.METADATAXML = readString(dis);

					this.COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_COMMENT = readString(dis);

					this.TOOLTIP = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.TARGET_ID, dos);

				// Integer

				writeInteger(this.TREE_LEVEL, dos);

				// String

				writeString(this.TREE_PATH, dos);

				// String

				writeString(this.STAGING_PATH, dos);

				// String

				writeString(this.STAGING_DIMENSION, dos);

				// String

				writeString(this.NAME, dos);

				// String

				writeString(this.STARTDATE_STAGING_PATH, dos);

				// String

				writeString(this.ENDDATE_STAGING_PATH, dos);

				// String

				writeString(this.VISUALATTRIBUTES, dos);

				// String

				writeString(this.BASECODE, dos);

				// String

				writeString(this.METADATAXML, dos);

				// String

				writeString(this.COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.TOOLTIP, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TARGET_ID=" + String.valueOf(TARGET_ID));
			sb.append(",TREE_LEVEL=" + String.valueOf(TREE_LEVEL));
			sb.append(",TREE_PATH=" + TREE_PATH);
			sb.append(",STAGING_PATH=" + STAGING_PATH);
			sb.append(",STAGING_DIMENSION=" + STAGING_DIMENSION);
			sb.append(",NAME=" + NAME);
			sb.append(",STARTDATE_STAGING_PATH=" + STARTDATE_STAGING_PATH);
			sb.append(",ENDDATE_STAGING_PATH=" + ENDDATE_STAGING_PATH);
			sb.append(",VISUALATTRIBUTES=" + VISUALATTRIBUTES);
			sb.append(",BASECODE=" + BASECODE);
			sb.append(",METADATAXML=" + METADATAXML);
			sb.append(",COLUMNDATATYPE=" + COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",TOOLTIP=" + TOOLTIP);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row43Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_28Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_28Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public Integer TARGET_ID;

		public Integer getTARGET_ID() {
			return this.TARGET_ID;
		}

		public Integer TREE_LEVEL;

		public Integer getTREE_LEVEL() {
			return this.TREE_LEVEL;
		}

		public String TREE_PATH;

		public String getTREE_PATH() {
			return this.TREE_PATH;
		}

		public String STAGING_PATH;

		public String getSTAGING_PATH() {
			return this.STAGING_PATH;
		}

		public String STAGING_DIMENSION;

		public String getSTAGING_DIMENSION() {
			return this.STAGING_DIMENSION;
		}

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		public String STARTDATE_STAGING_PATH;

		public String getSTARTDATE_STAGING_PATH() {
			return this.STARTDATE_STAGING_PATH;
		}

		public String ENDDATE_STAGING_PATH;

		public String getENDDATE_STAGING_PATH() {
			return this.ENDDATE_STAGING_PATH;
		}

		public String VISUALATTRIBUTES;

		public String getVISUALATTRIBUTES() {
			return this.VISUALATTRIBUTES;
		}

		public String BASECODE;

		public String getBASECODE() {
			return this.BASECODE;
		}

		public String METADATAXML;

		public String getMETADATAXML() {
			return this.METADATAXML;
		}

		public String COLUMNDATATYPE;

		public String getCOLUMNDATATYPE() {
			return this.COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String TOOLTIP;

		public String getTOOLTIP() {
			return this.TOOLTIP;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.TARGET_ID = readInteger(dis);

					this.TREE_LEVEL = readInteger(dis);

					this.TREE_PATH = readString(dis);

					this.STAGING_PATH = readString(dis);

					this.STAGING_DIMENSION = readString(dis);

					this.NAME = readString(dis);

					this.STARTDATE_STAGING_PATH = readString(dis);

					this.ENDDATE_STAGING_PATH = readString(dis);

					this.VISUALATTRIBUTES = readString(dis);

					this.BASECODE = readString(dis);

					this.METADATAXML = readString(dis);

					this.COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_COMMENT = readString(dis);

					this.TOOLTIP = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.TARGET_ID, dos);

				// Integer

				writeInteger(this.TREE_LEVEL, dos);

				// String

				writeString(this.TREE_PATH, dos);

				// String

				writeString(this.STAGING_PATH, dos);

				// String

				writeString(this.STAGING_DIMENSION, dos);

				// String

				writeString(this.NAME, dos);

				// String

				writeString(this.STARTDATE_STAGING_PATH, dos);

				// String

				writeString(this.ENDDATE_STAGING_PATH, dos);

				// String

				writeString(this.VISUALATTRIBUTES, dos);

				// String

				writeString(this.BASECODE, dos);

				// String

				writeString(this.METADATAXML, dos);

				// String

				writeString(this.COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.TOOLTIP, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TARGET_ID=" + String.valueOf(TARGET_ID));
			sb.append(",TREE_LEVEL=" + String.valueOf(TREE_LEVEL));
			sb.append(",TREE_PATH=" + TREE_PATH);
			sb.append(",STAGING_PATH=" + STAGING_PATH);
			sb.append(",STAGING_DIMENSION=" + STAGING_DIMENSION);
			sb.append(",NAME=" + NAME);
			sb.append(",STARTDATE_STAGING_PATH=" + STARTDATE_STAGING_PATH);
			sb.append(",ENDDATE_STAGING_PATH=" + ENDDATE_STAGING_PATH);
			sb.append(",VISUALATTRIBUTES=" + VISUALATTRIBUTES);
			sb.append(",BASECODE=" + BASECODE);
			sb.append(",METADATAXML=" + METADATAXML);
			sb.append(",COLUMNDATATYPE=" + COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",TOOLTIP=" + TOOLTIP);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_28Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_28Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_28_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_33Process(globalMap);

				row43Struct row43 = new row43Struct();
				toCD_ModStruct toCD_Mod = new toCD_ModStruct();

				/**
				 * [tFileOutputDelimited_32 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_32", false);
				start_Hash.put("tFileOutputDelimited_32",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_32";

				int tos_count_tFileOutputDelimited_32 = 0;

				String fileName_tFileOutputDelimited_32 = "";
				fileName_tFileOutputDelimited_32 = (new java.io.File(
						context.folderMain + context.folderOutput
								+ "/concept_dimension.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_32 = null;
				String extension_tFileOutputDelimited_32 = null;
				String directory_tFileOutputDelimited_32 = null;
				if ((fileName_tFileOutputDelimited_32.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_32.lastIndexOf(".") < fileName_tFileOutputDelimited_32
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_32 = fileName_tFileOutputDelimited_32;
						extension_tFileOutputDelimited_32 = "";
					} else {
						fullName_tFileOutputDelimited_32 = fileName_tFileOutputDelimited_32
								.substring(0, fileName_tFileOutputDelimited_32
										.lastIndexOf("."));
						extension_tFileOutputDelimited_32 = fileName_tFileOutputDelimited_32
								.substring(fileName_tFileOutputDelimited_32
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_32 = fileName_tFileOutputDelimited_32
							.substring(0, fileName_tFileOutputDelimited_32
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_32.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_32 = fileName_tFileOutputDelimited_32
								.substring(0, fileName_tFileOutputDelimited_32
										.lastIndexOf("."));
						extension_tFileOutputDelimited_32 = fileName_tFileOutputDelimited_32
								.substring(fileName_tFileOutputDelimited_32
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_32 = fileName_tFileOutputDelimited_32;
						extension_tFileOutputDelimited_32 = "";
					}
					directory_tFileOutputDelimited_32 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_32 = true;
				java.io.File filetFileOutputDelimited_32 = new java.io.File(
						fileName_tFileOutputDelimited_32);
				globalMap.put("tFileOutputDelimited_32_FILE_NAME",
						fileName_tFileOutputDelimited_32);
				if (filetFileOutputDelimited_32.exists()) {
					isFileGenerated_tFileOutputDelimited_32 = false;
				}

				String[] headColutFileOutputDelimited_32 = new String[9];
				class CSVBasicSet_tFileOutputDelimited_32 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_32[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_32 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_32[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_32[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_32 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_32[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_32[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_32 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_32[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_32 = 0;
				int splitEvery_tFileOutputDelimited_32 = 1000;
				int splitedFileNo_tFileOutputDelimited_32 = 0;
				int currentRow_tFileOutputDelimited_32 = 0;

				CSVBasicSet_tFileOutputDelimited_32 csvSettings_tFileOutputDelimited_32 = new CSVBasicSet_tFileOutputDelimited_32();
				csvSettings_tFileOutputDelimited_32.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_32.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_32.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_32 != null
						&& directory_tFileOutputDelimited_32.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_32 = new java.io.File(
							directory_tFileOutputDelimited_32);
					if (!dir_tFileOutputDelimited_32.exists()) {
						dir_tFileOutputDelimited_32.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_32 = null;
				try {
					CsvWritertFileOutputDelimited_32 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_32,
													true), "UTF-8")));
					CsvWritertFileOutputDelimited_32
							.setSeparator(csvSettings_tFileOutputDelimited_32
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_32
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_32
									.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_32
									.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_32.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_32
										.getRowDelim());
					}

					if (filetFileOutputDelimited_32.length() == 0) {

						headColutFileOutputDelimited_32[0] = "CONCEPT_PATH";

						headColutFileOutputDelimited_32[1] = "CONCEPT_CD";

						headColutFileOutputDelimited_32[2] = "NAME_CHAR";

						headColutFileOutputDelimited_32[3] = "CONCEPT_BLOB";

						headColutFileOutputDelimited_32[4] = "UPDATE_DATE";

						headColutFileOutputDelimited_32[5] = "DOWNLOAD_DATE";

						headColutFileOutputDelimited_32[6] = "IMPORT_DATE";

						headColutFileOutputDelimited_32[7] = "SOURCESYSTEM_CD";

						headColutFileOutputDelimited_32[8] = "UPLOAD_ID";

						CsvWritertFileOutputDelimited_32
								.writeNext(headColutFileOutputDelimited_32);
						CsvWritertFileOutputDelimited_32.flush();

					}

					CsvWritertFileOutputDelimited_32
							.setEscapeChar(csvSettings_tFileOutputDelimited_32
									.getEscapeChar());
					CsvWritertFileOutputDelimited_32
							.setQuoteChar(csvSettings_tFileOutputDelimited_32
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_32
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_32 begin ] stop
					 */

					/**
					 * [tMap_21 begin ] start
					 */

					ok_Hash.put("tMap_21", false);
					start_Hash.put("tMap_21", System.currentTimeMillis());
					currentComponent = "tMap_21";

					int tos_count_tMap_21 = 0;

					// ###############################
					// # Lookup's keys initialization

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row49Struct> tHash_Lookup_row49 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row49Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row49Struct>) globalMap
							.get("tHash_Lookup_row49"));

					row49Struct row49HashKey = new row49Struct();
					row49Struct row49Default = new row49Struct();
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_21__Struct {
					}
					Var__tMap_21__Struct Var__tMap_21 = new Var__tMap_21__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					toCD_ModStruct toCD_Mod_tmp = new toCD_ModStruct();
					// ###############################

					/**
					 * [tMap_21 begin ] stop
					 */

					/**
					 * [tFileInputDelimited_28 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_28", false);
					start_Hash.put("tFileInputDelimited_28",
							System.currentTimeMillis());
					currentComponent = "tFileInputDelimited_28";

					int tos_count_tFileInputDelimited_28 = 0;

					int nb_line_tFileInputDelimited_28 = 0;
					int footer_tFileInputDelimited_28 = 0;
					int totalLinetFileInputDelimited_28 = 0;
					int limittFileInputDelimited_28 = -1;
					int lastLinetFileInputDelimited_28 = -1;

					char fieldSeparator_tFileInputDelimited_28[] = null;

					// support passing value (property: Field Separator) by
					// 'context.fs' or 'globalMap.get("fs")'.
					if (((String) "\t").length() > 0) {
						fieldSeparator_tFileInputDelimited_28 = ((String) "\t")
								.toCharArray();
					} else {
						throw new IllegalArgumentException(
								"Field Separator must be assigned a char.");
					}

					char rowSeparator_tFileInputDelimited_28[] = null;

					// support passing value (property: Row Separator) by
					// 'context.rs' or 'globalMap.get("rs")'.
					if (((String) "\n").length() > 0) {
						rowSeparator_tFileInputDelimited_28 = ((String) "\n")
								.toCharArray();
					} else {
						throw new IllegalArgumentException(
								"Row Separator must be assigned a char.");
					}

					Object filename_tFileInputDelimited_28 = /**
					 * Start field
					 * tFileInputDelimited_28:FILENAME
					 */
					((String) globalMap.get("tCreateTemporaryFile_1_FILEPATH"))/**
					 * 
					 * End field tFileInputDelimited_28:FILENAME
					 */
					;
					com.talend.csv.CSVReader csvReadertFileInputDelimited_28 = null;

					try {

						String[] rowtFileInputDelimited_28 = null;
						int currentLinetFileInputDelimited_28 = 0;
						int outputLinetFileInputDelimited_28 = 0;
						try {// TD110 begin
							if (filename_tFileInputDelimited_28 instanceof java.io.InputStream) {

								int footer_value_tFileInputDelimited_28 = 0;
								if (footer_value_tFileInputDelimited_28 > 0) {
									throw new java.lang.Exception(
											"When the input source is a stream,footer shouldn't be bigger than 0.");
								}

								csvReadertFileInputDelimited_28 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_28,
										fieldSeparator_tFileInputDelimited_28[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_28 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_28)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_28[0]);
							}

							csvReadertFileInputDelimited_28
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_28[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_28[0] != '\r'))
								csvReadertFileInputDelimited_28
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_28[0]);

							csvReadertFileInputDelimited_28.setQuoteChar('"');

							csvReadertFileInputDelimited_28
									.setEscapeChar(csvReadertFileInputDelimited_28
											.getQuoteChar());

							if (footer_tFileInputDelimited_28 > 0) {
								for (totalLinetFileInputDelimited_28 = 0; totalLinetFileInputDelimited_28 < 1; totalLinetFileInputDelimited_28++) {
									csvReadertFileInputDelimited_28.readNext();
								}
								csvReadertFileInputDelimited_28
										.setSkipEmptyRecords(true);
								while (csvReadertFileInputDelimited_28
										.readNext()) {

									rowtFileInputDelimited_28 = csvReadertFileInputDelimited_28
											.getValues();
									if (!(rowtFileInputDelimited_28.length == 1 && ("\015")
											.equals(rowtFileInputDelimited_28[0]))) {// empty
																						// line
																						// when
																						// row
																						// separator
																						// is
																						// '\n'

										totalLinetFileInputDelimited_28++;

									}

								}
								int lastLineTemptFileInputDelimited_28 = totalLinetFileInputDelimited_28
										- footer_tFileInputDelimited_28 < 0 ? 0
										: totalLinetFileInputDelimited_28
												- footer_tFileInputDelimited_28;
								if (lastLinetFileInputDelimited_28 > 0) {
									lastLinetFileInputDelimited_28 = lastLinetFileInputDelimited_28 < lastLineTemptFileInputDelimited_28 ? lastLinetFileInputDelimited_28
											: lastLineTemptFileInputDelimited_28;
								} else {
									lastLinetFileInputDelimited_28 = lastLineTemptFileInputDelimited_28;
								}

								csvReadertFileInputDelimited_28.close();
								if (filename_tFileInputDelimited_28 instanceof java.io.InputStream) {
									csvReadertFileInputDelimited_28 = new com.talend.csv.CSVReader(
											(java.io.InputStream) filename_tFileInputDelimited_28,
											fieldSeparator_tFileInputDelimited_28[0],
											"UTF-8");
								} else {
									csvReadertFileInputDelimited_28 = new com.talend.csv.CSVReader(
											new java.io.BufferedReader(
													new java.io.InputStreamReader(
															new java.io.FileInputStream(
																	String.valueOf(filename_tFileInputDelimited_28)),
															"UTF-8")),
											fieldSeparator_tFileInputDelimited_28[0]);
								}
								csvReadertFileInputDelimited_28
										.setTrimWhitespace(false);
								if ((rowSeparator_tFileInputDelimited_28[0] != '\n')
										&& (rowSeparator_tFileInputDelimited_28[0] != '\r'))
									csvReadertFileInputDelimited_28
											.setLineEnd(""
													+ rowSeparator_tFileInputDelimited_28[0]);

								csvReadertFileInputDelimited_28
										.setQuoteChar('"');

								csvReadertFileInputDelimited_28
										.setEscapeChar(csvReadertFileInputDelimited_28
												.getQuoteChar());

							}

							if (limittFileInputDelimited_28 != 0) {
								for (currentLinetFileInputDelimited_28 = 0; currentLinetFileInputDelimited_28 < 1; currentLinetFileInputDelimited_28++) {
									csvReadertFileInputDelimited_28.readNext();
								}
							}
							csvReadertFileInputDelimited_28
									.setSkipEmptyRecords(true);

						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());

						}// TD110 end

						while (limittFileInputDelimited_28 != 0
								&& csvReadertFileInputDelimited_28 != null
								&& csvReadertFileInputDelimited_28.readNext()) {

							rowtFileInputDelimited_28 = csvReadertFileInputDelimited_28
									.getValues();

							if (rowtFileInputDelimited_28.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_28[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
								continue;
							}

							currentLinetFileInputDelimited_28++;

							if (lastLinetFileInputDelimited_28 > -1
									&& currentLinetFileInputDelimited_28 > lastLinetFileInputDelimited_28) {
								break;
							}
							outputLinetFileInputDelimited_28++;
							if (limittFileInputDelimited_28 > 0
									&& outputLinetFileInputDelimited_28 > limittFileInputDelimited_28) {
								break;
							}

							row43 = null;

							boolean whetherReject_tFileInputDelimited_28 = false;
							row43 = new row43Struct();
							try {

								if (rowtFileInputDelimited_28.length == 1
										&& ("\015")
												.equals(rowtFileInputDelimited_28[0])) {// empty
																						// line
																						// when
																						// row
																						// separator
																						// is
																						// '\n'

									row43.TARGET_ID = null;

									row43.TREE_LEVEL = null;

									row43.TREE_PATH = null;

									row43.STAGING_PATH = null;

									row43.STAGING_DIMENSION = null;

									row43.NAME = null;

									row43.STARTDATE_STAGING_PATH = null;

									row43.ENDDATE_STAGING_PATH = null;

									row43.VISUALATTRIBUTES = null;

									row43.BASECODE = null;

									row43.METADATAXML = null;

									row43.COLUMNDATATYPE = null;

									row43.C_OPERATOR = null;

									row43.C_COMMENT = null;

									row43.TOOLTIP = null;

									row43.UPDATE_DATE = null;

									row43.DOWNLOAD_DATE = null;

									row43.IMPORT_DATE = null;

									row43.SOURCESYSTEM_CD = null;

									row43.VALUETYPE_CD = null;

									row43.M_APPLIED_PATH = null;

								} else {

									int columnIndexWithD_tFileInputDelimited_28 = 0; // Column
																						// Index

									columnIndexWithD_tFileInputDelimited_28 = 0;

									if (columnIndexWithD_tFileInputDelimited_28 < rowtFileInputDelimited_28.length) {

										if (rowtFileInputDelimited_28[columnIndexWithD_tFileInputDelimited_28]
												.length() > 0) {

											row43.TARGET_ID = ParserUtils
													.parseTo_Integer(rowtFileInputDelimited_28[columnIndexWithD_tFileInputDelimited_28]);

										} else {
											row43.TARGET_ID = null;
										}

									} else {
										row43.TARGET_ID = null;
									}

									columnIndexWithD_tFileInputDelimited_28 = 1;

									if (columnIndexWithD_tFileInputDelimited_28 < rowtFileInputDelimited_28.length) {

										if (rowtFileInputDelimited_28[columnIndexWithD_tFileInputDelimited_28]
												.length() > 0) {

											row43.TREE_LEVEL = ParserUtils
													.parseTo_Integer(rowtFileInputDelimited_28[columnIndexWithD_tFileInputDelimited_28]);

										} else {
											row43.TREE_LEVEL = null;
										}

									} else {
										row43.TREE_LEVEL = null;
									}

									columnIndexWithD_tFileInputDelimited_28 = 2;

									if (columnIndexWithD_tFileInputDelimited_28 < rowtFileInputDelimited_28.length) {

										row43.TREE_PATH = rowtFileInputDelimited_28[columnIndexWithD_tFileInputDelimited_28];

									} else {
										row43.TREE_PATH = null;
									}

									columnIndexWithD_tFileInputDelimited_28 = 3;

									if (columnIndexWithD_tFileInputDelimited_28 < rowtFileInputDelimited_28.length) {

										row43.STAGING_PATH = rowtFileInputDelimited_28[columnIndexWithD_tFileInputDelimited_28];

									} else {
										row43.STAGING_PATH = null;
									}

									columnIndexWithD_tFileInputDelimited_28 = 4;

									if (columnIndexWithD_tFileInputDelimited_28 < rowtFileInputDelimited_28.length) {

										row43.STAGING_DIMENSION = rowtFileInputDelimited_28[columnIndexWithD_tFileInputDelimited_28];

									} else {
										row43.STAGING_DIMENSION = null;
									}

									columnIndexWithD_tFileInputDelimited_28 = 5;

									if (columnIndexWithD_tFileInputDelimited_28 < rowtFileInputDelimited_28.length) {

										row43.NAME = rowtFileInputDelimited_28[columnIndexWithD_tFileInputDelimited_28];

									} else {
										row43.NAME = null;
									}

									columnIndexWithD_tFileInputDelimited_28 = 6;

									if (columnIndexWithD_tFileInputDelimited_28 < rowtFileInputDelimited_28.length) {

										row43.STARTDATE_STAGING_PATH = rowtFileInputDelimited_28[columnIndexWithD_tFileInputDelimited_28];

									} else {
										row43.STARTDATE_STAGING_PATH = null;
									}

									columnIndexWithD_tFileInputDelimited_28 = 7;

									if (columnIndexWithD_tFileInputDelimited_28 < rowtFileInputDelimited_28.length) {

										row43.ENDDATE_STAGING_PATH = rowtFileInputDelimited_28[columnIndexWithD_tFileInputDelimited_28];

									} else {
										row43.ENDDATE_STAGING_PATH = null;
									}

									columnIndexWithD_tFileInputDelimited_28 = 8;

									if (columnIndexWithD_tFileInputDelimited_28 < rowtFileInputDelimited_28.length) {

										row43.VISUALATTRIBUTES = rowtFileInputDelimited_28[columnIndexWithD_tFileInputDelimited_28];

									} else {
										row43.VISUALATTRIBUTES = null;
									}

									columnIndexWithD_tFileInputDelimited_28 = 9;

									if (columnIndexWithD_tFileInputDelimited_28 < rowtFileInputDelimited_28.length) {

										row43.BASECODE = rowtFileInputDelimited_28[columnIndexWithD_tFileInputDelimited_28];

									} else {
										row43.BASECODE = null;
									}

									columnIndexWithD_tFileInputDelimited_28 = 10;

									if (columnIndexWithD_tFileInputDelimited_28 < rowtFileInputDelimited_28.length) {

										row43.METADATAXML = rowtFileInputDelimited_28[columnIndexWithD_tFileInputDelimited_28];

									} else {
										row43.METADATAXML = null;
									}

									columnIndexWithD_tFileInputDelimited_28 = 11;

									if (columnIndexWithD_tFileInputDelimited_28 < rowtFileInputDelimited_28.length) {

										row43.COLUMNDATATYPE = rowtFileInputDelimited_28[columnIndexWithD_tFileInputDelimited_28];

									} else {
										row43.COLUMNDATATYPE = null;
									}

									columnIndexWithD_tFileInputDelimited_28 = 12;

									if (columnIndexWithD_tFileInputDelimited_28 < rowtFileInputDelimited_28.length) {

										row43.C_OPERATOR = rowtFileInputDelimited_28[columnIndexWithD_tFileInputDelimited_28];

									} else {
										row43.C_OPERATOR = null;
									}

									columnIndexWithD_tFileInputDelimited_28 = 13;

									if (columnIndexWithD_tFileInputDelimited_28 < rowtFileInputDelimited_28.length) {

										row43.C_COMMENT = rowtFileInputDelimited_28[columnIndexWithD_tFileInputDelimited_28];

									} else {
										row43.C_COMMENT = null;
									}

									columnIndexWithD_tFileInputDelimited_28 = 14;

									if (columnIndexWithD_tFileInputDelimited_28 < rowtFileInputDelimited_28.length) {

										row43.TOOLTIP = rowtFileInputDelimited_28[columnIndexWithD_tFileInputDelimited_28];

									} else {
										row43.TOOLTIP = null;
									}

									columnIndexWithD_tFileInputDelimited_28 = 15;

									if (columnIndexWithD_tFileInputDelimited_28 < rowtFileInputDelimited_28.length) {

										if (rowtFileInputDelimited_28[columnIndexWithD_tFileInputDelimited_28]
												.length() > 0) {

											row43.UPDATE_DATE = ParserUtils
													.parseTo_Date(
															rowtFileInputDelimited_28[columnIndexWithD_tFileInputDelimited_28],
															"dd-MM-yyyy");

										} else {
											row43.UPDATE_DATE = null;
										}

									} else {
										row43.UPDATE_DATE = null;
									}

									columnIndexWithD_tFileInputDelimited_28 = 16;

									if (columnIndexWithD_tFileInputDelimited_28 < rowtFileInputDelimited_28.length) {

										if (rowtFileInputDelimited_28[columnIndexWithD_tFileInputDelimited_28]
												.length() > 0) {

											row43.DOWNLOAD_DATE = ParserUtils
													.parseTo_Date(
															rowtFileInputDelimited_28[columnIndexWithD_tFileInputDelimited_28],
															"dd-MM-yyyy");

										} else {
											row43.DOWNLOAD_DATE = null;
										}

									} else {
										row43.DOWNLOAD_DATE = null;
									}

									columnIndexWithD_tFileInputDelimited_28 = 17;

									if (columnIndexWithD_tFileInputDelimited_28 < rowtFileInputDelimited_28.length) {

										if (rowtFileInputDelimited_28[columnIndexWithD_tFileInputDelimited_28]
												.length() > 0) {

											row43.IMPORT_DATE = ParserUtils
													.parseTo_Date(
															rowtFileInputDelimited_28[columnIndexWithD_tFileInputDelimited_28],
															"dd-MM-yyyy");

										} else {
											row43.IMPORT_DATE = null;
										}

									} else {
										row43.IMPORT_DATE = null;
									}

									columnIndexWithD_tFileInputDelimited_28 = 18;

									if (columnIndexWithD_tFileInputDelimited_28 < rowtFileInputDelimited_28.length) {

										row43.SOURCESYSTEM_CD = rowtFileInputDelimited_28[columnIndexWithD_tFileInputDelimited_28];

									} else {
										row43.SOURCESYSTEM_CD = null;
									}

									columnIndexWithD_tFileInputDelimited_28 = 19;

									if (columnIndexWithD_tFileInputDelimited_28 < rowtFileInputDelimited_28.length) {

										row43.VALUETYPE_CD = rowtFileInputDelimited_28[columnIndexWithD_tFileInputDelimited_28];

									} else {
										row43.VALUETYPE_CD = null;
									}

									columnIndexWithD_tFileInputDelimited_28 = 20;

									if (columnIndexWithD_tFileInputDelimited_28 < rowtFileInputDelimited_28.length) {

										row43.M_APPLIED_PATH = rowtFileInputDelimited_28[columnIndexWithD_tFileInputDelimited_28];

									} else {
										row43.M_APPLIED_PATH = null;
									}

								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputDelimited_28 = true;

								System.err.println(e.getMessage());
								row43 = null;

							}

							/**
							 * [tFileInputDelimited_28 begin ] stop
							 */
							/**
							 * [tFileInputDelimited_28 main ] start
							 */

							currentComponent = "tFileInputDelimited_28";

							tos_count_tFileInputDelimited_28++;

							/**
							 * [tFileInputDelimited_28 main ] stop
							 */
							// Start of branch "row43"
							if (row43 != null) {

								/**
								 * [tMap_21 main ] start
								 */

								currentComponent = "tMap_21";

								boolean hasCasePrimitiveKeyWithNull_tMap_21 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_21 = false;
								boolean mainRowRejected_tMap_21 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row49"
								// /////////////////////////////////////////////

								boolean forceLooprow49 = false;

								row49Struct row49ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_21) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_21 = false;

									row49HashKey.CONCEPT_PATH = row43.STAGING_PATH;

									row49HashKey.hashCodeDirty = true;

									tHash_Lookup_row49.lookup(row49HashKey);

									if (!tHash_Lookup_row49.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_21 = true;

										forceLooprow49 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								else { // G 20 - G 21
									forceLooprow49 = true;
								} // G 21

								row49Struct row49 = null;

								while ((tHash_Lookup_row49 != null && tHash_Lookup_row49
										.hasNext()) || forceLooprow49) { // G_TM_M_043

									// CALL close loop of lookup 'row49'

									row49Struct fromLookup_row49 = null;
									row49 = row49Default;

									if (!forceLooprow49) { // G 46

										fromLookup_row49 = tHash_Lookup_row49
												.next();

										if (fromLookup_row49 != null) {
											row49 = fromLookup_row49;
										}

									} // G 46

									forceLooprow49 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_21__Struct Var = Var__tMap_21;// ###############################
										// ###############################
										// # Output tables

										toCD_Mod = null;

										if (!rejectedInnerJoin_tMap_21) {

											// # Output table : 'toCD_Mod'
											toCD_Mod_tmp.CONCEPT_PATH = row43.STAGING_PATH;
											toCD_Mod_tmp.CONCEPT_CD = row49.CONCEPT_CD;
											toCD_Mod_tmp.NAME_CHAR = row43.NAME;
											toCD_Mod_tmp.CONCEPT_BLOB = null;
											toCD_Mod_tmp.UPDATE_DATE = row43.UPDATE_DATE;
											toCD_Mod_tmp.DOWNLOAD_DATE = row43.DOWNLOAD_DATE;
											toCD_Mod_tmp.IMPORT_DATE = row43.IMPORT_DATE;
											toCD_Mod_tmp.SOURCESYSTEM_CD = row43.SOURCESYSTEM_CD;
											toCD_Mod_tmp.UPLOAD_ID = null;
											toCD_Mod = toCD_Mod_tmp;
										} // closing inner join bracket (2)
											// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_21 = false;

									tos_count_tMap_21++;

									/**
									 * [tMap_21 main ] stop
									 */
									// Start of branch "toCD_Mod"
									if (toCD_Mod != null) {

										/**
										 * [tFileOutputDelimited_32 main ] start
										 */

										currentComponent = "tFileOutputDelimited_32";

										String[] rowtFileOutputDelimited_32 = new String[9];

										rowtFileOutputDelimited_32[0] = toCD_Mod.CONCEPT_PATH == null ? ""
												: toCD_Mod.CONCEPT_PATH;

										rowtFileOutputDelimited_32[1] = toCD_Mod.CONCEPT_CD == null ? ""
												: toCD_Mod.CONCEPT_CD;

										rowtFileOutputDelimited_32[2] = toCD_Mod.NAME_CHAR == null ? ""
												: toCD_Mod.NAME_CHAR;

										rowtFileOutputDelimited_32[3] = toCD_Mod.CONCEPT_BLOB == null ? ""
												: toCD_Mod.CONCEPT_BLOB;

										rowtFileOutputDelimited_32[4] = toCD_Mod.UPDATE_DATE == null ? ""
												: FormatterUtils.format_Date(
														toCD_Mod.UPDATE_DATE,
														"yyyy-MM-dd");

										rowtFileOutputDelimited_32[5] = toCD_Mod.DOWNLOAD_DATE == null ? ""
												: FormatterUtils.format_Date(
														toCD_Mod.DOWNLOAD_DATE,
														"yyyy-MM-dd");

										rowtFileOutputDelimited_32[6] = toCD_Mod.IMPORT_DATE == null ? ""
												: FormatterUtils.format_Date(
														toCD_Mod.IMPORT_DATE,
														"yyyy-MM-dd");

										rowtFileOutputDelimited_32[7] = toCD_Mod.SOURCESYSTEM_CD == null ? ""
												: toCD_Mod.SOURCESYSTEM_CD;

										rowtFileOutputDelimited_32[8] = toCD_Mod.UPLOAD_ID == null ? ""
												: toCD_Mod.UPLOAD_ID;

										nb_line_tFileOutputDelimited_32++;
										CsvWritertFileOutputDelimited_32
												.writeNext(rowtFileOutputDelimited_32);

										tos_count_tFileOutputDelimited_32++;

										/**
										 * [tFileOutputDelimited_32 main ] stop
										 */

									} // End of branch "toCD_Mod"

								} // close loop of lookup 'row49' // G_TM_M_043

							} // End of branch "row43"

							/**
							 * [tFileInputDelimited_28 end ] start
							 */

							currentComponent = "tFileInputDelimited_28";

							nb_line_tFileInputDelimited_28++;
						}

					} finally {
						if (!(filename_tFileInputDelimited_28 instanceof java.io.InputStream)) {
							if (csvReadertFileInputDelimited_28 != null) {
								csvReadertFileInputDelimited_28.close();
							}
						}
						if (csvReadertFileInputDelimited_28 != null) {
							globalMap.put("tFileInputDelimited_28_NB_LINE",
									nb_line_tFileInputDelimited_28);
						}
					}

					ok_Hash.put("tFileInputDelimited_28", true);
					end_Hash.put("tFileInputDelimited_28",
							System.currentTimeMillis());

					/**
					 * [tFileInputDelimited_28 end ] stop
					 */

					/**
					 * [tMap_21 end ] start
					 */

					currentComponent = "tMap_21";

					// ###############################
					// # Lookup hashes releasing
					if (tHash_Lookup_row49 != null) {
						tHash_Lookup_row49.endGet();
					}
					globalMap.remove("tHash_Lookup_row49");

					// ###############################

					ok_Hash.put("tMap_21", true);
					end_Hash.put("tMap_21", System.currentTimeMillis());

					/**
					 * [tMap_21 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_32 end ] start
					 */

					currentComponent = "tFileOutputDelimited_32";

				} finally {

					if (CsvWritertFileOutputDelimited_32 != null) {
						CsvWritertFileOutputDelimited_32.close();
					}
					globalMap.put("tFileOutputDelimited_32_NB_LINE",
							nb_line_tFileOutputDelimited_32);
				} // finally

				ok_Hash.put("tFileOutputDelimited_32", true);
				end_Hash.put("tFileOutputDelimited_32",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_32 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		} finally {
			// free memory for "tMap_21"
			globalMap.remove("tHash_Lookup_row49");

		}

		globalMap.put("tFileInputDelimited_28_SUBPROCESS_STATE", 1);
	}

	public void tJava_14Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_14 begin ] start
				 */

				ok_Hash.put("tJava_14", false);
				start_Hash.put("tJava_14", System.currentTimeMillis());
				currentComponent = "tJava_14";

				int tos_count_tJava_14 = 0;

				System.out.println("Extracting Concept Data...");
				StatusListener.setStatus(40, "Transforming Staging to Target",
						"");

				/**
				 * [tJava_14 begin ] stop
				 */
				/**
				 * [tJava_14 main ] start
				 */

				currentComponent = "tJava_14";

				tos_count_tJava_14++;

				/**
				 * [tJava_14 main ] stop
				 */
				/**
				 * [tJava_14 end ] start
				 */

				currentComponent = "tJava_14";

				ok_Hash.put("tJava_14", true);
				end_Hash.put("tJava_14", System.currentTimeMillis());

				/**
				 * [tJava_14 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_14:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_5Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_14_SUBPROCESS_STATE", 1);
	}

	public static class asdStruct implements
			routines.system.IPersistableRow<asdStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String VITAL_STATUS_CD;

		public String getVITAL_STATUS_CD() {
			return this.VITAL_STATUS_CD;
		}

		public String BIRTH_DATE;

		public String getBIRTH_DATE() {
			return this.BIRTH_DATE;
		}

		public String DEATH_DATE;

		public String getDEATH_DATE() {
			return this.DEATH_DATE;
		}

		public String SEX_CD;

		public String getSEX_CD() {
			return this.SEX_CD;
		}

		public String AGE_IN_YEARS_NUM;

		public String getAGE_IN_YEARS_NUM() {
			return this.AGE_IN_YEARS_NUM;
		}

		public String LANGUAGE_CD;

		public String getLANGUAGE_CD() {
			return this.LANGUAGE_CD;
		}

		public String RACE_CD;

		public String getRACE_CD() {
			return this.RACE_CD;
		}

		public String MARITAL_STATUS_CD;

		public String getMARITAL_STATUS_CD() {
			return this.MARITAL_STATUS_CD;
		}

		public String RELIGION_CD;

		public String getRELIGION_CD() {
			return this.RELIGION_CD;
		}

		public String ZIP_CD;

		public String getZIP_CD() {
			return this.ZIP_CD;
		}

		public String STATECITYZIP_PATH;

		public String getSTATECITYZIP_PATH() {
			return this.STATECITYZIP_PATH;
		}

		public String INCOME_CD;

		public String getINCOME_CD() {
			return this.INCOME_CD;
		}

		public String PATIENT_BLOB;

		public String getPATIENT_BLOB() {
			return this.PATIENT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.VITAL_STATUS_CD = readString(dis);

					this.BIRTH_DATE = readString(dis);

					this.DEATH_DATE = readString(dis);

					this.SEX_CD = readString(dis);

					this.AGE_IN_YEARS_NUM = readString(dis);

					this.LANGUAGE_CD = readString(dis);

					this.RACE_CD = readString(dis);

					this.MARITAL_STATUS_CD = readString(dis);

					this.RELIGION_CD = readString(dis);

					this.ZIP_CD = readString(dis);

					this.STATECITYZIP_PATH = readString(dis);

					this.INCOME_CD = readString(dis);

					this.PATIENT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.VITAL_STATUS_CD, dos);

				// String

				writeString(this.BIRTH_DATE, dos);

				// String

				writeString(this.DEATH_DATE, dos);

				// String

				writeString(this.SEX_CD, dos);

				// String

				writeString(this.AGE_IN_YEARS_NUM, dos);

				// String

				writeString(this.LANGUAGE_CD, dos);

				// String

				writeString(this.RACE_CD, dos);

				// String

				writeString(this.MARITAL_STATUS_CD, dos);

				// String

				writeString(this.RELIGION_CD, dos);

				// String

				writeString(this.ZIP_CD, dos);

				// String

				writeString(this.STATECITYZIP_PATH, dos);

				// String

				writeString(this.INCOME_CD, dos);

				// String

				writeString(this.PATIENT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",VITAL_STATUS_CD=" + VITAL_STATUS_CD);
			sb.append(",BIRTH_DATE=" + BIRTH_DATE);
			sb.append(",DEATH_DATE=" + DEATH_DATE);
			sb.append(",SEX_CD=" + SEX_CD);
			sb.append(",AGE_IN_YEARS_NUM=" + AGE_IN_YEARS_NUM);
			sb.append(",LANGUAGE_CD=" + LANGUAGE_CD);
			sb.append(",RACE_CD=" + RACE_CD);
			sb.append(",MARITAL_STATUS_CD=" + MARITAL_STATUS_CD);
			sb.append(",RELIGION_CD=" + RELIGION_CD);
			sb.append(",ZIP_CD=" + ZIP_CD);
			sb.append(",STATECITYZIP_PATH=" + STATECITYZIP_PATH);
			sb.append(",INCOME_CD=" + INCOME_CD);
			sb.append(",PATIENT_BLOB=" + PATIENT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(asdStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class to_pat_mappingStruct implements
			routines.system.IPersistableRow<to_pat_mappingStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.PATIENT_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(to_pat_mappingStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class asddStruct implements
			routines.system.IPersistableRow<asddStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.PATIENT_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(asddStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class to_trgt_obsStruct implements
			routines.system.IPersistableRow<to_trgt_obsStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readDate(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readDate(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(to_trgt_obsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class to_patient_mappingStruct implements
			routines.system.IPersistableRow<to_patient_mappingStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(to_patient_mappingStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readDate(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readDate(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class asdddStruct implements
			routines.system.IPersistableRow<asdddStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public String START_DATE;

		public String getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public String END_DATE;

		public String getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readString(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// String

				writeString(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// String

				writeString(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + START_DATE);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + END_DATE);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(asdddStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public String START_DATE;

		public String getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public String END_DATE;

		public String getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		public String ENDDATE_SOURCE_PATH;

		public String getENDDATE_SOURCE_PATH() {
			return this.ENDDATE_SOURCE_PATH;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readString(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

					this.ENDDATE_SOURCE_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// String

				writeString(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// String

				writeString(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

				// String

				writeString(this.ENDDATE_SOURCE_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + START_DATE);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + END_DATE);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append(",ENDDATE_SOURCE_PATH=" + ENDDATE_SOURCE_PATH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class to_obs_fctStruct implements
			routines.system.IPersistableRow<to_obs_fctStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public String START_DATE;

		public String getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public String END_DATE;

		public String getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		public String STARTDATE_SOURCE_PATH;

		public String getSTARTDATE_SOURCE_PATH() {
			return this.STARTDATE_SOURCE_PATH;
		}

		public String ENDDATE_SOURCE_PATH;

		public String getENDDATE_SOURCE_PATH() {
			return this.ENDDATE_SOURCE_PATH;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readString(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

					this.STARTDATE_SOURCE_PATH = readString(dis);

					this.ENDDATE_SOURCE_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// String

				writeString(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// String

				writeString(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

				// String

				writeString(this.STARTDATE_SOURCE_PATH, dos);

				// String

				writeString(this.ENDDATE_SOURCE_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + START_DATE);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + END_DATE);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append(",STARTDATE_SOURCE_PATH=" + STARTDATE_SOURCE_PATH);
			sb.append(",ENDDATE_SOURCE_PATH=" + ENDDATE_SOURCE_PATH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(to_obs_fctStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class to_tmapStruct implements
			routines.system.IPersistableRow<to_tmapStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String TREE_PATH;

		public String getTREE_PATH() {
			return this.TREE_PATH;
		}

		public String STAGING_PATH;

		public String getSTAGING_PATH() {
			return this.STAGING_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		public String STARTDATE_SOURCE_PATH;

		public String getSTARTDATE_SOURCE_PATH() {
			return this.STARTDATE_SOURCE_PATH;
		}

		public String ENDDATE_SOURCE_PATH;

		public String getENDDATE_SOURCE_PATH() {
			return this.ENDDATE_SOURCE_PATH;
		}

		public String BASECODE;

		public String getBASECODE() {
			return this.BASECODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.TREE_PATH = readString(dis);

					this.STAGING_PATH = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.CONCEPT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

					this.STARTDATE_SOURCE_PATH = readString(dis);

					this.ENDDATE_SOURCE_PATH = readString(dis);

					this.BASECODE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.TREE_PATH, dos);

				// String

				writeString(this.STAGING_PATH, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.CONCEPT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

				// String

				writeString(this.STARTDATE_SOURCE_PATH, dos);

				// String

				writeString(this.ENDDATE_SOURCE_PATH, dos);

				// String

				writeString(this.BASECODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TREE_PATH=" + TREE_PATH);
			sb.append(",STAGING_PATH=" + STAGING_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append(",STARTDATE_SOURCE_PATH=" + STARTDATE_SOURCE_PATH);
			sb.append(",ENDDATE_SOURCE_PATH=" + ENDDATE_SOURCE_PATH);
			sb.append(",BASECODE=" + BASECODE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(to_tmapStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class from_oe_target_ontStruct implements
			routines.system.IPersistableRow<from_oe_target_ontStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public Integer TARGET_ID;

		public Integer getTARGET_ID() {
			return this.TARGET_ID;
		}

		public Integer TREE_LEVEL;

		public Integer getTREE_LEVEL() {
			return this.TREE_LEVEL;
		}

		public String TREE_PATH;

		public String getTREE_PATH() {
			return this.TREE_PATH;
		}

		public String STAGING_PATH;

		public String getSTAGING_PATH() {
			return this.STAGING_PATH;
		}

		public String STAGING_DIMENSION;

		public String getSTAGING_DIMENSION() {
			return this.STAGING_DIMENSION;
		}

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		public String STARTDATE_STAGING_PATH;

		public String getSTARTDATE_STAGING_PATH() {
			return this.STARTDATE_STAGING_PATH;
		}

		public String ENDDATE_STAGING_PATH;

		public String getENDDATE_STAGING_PATH() {
			return this.ENDDATE_STAGING_PATH;
		}

		public String VISUALATTRIBUTES;

		public String getVISUALATTRIBUTES() {
			return this.VISUALATTRIBUTES;
		}

		public String BASECODE;

		public String getBASECODE() {
			return this.BASECODE;
		}

		public String METADATAXML;

		public String getMETADATAXML() {
			return this.METADATAXML;
		}

		public String COLUMNDATATYPE;

		public String getCOLUMNDATATYPE() {
			return this.COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String TOOLTIP;

		public String getTOOLTIP() {
			return this.TOOLTIP;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.TARGET_ID = readInteger(dis);

					this.TREE_LEVEL = readInteger(dis);

					this.TREE_PATH = readString(dis);

					this.STAGING_PATH = readString(dis);

					this.STAGING_DIMENSION = readString(dis);

					this.NAME = readString(dis);

					this.STARTDATE_STAGING_PATH = readString(dis);

					this.ENDDATE_STAGING_PATH = readString(dis);

					this.VISUALATTRIBUTES = readString(dis);

					this.BASECODE = readString(dis);

					this.METADATAXML = readString(dis);

					this.COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_COMMENT = readString(dis);

					this.TOOLTIP = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.TARGET_ID, dos);

				// Integer

				writeInteger(this.TREE_LEVEL, dos);

				// String

				writeString(this.TREE_PATH, dos);

				// String

				writeString(this.STAGING_PATH, dos);

				// String

				writeString(this.STAGING_DIMENSION, dos);

				// String

				writeString(this.NAME, dos);

				// String

				writeString(this.STARTDATE_STAGING_PATH, dos);

				// String

				writeString(this.ENDDATE_STAGING_PATH, dos);

				// String

				writeString(this.VISUALATTRIBUTES, dos);

				// String

				writeString(this.BASECODE, dos);

				// String

				writeString(this.METADATAXML, dos);

				// String

				writeString(this.COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.TOOLTIP, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TARGET_ID=" + String.valueOf(TARGET_ID));
			sb.append(",TREE_LEVEL=" + String.valueOf(TREE_LEVEL));
			sb.append(",TREE_PATH=" + TREE_PATH);
			sb.append(",STAGING_PATH=" + STAGING_PATH);
			sb.append(",STAGING_DIMENSION=" + STAGING_DIMENSION);
			sb.append(",NAME=" + NAME);
			sb.append(",STARTDATE_STAGING_PATH=" + STARTDATE_STAGING_PATH);
			sb.append(",ENDDATE_STAGING_PATH=" + ENDDATE_STAGING_PATH);
			sb.append(",VISUALATTRIBUTES=" + VISUALATTRIBUTES);
			sb.append(",BASECODE=" + BASECODE);
			sb.append(",METADATAXML=" + METADATAXML);
			sb.append(",COLUMNDATATYPE=" + COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",TOOLTIP=" + TOOLTIP);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(from_oe_target_ontStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_5Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_5Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public Integer TARGET_ID;

		public Integer getTARGET_ID() {
			return this.TARGET_ID;
		}

		public Integer TREE_LEVEL;

		public Integer getTREE_LEVEL() {
			return this.TREE_LEVEL;
		}

		public String TREE_PATH;

		public String getTREE_PATH() {
			return this.TREE_PATH;
		}

		public String STAGING_PATH;

		public String getSTAGING_PATH() {
			return this.STAGING_PATH;
		}

		public String STAGING_DIMENSION;

		public String getSTAGING_DIMENSION() {
			return this.STAGING_DIMENSION;
		}

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		public String STARTDATE_STAGING_PATH;

		public String getSTARTDATE_STAGING_PATH() {
			return this.STARTDATE_STAGING_PATH;
		}

		public String ENDDATE_STAGING_PATH;

		public String getENDDATE_STAGING_PATH() {
			return this.ENDDATE_STAGING_PATH;
		}

		public String VISUALATTRIBUTES;

		public String getVISUALATTRIBUTES() {
			return this.VISUALATTRIBUTES;
		}

		public String BASECODE;

		public String getBASECODE() {
			return this.BASECODE;
		}

		public String METADATAXML;

		public String getMETADATAXML() {
			return this.METADATAXML;
		}

		public String COLUMNDATATYPE;

		public String getCOLUMNDATATYPE() {
			return this.COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String TOOLTIP;

		public String getTOOLTIP() {
			return this.TOOLTIP;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.TARGET_ID = readInteger(dis);

					this.TREE_LEVEL = readInteger(dis);

					this.TREE_PATH = readString(dis);

					this.STAGING_PATH = readString(dis);

					this.STAGING_DIMENSION = readString(dis);

					this.NAME = readString(dis);

					this.STARTDATE_STAGING_PATH = readString(dis);

					this.ENDDATE_STAGING_PATH = readString(dis);

					this.VISUALATTRIBUTES = readString(dis);

					this.BASECODE = readString(dis);

					this.METADATAXML = readString(dis);

					this.COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_COMMENT = readString(dis);

					this.TOOLTIP = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.TARGET_ID, dos);

				// Integer

				writeInteger(this.TREE_LEVEL, dos);

				// String

				writeString(this.TREE_PATH, dos);

				// String

				writeString(this.STAGING_PATH, dos);

				// String

				writeString(this.STAGING_DIMENSION, dos);

				// String

				writeString(this.NAME, dos);

				// String

				writeString(this.STARTDATE_STAGING_PATH, dos);

				// String

				writeString(this.ENDDATE_STAGING_PATH, dos);

				// String

				writeString(this.VISUALATTRIBUTES, dos);

				// String

				writeString(this.BASECODE, dos);

				// String

				writeString(this.METADATAXML, dos);

				// String

				writeString(this.COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.TOOLTIP, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TARGET_ID=" + String.valueOf(TARGET_ID));
			sb.append(",TREE_LEVEL=" + String.valueOf(TREE_LEVEL));
			sb.append(",TREE_PATH=" + TREE_PATH);
			sb.append(",STAGING_PATH=" + STAGING_PATH);
			sb.append(",STAGING_DIMENSION=" + STAGING_DIMENSION);
			sb.append(",NAME=" + NAME);
			sb.append(",STARTDATE_STAGING_PATH=" + STARTDATE_STAGING_PATH);
			sb.append(",ENDDATE_STAGING_PATH=" + ENDDATE_STAGING_PATH);
			sb.append(",VISUALATTRIBUTES=" + VISUALATTRIBUTES);
			sb.append(",BASECODE=" + BASECODE);
			sb.append(",METADATAXML=" + METADATAXML);
			sb.append(",COLUMNDATATYPE=" + COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",TOOLTIP=" + TOOLTIP);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_4Process(globalMap);
				tFileInputDelimited_3Process(globalMap);
				tFileInputDelimited_11Process(globalMap);
				tFileInputDelimited_10Process(globalMap);
				tFileInputDelimited_9Process(globalMap);
				tFileInputDelimited_12Process(globalMap);
				tFileInputDelimited_6Process(globalMap);
				tFileInputDelimited_7Process(globalMap);

				from_oe_target_ontStruct from_oe_target_ont = new from_oe_target_ontStruct();
				to_tmapStruct to_tmap = new to_tmapStruct();
				to_obs_fctStruct to_obs_fct = new to_obs_fctStruct();
				out1Struct out1 = new out1Struct();
				asdddStruct asddd = new asdddStruct();
				row5Struct row5 = new row5Struct();
				to_trgt_obsStruct to_trgt_obs = new to_trgt_obsStruct();
				to_patient_mappingStruct to_patient_mapping = new to_patient_mappingStruct();
				to_pat_mappingStruct to_pat_mapping = new to_pat_mappingStruct();
				asddStruct asdd = new asddStruct();
				asdStruct asd = new asdStruct();

				/**
				 * [tMap_3_TMAP_OUT begin ] start
				 */

				ok_Hash.put("tMap_3_TMAP_OUT", false);
				start_Hash.put("tMap_3_TMAP_OUT", System.currentTimeMillis());
				currentComponent = "tMap_3_TMAP_OUT";

				int tos_count_tMap_3_TMAP_OUT = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<from_src_conc_dimStruct> tHash_Lookup_from_src_conc_dim = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<from_src_conc_dimStruct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<from_src_conc_dimStruct>) globalMap
						.get("tHash_Lookup_from_src_conc_dim"));

				from_src_conc_dimStruct from_src_conc_dimHashKey = new from_src_conc_dimStruct();
				from_src_conc_dimStruct from_src_conc_dimDefault = new from_src_conc_dimStruct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3_TMAP_OUT__Struct {
				}
				Var__tMap_3_TMAP_OUT__Struct Var__tMap_3_TMAP_OUT = new Var__tMap_3_TMAP_OUT__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				// ###############################

				class SortableRow_tMap_3_1 implements
						Comparable<SortableRow_tMap_3_1>,
						routines.system.IPersistableRow<SortableRow_tMap_3_1> { // G_TM_B_001

					boolean is__rejectedInnerJoin;

					String exprKey_from_src_conc_dim__CONCEPT_PATH;

					// from_oe_target_ont
					Integer from_oe_target_ont__TARGET_ID;
					Integer from_oe_target_ont__TREE_LEVEL;
					String from_oe_target_ont__TREE_PATH;
					String from_oe_target_ont__STAGING_PATH;
					String from_oe_target_ont__STAGING_DIMENSION;
					String from_oe_target_ont__NAME;
					String from_oe_target_ont__STARTDATE_STAGING_PATH;
					String from_oe_target_ont__ENDDATE_STAGING_PATH;
					String from_oe_target_ont__VISUALATTRIBUTES;
					String from_oe_target_ont__BASECODE;
					String from_oe_target_ont__METADATAXML;
					String from_oe_target_ont__COLUMNDATATYPE;
					String from_oe_target_ont__C_OPERATOR;
					String from_oe_target_ont__C_COMMENT;
					String from_oe_target_ont__TOOLTIP;
					java.util.Date from_oe_target_ont__UPDATE_DATE;
					java.util.Date from_oe_target_ont__DOWNLOAD_DATE;
					java.util.Date from_oe_target_ont__IMPORT_DATE;
					String from_oe_target_ont__SOURCESYSTEM_CD;
					String from_oe_target_ont__VALUETYPE_CD;
					String from_oe_target_ont__M_APPLIED_PATH;

					public void fillFrom(
							from_oe_target_ontStruct from_oe_target_ont,
							String exprKey_from_src_conc_dim__CONCEPT_PATH) {

						this.from_oe_target_ont__TARGET_ID = from_oe_target_ont.TARGET_ID;
						this.from_oe_target_ont__TREE_LEVEL = from_oe_target_ont.TREE_LEVEL;
						this.from_oe_target_ont__TREE_PATH = from_oe_target_ont.TREE_PATH;
						this.from_oe_target_ont__STAGING_PATH = from_oe_target_ont.STAGING_PATH;
						this.from_oe_target_ont__STAGING_DIMENSION = from_oe_target_ont.STAGING_DIMENSION;
						this.from_oe_target_ont__NAME = from_oe_target_ont.NAME;
						this.from_oe_target_ont__STARTDATE_STAGING_PATH = from_oe_target_ont.STARTDATE_STAGING_PATH;
						this.from_oe_target_ont__ENDDATE_STAGING_PATH = from_oe_target_ont.ENDDATE_STAGING_PATH;
						this.from_oe_target_ont__VISUALATTRIBUTES = from_oe_target_ont.VISUALATTRIBUTES;
						this.from_oe_target_ont__BASECODE = from_oe_target_ont.BASECODE;
						this.from_oe_target_ont__METADATAXML = from_oe_target_ont.METADATAXML;
						this.from_oe_target_ont__COLUMNDATATYPE = from_oe_target_ont.COLUMNDATATYPE;
						this.from_oe_target_ont__C_OPERATOR = from_oe_target_ont.C_OPERATOR;
						this.from_oe_target_ont__C_COMMENT = from_oe_target_ont.C_COMMENT;
						this.from_oe_target_ont__TOOLTIP = from_oe_target_ont.TOOLTIP;
						this.from_oe_target_ont__UPDATE_DATE = from_oe_target_ont.UPDATE_DATE;
						this.from_oe_target_ont__DOWNLOAD_DATE = from_oe_target_ont.DOWNLOAD_DATE;
						this.from_oe_target_ont__IMPORT_DATE = from_oe_target_ont.IMPORT_DATE;
						this.from_oe_target_ont__SOURCESYSTEM_CD = from_oe_target_ont.SOURCESYSTEM_CD;
						this.from_oe_target_ont__VALUETYPE_CD = from_oe_target_ont.VALUETYPE_CD;
						this.from_oe_target_ont__M_APPLIED_PATH = from_oe_target_ont.M_APPLIED_PATH;
						this.exprKey_from_src_conc_dim__CONCEPT_PATH = exprKey_from_src_conc_dim__CONCEPT_PATH;

					}

					public void copyDataTo(
							from_oe_target_ontStruct from_oe_target_ont) {

						from_oe_target_ont.TARGET_ID = this.from_oe_target_ont__TARGET_ID;
						from_oe_target_ont.TREE_LEVEL = this.from_oe_target_ont__TREE_LEVEL;
						from_oe_target_ont.TREE_PATH = this.from_oe_target_ont__TREE_PATH;
						from_oe_target_ont.STAGING_PATH = this.from_oe_target_ont__STAGING_PATH;
						from_oe_target_ont.STAGING_DIMENSION = this.from_oe_target_ont__STAGING_DIMENSION;
						from_oe_target_ont.NAME = this.from_oe_target_ont__NAME;
						from_oe_target_ont.STARTDATE_STAGING_PATH = this.from_oe_target_ont__STARTDATE_STAGING_PATH;
						from_oe_target_ont.ENDDATE_STAGING_PATH = this.from_oe_target_ont__ENDDATE_STAGING_PATH;
						from_oe_target_ont.VISUALATTRIBUTES = this.from_oe_target_ont__VISUALATTRIBUTES;
						from_oe_target_ont.BASECODE = this.from_oe_target_ont__BASECODE;
						from_oe_target_ont.METADATAXML = this.from_oe_target_ont__METADATAXML;
						from_oe_target_ont.COLUMNDATATYPE = this.from_oe_target_ont__COLUMNDATATYPE;
						from_oe_target_ont.C_OPERATOR = this.from_oe_target_ont__C_OPERATOR;
						from_oe_target_ont.C_COMMENT = this.from_oe_target_ont__C_COMMENT;
						from_oe_target_ont.TOOLTIP = this.from_oe_target_ont__TOOLTIP;
						from_oe_target_ont.UPDATE_DATE = this.from_oe_target_ont__UPDATE_DATE;
						from_oe_target_ont.DOWNLOAD_DATE = this.from_oe_target_ont__DOWNLOAD_DATE;
						from_oe_target_ont.IMPORT_DATE = this.from_oe_target_ont__IMPORT_DATE;
						from_oe_target_ont.SOURCESYSTEM_CD = this.from_oe_target_ont__SOURCESYSTEM_CD;
						from_oe_target_ont.VALUETYPE_CD = this.from_oe_target_ont__VALUETYPE_CD;
						from_oe_target_ont.M_APPLIED_PATH = this.from_oe_target_ont__M_APPLIED_PATH;

					}

					public String toString() {

						StringBuilder sb = new StringBuilder();
						sb.append(super.toString());
						sb.append("[");

						sb.append("from_oe_target_ont__TARGET_ID");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__TARGET_ID));

						sb.append(", ");

						sb.append("from_oe_target_ont__TREE_LEVEL");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__TREE_LEVEL));

						sb.append(", ");

						sb.append("from_oe_target_ont__TREE_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__TREE_PATH));

						sb.append(", ");

						sb.append("from_oe_target_ont__STAGING_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__STAGING_PATH));

						sb.append(", ");

						sb.append("from_oe_target_ont__STAGING_DIMENSION");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__STAGING_DIMENSION));

						sb.append(", ");

						sb.append("from_oe_target_ont__NAME");
						sb.append("=");
						sb.append(String.valueOf(this.from_oe_target_ont__NAME));

						sb.append(", ");

						sb.append("from_oe_target_ont__STARTDATE_STAGING_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__STARTDATE_STAGING_PATH));

						sb.append(", ");

						sb.append("from_oe_target_ont__ENDDATE_STAGING_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__ENDDATE_STAGING_PATH));

						sb.append(", ");

						sb.append("from_oe_target_ont__VISUALATTRIBUTES");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__VISUALATTRIBUTES));

						sb.append(", ");

						sb.append("from_oe_target_ont__BASECODE");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__BASECODE));

						sb.append(", ");

						sb.append("from_oe_target_ont__METADATAXML");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__METADATAXML));

						sb.append(", ");

						sb.append("from_oe_target_ont__COLUMNDATATYPE");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__COLUMNDATATYPE));

						sb.append(", ");

						sb.append("from_oe_target_ont__C_OPERATOR");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__C_OPERATOR));

						sb.append(", ");

						sb.append("from_oe_target_ont__C_COMMENT");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__C_COMMENT));

						sb.append(", ");

						sb.append("from_oe_target_ont__TOOLTIP");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__TOOLTIP));

						sb.append(", ");

						sb.append("from_oe_target_ont__UPDATE_DATE");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__UPDATE_DATE));

						sb.append(", ");

						sb.append("from_oe_target_ont__DOWNLOAD_DATE");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__DOWNLOAD_DATE));

						sb.append(", ");

						sb.append("from_oe_target_ont__IMPORT_DATE");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__IMPORT_DATE));

						sb.append(", ");

						sb.append("from_oe_target_ont__SOURCESYSTEM_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__SOURCESYSTEM_CD));

						sb.append(", ");

						sb.append("from_oe_target_ont__VALUETYPE_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__VALUETYPE_CD));

						sb.append(", ");

						sb.append("from_oe_target_ont__M_APPLIED_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__M_APPLIED_PATH));

						sb.append("]");

						return sb.toString();
					}

					public int compareTo(SortableRow_tMap_3_1 other) {

						int returnValue = 0;

						returnValue = checkNullsAndCompare(
								this.exprKey_from_src_conc_dim__CONCEPT_PATH,
								other.exprKey_from_src_conc_dim__CONCEPT_PATH);
						if (returnValue != 0) {
							return returnValue;
						}

						return returnValue;
					}

					private int checkNullsAndCompare(Object object1,
							Object object2) {
						int returnValue = 0;
						if (object1 instanceof Comparable
								&& object2 instanceof Comparable) {
							returnValue = ((Comparable) object1)
									.compareTo(object2);
						} else if (object1 != null && object2 != null) {
							returnValue = compareStrings(object1.toString(),
									object2.toString());
						} else if (object1 == null && object2 != null) {
							returnValue = 1;
						} else if (object1 != null && object2 == null) {
							returnValue = -1;
						} else {
							returnValue = 0;
						}

						return returnValue;
					}

					private int compareStrings(String string1, String string2) {
						return string1.compareTo(string2);
					}

					public void readData(ObjectInputStream dis) {

						synchronized (from_oe_target_ontStruct.commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

							try {

								int length = 0;

								this.is__rejectedInnerJoin = dis.readBoolean();

								length = dis.readByte();
								if (length == -1) {
									this.from_oe_target_ont__TARGET_ID = null;
								} else {
									this.from_oe_target_ont__TARGET_ID = dis
											.readInt();
								}

								length = dis.readByte();
								if (length == -1) {
									this.from_oe_target_ont__TREE_LEVEL = null;
								} else {
									this.from_oe_target_ont__TREE_LEVEL = dis
											.readInt();
								}

								length = dis.readInt();
								if (length == -1) {
									this.from_oe_target_ont__TREE_PATH = null;
								} else {
									if (length > from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.from_oe_target_ont__TREE_PATH = new String(
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.from_oe_target_ont__STAGING_PATH = null;
								} else {
									if (length > from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.from_oe_target_ont__STAGING_PATH = new String(
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.from_oe_target_ont__STAGING_DIMENSION = null;
								} else {
									if (length > from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.from_oe_target_ont__STAGING_DIMENSION = new String(
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.from_oe_target_ont__NAME = null;
								} else {
									if (length > from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.from_oe_target_ont__NAME = new String(
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.from_oe_target_ont__STARTDATE_STAGING_PATH = null;
								} else {
									if (length > from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.from_oe_target_ont__STARTDATE_STAGING_PATH = new String(
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.from_oe_target_ont__ENDDATE_STAGING_PATH = null;
								} else {
									if (length > from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.from_oe_target_ont__ENDDATE_STAGING_PATH = new String(
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.from_oe_target_ont__VISUALATTRIBUTES = null;
								} else {
									if (length > from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.from_oe_target_ont__VISUALATTRIBUTES = new String(
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.from_oe_target_ont__BASECODE = null;
								} else {
									if (length > from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.from_oe_target_ont__BASECODE = new String(
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.from_oe_target_ont__METADATAXML = null;
								} else {
									if (length > from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.from_oe_target_ont__METADATAXML = new String(
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.from_oe_target_ont__COLUMNDATATYPE = null;
								} else {
									if (length > from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.from_oe_target_ont__COLUMNDATATYPE = new String(
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.from_oe_target_ont__C_OPERATOR = null;
								} else {
									if (length > from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.from_oe_target_ont__C_OPERATOR = new String(
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.from_oe_target_ont__C_COMMENT = null;
								} else {
									if (length > from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.from_oe_target_ont__C_COMMENT = new String(
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.from_oe_target_ont__TOOLTIP = null;
								} else {
									if (length > from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.from_oe_target_ont__TOOLTIP = new String(
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.from_oe_target_ont__UPDATE_DATE = null;
								} else {
									this.from_oe_target_ont__UPDATE_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.from_oe_target_ont__DOWNLOAD_DATE = null;
								} else {
									this.from_oe_target_ont__DOWNLOAD_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.from_oe_target_ont__IMPORT_DATE = null;
								} else {
									this.from_oe_target_ont__IMPORT_DATE = new Date(
											dis.readLong());
								}

								length = dis.readInt();
								if (length == -1) {
									this.from_oe_target_ont__SOURCESYSTEM_CD = null;
								} else {
									if (length > from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.from_oe_target_ont__SOURCESYSTEM_CD = new String(
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.from_oe_target_ont__VALUETYPE_CD = null;
								} else {
									if (length > from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.from_oe_target_ont__VALUETYPE_CD = new String(
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.from_oe_target_ont__M_APPLIED_PATH = null;
								} else {
									if (length > from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.from_oe_target_ont__M_APPLIED_PATH = new String(
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_from_src_conc_dim__CONCEPT_PATH = null;
								} else {
									if (length > from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.exprKey_from_src_conc_dim__CONCEPT_PATH = new String(
											from_oe_target_ontStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

							} catch (IOException e) {
								throw new RuntimeException(e);

							}

						}
					}

					public void writeData(ObjectOutputStream dos) {
						try {

							dos.writeBoolean(this.is__rejectedInnerJoin);

							if (this.from_oe_target_ont__TARGET_ID == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeInt(this.from_oe_target_ont__TARGET_ID);
							}

							if (this.from_oe_target_ont__TREE_LEVEL == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeInt(this.from_oe_target_ont__TREE_LEVEL);
							}

							if (this.from_oe_target_ont__TREE_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.from_oe_target_ont__TREE_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.from_oe_target_ont__STAGING_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.from_oe_target_ont__STAGING_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.from_oe_target_ont__STAGING_DIMENSION == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.from_oe_target_ont__STAGING_DIMENSION
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.from_oe_target_ont__NAME == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.from_oe_target_ont__NAME
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.from_oe_target_ont__STARTDATE_STAGING_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.from_oe_target_ont__STARTDATE_STAGING_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.from_oe_target_ont__ENDDATE_STAGING_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.from_oe_target_ont__ENDDATE_STAGING_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.from_oe_target_ont__VISUALATTRIBUTES == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.from_oe_target_ont__VISUALATTRIBUTES
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.from_oe_target_ont__BASECODE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.from_oe_target_ont__BASECODE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.from_oe_target_ont__METADATAXML == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.from_oe_target_ont__METADATAXML
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.from_oe_target_ont__COLUMNDATATYPE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.from_oe_target_ont__COLUMNDATATYPE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.from_oe_target_ont__C_OPERATOR == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.from_oe_target_ont__C_OPERATOR
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.from_oe_target_ont__C_COMMENT == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.from_oe_target_ont__C_COMMENT
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.from_oe_target_ont__TOOLTIP == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.from_oe_target_ont__TOOLTIP
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.from_oe_target_ont__UPDATE_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.from_oe_target_ont__UPDATE_DATE
										.getTime());
							}

							if (this.from_oe_target_ont__DOWNLOAD_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.from_oe_target_ont__DOWNLOAD_DATE
										.getTime());
							}

							if (this.from_oe_target_ont__IMPORT_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.from_oe_target_ont__IMPORT_DATE
										.getTime());
							}

							if (this.from_oe_target_ont__SOURCESYSTEM_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.from_oe_target_ont__SOURCESYSTEM_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.from_oe_target_ont__VALUETYPE_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.from_oe_target_ont__VALUETYPE_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.from_oe_target_ont__M_APPLIED_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.from_oe_target_ont__M_APPLIED_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.exprKey_from_src_conc_dim__CONCEPT_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_from_src_conc_dim__CONCEPT_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

				} // G_TM_B_001

				org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_3_1> fsi_tMap_3_1 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_3_1>(
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid + "_tMap_3_1",
						200000) {
					public SortableRow_tMap_3_1 createRowInstance() {
						return new SortableRow_tMap_3_1();
					}
				};

				fsi_tMap_3_1.initPut();

				/**
				 * [tMap_3_TMAP_OUT begin ] stop
				 */

				/**
				 * [tFileInputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_5", false);
				start_Hash.put("tFileInputDelimited_5",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_5";

				int tos_count_tFileInputDelimited_5 = 0;

				int nb_line_tFileInputDelimited_5 = 0;
				int footer_tFileInputDelimited_5 = 0;
				int totalLinetFileInputDelimited_5 = 0;
				int limittFileInputDelimited_5 = -1;
				int lastLinetFileInputDelimited_5 = -1;

				char fieldSeparator_tFileInputDelimited_5[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_5 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_5[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_5 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_5 = /**
				 * Start field
				 * tFileInputDelimited_5:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_1_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_5:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_5 = null;

				try {

					String[] rowtFileInputDelimited_5 = null;
					int currentLinetFileInputDelimited_5 = 0;
					int outputLinetFileInputDelimited_5 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_5 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_5 = 0;
							if (footer_value_tFileInputDelimited_5 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_5 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_5,
									fieldSeparator_tFileInputDelimited_5[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_5 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_5)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_5[0]);
						}

						csvReadertFileInputDelimited_5.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_5[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_5[0] != '\r'))
							csvReadertFileInputDelimited_5.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_5[0]);

						csvReadertFileInputDelimited_5.setQuoteChar('"');

						csvReadertFileInputDelimited_5
								.setEscapeChar(csvReadertFileInputDelimited_5
										.getQuoteChar());

						if (footer_tFileInputDelimited_5 > 0) {
							for (totalLinetFileInputDelimited_5 = 0; totalLinetFileInputDelimited_5 < 1; totalLinetFileInputDelimited_5++) {
								csvReadertFileInputDelimited_5.readNext();
							}
							csvReadertFileInputDelimited_5
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_5.readNext()) {

								rowtFileInputDelimited_5 = csvReadertFileInputDelimited_5
										.getValues();
								if (!(rowtFileInputDelimited_5.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_5[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_5++;

								}

							}
							int lastLineTemptFileInputDelimited_5 = totalLinetFileInputDelimited_5
									- footer_tFileInputDelimited_5 < 0 ? 0
									: totalLinetFileInputDelimited_5
											- footer_tFileInputDelimited_5;
							if (lastLinetFileInputDelimited_5 > 0) {
								lastLinetFileInputDelimited_5 = lastLinetFileInputDelimited_5 < lastLineTemptFileInputDelimited_5 ? lastLinetFileInputDelimited_5
										: lastLineTemptFileInputDelimited_5;
							} else {
								lastLinetFileInputDelimited_5 = lastLineTemptFileInputDelimited_5;
							}

							csvReadertFileInputDelimited_5.close();
							if (filename_tFileInputDelimited_5 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_5 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_5,
										fieldSeparator_tFileInputDelimited_5[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_5 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_5)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_5[0]);
							}
							csvReadertFileInputDelimited_5
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_5[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_5[0] != '\r'))
								csvReadertFileInputDelimited_5
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_5[0]);

							csvReadertFileInputDelimited_5.setQuoteChar('"');

							csvReadertFileInputDelimited_5
									.setEscapeChar(csvReadertFileInputDelimited_5
											.getQuoteChar());

						}

						if (limittFileInputDelimited_5 != 0) {
							for (currentLinetFileInputDelimited_5 = 0; currentLinetFileInputDelimited_5 < 1; currentLinetFileInputDelimited_5++) {
								csvReadertFileInputDelimited_5.readNext();
							}
						}
						csvReadertFileInputDelimited_5
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_5 != 0
							&& csvReadertFileInputDelimited_5 != null
							&& csvReadertFileInputDelimited_5.readNext()) {

						rowtFileInputDelimited_5 = csvReadertFileInputDelimited_5
								.getValues();

						if (rowtFileInputDelimited_5.length == 1
								&& ("\015").equals(rowtFileInputDelimited_5[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_5++;

						if (lastLinetFileInputDelimited_5 > -1
								&& currentLinetFileInputDelimited_5 > lastLinetFileInputDelimited_5) {
							break;
						}
						outputLinetFileInputDelimited_5++;
						if (limittFileInputDelimited_5 > 0
								&& outputLinetFileInputDelimited_5 > limittFileInputDelimited_5) {
							break;
						}

						from_oe_target_ont = null;

						boolean whetherReject_tFileInputDelimited_5 = false;
						from_oe_target_ont = new from_oe_target_ontStruct();
						try {

							if (rowtFileInputDelimited_5.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_5[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								from_oe_target_ont.TARGET_ID = null;

								from_oe_target_ont.TREE_LEVEL = null;

								from_oe_target_ont.TREE_PATH = null;

								from_oe_target_ont.STAGING_PATH = null;

								from_oe_target_ont.STAGING_DIMENSION = null;

								from_oe_target_ont.NAME = null;

								from_oe_target_ont.STARTDATE_STAGING_PATH = null;

								from_oe_target_ont.ENDDATE_STAGING_PATH = null;

								from_oe_target_ont.VISUALATTRIBUTES = null;

								from_oe_target_ont.BASECODE = null;

								from_oe_target_ont.METADATAXML = null;

								from_oe_target_ont.COLUMNDATATYPE = null;

								from_oe_target_ont.C_OPERATOR = null;

								from_oe_target_ont.C_COMMENT = null;

								from_oe_target_ont.TOOLTIP = null;

								from_oe_target_ont.UPDATE_DATE = null;

								from_oe_target_ont.DOWNLOAD_DATE = null;

								from_oe_target_ont.IMPORT_DATE = null;

								from_oe_target_ont.SOURCESYSTEM_CD = null;

								from_oe_target_ont.VALUETYPE_CD = null;

								from_oe_target_ont.M_APPLIED_PATH = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_5 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_5 = 0;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									if (rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]
											.length() > 0) {

										from_oe_target_ont.TARGET_ID = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]);

									} else {
										from_oe_target_ont.TARGET_ID = null;
									}

								} else {
									from_oe_target_ont.TARGET_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 1;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									if (rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]
											.length() > 0) {

										from_oe_target_ont.TREE_LEVEL = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]);

									} else {
										from_oe_target_ont.TREE_LEVEL = null;
									}

								} else {
									from_oe_target_ont.TREE_LEVEL = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 2;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									from_oe_target_ont.TREE_PATH = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									from_oe_target_ont.TREE_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 3;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									from_oe_target_ont.STAGING_PATH = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									from_oe_target_ont.STAGING_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 4;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									from_oe_target_ont.STAGING_DIMENSION = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									from_oe_target_ont.STAGING_DIMENSION = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 5;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									from_oe_target_ont.NAME = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									from_oe_target_ont.NAME = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 6;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									from_oe_target_ont.STARTDATE_STAGING_PATH = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									from_oe_target_ont.STARTDATE_STAGING_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 7;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									from_oe_target_ont.ENDDATE_STAGING_PATH = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									from_oe_target_ont.ENDDATE_STAGING_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 8;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									from_oe_target_ont.VISUALATTRIBUTES = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									from_oe_target_ont.VISUALATTRIBUTES = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 9;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									from_oe_target_ont.BASECODE = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									from_oe_target_ont.BASECODE = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 10;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									from_oe_target_ont.METADATAXML = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									from_oe_target_ont.METADATAXML = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 11;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									from_oe_target_ont.COLUMNDATATYPE = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									from_oe_target_ont.COLUMNDATATYPE = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 12;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									from_oe_target_ont.C_OPERATOR = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									from_oe_target_ont.C_OPERATOR = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 13;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									from_oe_target_ont.C_COMMENT = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									from_oe_target_ont.C_COMMENT = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 14;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									from_oe_target_ont.TOOLTIP = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									from_oe_target_ont.TOOLTIP = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 15;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									if (rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]
											.length() > 0) {

										from_oe_target_ont.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5],
														"dd-MM-yyyy");

									} else {
										from_oe_target_ont.UPDATE_DATE = null;
									}

								} else {
									from_oe_target_ont.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 16;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									if (rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]
											.length() > 0) {

										from_oe_target_ont.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5],
														"dd-MM-yyyy");

									} else {
										from_oe_target_ont.DOWNLOAD_DATE = null;
									}

								} else {
									from_oe_target_ont.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 17;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									if (rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]
											.length() > 0) {

										from_oe_target_ont.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5],
														"dd-MM-yyyy");

									} else {
										from_oe_target_ont.IMPORT_DATE = null;
									}

								} else {
									from_oe_target_ont.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 18;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									from_oe_target_ont.SOURCESYSTEM_CD = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									from_oe_target_ont.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 19;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									from_oe_target_ont.VALUETYPE_CD = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									from_oe_target_ont.VALUETYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 20;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									from_oe_target_ont.M_APPLIED_PATH = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									from_oe_target_ont.M_APPLIED_PATH = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_5 = true;

							System.err.println(e.getMessage());
							from_oe_target_ont = null;

						}

						/**
						 * [tFileInputDelimited_5 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_5 main ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						tos_count_tFileInputDelimited_5++;

						/**
						 * [tFileInputDelimited_5 main ] stop
						 */
						// Start of branch "from_oe_target_ont"
						if (from_oe_target_ont != null) {

							/**
							 * [tMap_3_TMAP_OUT main ] start
							 */

							currentComponent = "tMap_3_TMAP_OUT";

							boolean hasCasePrimitiveKeyWithNull_tMap_3_TMAP_OUT = false;

							if (

							(

							from_oe_target_ont.M_APPLIED_PATH.equals("@")

							)

							) { // G_TM_M_281

								hasCasePrimitiveKeyWithNull_tMap_3_TMAP_OUT = false;

								String exprKey_from_src_conc_dim__CONCEPT_PATH = from_oe_target_ont.STAGING_PATH;

								SortableRow_tMap_3_1 sortableRow_tMap_3_1 = fsi_tMap_3_1
										.getNextFreeRow();

								sortableRow_tMap_3_1
										.fillFrom(from_oe_target_ont,
												exprKey_from_src_conc_dim__CONCEPT_PATH);

								fsi_tMap_3_1.put(sortableRow_tMap_3_1);

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_3_TMAP_OUT = false;
								boolean mainRowRejected_tMap_3_TMAP_OUT = false;

								// ###############################

								tos_count_tMap_3_TMAP_OUT++;

								/**
								 * [tMap_3_TMAP_OUT main ] stop
								 */
							} // G_TM_M_281 close main tMap filter for table
								// 'from_oe_target_ont'

						} // End of branch "from_oe_target_ont"

						/**
						 * [tFileInputDelimited_5 end ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						nb_line_tFileInputDelimited_5++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_5 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_5 != null) {
							csvReadertFileInputDelimited_5.close();
						}
					}
					if (csvReadertFileInputDelimited_5 != null) {
						globalMap.put("tFileInputDelimited_5_NB_LINE",
								nb_line_tFileInputDelimited_5);
					}
				}

				ok_Hash.put("tFileInputDelimited_5", true);
				end_Hash.put("tFileInputDelimited_5",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_5 end ] stop
				 */

				/**
				 * [tMap_3_TMAP_OUT end ] start
				 */

				currentComponent = "tMap_3_TMAP_OUT";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_3_TMAP_OUT", true);
				end_Hash.put("tMap_3_TMAP_OUT", System.currentTimeMillis());

				/**
				 * [tMap_3_TMAP_OUT end ] stop
				 */

				/**
				 * [tMap_4_TMAP_OUT begin ] start
				 */

				ok_Hash.put("tMap_4_TMAP_OUT", false);
				start_Hash.put("tMap_4_TMAP_OUT", System.currentTimeMillis());
				currentComponent = "tMap_4_TMAP_OUT";

				int tos_count_tMap_4_TMAP_OUT = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<from_srxc_obsfctStruct> tHash_Lookup_from_srxc_obsfct = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<from_srxc_obsfctStruct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<from_srxc_obsfctStruct>) globalMap
						.get("tHash_Lookup_from_srxc_obsfct"));

				from_srxc_obsfctStruct from_srxc_obsfctHashKey = new from_srxc_obsfctStruct();
				from_srxc_obsfctStruct from_srxc_obsfctDefault = new from_srxc_obsfctStruct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_4_TMAP_OUT__Struct {
				}
				Var__tMap_4_TMAP_OUT__Struct Var__tMap_4_TMAP_OUT = new Var__tMap_4_TMAP_OUT__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				// ###############################

				class SortableRow_tMap_4_1 implements
						Comparable<SortableRow_tMap_4_1>,
						routines.system.IPersistableRow<SortableRow_tMap_4_1> { // G_TM_B_001

					boolean is__rejectedInnerJoin;

					String exprKey_from_srxc_obsfct__CONCEPT_CD;

					// to_tmap
					String to_tmap__TREE_PATH;
					String to_tmap__STAGING_PATH;
					String to_tmap__CONCEPT_CD;
					String to_tmap__NAME_CHAR;
					String to_tmap__CONCEPT_BLOB;
					java.util.Date to_tmap__UPDATE_DATE;
					java.util.Date to_tmap__DOWNLOAD_DATE;
					java.util.Date to_tmap__IMPORT_DATE;
					String to_tmap__SOURCESYSTEM_CD;
					String to_tmap__UPLOAD_ID;
					String to_tmap__STARTDATE_SOURCE_PATH;
					String to_tmap__ENDDATE_SOURCE_PATH;
					String to_tmap__BASECODE;

					public void fillFrom(to_tmapStruct to_tmap,
							String exprKey_from_srxc_obsfct__CONCEPT_CD) {

						this.to_tmap__TREE_PATH = to_tmap.TREE_PATH;
						this.to_tmap__STAGING_PATH = to_tmap.STAGING_PATH;
						this.to_tmap__CONCEPT_CD = to_tmap.CONCEPT_CD;
						this.to_tmap__NAME_CHAR = to_tmap.NAME_CHAR;
						this.to_tmap__CONCEPT_BLOB = to_tmap.CONCEPT_BLOB;
						this.to_tmap__UPDATE_DATE = to_tmap.UPDATE_DATE;
						this.to_tmap__DOWNLOAD_DATE = to_tmap.DOWNLOAD_DATE;
						this.to_tmap__IMPORT_DATE = to_tmap.IMPORT_DATE;
						this.to_tmap__SOURCESYSTEM_CD = to_tmap.SOURCESYSTEM_CD;
						this.to_tmap__UPLOAD_ID = to_tmap.UPLOAD_ID;
						this.to_tmap__STARTDATE_SOURCE_PATH = to_tmap.STARTDATE_SOURCE_PATH;
						this.to_tmap__ENDDATE_SOURCE_PATH = to_tmap.ENDDATE_SOURCE_PATH;
						this.to_tmap__BASECODE = to_tmap.BASECODE;
						this.exprKey_from_srxc_obsfct__CONCEPT_CD = exprKey_from_srxc_obsfct__CONCEPT_CD;

					}

					public void copyDataTo(to_tmapStruct to_tmap) {

						to_tmap.TREE_PATH = this.to_tmap__TREE_PATH;
						to_tmap.STAGING_PATH = this.to_tmap__STAGING_PATH;
						to_tmap.CONCEPT_CD = this.to_tmap__CONCEPT_CD;
						to_tmap.NAME_CHAR = this.to_tmap__NAME_CHAR;
						to_tmap.CONCEPT_BLOB = this.to_tmap__CONCEPT_BLOB;
						to_tmap.UPDATE_DATE = this.to_tmap__UPDATE_DATE;
						to_tmap.DOWNLOAD_DATE = this.to_tmap__DOWNLOAD_DATE;
						to_tmap.IMPORT_DATE = this.to_tmap__IMPORT_DATE;
						to_tmap.SOURCESYSTEM_CD = this.to_tmap__SOURCESYSTEM_CD;
						to_tmap.UPLOAD_ID = this.to_tmap__UPLOAD_ID;
						to_tmap.STARTDATE_SOURCE_PATH = this.to_tmap__STARTDATE_SOURCE_PATH;
						to_tmap.ENDDATE_SOURCE_PATH = this.to_tmap__ENDDATE_SOURCE_PATH;
						to_tmap.BASECODE = this.to_tmap__BASECODE;

					}

					public String toString() {

						StringBuilder sb = new StringBuilder();
						sb.append(super.toString());
						sb.append("[");

						sb.append("to_tmap__TREE_PATH");
						sb.append("=");
						sb.append(String.valueOf(this.to_tmap__TREE_PATH));

						sb.append(", ");

						sb.append("to_tmap__STAGING_PATH");
						sb.append("=");
						sb.append(String.valueOf(this.to_tmap__STAGING_PATH));

						sb.append(", ");

						sb.append("to_tmap__CONCEPT_CD");
						sb.append("=");
						sb.append(String.valueOf(this.to_tmap__CONCEPT_CD));

						sb.append(", ");

						sb.append("to_tmap__NAME_CHAR");
						sb.append("=");
						sb.append(String.valueOf(this.to_tmap__NAME_CHAR));

						sb.append(", ");

						sb.append("to_tmap__CONCEPT_BLOB");
						sb.append("=");
						sb.append(String.valueOf(this.to_tmap__CONCEPT_BLOB));

						sb.append(", ");

						sb.append("to_tmap__UPDATE_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.to_tmap__UPDATE_DATE));

						sb.append(", ");

						sb.append("to_tmap__DOWNLOAD_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.to_tmap__DOWNLOAD_DATE));

						sb.append(", ");

						sb.append("to_tmap__IMPORT_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.to_tmap__IMPORT_DATE));

						sb.append(", ");

						sb.append("to_tmap__SOURCESYSTEM_CD");
						sb.append("=");
						sb.append(String.valueOf(this.to_tmap__SOURCESYSTEM_CD));

						sb.append(", ");

						sb.append("to_tmap__UPLOAD_ID");
						sb.append("=");
						sb.append(String.valueOf(this.to_tmap__UPLOAD_ID));

						sb.append(", ");

						sb.append("to_tmap__STARTDATE_SOURCE_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.to_tmap__STARTDATE_SOURCE_PATH));

						sb.append(", ");

						sb.append("to_tmap__ENDDATE_SOURCE_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.to_tmap__ENDDATE_SOURCE_PATH));

						sb.append(", ");

						sb.append("to_tmap__BASECODE");
						sb.append("=");
						sb.append(String.valueOf(this.to_tmap__BASECODE));

						sb.append("]");

						return sb.toString();
					}

					public int compareTo(SortableRow_tMap_4_1 other) {

						int returnValue = 0;

						returnValue = checkNullsAndCompare(
								this.exprKey_from_srxc_obsfct__CONCEPT_CD,
								other.exprKey_from_srxc_obsfct__CONCEPT_CD);
						if (returnValue != 0) {
							return returnValue;
						}

						return returnValue;
					}

					private int checkNullsAndCompare(Object object1,
							Object object2) {
						int returnValue = 0;
						if (object1 instanceof Comparable
								&& object2 instanceof Comparable) {
							returnValue = ((Comparable) object1)
									.compareTo(object2);
						} else if (object1 != null && object2 != null) {
							returnValue = compareStrings(object1.toString(),
									object2.toString());
						} else if (object1 == null && object2 != null) {
							returnValue = 1;
						} else if (object1 != null && object2 == null) {
							returnValue = -1;
						} else {
							returnValue = 0;
						}

						return returnValue;
					}

					private int compareStrings(String string1, String string2) {
						return string1.compareTo(string2);
					}

					public void readData(ObjectInputStream dis) {

						synchronized (to_tmapStruct.commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

							try {

								int length = 0;

								this.is__rejectedInnerJoin = dis.readBoolean();

								length = dis.readInt();
								if (length == -1) {
									this.to_tmap__TREE_PATH = null;
								} else {
									if (length > to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_tmap__TREE_PATH = new String(
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_tmap__STAGING_PATH = null;
								} else {
									if (length > to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_tmap__STAGING_PATH = new String(
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_tmap__CONCEPT_CD = null;
								} else {
									if (length > to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_tmap__CONCEPT_CD = new String(
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_tmap__NAME_CHAR = null;
								} else {
									if (length > to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_tmap__NAME_CHAR = new String(
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_tmap__CONCEPT_BLOB = null;
								} else {
									if (length > to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_tmap__CONCEPT_BLOB = new String(
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.to_tmap__UPDATE_DATE = null;
								} else {
									this.to_tmap__UPDATE_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.to_tmap__DOWNLOAD_DATE = null;
								} else {
									this.to_tmap__DOWNLOAD_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.to_tmap__IMPORT_DATE = null;
								} else {
									this.to_tmap__IMPORT_DATE = new Date(
											dis.readLong());
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_tmap__SOURCESYSTEM_CD = null;
								} else {
									if (length > to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_tmap__SOURCESYSTEM_CD = new String(
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_tmap__UPLOAD_ID = null;
								} else {
									if (length > to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_tmap__UPLOAD_ID = new String(
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_tmap__STARTDATE_SOURCE_PATH = null;
								} else {
									if (length > to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_tmap__STARTDATE_SOURCE_PATH = new String(
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_tmap__ENDDATE_SOURCE_PATH = null;
								} else {
									if (length > to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_tmap__ENDDATE_SOURCE_PATH = new String(
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_tmap__BASECODE = null;
								} else {
									if (length > to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_tmap__BASECODE = new String(
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_from_srxc_obsfct__CONCEPT_CD = null;
								} else {
									if (length > to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.exprKey_from_srxc_obsfct__CONCEPT_CD = new String(
											to_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

							} catch (IOException e) {
								throw new RuntimeException(e);

							}

						}
					}

					public void writeData(ObjectOutputStream dos) {
						try {

							dos.writeBoolean(this.is__rejectedInnerJoin);

							if (this.to_tmap__TREE_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_tmap__TREE_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_tmap__STAGING_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_tmap__STAGING_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_tmap__CONCEPT_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_tmap__CONCEPT_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_tmap__NAME_CHAR == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_tmap__NAME_CHAR
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_tmap__CONCEPT_BLOB == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_tmap__CONCEPT_BLOB
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_tmap__UPDATE_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.to_tmap__UPDATE_DATE
										.getTime());
							}

							if (this.to_tmap__DOWNLOAD_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.to_tmap__DOWNLOAD_DATE
										.getTime());
							}

							if (this.to_tmap__IMPORT_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.to_tmap__IMPORT_DATE
										.getTime());
							}

							if (this.to_tmap__SOURCESYSTEM_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_tmap__SOURCESYSTEM_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_tmap__UPLOAD_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_tmap__UPLOAD_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_tmap__STARTDATE_SOURCE_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_tmap__STARTDATE_SOURCE_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_tmap__ENDDATE_SOURCE_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_tmap__ENDDATE_SOURCE_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_tmap__BASECODE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_tmap__BASECODE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.exprKey_from_srxc_obsfct__CONCEPT_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_from_srxc_obsfct__CONCEPT_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

				} // G_TM_B_001

				org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_4_1> fsi_tMap_4_1 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_4_1>(
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid + "_tMap_4_1",
						200000) {
					public SortableRow_tMap_4_1 createRowInstance() {
						return new SortableRow_tMap_4_1();
					}
				};

				fsi_tMap_4_1.initPut();

				/**
				 * [tMap_4_TMAP_OUT begin ] stop
				 */

				/**
				 * [tMap_3_TMAP_IN begin ] start
				 */

				ok_Hash.put("tMap_3_TMAP_IN", false);
				start_Hash.put("tMap_3_TMAP_IN", System.currentTimeMillis());
				currentComponent = "tMap_3_TMAP_IN";

				int tos_count_tMap_3_TMAP_IN = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3_TMAP_IN__Struct {
				}
				Var__tMap_3_TMAP_IN__Struct Var__tMap_3_TMAP_IN = new Var__tMap_3_TMAP_IN__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				to_tmapStruct to_tmap_tmp = new to_tmapStruct();
				// ###############################

				/**
				 * [tMap_3_TMAP_IN begin ] stop
				 */
				/**
				 * [tMap_3_TMAP_IN main ] start
				 */

				currentComponent = "tMap_3_TMAP_IN";

				boolean hasCasePrimitiveKeyWithNull_tMap_3_TMAP_IN = false;

				fsi_tMap_3_1.endPut();

				if (from_oe_target_ont == null) {
					from_oe_target_ont = new from_oe_target_ontStruct();
				}

				// ###############################
				// # Input tables (lookups)
				boolean rejectedInnerJoin_tMap_3_TMAP_IN = false;
				boolean mainRowRejected_tMap_3_TMAP_IN = false;

				// /////////////////////////////////////////////
				// Starting Lookup Table "from_src_conc_dim"
				// /////////////////////////////////////////////

				SortableRow_tMap_3_1 rsc_tMap_3_1;

				tHash_Lookup_from_src_conc_dim.initGet();

				fsi_tMap_3_1.initGet();

				// TEST firstLookupIsPersistentSorted=true
				// isFirstPersistentSortedTable=true

				rejectedInnerJoin_tMap_3_TMAP_IN = false;

				while (fsi_tMap_3_1.hasNext()) { // G_TM_M_250 loop "1"

					// CALL close loop of lookup '1'

					rsc_tMap_3_1 = (SortableRow_tMap_3_1) fsi_tMap_3_1.next();
					rsc_tMap_3_1.copyDataTo(from_oe_target_ont);

					rejectedInnerJoin_tMap_3_TMAP_IN = rsc_tMap_3_1.is__rejectedInnerJoin;

					boolean forceLoopfrom_src_conc_dim = false;

					from_src_conc_dimStruct from_src_conc_dimObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_3_TMAP_IN) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_3_TMAP_IN = false;

						from_src_conc_dimHashKey.CONCEPT_PATH = rsc_tMap_3_1.exprKey_from_src_conc_dim__CONCEPT_PATH;

						tHash_Lookup_from_src_conc_dim
								.lookup(from_src_conc_dimHashKey);

						if (!tHash_Lookup_from_src_conc_dim.hasNext()) { // G_TM_M_090

							rejectedInnerJoin_tMap_3_TMAP_IN = true;

							forceLoopfrom_src_conc_dim = true;

						} // G_TM_M_090

					} // G_TM_M_020

					else { // G 20 - G 21
						forceLoopfrom_src_conc_dim = true;
					} // G 21

					from_src_conc_dimStruct from_src_conc_dim = null;

					while ((tHash_Lookup_from_src_conc_dim != null && tHash_Lookup_from_src_conc_dim
							.hasNext()) || forceLoopfrom_src_conc_dim) { // G_TM_M_043

						// CALL close loop of lookup 'from_src_conc_dim'

						from_src_conc_dimStruct fromLookup_from_src_conc_dim = null;
						from_src_conc_dim = from_src_conc_dimDefault;

						if (!forceLoopfrom_src_conc_dim) { // G 46

							fromLookup_from_src_conc_dim = tHash_Lookup_from_src_conc_dim
									.next();

							if (fromLookup_from_src_conc_dim != null) {
								from_src_conc_dim = fromLookup_from_src_conc_dim;
							}

						} // G 46

						forceLoopfrom_src_conc_dim = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_3_TMAP_IN__Struct Var = Var__tMap_3_TMAP_IN;// ###############################
							// ###############################
							// # Output tables

							to_tmap = null;

							if (!rejectedInnerJoin_tMap_3_TMAP_IN) {

								// # Output table : 'to_tmap'
								to_tmap_tmp.TREE_PATH = from_oe_target_ont.TREE_PATH;
								to_tmap_tmp.STAGING_PATH = from_oe_target_ont.STAGING_PATH;
								to_tmap_tmp.CONCEPT_CD = from_src_conc_dim.CONCEPT_CD;
								to_tmap_tmp.NAME_CHAR = from_src_conc_dim.NAME_CHAR;
								to_tmap_tmp.CONCEPT_BLOB = from_src_conc_dim.CONCEPT_BLOB;
								to_tmap_tmp.UPDATE_DATE = from_src_conc_dim.UPDATE_DATE;
								to_tmap_tmp.DOWNLOAD_DATE = from_src_conc_dim.DOWNLOAD_DATE;
								to_tmap_tmp.IMPORT_DATE = from_src_conc_dim.IMPORT_DATE;
								to_tmap_tmp.SOURCESYSTEM_CD = from_src_conc_dim.SOURCESYSTEM_CD;
								to_tmap_tmp.UPLOAD_ID = from_src_conc_dim.UPLOAD_ID;
								to_tmap_tmp.STARTDATE_SOURCE_PATH = from_oe_target_ont.STARTDATE_STAGING_PATH;
								to_tmap_tmp.ENDDATE_SOURCE_PATH = from_oe_target_ont.ENDDATE_STAGING_PATH;
								to_tmap_tmp.BASECODE = from_oe_target_ont.BASECODE;
								to_tmap = to_tmap_tmp;
							} // closing inner join bracket (2)
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_3_TMAP_IN = false;

						tos_count_tMap_3_TMAP_IN++;

						/**
						 * [tMap_3_TMAP_IN main ] stop
						 */
						// Start of branch "to_tmap"
						if (to_tmap != null) {

							/**
							 * [tMap_4_TMAP_OUT main ] start
							 */

							currentComponent = "tMap_4_TMAP_OUT";

							boolean hasCasePrimitiveKeyWithNull_tMap_4_TMAP_OUT = false;

							hasCasePrimitiveKeyWithNull_tMap_4_TMAP_OUT = false;

							String exprKey_from_srxc_obsfct__CONCEPT_CD = to_tmap.CONCEPT_CD;

							SortableRow_tMap_4_1 sortableRow_tMap_4_1 = fsi_tMap_4_1
									.getNextFreeRow();

							sortableRow_tMap_4_1.fillFrom(to_tmap,
									exprKey_from_srxc_obsfct__CONCEPT_CD);

							fsi_tMap_4_1.put(sortableRow_tMap_4_1);

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_4_TMAP_OUT = false;
							boolean mainRowRejected_tMap_4_TMAP_OUT = false;

							// ###############################

							tos_count_tMap_4_TMAP_OUT++;

							/**
							 * [tMap_4_TMAP_OUT main ] stop
							 */

						} // End of branch "to_tmap"

					} // close loop of lookup 'from_src_conc_dim' // G_TM_M_043

				} // G_TM_M_250 close loop read file data '1'

				/**
				 * [tMap_3_TMAP_IN end ] start
				 */

				currentComponent = "tMap_3_TMAP_IN";

				// ###############################
				// # Lookup hashes releasing
				fsi_tMap_3_1.endGet();

				if (tHash_Lookup_from_src_conc_dim != null) {
					tHash_Lookup_from_src_conc_dim.endGet();
				}
				globalMap.remove("tHash_Lookup_from_src_conc_dim");

				// ###############################

				ok_Hash.put("tMap_3_TMAP_IN", true);
				end_Hash.put("tMap_3_TMAP_IN", System.currentTimeMillis());

				/**
				 * [tMap_3_TMAP_IN end ] stop
				 */

				/**
				 * [tMap_4_TMAP_OUT end ] start
				 */

				currentComponent = "tMap_4_TMAP_OUT";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_4_TMAP_OUT", true);
				end_Hash.put("tMap_4_TMAP_OUT", System.currentTimeMillis());

				/**
				 * [tMap_4_TMAP_OUT end ] stop
				 */

				/**
				 * [tMap_9_TMAP_OUT begin ] start
				 */

				ok_Hash.put("tMap_9_TMAP_OUT", false);
				start_Hash.put("tMap_9_TMAP_OUT", System.currentTimeMillis());
				currentComponent = "tMap_9_TMAP_OUT";

				int tos_count_tMap_9_TMAP_OUT = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row15Struct> tHash_Lookup_row15 = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row15Struct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row15Struct>) globalMap
						.get("tHash_Lookup_row15"));

				row15Struct row15HashKey = new row15Struct();
				row15Struct row15Default = new row15Struct();

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row14Struct> tHash_Lookup_row14 = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row14Struct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row14Struct>) globalMap
						.get("tHash_Lookup_row14"));

				row14Struct row14HashKey = new row14Struct();
				row14Struct row14Default = new row14Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_9_TMAP_OUT__Struct {
				}
				Var__tMap_9_TMAP_OUT__Struct Var__tMap_9_TMAP_OUT = new Var__tMap_9_TMAP_OUT__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				// ###############################

				class SortableRow_tMap_9_1 implements
						Comparable<SortableRow_tMap_9_1>,
						routines.system.IPersistableRow<SortableRow_tMap_9_1> { // G_TM_B_001

					boolean is__rejectedInnerJoin;

					String exprKey_row15__CONCEPT_PATH;

					// to_obs_fct
					BigDecimal to_obs_fct__ENCOUNTER_NUM;
					BigDecimal to_obs_fct__PATIENT_NUM;
					String to_obs_fct__CONCEPT_CD;
					String to_obs_fct__PROVIDER_ID;
					String to_obs_fct__START_DATE;
					String to_obs_fct__MODIFIER_CD;
					String to_obs_fct__INSTANCE_NUM;
					String to_obs_fct__VALTYPE_CD;
					String to_obs_fct__TVAL_CHAR;
					Float to_obs_fct__NVAL_NUM;
					String to_obs_fct__VALUEFLAG_CD;
					String to_obs_fct__QUANTITY_NUM;
					String to_obs_fct__UNITS_CD;
					String to_obs_fct__END_DATE;
					String to_obs_fct__LOCATION_CD;
					String to_obs_fct__OBSERVATION_BLOB;
					String to_obs_fct__CONFIDENCE_NUM;
					java.util.Date to_obs_fct__UPDATE_DATE;
					java.util.Date to_obs_fct__DOWNLOAD_DATE;
					java.util.Date to_obs_fct__IMPORT_DATE;
					String to_obs_fct__SOURCESYSTEM_CD;
					String to_obs_fct__UPLOAD_ID;
					String to_obs_fct__STARTDATE_SOURCE_PATH;
					String to_obs_fct__ENDDATE_SOURCE_PATH;

					public void fillFrom(to_obs_fctStruct to_obs_fct,
							String exprKey_row15__CONCEPT_PATH) {

						this.to_obs_fct__ENCOUNTER_NUM = to_obs_fct.ENCOUNTER_NUM;
						this.to_obs_fct__PATIENT_NUM = to_obs_fct.PATIENT_NUM;
						this.to_obs_fct__CONCEPT_CD = to_obs_fct.CONCEPT_CD;
						this.to_obs_fct__PROVIDER_ID = to_obs_fct.PROVIDER_ID;
						this.to_obs_fct__START_DATE = to_obs_fct.START_DATE;
						this.to_obs_fct__MODIFIER_CD = to_obs_fct.MODIFIER_CD;
						this.to_obs_fct__INSTANCE_NUM = to_obs_fct.INSTANCE_NUM;
						this.to_obs_fct__VALTYPE_CD = to_obs_fct.VALTYPE_CD;
						this.to_obs_fct__TVAL_CHAR = to_obs_fct.TVAL_CHAR;
						this.to_obs_fct__NVAL_NUM = to_obs_fct.NVAL_NUM;
						this.to_obs_fct__VALUEFLAG_CD = to_obs_fct.VALUEFLAG_CD;
						this.to_obs_fct__QUANTITY_NUM = to_obs_fct.QUANTITY_NUM;
						this.to_obs_fct__UNITS_CD = to_obs_fct.UNITS_CD;
						this.to_obs_fct__END_DATE = to_obs_fct.END_DATE;
						this.to_obs_fct__LOCATION_CD = to_obs_fct.LOCATION_CD;
						this.to_obs_fct__OBSERVATION_BLOB = to_obs_fct.OBSERVATION_BLOB;
						this.to_obs_fct__CONFIDENCE_NUM = to_obs_fct.CONFIDENCE_NUM;
						this.to_obs_fct__UPDATE_DATE = to_obs_fct.UPDATE_DATE;
						this.to_obs_fct__DOWNLOAD_DATE = to_obs_fct.DOWNLOAD_DATE;
						this.to_obs_fct__IMPORT_DATE = to_obs_fct.IMPORT_DATE;
						this.to_obs_fct__SOURCESYSTEM_CD = to_obs_fct.SOURCESYSTEM_CD;
						this.to_obs_fct__UPLOAD_ID = to_obs_fct.UPLOAD_ID;
						this.to_obs_fct__STARTDATE_SOURCE_PATH = to_obs_fct.STARTDATE_SOURCE_PATH;
						this.to_obs_fct__ENDDATE_SOURCE_PATH = to_obs_fct.ENDDATE_SOURCE_PATH;
						this.exprKey_row15__CONCEPT_PATH = exprKey_row15__CONCEPT_PATH;

					}

					public void copyDataTo(to_obs_fctStruct to_obs_fct) {

						to_obs_fct.ENCOUNTER_NUM = this.to_obs_fct__ENCOUNTER_NUM;
						to_obs_fct.PATIENT_NUM = this.to_obs_fct__PATIENT_NUM;
						to_obs_fct.CONCEPT_CD = this.to_obs_fct__CONCEPT_CD;
						to_obs_fct.PROVIDER_ID = this.to_obs_fct__PROVIDER_ID;
						to_obs_fct.START_DATE = this.to_obs_fct__START_DATE;
						to_obs_fct.MODIFIER_CD = this.to_obs_fct__MODIFIER_CD;
						to_obs_fct.INSTANCE_NUM = this.to_obs_fct__INSTANCE_NUM;
						to_obs_fct.VALTYPE_CD = this.to_obs_fct__VALTYPE_CD;
						to_obs_fct.TVAL_CHAR = this.to_obs_fct__TVAL_CHAR;
						to_obs_fct.NVAL_NUM = this.to_obs_fct__NVAL_NUM;
						to_obs_fct.VALUEFLAG_CD = this.to_obs_fct__VALUEFLAG_CD;
						to_obs_fct.QUANTITY_NUM = this.to_obs_fct__QUANTITY_NUM;
						to_obs_fct.UNITS_CD = this.to_obs_fct__UNITS_CD;
						to_obs_fct.END_DATE = this.to_obs_fct__END_DATE;
						to_obs_fct.LOCATION_CD = this.to_obs_fct__LOCATION_CD;
						to_obs_fct.OBSERVATION_BLOB = this.to_obs_fct__OBSERVATION_BLOB;
						to_obs_fct.CONFIDENCE_NUM = this.to_obs_fct__CONFIDENCE_NUM;
						to_obs_fct.UPDATE_DATE = this.to_obs_fct__UPDATE_DATE;
						to_obs_fct.DOWNLOAD_DATE = this.to_obs_fct__DOWNLOAD_DATE;
						to_obs_fct.IMPORT_DATE = this.to_obs_fct__IMPORT_DATE;
						to_obs_fct.SOURCESYSTEM_CD = this.to_obs_fct__SOURCESYSTEM_CD;
						to_obs_fct.UPLOAD_ID = this.to_obs_fct__UPLOAD_ID;
						to_obs_fct.STARTDATE_SOURCE_PATH = this.to_obs_fct__STARTDATE_SOURCE_PATH;
						to_obs_fct.ENDDATE_SOURCE_PATH = this.to_obs_fct__ENDDATE_SOURCE_PATH;

					}

					public String toString() {

						StringBuilder sb = new StringBuilder();
						sb.append(super.toString());
						sb.append("[");

						sb.append("to_obs_fct__ENCOUNTER_NUM");
						sb.append("=");
						sb.append(String
								.valueOf(this.to_obs_fct__ENCOUNTER_NUM));

						sb.append(", ");

						sb.append("to_obs_fct__PATIENT_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.to_obs_fct__PATIENT_NUM));

						sb.append(", ");

						sb.append("to_obs_fct__CONCEPT_CD");
						sb.append("=");
						sb.append(String.valueOf(this.to_obs_fct__CONCEPT_CD));

						sb.append(", ");

						sb.append("to_obs_fct__PROVIDER_ID");
						sb.append("=");
						sb.append(String.valueOf(this.to_obs_fct__PROVIDER_ID));

						sb.append(", ");

						sb.append("to_obs_fct__START_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.to_obs_fct__START_DATE));

						sb.append(", ");

						sb.append("to_obs_fct__MODIFIER_CD");
						sb.append("=");
						sb.append(String.valueOf(this.to_obs_fct__MODIFIER_CD));

						sb.append(", ");

						sb.append("to_obs_fct__INSTANCE_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.to_obs_fct__INSTANCE_NUM));

						sb.append(", ");

						sb.append("to_obs_fct__VALTYPE_CD");
						sb.append("=");
						sb.append(String.valueOf(this.to_obs_fct__VALTYPE_CD));

						sb.append(", ");

						sb.append("to_obs_fct__TVAL_CHAR");
						sb.append("=");
						sb.append(String.valueOf(this.to_obs_fct__TVAL_CHAR));

						sb.append(", ");

						sb.append("to_obs_fct__NVAL_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.to_obs_fct__NVAL_NUM));

						sb.append(", ");

						sb.append("to_obs_fct__VALUEFLAG_CD");
						sb.append("=");
						sb.append(String.valueOf(this.to_obs_fct__VALUEFLAG_CD));

						sb.append(", ");

						sb.append("to_obs_fct__QUANTITY_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.to_obs_fct__QUANTITY_NUM));

						sb.append(", ");

						sb.append("to_obs_fct__UNITS_CD");
						sb.append("=");
						sb.append(String.valueOf(this.to_obs_fct__UNITS_CD));

						sb.append(", ");

						sb.append("to_obs_fct__END_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.to_obs_fct__END_DATE));

						sb.append(", ");

						sb.append("to_obs_fct__LOCATION_CD");
						sb.append("=");
						sb.append(String.valueOf(this.to_obs_fct__LOCATION_CD));

						sb.append(", ");

						sb.append("to_obs_fct__OBSERVATION_BLOB");
						sb.append("=");
						sb.append(String
								.valueOf(this.to_obs_fct__OBSERVATION_BLOB));

						sb.append(", ");

						sb.append("to_obs_fct__CONFIDENCE_NUM");
						sb.append("=");
						sb.append(String
								.valueOf(this.to_obs_fct__CONFIDENCE_NUM));

						sb.append(", ");

						sb.append("to_obs_fct__UPDATE_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.to_obs_fct__UPDATE_DATE));

						sb.append(", ");

						sb.append("to_obs_fct__DOWNLOAD_DATE");
						sb.append("=");
						sb.append(String
								.valueOf(this.to_obs_fct__DOWNLOAD_DATE));

						sb.append(", ");

						sb.append("to_obs_fct__IMPORT_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.to_obs_fct__IMPORT_DATE));

						sb.append(", ");

						sb.append("to_obs_fct__SOURCESYSTEM_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.to_obs_fct__SOURCESYSTEM_CD));

						sb.append(", ");

						sb.append("to_obs_fct__UPLOAD_ID");
						sb.append("=");
						sb.append(String.valueOf(this.to_obs_fct__UPLOAD_ID));

						sb.append(", ");

						sb.append("to_obs_fct__STARTDATE_SOURCE_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.to_obs_fct__STARTDATE_SOURCE_PATH));

						sb.append(", ");

						sb.append("to_obs_fct__ENDDATE_SOURCE_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.to_obs_fct__ENDDATE_SOURCE_PATH));

						sb.append("]");

						return sb.toString();
					}

					public int compareTo(SortableRow_tMap_9_1 other) {

						int returnValue = 0;

						returnValue = checkNullsAndCompare(
								this.exprKey_row15__CONCEPT_PATH,
								other.exprKey_row15__CONCEPT_PATH);
						if (returnValue != 0) {
							return returnValue;
						}

						return returnValue;
					}

					private int checkNullsAndCompare(Object object1,
							Object object2) {
						int returnValue = 0;
						if (object1 instanceof Comparable
								&& object2 instanceof Comparable) {
							returnValue = ((Comparable) object1)
									.compareTo(object2);
						} else if (object1 != null && object2 != null) {
							returnValue = compareStrings(object1.toString(),
									object2.toString());
						} else if (object1 == null && object2 != null) {
							returnValue = 1;
						} else if (object1 != null && object2 == null) {
							returnValue = -1;
						} else {
							returnValue = 0;
						}

						return returnValue;
					}

					private int compareStrings(String string1, String string2) {
						return string1.compareTo(string2);
					}

					public void readData(ObjectInputStream dis) {

						synchronized (to_obs_fctStruct.commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

							try {

								int length = 0;

								this.is__rejectedInnerJoin = dis.readBoolean();

								this.to_obs_fct__ENCOUNTER_NUM = (BigDecimal) dis
										.readObject();

								this.to_obs_fct__PATIENT_NUM = (BigDecimal) dis
										.readObject();

								length = dis.readInt();
								if (length == -1) {
									this.to_obs_fct__CONCEPT_CD = null;
								} else {
									if (length > to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_obs_fct__CONCEPT_CD = new String(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_obs_fct__PROVIDER_ID = null;
								} else {
									if (length > to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_obs_fct__PROVIDER_ID = new String(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_obs_fct__START_DATE = null;
								} else {
									if (length > to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_obs_fct__START_DATE = new String(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_obs_fct__MODIFIER_CD = null;
								} else {
									if (length > to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_obs_fct__MODIFIER_CD = new String(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_obs_fct__INSTANCE_NUM = null;
								} else {
									if (length > to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_obs_fct__INSTANCE_NUM = new String(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_obs_fct__VALTYPE_CD = null;
								} else {
									if (length > to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_obs_fct__VALTYPE_CD = new String(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_obs_fct__TVAL_CHAR = null;
								} else {
									if (length > to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_obs_fct__TVAL_CHAR = new String(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.to_obs_fct__NVAL_NUM = null;
								} else {
									this.to_obs_fct__NVAL_NUM = dis.readFloat();
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_obs_fct__VALUEFLAG_CD = null;
								} else {
									if (length > to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_obs_fct__VALUEFLAG_CD = new String(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_obs_fct__QUANTITY_NUM = null;
								} else {
									if (length > to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_obs_fct__QUANTITY_NUM = new String(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_obs_fct__UNITS_CD = null;
								} else {
									if (length > to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_obs_fct__UNITS_CD = new String(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_obs_fct__END_DATE = null;
								} else {
									if (length > to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_obs_fct__END_DATE = new String(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_obs_fct__LOCATION_CD = null;
								} else {
									if (length > to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_obs_fct__LOCATION_CD = new String(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_obs_fct__OBSERVATION_BLOB = null;
								} else {
									if (length > to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_obs_fct__OBSERVATION_BLOB = new String(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_obs_fct__CONFIDENCE_NUM = null;
								} else {
									if (length > to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_obs_fct__CONFIDENCE_NUM = new String(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.to_obs_fct__UPDATE_DATE = null;
								} else {
									this.to_obs_fct__UPDATE_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.to_obs_fct__DOWNLOAD_DATE = null;
								} else {
									this.to_obs_fct__DOWNLOAD_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.to_obs_fct__IMPORT_DATE = null;
								} else {
									this.to_obs_fct__IMPORT_DATE = new Date(
											dis.readLong());
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_obs_fct__SOURCESYSTEM_CD = null;
								} else {
									if (length > to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_obs_fct__SOURCESYSTEM_CD = new String(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_obs_fct__UPLOAD_ID = null;
								} else {
									if (length > to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_obs_fct__UPLOAD_ID = new String(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_obs_fct__STARTDATE_SOURCE_PATH = null;
								} else {
									if (length > to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_obs_fct__STARTDATE_SOURCE_PATH = new String(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_obs_fct__ENDDATE_SOURCE_PATH = null;
								} else {
									if (length > to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_obs_fct__ENDDATE_SOURCE_PATH = new String(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row15__CONCEPT_PATH = null;
								} else {
									if (length > to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.exprKey_row15__CONCEPT_PATH = new String(
											to_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

							} catch (IOException e) {
								throw new RuntimeException(e);

							} catch (ClassNotFoundException eCNFE) {
								throw new RuntimeException(eCNFE);

							}

						}
					}

					public void writeData(ObjectOutputStream dos) {
						try {

							dos.writeBoolean(this.is__rejectedInnerJoin);

							dos.writeObject(this.to_obs_fct__ENCOUNTER_NUM);

							dos.writeObject(this.to_obs_fct__PATIENT_NUM);

							if (this.to_obs_fct__CONCEPT_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_obs_fct__CONCEPT_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_obs_fct__PROVIDER_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_obs_fct__PROVIDER_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_obs_fct__START_DATE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_obs_fct__START_DATE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_obs_fct__MODIFIER_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_obs_fct__MODIFIER_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_obs_fct__INSTANCE_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_obs_fct__INSTANCE_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_obs_fct__VALTYPE_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_obs_fct__VALTYPE_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_obs_fct__TVAL_CHAR == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_obs_fct__TVAL_CHAR
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_obs_fct__NVAL_NUM == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeFloat(this.to_obs_fct__NVAL_NUM);
							}

							if (this.to_obs_fct__VALUEFLAG_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_obs_fct__VALUEFLAG_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_obs_fct__QUANTITY_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_obs_fct__QUANTITY_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_obs_fct__UNITS_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_obs_fct__UNITS_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_obs_fct__END_DATE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_obs_fct__END_DATE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_obs_fct__LOCATION_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_obs_fct__LOCATION_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_obs_fct__OBSERVATION_BLOB == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_obs_fct__OBSERVATION_BLOB
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_obs_fct__CONFIDENCE_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_obs_fct__CONFIDENCE_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_obs_fct__UPDATE_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.to_obs_fct__UPDATE_DATE
										.getTime());
							}

							if (this.to_obs_fct__DOWNLOAD_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.to_obs_fct__DOWNLOAD_DATE
										.getTime());
							}

							if (this.to_obs_fct__IMPORT_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.to_obs_fct__IMPORT_DATE
										.getTime());
							}

							if (this.to_obs_fct__SOURCESYSTEM_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_obs_fct__SOURCESYSTEM_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_obs_fct__UPLOAD_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_obs_fct__UPLOAD_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_obs_fct__STARTDATE_SOURCE_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_obs_fct__STARTDATE_SOURCE_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_obs_fct__ENDDATE_SOURCE_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_obs_fct__ENDDATE_SOURCE_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.exprKey_row15__CONCEPT_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row15__CONCEPT_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

				} // G_TM_B_001

				org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_9_1> fsi_tMap_9_1 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_9_1>(
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid + "_tMap_9_1",
						200000) {
					public SortableRow_tMap_9_1 createRowInstance() {
						return new SortableRow_tMap_9_1();
					}
				};

				fsi_tMap_9_1.initPut();

				class SortableRow_tMap_9_2 implements
						Comparable<SortableRow_tMap_9_2>,
						routines.system.IPersistableRow<SortableRow_tMap_9_2> { // G_TM_B_001

					boolean is__rejectedInnerJoin;

					BigDecimal exprKey_row14__PATIENT_NUM;
					String exprKey_row14__CONCEPT_CD;

					// row15
					BigDecimal to_obs_fct__ENCOUNTER_NUM;
					BigDecimal to_obs_fct__PATIENT_NUM;
					String to_obs_fct__CONCEPT_CD;
					String to_obs_fct__PROVIDER_ID;
					String to_obs_fct__START_DATE;
					String to_obs_fct__MODIFIER_CD;
					String to_obs_fct__INSTANCE_NUM;
					String to_obs_fct__VALTYPE_CD;
					String to_obs_fct__TVAL_CHAR;
					Float to_obs_fct__NVAL_NUM;
					String to_obs_fct__VALUEFLAG_CD;
					String to_obs_fct__QUANTITY_NUM;
					String to_obs_fct__UNITS_CD;
					String to_obs_fct__END_DATE;
					String to_obs_fct__LOCATION_CD;
					String to_obs_fct__OBSERVATION_BLOB;
					String to_obs_fct__CONFIDENCE_NUM;
					java.util.Date to_obs_fct__UPDATE_DATE;
					java.util.Date to_obs_fct__DOWNLOAD_DATE;
					java.util.Date to_obs_fct__IMPORT_DATE;
					String to_obs_fct__SOURCESYSTEM_CD;
					String to_obs_fct__UPLOAD_ID;
					String to_obs_fct__STARTDATE_SOURCE_PATH;
					String to_obs_fct__ENDDATE_SOURCE_PATH;
					String row15__CONCEPT_PATH;
					String row15__CONCEPT_CD;
					String row15__NAME_CHAR;
					String row15__CONCEPT_BLOB;
					java.util.Date row15__UPDATE_DATE;
					java.util.Date row15__DOWNLOAD_DATE;
					java.util.Date row15__IMPORT_DATE;
					String row15__SOURCESYSTEM_CD;
					String row15__UPLOAD_ID;

					public void fillFrom(to_obs_fctStruct to_obs_fct,
							row15Struct row15,
							BigDecimal exprKey_row14__PATIENT_NUM,
							String exprKey_row14__CONCEPT_CD) {

						this.to_obs_fct__ENCOUNTER_NUM = to_obs_fct.ENCOUNTER_NUM;
						this.to_obs_fct__PATIENT_NUM = to_obs_fct.PATIENT_NUM;
						this.to_obs_fct__CONCEPT_CD = to_obs_fct.CONCEPT_CD;
						this.to_obs_fct__PROVIDER_ID = to_obs_fct.PROVIDER_ID;
						this.to_obs_fct__START_DATE = to_obs_fct.START_DATE;
						this.to_obs_fct__MODIFIER_CD = to_obs_fct.MODIFIER_CD;
						this.to_obs_fct__INSTANCE_NUM = to_obs_fct.INSTANCE_NUM;
						this.to_obs_fct__VALTYPE_CD = to_obs_fct.VALTYPE_CD;
						this.to_obs_fct__TVAL_CHAR = to_obs_fct.TVAL_CHAR;
						this.to_obs_fct__NVAL_NUM = to_obs_fct.NVAL_NUM;
						this.to_obs_fct__VALUEFLAG_CD = to_obs_fct.VALUEFLAG_CD;
						this.to_obs_fct__QUANTITY_NUM = to_obs_fct.QUANTITY_NUM;
						this.to_obs_fct__UNITS_CD = to_obs_fct.UNITS_CD;
						this.to_obs_fct__END_DATE = to_obs_fct.END_DATE;
						this.to_obs_fct__LOCATION_CD = to_obs_fct.LOCATION_CD;
						this.to_obs_fct__OBSERVATION_BLOB = to_obs_fct.OBSERVATION_BLOB;
						this.to_obs_fct__CONFIDENCE_NUM = to_obs_fct.CONFIDENCE_NUM;
						this.to_obs_fct__UPDATE_DATE = to_obs_fct.UPDATE_DATE;
						this.to_obs_fct__DOWNLOAD_DATE = to_obs_fct.DOWNLOAD_DATE;
						this.to_obs_fct__IMPORT_DATE = to_obs_fct.IMPORT_DATE;
						this.to_obs_fct__SOURCESYSTEM_CD = to_obs_fct.SOURCESYSTEM_CD;
						this.to_obs_fct__UPLOAD_ID = to_obs_fct.UPLOAD_ID;
						this.to_obs_fct__STARTDATE_SOURCE_PATH = to_obs_fct.STARTDATE_SOURCE_PATH;
						this.to_obs_fct__ENDDATE_SOURCE_PATH = to_obs_fct.ENDDATE_SOURCE_PATH;
						this.row15__CONCEPT_PATH = row15.CONCEPT_PATH;
						this.row15__CONCEPT_CD = row15.CONCEPT_CD;
						this.row15__NAME_CHAR = row15.NAME_CHAR;
						this.row15__CONCEPT_BLOB = row15.CONCEPT_BLOB;
						this.row15__UPDATE_DATE = row15.UPDATE_DATE;
						this.row15__DOWNLOAD_DATE = row15.DOWNLOAD_DATE;
						this.row15__IMPORT_DATE = row15.IMPORT_DATE;
						this.row15__SOURCESYSTEM_CD = row15.SOURCESYSTEM_CD;
						this.row15__UPLOAD_ID = row15.UPLOAD_ID;
						this.exprKey_row14__PATIENT_NUM = exprKey_row14__PATIENT_NUM;
						this.exprKey_row14__CONCEPT_CD = exprKey_row14__CONCEPT_CD;

					}

					public void copyDataTo(to_obs_fctStruct to_obs_fct,
							row15Struct row15) {

						to_obs_fct.ENCOUNTER_NUM = this.to_obs_fct__ENCOUNTER_NUM;
						to_obs_fct.PATIENT_NUM = this.to_obs_fct__PATIENT_NUM;
						to_obs_fct.CONCEPT_CD = this.to_obs_fct__CONCEPT_CD;
						to_obs_fct.PROVIDER_ID = this.to_obs_fct__PROVIDER_ID;
						to_obs_fct.START_DATE = this.to_obs_fct__START_DATE;
						to_obs_fct.MODIFIER_CD = this.to_obs_fct__MODIFIER_CD;
						to_obs_fct.INSTANCE_NUM = this.to_obs_fct__INSTANCE_NUM;
						to_obs_fct.VALTYPE_CD = this.to_obs_fct__VALTYPE_CD;
						to_obs_fct.TVAL_CHAR = this.to_obs_fct__TVAL_CHAR;
						to_obs_fct.NVAL_NUM = this.to_obs_fct__NVAL_NUM;
						to_obs_fct.VALUEFLAG_CD = this.to_obs_fct__VALUEFLAG_CD;
						to_obs_fct.QUANTITY_NUM = this.to_obs_fct__QUANTITY_NUM;
						to_obs_fct.UNITS_CD = this.to_obs_fct__UNITS_CD;
						to_obs_fct.END_DATE = this.to_obs_fct__END_DATE;
						to_obs_fct.LOCATION_CD = this.to_obs_fct__LOCATION_CD;
						to_obs_fct.OBSERVATION_BLOB = this.to_obs_fct__OBSERVATION_BLOB;
						to_obs_fct.CONFIDENCE_NUM = this.to_obs_fct__CONFIDENCE_NUM;
						to_obs_fct.UPDATE_DATE = this.to_obs_fct__UPDATE_DATE;
						to_obs_fct.DOWNLOAD_DATE = this.to_obs_fct__DOWNLOAD_DATE;
						to_obs_fct.IMPORT_DATE = this.to_obs_fct__IMPORT_DATE;
						to_obs_fct.SOURCESYSTEM_CD = this.to_obs_fct__SOURCESYSTEM_CD;
						to_obs_fct.UPLOAD_ID = this.to_obs_fct__UPLOAD_ID;
						to_obs_fct.STARTDATE_SOURCE_PATH = this.to_obs_fct__STARTDATE_SOURCE_PATH;
						to_obs_fct.ENDDATE_SOURCE_PATH = this.to_obs_fct__ENDDATE_SOURCE_PATH;
						row15.CONCEPT_PATH = this.row15__CONCEPT_PATH;
						row15.CONCEPT_CD = this.row15__CONCEPT_CD;
						row15.NAME_CHAR = this.row15__NAME_CHAR;
						row15.CONCEPT_BLOB = this.row15__CONCEPT_BLOB;
						row15.UPDATE_DATE = this.row15__UPDATE_DATE;
						row15.DOWNLOAD_DATE = this.row15__DOWNLOAD_DATE;
						row15.IMPORT_DATE = this.row15__IMPORT_DATE;
						row15.SOURCESYSTEM_CD = this.row15__SOURCESYSTEM_CD;
						row15.UPLOAD_ID = this.row15__UPLOAD_ID;

					}

					public String toString() {

						StringBuilder sb = new StringBuilder();
						sb.append(super.toString());
						sb.append("[");

						sb.append("to_obs_fct__ENCOUNTER_NUM");
						sb.append("=");
						sb.append(String
								.valueOf(this.to_obs_fct__ENCOUNTER_NUM));

						sb.append(", ");

						sb.append("to_obs_fct__PATIENT_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.to_obs_fct__PATIENT_NUM));

						sb.append(", ");

						sb.append("to_obs_fct__CONCEPT_CD");
						sb.append("=");
						sb.append(String.valueOf(this.to_obs_fct__CONCEPT_CD));

						sb.append(", ");

						sb.append("to_obs_fct__PROVIDER_ID");
						sb.append("=");
						sb.append(String.valueOf(this.to_obs_fct__PROVIDER_ID));

						sb.append(", ");

						sb.append("to_obs_fct__START_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.to_obs_fct__START_DATE));

						sb.append(", ");

						sb.append("to_obs_fct__MODIFIER_CD");
						sb.append("=");
						sb.append(String.valueOf(this.to_obs_fct__MODIFIER_CD));

						sb.append(", ");

						sb.append("to_obs_fct__INSTANCE_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.to_obs_fct__INSTANCE_NUM));

						sb.append(", ");

						sb.append("to_obs_fct__VALTYPE_CD");
						sb.append("=");
						sb.append(String.valueOf(this.to_obs_fct__VALTYPE_CD));

						sb.append(", ");

						sb.append("to_obs_fct__TVAL_CHAR");
						sb.append("=");
						sb.append(String.valueOf(this.to_obs_fct__TVAL_CHAR));

						sb.append(", ");

						sb.append("to_obs_fct__NVAL_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.to_obs_fct__NVAL_NUM));

						sb.append(", ");

						sb.append("to_obs_fct__VALUEFLAG_CD");
						sb.append("=");
						sb.append(String.valueOf(this.to_obs_fct__VALUEFLAG_CD));

						sb.append(", ");

						sb.append("to_obs_fct__QUANTITY_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.to_obs_fct__QUANTITY_NUM));

						sb.append(", ");

						sb.append("to_obs_fct__UNITS_CD");
						sb.append("=");
						sb.append(String.valueOf(this.to_obs_fct__UNITS_CD));

						sb.append(", ");

						sb.append("to_obs_fct__END_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.to_obs_fct__END_DATE));

						sb.append(", ");

						sb.append("to_obs_fct__LOCATION_CD");
						sb.append("=");
						sb.append(String.valueOf(this.to_obs_fct__LOCATION_CD));

						sb.append(", ");

						sb.append("to_obs_fct__OBSERVATION_BLOB");
						sb.append("=");
						sb.append(String
								.valueOf(this.to_obs_fct__OBSERVATION_BLOB));

						sb.append(", ");

						sb.append("to_obs_fct__CONFIDENCE_NUM");
						sb.append("=");
						sb.append(String
								.valueOf(this.to_obs_fct__CONFIDENCE_NUM));

						sb.append(", ");

						sb.append("to_obs_fct__UPDATE_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.to_obs_fct__UPDATE_DATE));

						sb.append(", ");

						sb.append("to_obs_fct__DOWNLOAD_DATE");
						sb.append("=");
						sb.append(String
								.valueOf(this.to_obs_fct__DOWNLOAD_DATE));

						sb.append(", ");

						sb.append("to_obs_fct__IMPORT_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.to_obs_fct__IMPORT_DATE));

						sb.append(", ");

						sb.append("to_obs_fct__SOURCESYSTEM_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.to_obs_fct__SOURCESYSTEM_CD));

						sb.append(", ");

						sb.append("to_obs_fct__UPLOAD_ID");
						sb.append("=");
						sb.append(String.valueOf(this.to_obs_fct__UPLOAD_ID));

						sb.append(", ");

						sb.append("to_obs_fct__STARTDATE_SOURCE_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.to_obs_fct__STARTDATE_SOURCE_PATH));

						sb.append(", ");

						sb.append("to_obs_fct__ENDDATE_SOURCE_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.to_obs_fct__ENDDATE_SOURCE_PATH));

						sb.append(", ");

						sb.append("row15__CONCEPT_PATH");
						sb.append("=");
						sb.append(String.valueOf(this.row15__CONCEPT_PATH));

						sb.append(", ");

						sb.append("row15__CONCEPT_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row15__CONCEPT_CD));

						sb.append(", ");

						sb.append("row15__NAME_CHAR");
						sb.append("=");
						sb.append(String.valueOf(this.row15__NAME_CHAR));

						sb.append(", ");

						sb.append("row15__CONCEPT_BLOB");
						sb.append("=");
						sb.append(String.valueOf(this.row15__CONCEPT_BLOB));

						sb.append(", ");

						sb.append("row15__UPDATE_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row15__UPDATE_DATE));

						sb.append(", ");

						sb.append("row15__DOWNLOAD_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row15__DOWNLOAD_DATE));

						sb.append(", ");

						sb.append("row15__IMPORT_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row15__IMPORT_DATE));

						sb.append(", ");

						sb.append("row15__SOURCESYSTEM_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row15__SOURCESYSTEM_CD));

						sb.append(", ");

						sb.append("row15__UPLOAD_ID");
						sb.append("=");
						sb.append(String.valueOf(this.row15__UPLOAD_ID));

						sb.append("]");

						return sb.toString();
					}

					public int compareTo(SortableRow_tMap_9_2 other) {

						int returnValue = 0;

						returnValue = checkNullsAndCompare(
								this.exprKey_row14__PATIENT_NUM,
								other.exprKey_row14__PATIENT_NUM);
						if (returnValue != 0) {
							return returnValue;
						}

						returnValue = checkNullsAndCompare(
								this.exprKey_row14__CONCEPT_CD,
								other.exprKey_row14__CONCEPT_CD);
						if (returnValue != 0) {
							return returnValue;
						}

						return returnValue;
					}

					private int checkNullsAndCompare(Object object1,
							Object object2) {
						int returnValue = 0;
						if (object1 instanceof Comparable
								&& object2 instanceof Comparable) {
							returnValue = ((Comparable) object1)
									.compareTo(object2);
						} else if (object1 != null && object2 != null) {
							returnValue = compareStrings(object1.toString(),
									object2.toString());
						} else if (object1 == null && object2 != null) {
							returnValue = 1;
						} else if (object1 != null && object2 == null) {
							returnValue = -1;
						} else {
							returnValue = 0;
						}

						return returnValue;
					}

					private int compareStrings(String string1, String string2) {
						return string1.compareTo(string2);
					}

					public void readData(ObjectInputStream dis) {

						synchronized (row15Struct.commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

							try {

								int length = 0;

								this.is__rejectedInnerJoin = dis.readBoolean();

								this.to_obs_fct__ENCOUNTER_NUM = (BigDecimal) dis
										.readObject();

								this.to_obs_fct__PATIENT_NUM = (BigDecimal) dis
										.readObject();

								length = dis.readInt();
								if (length == -1) {
									this.to_obs_fct__CONCEPT_CD = null;
								} else {
									if (length > row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_obs_fct__CONCEPT_CD = new String(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_obs_fct__PROVIDER_ID = null;
								} else {
									if (length > row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_obs_fct__PROVIDER_ID = new String(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_obs_fct__START_DATE = null;
								} else {
									if (length > row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_obs_fct__START_DATE = new String(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_obs_fct__MODIFIER_CD = null;
								} else {
									if (length > row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_obs_fct__MODIFIER_CD = new String(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_obs_fct__INSTANCE_NUM = null;
								} else {
									if (length > row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_obs_fct__INSTANCE_NUM = new String(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_obs_fct__VALTYPE_CD = null;
								} else {
									if (length > row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_obs_fct__VALTYPE_CD = new String(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_obs_fct__TVAL_CHAR = null;
								} else {
									if (length > row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_obs_fct__TVAL_CHAR = new String(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.to_obs_fct__NVAL_NUM = null;
								} else {
									this.to_obs_fct__NVAL_NUM = dis.readFloat();
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_obs_fct__VALUEFLAG_CD = null;
								} else {
									if (length > row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_obs_fct__VALUEFLAG_CD = new String(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_obs_fct__QUANTITY_NUM = null;
								} else {
									if (length > row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_obs_fct__QUANTITY_NUM = new String(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_obs_fct__UNITS_CD = null;
								} else {
									if (length > row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_obs_fct__UNITS_CD = new String(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_obs_fct__END_DATE = null;
								} else {
									if (length > row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_obs_fct__END_DATE = new String(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_obs_fct__LOCATION_CD = null;
								} else {
									if (length > row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_obs_fct__LOCATION_CD = new String(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_obs_fct__OBSERVATION_BLOB = null;
								} else {
									if (length > row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_obs_fct__OBSERVATION_BLOB = new String(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_obs_fct__CONFIDENCE_NUM = null;
								} else {
									if (length > row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_obs_fct__CONFIDENCE_NUM = new String(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.to_obs_fct__UPDATE_DATE = null;
								} else {
									this.to_obs_fct__UPDATE_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.to_obs_fct__DOWNLOAD_DATE = null;
								} else {
									this.to_obs_fct__DOWNLOAD_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.to_obs_fct__IMPORT_DATE = null;
								} else {
									this.to_obs_fct__IMPORT_DATE = new Date(
											dis.readLong());
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_obs_fct__SOURCESYSTEM_CD = null;
								} else {
									if (length > row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_obs_fct__SOURCESYSTEM_CD = new String(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_obs_fct__UPLOAD_ID = null;
								} else {
									if (length > row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_obs_fct__UPLOAD_ID = new String(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_obs_fct__STARTDATE_SOURCE_PATH = null;
								} else {
									if (length > row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_obs_fct__STARTDATE_SOURCE_PATH = new String(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.to_obs_fct__ENDDATE_SOURCE_PATH = null;
								} else {
									if (length > row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.to_obs_fct__ENDDATE_SOURCE_PATH = new String(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row15__CONCEPT_PATH = null;
								} else {
									if (length > row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row15__CONCEPT_PATH = new String(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row15__CONCEPT_CD = null;
								} else {
									if (length > row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row15__CONCEPT_CD = new String(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row15__NAME_CHAR = null;
								} else {
									if (length > row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row15__NAME_CHAR = new String(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row15__CONCEPT_BLOB = null;
								} else {
									if (length > row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row15__CONCEPT_BLOB = new String(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.row15__UPDATE_DATE = null;
								} else {
									this.row15__UPDATE_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.row15__DOWNLOAD_DATE = null;
								} else {
									this.row15__DOWNLOAD_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.row15__IMPORT_DATE = null;
								} else {
									this.row15__IMPORT_DATE = new Date(
											dis.readLong());
								}

								length = dis.readInt();
								if (length == -1) {
									this.row15__SOURCESYSTEM_CD = null;
								} else {
									if (length > row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row15__SOURCESYSTEM_CD = new String(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row15__UPLOAD_ID = null;
								} else {
									if (length > row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row15__UPLOAD_ID = new String(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								this.exprKey_row14__PATIENT_NUM = (BigDecimal) dis
										.readObject();

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row14__CONCEPT_CD = null;
								} else {
									if (length > row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.exprKey_row14__CONCEPT_CD = new String(
											row15Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

							} catch (IOException e) {
								throw new RuntimeException(e);

							} catch (ClassNotFoundException eCNFE) {
								throw new RuntimeException(eCNFE);

							}

						}
					}

					public void writeData(ObjectOutputStream dos) {
						try {

							dos.writeBoolean(this.is__rejectedInnerJoin);

							dos.writeObject(this.to_obs_fct__ENCOUNTER_NUM);

							dos.writeObject(this.to_obs_fct__PATIENT_NUM);

							if (this.to_obs_fct__CONCEPT_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_obs_fct__CONCEPT_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_obs_fct__PROVIDER_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_obs_fct__PROVIDER_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_obs_fct__START_DATE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_obs_fct__START_DATE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_obs_fct__MODIFIER_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_obs_fct__MODIFIER_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_obs_fct__INSTANCE_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_obs_fct__INSTANCE_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_obs_fct__VALTYPE_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_obs_fct__VALTYPE_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_obs_fct__TVAL_CHAR == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_obs_fct__TVAL_CHAR
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_obs_fct__NVAL_NUM == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeFloat(this.to_obs_fct__NVAL_NUM);
							}

							if (this.to_obs_fct__VALUEFLAG_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_obs_fct__VALUEFLAG_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_obs_fct__QUANTITY_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_obs_fct__QUANTITY_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_obs_fct__UNITS_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_obs_fct__UNITS_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_obs_fct__END_DATE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_obs_fct__END_DATE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_obs_fct__LOCATION_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_obs_fct__LOCATION_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_obs_fct__OBSERVATION_BLOB == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_obs_fct__OBSERVATION_BLOB
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_obs_fct__CONFIDENCE_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_obs_fct__CONFIDENCE_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_obs_fct__UPDATE_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.to_obs_fct__UPDATE_DATE
										.getTime());
							}

							if (this.to_obs_fct__DOWNLOAD_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.to_obs_fct__DOWNLOAD_DATE
										.getTime());
							}

							if (this.to_obs_fct__IMPORT_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.to_obs_fct__IMPORT_DATE
										.getTime());
							}

							if (this.to_obs_fct__SOURCESYSTEM_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_obs_fct__SOURCESYSTEM_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_obs_fct__UPLOAD_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_obs_fct__UPLOAD_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_obs_fct__STARTDATE_SOURCE_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_obs_fct__STARTDATE_SOURCE_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.to_obs_fct__ENDDATE_SOURCE_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.to_obs_fct__ENDDATE_SOURCE_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row15__CONCEPT_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row15__CONCEPT_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row15__CONCEPT_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row15__CONCEPT_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row15__NAME_CHAR == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row15__NAME_CHAR
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row15__CONCEPT_BLOB == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row15__CONCEPT_BLOB
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row15__UPDATE_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row15__UPDATE_DATE.getTime());
							}

							if (this.row15__DOWNLOAD_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row15__DOWNLOAD_DATE
										.getTime());
							}

							if (this.row15__IMPORT_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row15__IMPORT_DATE.getTime());
							}

							if (this.row15__SOURCESYSTEM_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row15__SOURCESYSTEM_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row15__UPLOAD_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row15__UPLOAD_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							dos.writeObject(this.exprKey_row14__PATIENT_NUM);

							if (this.exprKey_row14__CONCEPT_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row14__CONCEPT_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

				} // G_TM_B_001

				org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_9_2> fsi_tMap_9_2 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_9_2>(
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid + "_tMap_9_2",
						200000) {
					public SortableRow_tMap_9_2 createRowInstance() {
						return new SortableRow_tMap_9_2();
					}
				};

				fsi_tMap_9_2.initPut();

				/**
				 * [tMap_9_TMAP_OUT begin ] stop
				 */

				/**
				 * [tMap_4_TMAP_IN begin ] start
				 */

				ok_Hash.put("tMap_4_TMAP_IN", false);
				start_Hash.put("tMap_4_TMAP_IN", System.currentTimeMillis());
				currentComponent = "tMap_4_TMAP_IN";

				int tos_count_tMap_4_TMAP_IN = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_4_TMAP_IN__Struct {
				}
				Var__tMap_4_TMAP_IN__Struct Var__tMap_4_TMAP_IN = new Var__tMap_4_TMAP_IN__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				to_obs_fctStruct to_obs_fct_tmp = new to_obs_fctStruct();
				// ###############################

				/**
				 * [tMap_4_TMAP_IN begin ] stop
				 */
				/**
				 * [tMap_4_TMAP_IN main ] start
				 */

				currentComponent = "tMap_4_TMAP_IN";

				boolean hasCasePrimitiveKeyWithNull_tMap_4_TMAP_IN = false;

				fsi_tMap_4_1.endPut();

				if (to_tmap == null) {
					to_tmap = new to_tmapStruct();
				}

				// ###############################
				// # Input tables (lookups)
				boolean rejectedInnerJoin_tMap_4_TMAP_IN = false;
				boolean mainRowRejected_tMap_4_TMAP_IN = false;

				// /////////////////////////////////////////////
				// Starting Lookup Table "from_srxc_obsfct"
				// /////////////////////////////////////////////

				SortableRow_tMap_4_1 rsc_tMap_4_1;

				tHash_Lookup_from_srxc_obsfct.initGet();

				fsi_tMap_4_1.initGet();

				// TEST firstLookupIsPersistentSorted=true
				// isFirstPersistentSortedTable=true

				rejectedInnerJoin_tMap_4_TMAP_IN = false;

				while (fsi_tMap_4_1.hasNext()) { // G_TM_M_250 loop "1"

					// CALL close loop of lookup '1'

					rsc_tMap_4_1 = (SortableRow_tMap_4_1) fsi_tMap_4_1.next();
					rsc_tMap_4_1.copyDataTo(to_tmap);

					rejectedInnerJoin_tMap_4_TMAP_IN = rsc_tMap_4_1.is__rejectedInnerJoin;

					boolean forceLoopfrom_srxc_obsfct = false;

					from_srxc_obsfctStruct from_srxc_obsfctObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_4_TMAP_IN) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_4_TMAP_IN = false;

						from_srxc_obsfctHashKey.CONCEPT_CD = rsc_tMap_4_1.exprKey_from_srxc_obsfct__CONCEPT_CD;

						tHash_Lookup_from_srxc_obsfct
								.lookup(from_srxc_obsfctHashKey);

						if (!tHash_Lookup_from_srxc_obsfct.hasNext()) { // G_TM_M_090

							forceLoopfrom_srxc_obsfct = true;

						} // G_TM_M_090

					} // G_TM_M_020

					else { // G 20 - G 21
						forceLoopfrom_srxc_obsfct = true;
					} // G 21

					from_srxc_obsfctStruct from_srxc_obsfct = null;

					while ((tHash_Lookup_from_srxc_obsfct != null && tHash_Lookup_from_srxc_obsfct
							.hasNext()) || forceLoopfrom_srxc_obsfct) { // G_TM_M_043

						// CALL close loop of lookup 'from_srxc_obsfct'

						from_srxc_obsfctStruct fromLookup_from_srxc_obsfct = null;
						from_srxc_obsfct = from_srxc_obsfctDefault;

						if (!forceLoopfrom_srxc_obsfct) { // G 46

							fromLookup_from_srxc_obsfct = tHash_Lookup_from_srxc_obsfct
									.next();

							if (fromLookup_from_srxc_obsfct != null) {
								from_srxc_obsfct = fromLookup_from_srxc_obsfct;
							}

						} // G 46

						forceLoopfrom_srxc_obsfct = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_4_TMAP_IN__Struct Var = Var__tMap_4_TMAP_IN;// ###############################
							// ###############################
							// # Output tables

							to_obs_fct = null;

							// # Output table : 'to_obs_fct'
							// # Filter conditions
							if (

							from_srxc_obsfct.MODIFIER_CD.equals("@")

							) {
								to_obs_fct_tmp.ENCOUNTER_NUM = from_srxc_obsfct.ENCOUNTER_NUM;
								to_obs_fct_tmp.PATIENT_NUM = from_srxc_obsfct.PATIENT_NUM;
								to_obs_fct_tmp.CONCEPT_CD = to_tmap.BASECODE;
								to_obs_fct_tmp.PROVIDER_ID = from_srxc_obsfct.PROVIDER_ID;
								to_obs_fct_tmp.START_DATE = from_srxc_obsfct.START_DATE;
								to_obs_fct_tmp.MODIFIER_CD = from_srxc_obsfct.MODIFIER_CD;
								to_obs_fct_tmp.INSTANCE_NUM = from_srxc_obsfct.INSTANCE_NUM;
								to_obs_fct_tmp.VALTYPE_CD = from_srxc_obsfct.VALTYPE_CD;
								to_obs_fct_tmp.TVAL_CHAR = from_srxc_obsfct.TVAL_CHAR;
								to_obs_fct_tmp.NVAL_NUM = from_srxc_obsfct.NVAL_NUM;
								to_obs_fct_tmp.VALUEFLAG_CD = from_srxc_obsfct.VALUEFLAG_CD;
								to_obs_fct_tmp.QUANTITY_NUM = from_srxc_obsfct.QUANTITY_NUM;
								to_obs_fct_tmp.UNITS_CD = from_srxc_obsfct.UNITS_CD;
								to_obs_fct_tmp.END_DATE = from_srxc_obsfct.END_DATE;
								to_obs_fct_tmp.LOCATION_CD = from_srxc_obsfct.LOCATION_CD;
								to_obs_fct_tmp.OBSERVATION_BLOB = from_srxc_obsfct.OBSERVATION_BLOB;
								to_obs_fct_tmp.CONFIDENCE_NUM = from_srxc_obsfct.CONFIDENCE_NUM;
								to_obs_fct_tmp.UPDATE_DATE = from_srxc_obsfct.UPDATE_DATE;
								to_obs_fct_tmp.DOWNLOAD_DATE = from_srxc_obsfct.DOWNLOAD_DATE;
								to_obs_fct_tmp.IMPORT_DATE = from_srxc_obsfct.IMPORT_DATE;
								to_obs_fct_tmp.SOURCESYSTEM_CD = from_srxc_obsfct.SOURCESYSTEM_CD;
								to_obs_fct_tmp.UPLOAD_ID = from_srxc_obsfct.UPLOAD_ID;
								to_obs_fct_tmp.STARTDATE_SOURCE_PATH = to_tmap.STARTDATE_SOURCE_PATH;
								to_obs_fct_tmp.ENDDATE_SOURCE_PATH = to_tmap.ENDDATE_SOURCE_PATH;
								to_obs_fct = to_obs_fct_tmp;
							} // closing filter/reject
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_4_TMAP_IN = false;

						tos_count_tMap_4_TMAP_IN++;

						/**
						 * [tMap_4_TMAP_IN main ] stop
						 */
						// Start of branch "to_obs_fct"
						if (to_obs_fct != null) {

							/**
							 * [tMap_9_TMAP_OUT main ] start
							 */

							currentComponent = "tMap_9_TMAP_OUT";

							boolean hasCasePrimitiveKeyWithNull_tMap_9_TMAP_OUT = false;

							hasCasePrimitiveKeyWithNull_tMap_9_TMAP_OUT = false;

							String exprKey_row15__CONCEPT_PATH = to_obs_fct.STARTDATE_SOURCE_PATH;

							SortableRow_tMap_9_1 sortableRow_tMap_9_1 = fsi_tMap_9_1
									.getNextFreeRow();

							sortableRow_tMap_9_1.fillFrom(to_obs_fct,
									exprKey_row15__CONCEPT_PATH);

							fsi_tMap_9_1.put(sortableRow_tMap_9_1);

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_9_TMAP_OUT = false;
							boolean mainRowRejected_tMap_9_TMAP_OUT = false;

							// ###############################

							tos_count_tMap_9_TMAP_OUT++;

							/**
							 * [tMap_9_TMAP_OUT main ] stop
							 */

						} // End of branch "to_obs_fct"

					} // close loop of lookup 'from_srxc_obsfct' // G_TM_M_043

				} // G_TM_M_250 close loop read file data '1'

				/**
				 * [tMap_4_TMAP_IN end ] start
				 */

				currentComponent = "tMap_4_TMAP_IN";

				// ###############################
				// # Lookup hashes releasing
				fsi_tMap_4_1.endGet();

				if (tHash_Lookup_from_srxc_obsfct != null) {
					tHash_Lookup_from_srxc_obsfct.endGet();
				}
				globalMap.remove("tHash_Lookup_from_srxc_obsfct");

				// ###############################

				ok_Hash.put("tMap_4_TMAP_IN", true);
				end_Hash.put("tMap_4_TMAP_IN", System.currentTimeMillis());

				/**
				 * [tMap_4_TMAP_IN end ] stop
				 */

				/**
				 * [tMap_9_TMAP_OUT end ] start
				 */

				currentComponent = "tMap_9_TMAP_OUT";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_9_TMAP_OUT", true);
				end_Hash.put("tMap_9_TMAP_OUT", System.currentTimeMillis());

				/**
				 * [tMap_9_TMAP_OUT end ] stop
				 */

				/**
				 * [tMap_8_TMAP_OUT begin ] start
				 */

				ok_Hash.put("tMap_8_TMAP_OUT", false);
				start_Hash.put("tMap_8_TMAP_OUT", System.currentTimeMillis());
				currentComponent = "tMap_8_TMAP_OUT";

				int tos_count_tMap_8_TMAP_OUT = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row16Struct> tHash_Lookup_row16 = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row16Struct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row16Struct>) globalMap
						.get("tHash_Lookup_row16"));

				row16Struct row16HashKey = new row16Struct();
				row16Struct row16Default = new row16Struct();

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row17Struct> tHash_Lookup_row17 = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row17Struct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row17Struct>) globalMap
						.get("tHash_Lookup_row17"));

				row17Struct row17HashKey = new row17Struct();
				row17Struct row17Default = new row17Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_8_TMAP_OUT__Struct {
				}
				Var__tMap_8_TMAP_OUT__Struct Var__tMap_8_TMAP_OUT = new Var__tMap_8_TMAP_OUT__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				// ###############################

				class SortableRow_tMap_8_1 implements
						Comparable<SortableRow_tMap_8_1>,
						routines.system.IPersistableRow<SortableRow_tMap_8_1> { // G_TM_B_001

					boolean is__rejectedInnerJoin;

					String exprKey_row16__CONCEPT_PATH;

					// out1
					BigDecimal out1__ENCOUNTER_NUM;
					BigDecimal out1__PATIENT_NUM;
					String out1__CONCEPT_CD;
					String out1__PROVIDER_ID;
					String out1__START_DATE;
					String out1__MODIFIER_CD;
					String out1__INSTANCE_NUM;
					String out1__VALTYPE_CD;
					String out1__TVAL_CHAR;
					Float out1__NVAL_NUM;
					String out1__VALUEFLAG_CD;
					String out1__QUANTITY_NUM;
					String out1__UNITS_CD;
					String out1__END_DATE;
					String out1__LOCATION_CD;
					String out1__OBSERVATION_BLOB;
					String out1__CONFIDENCE_NUM;
					java.util.Date out1__UPDATE_DATE;
					java.util.Date out1__DOWNLOAD_DATE;
					java.util.Date out1__IMPORT_DATE;
					String out1__SOURCESYSTEM_CD;
					String out1__UPLOAD_ID;
					String out1__ENDDATE_SOURCE_PATH;

					public void fillFrom(out1Struct out1,
							String exprKey_row16__CONCEPT_PATH) {

						this.out1__ENCOUNTER_NUM = out1.ENCOUNTER_NUM;
						this.out1__PATIENT_NUM = out1.PATIENT_NUM;
						this.out1__CONCEPT_CD = out1.CONCEPT_CD;
						this.out1__PROVIDER_ID = out1.PROVIDER_ID;
						this.out1__START_DATE = out1.START_DATE;
						this.out1__MODIFIER_CD = out1.MODIFIER_CD;
						this.out1__INSTANCE_NUM = out1.INSTANCE_NUM;
						this.out1__VALTYPE_CD = out1.VALTYPE_CD;
						this.out1__TVAL_CHAR = out1.TVAL_CHAR;
						this.out1__NVAL_NUM = out1.NVAL_NUM;
						this.out1__VALUEFLAG_CD = out1.VALUEFLAG_CD;
						this.out1__QUANTITY_NUM = out1.QUANTITY_NUM;
						this.out1__UNITS_CD = out1.UNITS_CD;
						this.out1__END_DATE = out1.END_DATE;
						this.out1__LOCATION_CD = out1.LOCATION_CD;
						this.out1__OBSERVATION_BLOB = out1.OBSERVATION_BLOB;
						this.out1__CONFIDENCE_NUM = out1.CONFIDENCE_NUM;
						this.out1__UPDATE_DATE = out1.UPDATE_DATE;
						this.out1__DOWNLOAD_DATE = out1.DOWNLOAD_DATE;
						this.out1__IMPORT_DATE = out1.IMPORT_DATE;
						this.out1__SOURCESYSTEM_CD = out1.SOURCESYSTEM_CD;
						this.out1__UPLOAD_ID = out1.UPLOAD_ID;
						this.out1__ENDDATE_SOURCE_PATH = out1.ENDDATE_SOURCE_PATH;
						this.exprKey_row16__CONCEPT_PATH = exprKey_row16__CONCEPT_PATH;

					}

					public void copyDataTo(out1Struct out1) {

						out1.ENCOUNTER_NUM = this.out1__ENCOUNTER_NUM;
						out1.PATIENT_NUM = this.out1__PATIENT_NUM;
						out1.CONCEPT_CD = this.out1__CONCEPT_CD;
						out1.PROVIDER_ID = this.out1__PROVIDER_ID;
						out1.START_DATE = this.out1__START_DATE;
						out1.MODIFIER_CD = this.out1__MODIFIER_CD;
						out1.INSTANCE_NUM = this.out1__INSTANCE_NUM;
						out1.VALTYPE_CD = this.out1__VALTYPE_CD;
						out1.TVAL_CHAR = this.out1__TVAL_CHAR;
						out1.NVAL_NUM = this.out1__NVAL_NUM;
						out1.VALUEFLAG_CD = this.out1__VALUEFLAG_CD;
						out1.QUANTITY_NUM = this.out1__QUANTITY_NUM;
						out1.UNITS_CD = this.out1__UNITS_CD;
						out1.END_DATE = this.out1__END_DATE;
						out1.LOCATION_CD = this.out1__LOCATION_CD;
						out1.OBSERVATION_BLOB = this.out1__OBSERVATION_BLOB;
						out1.CONFIDENCE_NUM = this.out1__CONFIDENCE_NUM;
						out1.UPDATE_DATE = this.out1__UPDATE_DATE;
						out1.DOWNLOAD_DATE = this.out1__DOWNLOAD_DATE;
						out1.IMPORT_DATE = this.out1__IMPORT_DATE;
						out1.SOURCESYSTEM_CD = this.out1__SOURCESYSTEM_CD;
						out1.UPLOAD_ID = this.out1__UPLOAD_ID;
						out1.ENDDATE_SOURCE_PATH = this.out1__ENDDATE_SOURCE_PATH;

					}

					public String toString() {

						StringBuilder sb = new StringBuilder();
						sb.append(super.toString());
						sb.append("[");

						sb.append("out1__ENCOUNTER_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.out1__ENCOUNTER_NUM));

						sb.append(", ");

						sb.append("out1__PATIENT_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.out1__PATIENT_NUM));

						sb.append(", ");

						sb.append("out1__CONCEPT_CD");
						sb.append("=");
						sb.append(String.valueOf(this.out1__CONCEPT_CD));

						sb.append(", ");

						sb.append("out1__PROVIDER_ID");
						sb.append("=");
						sb.append(String.valueOf(this.out1__PROVIDER_ID));

						sb.append(", ");

						sb.append("out1__START_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.out1__START_DATE));

						sb.append(", ");

						sb.append("out1__MODIFIER_CD");
						sb.append("=");
						sb.append(String.valueOf(this.out1__MODIFIER_CD));

						sb.append(", ");

						sb.append("out1__INSTANCE_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.out1__INSTANCE_NUM));

						sb.append(", ");

						sb.append("out1__VALTYPE_CD");
						sb.append("=");
						sb.append(String.valueOf(this.out1__VALTYPE_CD));

						sb.append(", ");

						sb.append("out1__TVAL_CHAR");
						sb.append("=");
						sb.append(String.valueOf(this.out1__TVAL_CHAR));

						sb.append(", ");

						sb.append("out1__NVAL_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.out1__NVAL_NUM));

						sb.append(", ");

						sb.append("out1__VALUEFLAG_CD");
						sb.append("=");
						sb.append(String.valueOf(this.out1__VALUEFLAG_CD));

						sb.append(", ");

						sb.append("out1__QUANTITY_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.out1__QUANTITY_NUM));

						sb.append(", ");

						sb.append("out1__UNITS_CD");
						sb.append("=");
						sb.append(String.valueOf(this.out1__UNITS_CD));

						sb.append(", ");

						sb.append("out1__END_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.out1__END_DATE));

						sb.append(", ");

						sb.append("out1__LOCATION_CD");
						sb.append("=");
						sb.append(String.valueOf(this.out1__LOCATION_CD));

						sb.append(", ");

						sb.append("out1__OBSERVATION_BLOB");
						sb.append("=");
						sb.append(String.valueOf(this.out1__OBSERVATION_BLOB));

						sb.append(", ");

						sb.append("out1__CONFIDENCE_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.out1__CONFIDENCE_NUM));

						sb.append(", ");

						sb.append("out1__UPDATE_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.out1__UPDATE_DATE));

						sb.append(", ");

						sb.append("out1__DOWNLOAD_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.out1__DOWNLOAD_DATE));

						sb.append(", ");

						sb.append("out1__IMPORT_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.out1__IMPORT_DATE));

						sb.append(", ");

						sb.append("out1__SOURCESYSTEM_CD");
						sb.append("=");
						sb.append(String.valueOf(this.out1__SOURCESYSTEM_CD));

						sb.append(", ");

						sb.append("out1__UPLOAD_ID");
						sb.append("=");
						sb.append(String.valueOf(this.out1__UPLOAD_ID));

						sb.append(", ");

						sb.append("out1__ENDDATE_SOURCE_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.out1__ENDDATE_SOURCE_PATH));

						sb.append("]");

						return sb.toString();
					}

					public int compareTo(SortableRow_tMap_8_1 other) {

						int returnValue = 0;

						returnValue = checkNullsAndCompare(
								this.exprKey_row16__CONCEPT_PATH,
								other.exprKey_row16__CONCEPT_PATH);
						if (returnValue != 0) {
							return returnValue;
						}

						return returnValue;
					}

					private int checkNullsAndCompare(Object object1,
							Object object2) {
						int returnValue = 0;
						if (object1 instanceof Comparable
								&& object2 instanceof Comparable) {
							returnValue = ((Comparable) object1)
									.compareTo(object2);
						} else if (object1 != null && object2 != null) {
							returnValue = compareStrings(object1.toString(),
									object2.toString());
						} else if (object1 == null && object2 != null) {
							returnValue = 1;
						} else if (object1 != null && object2 == null) {
							returnValue = -1;
						} else {
							returnValue = 0;
						}

						return returnValue;
					}

					private int compareStrings(String string1, String string2) {
						return string1.compareTo(string2);
					}

					public void readData(ObjectInputStream dis) {

						synchronized (out1Struct.commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

							try {

								int length = 0;

								this.is__rejectedInnerJoin = dis.readBoolean();

								this.out1__ENCOUNTER_NUM = (BigDecimal) dis
										.readObject();

								this.out1__PATIENT_NUM = (BigDecimal) dis
										.readObject();

								length = dis.readInt();
								if (length == -1) {
									this.out1__CONCEPT_CD = null;
								} else {
									if (length > out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__CONCEPT_CD = new String(
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__PROVIDER_ID = null;
								} else {
									if (length > out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__PROVIDER_ID = new String(
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__START_DATE = null;
								} else {
									if (length > out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__START_DATE = new String(
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__MODIFIER_CD = null;
								} else {
									if (length > out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__MODIFIER_CD = new String(
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__INSTANCE_NUM = null;
								} else {
									if (length > out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__INSTANCE_NUM = new String(
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__VALTYPE_CD = null;
								} else {
									if (length > out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__VALTYPE_CD = new String(
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__TVAL_CHAR = null;
								} else {
									if (length > out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__TVAL_CHAR = new String(
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.out1__NVAL_NUM = null;
								} else {
									this.out1__NVAL_NUM = dis.readFloat();
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__VALUEFLAG_CD = null;
								} else {
									if (length > out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__VALUEFLAG_CD = new String(
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__QUANTITY_NUM = null;
								} else {
									if (length > out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__QUANTITY_NUM = new String(
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__UNITS_CD = null;
								} else {
									if (length > out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__UNITS_CD = new String(
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__END_DATE = null;
								} else {
									if (length > out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__END_DATE = new String(
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__LOCATION_CD = null;
								} else {
									if (length > out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__LOCATION_CD = new String(
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__OBSERVATION_BLOB = null;
								} else {
									if (length > out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__OBSERVATION_BLOB = new String(
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__CONFIDENCE_NUM = null;
								} else {
									if (length > out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__CONFIDENCE_NUM = new String(
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.out1__UPDATE_DATE = null;
								} else {
									this.out1__UPDATE_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.out1__DOWNLOAD_DATE = null;
								} else {
									this.out1__DOWNLOAD_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.out1__IMPORT_DATE = null;
								} else {
									this.out1__IMPORT_DATE = new Date(
											dis.readLong());
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__SOURCESYSTEM_CD = null;
								} else {
									if (length > out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__SOURCESYSTEM_CD = new String(
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__UPLOAD_ID = null;
								} else {
									if (length > out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__UPLOAD_ID = new String(
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__ENDDATE_SOURCE_PATH = null;
								} else {
									if (length > out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__ENDDATE_SOURCE_PATH = new String(
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row16__CONCEPT_PATH = null;
								} else {
									if (length > out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.exprKey_row16__CONCEPT_PATH = new String(
											out1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

							} catch (IOException e) {
								throw new RuntimeException(e);

							} catch (ClassNotFoundException eCNFE) {
								throw new RuntimeException(eCNFE);

							}

						}
					}

					public void writeData(ObjectOutputStream dos) {
						try {

							dos.writeBoolean(this.is__rejectedInnerJoin);

							dos.writeObject(this.out1__ENCOUNTER_NUM);

							dos.writeObject(this.out1__PATIENT_NUM);

							if (this.out1__CONCEPT_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__CONCEPT_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__PROVIDER_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__PROVIDER_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__START_DATE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__START_DATE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__MODIFIER_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__MODIFIER_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__INSTANCE_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__INSTANCE_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__VALTYPE_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__VALTYPE_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__TVAL_CHAR == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__TVAL_CHAR
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__NVAL_NUM == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeFloat(this.out1__NVAL_NUM);
							}

							if (this.out1__VALUEFLAG_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__VALUEFLAG_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__QUANTITY_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__QUANTITY_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__UNITS_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__UNITS_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__END_DATE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__END_DATE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__LOCATION_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__LOCATION_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__OBSERVATION_BLOB == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__OBSERVATION_BLOB
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__CONFIDENCE_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__CONFIDENCE_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__UPDATE_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.out1__UPDATE_DATE.getTime());
							}

							if (this.out1__DOWNLOAD_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.out1__DOWNLOAD_DATE
										.getTime());
							}

							if (this.out1__IMPORT_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.out1__IMPORT_DATE.getTime());
							}

							if (this.out1__SOURCESYSTEM_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__SOURCESYSTEM_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__UPLOAD_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__UPLOAD_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__ENDDATE_SOURCE_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__ENDDATE_SOURCE_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.exprKey_row16__CONCEPT_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row16__CONCEPT_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

				} // G_TM_B_001

				org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_8_1> fsi_tMap_8_1 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_8_1>(
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid + "_tMap_8_1",
						200000) {
					public SortableRow_tMap_8_1 createRowInstance() {
						return new SortableRow_tMap_8_1();
					}
				};

				fsi_tMap_8_1.initPut();

				class SortableRow_tMap_8_2 implements
						Comparable<SortableRow_tMap_8_2>,
						routines.system.IPersistableRow<SortableRow_tMap_8_2> { // G_TM_B_001

					boolean is__rejectedInnerJoin;

					BigDecimal exprKey_row17__PATIENT_NUM;
					String exprKey_row17__CONCEPT_CD;

					// row16
					BigDecimal out1__ENCOUNTER_NUM;
					BigDecimal out1__PATIENT_NUM;
					String out1__CONCEPT_CD;
					String out1__PROVIDER_ID;
					String out1__START_DATE;
					String out1__MODIFIER_CD;
					String out1__INSTANCE_NUM;
					String out1__VALTYPE_CD;
					String out1__TVAL_CHAR;
					Float out1__NVAL_NUM;
					String out1__VALUEFLAG_CD;
					String out1__QUANTITY_NUM;
					String out1__UNITS_CD;
					String out1__END_DATE;
					String out1__LOCATION_CD;
					String out1__OBSERVATION_BLOB;
					String out1__CONFIDENCE_NUM;
					java.util.Date out1__UPDATE_DATE;
					java.util.Date out1__DOWNLOAD_DATE;
					java.util.Date out1__IMPORT_DATE;
					String out1__SOURCESYSTEM_CD;
					String out1__UPLOAD_ID;
					String out1__ENDDATE_SOURCE_PATH;
					String row16__CONCEPT_PATH;
					String row16__CONCEPT_CD;
					String row16__NAME_CHAR;
					String row16__CONCEPT_BLOB;
					java.util.Date row16__UPDATE_DATE;
					java.util.Date row16__DOWNLOAD_DATE;
					java.util.Date row16__IMPORT_DATE;
					String row16__SOURCESYSTEM_CD;
					String row16__UPLOAD_ID;

					public void fillFrom(out1Struct out1, row16Struct row16,
							BigDecimal exprKey_row17__PATIENT_NUM,
							String exprKey_row17__CONCEPT_CD) {

						this.out1__ENCOUNTER_NUM = out1.ENCOUNTER_NUM;
						this.out1__PATIENT_NUM = out1.PATIENT_NUM;
						this.out1__CONCEPT_CD = out1.CONCEPT_CD;
						this.out1__PROVIDER_ID = out1.PROVIDER_ID;
						this.out1__START_DATE = out1.START_DATE;
						this.out1__MODIFIER_CD = out1.MODIFIER_CD;
						this.out1__INSTANCE_NUM = out1.INSTANCE_NUM;
						this.out1__VALTYPE_CD = out1.VALTYPE_CD;
						this.out1__TVAL_CHAR = out1.TVAL_CHAR;
						this.out1__NVAL_NUM = out1.NVAL_NUM;
						this.out1__VALUEFLAG_CD = out1.VALUEFLAG_CD;
						this.out1__QUANTITY_NUM = out1.QUANTITY_NUM;
						this.out1__UNITS_CD = out1.UNITS_CD;
						this.out1__END_DATE = out1.END_DATE;
						this.out1__LOCATION_CD = out1.LOCATION_CD;
						this.out1__OBSERVATION_BLOB = out1.OBSERVATION_BLOB;
						this.out1__CONFIDENCE_NUM = out1.CONFIDENCE_NUM;
						this.out1__UPDATE_DATE = out1.UPDATE_DATE;
						this.out1__DOWNLOAD_DATE = out1.DOWNLOAD_DATE;
						this.out1__IMPORT_DATE = out1.IMPORT_DATE;
						this.out1__SOURCESYSTEM_CD = out1.SOURCESYSTEM_CD;
						this.out1__UPLOAD_ID = out1.UPLOAD_ID;
						this.out1__ENDDATE_SOURCE_PATH = out1.ENDDATE_SOURCE_PATH;
						this.row16__CONCEPT_PATH = row16.CONCEPT_PATH;
						this.row16__CONCEPT_CD = row16.CONCEPT_CD;
						this.row16__NAME_CHAR = row16.NAME_CHAR;
						this.row16__CONCEPT_BLOB = row16.CONCEPT_BLOB;
						this.row16__UPDATE_DATE = row16.UPDATE_DATE;
						this.row16__DOWNLOAD_DATE = row16.DOWNLOAD_DATE;
						this.row16__IMPORT_DATE = row16.IMPORT_DATE;
						this.row16__SOURCESYSTEM_CD = row16.SOURCESYSTEM_CD;
						this.row16__UPLOAD_ID = row16.UPLOAD_ID;
						this.exprKey_row17__PATIENT_NUM = exprKey_row17__PATIENT_NUM;
						this.exprKey_row17__CONCEPT_CD = exprKey_row17__CONCEPT_CD;

					}

					public void copyDataTo(out1Struct out1, row16Struct row16) {

						out1.ENCOUNTER_NUM = this.out1__ENCOUNTER_NUM;
						out1.PATIENT_NUM = this.out1__PATIENT_NUM;
						out1.CONCEPT_CD = this.out1__CONCEPT_CD;
						out1.PROVIDER_ID = this.out1__PROVIDER_ID;
						out1.START_DATE = this.out1__START_DATE;
						out1.MODIFIER_CD = this.out1__MODIFIER_CD;
						out1.INSTANCE_NUM = this.out1__INSTANCE_NUM;
						out1.VALTYPE_CD = this.out1__VALTYPE_CD;
						out1.TVAL_CHAR = this.out1__TVAL_CHAR;
						out1.NVAL_NUM = this.out1__NVAL_NUM;
						out1.VALUEFLAG_CD = this.out1__VALUEFLAG_CD;
						out1.QUANTITY_NUM = this.out1__QUANTITY_NUM;
						out1.UNITS_CD = this.out1__UNITS_CD;
						out1.END_DATE = this.out1__END_DATE;
						out1.LOCATION_CD = this.out1__LOCATION_CD;
						out1.OBSERVATION_BLOB = this.out1__OBSERVATION_BLOB;
						out1.CONFIDENCE_NUM = this.out1__CONFIDENCE_NUM;
						out1.UPDATE_DATE = this.out1__UPDATE_DATE;
						out1.DOWNLOAD_DATE = this.out1__DOWNLOAD_DATE;
						out1.IMPORT_DATE = this.out1__IMPORT_DATE;
						out1.SOURCESYSTEM_CD = this.out1__SOURCESYSTEM_CD;
						out1.UPLOAD_ID = this.out1__UPLOAD_ID;
						out1.ENDDATE_SOURCE_PATH = this.out1__ENDDATE_SOURCE_PATH;
						row16.CONCEPT_PATH = this.row16__CONCEPT_PATH;
						row16.CONCEPT_CD = this.row16__CONCEPT_CD;
						row16.NAME_CHAR = this.row16__NAME_CHAR;
						row16.CONCEPT_BLOB = this.row16__CONCEPT_BLOB;
						row16.UPDATE_DATE = this.row16__UPDATE_DATE;
						row16.DOWNLOAD_DATE = this.row16__DOWNLOAD_DATE;
						row16.IMPORT_DATE = this.row16__IMPORT_DATE;
						row16.SOURCESYSTEM_CD = this.row16__SOURCESYSTEM_CD;
						row16.UPLOAD_ID = this.row16__UPLOAD_ID;

					}

					public String toString() {

						StringBuilder sb = new StringBuilder();
						sb.append(super.toString());
						sb.append("[");

						sb.append("out1__ENCOUNTER_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.out1__ENCOUNTER_NUM));

						sb.append(", ");

						sb.append("out1__PATIENT_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.out1__PATIENT_NUM));

						sb.append(", ");

						sb.append("out1__CONCEPT_CD");
						sb.append("=");
						sb.append(String.valueOf(this.out1__CONCEPT_CD));

						sb.append(", ");

						sb.append("out1__PROVIDER_ID");
						sb.append("=");
						sb.append(String.valueOf(this.out1__PROVIDER_ID));

						sb.append(", ");

						sb.append("out1__START_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.out1__START_DATE));

						sb.append(", ");

						sb.append("out1__MODIFIER_CD");
						sb.append("=");
						sb.append(String.valueOf(this.out1__MODIFIER_CD));

						sb.append(", ");

						sb.append("out1__INSTANCE_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.out1__INSTANCE_NUM));

						sb.append(", ");

						sb.append("out1__VALTYPE_CD");
						sb.append("=");
						sb.append(String.valueOf(this.out1__VALTYPE_CD));

						sb.append(", ");

						sb.append("out1__TVAL_CHAR");
						sb.append("=");
						sb.append(String.valueOf(this.out1__TVAL_CHAR));

						sb.append(", ");

						sb.append("out1__NVAL_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.out1__NVAL_NUM));

						sb.append(", ");

						sb.append("out1__VALUEFLAG_CD");
						sb.append("=");
						sb.append(String.valueOf(this.out1__VALUEFLAG_CD));

						sb.append(", ");

						sb.append("out1__QUANTITY_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.out1__QUANTITY_NUM));

						sb.append(", ");

						sb.append("out1__UNITS_CD");
						sb.append("=");
						sb.append(String.valueOf(this.out1__UNITS_CD));

						sb.append(", ");

						sb.append("out1__END_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.out1__END_DATE));

						sb.append(", ");

						sb.append("out1__LOCATION_CD");
						sb.append("=");
						sb.append(String.valueOf(this.out1__LOCATION_CD));

						sb.append(", ");

						sb.append("out1__OBSERVATION_BLOB");
						sb.append("=");
						sb.append(String.valueOf(this.out1__OBSERVATION_BLOB));

						sb.append(", ");

						sb.append("out1__CONFIDENCE_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.out1__CONFIDENCE_NUM));

						sb.append(", ");

						sb.append("out1__UPDATE_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.out1__UPDATE_DATE));

						sb.append(", ");

						sb.append("out1__DOWNLOAD_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.out1__DOWNLOAD_DATE));

						sb.append(", ");

						sb.append("out1__IMPORT_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.out1__IMPORT_DATE));

						sb.append(", ");

						sb.append("out1__SOURCESYSTEM_CD");
						sb.append("=");
						sb.append(String.valueOf(this.out1__SOURCESYSTEM_CD));

						sb.append(", ");

						sb.append("out1__UPLOAD_ID");
						sb.append("=");
						sb.append(String.valueOf(this.out1__UPLOAD_ID));

						sb.append(", ");

						sb.append("out1__ENDDATE_SOURCE_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.out1__ENDDATE_SOURCE_PATH));

						sb.append(", ");

						sb.append("row16__CONCEPT_PATH");
						sb.append("=");
						sb.append(String.valueOf(this.row16__CONCEPT_PATH));

						sb.append(", ");

						sb.append("row16__CONCEPT_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row16__CONCEPT_CD));

						sb.append(", ");

						sb.append("row16__NAME_CHAR");
						sb.append("=");
						sb.append(String.valueOf(this.row16__NAME_CHAR));

						sb.append(", ");

						sb.append("row16__CONCEPT_BLOB");
						sb.append("=");
						sb.append(String.valueOf(this.row16__CONCEPT_BLOB));

						sb.append(", ");

						sb.append("row16__UPDATE_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row16__UPDATE_DATE));

						sb.append(", ");

						sb.append("row16__DOWNLOAD_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row16__DOWNLOAD_DATE));

						sb.append(", ");

						sb.append("row16__IMPORT_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row16__IMPORT_DATE));

						sb.append(", ");

						sb.append("row16__SOURCESYSTEM_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row16__SOURCESYSTEM_CD));

						sb.append(", ");

						sb.append("row16__UPLOAD_ID");
						sb.append("=");
						sb.append(String.valueOf(this.row16__UPLOAD_ID));

						sb.append("]");

						return sb.toString();
					}

					public int compareTo(SortableRow_tMap_8_2 other) {

						int returnValue = 0;

						returnValue = checkNullsAndCompare(
								this.exprKey_row17__PATIENT_NUM,
								other.exprKey_row17__PATIENT_NUM);
						if (returnValue != 0) {
							return returnValue;
						}

						returnValue = checkNullsAndCompare(
								this.exprKey_row17__CONCEPT_CD,
								other.exprKey_row17__CONCEPT_CD);
						if (returnValue != 0) {
							return returnValue;
						}

						return returnValue;
					}

					private int checkNullsAndCompare(Object object1,
							Object object2) {
						int returnValue = 0;
						if (object1 instanceof Comparable
								&& object2 instanceof Comparable) {
							returnValue = ((Comparable) object1)
									.compareTo(object2);
						} else if (object1 != null && object2 != null) {
							returnValue = compareStrings(object1.toString(),
									object2.toString());
						} else if (object1 == null && object2 != null) {
							returnValue = 1;
						} else if (object1 != null && object2 == null) {
							returnValue = -1;
						} else {
							returnValue = 0;
						}

						return returnValue;
					}

					private int compareStrings(String string1, String string2) {
						return string1.compareTo(string2);
					}

					public void readData(ObjectInputStream dis) {

						synchronized (row16Struct.commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

							try {

								int length = 0;

								this.is__rejectedInnerJoin = dis.readBoolean();

								this.out1__ENCOUNTER_NUM = (BigDecimal) dis
										.readObject();

								this.out1__PATIENT_NUM = (BigDecimal) dis
										.readObject();

								length = dis.readInt();
								if (length == -1) {
									this.out1__CONCEPT_CD = null;
								} else {
									if (length > row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__CONCEPT_CD = new String(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__PROVIDER_ID = null;
								} else {
									if (length > row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__PROVIDER_ID = new String(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__START_DATE = null;
								} else {
									if (length > row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__START_DATE = new String(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__MODIFIER_CD = null;
								} else {
									if (length > row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__MODIFIER_CD = new String(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__INSTANCE_NUM = null;
								} else {
									if (length > row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__INSTANCE_NUM = new String(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__VALTYPE_CD = null;
								} else {
									if (length > row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__VALTYPE_CD = new String(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__TVAL_CHAR = null;
								} else {
									if (length > row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__TVAL_CHAR = new String(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.out1__NVAL_NUM = null;
								} else {
									this.out1__NVAL_NUM = dis.readFloat();
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__VALUEFLAG_CD = null;
								} else {
									if (length > row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__VALUEFLAG_CD = new String(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__QUANTITY_NUM = null;
								} else {
									if (length > row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__QUANTITY_NUM = new String(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__UNITS_CD = null;
								} else {
									if (length > row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__UNITS_CD = new String(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__END_DATE = null;
								} else {
									if (length > row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__END_DATE = new String(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__LOCATION_CD = null;
								} else {
									if (length > row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__LOCATION_CD = new String(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__OBSERVATION_BLOB = null;
								} else {
									if (length > row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__OBSERVATION_BLOB = new String(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__CONFIDENCE_NUM = null;
								} else {
									if (length > row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__CONFIDENCE_NUM = new String(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.out1__UPDATE_DATE = null;
								} else {
									this.out1__UPDATE_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.out1__DOWNLOAD_DATE = null;
								} else {
									this.out1__DOWNLOAD_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.out1__IMPORT_DATE = null;
								} else {
									this.out1__IMPORT_DATE = new Date(
											dis.readLong());
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__SOURCESYSTEM_CD = null;
								} else {
									if (length > row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__SOURCESYSTEM_CD = new String(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__UPLOAD_ID = null;
								} else {
									if (length > row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__UPLOAD_ID = new String(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__ENDDATE_SOURCE_PATH = null;
								} else {
									if (length > row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__ENDDATE_SOURCE_PATH = new String(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row16__CONCEPT_PATH = null;
								} else {
									if (length > row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row16__CONCEPT_PATH = new String(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row16__CONCEPT_CD = null;
								} else {
									if (length > row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row16__CONCEPT_CD = new String(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row16__NAME_CHAR = null;
								} else {
									if (length > row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row16__NAME_CHAR = new String(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row16__CONCEPT_BLOB = null;
								} else {
									if (length > row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row16__CONCEPT_BLOB = new String(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.row16__UPDATE_DATE = null;
								} else {
									this.row16__UPDATE_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.row16__DOWNLOAD_DATE = null;
								} else {
									this.row16__DOWNLOAD_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.row16__IMPORT_DATE = null;
								} else {
									this.row16__IMPORT_DATE = new Date(
											dis.readLong());
								}

								length = dis.readInt();
								if (length == -1) {
									this.row16__SOURCESYSTEM_CD = null;
								} else {
									if (length > row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row16__SOURCESYSTEM_CD = new String(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row16__UPLOAD_ID = null;
								} else {
									if (length > row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row16__UPLOAD_ID = new String(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								this.exprKey_row17__PATIENT_NUM = (BigDecimal) dis
										.readObject();

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row17__CONCEPT_CD = null;
								} else {
									if (length > row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.exprKey_row17__CONCEPT_CD = new String(
											row16Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

							} catch (IOException e) {
								throw new RuntimeException(e);

							} catch (ClassNotFoundException eCNFE) {
								throw new RuntimeException(eCNFE);

							}

						}
					}

					public void writeData(ObjectOutputStream dos) {
						try {

							dos.writeBoolean(this.is__rejectedInnerJoin);

							dos.writeObject(this.out1__ENCOUNTER_NUM);

							dos.writeObject(this.out1__PATIENT_NUM);

							if (this.out1__CONCEPT_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__CONCEPT_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__PROVIDER_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__PROVIDER_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__START_DATE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__START_DATE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__MODIFIER_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__MODIFIER_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__INSTANCE_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__INSTANCE_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__VALTYPE_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__VALTYPE_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__TVAL_CHAR == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__TVAL_CHAR
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__NVAL_NUM == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeFloat(this.out1__NVAL_NUM);
							}

							if (this.out1__VALUEFLAG_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__VALUEFLAG_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__QUANTITY_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__QUANTITY_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__UNITS_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__UNITS_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__END_DATE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__END_DATE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__LOCATION_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__LOCATION_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__OBSERVATION_BLOB == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__OBSERVATION_BLOB
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__CONFIDENCE_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__CONFIDENCE_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__UPDATE_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.out1__UPDATE_DATE.getTime());
							}

							if (this.out1__DOWNLOAD_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.out1__DOWNLOAD_DATE
										.getTime());
							}

							if (this.out1__IMPORT_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.out1__IMPORT_DATE.getTime());
							}

							if (this.out1__SOURCESYSTEM_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__SOURCESYSTEM_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__UPLOAD_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__UPLOAD_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__ENDDATE_SOURCE_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__ENDDATE_SOURCE_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row16__CONCEPT_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row16__CONCEPT_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row16__CONCEPT_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row16__CONCEPT_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row16__NAME_CHAR == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row16__NAME_CHAR
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row16__CONCEPT_BLOB == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row16__CONCEPT_BLOB
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row16__UPDATE_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row16__UPDATE_DATE.getTime());
							}

							if (this.row16__DOWNLOAD_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row16__DOWNLOAD_DATE
										.getTime());
							}

							if (this.row16__IMPORT_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row16__IMPORT_DATE.getTime());
							}

							if (this.row16__SOURCESYSTEM_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row16__SOURCESYSTEM_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row16__UPLOAD_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row16__UPLOAD_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							dos.writeObject(this.exprKey_row17__PATIENT_NUM);

							if (this.exprKey_row17__CONCEPT_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row17__CONCEPT_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

				} // G_TM_B_001

				org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_8_2> fsi_tMap_8_2 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_8_2>(
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid + "_tMap_8_2",
						200000) {
					public SortableRow_tMap_8_2 createRowInstance() {
						return new SortableRow_tMap_8_2();
					}
				};

				fsi_tMap_8_2.initPut();

				/**
				 * [tMap_8_TMAP_OUT begin ] stop
				 */

				/**
				 * [tMap_9_TMAP_IN begin ] start
				 */

				ok_Hash.put("tMap_9_TMAP_IN", false);
				start_Hash.put("tMap_9_TMAP_IN", System.currentTimeMillis());
				currentComponent = "tMap_9_TMAP_IN";

				int tos_count_tMap_9_TMAP_IN = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_9_TMAP_IN__Struct {
				}
				Var__tMap_9_TMAP_IN__Struct Var__tMap_9_TMAP_IN = new Var__tMap_9_TMAP_IN__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
				// ###############################

				List<out1Struct> out1_List = new java.util.ArrayList<out1Struct>();

				/**
				 * [tMap_9_TMAP_IN begin ] stop
				 */
				/**
				 * [tMap_9_TMAP_IN main ] start
				 */

				currentComponent = "tMap_9_TMAP_IN";

				boolean hasCasePrimitiveKeyWithNull_tMap_9_TMAP_IN = false;

				fsi_tMap_9_1.endPut();

				if (to_obs_fct == null) {
					to_obs_fct = new to_obs_fctStruct();
				}

				// ###############################
				// # Input tables (lookups)
				boolean rejectedInnerJoin_tMap_9_TMAP_IN = false;
				boolean mainRowRejected_tMap_9_TMAP_IN = false;

				// /////////////////////////////////////////////
				// Starting Lookup Table "row15"
				// /////////////////////////////////////////////

				SortableRow_tMap_9_1 rsc_tMap_9_1;

				tHash_Lookup_row15.initGet();

				fsi_tMap_9_1.initGet();

				// TEST firstLookupIsPersistentSorted=true
				// isFirstPersistentSortedTable=true

				rejectedInnerJoin_tMap_9_TMAP_IN = false;

				while (fsi_tMap_9_1.hasNext()) { // G_TM_M_250 loop "1"

					rsc_tMap_9_1 = (SortableRow_tMap_9_1) fsi_tMap_9_1.next();
					rsc_tMap_9_1.copyDataTo(to_obs_fct);

					rejectedInnerJoin_tMap_9_TMAP_IN = rsc_tMap_9_1.is__rejectedInnerJoin;

					boolean forceLooprow15 = false;

					row15Struct row15ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_9_TMAP_IN) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_9_TMAP_IN = false;

						row15HashKey.CONCEPT_PATH = rsc_tMap_9_1.exprKey_row15__CONCEPT_PATH;

						tHash_Lookup_row15.lookup(row15HashKey);

						if (!tHash_Lookup_row15.hasNext()) { // G_TM_M_090

							rejectedInnerJoin_tMap_9_TMAP_IN = true;

						} // G_TM_M_090

					} // G_TM_M_020

					row15Struct row15 = null;

					row15Struct fromLookup_row15 = null;
					row15 = row15Default;

					if (tHash_Lookup_row15 != null
							&& tHash_Lookup_row15.hasNext()) { // G 099

						fromLookup_row15 = tHash_Lookup_row15.next();

					} // G 099

					if (fromLookup_row15 != null) {
						row15 = fromLookup_row15;
					}

					BigDecimal exprKey_row14__PATIENT_NUM = null;

					String exprKey_row14__CONCEPT_CD = null;

					if (!rejectedInnerJoin_tMap_9_TMAP_IN) { // G_TM_M_255

						exprKey_row14__PATIENT_NUM = to_obs_fct.PATIENT_NUM;

						exprKey_row14__CONCEPT_CD = row15.CONCEPT_CD;

					} // G_TM_M_255

					SortableRow_tMap_9_2 rsc_tMap_9_2 = new SortableRow_tMap_9_2();

					rsc_tMap_9_2.fillFrom(to_obs_fct, row15,
							exprKey_row14__PATIENT_NUM,
							exprKey_row14__CONCEPT_CD);

					rsc_tMap_9_2.is__rejectedInnerJoin = rejectedInnerJoin_tMap_9_TMAP_IN;

					rejectedInnerJoin_tMap_9_TMAP_IN = false;

					// Sort and store in KeyFile(s) and DataFile(s)
					fsi_tMap_9_2.put(rsc_tMap_9_2);

				} // G_TM_M_250 loop "1"

				fsi_tMap_9_1.endGet();

				fsi_tMap_9_2.endPut();

				// /////////////////////////////////////////////
				// Starting Lookup Table "row14"
				// /////////////////////////////////////////////

				SortableRow_tMap_9_2 rsc_tMap_9_2;

				tHash_Lookup_row14.initGet();

				fsi_tMap_9_2.initGet();

				// row15Struct row15 = new row15Struct();

				row15Struct row15 = new row15Struct();

				// TEST firstLookupIsPersistentSorted=true
				// isFirstPersistentSortedTable=false

				rejectedInnerJoin_tMap_9_TMAP_IN = false;

				while (fsi_tMap_9_2.hasNext()) { // G_TM_M_250 loop "2"

					// CALL close loop of lookup '2'

					rsc_tMap_9_2 = (SortableRow_tMap_9_2) fsi_tMap_9_2.next();
					rsc_tMap_9_2.copyDataTo(to_obs_fct, row15);

					rejectedInnerJoin_tMap_9_TMAP_IN = rsc_tMap_9_2.is__rejectedInnerJoin;

					boolean forceLooprow14 = false;

					row14Struct row14ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_9_TMAP_IN) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_9_TMAP_IN = false;

						row14HashKey.PATIENT_NUM = rsc_tMap_9_2.exprKey_row14__PATIENT_NUM;

						row14HashKey.CONCEPT_CD = rsc_tMap_9_2.exprKey_row14__CONCEPT_CD;

						tHash_Lookup_row14.lookup(row14HashKey);

						if (!tHash_Lookup_row14.hasNext()) { // G_TM_M_090

							rejectedInnerJoin_tMap_9_TMAP_IN = true;

						} // G_TM_M_090

					} // G_TM_M_020

					row14Struct row14 = null;

					row14Struct fromLookup_row14 = null;
					row14 = row14Default;

					if (tHash_Lookup_row14 != null
							&& tHash_Lookup_row14.hasNext()) { // G 099

						fromLookup_row14 = tHash_Lookup_row14.next();

					} // G 099

					if (fromLookup_row14 != null) {
						row14 = fromLookup_row14;
					}

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_9_TMAP_IN__Struct Var = Var__tMap_9_TMAP_IN;// ###############################
						// ###############################
						// # Output tables

						out1 = null;
						out1_List.clear();

						if (!rejectedInnerJoin_tMap_9_TMAP_IN) {

							// # Output table : 'out1'
							out1_tmp.ENCOUNTER_NUM = to_obs_fct.ENCOUNTER_NUM;
							out1_tmp.PATIENT_NUM = to_obs_fct.PATIENT_NUM;
							out1_tmp.CONCEPT_CD = to_obs_fct.CONCEPT_CD;
							out1_tmp.PROVIDER_ID = to_obs_fct.PROVIDER_ID;
							out1_tmp.START_DATE = row14.START_DATE;
							out1_tmp.MODIFIER_CD = to_obs_fct.MODIFIER_CD;
							out1_tmp.INSTANCE_NUM = to_obs_fct.INSTANCE_NUM;
							out1_tmp.VALTYPE_CD = to_obs_fct.VALTYPE_CD;
							out1_tmp.TVAL_CHAR = to_obs_fct.TVAL_CHAR;
							out1_tmp.NVAL_NUM = to_obs_fct.NVAL_NUM;
							out1_tmp.VALUEFLAG_CD = to_obs_fct.VALUEFLAG_CD;
							out1_tmp.QUANTITY_NUM = to_obs_fct.QUANTITY_NUM;
							out1_tmp.UNITS_CD = to_obs_fct.UNITS_CD;
							out1_tmp.END_DATE = to_obs_fct.END_DATE;
							out1_tmp.LOCATION_CD = to_obs_fct.LOCATION_CD;
							out1_tmp.OBSERVATION_BLOB = to_obs_fct.OBSERVATION_BLOB;
							out1_tmp.CONFIDENCE_NUM = to_obs_fct.CONFIDENCE_NUM;
							out1_tmp.UPDATE_DATE = to_obs_fct.UPDATE_DATE;
							out1_tmp.DOWNLOAD_DATE = to_obs_fct.DOWNLOAD_DATE;
							out1_tmp.IMPORT_DATE = to_obs_fct.IMPORT_DATE;
							out1_tmp.SOURCESYSTEM_CD = to_obs_fct.SOURCESYSTEM_CD;
							out1_tmp.UPLOAD_ID = to_obs_fct.UPLOAD_ID;
							out1_tmp.ENDDATE_SOURCE_PATH = to_obs_fct.ENDDATE_SOURCE_PATH;
							out1_List.add(out1_tmp);
							out1 = out1_tmp;
						} // closing inner join bracket (1)
							// ###### START REJECTS #####

						// # Output reject table : 'out3'
						// # Filter conditions
						if (rejectedInnerJoin_tMap_9_TMAP_IN) {
							out1_tmp = new out1Struct();

							out1_tmp.ENCOUNTER_NUM = to_obs_fct.ENCOUNTER_NUM;
							out1_tmp.PATIENT_NUM = to_obs_fct.PATIENT_NUM;
							out1_tmp.CONCEPT_CD = to_obs_fct.CONCEPT_CD;
							out1_tmp.PROVIDER_ID = to_obs_fct.PROVIDER_ID;
							out1_tmp.START_DATE = to_obs_fct.START_DATE;
							out1_tmp.MODIFIER_CD = to_obs_fct.MODIFIER_CD;
							out1_tmp.INSTANCE_NUM = to_obs_fct.INSTANCE_NUM;
							out1_tmp.VALTYPE_CD = to_obs_fct.VALTYPE_CD;
							out1_tmp.TVAL_CHAR = to_obs_fct.TVAL_CHAR;
							out1_tmp.NVAL_NUM = to_obs_fct.NVAL_NUM;
							out1_tmp.VALUEFLAG_CD = to_obs_fct.VALUEFLAG_CD;
							out1_tmp.QUANTITY_NUM = to_obs_fct.QUANTITY_NUM;
							out1_tmp.UNITS_CD = to_obs_fct.UNITS_CD;
							out1_tmp.END_DATE = to_obs_fct.END_DATE;
							out1_tmp.LOCATION_CD = to_obs_fct.LOCATION_CD;
							out1_tmp.OBSERVATION_BLOB = to_obs_fct.OBSERVATION_BLOB;
							out1_tmp.CONFIDENCE_NUM = to_obs_fct.CONFIDENCE_NUM;
							out1_tmp.UPDATE_DATE = to_obs_fct.UPDATE_DATE;
							out1_tmp.DOWNLOAD_DATE = to_obs_fct.DOWNLOAD_DATE;
							out1_tmp.IMPORT_DATE = to_obs_fct.IMPORT_DATE;
							out1_tmp.SOURCESYSTEM_CD = to_obs_fct.SOURCESYSTEM_CD;
							out1_tmp.UPLOAD_ID = to_obs_fct.UPLOAD_ID;
							out1_tmp.ENDDATE_SOURCE_PATH = to_obs_fct.ENDDATE_SOURCE_PATH;
							out1_List.add(out1_tmp);
							out1 = out1_tmp;
						} // closing filter/reject
							// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_9_TMAP_IN = false;

					tos_count_tMap_9_TMAP_IN++;

					/**
					 * [tMap_9_TMAP_IN main ] stop
					 */
					// Start of branch "out1"
					if (out1 != null) {
						// start of joined table loop
						for (out1Struct cur_out1 : out1_List) {
							out1 = cur_out1;

							/**
							 * [tMap_8_TMAP_OUT main ] start
							 */

							currentComponent = "tMap_8_TMAP_OUT";

							boolean hasCasePrimitiveKeyWithNull_tMap_8_TMAP_OUT = false;

							hasCasePrimitiveKeyWithNull_tMap_8_TMAP_OUT = false;

							String exprKey_row16__CONCEPT_PATH = out1.ENDDATE_SOURCE_PATH;

							SortableRow_tMap_8_1 sortableRow_tMap_8_1 = fsi_tMap_8_1
									.getNextFreeRow();

							sortableRow_tMap_8_1.fillFrom(out1,
									exprKey_row16__CONCEPT_PATH);

							fsi_tMap_8_1.put(sortableRow_tMap_8_1);

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_8_TMAP_OUT = false;
							boolean mainRowRejected_tMap_8_TMAP_OUT = false;

							// ###############################

							tos_count_tMap_8_TMAP_OUT++;

							/**
							 * [tMap_8_TMAP_OUT main ] stop
							 */
						} // end of joined table loop
						out1_List.clear();

					} // End of branch "out1"

				} // G_TM_M_250 close loop read file data '2'

				/**
				 * [tMap_9_TMAP_IN end ] start
				 */

				currentComponent = "tMap_9_TMAP_IN";

				// ###############################
				// # Lookup hashes releasing
				fsi_tMap_9_2.endGet();

				if (tHash_Lookup_row15 != null) {
					tHash_Lookup_row15.endGet();
				}
				globalMap.remove("tHash_Lookup_row15");

				if (tHash_Lookup_row14 != null) {
					tHash_Lookup_row14.endGet();
				}
				globalMap.remove("tHash_Lookup_row14");

				// ###############################

				ok_Hash.put("tMap_9_TMAP_IN", true);
				end_Hash.put("tMap_9_TMAP_IN", System.currentTimeMillis());

				/**
				 * [tMap_9_TMAP_IN end ] stop
				 */

				/**
				 * [tMap_8_TMAP_OUT end ] start
				 */

				currentComponent = "tMap_8_TMAP_OUT";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_8_TMAP_OUT", true);
				end_Hash.put("tMap_8_TMAP_OUT", System.currentTimeMillis());

				/**
				 * [tMap_8_TMAP_OUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_6", false);
				start_Hash.put("tFileOutputDelimited_6",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_6";

				int tos_count_tFileOutputDelimited_6 = 0;

				String fileName_tFileOutputDelimited_6 = "";
				fileName_tFileOutputDelimited_6 = (new java.io.File(
						context.folderMain + context.folderOutput
								+ "/patient_data.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_6 = null;
				String extension_tFileOutputDelimited_6 = null;
				String directory_tFileOutputDelimited_6 = null;
				if ((fileName_tFileOutputDelimited_6.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") < fileName_tFileOutputDelimited_6
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(0, fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
							.substring(0, fileName_tFileOutputDelimited_6
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(0, fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					}
					directory_tFileOutputDelimited_6 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_6 = true;
				java.io.File filetFileOutputDelimited_6 = new java.io.File(
						fileName_tFileOutputDelimited_6);
				globalMap.put("tFileOutputDelimited_6_FILE_NAME",
						fileName_tFileOutputDelimited_6);

				String[] headColutFileOutputDelimited_6 = new String[22];
				class CSVBasicSet_tFileOutputDelimited_6 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_6[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_6 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_6[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_6[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_6 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_6[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_6[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_6 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_6[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_6 = 0;
				int splitEvery_tFileOutputDelimited_6 = 1000;
				int splitedFileNo_tFileOutputDelimited_6 = 0;
				int currentRow_tFileOutputDelimited_6 = 0;

				CSVBasicSet_tFileOutputDelimited_6 csvSettings_tFileOutputDelimited_6 = new CSVBasicSet_tFileOutputDelimited_6();
				csvSettings_tFileOutputDelimited_6.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_6.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_6.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_6 != null
						&& directory_tFileOutputDelimited_6.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_6 = new java.io.File(
							directory_tFileOutputDelimited_6);
					if (!dir_tFileOutputDelimited_6.exists()) {
						dir_tFileOutputDelimited_6.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_6 = null;
				try {
					CsvWritertFileOutputDelimited_6 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_6,
													false), "UTF-8")));
					CsvWritertFileOutputDelimited_6
							.setSeparator(csvSettings_tFileOutputDelimited_6
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_6
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_6.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_6.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_6.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_6
										.getRowDelim());
					}

					if (filetFileOutputDelimited_6.length() == 0) {

						headColutFileOutputDelimited_6[0] = "ENCOUNTER_NUM";

						headColutFileOutputDelimited_6[1] = "PATIENT_NUM";

						headColutFileOutputDelimited_6[2] = "CONCEPT_CD";

						headColutFileOutputDelimited_6[3] = "PROVIDER_ID";

						headColutFileOutputDelimited_6[4] = "START_DATE";

						headColutFileOutputDelimited_6[5] = "MODIFIER_CD";

						headColutFileOutputDelimited_6[6] = "INSTANCE_NUM";

						headColutFileOutputDelimited_6[7] = "VALTYPE_CD";

						headColutFileOutputDelimited_6[8] = "TVAL_CHAR";

						headColutFileOutputDelimited_6[9] = "NVAL_NUM";

						headColutFileOutputDelimited_6[10] = "VALUEFLAG_CD";

						headColutFileOutputDelimited_6[11] = "QUANTITY_NUM";

						headColutFileOutputDelimited_6[12] = "UNITS_CD";

						headColutFileOutputDelimited_6[13] = "END_DATE";

						headColutFileOutputDelimited_6[14] = "LOCATION_CD";

						headColutFileOutputDelimited_6[15] = "OBSERVATION_BLOB";

						headColutFileOutputDelimited_6[16] = "CONFIDENCE_NUM";

						headColutFileOutputDelimited_6[17] = "UPDATE_DATE";

						headColutFileOutputDelimited_6[18] = "DOWNLOAD_DATE";

						headColutFileOutputDelimited_6[19] = "IMPORT_DATE";

						headColutFileOutputDelimited_6[20] = "SOURCESYSTEM_CD";

						headColutFileOutputDelimited_6[21] = "UPLOAD_ID";

						CsvWritertFileOutputDelimited_6
								.writeNext(headColutFileOutputDelimited_6);
						CsvWritertFileOutputDelimited_6.flush();

					}

					CsvWritertFileOutputDelimited_6
							.setEscapeChar(csvSettings_tFileOutputDelimited_6
									.getEscapeChar());
					CsvWritertFileOutputDelimited_6
							.setQuoteChar(csvSettings_tFileOutputDelimited_6
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_6
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_6 begin ] stop
					 */

					/**
					 * [tMap_6_TMAP_OUT begin ] start
					 */

					ok_Hash.put("tMap_6_TMAP_OUT", false);
					start_Hash.put("tMap_6_TMAP_OUT",
							System.currentTimeMillis());
					currentComponent = "tMap_6_TMAP_OUT";

					int tos_count_tMap_6_TMAP_OUT = 0;

					// ###############################
					// # Lookup's keys initialization

					org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row9Struct> tHash_Lookup_row9 = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row9Struct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row9Struct>) globalMap
							.get("tHash_Lookup_row9"));

					row9Struct row9HashKey = new row9Struct();
					row9Struct row9Default = new row9Struct();
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_6_TMAP_OUT__Struct {
					}
					Var__tMap_6_TMAP_OUT__Struct Var__tMap_6_TMAP_OUT = new Var__tMap_6_TMAP_OUT__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					// ###############################

					class SortableRow_tMap_6_1
							implements
							Comparable<SortableRow_tMap_6_1>,
							routines.system.IPersistableRow<SortableRow_tMap_6_1> { // G_TM_B_001

						boolean is__rejectedInnerJoin;

						BigDecimal exprKey_row9__PATIENT_NUM;

						// to_patient_mapping
						BigDecimal to_patient_mapping__PATIENT_NUM;

						public void fillFrom(
								to_patient_mappingStruct to_patient_mapping,
								BigDecimal exprKey_row9__PATIENT_NUM) {

							this.to_patient_mapping__PATIENT_NUM = to_patient_mapping.PATIENT_NUM;
							this.exprKey_row9__PATIENT_NUM = exprKey_row9__PATIENT_NUM;

						}

						public void copyDataTo(
								to_patient_mappingStruct to_patient_mapping) {

							to_patient_mapping.PATIENT_NUM = this.to_patient_mapping__PATIENT_NUM;

						}

						public String toString() {

							StringBuilder sb = new StringBuilder();
							sb.append(super.toString());
							sb.append("[");

							sb.append("to_patient_mapping__PATIENT_NUM");
							sb.append("=");
							sb.append(String
									.valueOf(this.to_patient_mapping__PATIENT_NUM));

							sb.append("]");

							return sb.toString();
						}

						public int compareTo(SortableRow_tMap_6_1 other) {

							int returnValue = 0;

							returnValue = checkNullsAndCompare(
									this.exprKey_row9__PATIENT_NUM,
									other.exprKey_row9__PATIENT_NUM);
							if (returnValue != 0) {
								return returnValue;
							}

							return returnValue;
						}

						private int checkNullsAndCompare(Object object1,
								Object object2) {
							int returnValue = 0;
							if (object1 instanceof Comparable
									&& object2 instanceof Comparable) {
								returnValue = ((Comparable) object1)
										.compareTo(object2);
							} else if (object1 != null && object2 != null) {
								returnValue = compareStrings(
										object1.toString(), object2.toString());
							} else if (object1 == null && object2 != null) {
								returnValue = 1;
							} else if (object1 != null && object2 == null) {
								returnValue = -1;
							} else {
								returnValue = 0;
							}

							return returnValue;
						}

						private int compareStrings(String string1,
								String string2) {
							return string1.compareTo(string2);
						}

						public void readData(ObjectInputStream dis) {

							synchronized (to_patient_mappingStruct.commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

								try {

									int length = 0;

									this.is__rejectedInnerJoin = dis
											.readBoolean();

									this.to_patient_mapping__PATIENT_NUM = (BigDecimal) dis
											.readObject();

									this.exprKey_row9__PATIENT_NUM = (BigDecimal) dis
											.readObject();

								} catch (IOException e) {
									throw new RuntimeException(e);

								} catch (ClassNotFoundException eCNFE) {
									throw new RuntimeException(eCNFE);

								}

							}
						}

						public void writeData(ObjectOutputStream dos) {
							try {

								dos.writeBoolean(this.is__rejectedInnerJoin);

								dos.writeObject(this.to_patient_mapping__PATIENT_NUM);

								dos.writeObject(this.exprKey_row9__PATIENT_NUM);

							} catch (IOException e) {
								throw new RuntimeException(e);
							}
						}

					} // G_TM_B_001

					org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_6_1> fsi_tMap_6_1 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_6_1>(
							context.folderMain + context.folderOutput + "/"
									+ jobName + "_tMapData_" + pid
									+ "_tMap_6_1", 200000) {
						public SortableRow_tMap_6_1 createRowInstance() {
							return new SortableRow_tMap_6_1();
						}
					};

					fsi_tMap_6_1.initPut();

					/**
					 * [tMap_6_TMAP_OUT begin ] stop
					 */

					/**
					 * [tMap_5 begin ] start
					 */

					ok_Hash.put("tMap_5", false);
					start_Hash.put("tMap_5", System.currentTimeMillis());
					currentComponent = "tMap_5";

					int tos_count_tMap_5 = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_5__Struct {
					}
					Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					to_trgt_obsStruct to_trgt_obs_tmp = new to_trgt_obsStruct();
					to_patient_mappingStruct to_patient_mapping_tmp = new to_patient_mappingStruct();
					// ###############################

					/**
					 * [tMap_5 begin ] stop
					 */

					/**
					 * [tJavaRow_2 begin ] start
					 */

					ok_Hash.put("tJavaRow_2", false);
					start_Hash.put("tJavaRow_2", System.currentTimeMillis());
					currentComponent = "tJavaRow_2";

					int tos_count_tJavaRow_2 = 0;

					int nb_line_tJavaRow_2 = 0;

					/**
					 * [tJavaRow_2 begin ] stop
					 */

					/**
					 * [tMap_8_TMAP_IN begin ] start
					 */

					ok_Hash.put("tMap_8_TMAP_IN", false);
					start_Hash
							.put("tMap_8_TMAP_IN", System.currentTimeMillis());
					currentComponent = "tMap_8_TMAP_IN";

					int tos_count_tMap_8_TMAP_IN = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_8_TMAP_IN__Struct {
					}
					Var__tMap_8_TMAP_IN__Struct Var__tMap_8_TMAP_IN = new Var__tMap_8_TMAP_IN__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					asdddStruct asddd_tmp = new asdddStruct();
					// ###############################

					List<asdddStruct> asddd_List = new java.util.ArrayList<asdddStruct>();

					/**
					 * [tMap_8_TMAP_IN begin ] stop
					 */
					/**
					 * [tMap_8_TMAP_IN main ] start
					 */

					currentComponent = "tMap_8_TMAP_IN";

					boolean hasCasePrimitiveKeyWithNull_tMap_8_TMAP_IN = false;

					fsi_tMap_8_1.endPut();

					if (out1 == null) {
						out1 = new out1Struct();
					}

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_8_TMAP_IN = false;
					boolean mainRowRejected_tMap_8_TMAP_IN = false;

					// /////////////////////////////////////////////
					// Starting Lookup Table "row16"
					// /////////////////////////////////////////////

					SortableRow_tMap_8_1 rsc_tMap_8_1;

					tHash_Lookup_row16.initGet();

					fsi_tMap_8_1.initGet();

					// TEST firstLookupIsPersistentSorted=true
					// isFirstPersistentSortedTable=true

					rejectedInnerJoin_tMap_8_TMAP_IN = false;

					while (fsi_tMap_8_1.hasNext()) { // G_TM_M_250 loop "1"

						rsc_tMap_8_1 = (SortableRow_tMap_8_1) fsi_tMap_8_1
								.next();
						rsc_tMap_8_1.copyDataTo(out1);

						rejectedInnerJoin_tMap_8_TMAP_IN = rsc_tMap_8_1.is__rejectedInnerJoin;

						boolean forceLooprow16 = false;

						row16Struct row16ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_8_TMAP_IN) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_8_TMAP_IN = false;

							row16HashKey.CONCEPT_PATH = rsc_tMap_8_1.exprKey_row16__CONCEPT_PATH;

							tHash_Lookup_row16.lookup(row16HashKey);

							if (!tHash_Lookup_row16.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_8_TMAP_IN = true;

							} // G_TM_M_090

						} // G_TM_M_020

						row16Struct row16 = null;

						row16Struct fromLookup_row16 = null;
						row16 = row16Default;

						if (tHash_Lookup_row16 != null
								&& tHash_Lookup_row16.hasNext()) { // G 099

							fromLookup_row16 = tHash_Lookup_row16.next();

						} // G 099

						if (fromLookup_row16 != null) {
							row16 = fromLookup_row16;
						}

						BigDecimal exprKey_row17__PATIENT_NUM = null;

						String exprKey_row17__CONCEPT_CD = null;

						if (!rejectedInnerJoin_tMap_8_TMAP_IN) { // G_TM_M_255

							exprKey_row17__PATIENT_NUM = out1.PATIENT_NUM;

							exprKey_row17__CONCEPT_CD = row16.CONCEPT_CD;

						} // G_TM_M_255

						SortableRow_tMap_8_2 rsc_tMap_8_2 = new SortableRow_tMap_8_2();

						rsc_tMap_8_2.fillFrom(out1, row16,
								exprKey_row17__PATIENT_NUM,
								exprKey_row17__CONCEPT_CD);

						rsc_tMap_8_2.is__rejectedInnerJoin = rejectedInnerJoin_tMap_8_TMAP_IN;

						rejectedInnerJoin_tMap_8_TMAP_IN = false;

						// Sort and store in KeyFile(s) and DataFile(s)
						fsi_tMap_8_2.put(rsc_tMap_8_2);

					} // G_TM_M_250 loop "1"

					fsi_tMap_8_1.endGet();

					fsi_tMap_8_2.endPut();

					// /////////////////////////////////////////////
					// Starting Lookup Table "row17"
					// /////////////////////////////////////////////

					SortableRow_tMap_8_2 rsc_tMap_8_2;

					tHash_Lookup_row17.initGet();

					fsi_tMap_8_2.initGet();

					// row16Struct row16 = new row16Struct();

					row16Struct row16 = new row16Struct();

					// TEST firstLookupIsPersistentSorted=true
					// isFirstPersistentSortedTable=false

					rejectedInnerJoin_tMap_8_TMAP_IN = false;

					while (fsi_tMap_8_2.hasNext()) { // G_TM_M_250 loop "2"

						// CALL close loop of lookup '2'

						rsc_tMap_8_2 = (SortableRow_tMap_8_2) fsi_tMap_8_2
								.next();
						rsc_tMap_8_2.copyDataTo(out1, row16);

						rejectedInnerJoin_tMap_8_TMAP_IN = rsc_tMap_8_2.is__rejectedInnerJoin;

						boolean forceLooprow17 = false;

						row17Struct row17ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_8_TMAP_IN) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_8_TMAP_IN = false;

							row17HashKey.PATIENT_NUM = rsc_tMap_8_2.exprKey_row17__PATIENT_NUM;

							row17HashKey.CONCEPT_CD = rsc_tMap_8_2.exprKey_row17__CONCEPT_CD;

							tHash_Lookup_row17.lookup(row17HashKey);

							if (!tHash_Lookup_row17.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_8_TMAP_IN = true;

							} // G_TM_M_090

						} // G_TM_M_020

						row17Struct row17 = null;

						row17Struct fromLookup_row17 = null;
						row17 = row17Default;

						if (tHash_Lookup_row17 != null
								&& tHash_Lookup_row17.hasNext()) { // G 099

							fromLookup_row17 = tHash_Lookup_row17.next();

						} // G 099

						if (fromLookup_row17 != null) {
							row17 = fromLookup_row17;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_8_TMAP_IN__Struct Var = Var__tMap_8_TMAP_IN;// ###############################
							// ###############################
							// # Output tables

							asddd = null;
							asddd_List.clear();

							if (!rejectedInnerJoin_tMap_8_TMAP_IN) {

								// # Output table : 'asddd'
								asddd_tmp.ENCOUNTER_NUM = out1.ENCOUNTER_NUM;
								asddd_tmp.PATIENT_NUM = out1.PATIENT_NUM;
								asddd_tmp.CONCEPT_CD = out1.CONCEPT_CD;
								asddd_tmp.PROVIDER_ID = out1.PROVIDER_ID;
								asddd_tmp.START_DATE = out1.START_DATE;
								asddd_tmp.MODIFIER_CD = out1.MODIFIER_CD;
								asddd_tmp.INSTANCE_NUM = out1.INSTANCE_NUM;
								asddd_tmp.VALTYPE_CD = out1.VALTYPE_CD;
								asddd_tmp.TVAL_CHAR = out1.TVAL_CHAR;
								asddd_tmp.NVAL_NUM = out1.NVAL_NUM;
								asddd_tmp.VALUEFLAG_CD = out1.VALUEFLAG_CD;
								asddd_tmp.QUANTITY_NUM = out1.QUANTITY_NUM;
								asddd_tmp.UNITS_CD = out1.UNITS_CD;
								asddd_tmp.END_DATE = row17.END_DATE;
								asddd_tmp.LOCATION_CD = out1.LOCATION_CD;
								asddd_tmp.OBSERVATION_BLOB = out1.OBSERVATION_BLOB;
								asddd_tmp.CONFIDENCE_NUM = out1.CONFIDENCE_NUM;
								asddd_tmp.UPDATE_DATE = out1.UPDATE_DATE;
								asddd_tmp.DOWNLOAD_DATE = out1.DOWNLOAD_DATE;
								asddd_tmp.IMPORT_DATE = out1.IMPORT_DATE;
								asddd_tmp.SOURCESYSTEM_CD = out1.SOURCESYSTEM_CD;
								asddd_tmp.UPLOAD_ID = out1.UPLOAD_ID;
								asddd_List.add(asddd_tmp);
								asddd = asddd_tmp;
							} // closing inner join bracket (1)
								// ###### START REJECTS #####

							// # Output reject table : 'out2'
							// # Filter conditions
							if (rejectedInnerJoin_tMap_8_TMAP_IN) {
								asddd_tmp = new asdddStruct();

								asddd_tmp.ENCOUNTER_NUM = out1.ENCOUNTER_NUM;
								asddd_tmp.PATIENT_NUM = out1.PATIENT_NUM;
								asddd_tmp.CONCEPT_CD = out1.CONCEPT_CD;
								asddd_tmp.PROVIDER_ID = out1.PROVIDER_ID;
								asddd_tmp.START_DATE = out1.START_DATE;
								asddd_tmp.MODIFIER_CD = out1.MODIFIER_CD;
								asddd_tmp.INSTANCE_NUM = out1.INSTANCE_NUM;
								asddd_tmp.VALTYPE_CD = out1.VALTYPE_CD;
								asddd_tmp.TVAL_CHAR = out1.TVAL_CHAR;
								asddd_tmp.NVAL_NUM = out1.NVAL_NUM;
								asddd_tmp.VALUEFLAG_CD = out1.VALUEFLAG_CD;
								asddd_tmp.QUANTITY_NUM = out1.QUANTITY_NUM;
								asddd_tmp.UNITS_CD = out1.UNITS_CD;
								asddd_tmp.END_DATE = out1.END_DATE;
								asddd_tmp.LOCATION_CD = out1.LOCATION_CD;
								asddd_tmp.OBSERVATION_BLOB = out1.OBSERVATION_BLOB;
								asddd_tmp.CONFIDENCE_NUM = out1.CONFIDENCE_NUM;
								asddd_tmp.UPDATE_DATE = out1.UPDATE_DATE;
								asddd_tmp.DOWNLOAD_DATE = out1.DOWNLOAD_DATE;
								asddd_tmp.IMPORT_DATE = out1.IMPORT_DATE;
								asddd_tmp.SOURCESYSTEM_CD = out1.SOURCESYSTEM_CD;
								asddd_tmp.UPLOAD_ID = out1.UPLOAD_ID;
								asddd_List.add(asddd_tmp);
								asddd = asddd_tmp;
							} // closing filter/reject
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_8_TMAP_IN = false;

						tos_count_tMap_8_TMAP_IN++;

						/**
						 * [tMap_8_TMAP_IN main ] stop
						 */
						// Start of branch "asddd"
						if (asddd != null) {
							// start of joined table loop
							for (asdddStruct cur_asddd : asddd_List) {
								asddd = cur_asddd;

								/**
								 * [tJavaRow_2 main ] start
								 */

								currentComponent = "tJavaRow_2";

								// Code generated according to input schema and
								// output schema
								row5.ENCOUNTER_NUM = asddd.ENCOUNTER_NUM;
								row5.PATIENT_NUM = asddd.PATIENT_NUM;
								// row5.CONCEPT_CD = asddd.CONCEPT_CD;

								// if (asddd.CONCEPT_CD.lastIndexOf("|") >0){
								// StringBuilder b = new
								// StringBuilder(asddd.CONCEPT_CD);
								// b.replace(asddd.CONCEPT_CD.lastIndexOf("|"),
								// asddd.CONCEPT_CD.lastIndexOf("|") + 1, ":" );
								// row5.CONCEPT_CD = b.toString();
								// }
								// else{
								row5.CONCEPT_CD = asddd.CONCEPT_CD;
								// }

								row5.PROVIDER_ID = asddd.PROVIDER_ID;
								if (asddd.START_DATE == null)
									asddd.START_DATE = "";
								if (asddd.START_DATE.length() > 0)
									row5.START_DATE = TalendDate.parseDate(
											"yyyy-MM-dd", asddd.START_DATE);
								else {
									// "dd-MM-yyyy"

									row5.START_DATE = TalendDate.parseDate(
											"yyyy-MM-dd", "1900-01-01");
								}
								row5.MODIFIER_CD = asddd.MODIFIER_CD;
								row5.INSTANCE_NUM = asddd.INSTANCE_NUM;
								row5.VALTYPE_CD = asddd.VALTYPE_CD;
								row5.TVAL_CHAR = asddd.TVAL_CHAR;
								row5.NVAL_NUM = asddd.NVAL_NUM;
								row5.VALUEFLAG_CD = asddd.VALUEFLAG_CD;
								row5.QUANTITY_NUM = asddd.QUANTITY_NUM;
								row5.UNITS_CD = asddd.UNITS_CD;
								if (asddd.END_DATE == null)
									asddd.END_DATE = "";

								if (asddd.END_DATE.length() > 0)
									row5.END_DATE = TalendDate.parseDate(
											"yyyy-MM-dd", asddd.END_DATE);
								else
									row5.END_DATE = null;
								row5.LOCATION_CD = asddd.LOCATION_CD;
								row5.OBSERVATION_BLOB = asddd.OBSERVATION_BLOB;
								row5.CONFIDENCE_NUM = asddd.CONFIDENCE_NUM;
								row5.UPDATE_DATE = asddd.UPDATE_DATE;
								row5.DOWNLOAD_DATE = asddd.DOWNLOAD_DATE;
								row5.IMPORT_DATE = asddd.IMPORT_DATE;
								row5.SOURCESYSTEM_CD = asddd.SOURCESYSTEM_CD;
								row5.UPLOAD_ID = asddd.UPLOAD_ID;

								nb_line_tJavaRow_2++;

								tos_count_tJavaRow_2++;

								/**
								 * [tJavaRow_2 main ] stop
								 */

								/**
								 * [tMap_5 main ] start
								 */

								currentComponent = "tMap_5";

								boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_5 = false;
								boolean mainRowRejected_tMap_5 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
									// ###############################
									// # Output tables

									to_trgt_obs = null;
									to_patient_mapping = null;

									// # Output table : 'to_trgt_obs'
									to_trgt_obs_tmp.ENCOUNTER_NUM = row5.ENCOUNTER_NUM;
									to_trgt_obs_tmp.PATIENT_NUM = row5.PATIENT_NUM;
									to_trgt_obs_tmp.CONCEPT_CD = row5.CONCEPT_CD;
									to_trgt_obs_tmp.PROVIDER_ID = row5.PROVIDER_ID;
									to_trgt_obs_tmp.START_DATE = row5.START_DATE;
									to_trgt_obs_tmp.MODIFIER_CD = row5.MODIFIER_CD;
									to_trgt_obs_tmp.INSTANCE_NUM = row5.INSTANCE_NUM;
									to_trgt_obs_tmp.VALTYPE_CD = row5.VALTYPE_CD;
									to_trgt_obs_tmp.TVAL_CHAR = row5.TVAL_CHAR;
									to_trgt_obs_tmp.NVAL_NUM = row5.NVAL_NUM;
									to_trgt_obs_tmp.VALUEFLAG_CD = row5.VALUEFLAG_CD;
									to_trgt_obs_tmp.QUANTITY_NUM = row5.QUANTITY_NUM;
									to_trgt_obs_tmp.UNITS_CD = row5.UNITS_CD;
									to_trgt_obs_tmp.END_DATE = row5.END_DATE;
									to_trgt_obs_tmp.LOCATION_CD = row5.LOCATION_CD;
									to_trgt_obs_tmp.OBSERVATION_BLOB = row5.OBSERVATION_BLOB;
									to_trgt_obs_tmp.CONFIDENCE_NUM = row5.CONFIDENCE_NUM;
									to_trgt_obs_tmp.UPDATE_DATE = row5.UPDATE_DATE;
									to_trgt_obs_tmp.DOWNLOAD_DATE = row5.DOWNLOAD_DATE;
									to_trgt_obs_tmp.IMPORT_DATE = row5.IMPORT_DATE;
									to_trgt_obs_tmp.SOURCESYSTEM_CD = row5.SOURCESYSTEM_CD;
									to_trgt_obs_tmp.UPLOAD_ID = row5.UPLOAD_ID;
									to_trgt_obs = to_trgt_obs_tmp;

									// # Output table : 'to_patient_mapping'
									to_patient_mapping_tmp.PATIENT_NUM = row5.PATIENT_NUM;
									to_patient_mapping = to_patient_mapping_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_5 = false;

								tos_count_tMap_5++;

								/**
								 * [tMap_5 main ] stop
								 */
								// Start of branch "to_trgt_obs"
								if (to_trgt_obs != null) {

									/**
									 * [tFileOutputDelimited_6 main ] start
									 */

									currentComponent = "tFileOutputDelimited_6";

									String[] rowtFileOutputDelimited_6 = new String[22];

									rowtFileOutputDelimited_6[0] = to_trgt_obs.ENCOUNTER_NUM == null ? ""
											: to_trgt_obs.ENCOUNTER_NUM
													.toPlainString();

									rowtFileOutputDelimited_6[1] = to_trgt_obs.PATIENT_NUM == null ? ""
											: to_trgt_obs.PATIENT_NUM
													.toPlainString();

									rowtFileOutputDelimited_6[2] = to_trgt_obs.CONCEPT_CD == null ? ""
											: to_trgt_obs.CONCEPT_CD;

									rowtFileOutputDelimited_6[3] = to_trgt_obs.PROVIDER_ID == null ? ""
											: to_trgt_obs.PROVIDER_ID;

									rowtFileOutputDelimited_6[4] = to_trgt_obs.START_DATE == null ? ""
											: FormatterUtils.format_Date(
													to_trgt_obs.START_DATE,
													"yyyy-MM-dd");

									rowtFileOutputDelimited_6[5] = to_trgt_obs.MODIFIER_CD == null ? ""
											: to_trgt_obs.MODIFIER_CD;

									rowtFileOutputDelimited_6[6] = to_trgt_obs.INSTANCE_NUM == null ? ""
											: to_trgt_obs.INSTANCE_NUM;

									rowtFileOutputDelimited_6[7] = to_trgt_obs.VALTYPE_CD == null ? ""
											: to_trgt_obs.VALTYPE_CD;

									rowtFileOutputDelimited_6[8] = to_trgt_obs.TVAL_CHAR == null ? ""
											: to_trgt_obs.TVAL_CHAR;

									rowtFileOutputDelimited_6[9] = to_trgt_obs.NVAL_NUM == null ? ""
											: String.valueOf(to_trgt_obs.NVAL_NUM);

									rowtFileOutputDelimited_6[10] = to_trgt_obs.VALUEFLAG_CD == null ? ""
											: to_trgt_obs.VALUEFLAG_CD;

									rowtFileOutputDelimited_6[11] = to_trgt_obs.QUANTITY_NUM == null ? ""
											: to_trgt_obs.QUANTITY_NUM;

									rowtFileOutputDelimited_6[12] = to_trgt_obs.UNITS_CD == null ? ""
											: to_trgt_obs.UNITS_CD;

									rowtFileOutputDelimited_6[13] = to_trgt_obs.END_DATE == null ? ""
											: FormatterUtils.format_Date(
													to_trgt_obs.END_DATE,
													"yyyy-MM-dd");

									rowtFileOutputDelimited_6[14] = to_trgt_obs.LOCATION_CD == null ? ""
											: to_trgt_obs.LOCATION_CD;

									rowtFileOutputDelimited_6[15] = to_trgt_obs.OBSERVATION_BLOB == null ? ""
											: to_trgt_obs.OBSERVATION_BLOB;

									rowtFileOutputDelimited_6[16] = to_trgt_obs.CONFIDENCE_NUM == null ? ""
											: to_trgt_obs.CONFIDENCE_NUM;

									rowtFileOutputDelimited_6[17] = to_trgt_obs.UPDATE_DATE == null ? ""
											: FormatterUtils.format_Date(
													to_trgt_obs.UPDATE_DATE,
													"yyyy-MM-dd");

									rowtFileOutputDelimited_6[18] = to_trgt_obs.DOWNLOAD_DATE == null ? ""
											: FormatterUtils.format_Date(
													to_trgt_obs.DOWNLOAD_DATE,
													"yyyy-MM-dd");

									rowtFileOutputDelimited_6[19] = to_trgt_obs.IMPORT_DATE == null ? ""
											: FormatterUtils.format_Date(
													to_trgt_obs.IMPORT_DATE,
													"yyyy-MM-dd");

									rowtFileOutputDelimited_6[20] = to_trgt_obs.SOURCESYSTEM_CD == null ? ""
											: to_trgt_obs.SOURCESYSTEM_CD;

									rowtFileOutputDelimited_6[21] = to_trgt_obs.UPLOAD_ID == null ? ""
											: to_trgt_obs.UPLOAD_ID;

									nb_line_tFileOutputDelimited_6++;
									CsvWritertFileOutputDelimited_6
											.writeNext(rowtFileOutputDelimited_6);

									tos_count_tFileOutputDelimited_6++;

									/**
									 * [tFileOutputDelimited_6 main ] stop
									 */

								} // End of branch "to_trgt_obs"

								// Start of branch "to_patient_mapping"
								if (to_patient_mapping != null) {

									/**
									 * [tMap_6_TMAP_OUT main ] start
									 */

									currentComponent = "tMap_6_TMAP_OUT";

									boolean hasCasePrimitiveKeyWithNull_tMap_6_TMAP_OUT = false;

									hasCasePrimitiveKeyWithNull_tMap_6_TMAP_OUT = false;

									BigDecimal exprKey_row9__PATIENT_NUM = to_patient_mapping.PATIENT_NUM;

									SortableRow_tMap_6_1 sortableRow_tMap_6_1 = fsi_tMap_6_1
											.getNextFreeRow();

									sortableRow_tMap_6_1.fillFrom(
											to_patient_mapping,
											exprKey_row9__PATIENT_NUM);

									fsi_tMap_6_1.put(sortableRow_tMap_6_1);

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_6_TMAP_OUT = false;
									boolean mainRowRejected_tMap_6_TMAP_OUT = false;

									// ###############################

									tos_count_tMap_6_TMAP_OUT++;

									/**
									 * [tMap_6_TMAP_OUT main ] stop
									 */

								} // End of branch "to_patient_mapping"

							} // end of joined table loop
							asddd_List.clear();

						} // End of branch "asddd"

					} // G_TM_M_250 close loop read file data '2'

					/**
					 * [tMap_8_TMAP_IN end ] start
					 */

					currentComponent = "tMap_8_TMAP_IN";

					// ###############################
					// # Lookup hashes releasing
					fsi_tMap_8_2.endGet();

					if (tHash_Lookup_row16 != null) {
						tHash_Lookup_row16.endGet();
					}
					globalMap.remove("tHash_Lookup_row16");

					if (tHash_Lookup_row17 != null) {
						tHash_Lookup_row17.endGet();
					}
					globalMap.remove("tHash_Lookup_row17");

					// ###############################

					ok_Hash.put("tMap_8_TMAP_IN", true);
					end_Hash.put("tMap_8_TMAP_IN", System.currentTimeMillis());

					/**
					 * [tMap_8_TMAP_IN end ] stop
					 */

					/**
					 * [tJavaRow_2 end ] start
					 */

					currentComponent = "tJavaRow_2";

					globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);

					ok_Hash.put("tJavaRow_2", true);
					end_Hash.put("tJavaRow_2", System.currentTimeMillis());

					/**
					 * [tJavaRow_2 end ] stop
					 */

					/**
					 * [tMap_5 end ] start
					 */

					currentComponent = "tMap_5";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					ok_Hash.put("tMap_5", true);
					end_Hash.put("tMap_5", System.currentTimeMillis());

					/**
					 * [tMap_5 end ] stop
					 */

					/**
					 * [tMap_6_TMAP_OUT end ] start
					 */

					currentComponent = "tMap_6_TMAP_OUT";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					ok_Hash.put("tMap_6_TMAP_OUT", true);
					end_Hash.put("tMap_6_TMAP_OUT", System.currentTimeMillis());

					/**
					 * [tMap_6_TMAP_OUT end ] stop
					 */

					/**
					 * [tFileOutputDelimited_10 begin ] start
					 */

					ok_Hash.put("tFileOutputDelimited_10", false);
					start_Hash.put("tFileOutputDelimited_10",
							System.currentTimeMillis());
					currentComponent = "tFileOutputDelimited_10";

					int tos_count_tFileOutputDelimited_10 = 0;

					String fileName_tFileOutputDelimited_10 = "";
					fileName_tFileOutputDelimited_10 = (new java.io.File(
							((String) globalMap
									.get("tCreateTemporaryFile_11_FILEPATH"))))
							.getAbsolutePath().replace("\\", "/");
					String fullName_tFileOutputDelimited_10 = null;
					String extension_tFileOutputDelimited_10 = null;
					String directory_tFileOutputDelimited_10 = null;
					if ((fileName_tFileOutputDelimited_10.indexOf("/") != -1)) {
						if (fileName_tFileOutputDelimited_10.lastIndexOf(".") < fileName_tFileOutputDelimited_10
								.lastIndexOf("/")) {
							fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10;
							extension_tFileOutputDelimited_10 = "";
						} else {
							fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
									.substring(0,
											fileName_tFileOutputDelimited_10
													.lastIndexOf("."));
							extension_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
									.substring(fileName_tFileOutputDelimited_10
											.lastIndexOf("."));
						}
						directory_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
								.substring(0, fileName_tFileOutputDelimited_10
										.lastIndexOf("/"));
					} else {
						if (fileName_tFileOutputDelimited_10.lastIndexOf(".") != -1) {
							fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
									.substring(0,
											fileName_tFileOutputDelimited_10
													.lastIndexOf("."));
							extension_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
									.substring(fileName_tFileOutputDelimited_10
											.lastIndexOf("."));
						} else {
							fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10;
							extension_tFileOutputDelimited_10 = "";
						}
						directory_tFileOutputDelimited_10 = "";
					}
					boolean isFileGenerated_tFileOutputDelimited_10 = true;
					java.io.File filetFileOutputDelimited_10 = new java.io.File(
							fileName_tFileOutputDelimited_10);
					globalMap.put("tFileOutputDelimited_10_FILE_NAME",
							fileName_tFileOutputDelimited_10);

					String[] headColutFileOutputDelimited_10 = new String[10];
					class CSVBasicSet_tFileOutputDelimited_10 {
						private char field_Delim;
						private char row_Delim;
						private char escape;
						private char textEnclosure;
						private boolean useCRLFRecordDelimiter;

						public boolean isUseCRLFRecordDelimiter() {
							return useCRLFRecordDelimiter;
						}

						public void setFieldSeparator(String fieldSep)
								throws IllegalArgumentException {
							char field_Delim_tFileOutputDelimited_10[] = null;

							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (fieldSep.length() > 0) {
								field_Delim_tFileOutputDelimited_10 = fieldSep
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							this.field_Delim = field_Delim_tFileOutputDelimited_10[0];
						}

						public char getFieldDelim() {
							if (this.field_Delim == 0) {
								setFieldSeparator("\t");
							}
							return this.field_Delim;
						}

						public void setRowSeparator(String rowSep) {
							if ("\r\n".equals(rowSep)) {
								useCRLFRecordDelimiter = true;
								return;
							}
							char row_DelimtFileOutputDelimited_10[] = null;

							// support passing value (property: Row Separator)
							// by 'context.rs' or 'globalMap.get("rs")'.
							if (rowSep.length() > 0) {
								row_DelimtFileOutputDelimited_10 = rowSep
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Row Separator must be assigned a char.");
							}
							this.row_Delim = row_DelimtFileOutputDelimited_10[0];
						}

						public char getRowDelim() {
							if (this.row_Delim == 0) {
								setRowSeparator("\n");
							}
							return this.row_Delim;
						}

						public void setEscapeAndTextEnclosure(String strEscape,
								String strTextEnclosure)
								throws IllegalArgumentException {
							if (strEscape.length() <= 0) {
								throw new IllegalArgumentException(
										"Escape Char must be assigned a char.");
							}

							if ("".equals(strTextEnclosure))
								strTextEnclosure = "\0";
							char textEnclosure_tFileOutputDelimited_10[] = null;

							if (strTextEnclosure.length() > 0) {
								textEnclosure_tFileOutputDelimited_10 = strTextEnclosure
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Text Enclosure must be assigned a char.");
							}

							this.textEnclosure = textEnclosure_tFileOutputDelimited_10[0];

							if (("\\").equals(strEscape)) {
								this.escape = '\\';
							} else if (strEscape.equals(strTextEnclosure)) {
								this.escape = this.textEnclosure;
							} else {
								// the default escape mode is double escape
								this.escape = this.textEnclosure;
							}

						}

						public char getEscapeChar() {
							return (char) this.escape;
						}

						public char getTextEnclosure() {
							return this.textEnclosure;
						}
					}

					int nb_line_tFileOutputDelimited_10 = 0;
					int splitEvery_tFileOutputDelimited_10 = 1000;
					int splitedFileNo_tFileOutputDelimited_10 = 0;
					int currentRow_tFileOutputDelimited_10 = 0;

					CSVBasicSet_tFileOutputDelimited_10 csvSettings_tFileOutputDelimited_10 = new CSVBasicSet_tFileOutputDelimited_10();
					csvSettings_tFileOutputDelimited_10.setFieldSeparator("\t");
					csvSettings_tFileOutputDelimited_10.setRowSeparator("\n");
					csvSettings_tFileOutputDelimited_10
							.setEscapeAndTextEnclosure("\"", "\"");
					// create directory only if not exists
					if (directory_tFileOutputDelimited_10 != null
							&& directory_tFileOutputDelimited_10.trim()
									.length() != 0) {
						java.io.File dir_tFileOutputDelimited_10 = new java.io.File(
								directory_tFileOutputDelimited_10);
						if (!dir_tFileOutputDelimited_10.exists()) {
							dir_tFileOutputDelimited_10.mkdirs();
						}
					}
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_10 = null;
					try {
						CsvWritertFileOutputDelimited_10 = new com.talend.csv.CSVWriter(
								new java.io.BufferedWriter(
										new java.io.OutputStreamWriter(
												new java.io.FileOutputStream(
														fileName_tFileOutputDelimited_10,
														false), "UTF-8")));
						CsvWritertFileOutputDelimited_10
								.setSeparator(csvSettings_tFileOutputDelimited_10
										.getFieldDelim());

						if (!csvSettings_tFileOutputDelimited_10
								.isUseCRLFRecordDelimiter()
								&& csvSettings_tFileOutputDelimited_10
										.getRowDelim() != '\r'
								&& csvSettings_tFileOutputDelimited_10
										.getRowDelim() != '\n') {
							CsvWritertFileOutputDelimited_10.setLineEnd(""
									+ csvSettings_tFileOutputDelimited_10
											.getRowDelim());
						}

						CsvWritertFileOutputDelimited_10
								.setEscapeChar(csvSettings_tFileOutputDelimited_10
										.getEscapeChar());
						CsvWritertFileOutputDelimited_10
								.setQuoteChar(csvSettings_tFileOutputDelimited_10
										.getTextEnclosure());
						CsvWritertFileOutputDelimited_10
								.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

						/**
						 * [tFileOutputDelimited_10 begin ] stop
						 */

						/**
						 * [tMap_7_TMAP_OUT begin ] start
						 */

						ok_Hash.put("tMap_7_TMAP_OUT", false);
						start_Hash.put("tMap_7_TMAP_OUT",
								System.currentTimeMillis());
						currentComponent = "tMap_7_TMAP_OUT";

						int tos_count_tMap_7_TMAP_OUT = 0;

						// ###############################
						// # Lookup's keys initialization

						org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row10Struct> tHash_Lookup_row10 = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row10Struct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row10Struct>) globalMap
								.get("tHash_Lookup_row10"));

						row10Struct row10HashKey = new row10Struct();
						row10Struct row10Default = new row10Struct();
						// ###############################

						// ###############################
						// # Vars initialization
						class Var__tMap_7_TMAP_OUT__Struct {
						}
						Var__tMap_7_TMAP_OUT__Struct Var__tMap_7_TMAP_OUT = new Var__tMap_7_TMAP_OUT__Struct();
						// ###############################

						// ###############################
						// # Outputs initialization
						// ###############################

						class SortableRow_tMap_7_1
								implements
								Comparable<SortableRow_tMap_7_1>,
								routines.system.IPersistableRow<SortableRow_tMap_7_1> { // G_TM_B_001

							boolean is__rejectedInnerJoin;

							BigDecimal exprKey_row10__PATIENT_NUM;

							// asdd
							String asdd__PATIENT_IDE;
							String asdd__PATIENT_IDE_SOURCE;
							BigDecimal asdd__PATIENT_NUM;
							String asdd__PATIENT_IDE_STATUS;
							java.util.Date asdd__UPLOAD_DATE;
							java.util.Date asdd__UPDATE_DATE;
							java.util.Date asdd__DOWNLOAD_DATE;
							java.util.Date asdd__IMPORT_DATE;
							String asdd__SOURCESYSTEM_CD;
							String asdd__UPLOAD_ID;

							public void fillFrom(asddStruct asdd,
									BigDecimal exprKey_row10__PATIENT_NUM) {

								this.asdd__PATIENT_IDE = asdd.PATIENT_IDE;
								this.asdd__PATIENT_IDE_SOURCE = asdd.PATIENT_IDE_SOURCE;
								this.asdd__PATIENT_NUM = asdd.PATIENT_NUM;
								this.asdd__PATIENT_IDE_STATUS = asdd.PATIENT_IDE_STATUS;
								this.asdd__UPLOAD_DATE = asdd.UPLOAD_DATE;
								this.asdd__UPDATE_DATE = asdd.UPDATE_DATE;
								this.asdd__DOWNLOAD_DATE = asdd.DOWNLOAD_DATE;
								this.asdd__IMPORT_DATE = asdd.IMPORT_DATE;
								this.asdd__SOURCESYSTEM_CD = asdd.SOURCESYSTEM_CD;
								this.asdd__UPLOAD_ID = asdd.UPLOAD_ID;
								this.exprKey_row10__PATIENT_NUM = exprKey_row10__PATIENT_NUM;

							}

							public void copyDataTo(asddStruct asdd) {

								asdd.PATIENT_IDE = this.asdd__PATIENT_IDE;
								asdd.PATIENT_IDE_SOURCE = this.asdd__PATIENT_IDE_SOURCE;
								asdd.PATIENT_NUM = this.asdd__PATIENT_NUM;
								asdd.PATIENT_IDE_STATUS = this.asdd__PATIENT_IDE_STATUS;
								asdd.UPLOAD_DATE = this.asdd__UPLOAD_DATE;
								asdd.UPDATE_DATE = this.asdd__UPDATE_DATE;
								asdd.DOWNLOAD_DATE = this.asdd__DOWNLOAD_DATE;
								asdd.IMPORT_DATE = this.asdd__IMPORT_DATE;
								asdd.SOURCESYSTEM_CD = this.asdd__SOURCESYSTEM_CD;
								asdd.UPLOAD_ID = this.asdd__UPLOAD_ID;

							}

							public String toString() {

								StringBuilder sb = new StringBuilder();
								sb.append(super.toString());
								sb.append("[");

								sb.append("asdd__PATIENT_IDE");
								sb.append("=");
								sb.append(String
										.valueOf(this.asdd__PATIENT_IDE));

								sb.append(", ");

								sb.append("asdd__PATIENT_IDE_SOURCE");
								sb.append("=");
								sb.append(String
										.valueOf(this.asdd__PATIENT_IDE_SOURCE));

								sb.append(", ");

								sb.append("asdd__PATIENT_NUM");
								sb.append("=");
								sb.append(String
										.valueOf(this.asdd__PATIENT_NUM));

								sb.append(", ");

								sb.append("asdd__PATIENT_IDE_STATUS");
								sb.append("=");
								sb.append(String
										.valueOf(this.asdd__PATIENT_IDE_STATUS));

								sb.append(", ");

								sb.append("asdd__UPLOAD_DATE");
								sb.append("=");
								sb.append(String
										.valueOf(this.asdd__UPLOAD_DATE));

								sb.append(", ");

								sb.append("asdd__UPDATE_DATE");
								sb.append("=");
								sb.append(String
										.valueOf(this.asdd__UPDATE_DATE));

								sb.append(", ");

								sb.append("asdd__DOWNLOAD_DATE");
								sb.append("=");
								sb.append(String
										.valueOf(this.asdd__DOWNLOAD_DATE));

								sb.append(", ");

								sb.append("asdd__IMPORT_DATE");
								sb.append("=");
								sb.append(String
										.valueOf(this.asdd__IMPORT_DATE));

								sb.append(", ");

								sb.append("asdd__SOURCESYSTEM_CD");
								sb.append("=");
								sb.append(String
										.valueOf(this.asdd__SOURCESYSTEM_CD));

								sb.append(", ");

								sb.append("asdd__UPLOAD_ID");
								sb.append("=");
								sb.append(String.valueOf(this.asdd__UPLOAD_ID));

								sb.append("]");

								return sb.toString();
							}

							public int compareTo(SortableRow_tMap_7_1 other) {

								int returnValue = 0;

								returnValue = checkNullsAndCompare(
										this.exprKey_row10__PATIENT_NUM,
										other.exprKey_row10__PATIENT_NUM);
								if (returnValue != 0) {
									return returnValue;
								}

								return returnValue;
							}

							private int checkNullsAndCompare(Object object1,
									Object object2) {
								int returnValue = 0;
								if (object1 instanceof Comparable
										&& object2 instanceof Comparable) {
									returnValue = ((Comparable) object1)
											.compareTo(object2);
								} else if (object1 != null && object2 != null) {
									returnValue = compareStrings(
											object1.toString(),
											object2.toString());
								} else if (object1 == null && object2 != null) {
									returnValue = 1;
								} else if (object1 != null && object2 == null) {
									returnValue = -1;
								} else {
									returnValue = 0;
								}

								return returnValue;
							}

							private int compareStrings(String string1,
									String string2) {
								return string1.compareTo(string2);
							}

							public void readData(ObjectInputStream dis) {

								synchronized (asddStruct.commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

									try {

										int length = 0;

										this.is__rejectedInnerJoin = dis
												.readBoolean();

										length = dis.readInt();
										if (length == -1) {
											this.asdd__PATIENT_IDE = null;
										} else {
											if (length > asddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
												if (length < 1024
														&& asddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
													asddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
												} else {
													asddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
												}
											}
											dis.readFully(
													asddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
													0, length);
											this.asdd__PATIENT_IDE = new String(
													asddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
													0, length);
										}

										length = dis.readInt();
										if (length == -1) {
											this.asdd__PATIENT_IDE_SOURCE = null;
										} else {
											if (length > asddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
												if (length < 1024
														&& asddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
													asddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
												} else {
													asddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
												}
											}
											dis.readFully(
													asddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
													0, length);
											this.asdd__PATIENT_IDE_SOURCE = new String(
													asddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
													0, length);
										}

										this.asdd__PATIENT_NUM = (BigDecimal) dis
												.readObject();

										length = dis.readInt();
										if (length == -1) {
											this.asdd__PATIENT_IDE_STATUS = null;
										} else {
											if (length > asddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
												if (length < 1024
														&& asddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
													asddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
												} else {
													asddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
												}
											}
											dis.readFully(
													asddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
													0, length);
											this.asdd__PATIENT_IDE_STATUS = new String(
													asddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
													0, length);
										}

										length = dis.readByte();
										if (length == -1) {
											this.asdd__UPLOAD_DATE = null;
										} else {
											this.asdd__UPLOAD_DATE = new Date(
													dis.readLong());
										}

										length = dis.readByte();
										if (length == -1) {
											this.asdd__UPDATE_DATE = null;
										} else {
											this.asdd__UPDATE_DATE = new Date(
													dis.readLong());
										}

										length = dis.readByte();
										if (length == -1) {
											this.asdd__DOWNLOAD_DATE = null;
										} else {
											this.asdd__DOWNLOAD_DATE = new Date(
													dis.readLong());
										}

										length = dis.readByte();
										if (length == -1) {
											this.asdd__IMPORT_DATE = null;
										} else {
											this.asdd__IMPORT_DATE = new Date(
													dis.readLong());
										}

										length = dis.readInt();
										if (length == -1) {
											this.asdd__SOURCESYSTEM_CD = null;
										} else {
											if (length > asddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
												if (length < 1024
														&& asddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
													asddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
												} else {
													asddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
												}
											}
											dis.readFully(
													asddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
													0, length);
											this.asdd__SOURCESYSTEM_CD = new String(
													asddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
													0, length);
										}

										length = dis.readInt();
										if (length == -1) {
											this.asdd__UPLOAD_ID = null;
										} else {
											if (length > asddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
												if (length < 1024
														&& asddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
													asddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
												} else {
													asddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
												}
											}
											dis.readFully(
													asddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
													0, length);
											this.asdd__UPLOAD_ID = new String(
													asddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
													0, length);
										}

										this.exprKey_row10__PATIENT_NUM = (BigDecimal) dis
												.readObject();

									} catch (IOException e) {
										throw new RuntimeException(e);

									} catch (ClassNotFoundException eCNFE) {
										throw new RuntimeException(eCNFE);

									}

								}
							}

							public void writeData(ObjectOutputStream dos) {
								try {

									dos.writeBoolean(this.is__rejectedInnerJoin);

									if (this.asdd__PATIENT_IDE == null) {
										dos.writeInt(-1);
									} else {
										byte[] byteArray = this.asdd__PATIENT_IDE
												.getBytes();
										dos.writeInt(byteArray.length);
										dos.write(byteArray);
									}

									if (this.asdd__PATIENT_IDE_SOURCE == null) {
										dos.writeInt(-1);
									} else {
										byte[] byteArray = this.asdd__PATIENT_IDE_SOURCE
												.getBytes();
										dos.writeInt(byteArray.length);
										dos.write(byteArray);
									}

									dos.writeObject(this.asdd__PATIENT_NUM);

									if (this.asdd__PATIENT_IDE_STATUS == null) {
										dos.writeInt(-1);
									} else {
										byte[] byteArray = this.asdd__PATIENT_IDE_STATUS
												.getBytes();
										dos.writeInt(byteArray.length);
										dos.write(byteArray);
									}

									if (this.asdd__UPLOAD_DATE == null) {
										dos.writeByte(-1);
									} else {
										dos.writeByte(0);
										dos.writeLong(this.asdd__UPLOAD_DATE
												.getTime());
									}

									if (this.asdd__UPDATE_DATE == null) {
										dos.writeByte(-1);
									} else {
										dos.writeByte(0);
										dos.writeLong(this.asdd__UPDATE_DATE
												.getTime());
									}

									if (this.asdd__DOWNLOAD_DATE == null) {
										dos.writeByte(-1);
									} else {
										dos.writeByte(0);
										dos.writeLong(this.asdd__DOWNLOAD_DATE
												.getTime());
									}

									if (this.asdd__IMPORT_DATE == null) {
										dos.writeByte(-1);
									} else {
										dos.writeByte(0);
										dos.writeLong(this.asdd__IMPORT_DATE
												.getTime());
									}

									if (this.asdd__SOURCESYSTEM_CD == null) {
										dos.writeInt(-1);
									} else {
										byte[] byteArray = this.asdd__SOURCESYSTEM_CD
												.getBytes();
										dos.writeInt(byteArray.length);
										dos.write(byteArray);
									}

									if (this.asdd__UPLOAD_ID == null) {
										dos.writeInt(-1);
									} else {
										byte[] byteArray = this.asdd__UPLOAD_ID
												.getBytes();
										dos.writeInt(byteArray.length);
										dos.write(byteArray);
									}

									dos.writeObject(this.exprKey_row10__PATIENT_NUM);

								} catch (IOException e) {
									throw new RuntimeException(e);
								}
							}

						} // G_TM_B_001

						org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_7_1> fsi_tMap_7_1 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_7_1>(
								context.folderMain + context.folderOutput + "/"
										+ jobName + "_tMapData_" + pid
										+ "_tMap_7_1", 200000) {
							public SortableRow_tMap_7_1 createRowInstance() {
								return new SortableRow_tMap_7_1();
							}
						};

						fsi_tMap_7_1.initPut();

						/**
						 * [tMap_7_TMAP_OUT begin ] stop
						 */

						/**
						 * [tMap_6_TMAP_IN begin ] start
						 */

						ok_Hash.put("tMap_6_TMAP_IN", false);
						start_Hash.put("tMap_6_TMAP_IN",
								System.currentTimeMillis());
						currentComponent = "tMap_6_TMAP_IN";

						int tos_count_tMap_6_TMAP_IN = 0;

						// ###############################
						// # Lookup's keys initialization
						// ###############################

						// ###############################
						// # Vars initialization
						class Var__tMap_6_TMAP_IN__Struct {
						}
						Var__tMap_6_TMAP_IN__Struct Var__tMap_6_TMAP_IN = new Var__tMap_6_TMAP_IN__Struct();
						// ###############################

						// ###############################
						// # Outputs initialization
						to_pat_mappingStruct to_pat_mapping_tmp = new to_pat_mappingStruct();
						asddStruct asdd_tmp = new asddStruct();
						// ###############################

						/**
						 * [tMap_6_TMAP_IN begin ] stop
						 */
						/**
						 * [tMap_6_TMAP_IN main ] start
						 */

						currentComponent = "tMap_6_TMAP_IN";

						boolean hasCasePrimitiveKeyWithNull_tMap_6_TMAP_IN = false;

						fsi_tMap_6_1.endPut();

						if (to_patient_mapping == null) {
							to_patient_mapping = new to_patient_mappingStruct();
						}

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_6_TMAP_IN = false;
						boolean mainRowRejected_tMap_6_TMAP_IN = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row9"
						// /////////////////////////////////////////////

						SortableRow_tMap_6_1 rsc_tMap_6_1;

						tHash_Lookup_row9.initGet();

						fsi_tMap_6_1.initGet();

						// TEST firstLookupIsPersistentSorted=true
						// isFirstPersistentSortedTable=true

						rejectedInnerJoin_tMap_6_TMAP_IN = false;

						while (fsi_tMap_6_1.hasNext()) { // G_TM_M_250 loop "1"

							// CALL close loop of lookup '1'

							rsc_tMap_6_1 = (SortableRow_tMap_6_1) fsi_tMap_6_1
									.next();
							rsc_tMap_6_1.copyDataTo(to_patient_mapping);

							rejectedInnerJoin_tMap_6_TMAP_IN = rsc_tMap_6_1.is__rejectedInnerJoin;

							boolean forceLooprow9 = false;

							row9Struct row9ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_6_TMAP_IN) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_6_TMAP_IN = false;

								row9HashKey.PATIENT_NUM = rsc_tMap_6_1.exprKey_row9__PATIENT_NUM;

								tHash_Lookup_row9.lookup(row9HashKey);

								if (!tHash_Lookup_row9.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_6_TMAP_IN = true;

									forceLooprow9 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							else { // G 20 - G 21
								forceLooprow9 = true;
							} // G 21

							row9Struct row9 = null;

							while ((tHash_Lookup_row9 != null && tHash_Lookup_row9
									.hasNext()) || forceLooprow9) { // G_TM_M_043

								// CALL close loop of lookup 'row9'

								row9Struct fromLookup_row9 = null;
								row9 = row9Default;

								if (!forceLooprow9) { // G 46

									fromLookup_row9 = tHash_Lookup_row9.next();

									if (fromLookup_row9 != null) {
										row9 = fromLookup_row9;
									}

								} // G 46

								forceLooprow9 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_6_TMAP_IN__Struct Var = Var__tMap_6_TMAP_IN;// ###############################
									// ###############################
									// # Output tables

									to_pat_mapping = null;
									asdd = null;

									if (!rejectedInnerJoin_tMap_6_TMAP_IN) {

										// # Output table : 'to_pat_mapping'
										to_pat_mapping_tmp.PATIENT_IDE = row9.PATIENT_IDE;
										to_pat_mapping_tmp.PATIENT_IDE_SOURCE = row9.PATIENT_IDE_SOURCE;
										to_pat_mapping_tmp.PATIENT_NUM = to_patient_mapping.PATIENT_NUM;
										to_pat_mapping_tmp.PATIENT_IDE_STATUS = row9.PATIENT_IDE_STATUS;
										to_pat_mapping_tmp.UPLOAD_DATE = row9.UPLOAD_DATE;
										to_pat_mapping_tmp.UPDATE_DATE = row9.UPDATE_DATE;
										to_pat_mapping_tmp.DOWNLOAD_DATE = row9.DOWNLOAD_DATE;
										to_pat_mapping_tmp.IMPORT_DATE = row9.IMPORT_DATE;
										to_pat_mapping_tmp.SOURCESYSTEM_CD = row9.SOURCESYSTEM_CD;
										to_pat_mapping_tmp.UPLOAD_ID = row9.UPLOAD_ID;
										to_pat_mapping = to_pat_mapping_tmp;

										// # Output table : 'asdd'
										asdd_tmp.PATIENT_IDE = row9.PATIENT_IDE;
										asdd_tmp.PATIENT_IDE_SOURCE = row9.PATIENT_IDE_SOURCE;
										asdd_tmp.PATIENT_NUM = row9.PATIENT_NUM;
										asdd_tmp.PATIENT_IDE_STATUS = row9.PATIENT_IDE_STATUS;
										asdd_tmp.UPLOAD_DATE = row9.UPLOAD_DATE;
										asdd_tmp.UPDATE_DATE = row9.UPDATE_DATE;
										asdd_tmp.DOWNLOAD_DATE = row9.DOWNLOAD_DATE;
										asdd_tmp.IMPORT_DATE = row9.IMPORT_DATE;
										asdd_tmp.SOURCESYSTEM_CD = row9.SOURCESYSTEM_CD;
										asdd_tmp.UPLOAD_ID = row9.UPLOAD_ID;
										asdd = asdd_tmp;
									} // closing inner join bracket (2)
										// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_6_TMAP_IN = false;

								tos_count_tMap_6_TMAP_IN++;

								/**
								 * [tMap_6_TMAP_IN main ] stop
								 */
								// Start of branch "to_pat_mapping"
								if (to_pat_mapping != null) {

									/**
									 * [tFileOutputDelimited_10 main ] start
									 */

									currentComponent = "tFileOutputDelimited_10";

									String[] rowtFileOutputDelimited_10 = new String[10];

									rowtFileOutputDelimited_10[0] = to_pat_mapping.PATIENT_IDE == null ? ""
											: to_pat_mapping.PATIENT_IDE;

									rowtFileOutputDelimited_10[1] = to_pat_mapping.PATIENT_IDE_SOURCE == null ? ""
											: to_pat_mapping.PATIENT_IDE_SOURCE;

									rowtFileOutputDelimited_10[2] = to_pat_mapping.PATIENT_NUM == null ? ""
											: to_pat_mapping.PATIENT_NUM
													.toPlainString();

									rowtFileOutputDelimited_10[3] = to_pat_mapping.PATIENT_IDE_STATUS == null ? ""
											: to_pat_mapping.PATIENT_IDE_STATUS;

									rowtFileOutputDelimited_10[4] = to_pat_mapping.UPLOAD_DATE == null ? ""
											: FormatterUtils.format_Date(
													to_pat_mapping.UPLOAD_DATE,
													"dd-MM-yyyy");

									rowtFileOutputDelimited_10[5] = to_pat_mapping.UPDATE_DATE == null ? ""
											: FormatterUtils.format_Date(
													to_pat_mapping.UPDATE_DATE,
													"dd-MM-yyyy");

									rowtFileOutputDelimited_10[6] = to_pat_mapping.DOWNLOAD_DATE == null ? ""
											: FormatterUtils
													.format_Date(
															to_pat_mapping.DOWNLOAD_DATE,
															"dd-MM-yyyy");

									rowtFileOutputDelimited_10[7] = to_pat_mapping.IMPORT_DATE == null ? ""
											: FormatterUtils.format_Date(
													to_pat_mapping.IMPORT_DATE,
													"dd-MM-yyyy");

									rowtFileOutputDelimited_10[8] = to_pat_mapping.SOURCESYSTEM_CD == null ? ""
											: to_pat_mapping.SOURCESYSTEM_CD;

									rowtFileOutputDelimited_10[9] = to_pat_mapping.UPLOAD_ID == null ? ""
											: to_pat_mapping.UPLOAD_ID;

									nb_line_tFileOutputDelimited_10++;
									CsvWritertFileOutputDelimited_10
											.writeNext(rowtFileOutputDelimited_10);

									tos_count_tFileOutputDelimited_10++;

									/**
									 * [tFileOutputDelimited_10 main ] stop
									 */

								} // End of branch "to_pat_mapping"

								// Start of branch "asdd"
								if (asdd != null) {

									/**
									 * [tMap_7_TMAP_OUT main ] start
									 */

									currentComponent = "tMap_7_TMAP_OUT";

									boolean hasCasePrimitiveKeyWithNull_tMap_7_TMAP_OUT = false;

									hasCasePrimitiveKeyWithNull_tMap_7_TMAP_OUT = false;

									BigDecimal exprKey_row10__PATIENT_NUM = asdd.PATIENT_NUM;

									SortableRow_tMap_7_1 sortableRow_tMap_7_1 = fsi_tMap_7_1
											.getNextFreeRow();

									sortableRow_tMap_7_1.fillFrom(asdd,
											exprKey_row10__PATIENT_NUM);

									fsi_tMap_7_1.put(sortableRow_tMap_7_1);

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_7_TMAP_OUT = false;
									boolean mainRowRejected_tMap_7_TMAP_OUT = false;

									// ###############################

									tos_count_tMap_7_TMAP_OUT++;

									/**
									 * [tMap_7_TMAP_OUT main ] stop
									 */

								} // End of branch "asdd"

							} // close loop of lookup 'row9' // G_TM_M_043

						} // G_TM_M_250 close loop read file data '1'

						/**
						 * [tMap_6_TMAP_IN end ] start
						 */

						currentComponent = "tMap_6_TMAP_IN";

						// ###############################
						// # Lookup hashes releasing
						fsi_tMap_6_1.endGet();

						if (tHash_Lookup_row9 != null) {
							tHash_Lookup_row9.endGet();
						}
						globalMap.remove("tHash_Lookup_row9");

						// ###############################

						ok_Hash.put("tMap_6_TMAP_IN", true);
						end_Hash.put("tMap_6_TMAP_IN",
								System.currentTimeMillis());

						/**
						 * [tMap_6_TMAP_IN end ] stop
						 */

						/**
						 * [tMap_7_TMAP_OUT end ] start
						 */

						currentComponent = "tMap_7_TMAP_OUT";

						// ###############################
						// # Lookup hashes releasing
						// ###############################

						ok_Hash.put("tMap_7_TMAP_OUT", true);
						end_Hash.put("tMap_7_TMAP_OUT",
								System.currentTimeMillis());

						/**
						 * [tMap_7_TMAP_OUT end ] stop
						 */

						/**
						 * [tFileOutputDelimited_11 begin ] start
						 */

						ok_Hash.put("tFileOutputDelimited_11", false);
						start_Hash.put("tFileOutputDelimited_11",
								System.currentTimeMillis());
						currentComponent = "tFileOutputDelimited_11";

						int tos_count_tFileOutputDelimited_11 = 0;

						String fileName_tFileOutputDelimited_11 = "";
						fileName_tFileOutputDelimited_11 = (new java.io.File(
								((String) globalMap
										.get("tCreateTemporaryFile_12_FILEPATH"))))
								.getAbsolutePath().replace("\\", "/");
						String fullName_tFileOutputDelimited_11 = null;
						String extension_tFileOutputDelimited_11 = null;
						String directory_tFileOutputDelimited_11 = null;
						if ((fileName_tFileOutputDelimited_11.indexOf("/") != -1)) {
							if (fileName_tFileOutputDelimited_11
									.lastIndexOf(".") < fileName_tFileOutputDelimited_11
									.lastIndexOf("/")) {
								fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11;
								extension_tFileOutputDelimited_11 = "";
							} else {
								fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11
										.substring(0,
												fileName_tFileOutputDelimited_11
														.lastIndexOf("."));
								extension_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11
										.substring(fileName_tFileOutputDelimited_11
												.lastIndexOf("."));
							}
							directory_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11
									.substring(0,
											fileName_tFileOutputDelimited_11
													.lastIndexOf("/"));
						} else {
							if (fileName_tFileOutputDelimited_11
									.lastIndexOf(".") != -1) {
								fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11
										.substring(0,
												fileName_tFileOutputDelimited_11
														.lastIndexOf("."));
								extension_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11
										.substring(fileName_tFileOutputDelimited_11
												.lastIndexOf("."));
							} else {
								fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11;
								extension_tFileOutputDelimited_11 = "";
							}
							directory_tFileOutputDelimited_11 = "";
						}
						boolean isFileGenerated_tFileOutputDelimited_11 = true;
						java.io.File filetFileOutputDelimited_11 = new java.io.File(
								fileName_tFileOutputDelimited_11);
						globalMap.put("tFileOutputDelimited_11_FILE_NAME",
								fileName_tFileOutputDelimited_11);

						String[] headColutFileOutputDelimited_11 = new String[19];
						class CSVBasicSet_tFileOutputDelimited_11 {
							private char field_Delim;
							private char row_Delim;
							private char escape;
							private char textEnclosure;
							private boolean useCRLFRecordDelimiter;

							public boolean isUseCRLFRecordDelimiter() {
								return useCRLFRecordDelimiter;
							}

							public void setFieldSeparator(String fieldSep)
									throws IllegalArgumentException {
								char field_Delim_tFileOutputDelimited_11[] = null;

								// support passing value (property: Field
								// Separator) by 'context.fs' or
								// 'globalMap.get("fs")'.
								if (fieldSep.length() > 0) {
									field_Delim_tFileOutputDelimited_11 = fieldSep
											.toCharArray();
								} else {
									throw new IllegalArgumentException(
											"Field Separator must be assigned a char.");
								}
								this.field_Delim = field_Delim_tFileOutputDelimited_11[0];
							}

							public char getFieldDelim() {
								if (this.field_Delim == 0) {
									setFieldSeparator("\t");
								}
								return this.field_Delim;
							}

							public void setRowSeparator(String rowSep) {
								if ("\r\n".equals(rowSep)) {
									useCRLFRecordDelimiter = true;
									return;
								}
								char row_DelimtFileOutputDelimited_11[] = null;

								// support passing value (property: Row
								// Separator) by 'context.rs' or
								// 'globalMap.get("rs")'.
								if (rowSep.length() > 0) {
									row_DelimtFileOutputDelimited_11 = rowSep
											.toCharArray();
								} else {
									throw new IllegalArgumentException(
											"Row Separator must be assigned a char.");
								}
								this.row_Delim = row_DelimtFileOutputDelimited_11[0];
							}

							public char getRowDelim() {
								if (this.row_Delim == 0) {
									setRowSeparator("\n");
								}
								return this.row_Delim;
							}

							public void setEscapeAndTextEnclosure(
									String strEscape, String strTextEnclosure)
									throws IllegalArgumentException {
								if (strEscape.length() <= 0) {
									throw new IllegalArgumentException(
											"Escape Char must be assigned a char.");
								}

								if ("".equals(strTextEnclosure))
									strTextEnclosure = "\0";
								char textEnclosure_tFileOutputDelimited_11[] = null;

								if (strTextEnclosure.length() > 0) {
									textEnclosure_tFileOutputDelimited_11 = strTextEnclosure
											.toCharArray();
								} else {
									throw new IllegalArgumentException(
											"Text Enclosure must be assigned a char.");
								}

								this.textEnclosure = textEnclosure_tFileOutputDelimited_11[0];

								if (("\\").equals(strEscape)) {
									this.escape = '\\';
								} else if (strEscape.equals(strTextEnclosure)) {
									this.escape = this.textEnclosure;
								} else {
									// the default escape mode is double escape
									this.escape = this.textEnclosure;
								}

							}

							public char getEscapeChar() {
								return (char) this.escape;
							}

							public char getTextEnclosure() {
								return this.textEnclosure;
							}
						}

						int nb_line_tFileOutputDelimited_11 = 0;
						int splitEvery_tFileOutputDelimited_11 = 1000;
						int splitedFileNo_tFileOutputDelimited_11 = 0;
						int currentRow_tFileOutputDelimited_11 = 0;

						CSVBasicSet_tFileOutputDelimited_11 csvSettings_tFileOutputDelimited_11 = new CSVBasicSet_tFileOutputDelimited_11();
						csvSettings_tFileOutputDelimited_11
								.setFieldSeparator("\t");
						csvSettings_tFileOutputDelimited_11
								.setRowSeparator("\n");
						csvSettings_tFileOutputDelimited_11
								.setEscapeAndTextEnclosure("\"", "\"");
						// create directory only if not exists
						if (directory_tFileOutputDelimited_11 != null
								&& directory_tFileOutputDelimited_11.trim()
										.length() != 0) {
							java.io.File dir_tFileOutputDelimited_11 = new java.io.File(
									directory_tFileOutputDelimited_11);
							if (!dir_tFileOutputDelimited_11.exists()) {
								dir_tFileOutputDelimited_11.mkdirs();
							}
						}
						com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_11 = null;
						try {
							CsvWritertFileOutputDelimited_11 = new com.talend.csv.CSVWriter(
									new java.io.BufferedWriter(
											new java.io.OutputStreamWriter(
													new java.io.FileOutputStream(
															fileName_tFileOutputDelimited_11,
															false), "UTF-8")));
							CsvWritertFileOutputDelimited_11
									.setSeparator(csvSettings_tFileOutputDelimited_11
											.getFieldDelim());

							if (!csvSettings_tFileOutputDelimited_11
									.isUseCRLFRecordDelimiter()
									&& csvSettings_tFileOutputDelimited_11
											.getRowDelim() != '\r'
									&& csvSettings_tFileOutputDelimited_11
											.getRowDelim() != '\n') {
								CsvWritertFileOutputDelimited_11.setLineEnd(""
										+ csvSettings_tFileOutputDelimited_11
												.getRowDelim());
							}

							CsvWritertFileOutputDelimited_11
									.setEscapeChar(csvSettings_tFileOutputDelimited_11
											.getEscapeChar());
							CsvWritertFileOutputDelimited_11
									.setQuoteChar(csvSettings_tFileOutputDelimited_11
											.getTextEnclosure());
							CsvWritertFileOutputDelimited_11
									.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

							/**
							 * [tFileOutputDelimited_11 begin ] stop
							 */

							/**
							 * [tMap_7_TMAP_IN begin ] start
							 */

							ok_Hash.put("tMap_7_TMAP_IN", false);
							start_Hash.put("tMap_7_TMAP_IN",
									System.currentTimeMillis());
							currentComponent = "tMap_7_TMAP_IN";

							int tos_count_tMap_7_TMAP_IN = 0;

							// ###############################
							// # Lookup's keys initialization
							// ###############################

							// ###############################
							// # Vars initialization
							class Var__tMap_7_TMAP_IN__Struct {
							}
							Var__tMap_7_TMAP_IN__Struct Var__tMap_7_TMAP_IN = new Var__tMap_7_TMAP_IN__Struct();
							// ###############################

							// ###############################
							// # Outputs initialization
							asdStruct asd_tmp = new asdStruct();
							// ###############################

							/**
							 * [tMap_7_TMAP_IN begin ] stop
							 */
							/**
							 * [tMap_7_TMAP_IN main ] start
							 */

							currentComponent = "tMap_7_TMAP_IN";

							boolean hasCasePrimitiveKeyWithNull_tMap_7_TMAP_IN = false;

							fsi_tMap_7_1.endPut();

							if (asdd == null) {
								asdd = new asddStruct();
							}

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_7_TMAP_IN = false;
							boolean mainRowRejected_tMap_7_TMAP_IN = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row10"
							// /////////////////////////////////////////////

							SortableRow_tMap_7_1 rsc_tMap_7_1;

							tHash_Lookup_row10.initGet();

							fsi_tMap_7_1.initGet();

							// TEST firstLookupIsPersistentSorted=true
							// isFirstPersistentSortedTable=true

							rejectedInnerJoin_tMap_7_TMAP_IN = false;

							while (fsi_tMap_7_1.hasNext()) { // G_TM_M_250 loop
																// "1"

								// CALL close loop of lookup '1'

								rsc_tMap_7_1 = (SortableRow_tMap_7_1) fsi_tMap_7_1
										.next();
								rsc_tMap_7_1.copyDataTo(asdd);

								rejectedInnerJoin_tMap_7_TMAP_IN = rsc_tMap_7_1.is__rejectedInnerJoin;

								boolean forceLooprow10 = false;

								row10Struct row10ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_7_TMAP_IN) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_7_TMAP_IN = false;

									row10HashKey.PATIENT_NUM = rsc_tMap_7_1.exprKey_row10__PATIENT_NUM;

									tHash_Lookup_row10.lookup(row10HashKey);

								} // G_TM_M_020

								row10Struct row10 = null;

								row10Struct fromLookup_row10 = null;
								row10 = row10Default;

								if (tHash_Lookup_row10 != null
										&& tHash_Lookup_row10.hasNext()) { // G
																			// 099

									fromLookup_row10 = tHash_Lookup_row10
											.next();

								} // G 099

								if (fromLookup_row10 != null) {
									row10 = fromLookup_row10;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_7_TMAP_IN__Struct Var = Var__tMap_7_TMAP_IN;// ###############################
									// ###############################
									// # Output tables

									asd = null;

									// # Output table : 'asd'
									asd_tmp.PATIENT_NUM = row10.PATIENT_NUM;
									asd_tmp.VITAL_STATUS_CD = row10.VITAL_STATUS_CD;
									asd_tmp.BIRTH_DATE = row10.BIRTH_DATE;
									asd_tmp.DEATH_DATE = row10.DEATH_DATE;
									asd_tmp.SEX_CD = row10.SEX_CD;
									asd_tmp.AGE_IN_YEARS_NUM = row10.AGE_IN_YEARS_NUM;
									asd_tmp.LANGUAGE_CD = row10.LANGUAGE_CD;
									asd_tmp.RACE_CD = row10.RACE_CD;
									asd_tmp.MARITAL_STATUS_CD = row10.MARITAL_STATUS_CD;
									asd_tmp.RELIGION_CD = row10.RELIGION_CD;
									asd_tmp.ZIP_CD = row10.ZIP_CD;
									asd_tmp.STATECITYZIP_PATH = row10.STATECITYZIP_PATH;
									asd_tmp.INCOME_CD = row10.INCOME_CD;
									asd_tmp.PATIENT_BLOB = row10.PATIENT_BLOB;
									asd_tmp.UPDATE_DATE = row10.UPDATE_DATE;
									asd_tmp.DOWNLOAD_DATE = row10.DOWNLOAD_DATE;
									asd_tmp.IMPORT_DATE = row10.IMPORT_DATE;
									asd_tmp.SOURCESYSTEM_CD = row10.SOURCESYSTEM_CD;
									asd_tmp.UPLOAD_ID = row10.UPLOAD_ID;
									asd = asd_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_7_TMAP_IN = false;

								tos_count_tMap_7_TMAP_IN++;

								/**
								 * [tMap_7_TMAP_IN main ] stop
								 */
								// Start of branch "asd"
								if (asd != null) {

									/**
									 * [tFileOutputDelimited_11 main ] start
									 */

									currentComponent = "tFileOutputDelimited_11";

									String[] rowtFileOutputDelimited_11 = new String[19];

									rowtFileOutputDelimited_11[0] = asd.PATIENT_NUM == null ? ""
											: asd.PATIENT_NUM.toPlainString();

									rowtFileOutputDelimited_11[1] = asd.VITAL_STATUS_CD == null ? ""
											: asd.VITAL_STATUS_CD;

									rowtFileOutputDelimited_11[2] = asd.BIRTH_DATE == null ? ""
											: asd.BIRTH_DATE;

									rowtFileOutputDelimited_11[3] = asd.DEATH_DATE == null ? ""
											: asd.DEATH_DATE;

									rowtFileOutputDelimited_11[4] = asd.SEX_CD == null ? ""
											: asd.SEX_CD;

									rowtFileOutputDelimited_11[5] = asd.AGE_IN_YEARS_NUM == null ? ""
											: asd.AGE_IN_YEARS_NUM;

									rowtFileOutputDelimited_11[6] = asd.LANGUAGE_CD == null ? ""
											: asd.LANGUAGE_CD;

									rowtFileOutputDelimited_11[7] = asd.RACE_CD == null ? ""
											: asd.RACE_CD;

									rowtFileOutputDelimited_11[8] = asd.MARITAL_STATUS_CD == null ? ""
											: asd.MARITAL_STATUS_CD;

									rowtFileOutputDelimited_11[9] = asd.RELIGION_CD == null ? ""
											: asd.RELIGION_CD;

									rowtFileOutputDelimited_11[10] = asd.ZIP_CD == null ? ""
											: asd.ZIP_CD;

									rowtFileOutputDelimited_11[11] = asd.STATECITYZIP_PATH == null ? ""
											: asd.STATECITYZIP_PATH;

									rowtFileOutputDelimited_11[12] = asd.INCOME_CD == null ? ""
											: asd.INCOME_CD;

									rowtFileOutputDelimited_11[13] = asd.PATIENT_BLOB == null ? ""
											: asd.PATIENT_BLOB;

									rowtFileOutputDelimited_11[14] = asd.UPDATE_DATE == null ? ""
											: FormatterUtils.format_Date(
													asd.UPDATE_DATE,
													"dd-MM-yyyy");

									rowtFileOutputDelimited_11[15] = asd.DOWNLOAD_DATE == null ? ""
											: FormatterUtils.format_Date(
													asd.DOWNLOAD_DATE,
													"dd-MM-yyyy");

									rowtFileOutputDelimited_11[16] = asd.IMPORT_DATE == null ? ""
											: FormatterUtils.format_Date(
													asd.IMPORT_DATE,
													"dd-MM-yyyy");

									rowtFileOutputDelimited_11[17] = asd.SOURCESYSTEM_CD == null ? ""
											: asd.SOURCESYSTEM_CD;

									rowtFileOutputDelimited_11[18] = asd.UPLOAD_ID == null ? ""
											: asd.UPLOAD_ID;

									nb_line_tFileOutputDelimited_11++;
									CsvWritertFileOutputDelimited_11
											.writeNext(rowtFileOutputDelimited_11);

									tos_count_tFileOutputDelimited_11++;

									/**
									 * [tFileOutputDelimited_11 main ] stop
									 */

								} // End of branch "asd"

							} // G_TM_M_250 close loop read file data '1'

							/**
							 * [tMap_7_TMAP_IN end ] start
							 */

							currentComponent = "tMap_7_TMAP_IN";

							// ###############################
							// # Lookup hashes releasing
							fsi_tMap_7_1.endGet();

							if (tHash_Lookup_row10 != null) {
								tHash_Lookup_row10.endGet();
							}
							globalMap.remove("tHash_Lookup_row10");

							// ###############################

							ok_Hash.put("tMap_7_TMAP_IN", true);
							end_Hash.put("tMap_7_TMAP_IN",
									System.currentTimeMillis());

							/**
							 * [tMap_7_TMAP_IN end ] stop
							 */

							/**
							 * [tFileOutputDelimited_11 end ] start
							 */

							currentComponent = "tFileOutputDelimited_11";

						} finally {

							if (CsvWritertFileOutputDelimited_11 != null) {
								CsvWritertFileOutputDelimited_11.close();
							}
							globalMap.put("tFileOutputDelimited_11_NB_LINE",
									nb_line_tFileOutputDelimited_11);
						} // finally

						ok_Hash.put("tFileOutputDelimited_11", true);
						end_Hash.put("tFileOutputDelimited_11",
								System.currentTimeMillis());

						/**
						 * [tFileOutputDelimited_11 end ] stop
						 */

						/**
						 * [tFileOutputDelimited_10 end ] start
						 */

						currentComponent = "tFileOutputDelimited_10";

					} finally {

						if (CsvWritertFileOutputDelimited_10 != null) {
							CsvWritertFileOutputDelimited_10.close();
						}
						globalMap.put("tFileOutputDelimited_10_NB_LINE",
								nb_line_tFileOutputDelimited_10);
					} // finally

					ok_Hash.put("tFileOutputDelimited_10", true);
					end_Hash.put("tFileOutputDelimited_10",
							System.currentTimeMillis());

					/**
					 * [tFileOutputDelimited_10 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_6 end ] start
					 */

					currentComponent = "tFileOutputDelimited_6";

				} finally {

					if (CsvWritertFileOutputDelimited_6 != null) {
						CsvWritertFileOutputDelimited_6.close();
					}
					globalMap.put("tFileOutputDelimited_6_NB_LINE",
							nb_line_tFileOutputDelimited_6);
				} // finally

				ok_Hash.put("tFileOutputDelimited_6", true);
				end_Hash.put("tFileOutputDelimited_6",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_6 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_5:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_15Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 1);
	}

	public void tJava_15Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_15 begin ] start
				 */

				ok_Hash.put("tJava_15", false);
				start_Hash.put("tJava_15", System.currentTimeMillis());
				currentComponent = "tJava_15";

				int tos_count_tJava_15 = 0;

				System.out.println("Extracting Modifier Data...");
				StatusListener.setStatus(60, "Transforming Staging to Target",
						"");

				/**
				 * [tJava_15 begin ] stop
				 */
				/**
				 * [tJava_15 main ] start
				 */

				currentComponent = "tJava_15";

				tos_count_tJava_15++;

				/**
				 * [tJava_15 main ] stop
				 */
				/**
				 * [tJava_15 end ] start
				 */

				currentComponent = "tJava_15";

				ok_Hash.put("tJava_15", true);
				end_Hash.put("tJava_15", System.currentTimeMillis());

				/**
				 * [tJava_15 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_15:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_16Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_15_SUBPROCESS_STATE", 1);
	}

	public static class copyOfasdStruct implements
			routines.system.IPersistableRow<copyOfasdStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String VITAL_STATUS_CD;

		public String getVITAL_STATUS_CD() {
			return this.VITAL_STATUS_CD;
		}

		public String BIRTH_DATE;

		public String getBIRTH_DATE() {
			return this.BIRTH_DATE;
		}

		public String DEATH_DATE;

		public String getDEATH_DATE() {
			return this.DEATH_DATE;
		}

		public String SEX_CD;

		public String getSEX_CD() {
			return this.SEX_CD;
		}

		public String AGE_IN_YEARS_NUM;

		public String getAGE_IN_YEARS_NUM() {
			return this.AGE_IN_YEARS_NUM;
		}

		public String LANGUAGE_CD;

		public String getLANGUAGE_CD() {
			return this.LANGUAGE_CD;
		}

		public String RACE_CD;

		public String getRACE_CD() {
			return this.RACE_CD;
		}

		public String MARITAL_STATUS_CD;

		public String getMARITAL_STATUS_CD() {
			return this.MARITAL_STATUS_CD;
		}

		public String RELIGION_CD;

		public String getRELIGION_CD() {
			return this.RELIGION_CD;
		}

		public String ZIP_CD;

		public String getZIP_CD() {
			return this.ZIP_CD;
		}

		public String STATECITYZIP_PATH;

		public String getSTATECITYZIP_PATH() {
			return this.STATECITYZIP_PATH;
		}

		public String INCOME_CD;

		public String getINCOME_CD() {
			return this.INCOME_CD;
		}

		public String PATIENT_BLOB;

		public String getPATIENT_BLOB() {
			return this.PATIENT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.VITAL_STATUS_CD = readString(dis);

					this.BIRTH_DATE = readString(dis);

					this.DEATH_DATE = readString(dis);

					this.SEX_CD = readString(dis);

					this.AGE_IN_YEARS_NUM = readString(dis);

					this.LANGUAGE_CD = readString(dis);

					this.RACE_CD = readString(dis);

					this.MARITAL_STATUS_CD = readString(dis);

					this.RELIGION_CD = readString(dis);

					this.ZIP_CD = readString(dis);

					this.STATECITYZIP_PATH = readString(dis);

					this.INCOME_CD = readString(dis);

					this.PATIENT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.VITAL_STATUS_CD, dos);

				// String

				writeString(this.BIRTH_DATE, dos);

				// String

				writeString(this.DEATH_DATE, dos);

				// String

				writeString(this.SEX_CD, dos);

				// String

				writeString(this.AGE_IN_YEARS_NUM, dos);

				// String

				writeString(this.LANGUAGE_CD, dos);

				// String

				writeString(this.RACE_CD, dos);

				// String

				writeString(this.MARITAL_STATUS_CD, dos);

				// String

				writeString(this.RELIGION_CD, dos);

				// String

				writeString(this.ZIP_CD, dos);

				// String

				writeString(this.STATECITYZIP_PATH, dos);

				// String

				writeString(this.INCOME_CD, dos);

				// String

				writeString(this.PATIENT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",VITAL_STATUS_CD=" + VITAL_STATUS_CD);
			sb.append(",BIRTH_DATE=" + BIRTH_DATE);
			sb.append(",DEATH_DATE=" + DEATH_DATE);
			sb.append(",SEX_CD=" + SEX_CD);
			sb.append(",AGE_IN_YEARS_NUM=" + AGE_IN_YEARS_NUM);
			sb.append(",LANGUAGE_CD=" + LANGUAGE_CD);
			sb.append(",RACE_CD=" + RACE_CD);
			sb.append(",MARITAL_STATUS_CD=" + MARITAL_STATUS_CD);
			sb.append(",RELIGION_CD=" + RELIGION_CD);
			sb.append(",ZIP_CD=" + ZIP_CD);
			sb.append(",STATECITYZIP_PATH=" + STATECITYZIP_PATH);
			sb.append(",INCOME_CD=" + INCOME_CD);
			sb.append(",PATIENT_BLOB=" + PATIENT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfasdStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfto_pat_mappingStruct implements
			routines.system.IPersistableRow<copyOfto_pat_mappingStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.PATIENT_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfto_pat_mappingStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfasddStruct implements
			routines.system.IPersistableRow<copyOfasddStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.PATIENT_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfasddStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfto_trgt_obsStruct implements
			routines.system.IPersistableRow<copyOfto_trgt_obsStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readDate(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readDate(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfto_trgt_obsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfto_patient_mappingStruct implements
			routines.system.IPersistableRow<copyOfto_patient_mappingStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfto_patient_mappingStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row34Struct implements
			routines.system.IPersistableRow<row34Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readDate(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readDate(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row34Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfasdddStruct implements
			routines.system.IPersistableRow<copyOfasdddStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public String START_DATE;

		public String getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public String END_DATE;

		public String getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readString(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// String

				writeString(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// String

				writeString(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + START_DATE);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + END_DATE);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfasdddStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfout1Struct implements
			routines.system.IPersistableRow<copyOfout1Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public String START_DATE;

		public String getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public String END_DATE;

		public String getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		public String ENDDATE_SOURCE_PATH;

		public String getENDDATE_SOURCE_PATH() {
			return this.ENDDATE_SOURCE_PATH;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readString(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

					this.ENDDATE_SOURCE_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// String

				writeString(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// String

				writeString(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

				// String

				writeString(this.ENDDATE_SOURCE_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + START_DATE);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + END_DATE);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append(",ENDDATE_SOURCE_PATH=" + ENDDATE_SOURCE_PATH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfout1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfto_obs_fctStruct implements
			routines.system.IPersistableRow<copyOfto_obs_fctStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public String START_DATE;

		public String getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public String END_DATE;

		public String getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		public String STARTDATE_SOURCE_PATH;

		public String getSTARTDATE_SOURCE_PATH() {
			return this.STARTDATE_SOURCE_PATH;
		}

		public String ENDDATE_SOURCE_PATH;

		public String getENDDATE_SOURCE_PATH() {
			return this.ENDDATE_SOURCE_PATH;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readString(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

					this.STARTDATE_SOURCE_PATH = readString(dis);

					this.ENDDATE_SOURCE_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// String

				writeString(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// String

				writeString(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

				// String

				writeString(this.STARTDATE_SOURCE_PATH, dos);

				// String

				writeString(this.ENDDATE_SOURCE_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + START_DATE);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + END_DATE);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append(",STARTDATE_SOURCE_PATH=" + STARTDATE_SOURCE_PATH);
			sb.append(",ENDDATE_SOURCE_PATH=" + ENDDATE_SOURCE_PATH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfto_obs_fctStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfto_tmapStruct implements
			routines.system.IPersistableRow<copyOfto_tmapStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String TREE_PATH;

		public String getTREE_PATH() {
			return this.TREE_PATH;
		}

		public String STAGING_PATH;

		public String getSTAGING_PATH() {
			return this.STAGING_PATH;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String MODIFIER_BLOB;

		public String getMODIFIER_BLOB() {
			return this.MODIFIER_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		public String STARTDATE_SOURCE_PATH;

		public String getSTARTDATE_SOURCE_PATH() {
			return this.STARTDATE_SOURCE_PATH;
		}

		public String ENDDATE_SOURCE_PATH;

		public String getENDDATE_SOURCE_PATH() {
			return this.ENDDATE_SOURCE_PATH;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public String BASECODE;

		public String getBASECODE() {
			return this.BASECODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.TREE_PATH = readString(dis);

					this.STAGING_PATH = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.MODIFIER_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

					this.STARTDATE_SOURCE_PATH = readString(dis);

					this.ENDDATE_SOURCE_PATH = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.BASECODE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.TREE_PATH, dos);

				// String

				writeString(this.STAGING_PATH, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.MODIFIER_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

				// String

				writeString(this.STARTDATE_SOURCE_PATH, dos);

				// String

				writeString(this.ENDDATE_SOURCE_PATH, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// String

				writeString(this.BASECODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TREE_PATH=" + TREE_PATH);
			sb.append(",STAGING_PATH=" + STAGING_PATH);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",MODIFIER_BLOB=" + MODIFIER_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append(",STARTDATE_SOURCE_PATH=" + STARTDATE_SOURCE_PATH);
			sb.append(",ENDDATE_SOURCE_PATH=" + ENDDATE_SOURCE_PATH);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",BASECODE=" + BASECODE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfto_tmapStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row28Struct implements
			routines.system.IPersistableRow<row28Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public Integer TARGET_ID;

		public Integer getTARGET_ID() {
			return this.TARGET_ID;
		}

		public Integer TREE_LEVEL;

		public Integer getTREE_LEVEL() {
			return this.TREE_LEVEL;
		}

		public String TREE_PATH;

		public String getTREE_PATH() {
			return this.TREE_PATH;
		}

		public String STAGING_PATH;

		public String getSTAGING_PATH() {
			return this.STAGING_PATH;
		}

		public String STAGING_DIMENSION;

		public String getSTAGING_DIMENSION() {
			return this.STAGING_DIMENSION;
		}

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		public String STARTDATE_STAGING_PATH;

		public String getSTARTDATE_STAGING_PATH() {
			return this.STARTDATE_STAGING_PATH;
		}

		public String ENDDATE_STAGING_PATH;

		public String getENDDATE_STAGING_PATH() {
			return this.ENDDATE_STAGING_PATH;
		}

		public String VISUALATTRIBUTES;

		public String getVISUALATTRIBUTES() {
			return this.VISUALATTRIBUTES;
		}

		public String BASECODE;

		public String getBASECODE() {
			return this.BASECODE;
		}

		public String METADATAXML;

		public String getMETADATAXML() {
			return this.METADATAXML;
		}

		public String COLUMNDATATYPE;

		public String getCOLUMNDATATYPE() {
			return this.COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String TOOLTIP;

		public String getTOOLTIP() {
			return this.TOOLTIP;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.TARGET_ID = readInteger(dis);

					this.TREE_LEVEL = readInteger(dis);

					this.TREE_PATH = readString(dis);

					this.STAGING_PATH = readString(dis);

					this.STAGING_DIMENSION = readString(dis);

					this.NAME = readString(dis);

					this.STARTDATE_STAGING_PATH = readString(dis);

					this.ENDDATE_STAGING_PATH = readString(dis);

					this.VISUALATTRIBUTES = readString(dis);

					this.BASECODE = readString(dis);

					this.METADATAXML = readString(dis);

					this.COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_COMMENT = readString(dis);

					this.TOOLTIP = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.TARGET_ID, dos);

				// Integer

				writeInteger(this.TREE_LEVEL, dos);

				// String

				writeString(this.TREE_PATH, dos);

				// String

				writeString(this.STAGING_PATH, dos);

				// String

				writeString(this.STAGING_DIMENSION, dos);

				// String

				writeString(this.NAME, dos);

				// String

				writeString(this.STARTDATE_STAGING_PATH, dos);

				// String

				writeString(this.ENDDATE_STAGING_PATH, dos);

				// String

				writeString(this.VISUALATTRIBUTES, dos);

				// String

				writeString(this.BASECODE, dos);

				// String

				writeString(this.METADATAXML, dos);

				// String

				writeString(this.COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.TOOLTIP, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TARGET_ID=" + String.valueOf(TARGET_ID));
			sb.append(",TREE_LEVEL=" + String.valueOf(TREE_LEVEL));
			sb.append(",TREE_PATH=" + TREE_PATH);
			sb.append(",STAGING_PATH=" + STAGING_PATH);
			sb.append(",STAGING_DIMENSION=" + STAGING_DIMENSION);
			sb.append(",NAME=" + NAME);
			sb.append(",STARTDATE_STAGING_PATH=" + STARTDATE_STAGING_PATH);
			sb.append(",ENDDATE_STAGING_PATH=" + ENDDATE_STAGING_PATH);
			sb.append(",VISUALATTRIBUTES=" + VISUALATTRIBUTES);
			sb.append(",BASECODE=" + BASECODE);
			sb.append(",METADATAXML=" + METADATAXML);
			sb.append(",COLUMNDATATYPE=" + COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",TOOLTIP=" + TOOLTIP);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row28Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_16Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_16Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public Integer TARGET_ID;

		public Integer getTARGET_ID() {
			return this.TARGET_ID;
		}

		public Integer TREE_LEVEL;

		public Integer getTREE_LEVEL() {
			return this.TREE_LEVEL;
		}

		public String TREE_PATH;

		public String getTREE_PATH() {
			return this.TREE_PATH;
		}

		public String STAGING_PATH;

		public String getSTAGING_PATH() {
			return this.STAGING_PATH;
		}

		public String STAGING_DIMENSION;

		public String getSTAGING_DIMENSION() {
			return this.STAGING_DIMENSION;
		}

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		public String STARTDATE_STAGING_PATH;

		public String getSTARTDATE_STAGING_PATH() {
			return this.STARTDATE_STAGING_PATH;
		}

		public String ENDDATE_STAGING_PATH;

		public String getENDDATE_STAGING_PATH() {
			return this.ENDDATE_STAGING_PATH;
		}

		public String VISUALATTRIBUTES;

		public String getVISUALATTRIBUTES() {
			return this.VISUALATTRIBUTES;
		}

		public String BASECODE;

		public String getBASECODE() {
			return this.BASECODE;
		}

		public String METADATAXML;

		public String getMETADATAXML() {
			return this.METADATAXML;
		}

		public String COLUMNDATATYPE;

		public String getCOLUMNDATATYPE() {
			return this.COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String TOOLTIP;

		public String getTOOLTIP() {
			return this.TOOLTIP;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.TARGET_ID = readInteger(dis);

					this.TREE_LEVEL = readInteger(dis);

					this.TREE_PATH = readString(dis);

					this.STAGING_PATH = readString(dis);

					this.STAGING_DIMENSION = readString(dis);

					this.NAME = readString(dis);

					this.STARTDATE_STAGING_PATH = readString(dis);

					this.ENDDATE_STAGING_PATH = readString(dis);

					this.VISUALATTRIBUTES = readString(dis);

					this.BASECODE = readString(dis);

					this.METADATAXML = readString(dis);

					this.COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_COMMENT = readString(dis);

					this.TOOLTIP = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.TARGET_ID, dos);

				// Integer

				writeInteger(this.TREE_LEVEL, dos);

				// String

				writeString(this.TREE_PATH, dos);

				// String

				writeString(this.STAGING_PATH, dos);

				// String

				writeString(this.STAGING_DIMENSION, dos);

				// String

				writeString(this.NAME, dos);

				// String

				writeString(this.STARTDATE_STAGING_PATH, dos);

				// String

				writeString(this.ENDDATE_STAGING_PATH, dos);

				// String

				writeString(this.VISUALATTRIBUTES, dos);

				// String

				writeString(this.BASECODE, dos);

				// String

				writeString(this.METADATAXML, dos);

				// String

				writeString(this.COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.TOOLTIP, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TARGET_ID=" + String.valueOf(TARGET_ID));
			sb.append(",TREE_LEVEL=" + String.valueOf(TREE_LEVEL));
			sb.append(",TREE_PATH=" + TREE_PATH);
			sb.append(",STAGING_PATH=" + STAGING_PATH);
			sb.append(",STAGING_DIMENSION=" + STAGING_DIMENSION);
			sb.append(",NAME=" + NAME);
			sb.append(",STARTDATE_STAGING_PATH=" + STARTDATE_STAGING_PATH);
			sb.append(",ENDDATE_STAGING_PATH=" + ENDDATE_STAGING_PATH);
			sb.append(",VISUALATTRIBUTES=" + VISUALATTRIBUTES);
			sb.append(",BASECODE=" + BASECODE);
			sb.append(",METADATAXML=" + METADATAXML);
			sb.append(",COLUMNDATATYPE=" + COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",TOOLTIP=" + TOOLTIP);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_16Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_15Process(globalMap);
				tFileInputDelimited_17Process(globalMap);
				tFileInputDelimited_19Process(globalMap);
				tFileInputDelimited_20Process(globalMap);
				tFileInputDelimited_21Process(globalMap);
				tFileInputDelimited_22Process(globalMap);
				tFileInputDelimited_23Process(globalMap);
				tFileInputDelimited_25Process(globalMap);

				row28Struct row28 = new row28Struct();
				copyOfto_tmapStruct copyOfto_tmap = new copyOfto_tmapStruct();
				copyOfto_obs_fctStruct copyOfto_obs_fct = new copyOfto_obs_fctStruct();
				copyOfout1Struct copyOfout1 = new copyOfout1Struct();
				copyOfasdddStruct copyOfasddd = new copyOfasdddStruct();
				row34Struct row34 = new row34Struct();
				copyOfto_trgt_obsStruct copyOfto_trgt_obs = new copyOfto_trgt_obsStruct();
				copyOfto_patient_mappingStruct copyOfto_patient_mapping = new copyOfto_patient_mappingStruct();
				copyOfto_pat_mappingStruct copyOfto_pat_mapping = new copyOfto_pat_mappingStruct();
				copyOfasddStruct copyOfasdd = new copyOfasddStruct();
				copyOfasdStruct copyOfasd = new copyOfasdStruct();

				/**
				 * [tMap_12_TMAP_OUT begin ] start
				 */

				ok_Hash.put("tMap_12_TMAP_OUT", false);
				start_Hash.put("tMap_12_TMAP_OUT", System.currentTimeMillis());
				currentComponent = "tMap_12_TMAP_OUT";

				int tos_count_tMap_12_TMAP_OUT = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row27Struct> tHash_Lookup_row27 = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row27Struct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row27Struct>) globalMap
						.get("tHash_Lookup_row27"));

				row27Struct row27HashKey = new row27Struct();
				row27Struct row27Default = new row27Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_12_TMAP_OUT__Struct {
				}
				Var__tMap_12_TMAP_OUT__Struct Var__tMap_12_TMAP_OUT = new Var__tMap_12_TMAP_OUT__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				// ###############################

				class SortableRow_tMap_12_1 implements
						Comparable<SortableRow_tMap_12_1>,
						routines.system.IPersistableRow<SortableRow_tMap_12_1> { // G_TM_B_001

					boolean is__rejectedInnerJoin;

					String exprKey_row27__MODIFIER_PATH;

					// row28
					Integer row28__TARGET_ID;
					Integer row28__TREE_LEVEL;
					String row28__TREE_PATH;
					String row28__STAGING_PATH;
					String row28__STAGING_DIMENSION;
					String row28__NAME;
					String row28__STARTDATE_STAGING_PATH;
					String row28__ENDDATE_STAGING_PATH;
					String row28__VISUALATTRIBUTES;
					String row28__BASECODE;
					String row28__METADATAXML;
					String row28__COLUMNDATATYPE;
					String row28__C_OPERATOR;
					String row28__C_COMMENT;
					String row28__TOOLTIP;
					java.util.Date row28__UPDATE_DATE;
					java.util.Date row28__DOWNLOAD_DATE;
					java.util.Date row28__IMPORT_DATE;
					String row28__SOURCESYSTEM_CD;
					String row28__VALUETYPE_CD;
					String row28__M_APPLIED_PATH;

					public void fillFrom(row28Struct row28,
							String exprKey_row27__MODIFIER_PATH) {

						this.row28__TARGET_ID = row28.TARGET_ID;
						this.row28__TREE_LEVEL = row28.TREE_LEVEL;
						this.row28__TREE_PATH = row28.TREE_PATH;
						this.row28__STAGING_PATH = row28.STAGING_PATH;
						this.row28__STAGING_DIMENSION = row28.STAGING_DIMENSION;
						this.row28__NAME = row28.NAME;
						this.row28__STARTDATE_STAGING_PATH = row28.STARTDATE_STAGING_PATH;
						this.row28__ENDDATE_STAGING_PATH = row28.ENDDATE_STAGING_PATH;
						this.row28__VISUALATTRIBUTES = row28.VISUALATTRIBUTES;
						this.row28__BASECODE = row28.BASECODE;
						this.row28__METADATAXML = row28.METADATAXML;
						this.row28__COLUMNDATATYPE = row28.COLUMNDATATYPE;
						this.row28__C_OPERATOR = row28.C_OPERATOR;
						this.row28__C_COMMENT = row28.C_COMMENT;
						this.row28__TOOLTIP = row28.TOOLTIP;
						this.row28__UPDATE_DATE = row28.UPDATE_DATE;
						this.row28__DOWNLOAD_DATE = row28.DOWNLOAD_DATE;
						this.row28__IMPORT_DATE = row28.IMPORT_DATE;
						this.row28__SOURCESYSTEM_CD = row28.SOURCESYSTEM_CD;
						this.row28__VALUETYPE_CD = row28.VALUETYPE_CD;
						this.row28__M_APPLIED_PATH = row28.M_APPLIED_PATH;
						this.exprKey_row27__MODIFIER_PATH = exprKey_row27__MODIFIER_PATH;

					}

					public void copyDataTo(row28Struct row28) {

						row28.TARGET_ID = this.row28__TARGET_ID;
						row28.TREE_LEVEL = this.row28__TREE_LEVEL;
						row28.TREE_PATH = this.row28__TREE_PATH;
						row28.STAGING_PATH = this.row28__STAGING_PATH;
						row28.STAGING_DIMENSION = this.row28__STAGING_DIMENSION;
						row28.NAME = this.row28__NAME;
						row28.STARTDATE_STAGING_PATH = this.row28__STARTDATE_STAGING_PATH;
						row28.ENDDATE_STAGING_PATH = this.row28__ENDDATE_STAGING_PATH;
						row28.VISUALATTRIBUTES = this.row28__VISUALATTRIBUTES;
						row28.BASECODE = this.row28__BASECODE;
						row28.METADATAXML = this.row28__METADATAXML;
						row28.COLUMNDATATYPE = this.row28__COLUMNDATATYPE;
						row28.C_OPERATOR = this.row28__C_OPERATOR;
						row28.C_COMMENT = this.row28__C_COMMENT;
						row28.TOOLTIP = this.row28__TOOLTIP;
						row28.UPDATE_DATE = this.row28__UPDATE_DATE;
						row28.DOWNLOAD_DATE = this.row28__DOWNLOAD_DATE;
						row28.IMPORT_DATE = this.row28__IMPORT_DATE;
						row28.SOURCESYSTEM_CD = this.row28__SOURCESYSTEM_CD;
						row28.VALUETYPE_CD = this.row28__VALUETYPE_CD;
						row28.M_APPLIED_PATH = this.row28__M_APPLIED_PATH;

					}

					public String toString() {

						StringBuilder sb = new StringBuilder();
						sb.append(super.toString());
						sb.append("[");

						sb.append("row28__TARGET_ID");
						sb.append("=");
						sb.append(String.valueOf(this.row28__TARGET_ID));

						sb.append(", ");

						sb.append("row28__TREE_LEVEL");
						sb.append("=");
						sb.append(String.valueOf(this.row28__TREE_LEVEL));

						sb.append(", ");

						sb.append("row28__TREE_PATH");
						sb.append("=");
						sb.append(String.valueOf(this.row28__TREE_PATH));

						sb.append(", ");

						sb.append("row28__STAGING_PATH");
						sb.append("=");
						sb.append(String.valueOf(this.row28__STAGING_PATH));

						sb.append(", ");

						sb.append("row28__STAGING_DIMENSION");
						sb.append("=");
						sb.append(String.valueOf(this.row28__STAGING_DIMENSION));

						sb.append(", ");

						sb.append("row28__NAME");
						sb.append("=");
						sb.append(String.valueOf(this.row28__NAME));

						sb.append(", ");

						sb.append("row28__STARTDATE_STAGING_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.row28__STARTDATE_STAGING_PATH));

						sb.append(", ");

						sb.append("row28__ENDDATE_STAGING_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.row28__ENDDATE_STAGING_PATH));

						sb.append(", ");

						sb.append("row28__VISUALATTRIBUTES");
						sb.append("=");
						sb.append(String.valueOf(this.row28__VISUALATTRIBUTES));

						sb.append(", ");

						sb.append("row28__BASECODE");
						sb.append("=");
						sb.append(String.valueOf(this.row28__BASECODE));

						sb.append(", ");

						sb.append("row28__METADATAXML");
						sb.append("=");
						sb.append(String.valueOf(this.row28__METADATAXML));

						sb.append(", ");

						sb.append("row28__COLUMNDATATYPE");
						sb.append("=");
						sb.append(String.valueOf(this.row28__COLUMNDATATYPE));

						sb.append(", ");

						sb.append("row28__C_OPERATOR");
						sb.append("=");
						sb.append(String.valueOf(this.row28__C_OPERATOR));

						sb.append(", ");

						sb.append("row28__C_COMMENT");
						sb.append("=");
						sb.append(String.valueOf(this.row28__C_COMMENT));

						sb.append(", ");

						sb.append("row28__TOOLTIP");
						sb.append("=");
						sb.append(String.valueOf(this.row28__TOOLTIP));

						sb.append(", ");

						sb.append("row28__UPDATE_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row28__UPDATE_DATE));

						sb.append(", ");

						sb.append("row28__DOWNLOAD_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row28__DOWNLOAD_DATE));

						sb.append(", ");

						sb.append("row28__IMPORT_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row28__IMPORT_DATE));

						sb.append(", ");

						sb.append("row28__SOURCESYSTEM_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row28__SOURCESYSTEM_CD));

						sb.append(", ");

						sb.append("row28__VALUETYPE_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row28__VALUETYPE_CD));

						sb.append(", ");

						sb.append("row28__M_APPLIED_PATH");
						sb.append("=");
						sb.append(String.valueOf(this.row28__M_APPLIED_PATH));

						sb.append("]");

						return sb.toString();
					}

					public int compareTo(SortableRow_tMap_12_1 other) {

						int returnValue = 0;

						returnValue = checkNullsAndCompare(
								this.exprKey_row27__MODIFIER_PATH,
								other.exprKey_row27__MODIFIER_PATH);
						if (returnValue != 0) {
							return returnValue;
						}

						return returnValue;
					}

					private int checkNullsAndCompare(Object object1,
							Object object2) {
						int returnValue = 0;
						if (object1 instanceof Comparable
								&& object2 instanceof Comparable) {
							returnValue = ((Comparable) object1)
									.compareTo(object2);
						} else if (object1 != null && object2 != null) {
							returnValue = compareStrings(object1.toString(),
									object2.toString());
						} else if (object1 == null && object2 != null) {
							returnValue = 1;
						} else if (object1 != null && object2 == null) {
							returnValue = -1;
						} else {
							returnValue = 0;
						}

						return returnValue;
					}

					private int compareStrings(String string1, String string2) {
						return string1.compareTo(string2);
					}

					public void readData(ObjectInputStream dis) {

						synchronized (row28Struct.commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

							try {

								int length = 0;

								this.is__rejectedInnerJoin = dis.readBoolean();

								length = dis.readByte();
								if (length == -1) {
									this.row28__TARGET_ID = null;
								} else {
									this.row28__TARGET_ID = dis.readInt();
								}

								length = dis.readByte();
								if (length == -1) {
									this.row28__TREE_LEVEL = null;
								} else {
									this.row28__TREE_LEVEL = dis.readInt();
								}

								length = dis.readInt();
								if (length == -1) {
									this.row28__TREE_PATH = null;
								} else {
									if (length > row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row28__TREE_PATH = new String(
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row28__STAGING_PATH = null;
								} else {
									if (length > row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row28__STAGING_PATH = new String(
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row28__STAGING_DIMENSION = null;
								} else {
									if (length > row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row28__STAGING_DIMENSION = new String(
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row28__NAME = null;
								} else {
									if (length > row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row28__NAME = new String(
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row28__STARTDATE_STAGING_PATH = null;
								} else {
									if (length > row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row28__STARTDATE_STAGING_PATH = new String(
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row28__ENDDATE_STAGING_PATH = null;
								} else {
									if (length > row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row28__ENDDATE_STAGING_PATH = new String(
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row28__VISUALATTRIBUTES = null;
								} else {
									if (length > row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row28__VISUALATTRIBUTES = new String(
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row28__BASECODE = null;
								} else {
									if (length > row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row28__BASECODE = new String(
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row28__METADATAXML = null;
								} else {
									if (length > row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row28__METADATAXML = new String(
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row28__COLUMNDATATYPE = null;
								} else {
									if (length > row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row28__COLUMNDATATYPE = new String(
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row28__C_OPERATOR = null;
								} else {
									if (length > row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row28__C_OPERATOR = new String(
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row28__C_COMMENT = null;
								} else {
									if (length > row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row28__C_COMMENT = new String(
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row28__TOOLTIP = null;
								} else {
									if (length > row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row28__TOOLTIP = new String(
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.row28__UPDATE_DATE = null;
								} else {
									this.row28__UPDATE_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.row28__DOWNLOAD_DATE = null;
								} else {
									this.row28__DOWNLOAD_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.row28__IMPORT_DATE = null;
								} else {
									this.row28__IMPORT_DATE = new Date(
											dis.readLong());
								}

								length = dis.readInt();
								if (length == -1) {
									this.row28__SOURCESYSTEM_CD = null;
								} else {
									if (length > row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row28__SOURCESYSTEM_CD = new String(
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row28__VALUETYPE_CD = null;
								} else {
									if (length > row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row28__VALUETYPE_CD = new String(
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row28__M_APPLIED_PATH = null;
								} else {
									if (length > row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row28__M_APPLIED_PATH = new String(
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row27__MODIFIER_PATH = null;
								} else {
									if (length > row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.exprKey_row27__MODIFIER_PATH = new String(
											row28Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

							} catch (IOException e) {
								throw new RuntimeException(e);

							}

						}
					}

					public void writeData(ObjectOutputStream dos) {
						try {

							dos.writeBoolean(this.is__rejectedInnerJoin);

							if (this.row28__TARGET_ID == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeInt(this.row28__TARGET_ID);
							}

							if (this.row28__TREE_LEVEL == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeInt(this.row28__TREE_LEVEL);
							}

							if (this.row28__TREE_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row28__TREE_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row28__STAGING_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row28__STAGING_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row28__STAGING_DIMENSION == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row28__STAGING_DIMENSION
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row28__NAME == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row28__NAME.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row28__STARTDATE_STAGING_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row28__STARTDATE_STAGING_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row28__ENDDATE_STAGING_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row28__ENDDATE_STAGING_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row28__VISUALATTRIBUTES == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row28__VISUALATTRIBUTES
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row28__BASECODE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row28__BASECODE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row28__METADATAXML == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row28__METADATAXML
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row28__COLUMNDATATYPE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row28__COLUMNDATATYPE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row28__C_OPERATOR == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row28__C_OPERATOR
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row28__C_COMMENT == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row28__C_COMMENT
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row28__TOOLTIP == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row28__TOOLTIP
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row28__UPDATE_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row28__UPDATE_DATE.getTime());
							}

							if (this.row28__DOWNLOAD_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row28__DOWNLOAD_DATE
										.getTime());
							}

							if (this.row28__IMPORT_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row28__IMPORT_DATE.getTime());
							}

							if (this.row28__SOURCESYSTEM_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row28__SOURCESYSTEM_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row28__VALUETYPE_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row28__VALUETYPE_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row28__M_APPLIED_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row28__M_APPLIED_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.exprKey_row27__MODIFIER_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row27__MODIFIER_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

				} // G_TM_B_001

				org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_12_1> fsi_tMap_12_1 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_12_1>(
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid + "_tMap_12_1",
						200000) {
					public SortableRow_tMap_12_1 createRowInstance() {
						return new SortableRow_tMap_12_1();
					}
				};

				fsi_tMap_12_1.initPut();

				/**
				 * [tMap_12_TMAP_OUT begin ] stop
				 */

				/**
				 * [tFileInputDelimited_16 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_16", false);
				start_Hash.put("tFileInputDelimited_16",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_16";

				int tos_count_tFileInputDelimited_16 = 0;

				int nb_line_tFileInputDelimited_16 = 0;
				int footer_tFileInputDelimited_16 = 0;
				int totalLinetFileInputDelimited_16 = 0;
				int limittFileInputDelimited_16 = -1;
				int lastLinetFileInputDelimited_16 = -1;

				char fieldSeparator_tFileInputDelimited_16[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_16 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_16[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_16 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_16 = /**
				 * Start field
				 * tFileInputDelimited_16:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_1_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_16:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_16 = null;

				try {

					String[] rowtFileInputDelimited_16 = null;
					int currentLinetFileInputDelimited_16 = 0;
					int outputLinetFileInputDelimited_16 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_16 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_16 = 0;
							if (footer_value_tFileInputDelimited_16 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_16 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_16,
									fieldSeparator_tFileInputDelimited_16[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_16 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_16)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_16[0]);
						}

						csvReadertFileInputDelimited_16
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_16[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_16[0] != '\r'))
							csvReadertFileInputDelimited_16.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_16[0]);

						csvReadertFileInputDelimited_16.setQuoteChar('"');

						csvReadertFileInputDelimited_16
								.setEscapeChar(csvReadertFileInputDelimited_16
										.getQuoteChar());

						if (footer_tFileInputDelimited_16 > 0) {
							for (totalLinetFileInputDelimited_16 = 0; totalLinetFileInputDelimited_16 < 1; totalLinetFileInputDelimited_16++) {
								csvReadertFileInputDelimited_16.readNext();
							}
							csvReadertFileInputDelimited_16
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_16.readNext()) {

								rowtFileInputDelimited_16 = csvReadertFileInputDelimited_16
										.getValues();
								if (!(rowtFileInputDelimited_16.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_16[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_16++;

								}

							}
							int lastLineTemptFileInputDelimited_16 = totalLinetFileInputDelimited_16
									- footer_tFileInputDelimited_16 < 0 ? 0
									: totalLinetFileInputDelimited_16
											- footer_tFileInputDelimited_16;
							if (lastLinetFileInputDelimited_16 > 0) {
								lastLinetFileInputDelimited_16 = lastLinetFileInputDelimited_16 < lastLineTemptFileInputDelimited_16 ? lastLinetFileInputDelimited_16
										: lastLineTemptFileInputDelimited_16;
							} else {
								lastLinetFileInputDelimited_16 = lastLineTemptFileInputDelimited_16;
							}

							csvReadertFileInputDelimited_16.close();
							if (filename_tFileInputDelimited_16 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_16 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_16,
										fieldSeparator_tFileInputDelimited_16[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_16 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_16)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_16[0]);
							}
							csvReadertFileInputDelimited_16
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_16[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_16[0] != '\r'))
								csvReadertFileInputDelimited_16
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_16[0]);

							csvReadertFileInputDelimited_16.setQuoteChar('"');

							csvReadertFileInputDelimited_16
									.setEscapeChar(csvReadertFileInputDelimited_16
											.getQuoteChar());

						}

						if (limittFileInputDelimited_16 != 0) {
							for (currentLinetFileInputDelimited_16 = 0; currentLinetFileInputDelimited_16 < 1; currentLinetFileInputDelimited_16++) {
								csvReadertFileInputDelimited_16.readNext();
							}
						}
						csvReadertFileInputDelimited_16
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_16 != 0
							&& csvReadertFileInputDelimited_16 != null
							&& csvReadertFileInputDelimited_16.readNext()) {

						rowtFileInputDelimited_16 = csvReadertFileInputDelimited_16
								.getValues();

						if (rowtFileInputDelimited_16.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_16[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_16++;

						if (lastLinetFileInputDelimited_16 > -1
								&& currentLinetFileInputDelimited_16 > lastLinetFileInputDelimited_16) {
							break;
						}
						outputLinetFileInputDelimited_16++;
						if (limittFileInputDelimited_16 > 0
								&& outputLinetFileInputDelimited_16 > limittFileInputDelimited_16) {
							break;
						}

						row28 = null;

						boolean whetherReject_tFileInputDelimited_16 = false;
						row28 = new row28Struct();
						try {

							if (rowtFileInputDelimited_16.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_16[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row28.TARGET_ID = null;

								row28.TREE_LEVEL = null;

								row28.TREE_PATH = null;

								row28.STAGING_PATH = null;

								row28.STAGING_DIMENSION = null;

								row28.NAME = null;

								row28.STARTDATE_STAGING_PATH = null;

								row28.ENDDATE_STAGING_PATH = null;

								row28.VISUALATTRIBUTES = null;

								row28.BASECODE = null;

								row28.METADATAXML = null;

								row28.COLUMNDATATYPE = null;

								row28.C_OPERATOR = null;

								row28.C_COMMENT = null;

								row28.TOOLTIP = null;

								row28.UPDATE_DATE = null;

								row28.DOWNLOAD_DATE = null;

								row28.IMPORT_DATE = null;

								row28.SOURCESYSTEM_CD = null;

								row28.VALUETYPE_CD = null;

								row28.M_APPLIED_PATH = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_16 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_16 = 0;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row28.TARGET_ID = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]);

									} else {
										row28.TARGET_ID = null;
									}

								} else {
									row28.TARGET_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 1;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row28.TREE_LEVEL = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]);

									} else {
										row28.TREE_LEVEL = null;
									}

								} else {
									row28.TREE_LEVEL = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 2;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row28.TREE_PATH = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row28.TREE_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 3;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row28.STAGING_PATH = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row28.STAGING_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 4;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row28.STAGING_DIMENSION = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row28.STAGING_DIMENSION = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 5;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row28.NAME = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row28.NAME = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 6;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row28.STARTDATE_STAGING_PATH = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row28.STARTDATE_STAGING_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 7;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row28.ENDDATE_STAGING_PATH = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row28.ENDDATE_STAGING_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 8;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row28.VISUALATTRIBUTES = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row28.VISUALATTRIBUTES = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 9;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row28.BASECODE = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row28.BASECODE = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 10;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row28.METADATAXML = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row28.METADATAXML = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 11;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row28.COLUMNDATATYPE = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row28.COLUMNDATATYPE = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 12;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row28.C_OPERATOR = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row28.C_OPERATOR = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 13;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row28.C_COMMENT = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row28.C_COMMENT = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 14;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row28.TOOLTIP = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row28.TOOLTIP = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 15;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row28.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16],
														"dd-MM-yyyy");

									} else {
										row28.UPDATE_DATE = null;
									}

								} else {
									row28.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 16;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row28.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16],
														"dd-MM-yyyy");

									} else {
										row28.DOWNLOAD_DATE = null;
									}

								} else {
									row28.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 17;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row28.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16],
														"dd-MM-yyyy");

									} else {
										row28.IMPORT_DATE = null;
									}

								} else {
									row28.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 18;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row28.SOURCESYSTEM_CD = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row28.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 19;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row28.VALUETYPE_CD = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row28.VALUETYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 20;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row28.M_APPLIED_PATH = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row28.M_APPLIED_PATH = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_16 = true;

							System.err.println(e.getMessage());
							row28 = null;

						}

						/**
						 * [tFileInputDelimited_16 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_16 main ] start
						 */

						currentComponent = "tFileInputDelimited_16";

						tos_count_tFileInputDelimited_16++;

						/**
						 * [tFileInputDelimited_16 main ] stop
						 */
						// Start of branch "row28"
						if (row28 != null) {

							/**
							 * [tMap_12_TMAP_OUT main ] start
							 */

							currentComponent = "tMap_12_TMAP_OUT";

							boolean hasCasePrimitiveKeyWithNull_tMap_12_TMAP_OUT = false;

							hasCasePrimitiveKeyWithNull_tMap_12_TMAP_OUT = false;

							String exprKey_row27__MODIFIER_PATH = row28.STAGING_PATH;

							SortableRow_tMap_12_1 sortableRow_tMap_12_1 = fsi_tMap_12_1
									.getNextFreeRow();

							sortableRow_tMap_12_1.fillFrom(row28,
									exprKey_row27__MODIFIER_PATH);

							fsi_tMap_12_1.put(sortableRow_tMap_12_1);

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_12_TMAP_OUT = false;
							boolean mainRowRejected_tMap_12_TMAP_OUT = false;

							// ###############################

							tos_count_tMap_12_TMAP_OUT++;

							/**
							 * [tMap_12_TMAP_OUT main ] stop
							 */

						} // End of branch "row28"

						/**
						 * [tFileInputDelimited_16 end ] start
						 */

						currentComponent = "tFileInputDelimited_16";

						nb_line_tFileInputDelimited_16++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_16 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_16 != null) {
							csvReadertFileInputDelimited_16.close();
						}
					}
					if (csvReadertFileInputDelimited_16 != null) {
						globalMap.put("tFileInputDelimited_16_NB_LINE",
								nb_line_tFileInputDelimited_16);
					}
				}

				ok_Hash.put("tFileInputDelimited_16", true);
				end_Hash.put("tFileInputDelimited_16",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_16 end ] stop
				 */

				/**
				 * [tMap_12_TMAP_OUT end ] start
				 */

				currentComponent = "tMap_12_TMAP_OUT";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_12_TMAP_OUT", true);
				end_Hash.put("tMap_12_TMAP_OUT", System.currentTimeMillis());

				/**
				 * [tMap_12_TMAP_OUT end ] stop
				 */

				/**
				 * [tMap_13_TMAP_OUT begin ] start
				 */

				ok_Hash.put("tMap_13_TMAP_OUT", false);
				start_Hash.put("tMap_13_TMAP_OUT", System.currentTimeMillis());
				currentComponent = "tMap_13_TMAP_OUT";

				int tos_count_tMap_13_TMAP_OUT = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row29Struct> tHash_Lookup_row29 = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row29Struct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row29Struct>) globalMap
						.get("tHash_Lookup_row29"));

				row29Struct row29HashKey = new row29Struct();
				row29Struct row29Default = new row29Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_13_TMAP_OUT__Struct {
				}
				Var__tMap_13_TMAP_OUT__Struct Var__tMap_13_TMAP_OUT = new Var__tMap_13_TMAP_OUT__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				// ###############################

				class SortableRow_tMap_13_1 implements
						Comparable<SortableRow_tMap_13_1>,
						routines.system.IPersistableRow<SortableRow_tMap_13_1> { // G_TM_B_001

					boolean is__rejectedInnerJoin;

					String exprKey_row29__MODIFIER_CD;

					// copyOfto_tmap
					String copyOfto_tmap__TREE_PATH;
					String copyOfto_tmap__STAGING_PATH;
					String copyOfto_tmap__MODIFIER_CD;
					String copyOfto_tmap__NAME_CHAR;
					String copyOfto_tmap__MODIFIER_BLOB;
					java.util.Date copyOfto_tmap__UPDATE_DATE;
					java.util.Date copyOfto_tmap__DOWNLOAD_DATE;
					java.util.Date copyOfto_tmap__IMPORT_DATE;
					String copyOfto_tmap__SOURCESYSTEM_CD;
					String copyOfto_tmap__UPLOAD_ID;
					String copyOfto_tmap__STARTDATE_SOURCE_PATH;
					String copyOfto_tmap__ENDDATE_SOURCE_PATH;
					String copyOfto_tmap__M_APPLIED_PATH;
					String copyOfto_tmap__BASECODE;

					public void fillFrom(copyOfto_tmapStruct copyOfto_tmap,
							String exprKey_row29__MODIFIER_CD) {

						this.copyOfto_tmap__TREE_PATH = copyOfto_tmap.TREE_PATH;
						this.copyOfto_tmap__STAGING_PATH = copyOfto_tmap.STAGING_PATH;
						this.copyOfto_tmap__MODIFIER_CD = copyOfto_tmap.MODIFIER_CD;
						this.copyOfto_tmap__NAME_CHAR = copyOfto_tmap.NAME_CHAR;
						this.copyOfto_tmap__MODIFIER_BLOB = copyOfto_tmap.MODIFIER_BLOB;
						this.copyOfto_tmap__UPDATE_DATE = copyOfto_tmap.UPDATE_DATE;
						this.copyOfto_tmap__DOWNLOAD_DATE = copyOfto_tmap.DOWNLOAD_DATE;
						this.copyOfto_tmap__IMPORT_DATE = copyOfto_tmap.IMPORT_DATE;
						this.copyOfto_tmap__SOURCESYSTEM_CD = copyOfto_tmap.SOURCESYSTEM_CD;
						this.copyOfto_tmap__UPLOAD_ID = copyOfto_tmap.UPLOAD_ID;
						this.copyOfto_tmap__STARTDATE_SOURCE_PATH = copyOfto_tmap.STARTDATE_SOURCE_PATH;
						this.copyOfto_tmap__ENDDATE_SOURCE_PATH = copyOfto_tmap.ENDDATE_SOURCE_PATH;
						this.copyOfto_tmap__M_APPLIED_PATH = copyOfto_tmap.M_APPLIED_PATH;
						this.copyOfto_tmap__BASECODE = copyOfto_tmap.BASECODE;
						this.exprKey_row29__MODIFIER_CD = exprKey_row29__MODIFIER_CD;

					}

					public void copyDataTo(copyOfto_tmapStruct copyOfto_tmap) {

						copyOfto_tmap.TREE_PATH = this.copyOfto_tmap__TREE_PATH;
						copyOfto_tmap.STAGING_PATH = this.copyOfto_tmap__STAGING_PATH;
						copyOfto_tmap.MODIFIER_CD = this.copyOfto_tmap__MODIFIER_CD;
						copyOfto_tmap.NAME_CHAR = this.copyOfto_tmap__NAME_CHAR;
						copyOfto_tmap.MODIFIER_BLOB = this.copyOfto_tmap__MODIFIER_BLOB;
						copyOfto_tmap.UPDATE_DATE = this.copyOfto_tmap__UPDATE_DATE;
						copyOfto_tmap.DOWNLOAD_DATE = this.copyOfto_tmap__DOWNLOAD_DATE;
						copyOfto_tmap.IMPORT_DATE = this.copyOfto_tmap__IMPORT_DATE;
						copyOfto_tmap.SOURCESYSTEM_CD = this.copyOfto_tmap__SOURCESYSTEM_CD;
						copyOfto_tmap.UPLOAD_ID = this.copyOfto_tmap__UPLOAD_ID;
						copyOfto_tmap.STARTDATE_SOURCE_PATH = this.copyOfto_tmap__STARTDATE_SOURCE_PATH;
						copyOfto_tmap.ENDDATE_SOURCE_PATH = this.copyOfto_tmap__ENDDATE_SOURCE_PATH;
						copyOfto_tmap.M_APPLIED_PATH = this.copyOfto_tmap__M_APPLIED_PATH;
						copyOfto_tmap.BASECODE = this.copyOfto_tmap__BASECODE;

					}

					public String toString() {

						StringBuilder sb = new StringBuilder();
						sb.append(super.toString());
						sb.append("[");

						sb.append("copyOfto_tmap__TREE_PATH");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfto_tmap__TREE_PATH));

						sb.append(", ");

						sb.append("copyOfto_tmap__STAGING_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_tmap__STAGING_PATH));

						sb.append(", ");

						sb.append("copyOfto_tmap__MODIFIER_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_tmap__MODIFIER_CD));

						sb.append(", ");

						sb.append("copyOfto_tmap__NAME_CHAR");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfto_tmap__NAME_CHAR));

						sb.append(", ");

						sb.append("copyOfto_tmap__MODIFIER_BLOB");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_tmap__MODIFIER_BLOB));

						sb.append(", ");

						sb.append("copyOfto_tmap__UPDATE_DATE");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_tmap__UPDATE_DATE));

						sb.append(", ");

						sb.append("copyOfto_tmap__DOWNLOAD_DATE");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_tmap__DOWNLOAD_DATE));

						sb.append(", ");

						sb.append("copyOfto_tmap__IMPORT_DATE");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_tmap__IMPORT_DATE));

						sb.append(", ");

						sb.append("copyOfto_tmap__SOURCESYSTEM_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_tmap__SOURCESYSTEM_CD));

						sb.append(", ");

						sb.append("copyOfto_tmap__UPLOAD_ID");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfto_tmap__UPLOAD_ID));

						sb.append(", ");

						sb.append("copyOfto_tmap__STARTDATE_SOURCE_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_tmap__STARTDATE_SOURCE_PATH));

						sb.append(", ");

						sb.append("copyOfto_tmap__ENDDATE_SOURCE_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_tmap__ENDDATE_SOURCE_PATH));

						sb.append(", ");

						sb.append("copyOfto_tmap__M_APPLIED_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_tmap__M_APPLIED_PATH));

						sb.append(", ");

						sb.append("copyOfto_tmap__BASECODE");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfto_tmap__BASECODE));

						sb.append("]");

						return sb.toString();
					}

					public int compareTo(SortableRow_tMap_13_1 other) {

						int returnValue = 0;

						returnValue = checkNullsAndCompare(
								this.exprKey_row29__MODIFIER_CD,
								other.exprKey_row29__MODIFIER_CD);
						if (returnValue != 0) {
							return returnValue;
						}

						return returnValue;
					}

					private int checkNullsAndCompare(Object object1,
							Object object2) {
						int returnValue = 0;
						if (object1 instanceof Comparable
								&& object2 instanceof Comparable) {
							returnValue = ((Comparable) object1)
									.compareTo(object2);
						} else if (object1 != null && object2 != null) {
							returnValue = compareStrings(object1.toString(),
									object2.toString());
						} else if (object1 == null && object2 != null) {
							returnValue = 1;
						} else if (object1 != null && object2 == null) {
							returnValue = -1;
						} else {
							returnValue = 0;
						}

						return returnValue;
					}

					private int compareStrings(String string1, String string2) {
						return string1.compareTo(string2);
					}

					public void readData(ObjectInputStream dis) {

						synchronized (copyOfto_tmapStruct.commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

							try {

								int length = 0;

								this.is__rejectedInnerJoin = dis.readBoolean();

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_tmap__TREE_PATH = null;
								} else {
									if (length > copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_tmap__TREE_PATH = new String(
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_tmap__STAGING_PATH = null;
								} else {
									if (length > copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_tmap__STAGING_PATH = new String(
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_tmap__MODIFIER_CD = null;
								} else {
									if (length > copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_tmap__MODIFIER_CD = new String(
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_tmap__NAME_CHAR = null;
								} else {
									if (length > copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_tmap__NAME_CHAR = new String(
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_tmap__MODIFIER_BLOB = null;
								} else {
									if (length > copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_tmap__MODIFIER_BLOB = new String(
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.copyOfto_tmap__UPDATE_DATE = null;
								} else {
									this.copyOfto_tmap__UPDATE_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.copyOfto_tmap__DOWNLOAD_DATE = null;
								} else {
									this.copyOfto_tmap__DOWNLOAD_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.copyOfto_tmap__IMPORT_DATE = null;
								} else {
									this.copyOfto_tmap__IMPORT_DATE = new Date(
											dis.readLong());
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_tmap__SOURCESYSTEM_CD = null;
								} else {
									if (length > copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_tmap__SOURCESYSTEM_CD = new String(
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_tmap__UPLOAD_ID = null;
								} else {
									if (length > copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_tmap__UPLOAD_ID = new String(
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_tmap__STARTDATE_SOURCE_PATH = null;
								} else {
									if (length > copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_tmap__STARTDATE_SOURCE_PATH = new String(
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_tmap__ENDDATE_SOURCE_PATH = null;
								} else {
									if (length > copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_tmap__ENDDATE_SOURCE_PATH = new String(
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_tmap__M_APPLIED_PATH = null;
								} else {
									if (length > copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_tmap__M_APPLIED_PATH = new String(
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_tmap__BASECODE = null;
								} else {
									if (length > copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_tmap__BASECODE = new String(
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row29__MODIFIER_CD = null;
								} else {
									if (length > copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.exprKey_row29__MODIFIER_CD = new String(
											copyOfto_tmapStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

							} catch (IOException e) {
								throw new RuntimeException(e);

							}

						}
					}

					public void writeData(ObjectOutputStream dos) {
						try {

							dos.writeBoolean(this.is__rejectedInnerJoin);

							if (this.copyOfto_tmap__TREE_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_tmap__TREE_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_tmap__STAGING_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_tmap__STAGING_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_tmap__MODIFIER_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_tmap__MODIFIER_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_tmap__NAME_CHAR == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_tmap__NAME_CHAR
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_tmap__MODIFIER_BLOB == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_tmap__MODIFIER_BLOB
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_tmap__UPDATE_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.copyOfto_tmap__UPDATE_DATE
										.getTime());
							}

							if (this.copyOfto_tmap__DOWNLOAD_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.copyOfto_tmap__DOWNLOAD_DATE
										.getTime());
							}

							if (this.copyOfto_tmap__IMPORT_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.copyOfto_tmap__IMPORT_DATE
										.getTime());
							}

							if (this.copyOfto_tmap__SOURCESYSTEM_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_tmap__SOURCESYSTEM_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_tmap__UPLOAD_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_tmap__UPLOAD_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_tmap__STARTDATE_SOURCE_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_tmap__STARTDATE_SOURCE_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_tmap__ENDDATE_SOURCE_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_tmap__ENDDATE_SOURCE_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_tmap__M_APPLIED_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_tmap__M_APPLIED_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_tmap__BASECODE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_tmap__BASECODE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.exprKey_row29__MODIFIER_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row29__MODIFIER_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

				} // G_TM_B_001

				org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_13_1> fsi_tMap_13_1 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_13_1>(
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid + "_tMap_13_1",
						200000) {
					public SortableRow_tMap_13_1 createRowInstance() {
						return new SortableRow_tMap_13_1();
					}
				};

				fsi_tMap_13_1.initPut();

				/**
				 * [tMap_13_TMAP_OUT begin ] stop
				 */

				/**
				 * [tMap_12_TMAP_IN begin ] start
				 */

				ok_Hash.put("tMap_12_TMAP_IN", false);
				start_Hash.put("tMap_12_TMAP_IN", System.currentTimeMillis());
				currentComponent = "tMap_12_TMAP_IN";

				int tos_count_tMap_12_TMAP_IN = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_12_TMAP_IN__Struct {
				}
				Var__tMap_12_TMAP_IN__Struct Var__tMap_12_TMAP_IN = new Var__tMap_12_TMAP_IN__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfto_tmapStruct copyOfto_tmap_tmp = new copyOfto_tmapStruct();
				// ###############################

				/**
				 * [tMap_12_TMAP_IN begin ] stop
				 */
				/**
				 * [tMap_12_TMAP_IN main ] start
				 */

				currentComponent = "tMap_12_TMAP_IN";

				boolean hasCasePrimitiveKeyWithNull_tMap_12_TMAP_IN = false;

				fsi_tMap_12_1.endPut();

				if (row28 == null) {
					row28 = new row28Struct();
				}

				// ###############################
				// # Input tables (lookups)
				boolean rejectedInnerJoin_tMap_12_TMAP_IN = false;
				boolean mainRowRejected_tMap_12_TMAP_IN = false;

				// /////////////////////////////////////////////
				// Starting Lookup Table "row27"
				// /////////////////////////////////////////////

				SortableRow_tMap_12_1 rsc_tMap_12_1;

				tHash_Lookup_row27.initGet();

				fsi_tMap_12_1.initGet();

				// TEST firstLookupIsPersistentSorted=true
				// isFirstPersistentSortedTable=true

				rejectedInnerJoin_tMap_12_TMAP_IN = false;

				while (fsi_tMap_12_1.hasNext()) { // G_TM_M_250 loop "1"

					// CALL close loop of lookup '1'

					rsc_tMap_12_1 = (SortableRow_tMap_12_1) fsi_tMap_12_1
							.next();
					rsc_tMap_12_1.copyDataTo(row28);

					rejectedInnerJoin_tMap_12_TMAP_IN = rsc_tMap_12_1.is__rejectedInnerJoin;

					boolean forceLooprow27 = false;

					row27Struct row27ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_12_TMAP_IN) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_12_TMAP_IN = false;

						row27HashKey.MODIFIER_PATH = rsc_tMap_12_1.exprKey_row27__MODIFIER_PATH;

						tHash_Lookup_row27.lookup(row27HashKey);

						if (!tHash_Lookup_row27.hasNext()) { // G_TM_M_090

							rejectedInnerJoin_tMap_12_TMAP_IN = true;

							forceLooprow27 = true;

						} // G_TM_M_090

					} // G_TM_M_020

					else { // G 20 - G 21
						forceLooprow27 = true;
					} // G 21

					row27Struct row27 = null;

					while ((tHash_Lookup_row27 != null && tHash_Lookup_row27
							.hasNext()) || forceLooprow27) { // G_TM_M_043

						// CALL close loop of lookup 'row27'

						row27Struct fromLookup_row27 = null;
						row27 = row27Default;

						if (!forceLooprow27) { // G 46

							fromLookup_row27 = tHash_Lookup_row27.next();

							if (fromLookup_row27 != null) {
								row27 = fromLookup_row27;
							}

						} // G 46

						forceLooprow27 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_12_TMAP_IN__Struct Var = Var__tMap_12_TMAP_IN;// ###############################
							// ###############################
							// # Output tables

							copyOfto_tmap = null;

							if (!rejectedInnerJoin_tMap_12_TMAP_IN) {

								// # Output table : 'copyOfto_tmap'
								copyOfto_tmap_tmp.TREE_PATH = row28.TREE_PATH;
								copyOfto_tmap_tmp.STAGING_PATH = row28.STAGING_PATH;
								copyOfto_tmap_tmp.MODIFIER_CD = row27.MODIFIER_CD;
								copyOfto_tmap_tmp.NAME_CHAR = row27.NAME_CHAR;
								copyOfto_tmap_tmp.MODIFIER_BLOB = row27.MODIFIER_BLOB;
								copyOfto_tmap_tmp.UPDATE_DATE = row27.UPDATE_DATE;
								copyOfto_tmap_tmp.DOWNLOAD_DATE = row27.DOWNLOAD_DATE;
								copyOfto_tmap_tmp.IMPORT_DATE = row27.IMPORT_DATE;
								copyOfto_tmap_tmp.SOURCESYSTEM_CD = row27.SOURCESYSTEM_CD;
								copyOfto_tmap_tmp.UPLOAD_ID = row27.UPLOAD_ID;
								copyOfto_tmap_tmp.STARTDATE_SOURCE_PATH = row28.STARTDATE_STAGING_PATH;
								copyOfto_tmap_tmp.ENDDATE_SOURCE_PATH = row28.ENDDATE_STAGING_PATH;
								copyOfto_tmap_tmp.M_APPLIED_PATH = row28.M_APPLIED_PATH;
								copyOfto_tmap_tmp.BASECODE = row28.BASECODE;
								copyOfto_tmap = copyOfto_tmap_tmp;
							} // closing inner join bracket (2)
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_12_TMAP_IN = false;

						tos_count_tMap_12_TMAP_IN++;

						/**
						 * [tMap_12_TMAP_IN main ] stop
						 */
						// Start of branch "copyOfto_tmap"
						if (copyOfto_tmap != null) {

							/**
							 * [tMap_13_TMAP_OUT main ] start
							 */

							currentComponent = "tMap_13_TMAP_OUT";

							boolean hasCasePrimitiveKeyWithNull_tMap_13_TMAP_OUT = false;

							hasCasePrimitiveKeyWithNull_tMap_13_TMAP_OUT = false;

							String exprKey_row29__MODIFIER_CD = copyOfto_tmap.MODIFIER_CD;

							SortableRow_tMap_13_1 sortableRow_tMap_13_1 = fsi_tMap_13_1
									.getNextFreeRow();

							sortableRow_tMap_13_1.fillFrom(copyOfto_tmap,
									exprKey_row29__MODIFIER_CD);

							fsi_tMap_13_1.put(sortableRow_tMap_13_1);

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_13_TMAP_OUT = false;
							boolean mainRowRejected_tMap_13_TMAP_OUT = false;

							// ###############################

							tos_count_tMap_13_TMAP_OUT++;

							/**
							 * [tMap_13_TMAP_OUT main ] stop
							 */

						} // End of branch "copyOfto_tmap"

					} // close loop of lookup 'row27' // G_TM_M_043

				} // G_TM_M_250 close loop read file data '1'

				/**
				 * [tMap_12_TMAP_IN end ] start
				 */

				currentComponent = "tMap_12_TMAP_IN";

				// ###############################
				// # Lookup hashes releasing
				fsi_tMap_12_1.endGet();

				if (tHash_Lookup_row27 != null) {
					tHash_Lookup_row27.endGet();
				}
				globalMap.remove("tHash_Lookup_row27");

				// ###############################

				ok_Hash.put("tMap_12_TMAP_IN", true);
				end_Hash.put("tMap_12_TMAP_IN", System.currentTimeMillis());

				/**
				 * [tMap_12_TMAP_IN end ] stop
				 */

				/**
				 * [tMap_13_TMAP_OUT end ] start
				 */

				currentComponent = "tMap_13_TMAP_OUT";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_13_TMAP_OUT", true);
				end_Hash.put("tMap_13_TMAP_OUT", System.currentTimeMillis());

				/**
				 * [tMap_13_TMAP_OUT end ] stop
				 */

				/**
				 * [tMap_15_TMAP_OUT begin ] start
				 */

				ok_Hash.put("tMap_15_TMAP_OUT", false);
				start_Hash.put("tMap_15_TMAP_OUT", System.currentTimeMillis());
				currentComponent = "tMap_15_TMAP_OUT";

				int tos_count_tMap_15_TMAP_OUT = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row31Struct> tHash_Lookup_row31 = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row31Struct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row31Struct>) globalMap
						.get("tHash_Lookup_row31"));

				row31Struct row31HashKey = new row31Struct();
				row31Struct row31Default = new row31Struct();

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row32Struct> tHash_Lookup_row32 = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row32Struct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row32Struct>) globalMap
						.get("tHash_Lookup_row32"));

				row32Struct row32HashKey = new row32Struct();
				row32Struct row32Default = new row32Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_15_TMAP_OUT__Struct {
				}
				Var__tMap_15_TMAP_OUT__Struct Var__tMap_15_TMAP_OUT = new Var__tMap_15_TMAP_OUT__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				// ###############################

				class SortableRow_tMap_15_1 implements
						Comparable<SortableRow_tMap_15_1>,
						routines.system.IPersistableRow<SortableRow_tMap_15_1> { // G_TM_B_001

					boolean is__rejectedInnerJoin;

					String exprKey_row31__MODIFIER_PATH;

					// copyOfto_obs_fct
					BigDecimal copyOfto_obs_fct__ENCOUNTER_NUM;
					BigDecimal copyOfto_obs_fct__PATIENT_NUM;
					String copyOfto_obs_fct__CONCEPT_CD;
					String copyOfto_obs_fct__PROVIDER_ID;
					String copyOfto_obs_fct__START_DATE;
					String copyOfto_obs_fct__MODIFIER_CD;
					String copyOfto_obs_fct__INSTANCE_NUM;
					String copyOfto_obs_fct__VALTYPE_CD;
					String copyOfto_obs_fct__TVAL_CHAR;
					Float copyOfto_obs_fct__NVAL_NUM;
					String copyOfto_obs_fct__VALUEFLAG_CD;
					String copyOfto_obs_fct__QUANTITY_NUM;
					String copyOfto_obs_fct__UNITS_CD;
					String copyOfto_obs_fct__END_DATE;
					String copyOfto_obs_fct__LOCATION_CD;
					String copyOfto_obs_fct__OBSERVATION_BLOB;
					String copyOfto_obs_fct__CONFIDENCE_NUM;
					java.util.Date copyOfto_obs_fct__UPDATE_DATE;
					java.util.Date copyOfto_obs_fct__DOWNLOAD_DATE;
					java.util.Date copyOfto_obs_fct__IMPORT_DATE;
					String copyOfto_obs_fct__SOURCESYSTEM_CD;
					String copyOfto_obs_fct__UPLOAD_ID;
					String copyOfto_obs_fct__STARTDATE_SOURCE_PATH;
					String copyOfto_obs_fct__ENDDATE_SOURCE_PATH;

					public void fillFrom(
							copyOfto_obs_fctStruct copyOfto_obs_fct,
							String exprKey_row31__MODIFIER_PATH) {

						this.copyOfto_obs_fct__ENCOUNTER_NUM = copyOfto_obs_fct.ENCOUNTER_NUM;
						this.copyOfto_obs_fct__PATIENT_NUM = copyOfto_obs_fct.PATIENT_NUM;
						this.copyOfto_obs_fct__CONCEPT_CD = copyOfto_obs_fct.CONCEPT_CD;
						this.copyOfto_obs_fct__PROVIDER_ID = copyOfto_obs_fct.PROVIDER_ID;
						this.copyOfto_obs_fct__START_DATE = copyOfto_obs_fct.START_DATE;
						this.copyOfto_obs_fct__MODIFIER_CD = copyOfto_obs_fct.MODIFIER_CD;
						this.copyOfto_obs_fct__INSTANCE_NUM = copyOfto_obs_fct.INSTANCE_NUM;
						this.copyOfto_obs_fct__VALTYPE_CD = copyOfto_obs_fct.VALTYPE_CD;
						this.copyOfto_obs_fct__TVAL_CHAR = copyOfto_obs_fct.TVAL_CHAR;
						this.copyOfto_obs_fct__NVAL_NUM = copyOfto_obs_fct.NVAL_NUM;
						this.copyOfto_obs_fct__VALUEFLAG_CD = copyOfto_obs_fct.VALUEFLAG_CD;
						this.copyOfto_obs_fct__QUANTITY_NUM = copyOfto_obs_fct.QUANTITY_NUM;
						this.copyOfto_obs_fct__UNITS_CD = copyOfto_obs_fct.UNITS_CD;
						this.copyOfto_obs_fct__END_DATE = copyOfto_obs_fct.END_DATE;
						this.copyOfto_obs_fct__LOCATION_CD = copyOfto_obs_fct.LOCATION_CD;
						this.copyOfto_obs_fct__OBSERVATION_BLOB = copyOfto_obs_fct.OBSERVATION_BLOB;
						this.copyOfto_obs_fct__CONFIDENCE_NUM = copyOfto_obs_fct.CONFIDENCE_NUM;
						this.copyOfto_obs_fct__UPDATE_DATE = copyOfto_obs_fct.UPDATE_DATE;
						this.copyOfto_obs_fct__DOWNLOAD_DATE = copyOfto_obs_fct.DOWNLOAD_DATE;
						this.copyOfto_obs_fct__IMPORT_DATE = copyOfto_obs_fct.IMPORT_DATE;
						this.copyOfto_obs_fct__SOURCESYSTEM_CD = copyOfto_obs_fct.SOURCESYSTEM_CD;
						this.copyOfto_obs_fct__UPLOAD_ID = copyOfto_obs_fct.UPLOAD_ID;
						this.copyOfto_obs_fct__STARTDATE_SOURCE_PATH = copyOfto_obs_fct.STARTDATE_SOURCE_PATH;
						this.copyOfto_obs_fct__ENDDATE_SOURCE_PATH = copyOfto_obs_fct.ENDDATE_SOURCE_PATH;
						this.exprKey_row31__MODIFIER_PATH = exprKey_row31__MODIFIER_PATH;

					}

					public void copyDataTo(
							copyOfto_obs_fctStruct copyOfto_obs_fct) {

						copyOfto_obs_fct.ENCOUNTER_NUM = this.copyOfto_obs_fct__ENCOUNTER_NUM;
						copyOfto_obs_fct.PATIENT_NUM = this.copyOfto_obs_fct__PATIENT_NUM;
						copyOfto_obs_fct.CONCEPT_CD = this.copyOfto_obs_fct__CONCEPT_CD;
						copyOfto_obs_fct.PROVIDER_ID = this.copyOfto_obs_fct__PROVIDER_ID;
						copyOfto_obs_fct.START_DATE = this.copyOfto_obs_fct__START_DATE;
						copyOfto_obs_fct.MODIFIER_CD = this.copyOfto_obs_fct__MODIFIER_CD;
						copyOfto_obs_fct.INSTANCE_NUM = this.copyOfto_obs_fct__INSTANCE_NUM;
						copyOfto_obs_fct.VALTYPE_CD = this.copyOfto_obs_fct__VALTYPE_CD;
						copyOfto_obs_fct.TVAL_CHAR = this.copyOfto_obs_fct__TVAL_CHAR;
						copyOfto_obs_fct.NVAL_NUM = this.copyOfto_obs_fct__NVAL_NUM;
						copyOfto_obs_fct.VALUEFLAG_CD = this.copyOfto_obs_fct__VALUEFLAG_CD;
						copyOfto_obs_fct.QUANTITY_NUM = this.copyOfto_obs_fct__QUANTITY_NUM;
						copyOfto_obs_fct.UNITS_CD = this.copyOfto_obs_fct__UNITS_CD;
						copyOfto_obs_fct.END_DATE = this.copyOfto_obs_fct__END_DATE;
						copyOfto_obs_fct.LOCATION_CD = this.copyOfto_obs_fct__LOCATION_CD;
						copyOfto_obs_fct.OBSERVATION_BLOB = this.copyOfto_obs_fct__OBSERVATION_BLOB;
						copyOfto_obs_fct.CONFIDENCE_NUM = this.copyOfto_obs_fct__CONFIDENCE_NUM;
						copyOfto_obs_fct.UPDATE_DATE = this.copyOfto_obs_fct__UPDATE_DATE;
						copyOfto_obs_fct.DOWNLOAD_DATE = this.copyOfto_obs_fct__DOWNLOAD_DATE;
						copyOfto_obs_fct.IMPORT_DATE = this.copyOfto_obs_fct__IMPORT_DATE;
						copyOfto_obs_fct.SOURCESYSTEM_CD = this.copyOfto_obs_fct__SOURCESYSTEM_CD;
						copyOfto_obs_fct.UPLOAD_ID = this.copyOfto_obs_fct__UPLOAD_ID;
						copyOfto_obs_fct.STARTDATE_SOURCE_PATH = this.copyOfto_obs_fct__STARTDATE_SOURCE_PATH;
						copyOfto_obs_fct.ENDDATE_SOURCE_PATH = this.copyOfto_obs_fct__ENDDATE_SOURCE_PATH;

					}

					public String toString() {

						StringBuilder sb = new StringBuilder();
						sb.append(super.toString());
						sb.append("[");

						sb.append("copyOfto_obs_fct__ENCOUNTER_NUM");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__ENCOUNTER_NUM));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__PATIENT_NUM");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__PATIENT_NUM));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__CONCEPT_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__CONCEPT_CD));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__PROVIDER_ID");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__PROVIDER_ID));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__START_DATE");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__START_DATE));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__MODIFIER_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__MODIFIER_CD));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__INSTANCE_NUM");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__INSTANCE_NUM));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__VALTYPE_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__VALTYPE_CD));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__TVAL_CHAR");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__TVAL_CHAR));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__NVAL_NUM");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__NVAL_NUM));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__VALUEFLAG_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__VALUEFLAG_CD));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__QUANTITY_NUM");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__QUANTITY_NUM));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__UNITS_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__UNITS_CD));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__END_DATE");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__END_DATE));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__LOCATION_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__LOCATION_CD));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__OBSERVATION_BLOB");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__OBSERVATION_BLOB));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__CONFIDENCE_NUM");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__CONFIDENCE_NUM));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__UPDATE_DATE");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__UPDATE_DATE));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__DOWNLOAD_DATE");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__DOWNLOAD_DATE));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__IMPORT_DATE");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__IMPORT_DATE));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__SOURCESYSTEM_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__SOURCESYSTEM_CD));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__UPLOAD_ID");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__UPLOAD_ID));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__STARTDATE_SOURCE_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__STARTDATE_SOURCE_PATH));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__ENDDATE_SOURCE_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__ENDDATE_SOURCE_PATH));

						sb.append("]");

						return sb.toString();
					}

					public int compareTo(SortableRow_tMap_15_1 other) {

						int returnValue = 0;

						returnValue = checkNullsAndCompare(
								this.exprKey_row31__MODIFIER_PATH,
								other.exprKey_row31__MODIFIER_PATH);
						if (returnValue != 0) {
							return returnValue;
						}

						return returnValue;
					}

					private int checkNullsAndCompare(Object object1,
							Object object2) {
						int returnValue = 0;
						if (object1 instanceof Comparable
								&& object2 instanceof Comparable) {
							returnValue = ((Comparable) object1)
									.compareTo(object2);
						} else if (object1 != null && object2 != null) {
							returnValue = compareStrings(object1.toString(),
									object2.toString());
						} else if (object1 == null && object2 != null) {
							returnValue = 1;
						} else if (object1 != null && object2 == null) {
							returnValue = -1;
						} else {
							returnValue = 0;
						}

						return returnValue;
					}

					private int compareStrings(String string1, String string2) {
						return string1.compareTo(string2);
					}

					public void readData(ObjectInputStream dis) {

						synchronized (copyOfto_obs_fctStruct.commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

							try {

								int length = 0;

								this.is__rejectedInnerJoin = dis.readBoolean();

								this.copyOfto_obs_fct__ENCOUNTER_NUM = (BigDecimal) dis
										.readObject();

								this.copyOfto_obs_fct__PATIENT_NUM = (BigDecimal) dis
										.readObject();

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__CONCEPT_CD = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__CONCEPT_CD = new String(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__PROVIDER_ID = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__PROVIDER_ID = new String(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__START_DATE = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__START_DATE = new String(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__MODIFIER_CD = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__MODIFIER_CD = new String(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__INSTANCE_NUM = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__INSTANCE_NUM = new String(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__VALTYPE_CD = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__VALTYPE_CD = new String(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__TVAL_CHAR = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__TVAL_CHAR = new String(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.copyOfto_obs_fct__NVAL_NUM = null;
								} else {
									this.copyOfto_obs_fct__NVAL_NUM = dis
											.readFloat();
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__VALUEFLAG_CD = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__VALUEFLAG_CD = new String(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__QUANTITY_NUM = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__QUANTITY_NUM = new String(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__UNITS_CD = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__UNITS_CD = new String(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__END_DATE = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__END_DATE = new String(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__LOCATION_CD = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__LOCATION_CD = new String(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__OBSERVATION_BLOB = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__OBSERVATION_BLOB = new String(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__CONFIDENCE_NUM = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__CONFIDENCE_NUM = new String(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.copyOfto_obs_fct__UPDATE_DATE = null;
								} else {
									this.copyOfto_obs_fct__UPDATE_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.copyOfto_obs_fct__DOWNLOAD_DATE = null;
								} else {
									this.copyOfto_obs_fct__DOWNLOAD_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.copyOfto_obs_fct__IMPORT_DATE = null;
								} else {
									this.copyOfto_obs_fct__IMPORT_DATE = new Date(
											dis.readLong());
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__SOURCESYSTEM_CD = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__SOURCESYSTEM_CD = new String(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__UPLOAD_ID = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__UPLOAD_ID = new String(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__STARTDATE_SOURCE_PATH = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__STARTDATE_SOURCE_PATH = new String(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__ENDDATE_SOURCE_PATH = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__ENDDATE_SOURCE_PATH = new String(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row31__MODIFIER_PATH = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.exprKey_row31__MODIFIER_PATH = new String(
											copyOfto_obs_fctStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

							} catch (IOException e) {
								throw new RuntimeException(e);

							} catch (ClassNotFoundException eCNFE) {
								throw new RuntimeException(eCNFE);

							}

						}
					}

					public void writeData(ObjectOutputStream dos) {
						try {

							dos.writeBoolean(this.is__rejectedInnerJoin);

							dos.writeObject(this.copyOfto_obs_fct__ENCOUNTER_NUM);

							dos.writeObject(this.copyOfto_obs_fct__PATIENT_NUM);

							if (this.copyOfto_obs_fct__CONCEPT_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__CONCEPT_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__PROVIDER_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__PROVIDER_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__START_DATE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__START_DATE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__MODIFIER_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__MODIFIER_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__INSTANCE_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__INSTANCE_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__VALTYPE_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__VALTYPE_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__TVAL_CHAR == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__TVAL_CHAR
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__NVAL_NUM == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeFloat(this.copyOfto_obs_fct__NVAL_NUM);
							}

							if (this.copyOfto_obs_fct__VALUEFLAG_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__VALUEFLAG_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__QUANTITY_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__QUANTITY_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__UNITS_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__UNITS_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__END_DATE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__END_DATE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__LOCATION_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__LOCATION_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__OBSERVATION_BLOB == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__OBSERVATION_BLOB
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__CONFIDENCE_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__CONFIDENCE_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__UPDATE_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.copyOfto_obs_fct__UPDATE_DATE
										.getTime());
							}

							if (this.copyOfto_obs_fct__DOWNLOAD_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.copyOfto_obs_fct__DOWNLOAD_DATE
										.getTime());
							}

							if (this.copyOfto_obs_fct__IMPORT_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.copyOfto_obs_fct__IMPORT_DATE
										.getTime());
							}

							if (this.copyOfto_obs_fct__SOURCESYSTEM_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__SOURCESYSTEM_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__UPLOAD_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__UPLOAD_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__STARTDATE_SOURCE_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__STARTDATE_SOURCE_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__ENDDATE_SOURCE_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__ENDDATE_SOURCE_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.exprKey_row31__MODIFIER_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row31__MODIFIER_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

				} // G_TM_B_001

				org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_15_1> fsi_tMap_15_1 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_15_1>(
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid + "_tMap_15_1",
						200000) {
					public SortableRow_tMap_15_1 createRowInstance() {
						return new SortableRow_tMap_15_1();
					}
				};

				fsi_tMap_15_1.initPut();

				class SortableRow_tMap_15_2 implements
						Comparable<SortableRow_tMap_15_2>,
						routines.system.IPersistableRow<SortableRow_tMap_15_2> { // G_TM_B_001

					boolean is__rejectedInnerJoin;

					BigDecimal exprKey_row32__PATIENT_NUM;
					String exprKey_row32__MODIFIER_CD;

					// row31
					BigDecimal copyOfto_obs_fct__ENCOUNTER_NUM;
					BigDecimal copyOfto_obs_fct__PATIENT_NUM;
					String copyOfto_obs_fct__CONCEPT_CD;
					String copyOfto_obs_fct__PROVIDER_ID;
					String copyOfto_obs_fct__START_DATE;
					String copyOfto_obs_fct__MODIFIER_CD;
					String copyOfto_obs_fct__INSTANCE_NUM;
					String copyOfto_obs_fct__VALTYPE_CD;
					String copyOfto_obs_fct__TVAL_CHAR;
					Float copyOfto_obs_fct__NVAL_NUM;
					String copyOfto_obs_fct__VALUEFLAG_CD;
					String copyOfto_obs_fct__QUANTITY_NUM;
					String copyOfto_obs_fct__UNITS_CD;
					String copyOfto_obs_fct__END_DATE;
					String copyOfto_obs_fct__LOCATION_CD;
					String copyOfto_obs_fct__OBSERVATION_BLOB;
					String copyOfto_obs_fct__CONFIDENCE_NUM;
					java.util.Date copyOfto_obs_fct__UPDATE_DATE;
					java.util.Date copyOfto_obs_fct__DOWNLOAD_DATE;
					java.util.Date copyOfto_obs_fct__IMPORT_DATE;
					String copyOfto_obs_fct__SOURCESYSTEM_CD;
					String copyOfto_obs_fct__UPLOAD_ID;
					String copyOfto_obs_fct__STARTDATE_SOURCE_PATH;
					String copyOfto_obs_fct__ENDDATE_SOURCE_PATH;
					String row31__MODIFIER_PATH;
					String row31__MODIFIER_CD;
					String row31__NAME_CHAR;
					String row31__MODIFIER_BLOB;
					java.util.Date row31__UPDATE_DATE;
					java.util.Date row31__DOWNLOAD_DATE;
					java.util.Date row31__IMPORT_DATE;
					String row31__SOURCESYSTEM_CD;
					String row31__UPLOAD_ID;

					public void fillFrom(
							copyOfto_obs_fctStruct copyOfto_obs_fct,
							row31Struct row31,
							BigDecimal exprKey_row32__PATIENT_NUM,
							String exprKey_row32__MODIFIER_CD) {

						this.copyOfto_obs_fct__ENCOUNTER_NUM = copyOfto_obs_fct.ENCOUNTER_NUM;
						this.copyOfto_obs_fct__PATIENT_NUM = copyOfto_obs_fct.PATIENT_NUM;
						this.copyOfto_obs_fct__CONCEPT_CD = copyOfto_obs_fct.CONCEPT_CD;
						this.copyOfto_obs_fct__PROVIDER_ID = copyOfto_obs_fct.PROVIDER_ID;
						this.copyOfto_obs_fct__START_DATE = copyOfto_obs_fct.START_DATE;
						this.copyOfto_obs_fct__MODIFIER_CD = copyOfto_obs_fct.MODIFIER_CD;
						this.copyOfto_obs_fct__INSTANCE_NUM = copyOfto_obs_fct.INSTANCE_NUM;
						this.copyOfto_obs_fct__VALTYPE_CD = copyOfto_obs_fct.VALTYPE_CD;
						this.copyOfto_obs_fct__TVAL_CHAR = copyOfto_obs_fct.TVAL_CHAR;
						this.copyOfto_obs_fct__NVAL_NUM = copyOfto_obs_fct.NVAL_NUM;
						this.copyOfto_obs_fct__VALUEFLAG_CD = copyOfto_obs_fct.VALUEFLAG_CD;
						this.copyOfto_obs_fct__QUANTITY_NUM = copyOfto_obs_fct.QUANTITY_NUM;
						this.copyOfto_obs_fct__UNITS_CD = copyOfto_obs_fct.UNITS_CD;
						this.copyOfto_obs_fct__END_DATE = copyOfto_obs_fct.END_DATE;
						this.copyOfto_obs_fct__LOCATION_CD = copyOfto_obs_fct.LOCATION_CD;
						this.copyOfto_obs_fct__OBSERVATION_BLOB = copyOfto_obs_fct.OBSERVATION_BLOB;
						this.copyOfto_obs_fct__CONFIDENCE_NUM = copyOfto_obs_fct.CONFIDENCE_NUM;
						this.copyOfto_obs_fct__UPDATE_DATE = copyOfto_obs_fct.UPDATE_DATE;
						this.copyOfto_obs_fct__DOWNLOAD_DATE = copyOfto_obs_fct.DOWNLOAD_DATE;
						this.copyOfto_obs_fct__IMPORT_DATE = copyOfto_obs_fct.IMPORT_DATE;
						this.copyOfto_obs_fct__SOURCESYSTEM_CD = copyOfto_obs_fct.SOURCESYSTEM_CD;
						this.copyOfto_obs_fct__UPLOAD_ID = copyOfto_obs_fct.UPLOAD_ID;
						this.copyOfto_obs_fct__STARTDATE_SOURCE_PATH = copyOfto_obs_fct.STARTDATE_SOURCE_PATH;
						this.copyOfto_obs_fct__ENDDATE_SOURCE_PATH = copyOfto_obs_fct.ENDDATE_SOURCE_PATH;
						this.row31__MODIFIER_PATH = row31.MODIFIER_PATH;
						this.row31__MODIFIER_CD = row31.MODIFIER_CD;
						this.row31__NAME_CHAR = row31.NAME_CHAR;
						this.row31__MODIFIER_BLOB = row31.MODIFIER_BLOB;
						this.row31__UPDATE_DATE = row31.UPDATE_DATE;
						this.row31__DOWNLOAD_DATE = row31.DOWNLOAD_DATE;
						this.row31__IMPORT_DATE = row31.IMPORT_DATE;
						this.row31__SOURCESYSTEM_CD = row31.SOURCESYSTEM_CD;
						this.row31__UPLOAD_ID = row31.UPLOAD_ID;
						this.exprKey_row32__PATIENT_NUM = exprKey_row32__PATIENT_NUM;
						this.exprKey_row32__MODIFIER_CD = exprKey_row32__MODIFIER_CD;

					}

					public void copyDataTo(
							copyOfto_obs_fctStruct copyOfto_obs_fct,
							row31Struct row31) {

						copyOfto_obs_fct.ENCOUNTER_NUM = this.copyOfto_obs_fct__ENCOUNTER_NUM;
						copyOfto_obs_fct.PATIENT_NUM = this.copyOfto_obs_fct__PATIENT_NUM;
						copyOfto_obs_fct.CONCEPT_CD = this.copyOfto_obs_fct__CONCEPT_CD;
						copyOfto_obs_fct.PROVIDER_ID = this.copyOfto_obs_fct__PROVIDER_ID;
						copyOfto_obs_fct.START_DATE = this.copyOfto_obs_fct__START_DATE;
						copyOfto_obs_fct.MODIFIER_CD = this.copyOfto_obs_fct__MODIFIER_CD;
						copyOfto_obs_fct.INSTANCE_NUM = this.copyOfto_obs_fct__INSTANCE_NUM;
						copyOfto_obs_fct.VALTYPE_CD = this.copyOfto_obs_fct__VALTYPE_CD;
						copyOfto_obs_fct.TVAL_CHAR = this.copyOfto_obs_fct__TVAL_CHAR;
						copyOfto_obs_fct.NVAL_NUM = this.copyOfto_obs_fct__NVAL_NUM;
						copyOfto_obs_fct.VALUEFLAG_CD = this.copyOfto_obs_fct__VALUEFLAG_CD;
						copyOfto_obs_fct.QUANTITY_NUM = this.copyOfto_obs_fct__QUANTITY_NUM;
						copyOfto_obs_fct.UNITS_CD = this.copyOfto_obs_fct__UNITS_CD;
						copyOfto_obs_fct.END_DATE = this.copyOfto_obs_fct__END_DATE;
						copyOfto_obs_fct.LOCATION_CD = this.copyOfto_obs_fct__LOCATION_CD;
						copyOfto_obs_fct.OBSERVATION_BLOB = this.copyOfto_obs_fct__OBSERVATION_BLOB;
						copyOfto_obs_fct.CONFIDENCE_NUM = this.copyOfto_obs_fct__CONFIDENCE_NUM;
						copyOfto_obs_fct.UPDATE_DATE = this.copyOfto_obs_fct__UPDATE_DATE;
						copyOfto_obs_fct.DOWNLOAD_DATE = this.copyOfto_obs_fct__DOWNLOAD_DATE;
						copyOfto_obs_fct.IMPORT_DATE = this.copyOfto_obs_fct__IMPORT_DATE;
						copyOfto_obs_fct.SOURCESYSTEM_CD = this.copyOfto_obs_fct__SOURCESYSTEM_CD;
						copyOfto_obs_fct.UPLOAD_ID = this.copyOfto_obs_fct__UPLOAD_ID;
						copyOfto_obs_fct.STARTDATE_SOURCE_PATH = this.copyOfto_obs_fct__STARTDATE_SOURCE_PATH;
						copyOfto_obs_fct.ENDDATE_SOURCE_PATH = this.copyOfto_obs_fct__ENDDATE_SOURCE_PATH;
						row31.MODIFIER_PATH = this.row31__MODIFIER_PATH;
						row31.MODIFIER_CD = this.row31__MODIFIER_CD;
						row31.NAME_CHAR = this.row31__NAME_CHAR;
						row31.MODIFIER_BLOB = this.row31__MODIFIER_BLOB;
						row31.UPDATE_DATE = this.row31__UPDATE_DATE;
						row31.DOWNLOAD_DATE = this.row31__DOWNLOAD_DATE;
						row31.IMPORT_DATE = this.row31__IMPORT_DATE;
						row31.SOURCESYSTEM_CD = this.row31__SOURCESYSTEM_CD;
						row31.UPLOAD_ID = this.row31__UPLOAD_ID;

					}

					public String toString() {

						StringBuilder sb = new StringBuilder();
						sb.append(super.toString());
						sb.append("[");

						sb.append("copyOfto_obs_fct__ENCOUNTER_NUM");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__ENCOUNTER_NUM));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__PATIENT_NUM");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__PATIENT_NUM));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__CONCEPT_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__CONCEPT_CD));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__PROVIDER_ID");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__PROVIDER_ID));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__START_DATE");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__START_DATE));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__MODIFIER_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__MODIFIER_CD));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__INSTANCE_NUM");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__INSTANCE_NUM));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__VALTYPE_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__VALTYPE_CD));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__TVAL_CHAR");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__TVAL_CHAR));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__NVAL_NUM");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__NVAL_NUM));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__VALUEFLAG_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__VALUEFLAG_CD));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__QUANTITY_NUM");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__QUANTITY_NUM));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__UNITS_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__UNITS_CD));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__END_DATE");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__END_DATE));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__LOCATION_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__LOCATION_CD));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__OBSERVATION_BLOB");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__OBSERVATION_BLOB));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__CONFIDENCE_NUM");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__CONFIDENCE_NUM));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__UPDATE_DATE");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__UPDATE_DATE));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__DOWNLOAD_DATE");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__DOWNLOAD_DATE));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__IMPORT_DATE");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__IMPORT_DATE));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__SOURCESYSTEM_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__SOURCESYSTEM_CD));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__UPLOAD_ID");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__UPLOAD_ID));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__STARTDATE_SOURCE_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__STARTDATE_SOURCE_PATH));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__ENDDATE_SOURCE_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__ENDDATE_SOURCE_PATH));

						sb.append(", ");

						sb.append("row31__MODIFIER_PATH");
						sb.append("=");
						sb.append(String.valueOf(this.row31__MODIFIER_PATH));

						sb.append(", ");

						sb.append("row31__MODIFIER_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row31__MODIFIER_CD));

						sb.append(", ");

						sb.append("row31__NAME_CHAR");
						sb.append("=");
						sb.append(String.valueOf(this.row31__NAME_CHAR));

						sb.append(", ");

						sb.append("row31__MODIFIER_BLOB");
						sb.append("=");
						sb.append(String.valueOf(this.row31__MODIFIER_BLOB));

						sb.append(", ");

						sb.append("row31__UPDATE_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row31__UPDATE_DATE));

						sb.append(", ");

						sb.append("row31__DOWNLOAD_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row31__DOWNLOAD_DATE));

						sb.append(", ");

						sb.append("row31__IMPORT_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row31__IMPORT_DATE));

						sb.append(", ");

						sb.append("row31__SOURCESYSTEM_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row31__SOURCESYSTEM_CD));

						sb.append(", ");

						sb.append("row31__UPLOAD_ID");
						sb.append("=");
						sb.append(String.valueOf(this.row31__UPLOAD_ID));

						sb.append("]");

						return sb.toString();
					}

					public int compareTo(SortableRow_tMap_15_2 other) {

						int returnValue = 0;

						returnValue = checkNullsAndCompare(
								this.exprKey_row32__PATIENT_NUM,
								other.exprKey_row32__PATIENT_NUM);
						if (returnValue != 0) {
							return returnValue;
						}

						returnValue = checkNullsAndCompare(
								this.exprKey_row32__MODIFIER_CD,
								other.exprKey_row32__MODIFIER_CD);
						if (returnValue != 0) {
							return returnValue;
						}

						return returnValue;
					}

					private int checkNullsAndCompare(Object object1,
							Object object2) {
						int returnValue = 0;
						if (object1 instanceof Comparable
								&& object2 instanceof Comparable) {
							returnValue = ((Comparable) object1)
									.compareTo(object2);
						} else if (object1 != null && object2 != null) {
							returnValue = compareStrings(object1.toString(),
									object2.toString());
						} else if (object1 == null && object2 != null) {
							returnValue = 1;
						} else if (object1 != null && object2 == null) {
							returnValue = -1;
						} else {
							returnValue = 0;
						}

						return returnValue;
					}

					private int compareStrings(String string1, String string2) {
						return string1.compareTo(string2);
					}

					public void readData(ObjectInputStream dis) {

						synchronized (row31Struct.commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

							try {

								int length = 0;

								this.is__rejectedInnerJoin = dis.readBoolean();

								this.copyOfto_obs_fct__ENCOUNTER_NUM = (BigDecimal) dis
										.readObject();

								this.copyOfto_obs_fct__PATIENT_NUM = (BigDecimal) dis
										.readObject();

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__CONCEPT_CD = null;
								} else {
									if (length > row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__CONCEPT_CD = new String(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__PROVIDER_ID = null;
								} else {
									if (length > row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__PROVIDER_ID = new String(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__START_DATE = null;
								} else {
									if (length > row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__START_DATE = new String(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__MODIFIER_CD = null;
								} else {
									if (length > row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__MODIFIER_CD = new String(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__INSTANCE_NUM = null;
								} else {
									if (length > row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__INSTANCE_NUM = new String(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__VALTYPE_CD = null;
								} else {
									if (length > row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__VALTYPE_CD = new String(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__TVAL_CHAR = null;
								} else {
									if (length > row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__TVAL_CHAR = new String(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.copyOfto_obs_fct__NVAL_NUM = null;
								} else {
									this.copyOfto_obs_fct__NVAL_NUM = dis
											.readFloat();
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__VALUEFLAG_CD = null;
								} else {
									if (length > row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__VALUEFLAG_CD = new String(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__QUANTITY_NUM = null;
								} else {
									if (length > row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__QUANTITY_NUM = new String(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__UNITS_CD = null;
								} else {
									if (length > row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__UNITS_CD = new String(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__END_DATE = null;
								} else {
									if (length > row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__END_DATE = new String(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__LOCATION_CD = null;
								} else {
									if (length > row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__LOCATION_CD = new String(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__OBSERVATION_BLOB = null;
								} else {
									if (length > row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__OBSERVATION_BLOB = new String(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__CONFIDENCE_NUM = null;
								} else {
									if (length > row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__CONFIDENCE_NUM = new String(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.copyOfto_obs_fct__UPDATE_DATE = null;
								} else {
									this.copyOfto_obs_fct__UPDATE_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.copyOfto_obs_fct__DOWNLOAD_DATE = null;
								} else {
									this.copyOfto_obs_fct__DOWNLOAD_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.copyOfto_obs_fct__IMPORT_DATE = null;
								} else {
									this.copyOfto_obs_fct__IMPORT_DATE = new Date(
											dis.readLong());
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__SOURCESYSTEM_CD = null;
								} else {
									if (length > row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__SOURCESYSTEM_CD = new String(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__UPLOAD_ID = null;
								} else {
									if (length > row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__UPLOAD_ID = new String(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__STARTDATE_SOURCE_PATH = null;
								} else {
									if (length > row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__STARTDATE_SOURCE_PATH = new String(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__ENDDATE_SOURCE_PATH = null;
								} else {
									if (length > row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__ENDDATE_SOURCE_PATH = new String(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row31__MODIFIER_PATH = null;
								} else {
									if (length > row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row31__MODIFIER_PATH = new String(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row31__MODIFIER_CD = null;
								} else {
									if (length > row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row31__MODIFIER_CD = new String(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row31__NAME_CHAR = null;
								} else {
									if (length > row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row31__NAME_CHAR = new String(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row31__MODIFIER_BLOB = null;
								} else {
									if (length > row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row31__MODIFIER_BLOB = new String(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.row31__UPDATE_DATE = null;
								} else {
									this.row31__UPDATE_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.row31__DOWNLOAD_DATE = null;
								} else {
									this.row31__DOWNLOAD_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.row31__IMPORT_DATE = null;
								} else {
									this.row31__IMPORT_DATE = new Date(
											dis.readLong());
								}

								length = dis.readInt();
								if (length == -1) {
									this.row31__SOURCESYSTEM_CD = null;
								} else {
									if (length > row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row31__SOURCESYSTEM_CD = new String(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row31__UPLOAD_ID = null;
								} else {
									if (length > row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row31__UPLOAD_ID = new String(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								this.exprKey_row32__PATIENT_NUM = (BigDecimal) dis
										.readObject();

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row32__MODIFIER_CD = null;
								} else {
									if (length > row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.exprKey_row32__MODIFIER_CD = new String(
											row31Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

							} catch (IOException e) {
								throw new RuntimeException(e);

							} catch (ClassNotFoundException eCNFE) {
								throw new RuntimeException(eCNFE);

							}

						}
					}

					public void writeData(ObjectOutputStream dos) {
						try {

							dos.writeBoolean(this.is__rejectedInnerJoin);

							dos.writeObject(this.copyOfto_obs_fct__ENCOUNTER_NUM);

							dos.writeObject(this.copyOfto_obs_fct__PATIENT_NUM);

							if (this.copyOfto_obs_fct__CONCEPT_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__CONCEPT_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__PROVIDER_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__PROVIDER_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__START_DATE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__START_DATE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__MODIFIER_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__MODIFIER_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__INSTANCE_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__INSTANCE_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__VALTYPE_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__VALTYPE_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__TVAL_CHAR == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__TVAL_CHAR
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__NVAL_NUM == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeFloat(this.copyOfto_obs_fct__NVAL_NUM);
							}

							if (this.copyOfto_obs_fct__VALUEFLAG_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__VALUEFLAG_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__QUANTITY_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__QUANTITY_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__UNITS_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__UNITS_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__END_DATE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__END_DATE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__LOCATION_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__LOCATION_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__OBSERVATION_BLOB == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__OBSERVATION_BLOB
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__CONFIDENCE_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__CONFIDENCE_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__UPDATE_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.copyOfto_obs_fct__UPDATE_DATE
										.getTime());
							}

							if (this.copyOfto_obs_fct__DOWNLOAD_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.copyOfto_obs_fct__DOWNLOAD_DATE
										.getTime());
							}

							if (this.copyOfto_obs_fct__IMPORT_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.copyOfto_obs_fct__IMPORT_DATE
										.getTime());
							}

							if (this.copyOfto_obs_fct__SOURCESYSTEM_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__SOURCESYSTEM_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__UPLOAD_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__UPLOAD_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__STARTDATE_SOURCE_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__STARTDATE_SOURCE_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__ENDDATE_SOURCE_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__ENDDATE_SOURCE_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row31__MODIFIER_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row31__MODIFIER_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row31__MODIFIER_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row31__MODIFIER_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row31__NAME_CHAR == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row31__NAME_CHAR
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row31__MODIFIER_BLOB == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row31__MODIFIER_BLOB
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row31__UPDATE_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row31__UPDATE_DATE.getTime());
							}

							if (this.row31__DOWNLOAD_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row31__DOWNLOAD_DATE
										.getTime());
							}

							if (this.row31__IMPORT_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row31__IMPORT_DATE.getTime());
							}

							if (this.row31__SOURCESYSTEM_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row31__SOURCESYSTEM_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row31__UPLOAD_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row31__UPLOAD_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							dos.writeObject(this.exprKey_row32__PATIENT_NUM);

							if (this.exprKey_row32__MODIFIER_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row32__MODIFIER_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

				} // G_TM_B_001

				org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_15_2> fsi_tMap_15_2 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_15_2>(
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid + "_tMap_15_2",
						200000) {
					public SortableRow_tMap_15_2 createRowInstance() {
						return new SortableRow_tMap_15_2();
					}
				};

				fsi_tMap_15_2.initPut();

				/**
				 * [tMap_15_TMAP_OUT begin ] stop
				 */

				/**
				 * [tMap_13_TMAP_IN begin ] start
				 */

				ok_Hash.put("tMap_13_TMAP_IN", false);
				start_Hash.put("tMap_13_TMAP_IN", System.currentTimeMillis());
				currentComponent = "tMap_13_TMAP_IN";

				int tos_count_tMap_13_TMAP_IN = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_13_TMAP_IN__Struct {
				}
				Var__tMap_13_TMAP_IN__Struct Var__tMap_13_TMAP_IN = new Var__tMap_13_TMAP_IN__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfto_obs_fctStruct copyOfto_obs_fct_tmp = new copyOfto_obs_fctStruct();
				// ###############################

				/**
				 * [tMap_13_TMAP_IN begin ] stop
				 */
				/**
				 * [tMap_13_TMAP_IN main ] start
				 */

				currentComponent = "tMap_13_TMAP_IN";

				boolean hasCasePrimitiveKeyWithNull_tMap_13_TMAP_IN = false;

				fsi_tMap_13_1.endPut();

				if (copyOfto_tmap == null) {
					copyOfto_tmap = new copyOfto_tmapStruct();
				}

				// ###############################
				// # Input tables (lookups)
				boolean rejectedInnerJoin_tMap_13_TMAP_IN = false;
				boolean mainRowRejected_tMap_13_TMAP_IN = false;

				// /////////////////////////////////////////////
				// Starting Lookup Table "row29"
				// /////////////////////////////////////////////

				SortableRow_tMap_13_1 rsc_tMap_13_1;

				tHash_Lookup_row29.initGet();

				fsi_tMap_13_1.initGet();

				// TEST firstLookupIsPersistentSorted=true
				// isFirstPersistentSortedTable=true

				rejectedInnerJoin_tMap_13_TMAP_IN = false;

				while (fsi_tMap_13_1.hasNext()) { // G_TM_M_250 loop "1"

					// CALL close loop of lookup '1'

					rsc_tMap_13_1 = (SortableRow_tMap_13_1) fsi_tMap_13_1
							.next();
					rsc_tMap_13_1.copyDataTo(copyOfto_tmap);

					rejectedInnerJoin_tMap_13_TMAP_IN = rsc_tMap_13_1.is__rejectedInnerJoin;

					boolean forceLooprow29 = false;

					row29Struct row29ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_13_TMAP_IN) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_13_TMAP_IN = false;

						row29HashKey.MODIFIER_CD = rsc_tMap_13_1.exprKey_row29__MODIFIER_CD;

						tHash_Lookup_row29.lookup(row29HashKey);

						if (!tHash_Lookup_row29.hasNext()) { // G_TM_M_090

							forceLooprow29 = true;

						} // G_TM_M_090

					} // G_TM_M_020

					else { // G 20 - G 21
						forceLooprow29 = true;
					} // G 21

					row29Struct row29 = null;

					while ((tHash_Lookup_row29 != null && tHash_Lookup_row29
							.hasNext()) || forceLooprow29) { // G_TM_M_043

						// CALL close loop of lookup 'row29'

						row29Struct fromLookup_row29 = null;
						row29 = row29Default;

						if (!forceLooprow29) { // G 46

							fromLookup_row29 = tHash_Lookup_row29.next();

							if (fromLookup_row29 != null) {
								row29 = fromLookup_row29;
							}

						} // G 46

						forceLooprow29 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_13_TMAP_IN__Struct Var = Var__tMap_13_TMAP_IN;// ###############################
							// ###############################
							// # Output tables

							copyOfto_obs_fct = null;

							// # Output table : 'copyOfto_obs_fct'
							// # Filter conditions
							if (

							!row29.MODIFIER_CD.equals("@")

							) {
								copyOfto_obs_fct_tmp.ENCOUNTER_NUM = row29.ENCOUNTER_NUM;
								copyOfto_obs_fct_tmp.PATIENT_NUM = row29.PATIENT_NUM;
								copyOfto_obs_fct_tmp.CONCEPT_CD = row29.CONCEPT_CD;
								copyOfto_obs_fct_tmp.PROVIDER_ID = row29.PROVIDER_ID;
								copyOfto_obs_fct_tmp.START_DATE = row29.START_DATE;
								copyOfto_obs_fct_tmp.MODIFIER_CD = row29.MODIFIER_CD;
								copyOfto_obs_fct_tmp.INSTANCE_NUM = row29.INSTANCE_NUM;
								copyOfto_obs_fct_tmp.VALTYPE_CD = row29.VALTYPE_CD;
								copyOfto_obs_fct_tmp.TVAL_CHAR = row29.TVAL_CHAR;
								copyOfto_obs_fct_tmp.NVAL_NUM = row29.NVAL_NUM;
								copyOfto_obs_fct_tmp.VALUEFLAG_CD = row29.VALUEFLAG_CD;
								copyOfto_obs_fct_tmp.QUANTITY_NUM = row29.QUANTITY_NUM;
								copyOfto_obs_fct_tmp.UNITS_CD = row29.UNITS_CD;
								copyOfto_obs_fct_tmp.END_DATE = row29.END_DATE;
								copyOfto_obs_fct_tmp.LOCATION_CD = row29.LOCATION_CD;
								copyOfto_obs_fct_tmp.OBSERVATION_BLOB = row29.OBSERVATION_BLOB;
								copyOfto_obs_fct_tmp.CONFIDENCE_NUM = row29.CONFIDENCE_NUM;
								copyOfto_obs_fct_tmp.UPDATE_DATE = row29.UPDATE_DATE;
								copyOfto_obs_fct_tmp.DOWNLOAD_DATE = row29.DOWNLOAD_DATE;
								copyOfto_obs_fct_tmp.IMPORT_DATE = row29.IMPORT_DATE;
								copyOfto_obs_fct_tmp.SOURCESYSTEM_CD = row29.SOURCESYSTEM_CD;
								copyOfto_obs_fct_tmp.UPLOAD_ID = row29.UPLOAD_ID;
								copyOfto_obs_fct_tmp.STARTDATE_SOURCE_PATH = copyOfto_tmap.STARTDATE_SOURCE_PATH;
								copyOfto_obs_fct_tmp.ENDDATE_SOURCE_PATH = copyOfto_tmap.ENDDATE_SOURCE_PATH;
								copyOfto_obs_fct = copyOfto_obs_fct_tmp;
							} // closing filter/reject
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_13_TMAP_IN = false;

						tos_count_tMap_13_TMAP_IN++;

						/**
						 * [tMap_13_TMAP_IN main ] stop
						 */
						// Start of branch "copyOfto_obs_fct"
						if (copyOfto_obs_fct != null) {

							/**
							 * [tMap_15_TMAP_OUT main ] start
							 */

							currentComponent = "tMap_15_TMAP_OUT";

							boolean hasCasePrimitiveKeyWithNull_tMap_15_TMAP_OUT = false;

							hasCasePrimitiveKeyWithNull_tMap_15_TMAP_OUT = false;

							String exprKey_row31__MODIFIER_PATH = copyOfto_obs_fct.STARTDATE_SOURCE_PATH;

							SortableRow_tMap_15_1 sortableRow_tMap_15_1 = fsi_tMap_15_1
									.getNextFreeRow();

							sortableRow_tMap_15_1.fillFrom(copyOfto_obs_fct,
									exprKey_row31__MODIFIER_PATH);

							fsi_tMap_15_1.put(sortableRow_tMap_15_1);

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_15_TMAP_OUT = false;
							boolean mainRowRejected_tMap_15_TMAP_OUT = false;

							// ###############################

							tos_count_tMap_15_TMAP_OUT++;

							/**
							 * [tMap_15_TMAP_OUT main ] stop
							 */

						} // End of branch "copyOfto_obs_fct"

					} // close loop of lookup 'row29' // G_TM_M_043

				} // G_TM_M_250 close loop read file data '1'

				/**
				 * [tMap_13_TMAP_IN end ] start
				 */

				currentComponent = "tMap_13_TMAP_IN";

				// ###############################
				// # Lookup hashes releasing
				fsi_tMap_13_1.endGet();

				if (tHash_Lookup_row29 != null) {
					tHash_Lookup_row29.endGet();
				}
				globalMap.remove("tHash_Lookup_row29");

				// ###############################

				ok_Hash.put("tMap_13_TMAP_IN", true);
				end_Hash.put("tMap_13_TMAP_IN", System.currentTimeMillis());

				/**
				 * [tMap_13_TMAP_IN end ] stop
				 */

				/**
				 * [tMap_15_TMAP_OUT end ] start
				 */

				currentComponent = "tMap_15_TMAP_OUT";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_15_TMAP_OUT", true);
				end_Hash.put("tMap_15_TMAP_OUT", System.currentTimeMillis());

				/**
				 * [tMap_15_TMAP_OUT end ] stop
				 */

				/**
				 * [tMap_14_TMAP_OUT begin ] start
				 */

				ok_Hash.put("tMap_14_TMAP_OUT", false);
				start_Hash.put("tMap_14_TMAP_OUT", System.currentTimeMillis());
				currentComponent = "tMap_14_TMAP_OUT";

				int tos_count_tMap_14_TMAP_OUT = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row30Struct> tHash_Lookup_row30 = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row30Struct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row30Struct>) globalMap
						.get("tHash_Lookup_row30"));

				row30Struct row30HashKey = new row30Struct();
				row30Struct row30Default = new row30Struct();

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row33Struct> tHash_Lookup_row33 = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row33Struct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row33Struct>) globalMap
						.get("tHash_Lookup_row33"));

				row33Struct row33HashKey = new row33Struct();
				row33Struct row33Default = new row33Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_14_TMAP_OUT__Struct {
				}
				Var__tMap_14_TMAP_OUT__Struct Var__tMap_14_TMAP_OUT = new Var__tMap_14_TMAP_OUT__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				// ###############################

				class SortableRow_tMap_14_1 implements
						Comparable<SortableRow_tMap_14_1>,
						routines.system.IPersistableRow<SortableRow_tMap_14_1> { // G_TM_B_001

					boolean is__rejectedInnerJoin;

					String exprKey_row30__MODIFIER_PATH;

					// copyOfout1
					BigDecimal copyOfout1__ENCOUNTER_NUM;
					BigDecimal copyOfout1__PATIENT_NUM;
					String copyOfout1__CONCEPT_CD;
					String copyOfout1__PROVIDER_ID;
					String copyOfout1__START_DATE;
					String copyOfout1__MODIFIER_CD;
					String copyOfout1__INSTANCE_NUM;
					String copyOfout1__VALTYPE_CD;
					String copyOfout1__TVAL_CHAR;
					Float copyOfout1__NVAL_NUM;
					String copyOfout1__VALUEFLAG_CD;
					String copyOfout1__QUANTITY_NUM;
					String copyOfout1__UNITS_CD;
					String copyOfout1__END_DATE;
					String copyOfout1__LOCATION_CD;
					String copyOfout1__OBSERVATION_BLOB;
					String copyOfout1__CONFIDENCE_NUM;
					java.util.Date copyOfout1__UPDATE_DATE;
					java.util.Date copyOfout1__DOWNLOAD_DATE;
					java.util.Date copyOfout1__IMPORT_DATE;
					String copyOfout1__SOURCESYSTEM_CD;
					String copyOfout1__UPLOAD_ID;
					String copyOfout1__ENDDATE_SOURCE_PATH;

					public void fillFrom(copyOfout1Struct copyOfout1,
							String exprKey_row30__MODIFIER_PATH) {

						this.copyOfout1__ENCOUNTER_NUM = copyOfout1.ENCOUNTER_NUM;
						this.copyOfout1__PATIENT_NUM = copyOfout1.PATIENT_NUM;
						this.copyOfout1__CONCEPT_CD = copyOfout1.CONCEPT_CD;
						this.copyOfout1__PROVIDER_ID = copyOfout1.PROVIDER_ID;
						this.copyOfout1__START_DATE = copyOfout1.START_DATE;
						this.copyOfout1__MODIFIER_CD = copyOfout1.MODIFIER_CD;
						this.copyOfout1__INSTANCE_NUM = copyOfout1.INSTANCE_NUM;
						this.copyOfout1__VALTYPE_CD = copyOfout1.VALTYPE_CD;
						this.copyOfout1__TVAL_CHAR = copyOfout1.TVAL_CHAR;
						this.copyOfout1__NVAL_NUM = copyOfout1.NVAL_NUM;
						this.copyOfout1__VALUEFLAG_CD = copyOfout1.VALUEFLAG_CD;
						this.copyOfout1__QUANTITY_NUM = copyOfout1.QUANTITY_NUM;
						this.copyOfout1__UNITS_CD = copyOfout1.UNITS_CD;
						this.copyOfout1__END_DATE = copyOfout1.END_DATE;
						this.copyOfout1__LOCATION_CD = copyOfout1.LOCATION_CD;
						this.copyOfout1__OBSERVATION_BLOB = copyOfout1.OBSERVATION_BLOB;
						this.copyOfout1__CONFIDENCE_NUM = copyOfout1.CONFIDENCE_NUM;
						this.copyOfout1__UPDATE_DATE = copyOfout1.UPDATE_DATE;
						this.copyOfout1__DOWNLOAD_DATE = copyOfout1.DOWNLOAD_DATE;
						this.copyOfout1__IMPORT_DATE = copyOfout1.IMPORT_DATE;
						this.copyOfout1__SOURCESYSTEM_CD = copyOfout1.SOURCESYSTEM_CD;
						this.copyOfout1__UPLOAD_ID = copyOfout1.UPLOAD_ID;
						this.copyOfout1__ENDDATE_SOURCE_PATH = copyOfout1.ENDDATE_SOURCE_PATH;
						this.exprKey_row30__MODIFIER_PATH = exprKey_row30__MODIFIER_PATH;

					}

					public void copyDataTo(copyOfout1Struct copyOfout1) {

						copyOfout1.ENCOUNTER_NUM = this.copyOfout1__ENCOUNTER_NUM;
						copyOfout1.PATIENT_NUM = this.copyOfout1__PATIENT_NUM;
						copyOfout1.CONCEPT_CD = this.copyOfout1__CONCEPT_CD;
						copyOfout1.PROVIDER_ID = this.copyOfout1__PROVIDER_ID;
						copyOfout1.START_DATE = this.copyOfout1__START_DATE;
						copyOfout1.MODIFIER_CD = this.copyOfout1__MODIFIER_CD;
						copyOfout1.INSTANCE_NUM = this.copyOfout1__INSTANCE_NUM;
						copyOfout1.VALTYPE_CD = this.copyOfout1__VALTYPE_CD;
						copyOfout1.TVAL_CHAR = this.copyOfout1__TVAL_CHAR;
						copyOfout1.NVAL_NUM = this.copyOfout1__NVAL_NUM;
						copyOfout1.VALUEFLAG_CD = this.copyOfout1__VALUEFLAG_CD;
						copyOfout1.QUANTITY_NUM = this.copyOfout1__QUANTITY_NUM;
						copyOfout1.UNITS_CD = this.copyOfout1__UNITS_CD;
						copyOfout1.END_DATE = this.copyOfout1__END_DATE;
						copyOfout1.LOCATION_CD = this.copyOfout1__LOCATION_CD;
						copyOfout1.OBSERVATION_BLOB = this.copyOfout1__OBSERVATION_BLOB;
						copyOfout1.CONFIDENCE_NUM = this.copyOfout1__CONFIDENCE_NUM;
						copyOfout1.UPDATE_DATE = this.copyOfout1__UPDATE_DATE;
						copyOfout1.DOWNLOAD_DATE = this.copyOfout1__DOWNLOAD_DATE;
						copyOfout1.IMPORT_DATE = this.copyOfout1__IMPORT_DATE;
						copyOfout1.SOURCESYSTEM_CD = this.copyOfout1__SOURCESYSTEM_CD;
						copyOfout1.UPLOAD_ID = this.copyOfout1__UPLOAD_ID;
						copyOfout1.ENDDATE_SOURCE_PATH = this.copyOfout1__ENDDATE_SOURCE_PATH;

					}

					public String toString() {

						StringBuilder sb = new StringBuilder();
						sb.append(super.toString());
						sb.append("[");

						sb.append("copyOfout1__ENCOUNTER_NUM");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfout1__ENCOUNTER_NUM));

						sb.append(", ");

						sb.append("copyOfout1__PATIENT_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__PATIENT_NUM));

						sb.append(", ");

						sb.append("copyOfout1__CONCEPT_CD");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__CONCEPT_CD));

						sb.append(", ");

						sb.append("copyOfout1__PROVIDER_ID");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__PROVIDER_ID));

						sb.append(", ");

						sb.append("copyOfout1__START_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__START_DATE));

						sb.append(", ");

						sb.append("copyOfout1__MODIFIER_CD");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__MODIFIER_CD));

						sb.append(", ");

						sb.append("copyOfout1__INSTANCE_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__INSTANCE_NUM));

						sb.append(", ");

						sb.append("copyOfout1__VALTYPE_CD");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__VALTYPE_CD));

						sb.append(", ");

						sb.append("copyOfout1__TVAL_CHAR");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__TVAL_CHAR));

						sb.append(", ");

						sb.append("copyOfout1__NVAL_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__NVAL_NUM));

						sb.append(", ");

						sb.append("copyOfout1__VALUEFLAG_CD");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__VALUEFLAG_CD));

						sb.append(", ");

						sb.append("copyOfout1__QUANTITY_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__QUANTITY_NUM));

						sb.append(", ");

						sb.append("copyOfout1__UNITS_CD");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__UNITS_CD));

						sb.append(", ");

						sb.append("copyOfout1__END_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__END_DATE));

						sb.append(", ");

						sb.append("copyOfout1__LOCATION_CD");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__LOCATION_CD));

						sb.append(", ");

						sb.append("copyOfout1__OBSERVATION_BLOB");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfout1__OBSERVATION_BLOB));

						sb.append(", ");

						sb.append("copyOfout1__CONFIDENCE_NUM");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfout1__CONFIDENCE_NUM));

						sb.append(", ");

						sb.append("copyOfout1__UPDATE_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__UPDATE_DATE));

						sb.append(", ");

						sb.append("copyOfout1__DOWNLOAD_DATE");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfout1__DOWNLOAD_DATE));

						sb.append(", ");

						sb.append("copyOfout1__IMPORT_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__IMPORT_DATE));

						sb.append(", ");

						sb.append("copyOfout1__SOURCESYSTEM_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfout1__SOURCESYSTEM_CD));

						sb.append(", ");

						sb.append("copyOfout1__UPLOAD_ID");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__UPLOAD_ID));

						sb.append(", ");

						sb.append("copyOfout1__ENDDATE_SOURCE_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfout1__ENDDATE_SOURCE_PATH));

						sb.append("]");

						return sb.toString();
					}

					public int compareTo(SortableRow_tMap_14_1 other) {

						int returnValue = 0;

						returnValue = checkNullsAndCompare(
								this.exprKey_row30__MODIFIER_PATH,
								other.exprKey_row30__MODIFIER_PATH);
						if (returnValue != 0) {
							return returnValue;
						}

						return returnValue;
					}

					private int checkNullsAndCompare(Object object1,
							Object object2) {
						int returnValue = 0;
						if (object1 instanceof Comparable
								&& object2 instanceof Comparable) {
							returnValue = ((Comparable) object1)
									.compareTo(object2);
						} else if (object1 != null && object2 != null) {
							returnValue = compareStrings(object1.toString(),
									object2.toString());
						} else if (object1 == null && object2 != null) {
							returnValue = 1;
						} else if (object1 != null && object2 == null) {
							returnValue = -1;
						} else {
							returnValue = 0;
						}

						return returnValue;
					}

					private int compareStrings(String string1, String string2) {
						return string1.compareTo(string2);
					}

					public void readData(ObjectInputStream dis) {

						synchronized (copyOfout1Struct.commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

							try {

								int length = 0;

								this.is__rejectedInnerJoin = dis.readBoolean();

								this.copyOfout1__ENCOUNTER_NUM = (BigDecimal) dis
										.readObject();

								this.copyOfout1__PATIENT_NUM = (BigDecimal) dis
										.readObject();

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__CONCEPT_CD = null;
								} else {
									if (length > copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__CONCEPT_CD = new String(
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__PROVIDER_ID = null;
								} else {
									if (length > copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__PROVIDER_ID = new String(
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__START_DATE = null;
								} else {
									if (length > copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__START_DATE = new String(
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__MODIFIER_CD = null;
								} else {
									if (length > copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__MODIFIER_CD = new String(
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__INSTANCE_NUM = null;
								} else {
									if (length > copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__INSTANCE_NUM = new String(
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__VALTYPE_CD = null;
								} else {
									if (length > copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__VALTYPE_CD = new String(
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__TVAL_CHAR = null;
								} else {
									if (length > copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__TVAL_CHAR = new String(
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.copyOfout1__NVAL_NUM = null;
								} else {
									this.copyOfout1__NVAL_NUM = dis.readFloat();
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__VALUEFLAG_CD = null;
								} else {
									if (length > copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__VALUEFLAG_CD = new String(
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__QUANTITY_NUM = null;
								} else {
									if (length > copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__QUANTITY_NUM = new String(
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__UNITS_CD = null;
								} else {
									if (length > copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__UNITS_CD = new String(
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__END_DATE = null;
								} else {
									if (length > copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__END_DATE = new String(
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__LOCATION_CD = null;
								} else {
									if (length > copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__LOCATION_CD = new String(
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__OBSERVATION_BLOB = null;
								} else {
									if (length > copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__OBSERVATION_BLOB = new String(
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__CONFIDENCE_NUM = null;
								} else {
									if (length > copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__CONFIDENCE_NUM = new String(
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.copyOfout1__UPDATE_DATE = null;
								} else {
									this.copyOfout1__UPDATE_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.copyOfout1__DOWNLOAD_DATE = null;
								} else {
									this.copyOfout1__DOWNLOAD_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.copyOfout1__IMPORT_DATE = null;
								} else {
									this.copyOfout1__IMPORT_DATE = new Date(
											dis.readLong());
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__SOURCESYSTEM_CD = null;
								} else {
									if (length > copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__SOURCESYSTEM_CD = new String(
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__UPLOAD_ID = null;
								} else {
									if (length > copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__UPLOAD_ID = new String(
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__ENDDATE_SOURCE_PATH = null;
								} else {
									if (length > copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__ENDDATE_SOURCE_PATH = new String(
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row30__MODIFIER_PATH = null;
								} else {
									if (length > copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.exprKey_row30__MODIFIER_PATH = new String(
											copyOfout1Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

							} catch (IOException e) {
								throw new RuntimeException(e);

							} catch (ClassNotFoundException eCNFE) {
								throw new RuntimeException(eCNFE);

							}

						}
					}

					public void writeData(ObjectOutputStream dos) {
						try {

							dos.writeBoolean(this.is__rejectedInnerJoin);

							dos.writeObject(this.copyOfout1__ENCOUNTER_NUM);

							dos.writeObject(this.copyOfout1__PATIENT_NUM);

							if (this.copyOfout1__CONCEPT_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__CONCEPT_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__PROVIDER_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__PROVIDER_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__START_DATE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__START_DATE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__MODIFIER_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__MODIFIER_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__INSTANCE_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__INSTANCE_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__VALTYPE_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__VALTYPE_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__TVAL_CHAR == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__TVAL_CHAR
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__NVAL_NUM == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeFloat(this.copyOfout1__NVAL_NUM);
							}

							if (this.copyOfout1__VALUEFLAG_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__VALUEFLAG_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__QUANTITY_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__QUANTITY_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__UNITS_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__UNITS_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__END_DATE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__END_DATE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__LOCATION_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__LOCATION_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__OBSERVATION_BLOB == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__OBSERVATION_BLOB
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__CONFIDENCE_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__CONFIDENCE_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__UPDATE_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.copyOfout1__UPDATE_DATE
										.getTime());
							}

							if (this.copyOfout1__DOWNLOAD_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.copyOfout1__DOWNLOAD_DATE
										.getTime());
							}

							if (this.copyOfout1__IMPORT_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.copyOfout1__IMPORT_DATE
										.getTime());
							}

							if (this.copyOfout1__SOURCESYSTEM_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__SOURCESYSTEM_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__UPLOAD_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__UPLOAD_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__ENDDATE_SOURCE_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__ENDDATE_SOURCE_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.exprKey_row30__MODIFIER_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row30__MODIFIER_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

				} // G_TM_B_001

				org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_14_1> fsi_tMap_14_1 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_14_1>(
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid + "_tMap_14_1",
						200000) {
					public SortableRow_tMap_14_1 createRowInstance() {
						return new SortableRow_tMap_14_1();
					}
				};

				fsi_tMap_14_1.initPut();

				class SortableRow_tMap_14_2 implements
						Comparable<SortableRow_tMap_14_2>,
						routines.system.IPersistableRow<SortableRow_tMap_14_2> { // G_TM_B_001

					boolean is__rejectedInnerJoin;

					BigDecimal exprKey_row33__PATIENT_NUM;
					String exprKey_row33__MODIFIER_CD;

					// row30
					BigDecimal copyOfout1__ENCOUNTER_NUM;
					BigDecimal copyOfout1__PATIENT_NUM;
					String copyOfout1__CONCEPT_CD;
					String copyOfout1__PROVIDER_ID;
					String copyOfout1__START_DATE;
					String copyOfout1__MODIFIER_CD;
					String copyOfout1__INSTANCE_NUM;
					String copyOfout1__VALTYPE_CD;
					String copyOfout1__TVAL_CHAR;
					Float copyOfout1__NVAL_NUM;
					String copyOfout1__VALUEFLAG_CD;
					String copyOfout1__QUANTITY_NUM;
					String copyOfout1__UNITS_CD;
					String copyOfout1__END_DATE;
					String copyOfout1__LOCATION_CD;
					String copyOfout1__OBSERVATION_BLOB;
					String copyOfout1__CONFIDENCE_NUM;
					java.util.Date copyOfout1__UPDATE_DATE;
					java.util.Date copyOfout1__DOWNLOAD_DATE;
					java.util.Date copyOfout1__IMPORT_DATE;
					String copyOfout1__SOURCESYSTEM_CD;
					String copyOfout1__UPLOAD_ID;
					String copyOfout1__ENDDATE_SOURCE_PATH;
					String row30__MODIFIER_PATH;
					String row30__MODIFIER_CD;
					String row30__NAME_CHAR;
					String row30__MODIFIER_BLOB;
					java.util.Date row30__UPDATE_DATE;
					java.util.Date row30__DOWNLOAD_DATE;
					java.util.Date row30__IMPORT_DATE;
					String row30__SOURCESYSTEM_CD;
					String row30__UPLOAD_ID;

					public void fillFrom(copyOfout1Struct copyOfout1,
							row30Struct row30,
							BigDecimal exprKey_row33__PATIENT_NUM,
							String exprKey_row33__MODIFIER_CD) {

						this.copyOfout1__ENCOUNTER_NUM = copyOfout1.ENCOUNTER_NUM;
						this.copyOfout1__PATIENT_NUM = copyOfout1.PATIENT_NUM;
						this.copyOfout1__CONCEPT_CD = copyOfout1.CONCEPT_CD;
						this.copyOfout1__PROVIDER_ID = copyOfout1.PROVIDER_ID;
						this.copyOfout1__START_DATE = copyOfout1.START_DATE;
						this.copyOfout1__MODIFIER_CD = copyOfout1.MODIFIER_CD;
						this.copyOfout1__INSTANCE_NUM = copyOfout1.INSTANCE_NUM;
						this.copyOfout1__VALTYPE_CD = copyOfout1.VALTYPE_CD;
						this.copyOfout1__TVAL_CHAR = copyOfout1.TVAL_CHAR;
						this.copyOfout1__NVAL_NUM = copyOfout1.NVAL_NUM;
						this.copyOfout1__VALUEFLAG_CD = copyOfout1.VALUEFLAG_CD;
						this.copyOfout1__QUANTITY_NUM = copyOfout1.QUANTITY_NUM;
						this.copyOfout1__UNITS_CD = copyOfout1.UNITS_CD;
						this.copyOfout1__END_DATE = copyOfout1.END_DATE;
						this.copyOfout1__LOCATION_CD = copyOfout1.LOCATION_CD;
						this.copyOfout1__OBSERVATION_BLOB = copyOfout1.OBSERVATION_BLOB;
						this.copyOfout1__CONFIDENCE_NUM = copyOfout1.CONFIDENCE_NUM;
						this.copyOfout1__UPDATE_DATE = copyOfout1.UPDATE_DATE;
						this.copyOfout1__DOWNLOAD_DATE = copyOfout1.DOWNLOAD_DATE;
						this.copyOfout1__IMPORT_DATE = copyOfout1.IMPORT_DATE;
						this.copyOfout1__SOURCESYSTEM_CD = copyOfout1.SOURCESYSTEM_CD;
						this.copyOfout1__UPLOAD_ID = copyOfout1.UPLOAD_ID;
						this.copyOfout1__ENDDATE_SOURCE_PATH = copyOfout1.ENDDATE_SOURCE_PATH;
						this.row30__MODIFIER_PATH = row30.MODIFIER_PATH;
						this.row30__MODIFIER_CD = row30.MODIFIER_CD;
						this.row30__NAME_CHAR = row30.NAME_CHAR;
						this.row30__MODIFIER_BLOB = row30.MODIFIER_BLOB;
						this.row30__UPDATE_DATE = row30.UPDATE_DATE;
						this.row30__DOWNLOAD_DATE = row30.DOWNLOAD_DATE;
						this.row30__IMPORT_DATE = row30.IMPORT_DATE;
						this.row30__SOURCESYSTEM_CD = row30.SOURCESYSTEM_CD;
						this.row30__UPLOAD_ID = row30.UPLOAD_ID;
						this.exprKey_row33__PATIENT_NUM = exprKey_row33__PATIENT_NUM;
						this.exprKey_row33__MODIFIER_CD = exprKey_row33__MODIFIER_CD;

					}

					public void copyDataTo(copyOfout1Struct copyOfout1,
							row30Struct row30) {

						copyOfout1.ENCOUNTER_NUM = this.copyOfout1__ENCOUNTER_NUM;
						copyOfout1.PATIENT_NUM = this.copyOfout1__PATIENT_NUM;
						copyOfout1.CONCEPT_CD = this.copyOfout1__CONCEPT_CD;
						copyOfout1.PROVIDER_ID = this.copyOfout1__PROVIDER_ID;
						copyOfout1.START_DATE = this.copyOfout1__START_DATE;
						copyOfout1.MODIFIER_CD = this.copyOfout1__MODIFIER_CD;
						copyOfout1.INSTANCE_NUM = this.copyOfout1__INSTANCE_NUM;
						copyOfout1.VALTYPE_CD = this.copyOfout1__VALTYPE_CD;
						copyOfout1.TVAL_CHAR = this.copyOfout1__TVAL_CHAR;
						copyOfout1.NVAL_NUM = this.copyOfout1__NVAL_NUM;
						copyOfout1.VALUEFLAG_CD = this.copyOfout1__VALUEFLAG_CD;
						copyOfout1.QUANTITY_NUM = this.copyOfout1__QUANTITY_NUM;
						copyOfout1.UNITS_CD = this.copyOfout1__UNITS_CD;
						copyOfout1.END_DATE = this.copyOfout1__END_DATE;
						copyOfout1.LOCATION_CD = this.copyOfout1__LOCATION_CD;
						copyOfout1.OBSERVATION_BLOB = this.copyOfout1__OBSERVATION_BLOB;
						copyOfout1.CONFIDENCE_NUM = this.copyOfout1__CONFIDENCE_NUM;
						copyOfout1.UPDATE_DATE = this.copyOfout1__UPDATE_DATE;
						copyOfout1.DOWNLOAD_DATE = this.copyOfout1__DOWNLOAD_DATE;
						copyOfout1.IMPORT_DATE = this.copyOfout1__IMPORT_DATE;
						copyOfout1.SOURCESYSTEM_CD = this.copyOfout1__SOURCESYSTEM_CD;
						copyOfout1.UPLOAD_ID = this.copyOfout1__UPLOAD_ID;
						copyOfout1.ENDDATE_SOURCE_PATH = this.copyOfout1__ENDDATE_SOURCE_PATH;
						row30.MODIFIER_PATH = this.row30__MODIFIER_PATH;
						row30.MODIFIER_CD = this.row30__MODIFIER_CD;
						row30.NAME_CHAR = this.row30__NAME_CHAR;
						row30.MODIFIER_BLOB = this.row30__MODIFIER_BLOB;
						row30.UPDATE_DATE = this.row30__UPDATE_DATE;
						row30.DOWNLOAD_DATE = this.row30__DOWNLOAD_DATE;
						row30.IMPORT_DATE = this.row30__IMPORT_DATE;
						row30.SOURCESYSTEM_CD = this.row30__SOURCESYSTEM_CD;
						row30.UPLOAD_ID = this.row30__UPLOAD_ID;

					}

					public String toString() {

						StringBuilder sb = new StringBuilder();
						sb.append(super.toString());
						sb.append("[");

						sb.append("copyOfout1__ENCOUNTER_NUM");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfout1__ENCOUNTER_NUM));

						sb.append(", ");

						sb.append("copyOfout1__PATIENT_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__PATIENT_NUM));

						sb.append(", ");

						sb.append("copyOfout1__CONCEPT_CD");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__CONCEPT_CD));

						sb.append(", ");

						sb.append("copyOfout1__PROVIDER_ID");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__PROVIDER_ID));

						sb.append(", ");

						sb.append("copyOfout1__START_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__START_DATE));

						sb.append(", ");

						sb.append("copyOfout1__MODIFIER_CD");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__MODIFIER_CD));

						sb.append(", ");

						sb.append("copyOfout1__INSTANCE_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__INSTANCE_NUM));

						sb.append(", ");

						sb.append("copyOfout1__VALTYPE_CD");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__VALTYPE_CD));

						sb.append(", ");

						sb.append("copyOfout1__TVAL_CHAR");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__TVAL_CHAR));

						sb.append(", ");

						sb.append("copyOfout1__NVAL_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__NVAL_NUM));

						sb.append(", ");

						sb.append("copyOfout1__VALUEFLAG_CD");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__VALUEFLAG_CD));

						sb.append(", ");

						sb.append("copyOfout1__QUANTITY_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__QUANTITY_NUM));

						sb.append(", ");

						sb.append("copyOfout1__UNITS_CD");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__UNITS_CD));

						sb.append(", ");

						sb.append("copyOfout1__END_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__END_DATE));

						sb.append(", ");

						sb.append("copyOfout1__LOCATION_CD");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__LOCATION_CD));

						sb.append(", ");

						sb.append("copyOfout1__OBSERVATION_BLOB");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfout1__OBSERVATION_BLOB));

						sb.append(", ");

						sb.append("copyOfout1__CONFIDENCE_NUM");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfout1__CONFIDENCE_NUM));

						sb.append(", ");

						sb.append("copyOfout1__UPDATE_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__UPDATE_DATE));

						sb.append(", ");

						sb.append("copyOfout1__DOWNLOAD_DATE");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfout1__DOWNLOAD_DATE));

						sb.append(", ");

						sb.append("copyOfout1__IMPORT_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__IMPORT_DATE));

						sb.append(", ");

						sb.append("copyOfout1__SOURCESYSTEM_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfout1__SOURCESYSTEM_CD));

						sb.append(", ");

						sb.append("copyOfout1__UPLOAD_ID");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__UPLOAD_ID));

						sb.append(", ");

						sb.append("copyOfout1__ENDDATE_SOURCE_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfout1__ENDDATE_SOURCE_PATH));

						sb.append(", ");

						sb.append("row30__MODIFIER_PATH");
						sb.append("=");
						sb.append(String.valueOf(this.row30__MODIFIER_PATH));

						sb.append(", ");

						sb.append("row30__MODIFIER_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row30__MODIFIER_CD));

						sb.append(", ");

						sb.append("row30__NAME_CHAR");
						sb.append("=");
						sb.append(String.valueOf(this.row30__NAME_CHAR));

						sb.append(", ");

						sb.append("row30__MODIFIER_BLOB");
						sb.append("=");
						sb.append(String.valueOf(this.row30__MODIFIER_BLOB));

						sb.append(", ");

						sb.append("row30__UPDATE_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row30__UPDATE_DATE));

						sb.append(", ");

						sb.append("row30__DOWNLOAD_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row30__DOWNLOAD_DATE));

						sb.append(", ");

						sb.append("row30__IMPORT_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row30__IMPORT_DATE));

						sb.append(", ");

						sb.append("row30__SOURCESYSTEM_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row30__SOURCESYSTEM_CD));

						sb.append(", ");

						sb.append("row30__UPLOAD_ID");
						sb.append("=");
						sb.append(String.valueOf(this.row30__UPLOAD_ID));

						sb.append("]");

						return sb.toString();
					}

					public int compareTo(SortableRow_tMap_14_2 other) {

						int returnValue = 0;

						returnValue = checkNullsAndCompare(
								this.exprKey_row33__PATIENT_NUM,
								other.exprKey_row33__PATIENT_NUM);
						if (returnValue != 0) {
							return returnValue;
						}

						returnValue = checkNullsAndCompare(
								this.exprKey_row33__MODIFIER_CD,
								other.exprKey_row33__MODIFIER_CD);
						if (returnValue != 0) {
							return returnValue;
						}

						return returnValue;
					}

					private int checkNullsAndCompare(Object object1,
							Object object2) {
						int returnValue = 0;
						if (object1 instanceof Comparable
								&& object2 instanceof Comparable) {
							returnValue = ((Comparable) object1)
									.compareTo(object2);
						} else if (object1 != null && object2 != null) {
							returnValue = compareStrings(object1.toString(),
									object2.toString());
						} else if (object1 == null && object2 != null) {
							returnValue = 1;
						} else if (object1 != null && object2 == null) {
							returnValue = -1;
						} else {
							returnValue = 0;
						}

						return returnValue;
					}

					private int compareStrings(String string1, String string2) {
						return string1.compareTo(string2);
					}

					public void readData(ObjectInputStream dis) {

						synchronized (row30Struct.commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

							try {

								int length = 0;

								this.is__rejectedInnerJoin = dis.readBoolean();

								this.copyOfout1__ENCOUNTER_NUM = (BigDecimal) dis
										.readObject();

								this.copyOfout1__PATIENT_NUM = (BigDecimal) dis
										.readObject();

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__CONCEPT_CD = null;
								} else {
									if (length > row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__CONCEPT_CD = new String(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__PROVIDER_ID = null;
								} else {
									if (length > row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__PROVIDER_ID = new String(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__START_DATE = null;
								} else {
									if (length > row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__START_DATE = new String(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__MODIFIER_CD = null;
								} else {
									if (length > row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__MODIFIER_CD = new String(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__INSTANCE_NUM = null;
								} else {
									if (length > row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__INSTANCE_NUM = new String(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__VALTYPE_CD = null;
								} else {
									if (length > row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__VALTYPE_CD = new String(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__TVAL_CHAR = null;
								} else {
									if (length > row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__TVAL_CHAR = new String(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.copyOfout1__NVAL_NUM = null;
								} else {
									this.copyOfout1__NVAL_NUM = dis.readFloat();
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__VALUEFLAG_CD = null;
								} else {
									if (length > row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__VALUEFLAG_CD = new String(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__QUANTITY_NUM = null;
								} else {
									if (length > row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__QUANTITY_NUM = new String(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__UNITS_CD = null;
								} else {
									if (length > row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__UNITS_CD = new String(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__END_DATE = null;
								} else {
									if (length > row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__END_DATE = new String(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__LOCATION_CD = null;
								} else {
									if (length > row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__LOCATION_CD = new String(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__OBSERVATION_BLOB = null;
								} else {
									if (length > row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__OBSERVATION_BLOB = new String(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__CONFIDENCE_NUM = null;
								} else {
									if (length > row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__CONFIDENCE_NUM = new String(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.copyOfout1__UPDATE_DATE = null;
								} else {
									this.copyOfout1__UPDATE_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.copyOfout1__DOWNLOAD_DATE = null;
								} else {
									this.copyOfout1__DOWNLOAD_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.copyOfout1__IMPORT_DATE = null;
								} else {
									this.copyOfout1__IMPORT_DATE = new Date(
											dis.readLong());
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__SOURCESYSTEM_CD = null;
								} else {
									if (length > row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__SOURCESYSTEM_CD = new String(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__UPLOAD_ID = null;
								} else {
									if (length > row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__UPLOAD_ID = new String(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__ENDDATE_SOURCE_PATH = null;
								} else {
									if (length > row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__ENDDATE_SOURCE_PATH = new String(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row30__MODIFIER_PATH = null;
								} else {
									if (length > row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row30__MODIFIER_PATH = new String(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row30__MODIFIER_CD = null;
								} else {
									if (length > row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row30__MODIFIER_CD = new String(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row30__NAME_CHAR = null;
								} else {
									if (length > row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row30__NAME_CHAR = new String(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row30__MODIFIER_BLOB = null;
								} else {
									if (length > row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row30__MODIFIER_BLOB = new String(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.row30__UPDATE_DATE = null;
								} else {
									this.row30__UPDATE_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.row30__DOWNLOAD_DATE = null;
								} else {
									this.row30__DOWNLOAD_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.row30__IMPORT_DATE = null;
								} else {
									this.row30__IMPORT_DATE = new Date(
											dis.readLong());
								}

								length = dis.readInt();
								if (length == -1) {
									this.row30__SOURCESYSTEM_CD = null;
								} else {
									if (length > row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row30__SOURCESYSTEM_CD = new String(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row30__UPLOAD_ID = null;
								} else {
									if (length > row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row30__UPLOAD_ID = new String(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								this.exprKey_row33__PATIENT_NUM = (BigDecimal) dis
										.readObject();

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row33__MODIFIER_CD = null;
								} else {
									if (length > row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.exprKey_row33__MODIFIER_CD = new String(
											row30Struct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

							} catch (IOException e) {
								throw new RuntimeException(e);

							} catch (ClassNotFoundException eCNFE) {
								throw new RuntimeException(eCNFE);

							}

						}
					}

					public void writeData(ObjectOutputStream dos) {
						try {

							dos.writeBoolean(this.is__rejectedInnerJoin);

							dos.writeObject(this.copyOfout1__ENCOUNTER_NUM);

							dos.writeObject(this.copyOfout1__PATIENT_NUM);

							if (this.copyOfout1__CONCEPT_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__CONCEPT_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__PROVIDER_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__PROVIDER_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__START_DATE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__START_DATE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__MODIFIER_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__MODIFIER_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__INSTANCE_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__INSTANCE_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__VALTYPE_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__VALTYPE_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__TVAL_CHAR == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__TVAL_CHAR
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__NVAL_NUM == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeFloat(this.copyOfout1__NVAL_NUM);
							}

							if (this.copyOfout1__VALUEFLAG_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__VALUEFLAG_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__QUANTITY_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__QUANTITY_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__UNITS_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__UNITS_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__END_DATE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__END_DATE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__LOCATION_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__LOCATION_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__OBSERVATION_BLOB == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__OBSERVATION_BLOB
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__CONFIDENCE_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__CONFIDENCE_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__UPDATE_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.copyOfout1__UPDATE_DATE
										.getTime());
							}

							if (this.copyOfout1__DOWNLOAD_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.copyOfout1__DOWNLOAD_DATE
										.getTime());
							}

							if (this.copyOfout1__IMPORT_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.copyOfout1__IMPORT_DATE
										.getTime());
							}

							if (this.copyOfout1__SOURCESYSTEM_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__SOURCESYSTEM_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__UPLOAD_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__UPLOAD_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__ENDDATE_SOURCE_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__ENDDATE_SOURCE_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row30__MODIFIER_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row30__MODIFIER_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row30__MODIFIER_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row30__MODIFIER_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row30__NAME_CHAR == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row30__NAME_CHAR
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row30__MODIFIER_BLOB == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row30__MODIFIER_BLOB
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row30__UPDATE_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row30__UPDATE_DATE.getTime());
							}

							if (this.row30__DOWNLOAD_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row30__DOWNLOAD_DATE
										.getTime());
							}

							if (this.row30__IMPORT_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row30__IMPORT_DATE.getTime());
							}

							if (this.row30__SOURCESYSTEM_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row30__SOURCESYSTEM_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row30__UPLOAD_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row30__UPLOAD_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							dos.writeObject(this.exprKey_row33__PATIENT_NUM);

							if (this.exprKey_row33__MODIFIER_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row33__MODIFIER_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

				} // G_TM_B_001

				org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_14_2> fsi_tMap_14_2 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_14_2>(
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid + "_tMap_14_2",
						200000) {
					public SortableRow_tMap_14_2 createRowInstance() {
						return new SortableRow_tMap_14_2();
					}
				};

				fsi_tMap_14_2.initPut();

				/**
				 * [tMap_14_TMAP_OUT begin ] stop
				 */

				/**
				 * [tMap_15_TMAP_IN begin ] start
				 */

				ok_Hash.put("tMap_15_TMAP_IN", false);
				start_Hash.put("tMap_15_TMAP_IN", System.currentTimeMillis());
				currentComponent = "tMap_15_TMAP_IN";

				int tos_count_tMap_15_TMAP_IN = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_15_TMAP_IN__Struct {
				}
				Var__tMap_15_TMAP_IN__Struct Var__tMap_15_TMAP_IN = new Var__tMap_15_TMAP_IN__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfout1Struct copyOfout1_tmp = new copyOfout1Struct();
				// ###############################

				List<copyOfout1Struct> copyOfout1_List = new java.util.ArrayList<copyOfout1Struct>();

				/**
				 * [tMap_15_TMAP_IN begin ] stop
				 */
				/**
				 * [tMap_15_TMAP_IN main ] start
				 */

				currentComponent = "tMap_15_TMAP_IN";

				boolean hasCasePrimitiveKeyWithNull_tMap_15_TMAP_IN = false;

				fsi_tMap_15_1.endPut();

				if (copyOfto_obs_fct == null) {
					copyOfto_obs_fct = new copyOfto_obs_fctStruct();
				}

				// ###############################
				// # Input tables (lookups)
				boolean rejectedInnerJoin_tMap_15_TMAP_IN = false;
				boolean mainRowRejected_tMap_15_TMAP_IN = false;

				// /////////////////////////////////////////////
				// Starting Lookup Table "row31"
				// /////////////////////////////////////////////

				SortableRow_tMap_15_1 rsc_tMap_15_1;

				tHash_Lookup_row31.initGet();

				fsi_tMap_15_1.initGet();

				// TEST firstLookupIsPersistentSorted=true
				// isFirstPersistentSortedTable=true

				rejectedInnerJoin_tMap_15_TMAP_IN = false;

				while (fsi_tMap_15_1.hasNext()) { // G_TM_M_250 loop "1"

					rsc_tMap_15_1 = (SortableRow_tMap_15_1) fsi_tMap_15_1
							.next();
					rsc_tMap_15_1.copyDataTo(copyOfto_obs_fct);

					rejectedInnerJoin_tMap_15_TMAP_IN = rsc_tMap_15_1.is__rejectedInnerJoin;

					boolean forceLooprow31 = false;

					row31Struct row31ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_15_TMAP_IN) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_15_TMAP_IN = false;

						row31HashKey.MODIFIER_PATH = rsc_tMap_15_1.exprKey_row31__MODIFIER_PATH;

						tHash_Lookup_row31.lookup(row31HashKey);

						if (!tHash_Lookup_row31.hasNext()) { // G_TM_M_090

							rejectedInnerJoin_tMap_15_TMAP_IN = true;

						} // G_TM_M_090

					} // G_TM_M_020

					row31Struct row31 = null;

					row31Struct fromLookup_row31 = null;
					row31 = row31Default;

					if (tHash_Lookup_row31 != null
							&& tHash_Lookup_row31.hasNext()) { // G 099

						fromLookup_row31 = tHash_Lookup_row31.next();

					} // G 099

					if (fromLookup_row31 != null) {
						row31 = fromLookup_row31;
					}

					BigDecimal exprKey_row32__PATIENT_NUM = null;

					String exprKey_row32__MODIFIER_CD = null;

					if (!rejectedInnerJoin_tMap_15_TMAP_IN) { // G_TM_M_255

						exprKey_row32__PATIENT_NUM = copyOfto_obs_fct.PATIENT_NUM;

						exprKey_row32__MODIFIER_CD = row31.MODIFIER_CD;

					} // G_TM_M_255

					SortableRow_tMap_15_2 rsc_tMap_15_2 = new SortableRow_tMap_15_2();

					rsc_tMap_15_2.fillFrom(copyOfto_obs_fct, row31,
							exprKey_row32__PATIENT_NUM,
							exprKey_row32__MODIFIER_CD);

					rsc_tMap_15_2.is__rejectedInnerJoin = rejectedInnerJoin_tMap_15_TMAP_IN;

					rejectedInnerJoin_tMap_15_TMAP_IN = false;

					// Sort and store in KeyFile(s) and DataFile(s)
					fsi_tMap_15_2.put(rsc_tMap_15_2);

				} // G_TM_M_250 loop "1"

				fsi_tMap_15_1.endGet();

				fsi_tMap_15_2.endPut();

				// /////////////////////////////////////////////
				// Starting Lookup Table "row32"
				// /////////////////////////////////////////////

				SortableRow_tMap_15_2 rsc_tMap_15_2;

				tHash_Lookup_row32.initGet();

				fsi_tMap_15_2.initGet();

				// row31Struct row31 = new row31Struct();

				row31Struct row31 = new row31Struct();

				// TEST firstLookupIsPersistentSorted=true
				// isFirstPersistentSortedTable=false

				rejectedInnerJoin_tMap_15_TMAP_IN = false;

				while (fsi_tMap_15_2.hasNext()) { // G_TM_M_250 loop "2"

					// CALL close loop of lookup '2'

					rsc_tMap_15_2 = (SortableRow_tMap_15_2) fsi_tMap_15_2
							.next();
					rsc_tMap_15_2.copyDataTo(copyOfto_obs_fct, row31);

					rejectedInnerJoin_tMap_15_TMAP_IN = rsc_tMap_15_2.is__rejectedInnerJoin;

					boolean forceLooprow32 = false;

					row32Struct row32ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_15_TMAP_IN) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_15_TMAP_IN = false;

						row32HashKey.PATIENT_NUM = rsc_tMap_15_2.exprKey_row32__PATIENT_NUM;

						row32HashKey.MODIFIER_CD = rsc_tMap_15_2.exprKey_row32__MODIFIER_CD;

						tHash_Lookup_row32.lookup(row32HashKey);

					} // G_TM_M_020

					row32Struct row32 = null;

					row32Struct fromLookup_row32 = null;
					row32 = row32Default;

					if (tHash_Lookup_row32 != null
							&& tHash_Lookup_row32.hasNext()) { // G 099

						fromLookup_row32 = tHash_Lookup_row32.next();

					} // G 099

					if (fromLookup_row32 != null) {
						row32 = fromLookup_row32;
					}

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_15_TMAP_IN__Struct Var = Var__tMap_15_TMAP_IN;// ###############################
						// ###############################
						// # Output tables

						copyOfout1 = null;
						copyOfout1_List.clear();

						if (!rejectedInnerJoin_tMap_15_TMAP_IN) {

							// # Output table : 'copyOfout1'
							copyOfout1_tmp.ENCOUNTER_NUM = copyOfto_obs_fct.ENCOUNTER_NUM;
							copyOfout1_tmp.PATIENT_NUM = copyOfto_obs_fct.PATIENT_NUM;
							copyOfout1_tmp.CONCEPT_CD = copyOfto_obs_fct.CONCEPT_CD;
							copyOfout1_tmp.PROVIDER_ID = copyOfto_obs_fct.PROVIDER_ID;
							copyOfout1_tmp.START_DATE = row32.START_DATE;
							copyOfout1_tmp.MODIFIER_CD = copyOfto_obs_fct.MODIFIER_CD;
							copyOfout1_tmp.INSTANCE_NUM = copyOfto_obs_fct.INSTANCE_NUM;
							copyOfout1_tmp.VALTYPE_CD = copyOfto_obs_fct.VALTYPE_CD;
							copyOfout1_tmp.TVAL_CHAR = copyOfto_obs_fct.TVAL_CHAR;
							copyOfout1_tmp.NVAL_NUM = copyOfto_obs_fct.NVAL_NUM;
							copyOfout1_tmp.VALUEFLAG_CD = copyOfto_obs_fct.VALUEFLAG_CD;
							copyOfout1_tmp.QUANTITY_NUM = copyOfto_obs_fct.QUANTITY_NUM;
							copyOfout1_tmp.UNITS_CD = copyOfto_obs_fct.UNITS_CD;
							copyOfout1_tmp.END_DATE = copyOfto_obs_fct.END_DATE;
							copyOfout1_tmp.LOCATION_CD = copyOfto_obs_fct.LOCATION_CD;
							copyOfout1_tmp.OBSERVATION_BLOB = copyOfto_obs_fct.OBSERVATION_BLOB;
							copyOfout1_tmp.CONFIDENCE_NUM = copyOfto_obs_fct.CONFIDENCE_NUM;
							copyOfout1_tmp.UPDATE_DATE = copyOfto_obs_fct.UPDATE_DATE;
							copyOfout1_tmp.DOWNLOAD_DATE = copyOfto_obs_fct.DOWNLOAD_DATE;
							copyOfout1_tmp.IMPORT_DATE = copyOfto_obs_fct.IMPORT_DATE;
							copyOfout1_tmp.SOURCESYSTEM_CD = copyOfto_obs_fct.SOURCESYSTEM_CD;
							copyOfout1_tmp.UPLOAD_ID = copyOfto_obs_fct.UPLOAD_ID;
							copyOfout1_tmp.ENDDATE_SOURCE_PATH = copyOfto_obs_fct.ENDDATE_SOURCE_PATH;
							copyOfout1_List.add(copyOfout1_tmp);
							copyOfout1 = copyOfout1_tmp;
						} // closing inner join bracket (1)
							// ###### START REJECTS #####

						// # Output reject table : 'copyOfout3'
						// # Filter conditions
						if (rejectedInnerJoin_tMap_15_TMAP_IN) {
							copyOfout1_tmp = new copyOfout1Struct();

							copyOfout1_tmp.ENCOUNTER_NUM = copyOfto_obs_fct.ENCOUNTER_NUM;
							copyOfout1_tmp.PATIENT_NUM = copyOfto_obs_fct.PATIENT_NUM;
							copyOfout1_tmp.CONCEPT_CD = copyOfto_obs_fct.CONCEPT_CD;
							copyOfout1_tmp.PROVIDER_ID = copyOfto_obs_fct.PROVIDER_ID;
							copyOfout1_tmp.START_DATE = copyOfto_obs_fct.START_DATE;
							copyOfout1_tmp.MODIFIER_CD = copyOfto_obs_fct.MODIFIER_CD;
							copyOfout1_tmp.INSTANCE_NUM = copyOfto_obs_fct.INSTANCE_NUM;
							copyOfout1_tmp.VALTYPE_CD = copyOfto_obs_fct.VALTYPE_CD;
							copyOfout1_tmp.TVAL_CHAR = copyOfto_obs_fct.TVAL_CHAR;
							copyOfout1_tmp.NVAL_NUM = copyOfto_obs_fct.NVAL_NUM;
							copyOfout1_tmp.VALUEFLAG_CD = copyOfto_obs_fct.VALUEFLAG_CD;
							copyOfout1_tmp.QUANTITY_NUM = copyOfto_obs_fct.QUANTITY_NUM;
							copyOfout1_tmp.UNITS_CD = copyOfto_obs_fct.UNITS_CD;
							copyOfout1_tmp.END_DATE = copyOfto_obs_fct.END_DATE;
							copyOfout1_tmp.LOCATION_CD = copyOfto_obs_fct.LOCATION_CD;
							copyOfout1_tmp.OBSERVATION_BLOB = copyOfto_obs_fct.OBSERVATION_BLOB;
							copyOfout1_tmp.CONFIDENCE_NUM = copyOfto_obs_fct.CONFIDENCE_NUM;
							copyOfout1_tmp.UPDATE_DATE = copyOfto_obs_fct.UPDATE_DATE;
							copyOfout1_tmp.DOWNLOAD_DATE = copyOfto_obs_fct.DOWNLOAD_DATE;
							copyOfout1_tmp.IMPORT_DATE = copyOfto_obs_fct.IMPORT_DATE;
							copyOfout1_tmp.SOURCESYSTEM_CD = copyOfto_obs_fct.SOURCESYSTEM_CD;
							copyOfout1_tmp.UPLOAD_ID = copyOfto_obs_fct.UPLOAD_ID;
							copyOfout1_tmp.ENDDATE_SOURCE_PATH = copyOfto_obs_fct.ENDDATE_SOURCE_PATH;
							copyOfout1_List.add(copyOfout1_tmp);
							copyOfout1 = copyOfout1_tmp;
						} // closing filter/reject
							// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_15_TMAP_IN = false;

					tos_count_tMap_15_TMAP_IN++;

					/**
					 * [tMap_15_TMAP_IN main ] stop
					 */
					// Start of branch "copyOfout1"
					if (copyOfout1 != null) {
						// start of joined table loop
						for (copyOfout1Struct cur_copyOfout1 : copyOfout1_List) {
							copyOfout1 = cur_copyOfout1;

							/**
							 * [tMap_14_TMAP_OUT main ] start
							 */

							currentComponent = "tMap_14_TMAP_OUT";

							boolean hasCasePrimitiveKeyWithNull_tMap_14_TMAP_OUT = false;

							hasCasePrimitiveKeyWithNull_tMap_14_TMAP_OUT = false;

							String exprKey_row30__MODIFIER_PATH = copyOfout1.ENDDATE_SOURCE_PATH;

							SortableRow_tMap_14_1 sortableRow_tMap_14_1 = fsi_tMap_14_1
									.getNextFreeRow();

							sortableRow_tMap_14_1.fillFrom(copyOfout1,
									exprKey_row30__MODIFIER_PATH);

							fsi_tMap_14_1.put(sortableRow_tMap_14_1);

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_14_TMAP_OUT = false;
							boolean mainRowRejected_tMap_14_TMAP_OUT = false;

							// ###############################

							tos_count_tMap_14_TMAP_OUT++;

							/**
							 * [tMap_14_TMAP_OUT main ] stop
							 */
						} // end of joined table loop
						copyOfout1_List.clear();

					} // End of branch "copyOfout1"

				} // G_TM_M_250 close loop read file data '2'

				/**
				 * [tMap_15_TMAP_IN end ] start
				 */

				currentComponent = "tMap_15_TMAP_IN";

				// ###############################
				// # Lookup hashes releasing
				fsi_tMap_15_2.endGet();

				if (tHash_Lookup_row31 != null) {
					tHash_Lookup_row31.endGet();
				}
				globalMap.remove("tHash_Lookup_row31");

				if (tHash_Lookup_row32 != null) {
					tHash_Lookup_row32.endGet();
				}
				globalMap.remove("tHash_Lookup_row32");

				// ###############################

				ok_Hash.put("tMap_15_TMAP_IN", true);
				end_Hash.put("tMap_15_TMAP_IN", System.currentTimeMillis());

				/**
				 * [tMap_15_TMAP_IN end ] stop
				 */

				/**
				 * [tMap_14_TMAP_OUT end ] start
				 */

				currentComponent = "tMap_14_TMAP_OUT";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_14_TMAP_OUT", true);
				end_Hash.put("tMap_14_TMAP_OUT", System.currentTimeMillis());

				/**
				 * [tMap_14_TMAP_OUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_24 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_24", false);
				start_Hash.put("tFileOutputDelimited_24",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_24";

				int tos_count_tFileOutputDelimited_24 = 0;

				String fileName_tFileOutputDelimited_24 = "";
				fileName_tFileOutputDelimited_24 = (new java.io.File(
						context.folderMain + context.folderOutput
								+ "/patient_data.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_24 = null;
				String extension_tFileOutputDelimited_24 = null;
				String directory_tFileOutputDelimited_24 = null;
				if ((fileName_tFileOutputDelimited_24.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_24.lastIndexOf(".") < fileName_tFileOutputDelimited_24
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_24 = fileName_tFileOutputDelimited_24;
						extension_tFileOutputDelimited_24 = "";
					} else {
						fullName_tFileOutputDelimited_24 = fileName_tFileOutputDelimited_24
								.substring(0, fileName_tFileOutputDelimited_24
										.lastIndexOf("."));
						extension_tFileOutputDelimited_24 = fileName_tFileOutputDelimited_24
								.substring(fileName_tFileOutputDelimited_24
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_24 = fileName_tFileOutputDelimited_24
							.substring(0, fileName_tFileOutputDelimited_24
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_24.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_24 = fileName_tFileOutputDelimited_24
								.substring(0, fileName_tFileOutputDelimited_24
										.lastIndexOf("."));
						extension_tFileOutputDelimited_24 = fileName_tFileOutputDelimited_24
								.substring(fileName_tFileOutputDelimited_24
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_24 = fileName_tFileOutputDelimited_24;
						extension_tFileOutputDelimited_24 = "";
					}
					directory_tFileOutputDelimited_24 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_24 = true;
				java.io.File filetFileOutputDelimited_24 = new java.io.File(
						fileName_tFileOutputDelimited_24);
				globalMap.put("tFileOutputDelimited_24_FILE_NAME",
						fileName_tFileOutputDelimited_24);
				if (filetFileOutputDelimited_24.exists()) {
					isFileGenerated_tFileOutputDelimited_24 = false;
				}

				String[] headColutFileOutputDelimited_24 = new String[22];
				class CSVBasicSet_tFileOutputDelimited_24 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_24[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_24 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_24[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_24[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_24 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_24[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_24[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_24 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_24[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_24 = 0;
				int splitEvery_tFileOutputDelimited_24 = 1000;
				int splitedFileNo_tFileOutputDelimited_24 = 0;
				int currentRow_tFileOutputDelimited_24 = 0;

				CSVBasicSet_tFileOutputDelimited_24 csvSettings_tFileOutputDelimited_24 = new CSVBasicSet_tFileOutputDelimited_24();
				csvSettings_tFileOutputDelimited_24.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_24.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_24.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_24 != null
						&& directory_tFileOutputDelimited_24.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_24 = new java.io.File(
							directory_tFileOutputDelimited_24);
					if (!dir_tFileOutputDelimited_24.exists()) {
						dir_tFileOutputDelimited_24.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_24 = null;
				try {
					CsvWritertFileOutputDelimited_24 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_24,
													true), "UTF-8")));
					CsvWritertFileOutputDelimited_24
							.setSeparator(csvSettings_tFileOutputDelimited_24
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_24
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_24
									.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_24
									.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_24.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_24
										.getRowDelim());
					}

					if (filetFileOutputDelimited_24.length() == 0) {

						headColutFileOutputDelimited_24[0] = "ENCOUNTER_NUM";

						headColutFileOutputDelimited_24[1] = "PATIENT_NUM";

						headColutFileOutputDelimited_24[2] = "CONCEPT_CD";

						headColutFileOutputDelimited_24[3] = "PROVIDER_ID";

						headColutFileOutputDelimited_24[4] = "START_DATE";

						headColutFileOutputDelimited_24[5] = "MODIFIER_CD";

						headColutFileOutputDelimited_24[6] = "INSTANCE_NUM";

						headColutFileOutputDelimited_24[7] = "VALTYPE_CD";

						headColutFileOutputDelimited_24[8] = "TVAL_CHAR";

						headColutFileOutputDelimited_24[9] = "NVAL_NUM";

						headColutFileOutputDelimited_24[10] = "VALUEFLAG_CD";

						headColutFileOutputDelimited_24[11] = "QUANTITY_NUM";

						headColutFileOutputDelimited_24[12] = "UNITS_CD";

						headColutFileOutputDelimited_24[13] = "END_DATE";

						headColutFileOutputDelimited_24[14] = "LOCATION_CD";

						headColutFileOutputDelimited_24[15] = "OBSERVATION_BLOB";

						headColutFileOutputDelimited_24[16] = "CONFIDENCE_NUM";

						headColutFileOutputDelimited_24[17] = "UPDATE_DATE";

						headColutFileOutputDelimited_24[18] = "DOWNLOAD_DATE";

						headColutFileOutputDelimited_24[19] = "IMPORT_DATE";

						headColutFileOutputDelimited_24[20] = "SOURCESYSTEM_CD";

						headColutFileOutputDelimited_24[21] = "UPLOAD_ID";

						CsvWritertFileOutputDelimited_24
								.writeNext(headColutFileOutputDelimited_24);
						CsvWritertFileOutputDelimited_24.flush();

					}

					CsvWritertFileOutputDelimited_24
							.setEscapeChar(csvSettings_tFileOutputDelimited_24
									.getEscapeChar());
					CsvWritertFileOutputDelimited_24
							.setQuoteChar(csvSettings_tFileOutputDelimited_24
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_24
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_24 begin ] stop
					 */

					/**
					 * [tMap_17_TMAP_OUT begin ] start
					 */

					ok_Hash.put("tMap_17_TMAP_OUT", false);
					start_Hash.put("tMap_17_TMAP_OUT",
							System.currentTimeMillis());
					currentComponent = "tMap_17_TMAP_OUT";

					int tos_count_tMap_17_TMAP_OUT = 0;

					// ###############################
					// # Lookup's keys initialization

					org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row35Struct> tHash_Lookup_row35 = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row35Struct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row35Struct>) globalMap
							.get("tHash_Lookup_row35"));

					row35Struct row35HashKey = new row35Struct();
					row35Struct row35Default = new row35Struct();
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_17_TMAP_OUT__Struct {
					}
					Var__tMap_17_TMAP_OUT__Struct Var__tMap_17_TMAP_OUT = new Var__tMap_17_TMAP_OUT__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					// ###############################

					class SortableRow_tMap_17_1
							implements
							Comparable<SortableRow_tMap_17_1>,
							routines.system.IPersistableRow<SortableRow_tMap_17_1> { // G_TM_B_001

						boolean is__rejectedInnerJoin;

						BigDecimal exprKey_row35__PATIENT_NUM;

						// copyOfto_patient_mapping
						BigDecimal copyOfto_patient_mapping__PATIENT_NUM;

						public void fillFrom(
								copyOfto_patient_mappingStruct copyOfto_patient_mapping,
								BigDecimal exprKey_row35__PATIENT_NUM) {

							this.copyOfto_patient_mapping__PATIENT_NUM = copyOfto_patient_mapping.PATIENT_NUM;
							this.exprKey_row35__PATIENT_NUM = exprKey_row35__PATIENT_NUM;

						}

						public void copyDataTo(
								copyOfto_patient_mappingStruct copyOfto_patient_mapping) {

							copyOfto_patient_mapping.PATIENT_NUM = this.copyOfto_patient_mapping__PATIENT_NUM;

						}

						public String toString() {

							StringBuilder sb = new StringBuilder();
							sb.append(super.toString());
							sb.append("[");

							sb.append("copyOfto_patient_mapping__PATIENT_NUM");
							sb.append("=");
							sb.append(String
									.valueOf(this.copyOfto_patient_mapping__PATIENT_NUM));

							sb.append("]");

							return sb.toString();
						}

						public int compareTo(SortableRow_tMap_17_1 other) {

							int returnValue = 0;

							returnValue = checkNullsAndCompare(
									this.exprKey_row35__PATIENT_NUM,
									other.exprKey_row35__PATIENT_NUM);
							if (returnValue != 0) {
								return returnValue;
							}

							return returnValue;
						}

						private int checkNullsAndCompare(Object object1,
								Object object2) {
							int returnValue = 0;
							if (object1 instanceof Comparable
									&& object2 instanceof Comparable) {
								returnValue = ((Comparable) object1)
										.compareTo(object2);
							} else if (object1 != null && object2 != null) {
								returnValue = compareStrings(
										object1.toString(), object2.toString());
							} else if (object1 == null && object2 != null) {
								returnValue = 1;
							} else if (object1 != null && object2 == null) {
								returnValue = -1;
							} else {
								returnValue = 0;
							}

							return returnValue;
						}

						private int compareStrings(String string1,
								String string2) {
							return string1.compareTo(string2);
						}

						public void readData(ObjectInputStream dis) {

							synchronized (copyOfto_patient_mappingStruct.commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

								try {

									int length = 0;

									this.is__rejectedInnerJoin = dis
											.readBoolean();

									this.copyOfto_patient_mapping__PATIENT_NUM = (BigDecimal) dis
											.readObject();

									this.exprKey_row35__PATIENT_NUM = (BigDecimal) dis
											.readObject();

								} catch (IOException e) {
									throw new RuntimeException(e);

								} catch (ClassNotFoundException eCNFE) {
									throw new RuntimeException(eCNFE);

								}

							}
						}

						public void writeData(ObjectOutputStream dos) {
							try {

								dos.writeBoolean(this.is__rejectedInnerJoin);

								dos.writeObject(this.copyOfto_patient_mapping__PATIENT_NUM);

								dos.writeObject(this.exprKey_row35__PATIENT_NUM);

							} catch (IOException e) {
								throw new RuntimeException(e);
							}
						}

					} // G_TM_B_001

					org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_17_1> fsi_tMap_17_1 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_17_1>(
							context.folderMain + context.folderOutput + "/"
									+ jobName + "_tMapData_" + pid
									+ "_tMap_17_1", 200000) {
						public SortableRow_tMap_17_1 createRowInstance() {
							return new SortableRow_tMap_17_1();
						}
					};

					fsi_tMap_17_1.initPut();

					/**
					 * [tMap_17_TMAP_OUT begin ] stop
					 */

					/**
					 * [tMap_16 begin ] start
					 */

					ok_Hash.put("tMap_16", false);
					start_Hash.put("tMap_16", System.currentTimeMillis());
					currentComponent = "tMap_16";

					int tos_count_tMap_16 = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_16__Struct {
					}
					Var__tMap_16__Struct Var__tMap_16 = new Var__tMap_16__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					copyOfto_trgt_obsStruct copyOfto_trgt_obs_tmp = new copyOfto_trgt_obsStruct();
					copyOfto_patient_mappingStruct copyOfto_patient_mapping_tmp = new copyOfto_patient_mappingStruct();
					// ###############################

					/**
					 * [tMap_16 begin ] stop
					 */

					/**
					 * [tJavaRow_3 begin ] start
					 */

					ok_Hash.put("tJavaRow_3", false);
					start_Hash.put("tJavaRow_3", System.currentTimeMillis());
					currentComponent = "tJavaRow_3";

					int tos_count_tJavaRow_3 = 0;

					int nb_line_tJavaRow_3 = 0;

					/**
					 * [tJavaRow_3 begin ] stop
					 */

					/**
					 * [tMap_14_TMAP_IN begin ] start
					 */

					ok_Hash.put("tMap_14_TMAP_IN", false);
					start_Hash.put("tMap_14_TMAP_IN",
							System.currentTimeMillis());
					currentComponent = "tMap_14_TMAP_IN";

					int tos_count_tMap_14_TMAP_IN = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_14_TMAP_IN__Struct {
					}
					Var__tMap_14_TMAP_IN__Struct Var__tMap_14_TMAP_IN = new Var__tMap_14_TMAP_IN__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					copyOfasdddStruct copyOfasddd_tmp = new copyOfasdddStruct();
					// ###############################

					List<copyOfasdddStruct> copyOfasddd_List = new java.util.ArrayList<copyOfasdddStruct>();

					/**
					 * [tMap_14_TMAP_IN begin ] stop
					 */
					/**
					 * [tMap_14_TMAP_IN main ] start
					 */

					currentComponent = "tMap_14_TMAP_IN";

					boolean hasCasePrimitiveKeyWithNull_tMap_14_TMAP_IN = false;

					fsi_tMap_14_1.endPut();

					if (copyOfout1 == null) {
						copyOfout1 = new copyOfout1Struct();
					}

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_14_TMAP_IN = false;
					boolean mainRowRejected_tMap_14_TMAP_IN = false;

					// /////////////////////////////////////////////
					// Starting Lookup Table "row30"
					// /////////////////////////////////////////////

					SortableRow_tMap_14_1 rsc_tMap_14_1;

					tHash_Lookup_row30.initGet();

					fsi_tMap_14_1.initGet();

					// TEST firstLookupIsPersistentSorted=true
					// isFirstPersistentSortedTable=true

					rejectedInnerJoin_tMap_14_TMAP_IN = false;

					while (fsi_tMap_14_1.hasNext()) { // G_TM_M_250 loop "1"

						rsc_tMap_14_1 = (SortableRow_tMap_14_1) fsi_tMap_14_1
								.next();
						rsc_tMap_14_1.copyDataTo(copyOfout1);

						rejectedInnerJoin_tMap_14_TMAP_IN = rsc_tMap_14_1.is__rejectedInnerJoin;

						boolean forceLooprow30 = false;

						row30Struct row30ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_14_TMAP_IN) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_14_TMAP_IN = false;

							row30HashKey.MODIFIER_PATH = rsc_tMap_14_1.exprKey_row30__MODIFIER_PATH;

							tHash_Lookup_row30.lookup(row30HashKey);

							if (!tHash_Lookup_row30.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_14_TMAP_IN = true;

							} // G_TM_M_090

						} // G_TM_M_020

						row30Struct row30 = null;

						row30Struct fromLookup_row30 = null;
						row30 = row30Default;

						if (tHash_Lookup_row30 != null
								&& tHash_Lookup_row30.hasNext()) { // G 099

							fromLookup_row30 = tHash_Lookup_row30.next();

						} // G 099

						if (fromLookup_row30 != null) {
							row30 = fromLookup_row30;
						}

						BigDecimal exprKey_row33__PATIENT_NUM = null;

						String exprKey_row33__MODIFIER_CD = null;

						if (!rejectedInnerJoin_tMap_14_TMAP_IN) { // G_TM_M_255

							exprKey_row33__PATIENT_NUM = copyOfout1.PATIENT_NUM;

							exprKey_row33__MODIFIER_CD = row30.MODIFIER_CD;

						} // G_TM_M_255

						SortableRow_tMap_14_2 rsc_tMap_14_2 = new SortableRow_tMap_14_2();

						rsc_tMap_14_2.fillFrom(copyOfout1, row30,
								exprKey_row33__PATIENT_NUM,
								exprKey_row33__MODIFIER_CD);

						rsc_tMap_14_2.is__rejectedInnerJoin = rejectedInnerJoin_tMap_14_TMAP_IN;

						rejectedInnerJoin_tMap_14_TMAP_IN = false;

						// Sort and store in KeyFile(s) and DataFile(s)
						fsi_tMap_14_2.put(rsc_tMap_14_2);

					} // G_TM_M_250 loop "1"

					fsi_tMap_14_1.endGet();

					fsi_tMap_14_2.endPut();

					// /////////////////////////////////////////////
					// Starting Lookup Table "row33"
					// /////////////////////////////////////////////

					SortableRow_tMap_14_2 rsc_tMap_14_2;

					tHash_Lookup_row33.initGet();

					fsi_tMap_14_2.initGet();

					// row30Struct row30 = new row30Struct();

					row30Struct row30 = new row30Struct();

					// TEST firstLookupIsPersistentSorted=true
					// isFirstPersistentSortedTable=false

					rejectedInnerJoin_tMap_14_TMAP_IN = false;

					while (fsi_tMap_14_2.hasNext()) { // G_TM_M_250 loop "2"

						// CALL close loop of lookup '2'

						rsc_tMap_14_2 = (SortableRow_tMap_14_2) fsi_tMap_14_2
								.next();
						rsc_tMap_14_2.copyDataTo(copyOfout1, row30);

						rejectedInnerJoin_tMap_14_TMAP_IN = rsc_tMap_14_2.is__rejectedInnerJoin;

						boolean forceLooprow33 = false;

						row33Struct row33ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_14_TMAP_IN) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_14_TMAP_IN = false;

							row33HashKey.PATIENT_NUM = rsc_tMap_14_2.exprKey_row33__PATIENT_NUM;

							row33HashKey.MODIFIER_CD = rsc_tMap_14_2.exprKey_row33__MODIFIER_CD;

							tHash_Lookup_row33.lookup(row33HashKey);

							if (!tHash_Lookup_row33.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_14_TMAP_IN = true;

							} // G_TM_M_090

						} // G_TM_M_020

						row33Struct row33 = null;

						row33Struct fromLookup_row33 = null;
						row33 = row33Default;

						if (tHash_Lookup_row33 != null
								&& tHash_Lookup_row33.hasNext()) { // G 099

							fromLookup_row33 = tHash_Lookup_row33.next();

						} // G 099

						if (fromLookup_row33 != null) {
							row33 = fromLookup_row33;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_14_TMAP_IN__Struct Var = Var__tMap_14_TMAP_IN;// ###############################
							// ###############################
							// # Output tables

							copyOfasddd = null;
							copyOfasddd_List.clear();

							if (!rejectedInnerJoin_tMap_14_TMAP_IN) {

								// # Output table : 'copyOfasddd'
								copyOfasddd_tmp.ENCOUNTER_NUM = copyOfout1.ENCOUNTER_NUM;
								copyOfasddd_tmp.PATIENT_NUM = copyOfout1.PATIENT_NUM;
								copyOfasddd_tmp.CONCEPT_CD = copyOfout1.CONCEPT_CD;
								copyOfasddd_tmp.PROVIDER_ID = copyOfout1.PROVIDER_ID;
								copyOfasddd_tmp.START_DATE = copyOfout1.START_DATE;
								copyOfasddd_tmp.MODIFIER_CD = copyOfout1.MODIFIER_CD;
								copyOfasddd_tmp.INSTANCE_NUM = copyOfout1.INSTANCE_NUM;
								copyOfasddd_tmp.VALTYPE_CD = copyOfout1.VALTYPE_CD;
								copyOfasddd_tmp.TVAL_CHAR = copyOfout1.TVAL_CHAR;
								copyOfasddd_tmp.NVAL_NUM = copyOfout1.NVAL_NUM;
								copyOfasddd_tmp.VALUEFLAG_CD = copyOfout1.VALUEFLAG_CD;
								copyOfasddd_tmp.QUANTITY_NUM = copyOfout1.QUANTITY_NUM;
								copyOfasddd_tmp.UNITS_CD = copyOfout1.UNITS_CD;
								copyOfasddd_tmp.END_DATE = row33.END_DATE;
								copyOfasddd_tmp.LOCATION_CD = copyOfout1.LOCATION_CD;
								copyOfasddd_tmp.OBSERVATION_BLOB = copyOfout1.OBSERVATION_BLOB;
								copyOfasddd_tmp.CONFIDENCE_NUM = copyOfout1.CONFIDENCE_NUM;
								copyOfasddd_tmp.UPDATE_DATE = copyOfout1.UPDATE_DATE;
								copyOfasddd_tmp.DOWNLOAD_DATE = copyOfout1.DOWNLOAD_DATE;
								copyOfasddd_tmp.IMPORT_DATE = copyOfout1.IMPORT_DATE;
								copyOfasddd_tmp.SOURCESYSTEM_CD = copyOfout1.SOURCESYSTEM_CD;
								copyOfasddd_tmp.UPLOAD_ID = copyOfout1.UPLOAD_ID;
								copyOfasddd_List.add(copyOfasddd_tmp);
								copyOfasddd = copyOfasddd_tmp;
							} // closing inner join bracket (1)
								// ###### START REJECTS #####

							// # Output reject table : 'copyOfout2'
							// # Filter conditions
							if (rejectedInnerJoin_tMap_14_TMAP_IN) {
								copyOfasddd_tmp = new copyOfasdddStruct();

								copyOfasddd_tmp.ENCOUNTER_NUM = copyOfout1.ENCOUNTER_NUM;
								copyOfasddd_tmp.PATIENT_NUM = copyOfout1.PATIENT_NUM;
								copyOfasddd_tmp.CONCEPT_CD = copyOfout1.CONCEPT_CD;
								copyOfasddd_tmp.PROVIDER_ID = copyOfout1.PROVIDER_ID;
								copyOfasddd_tmp.START_DATE = copyOfout1.START_DATE;
								copyOfasddd_tmp.MODIFIER_CD = copyOfout1.MODIFIER_CD;
								copyOfasddd_tmp.INSTANCE_NUM = copyOfout1.INSTANCE_NUM;
								copyOfasddd_tmp.VALTYPE_CD = copyOfout1.VALTYPE_CD;
								copyOfasddd_tmp.TVAL_CHAR = copyOfout1.TVAL_CHAR;
								copyOfasddd_tmp.NVAL_NUM = copyOfout1.NVAL_NUM;
								copyOfasddd_tmp.VALUEFLAG_CD = copyOfout1.VALUEFLAG_CD;
								copyOfasddd_tmp.QUANTITY_NUM = copyOfout1.QUANTITY_NUM;
								copyOfasddd_tmp.UNITS_CD = copyOfout1.UNITS_CD;
								copyOfasddd_tmp.END_DATE = copyOfout1.END_DATE;
								copyOfasddd_tmp.LOCATION_CD = copyOfout1.LOCATION_CD;
								copyOfasddd_tmp.OBSERVATION_BLOB = copyOfout1.OBSERVATION_BLOB;
								copyOfasddd_tmp.CONFIDENCE_NUM = copyOfout1.CONFIDENCE_NUM;
								copyOfasddd_tmp.UPDATE_DATE = copyOfout1.UPDATE_DATE;
								copyOfasddd_tmp.DOWNLOAD_DATE = copyOfout1.DOWNLOAD_DATE;
								copyOfasddd_tmp.IMPORT_DATE = copyOfout1.IMPORT_DATE;
								copyOfasddd_tmp.SOURCESYSTEM_CD = copyOfout1.SOURCESYSTEM_CD;
								copyOfasddd_tmp.UPLOAD_ID = copyOfout1.UPLOAD_ID;
								copyOfasddd_List.add(copyOfasddd_tmp);
								copyOfasddd = copyOfasddd_tmp;
							} // closing filter/reject
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_14_TMAP_IN = false;

						tos_count_tMap_14_TMAP_IN++;

						/**
						 * [tMap_14_TMAP_IN main ] stop
						 */
						// Start of branch "copyOfasddd"
						if (copyOfasddd != null) {
							// start of joined table loop
							for (copyOfasdddStruct cur_copyOfasddd : copyOfasddd_List) {
								copyOfasddd = cur_copyOfasddd;

								/**
								 * [tJavaRow_3 main ] start
								 */

								currentComponent = "tJavaRow_3";

								// Code generated according to input schema and
								// output schema
								row34.ENCOUNTER_NUM = copyOfasddd.ENCOUNTER_NUM;
								row34.PATIENT_NUM = copyOfasddd.PATIENT_NUM;
								// row34.CONCEPT_CD = copyOfasddd.CONCEPT_CD;

								row34.CONCEPT_CD = copyOfasddd.CONCEPT_CD;

								row34.PROVIDER_ID = copyOfasddd.PROVIDER_ID;
								if (copyOfasddd.START_DATE != null) {
									if (copyOfasddd.START_DATE.length() > 0)
										row34.START_DATE = TalendDate
												.parseDate("yyyy-MM-dd",
														copyOfasddd.START_DATE);
									else {
										// "dd-MM-yyyy"

										row34.START_DATE = TalendDate
												.parseDate("yyyy-MM-dd",
														"1900-01-01");
									}
								}

								// if (copyOfasddd.MODIFIER_CD != null){
								// if (copyOfasddd.MODIFIER_CD.lastIndexOf("|")
								// >0){
								// StringBuilder b = new
								// StringBuilder(copyOfasddd.MODIFIER_CD);
								// b.replace(copyOfasddd.MODIFIER_CD.lastIndexOf("|"),
								// copyOfasddd.MODIFIER_CD.lastIndexOf("|") + 1,
								// ":" );
								// row34.MODIFIER_CD = b.toString();
								// }
								// else{
								row34.MODIFIER_CD = copyOfasddd.MODIFIER_CD;
								// }
								// }
								row34.INSTANCE_NUM = copyOfasddd.INSTANCE_NUM;
								row34.VALTYPE_CD = copyOfasddd.VALTYPE_CD;
								row34.TVAL_CHAR = copyOfasddd.TVAL_CHAR;
								row34.NVAL_NUM = copyOfasddd.NVAL_NUM;
								row34.VALUEFLAG_CD = copyOfasddd.VALUEFLAG_CD;
								row34.QUANTITY_NUM = copyOfasddd.QUANTITY_NUM;
								row34.UNITS_CD = copyOfasddd.UNITS_CD;
								if (copyOfasddd.END_DATE != null) {
									if (copyOfasddd.END_DATE.length() > 0)
										row34.END_DATE = TalendDate.parseDate(
												"yyyy-MM-dd",
												copyOfasddd.END_DATE);
									else
										row34.END_DATE = null;
								}
								row34.LOCATION_CD = copyOfasddd.LOCATION_CD;
								row34.OBSERVATION_BLOB = copyOfasddd.OBSERVATION_BLOB;
								row34.CONFIDENCE_NUM = copyOfasddd.CONFIDENCE_NUM;
								row34.UPDATE_DATE = copyOfasddd.UPDATE_DATE;
								row34.DOWNLOAD_DATE = copyOfasddd.DOWNLOAD_DATE;
								row34.IMPORT_DATE = copyOfasddd.IMPORT_DATE;
								row34.SOURCESYSTEM_CD = copyOfasddd.SOURCESYSTEM_CD;
								row34.UPLOAD_ID = copyOfasddd.UPLOAD_ID;

								nb_line_tJavaRow_3++;

								tos_count_tJavaRow_3++;

								/**
								 * [tJavaRow_3 main ] stop
								 */

								/**
								 * [tMap_16 main ] start
								 */

								currentComponent = "tMap_16";

								boolean hasCasePrimitiveKeyWithNull_tMap_16 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_16 = false;
								boolean mainRowRejected_tMap_16 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_16__Struct Var = Var__tMap_16;// ###############################
									// ###############################
									// # Output tables

									copyOfto_trgt_obs = null;
									copyOfto_patient_mapping = null;

									// # Output table : 'copyOfto_trgt_obs'
									copyOfto_trgt_obs_tmp.ENCOUNTER_NUM = row34.ENCOUNTER_NUM;
									copyOfto_trgt_obs_tmp.PATIENT_NUM = row34.PATIENT_NUM;
									copyOfto_trgt_obs_tmp.CONCEPT_CD = row34.CONCEPT_CD;
									copyOfto_trgt_obs_tmp.PROVIDER_ID = row34.PROVIDER_ID;
									copyOfto_trgt_obs_tmp.START_DATE = row34.START_DATE;
									copyOfto_trgt_obs_tmp.MODIFIER_CD = row34.MODIFIER_CD;
									copyOfto_trgt_obs_tmp.INSTANCE_NUM = row34.INSTANCE_NUM;
									copyOfto_trgt_obs_tmp.VALTYPE_CD = row34.VALTYPE_CD;
									copyOfto_trgt_obs_tmp.TVAL_CHAR = row34.TVAL_CHAR;
									copyOfto_trgt_obs_tmp.NVAL_NUM = row34.NVAL_NUM;
									copyOfto_trgt_obs_tmp.VALUEFLAG_CD = row34.VALUEFLAG_CD;
									copyOfto_trgt_obs_tmp.QUANTITY_NUM = row34.QUANTITY_NUM;
									copyOfto_trgt_obs_tmp.UNITS_CD = row34.UNITS_CD;
									copyOfto_trgt_obs_tmp.END_DATE = row34.END_DATE;
									copyOfto_trgt_obs_tmp.LOCATION_CD = row34.LOCATION_CD;
									copyOfto_trgt_obs_tmp.OBSERVATION_BLOB = row34.OBSERVATION_BLOB;
									copyOfto_trgt_obs_tmp.CONFIDENCE_NUM = row34.CONFIDENCE_NUM;
									copyOfto_trgt_obs_tmp.UPDATE_DATE = row34.UPDATE_DATE;
									copyOfto_trgt_obs_tmp.DOWNLOAD_DATE = row34.DOWNLOAD_DATE;
									copyOfto_trgt_obs_tmp.IMPORT_DATE = row34.IMPORT_DATE;
									copyOfto_trgt_obs_tmp.SOURCESYSTEM_CD = row34.SOURCESYSTEM_CD;
									copyOfto_trgt_obs_tmp.UPLOAD_ID = row34.UPLOAD_ID;
									copyOfto_trgt_obs = copyOfto_trgt_obs_tmp;

									// # Output table :
									// 'copyOfto_patient_mapping'
									copyOfto_patient_mapping_tmp.PATIENT_NUM = row34.PATIENT_NUM;
									copyOfto_patient_mapping = copyOfto_patient_mapping_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_16 = false;

								tos_count_tMap_16++;

								/**
								 * [tMap_16 main ] stop
								 */
								// Start of branch "copyOfto_trgt_obs"
								if (copyOfto_trgt_obs != null) {

									/**
									 * [tFileOutputDelimited_24 main ] start
									 */

									currentComponent = "tFileOutputDelimited_24";

									String[] rowtFileOutputDelimited_24 = new String[22];

									rowtFileOutputDelimited_24[0] = copyOfto_trgt_obs.ENCOUNTER_NUM == null ? ""
											: copyOfto_trgt_obs.ENCOUNTER_NUM
													.toPlainString();

									rowtFileOutputDelimited_24[1] = copyOfto_trgt_obs.PATIENT_NUM == null ? ""
											: copyOfto_trgt_obs.PATIENT_NUM
													.toPlainString();

									rowtFileOutputDelimited_24[2] = copyOfto_trgt_obs.CONCEPT_CD == null ? ""
											: copyOfto_trgt_obs.CONCEPT_CD;

									rowtFileOutputDelimited_24[3] = copyOfto_trgt_obs.PROVIDER_ID == null ? ""
											: copyOfto_trgt_obs.PROVIDER_ID;

									rowtFileOutputDelimited_24[4] = copyOfto_trgt_obs.START_DATE == null ? ""
											: FormatterUtils
													.format_Date(
															copyOfto_trgt_obs.START_DATE,
															"yyyy-MM-dd");

									rowtFileOutputDelimited_24[5] = copyOfto_trgt_obs.MODIFIER_CD == null ? ""
											: copyOfto_trgt_obs.MODIFIER_CD;

									rowtFileOutputDelimited_24[6] = copyOfto_trgt_obs.INSTANCE_NUM == null ? ""
											: copyOfto_trgt_obs.INSTANCE_NUM;

									rowtFileOutputDelimited_24[7] = copyOfto_trgt_obs.VALTYPE_CD == null ? ""
											: copyOfto_trgt_obs.VALTYPE_CD;

									rowtFileOutputDelimited_24[8] = copyOfto_trgt_obs.TVAL_CHAR == null ? ""
											: copyOfto_trgt_obs.TVAL_CHAR;

									rowtFileOutputDelimited_24[9] = copyOfto_trgt_obs.NVAL_NUM == null ? ""
											: String.valueOf(copyOfto_trgt_obs.NVAL_NUM);

									rowtFileOutputDelimited_24[10] = copyOfto_trgt_obs.VALUEFLAG_CD == null ? ""
											: copyOfto_trgt_obs.VALUEFLAG_CD;

									rowtFileOutputDelimited_24[11] = copyOfto_trgt_obs.QUANTITY_NUM == null ? ""
											: copyOfto_trgt_obs.QUANTITY_NUM;

									rowtFileOutputDelimited_24[12] = copyOfto_trgt_obs.UNITS_CD == null ? ""
											: copyOfto_trgt_obs.UNITS_CD;

									rowtFileOutputDelimited_24[13] = copyOfto_trgt_obs.END_DATE == null ? ""
											: FormatterUtils.format_Date(
													copyOfto_trgt_obs.END_DATE,
													"yyyy-MM-dd");

									rowtFileOutputDelimited_24[14] = copyOfto_trgt_obs.LOCATION_CD == null ? ""
											: copyOfto_trgt_obs.LOCATION_CD;

									rowtFileOutputDelimited_24[15] = copyOfto_trgt_obs.OBSERVATION_BLOB == null ? ""
											: copyOfto_trgt_obs.OBSERVATION_BLOB;

									rowtFileOutputDelimited_24[16] = copyOfto_trgt_obs.CONFIDENCE_NUM == null ? ""
											: copyOfto_trgt_obs.CONFIDENCE_NUM;

									rowtFileOutputDelimited_24[17] = copyOfto_trgt_obs.UPDATE_DATE == null ? ""
											: FormatterUtils
													.format_Date(
															copyOfto_trgt_obs.UPDATE_DATE,
															"yyyy-MM-dd");

									rowtFileOutputDelimited_24[18] = copyOfto_trgt_obs.DOWNLOAD_DATE == null ? ""
											: FormatterUtils
													.format_Date(
															copyOfto_trgt_obs.DOWNLOAD_DATE,
															"yyyy-MM-dd");

									rowtFileOutputDelimited_24[19] = copyOfto_trgt_obs.IMPORT_DATE == null ? ""
											: FormatterUtils
													.format_Date(
															copyOfto_trgt_obs.IMPORT_DATE,
															"yyyy-MM-dd");

									rowtFileOutputDelimited_24[20] = copyOfto_trgt_obs.SOURCESYSTEM_CD == null ? ""
											: copyOfto_trgt_obs.SOURCESYSTEM_CD;

									rowtFileOutputDelimited_24[21] = copyOfto_trgt_obs.UPLOAD_ID == null ? ""
											: copyOfto_trgt_obs.UPLOAD_ID;

									nb_line_tFileOutputDelimited_24++;
									CsvWritertFileOutputDelimited_24
											.writeNext(rowtFileOutputDelimited_24);

									tos_count_tFileOutputDelimited_24++;

									/**
									 * [tFileOutputDelimited_24 main ] stop
									 */

								} // End of branch "copyOfto_trgt_obs"

								// Start of branch "copyOfto_patient_mapping"
								if (copyOfto_patient_mapping != null) {

									/**
									 * [tMap_17_TMAP_OUT main ] start
									 */

									currentComponent = "tMap_17_TMAP_OUT";

									boolean hasCasePrimitiveKeyWithNull_tMap_17_TMAP_OUT = false;

									hasCasePrimitiveKeyWithNull_tMap_17_TMAP_OUT = false;

									BigDecimal exprKey_row35__PATIENT_NUM = copyOfto_patient_mapping.PATIENT_NUM;

									SortableRow_tMap_17_1 sortableRow_tMap_17_1 = fsi_tMap_17_1
											.getNextFreeRow();

									sortableRow_tMap_17_1.fillFrom(
											copyOfto_patient_mapping,
											exprKey_row35__PATIENT_NUM);

									fsi_tMap_17_1.put(sortableRow_tMap_17_1);

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_17_TMAP_OUT = false;
									boolean mainRowRejected_tMap_17_TMAP_OUT = false;

									// ###############################

									tos_count_tMap_17_TMAP_OUT++;

									/**
									 * [tMap_17_TMAP_OUT main ] stop
									 */

								} // End of branch "copyOfto_patient_mapping"

							} // end of joined table loop
							copyOfasddd_List.clear();

						} // End of branch "copyOfasddd"

					} // G_TM_M_250 close loop read file data '2'

					/**
					 * [tMap_14_TMAP_IN end ] start
					 */

					currentComponent = "tMap_14_TMAP_IN";

					// ###############################
					// # Lookup hashes releasing
					fsi_tMap_14_2.endGet();

					if (tHash_Lookup_row30 != null) {
						tHash_Lookup_row30.endGet();
					}
					globalMap.remove("tHash_Lookup_row30");

					if (tHash_Lookup_row33 != null) {
						tHash_Lookup_row33.endGet();
					}
					globalMap.remove("tHash_Lookup_row33");

					// ###############################

					ok_Hash.put("tMap_14_TMAP_IN", true);
					end_Hash.put("tMap_14_TMAP_IN", System.currentTimeMillis());

					/**
					 * [tMap_14_TMAP_IN end ] stop
					 */

					/**
					 * [tJavaRow_3 end ] start
					 */

					currentComponent = "tJavaRow_3";

					globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);

					ok_Hash.put("tJavaRow_3", true);
					end_Hash.put("tJavaRow_3", System.currentTimeMillis());

					/**
					 * [tJavaRow_3 end ] stop
					 */

					/**
					 * [tMap_16 end ] start
					 */

					currentComponent = "tMap_16";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					ok_Hash.put("tMap_16", true);
					end_Hash.put("tMap_16", System.currentTimeMillis());

					/**
					 * [tMap_16 end ] stop
					 */

					/**
					 * [tMap_17_TMAP_OUT end ] start
					 */

					currentComponent = "tMap_17_TMAP_OUT";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					ok_Hash.put("tMap_17_TMAP_OUT", true);
					end_Hash.put("tMap_17_TMAP_OUT", System.currentTimeMillis());

					/**
					 * [tMap_17_TMAP_OUT end ] stop
					 */

					/**
					 * [tFileOutputDelimited_25 begin ] start
					 */

					ok_Hash.put("tFileOutputDelimited_25", false);
					start_Hash.put("tFileOutputDelimited_25",
							System.currentTimeMillis());
					currentComponent = "tFileOutputDelimited_25";

					int tos_count_tFileOutputDelimited_25 = 0;

					String fileName_tFileOutputDelimited_25 = "";
					fileName_tFileOutputDelimited_25 = (new java.io.File(
							((String) globalMap
									.get("tCreateTemporaryFile_11_FILEPATH"))))
							.getAbsolutePath().replace("\\", "/");
					String fullName_tFileOutputDelimited_25 = null;
					String extension_tFileOutputDelimited_25 = null;
					String directory_tFileOutputDelimited_25 = null;
					if ((fileName_tFileOutputDelimited_25.indexOf("/") != -1)) {
						if (fileName_tFileOutputDelimited_25.lastIndexOf(".") < fileName_tFileOutputDelimited_25
								.lastIndexOf("/")) {
							fullName_tFileOutputDelimited_25 = fileName_tFileOutputDelimited_25;
							extension_tFileOutputDelimited_25 = "";
						} else {
							fullName_tFileOutputDelimited_25 = fileName_tFileOutputDelimited_25
									.substring(0,
											fileName_tFileOutputDelimited_25
													.lastIndexOf("."));
							extension_tFileOutputDelimited_25 = fileName_tFileOutputDelimited_25
									.substring(fileName_tFileOutputDelimited_25
											.lastIndexOf("."));
						}
						directory_tFileOutputDelimited_25 = fileName_tFileOutputDelimited_25
								.substring(0, fileName_tFileOutputDelimited_25
										.lastIndexOf("/"));
					} else {
						if (fileName_tFileOutputDelimited_25.lastIndexOf(".") != -1) {
							fullName_tFileOutputDelimited_25 = fileName_tFileOutputDelimited_25
									.substring(0,
											fileName_tFileOutputDelimited_25
													.lastIndexOf("."));
							extension_tFileOutputDelimited_25 = fileName_tFileOutputDelimited_25
									.substring(fileName_tFileOutputDelimited_25
											.lastIndexOf("."));
						} else {
							fullName_tFileOutputDelimited_25 = fileName_tFileOutputDelimited_25;
							extension_tFileOutputDelimited_25 = "";
						}
						directory_tFileOutputDelimited_25 = "";
					}
					boolean isFileGenerated_tFileOutputDelimited_25 = true;
					java.io.File filetFileOutputDelimited_25 = new java.io.File(
							fileName_tFileOutputDelimited_25);
					globalMap.put("tFileOutputDelimited_25_FILE_NAME",
							fileName_tFileOutputDelimited_25);
					if (filetFileOutputDelimited_25.exists()) {
						isFileGenerated_tFileOutputDelimited_25 = false;
					}

					String[] headColutFileOutputDelimited_25 = new String[10];
					class CSVBasicSet_tFileOutputDelimited_25 {
						private char field_Delim;
						private char row_Delim;
						private char escape;
						private char textEnclosure;
						private boolean useCRLFRecordDelimiter;

						public boolean isUseCRLFRecordDelimiter() {
							return useCRLFRecordDelimiter;
						}

						public void setFieldSeparator(String fieldSep)
								throws IllegalArgumentException {
							char field_Delim_tFileOutputDelimited_25[] = null;

							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (fieldSep.length() > 0) {
								field_Delim_tFileOutputDelimited_25 = fieldSep
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							this.field_Delim = field_Delim_tFileOutputDelimited_25[0];
						}

						public char getFieldDelim() {
							if (this.field_Delim == 0) {
								setFieldSeparator("\t");
							}
							return this.field_Delim;
						}

						public void setRowSeparator(String rowSep) {
							if ("\r\n".equals(rowSep)) {
								useCRLFRecordDelimiter = true;
								return;
							}
							char row_DelimtFileOutputDelimited_25[] = null;

							// support passing value (property: Row Separator)
							// by 'context.rs' or 'globalMap.get("rs")'.
							if (rowSep.length() > 0) {
								row_DelimtFileOutputDelimited_25 = rowSep
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Row Separator must be assigned a char.");
							}
							this.row_Delim = row_DelimtFileOutputDelimited_25[0];
						}

						public char getRowDelim() {
							if (this.row_Delim == 0) {
								setRowSeparator("\n");
							}
							return this.row_Delim;
						}

						public void setEscapeAndTextEnclosure(String strEscape,
								String strTextEnclosure)
								throws IllegalArgumentException {
							if (strEscape.length() <= 0) {
								throw new IllegalArgumentException(
										"Escape Char must be assigned a char.");
							}

							if ("".equals(strTextEnclosure))
								strTextEnclosure = "\0";
							char textEnclosure_tFileOutputDelimited_25[] = null;

							if (strTextEnclosure.length() > 0) {
								textEnclosure_tFileOutputDelimited_25 = strTextEnclosure
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Text Enclosure must be assigned a char.");
							}

							this.textEnclosure = textEnclosure_tFileOutputDelimited_25[0];

							if (("\\").equals(strEscape)) {
								this.escape = '\\';
							} else if (strEscape.equals(strTextEnclosure)) {
								this.escape = this.textEnclosure;
							} else {
								// the default escape mode is double escape
								this.escape = this.textEnclosure;
							}

						}

						public char getEscapeChar() {
							return (char) this.escape;
						}

						public char getTextEnclosure() {
							return this.textEnclosure;
						}
					}

					int nb_line_tFileOutputDelimited_25 = 0;
					int splitEvery_tFileOutputDelimited_25 = 1000;
					int splitedFileNo_tFileOutputDelimited_25 = 0;
					int currentRow_tFileOutputDelimited_25 = 0;

					CSVBasicSet_tFileOutputDelimited_25 csvSettings_tFileOutputDelimited_25 = new CSVBasicSet_tFileOutputDelimited_25();
					csvSettings_tFileOutputDelimited_25.setFieldSeparator("\t");
					csvSettings_tFileOutputDelimited_25.setRowSeparator("\n");
					csvSettings_tFileOutputDelimited_25
							.setEscapeAndTextEnclosure("\"", "\"");
					// create directory only if not exists
					if (directory_tFileOutputDelimited_25 != null
							&& directory_tFileOutputDelimited_25.trim()
									.length() != 0) {
						java.io.File dir_tFileOutputDelimited_25 = new java.io.File(
								directory_tFileOutputDelimited_25);
						if (!dir_tFileOutputDelimited_25.exists()) {
							dir_tFileOutputDelimited_25.mkdirs();
						}
					}
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_25 = null;
					try {
						CsvWritertFileOutputDelimited_25 = new com.talend.csv.CSVWriter(
								new java.io.BufferedWriter(
										new java.io.OutputStreamWriter(
												new java.io.FileOutputStream(
														fileName_tFileOutputDelimited_25,
														true), "UTF-8")));
						CsvWritertFileOutputDelimited_25
								.setSeparator(csvSettings_tFileOutputDelimited_25
										.getFieldDelim());

						if (!csvSettings_tFileOutputDelimited_25
								.isUseCRLFRecordDelimiter()
								&& csvSettings_tFileOutputDelimited_25
										.getRowDelim() != '\r'
								&& csvSettings_tFileOutputDelimited_25
										.getRowDelim() != '\n') {
							CsvWritertFileOutputDelimited_25.setLineEnd(""
									+ csvSettings_tFileOutputDelimited_25
											.getRowDelim());
						}

						CsvWritertFileOutputDelimited_25
								.setEscapeChar(csvSettings_tFileOutputDelimited_25
										.getEscapeChar());
						CsvWritertFileOutputDelimited_25
								.setQuoteChar(csvSettings_tFileOutputDelimited_25
										.getTextEnclosure());
						CsvWritertFileOutputDelimited_25
								.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

						/**
						 * [tFileOutputDelimited_25 begin ] stop
						 */

						/**
						 * [tMap_18_TMAP_OUT begin ] start
						 */

						ok_Hash.put("tMap_18_TMAP_OUT", false);
						start_Hash.put("tMap_18_TMAP_OUT",
								System.currentTimeMillis());
						currentComponent = "tMap_18_TMAP_OUT";

						int tos_count_tMap_18_TMAP_OUT = 0;

						// ###############################
						// # Lookup's keys initialization

						org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row36Struct> tHash_Lookup_row36 = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row36Struct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row36Struct>) globalMap
								.get("tHash_Lookup_row36"));

						row36Struct row36HashKey = new row36Struct();
						row36Struct row36Default = new row36Struct();
						// ###############################

						// ###############################
						// # Vars initialization
						class Var__tMap_18_TMAP_OUT__Struct {
						}
						Var__tMap_18_TMAP_OUT__Struct Var__tMap_18_TMAP_OUT = new Var__tMap_18_TMAP_OUT__Struct();
						// ###############################

						// ###############################
						// # Outputs initialization
						// ###############################

						class SortableRow_tMap_18_1
								implements
								Comparable<SortableRow_tMap_18_1>,
								routines.system.IPersistableRow<SortableRow_tMap_18_1> { // G_TM_B_001

							boolean is__rejectedInnerJoin;

							BigDecimal exprKey_row36__PATIENT_NUM;

							// copyOfasdd
							String copyOfasdd__PATIENT_IDE;
							String copyOfasdd__PATIENT_IDE_SOURCE;
							BigDecimal copyOfasdd__PATIENT_NUM;
							String copyOfasdd__PATIENT_IDE_STATUS;
							java.util.Date copyOfasdd__UPLOAD_DATE;
							java.util.Date copyOfasdd__UPDATE_DATE;
							java.util.Date copyOfasdd__DOWNLOAD_DATE;
							java.util.Date copyOfasdd__IMPORT_DATE;
							String copyOfasdd__SOURCESYSTEM_CD;
							String copyOfasdd__UPLOAD_ID;

							public void fillFrom(copyOfasddStruct copyOfasdd,
									BigDecimal exprKey_row36__PATIENT_NUM) {

								this.copyOfasdd__PATIENT_IDE = copyOfasdd.PATIENT_IDE;
								this.copyOfasdd__PATIENT_IDE_SOURCE = copyOfasdd.PATIENT_IDE_SOURCE;
								this.copyOfasdd__PATIENT_NUM = copyOfasdd.PATIENT_NUM;
								this.copyOfasdd__PATIENT_IDE_STATUS = copyOfasdd.PATIENT_IDE_STATUS;
								this.copyOfasdd__UPLOAD_DATE = copyOfasdd.UPLOAD_DATE;
								this.copyOfasdd__UPDATE_DATE = copyOfasdd.UPDATE_DATE;
								this.copyOfasdd__DOWNLOAD_DATE = copyOfasdd.DOWNLOAD_DATE;
								this.copyOfasdd__IMPORT_DATE = copyOfasdd.IMPORT_DATE;
								this.copyOfasdd__SOURCESYSTEM_CD = copyOfasdd.SOURCESYSTEM_CD;
								this.copyOfasdd__UPLOAD_ID = copyOfasdd.UPLOAD_ID;
								this.exprKey_row36__PATIENT_NUM = exprKey_row36__PATIENT_NUM;

							}

							public void copyDataTo(copyOfasddStruct copyOfasdd) {

								copyOfasdd.PATIENT_IDE = this.copyOfasdd__PATIENT_IDE;
								copyOfasdd.PATIENT_IDE_SOURCE = this.copyOfasdd__PATIENT_IDE_SOURCE;
								copyOfasdd.PATIENT_NUM = this.copyOfasdd__PATIENT_NUM;
								copyOfasdd.PATIENT_IDE_STATUS = this.copyOfasdd__PATIENT_IDE_STATUS;
								copyOfasdd.UPLOAD_DATE = this.copyOfasdd__UPLOAD_DATE;
								copyOfasdd.UPDATE_DATE = this.copyOfasdd__UPDATE_DATE;
								copyOfasdd.DOWNLOAD_DATE = this.copyOfasdd__DOWNLOAD_DATE;
								copyOfasdd.IMPORT_DATE = this.copyOfasdd__IMPORT_DATE;
								copyOfasdd.SOURCESYSTEM_CD = this.copyOfasdd__SOURCESYSTEM_CD;
								copyOfasdd.UPLOAD_ID = this.copyOfasdd__UPLOAD_ID;

							}

							public String toString() {

								StringBuilder sb = new StringBuilder();
								sb.append(super.toString());
								sb.append("[");

								sb.append("copyOfasdd__PATIENT_IDE");
								sb.append("=");
								sb.append(String
										.valueOf(this.copyOfasdd__PATIENT_IDE));

								sb.append(", ");

								sb.append("copyOfasdd__PATIENT_IDE_SOURCE");
								sb.append("=");
								sb.append(String
										.valueOf(this.copyOfasdd__PATIENT_IDE_SOURCE));

								sb.append(", ");

								sb.append("copyOfasdd__PATIENT_NUM");
								sb.append("=");
								sb.append(String
										.valueOf(this.copyOfasdd__PATIENT_NUM));

								sb.append(", ");

								sb.append("copyOfasdd__PATIENT_IDE_STATUS");
								sb.append("=");
								sb.append(String
										.valueOf(this.copyOfasdd__PATIENT_IDE_STATUS));

								sb.append(", ");

								sb.append("copyOfasdd__UPLOAD_DATE");
								sb.append("=");
								sb.append(String
										.valueOf(this.copyOfasdd__UPLOAD_DATE));

								sb.append(", ");

								sb.append("copyOfasdd__UPDATE_DATE");
								sb.append("=");
								sb.append(String
										.valueOf(this.copyOfasdd__UPDATE_DATE));

								sb.append(", ");

								sb.append("copyOfasdd__DOWNLOAD_DATE");
								sb.append("=");
								sb.append(String
										.valueOf(this.copyOfasdd__DOWNLOAD_DATE));

								sb.append(", ");

								sb.append("copyOfasdd__IMPORT_DATE");
								sb.append("=");
								sb.append(String
										.valueOf(this.copyOfasdd__IMPORT_DATE));

								sb.append(", ");

								sb.append("copyOfasdd__SOURCESYSTEM_CD");
								sb.append("=");
								sb.append(String
										.valueOf(this.copyOfasdd__SOURCESYSTEM_CD));

								sb.append(", ");

								sb.append("copyOfasdd__UPLOAD_ID");
								sb.append("=");
								sb.append(String
										.valueOf(this.copyOfasdd__UPLOAD_ID));

								sb.append("]");

								return sb.toString();
							}

							public int compareTo(SortableRow_tMap_18_1 other) {

								int returnValue = 0;

								returnValue = checkNullsAndCompare(
										this.exprKey_row36__PATIENT_NUM,
										other.exprKey_row36__PATIENT_NUM);
								if (returnValue != 0) {
									return returnValue;
								}

								return returnValue;
							}

							private int checkNullsAndCompare(Object object1,
									Object object2) {
								int returnValue = 0;
								if (object1 instanceof Comparable
										&& object2 instanceof Comparable) {
									returnValue = ((Comparable) object1)
											.compareTo(object2);
								} else if (object1 != null && object2 != null) {
									returnValue = compareStrings(
											object1.toString(),
											object2.toString());
								} else if (object1 == null && object2 != null) {
									returnValue = 1;
								} else if (object1 != null && object2 == null) {
									returnValue = -1;
								} else {
									returnValue = 0;
								}

								return returnValue;
							}

							private int compareStrings(String string1,
									String string2) {
								return string1.compareTo(string2);
							}

							public void readData(ObjectInputStream dis) {

								synchronized (copyOfasddStruct.commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

									try {

										int length = 0;

										this.is__rejectedInnerJoin = dis
												.readBoolean();

										length = dis.readInt();
										if (length == -1) {
											this.copyOfasdd__PATIENT_IDE = null;
										} else {
											if (length > copyOfasddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
												if (length < 1024
														&& copyOfasddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
													copyOfasddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
												} else {
													copyOfasddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
												}
											}
											dis.readFully(
													copyOfasddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
													0, length);
											this.copyOfasdd__PATIENT_IDE = new String(
													copyOfasddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
													0, length);
										}

										length = dis.readInt();
										if (length == -1) {
											this.copyOfasdd__PATIENT_IDE_SOURCE = null;
										} else {
											if (length > copyOfasddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
												if (length < 1024
														&& copyOfasddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
													copyOfasddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
												} else {
													copyOfasddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
												}
											}
											dis.readFully(
													copyOfasddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
													0, length);
											this.copyOfasdd__PATIENT_IDE_SOURCE = new String(
													copyOfasddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
													0, length);
										}

										this.copyOfasdd__PATIENT_NUM = (BigDecimal) dis
												.readObject();

										length = dis.readInt();
										if (length == -1) {
											this.copyOfasdd__PATIENT_IDE_STATUS = null;
										} else {
											if (length > copyOfasddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
												if (length < 1024
														&& copyOfasddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
													copyOfasddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
												} else {
													copyOfasddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
												}
											}
											dis.readFully(
													copyOfasddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
													0, length);
											this.copyOfasdd__PATIENT_IDE_STATUS = new String(
													copyOfasddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
													0, length);
										}

										length = dis.readByte();
										if (length == -1) {
											this.copyOfasdd__UPLOAD_DATE = null;
										} else {
											this.copyOfasdd__UPLOAD_DATE = new Date(
													dis.readLong());
										}

										length = dis.readByte();
										if (length == -1) {
											this.copyOfasdd__UPDATE_DATE = null;
										} else {
											this.copyOfasdd__UPDATE_DATE = new Date(
													dis.readLong());
										}

										length = dis.readByte();
										if (length == -1) {
											this.copyOfasdd__DOWNLOAD_DATE = null;
										} else {
											this.copyOfasdd__DOWNLOAD_DATE = new Date(
													dis.readLong());
										}

										length = dis.readByte();
										if (length == -1) {
											this.copyOfasdd__IMPORT_DATE = null;
										} else {
											this.copyOfasdd__IMPORT_DATE = new Date(
													dis.readLong());
										}

										length = dis.readInt();
										if (length == -1) {
											this.copyOfasdd__SOURCESYSTEM_CD = null;
										} else {
											if (length > copyOfasddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
												if (length < 1024
														&& copyOfasddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
													copyOfasddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
												} else {
													copyOfasddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
												}
											}
											dis.readFully(
													copyOfasddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
													0, length);
											this.copyOfasdd__SOURCESYSTEM_CD = new String(
													copyOfasddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
													0, length);
										}

										length = dis.readInt();
										if (length == -1) {
											this.copyOfasdd__UPLOAD_ID = null;
										} else {
											if (length > copyOfasddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
												if (length < 1024
														&& copyOfasddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
													copyOfasddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
												} else {
													copyOfasddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
												}
											}
											dis.readFully(
													copyOfasddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
													0, length);
											this.copyOfasdd__UPLOAD_ID = new String(
													copyOfasddStruct.commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
													0, length);
										}

										this.exprKey_row36__PATIENT_NUM = (BigDecimal) dis
												.readObject();

									} catch (IOException e) {
										throw new RuntimeException(e);

									} catch (ClassNotFoundException eCNFE) {
										throw new RuntimeException(eCNFE);

									}

								}
							}

							public void writeData(ObjectOutputStream dos) {
								try {

									dos.writeBoolean(this.is__rejectedInnerJoin);

									if (this.copyOfasdd__PATIENT_IDE == null) {
										dos.writeInt(-1);
									} else {
										byte[] byteArray = this.copyOfasdd__PATIENT_IDE
												.getBytes();
										dos.writeInt(byteArray.length);
										dos.write(byteArray);
									}

									if (this.copyOfasdd__PATIENT_IDE_SOURCE == null) {
										dos.writeInt(-1);
									} else {
										byte[] byteArray = this.copyOfasdd__PATIENT_IDE_SOURCE
												.getBytes();
										dos.writeInt(byteArray.length);
										dos.write(byteArray);
									}

									dos.writeObject(this.copyOfasdd__PATIENT_NUM);

									if (this.copyOfasdd__PATIENT_IDE_STATUS == null) {
										dos.writeInt(-1);
									} else {
										byte[] byteArray = this.copyOfasdd__PATIENT_IDE_STATUS
												.getBytes();
										dos.writeInt(byteArray.length);
										dos.write(byteArray);
									}

									if (this.copyOfasdd__UPLOAD_DATE == null) {
										dos.writeByte(-1);
									} else {
										dos.writeByte(0);
										dos.writeLong(this.copyOfasdd__UPLOAD_DATE
												.getTime());
									}

									if (this.copyOfasdd__UPDATE_DATE == null) {
										dos.writeByte(-1);
									} else {
										dos.writeByte(0);
										dos.writeLong(this.copyOfasdd__UPDATE_DATE
												.getTime());
									}

									if (this.copyOfasdd__DOWNLOAD_DATE == null) {
										dos.writeByte(-1);
									} else {
										dos.writeByte(0);
										dos.writeLong(this.copyOfasdd__DOWNLOAD_DATE
												.getTime());
									}

									if (this.copyOfasdd__IMPORT_DATE == null) {
										dos.writeByte(-1);
									} else {
										dos.writeByte(0);
										dos.writeLong(this.copyOfasdd__IMPORT_DATE
												.getTime());
									}

									if (this.copyOfasdd__SOURCESYSTEM_CD == null) {
										dos.writeInt(-1);
									} else {
										byte[] byteArray = this.copyOfasdd__SOURCESYSTEM_CD
												.getBytes();
										dos.writeInt(byteArray.length);
										dos.write(byteArray);
									}

									if (this.copyOfasdd__UPLOAD_ID == null) {
										dos.writeInt(-1);
									} else {
										byte[] byteArray = this.copyOfasdd__UPLOAD_ID
												.getBytes();
										dos.writeInt(byteArray.length);
										dos.write(byteArray);
									}

									dos.writeObject(this.exprKey_row36__PATIENT_NUM);

								} catch (IOException e) {
									throw new RuntimeException(e);
								}
							}

						} // G_TM_B_001

						org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_18_1> fsi_tMap_18_1 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_18_1>(
								context.folderMain + context.folderOutput + "/"
										+ jobName + "_tMapData_" + pid
										+ "_tMap_18_1", 200000) {
							public SortableRow_tMap_18_1 createRowInstance() {
								return new SortableRow_tMap_18_1();
							}
						};

						fsi_tMap_18_1.initPut();

						/**
						 * [tMap_18_TMAP_OUT begin ] stop
						 */

						/**
						 * [tMap_17_TMAP_IN begin ] start
						 */

						ok_Hash.put("tMap_17_TMAP_IN", false);
						start_Hash.put("tMap_17_TMAP_IN",
								System.currentTimeMillis());
						currentComponent = "tMap_17_TMAP_IN";

						int tos_count_tMap_17_TMAP_IN = 0;

						// ###############################
						// # Lookup's keys initialization
						// ###############################

						// ###############################
						// # Vars initialization
						class Var__tMap_17_TMAP_IN__Struct {
						}
						Var__tMap_17_TMAP_IN__Struct Var__tMap_17_TMAP_IN = new Var__tMap_17_TMAP_IN__Struct();
						// ###############################

						// ###############################
						// # Outputs initialization
						copyOfto_pat_mappingStruct copyOfto_pat_mapping_tmp = new copyOfto_pat_mappingStruct();
						copyOfasddStruct copyOfasdd_tmp = new copyOfasddStruct();
						// ###############################

						/**
						 * [tMap_17_TMAP_IN begin ] stop
						 */
						/**
						 * [tMap_17_TMAP_IN main ] start
						 */

						currentComponent = "tMap_17_TMAP_IN";

						boolean hasCasePrimitiveKeyWithNull_tMap_17_TMAP_IN = false;

						fsi_tMap_17_1.endPut();

						if (copyOfto_patient_mapping == null) {
							copyOfto_patient_mapping = new copyOfto_patient_mappingStruct();
						}

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_17_TMAP_IN = false;
						boolean mainRowRejected_tMap_17_TMAP_IN = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row35"
						// /////////////////////////////////////////////

						SortableRow_tMap_17_1 rsc_tMap_17_1;

						tHash_Lookup_row35.initGet();

						fsi_tMap_17_1.initGet();

						// TEST firstLookupIsPersistentSorted=true
						// isFirstPersistentSortedTable=true

						rejectedInnerJoin_tMap_17_TMAP_IN = false;

						while (fsi_tMap_17_1.hasNext()) { // G_TM_M_250 loop "1"

							// CALL close loop of lookup '1'

							rsc_tMap_17_1 = (SortableRow_tMap_17_1) fsi_tMap_17_1
									.next();
							rsc_tMap_17_1.copyDataTo(copyOfto_patient_mapping);

							rejectedInnerJoin_tMap_17_TMAP_IN = rsc_tMap_17_1.is__rejectedInnerJoin;

							boolean forceLooprow35 = false;

							row35Struct row35ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_17_TMAP_IN) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_17_TMAP_IN = false;

								row35HashKey.PATIENT_NUM = rsc_tMap_17_1.exprKey_row35__PATIENT_NUM;

								tHash_Lookup_row35.lookup(row35HashKey);

								if (!tHash_Lookup_row35.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_17_TMAP_IN = true;

									forceLooprow35 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							else { // G 20 - G 21
								forceLooprow35 = true;
							} // G 21

							row35Struct row35 = null;

							while ((tHash_Lookup_row35 != null && tHash_Lookup_row35
									.hasNext()) || forceLooprow35) { // G_TM_M_043

								// CALL close loop of lookup 'row35'

								row35Struct fromLookup_row35 = null;
								row35 = row35Default;

								if (!forceLooprow35) { // G 46

									fromLookup_row35 = tHash_Lookup_row35
											.next();

									if (fromLookup_row35 != null) {
										row35 = fromLookup_row35;
									}

								} // G 46

								forceLooprow35 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_17_TMAP_IN__Struct Var = Var__tMap_17_TMAP_IN;// ###############################
									// ###############################
									// # Output tables

									copyOfto_pat_mapping = null;
									copyOfasdd = null;

									if (!rejectedInnerJoin_tMap_17_TMAP_IN) {

										// # Output table :
										// 'copyOfto_pat_mapping'
										copyOfto_pat_mapping_tmp.PATIENT_IDE = row35.PATIENT_IDE;
										copyOfto_pat_mapping_tmp.PATIENT_IDE_SOURCE = row35.PATIENT_IDE_SOURCE;
										copyOfto_pat_mapping_tmp.PATIENT_NUM = copyOfto_patient_mapping.PATIENT_NUM;
										copyOfto_pat_mapping_tmp.PATIENT_IDE_STATUS = row35.PATIENT_IDE_STATUS;
										copyOfto_pat_mapping_tmp.UPLOAD_DATE = row35.UPLOAD_DATE;
										copyOfto_pat_mapping_tmp.UPDATE_DATE = row35.UPDATE_DATE;
										copyOfto_pat_mapping_tmp.DOWNLOAD_DATE = row35.DOWNLOAD_DATE;
										copyOfto_pat_mapping_tmp.IMPORT_DATE = row35.IMPORT_DATE;
										copyOfto_pat_mapping_tmp.SOURCESYSTEM_CD = row35.SOURCESYSTEM_CD;
										copyOfto_pat_mapping_tmp.UPLOAD_ID = row35.UPLOAD_ID;
										copyOfto_pat_mapping = copyOfto_pat_mapping_tmp;

										// # Output table : 'copyOfasdd'
										copyOfasdd_tmp.PATIENT_IDE = row35.PATIENT_IDE;
										copyOfasdd_tmp.PATIENT_IDE_SOURCE = row35.PATIENT_IDE_SOURCE;
										copyOfasdd_tmp.PATIENT_NUM = row35.PATIENT_NUM;
										copyOfasdd_tmp.PATIENT_IDE_STATUS = row35.PATIENT_IDE_STATUS;
										copyOfasdd_tmp.UPLOAD_DATE = row35.UPLOAD_DATE;
										copyOfasdd_tmp.UPDATE_DATE = row35.UPDATE_DATE;
										copyOfasdd_tmp.DOWNLOAD_DATE = row35.DOWNLOAD_DATE;
										copyOfasdd_tmp.IMPORT_DATE = row35.IMPORT_DATE;
										copyOfasdd_tmp.SOURCESYSTEM_CD = row35.SOURCESYSTEM_CD;
										copyOfasdd_tmp.UPLOAD_ID = row35.UPLOAD_ID;
										copyOfasdd = copyOfasdd_tmp;
									} // closing inner join bracket (2)
										// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_17_TMAP_IN = false;

								tos_count_tMap_17_TMAP_IN++;

								/**
								 * [tMap_17_TMAP_IN main ] stop
								 */
								// Start of branch "copyOfto_pat_mapping"
								if (copyOfto_pat_mapping != null) {

									/**
									 * [tFileOutputDelimited_25 main ] start
									 */

									currentComponent = "tFileOutputDelimited_25";

									String[] rowtFileOutputDelimited_25 = new String[10];

									rowtFileOutputDelimited_25[0] = copyOfto_pat_mapping.PATIENT_IDE == null ? ""
											: copyOfto_pat_mapping.PATIENT_IDE;

									rowtFileOutputDelimited_25[1] = copyOfto_pat_mapping.PATIENT_IDE_SOURCE == null ? ""
											: copyOfto_pat_mapping.PATIENT_IDE_SOURCE;

									rowtFileOutputDelimited_25[2] = copyOfto_pat_mapping.PATIENT_NUM == null ? ""
											: copyOfto_pat_mapping.PATIENT_NUM
													.toPlainString();

									rowtFileOutputDelimited_25[3] = copyOfto_pat_mapping.PATIENT_IDE_STATUS == null ? ""
											: copyOfto_pat_mapping.PATIENT_IDE_STATUS;

									rowtFileOutputDelimited_25[4] = copyOfto_pat_mapping.UPLOAD_DATE == null ? ""
											: FormatterUtils
													.format_Date(
															copyOfto_pat_mapping.UPLOAD_DATE,
															"dd-MM-yyyy");

									rowtFileOutputDelimited_25[5] = copyOfto_pat_mapping.UPDATE_DATE == null ? ""
											: FormatterUtils
													.format_Date(
															copyOfto_pat_mapping.UPDATE_DATE,
															"dd-MM-yyyy");

									rowtFileOutputDelimited_25[6] = copyOfto_pat_mapping.DOWNLOAD_DATE == null ? ""
											: FormatterUtils
													.format_Date(
															copyOfto_pat_mapping.DOWNLOAD_DATE,
															"dd-MM-yyyy");

									rowtFileOutputDelimited_25[7] = copyOfto_pat_mapping.IMPORT_DATE == null ? ""
											: FormatterUtils
													.format_Date(
															copyOfto_pat_mapping.IMPORT_DATE,
															"dd-MM-yyyy");

									rowtFileOutputDelimited_25[8] = copyOfto_pat_mapping.SOURCESYSTEM_CD == null ? ""
											: copyOfto_pat_mapping.SOURCESYSTEM_CD;

									rowtFileOutputDelimited_25[9] = copyOfto_pat_mapping.UPLOAD_ID == null ? ""
											: copyOfto_pat_mapping.UPLOAD_ID;

									nb_line_tFileOutputDelimited_25++;
									CsvWritertFileOutputDelimited_25
											.writeNext(rowtFileOutputDelimited_25);

									tos_count_tFileOutputDelimited_25++;

									/**
									 * [tFileOutputDelimited_25 main ] stop
									 */

								} // End of branch "copyOfto_pat_mapping"

								// Start of branch "copyOfasdd"
								if (copyOfasdd != null) {

									/**
									 * [tMap_18_TMAP_OUT main ] start
									 */

									currentComponent = "tMap_18_TMAP_OUT";

									boolean hasCasePrimitiveKeyWithNull_tMap_18_TMAP_OUT = false;

									hasCasePrimitiveKeyWithNull_tMap_18_TMAP_OUT = false;

									BigDecimal exprKey_row36__PATIENT_NUM = copyOfasdd.PATIENT_NUM;

									SortableRow_tMap_18_1 sortableRow_tMap_18_1 = fsi_tMap_18_1
											.getNextFreeRow();

									sortableRow_tMap_18_1.fillFrom(copyOfasdd,
											exprKey_row36__PATIENT_NUM);

									fsi_tMap_18_1.put(sortableRow_tMap_18_1);

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_18_TMAP_OUT = false;
									boolean mainRowRejected_tMap_18_TMAP_OUT = false;

									// ###############################

									tos_count_tMap_18_TMAP_OUT++;

									/**
									 * [tMap_18_TMAP_OUT main ] stop
									 */

								} // End of branch "copyOfasdd"

							} // close loop of lookup 'row35' // G_TM_M_043

						} // G_TM_M_250 close loop read file data '1'

						/**
						 * [tMap_17_TMAP_IN end ] start
						 */

						currentComponent = "tMap_17_TMAP_IN";

						// ###############################
						// # Lookup hashes releasing
						fsi_tMap_17_1.endGet();

						if (tHash_Lookup_row35 != null) {
							tHash_Lookup_row35.endGet();
						}
						globalMap.remove("tHash_Lookup_row35");

						// ###############################

						ok_Hash.put("tMap_17_TMAP_IN", true);
						end_Hash.put("tMap_17_TMAP_IN",
								System.currentTimeMillis());

						/**
						 * [tMap_17_TMAP_IN end ] stop
						 */

						/**
						 * [tMap_18_TMAP_OUT end ] start
						 */

						currentComponent = "tMap_18_TMAP_OUT";

						// ###############################
						// # Lookup hashes releasing
						// ###############################

						ok_Hash.put("tMap_18_TMAP_OUT", true);
						end_Hash.put("tMap_18_TMAP_OUT",
								System.currentTimeMillis());

						/**
						 * [tMap_18_TMAP_OUT end ] stop
						 */

						/**
						 * [tFileOutputDelimited_26 begin ] start
						 */

						ok_Hash.put("tFileOutputDelimited_26", false);
						start_Hash.put("tFileOutputDelimited_26",
								System.currentTimeMillis());
						currentComponent = "tFileOutputDelimited_26";

						int tos_count_tFileOutputDelimited_26 = 0;

						String fileName_tFileOutputDelimited_26 = "";
						fileName_tFileOutputDelimited_26 = (new java.io.File(
								((String) globalMap
										.get("tCreateTemporaryFile_12_FILEPATH"))))
								.getAbsolutePath().replace("\\", "/");
						String fullName_tFileOutputDelimited_26 = null;
						String extension_tFileOutputDelimited_26 = null;
						String directory_tFileOutputDelimited_26 = null;
						if ((fileName_tFileOutputDelimited_26.indexOf("/") != -1)) {
							if (fileName_tFileOutputDelimited_26
									.lastIndexOf(".") < fileName_tFileOutputDelimited_26
									.lastIndexOf("/")) {
								fullName_tFileOutputDelimited_26 = fileName_tFileOutputDelimited_26;
								extension_tFileOutputDelimited_26 = "";
							} else {
								fullName_tFileOutputDelimited_26 = fileName_tFileOutputDelimited_26
										.substring(0,
												fileName_tFileOutputDelimited_26
														.lastIndexOf("."));
								extension_tFileOutputDelimited_26 = fileName_tFileOutputDelimited_26
										.substring(fileName_tFileOutputDelimited_26
												.lastIndexOf("."));
							}
							directory_tFileOutputDelimited_26 = fileName_tFileOutputDelimited_26
									.substring(0,
											fileName_tFileOutputDelimited_26
													.lastIndexOf("/"));
						} else {
							if (fileName_tFileOutputDelimited_26
									.lastIndexOf(".") != -1) {
								fullName_tFileOutputDelimited_26 = fileName_tFileOutputDelimited_26
										.substring(0,
												fileName_tFileOutputDelimited_26
														.lastIndexOf("."));
								extension_tFileOutputDelimited_26 = fileName_tFileOutputDelimited_26
										.substring(fileName_tFileOutputDelimited_26
												.lastIndexOf("."));
							} else {
								fullName_tFileOutputDelimited_26 = fileName_tFileOutputDelimited_26;
								extension_tFileOutputDelimited_26 = "";
							}
							directory_tFileOutputDelimited_26 = "";
						}
						boolean isFileGenerated_tFileOutputDelimited_26 = true;
						java.io.File filetFileOutputDelimited_26 = new java.io.File(
								fileName_tFileOutputDelimited_26);
						globalMap.put("tFileOutputDelimited_26_FILE_NAME",
								fileName_tFileOutputDelimited_26);
						if (filetFileOutputDelimited_26.exists()) {
							isFileGenerated_tFileOutputDelimited_26 = false;
						}

						String[] headColutFileOutputDelimited_26 = new String[19];
						class CSVBasicSet_tFileOutputDelimited_26 {
							private char field_Delim;
							private char row_Delim;
							private char escape;
							private char textEnclosure;
							private boolean useCRLFRecordDelimiter;

							public boolean isUseCRLFRecordDelimiter() {
								return useCRLFRecordDelimiter;
							}

							public void setFieldSeparator(String fieldSep)
									throws IllegalArgumentException {
								char field_Delim_tFileOutputDelimited_26[] = null;

								// support passing value (property: Field
								// Separator) by 'context.fs' or
								// 'globalMap.get("fs")'.
								if (fieldSep.length() > 0) {
									field_Delim_tFileOutputDelimited_26 = fieldSep
											.toCharArray();
								} else {
									throw new IllegalArgumentException(
											"Field Separator must be assigned a char.");
								}
								this.field_Delim = field_Delim_tFileOutputDelimited_26[0];
							}

							public char getFieldDelim() {
								if (this.field_Delim == 0) {
									setFieldSeparator("\t");
								}
								return this.field_Delim;
							}

							public void setRowSeparator(String rowSep) {
								if ("\r\n".equals(rowSep)) {
									useCRLFRecordDelimiter = true;
									return;
								}
								char row_DelimtFileOutputDelimited_26[] = null;

								// support passing value (property: Row
								// Separator) by 'context.rs' or
								// 'globalMap.get("rs")'.
								if (rowSep.length() > 0) {
									row_DelimtFileOutputDelimited_26 = rowSep
											.toCharArray();
								} else {
									throw new IllegalArgumentException(
											"Row Separator must be assigned a char.");
								}
								this.row_Delim = row_DelimtFileOutputDelimited_26[0];
							}

							public char getRowDelim() {
								if (this.row_Delim == 0) {
									setRowSeparator("\n");
								}
								return this.row_Delim;
							}

							public void setEscapeAndTextEnclosure(
									String strEscape, String strTextEnclosure)
									throws IllegalArgumentException {
								if (strEscape.length() <= 0) {
									throw new IllegalArgumentException(
											"Escape Char must be assigned a char.");
								}

								if ("".equals(strTextEnclosure))
									strTextEnclosure = "\0";
								char textEnclosure_tFileOutputDelimited_26[] = null;

								if (strTextEnclosure.length() > 0) {
									textEnclosure_tFileOutputDelimited_26 = strTextEnclosure
											.toCharArray();
								} else {
									throw new IllegalArgumentException(
											"Text Enclosure must be assigned a char.");
								}

								this.textEnclosure = textEnclosure_tFileOutputDelimited_26[0];

								if (("\\").equals(strEscape)) {
									this.escape = '\\';
								} else if (strEscape.equals(strTextEnclosure)) {
									this.escape = this.textEnclosure;
								} else {
									// the default escape mode is double escape
									this.escape = this.textEnclosure;
								}

							}

							public char getEscapeChar() {
								return (char) this.escape;
							}

							public char getTextEnclosure() {
								return this.textEnclosure;
							}
						}

						int nb_line_tFileOutputDelimited_26 = 0;
						int splitEvery_tFileOutputDelimited_26 = 1000;
						int splitedFileNo_tFileOutputDelimited_26 = 0;
						int currentRow_tFileOutputDelimited_26 = 0;

						CSVBasicSet_tFileOutputDelimited_26 csvSettings_tFileOutputDelimited_26 = new CSVBasicSet_tFileOutputDelimited_26();
						csvSettings_tFileOutputDelimited_26
								.setFieldSeparator("\t");
						csvSettings_tFileOutputDelimited_26
								.setRowSeparator("\n");
						csvSettings_tFileOutputDelimited_26
								.setEscapeAndTextEnclosure("\"", "\"");
						// create directory only if not exists
						if (directory_tFileOutputDelimited_26 != null
								&& directory_tFileOutputDelimited_26.trim()
										.length() != 0) {
							java.io.File dir_tFileOutputDelimited_26 = new java.io.File(
									directory_tFileOutputDelimited_26);
							if (!dir_tFileOutputDelimited_26.exists()) {
								dir_tFileOutputDelimited_26.mkdirs();
							}
						}
						com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_26 = null;
						try {
							CsvWritertFileOutputDelimited_26 = new com.talend.csv.CSVWriter(
									new java.io.BufferedWriter(
											new java.io.OutputStreamWriter(
													new java.io.FileOutputStream(
															fileName_tFileOutputDelimited_26,
															true), "UTF-8")));
							CsvWritertFileOutputDelimited_26
									.setSeparator(csvSettings_tFileOutputDelimited_26
											.getFieldDelim());

							if (!csvSettings_tFileOutputDelimited_26
									.isUseCRLFRecordDelimiter()
									&& csvSettings_tFileOutputDelimited_26
											.getRowDelim() != '\r'
									&& csvSettings_tFileOutputDelimited_26
											.getRowDelim() != '\n') {
								CsvWritertFileOutputDelimited_26.setLineEnd(""
										+ csvSettings_tFileOutputDelimited_26
												.getRowDelim());
							}

							CsvWritertFileOutputDelimited_26
									.setEscapeChar(csvSettings_tFileOutputDelimited_26
											.getEscapeChar());
							CsvWritertFileOutputDelimited_26
									.setQuoteChar(csvSettings_tFileOutputDelimited_26
											.getTextEnclosure());
							CsvWritertFileOutputDelimited_26
									.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

							/**
							 * [tFileOutputDelimited_26 begin ] stop
							 */

							/**
							 * [tMap_18_TMAP_IN begin ] start
							 */

							ok_Hash.put("tMap_18_TMAP_IN", false);
							start_Hash.put("tMap_18_TMAP_IN",
									System.currentTimeMillis());
							currentComponent = "tMap_18_TMAP_IN";

							int tos_count_tMap_18_TMAP_IN = 0;

							// ###############################
							// # Lookup's keys initialization
							// ###############################

							// ###############################
							// # Vars initialization
							class Var__tMap_18_TMAP_IN__Struct {
							}
							Var__tMap_18_TMAP_IN__Struct Var__tMap_18_TMAP_IN = new Var__tMap_18_TMAP_IN__Struct();
							// ###############################

							// ###############################
							// # Outputs initialization
							copyOfasdStruct copyOfasd_tmp = new copyOfasdStruct();
							// ###############################

							/**
							 * [tMap_18_TMAP_IN begin ] stop
							 */
							/**
							 * [tMap_18_TMAP_IN main ] start
							 */

							currentComponent = "tMap_18_TMAP_IN";

							boolean hasCasePrimitiveKeyWithNull_tMap_18_TMAP_IN = false;

							fsi_tMap_18_1.endPut();

							if (copyOfasdd == null) {
								copyOfasdd = new copyOfasddStruct();
							}

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_18_TMAP_IN = false;
							boolean mainRowRejected_tMap_18_TMAP_IN = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row36"
							// /////////////////////////////////////////////

							SortableRow_tMap_18_1 rsc_tMap_18_1;

							tHash_Lookup_row36.initGet();

							fsi_tMap_18_1.initGet();

							// TEST firstLookupIsPersistentSorted=true
							// isFirstPersistentSortedTable=true

							rejectedInnerJoin_tMap_18_TMAP_IN = false;

							while (fsi_tMap_18_1.hasNext()) { // G_TM_M_250 loop
																// "1"

								// CALL close loop of lookup '1'

								rsc_tMap_18_1 = (SortableRow_tMap_18_1) fsi_tMap_18_1
										.next();
								rsc_tMap_18_1.copyDataTo(copyOfasdd);

								rejectedInnerJoin_tMap_18_TMAP_IN = rsc_tMap_18_1.is__rejectedInnerJoin;

								boolean forceLooprow36 = false;

								row36Struct row36ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_18_TMAP_IN) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_18_TMAP_IN = false;

									row36HashKey.PATIENT_NUM = rsc_tMap_18_1.exprKey_row36__PATIENT_NUM;

									tHash_Lookup_row36.lookup(row36HashKey);

								} // G_TM_M_020

								row36Struct row36 = null;

								row36Struct fromLookup_row36 = null;
								row36 = row36Default;

								if (tHash_Lookup_row36 != null
										&& tHash_Lookup_row36.hasNext()) { // G
																			// 099

									fromLookup_row36 = tHash_Lookup_row36
											.next();

								} // G 099

								if (fromLookup_row36 != null) {
									row36 = fromLookup_row36;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_18_TMAP_IN__Struct Var = Var__tMap_18_TMAP_IN;// ###############################
									// ###############################
									// # Output tables

									copyOfasd = null;

									// # Output table : 'copyOfasd'
									copyOfasd_tmp.PATIENT_NUM = row36.PATIENT_NUM;
									copyOfasd_tmp.VITAL_STATUS_CD = row36.VITAL_STATUS_CD;
									copyOfasd_tmp.BIRTH_DATE = row36.BIRTH_DATE;
									copyOfasd_tmp.DEATH_DATE = row36.DEATH_DATE;
									copyOfasd_tmp.SEX_CD = row36.SEX_CD;
									copyOfasd_tmp.AGE_IN_YEARS_NUM = row36.AGE_IN_YEARS_NUM;
									copyOfasd_tmp.LANGUAGE_CD = row36.LANGUAGE_CD;
									copyOfasd_tmp.RACE_CD = row36.RACE_CD;
									copyOfasd_tmp.MARITAL_STATUS_CD = row36.MARITAL_STATUS_CD;
									copyOfasd_tmp.RELIGION_CD = row36.RELIGION_CD;
									copyOfasd_tmp.ZIP_CD = row36.ZIP_CD;
									copyOfasd_tmp.STATECITYZIP_PATH = row36.STATECITYZIP_PATH;
									copyOfasd_tmp.INCOME_CD = row36.INCOME_CD;
									copyOfasd_tmp.PATIENT_BLOB = row36.PATIENT_BLOB;
									copyOfasd_tmp.UPDATE_DATE = row36.UPDATE_DATE;
									copyOfasd_tmp.DOWNLOAD_DATE = row36.DOWNLOAD_DATE;
									copyOfasd_tmp.IMPORT_DATE = row36.IMPORT_DATE;
									copyOfasd_tmp.SOURCESYSTEM_CD = row36.SOURCESYSTEM_CD;
									copyOfasd_tmp.UPLOAD_ID = row36.UPLOAD_ID;
									copyOfasd = copyOfasd_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_18_TMAP_IN = false;

								tos_count_tMap_18_TMAP_IN++;

								/**
								 * [tMap_18_TMAP_IN main ] stop
								 */
								// Start of branch "copyOfasd"
								if (copyOfasd != null) {

									/**
									 * [tFileOutputDelimited_26 main ] start
									 */

									currentComponent = "tFileOutputDelimited_26";

									String[] rowtFileOutputDelimited_26 = new String[19];

									rowtFileOutputDelimited_26[0] = copyOfasd.PATIENT_NUM == null ? ""
											: copyOfasd.PATIENT_NUM
													.toPlainString();

									rowtFileOutputDelimited_26[1] = copyOfasd.VITAL_STATUS_CD == null ? ""
											: copyOfasd.VITAL_STATUS_CD;

									rowtFileOutputDelimited_26[2] = copyOfasd.BIRTH_DATE == null ? ""
											: copyOfasd.BIRTH_DATE;

									rowtFileOutputDelimited_26[3] = copyOfasd.DEATH_DATE == null ? ""
											: copyOfasd.DEATH_DATE;

									rowtFileOutputDelimited_26[4] = copyOfasd.SEX_CD == null ? ""
											: copyOfasd.SEX_CD;

									rowtFileOutputDelimited_26[5] = copyOfasd.AGE_IN_YEARS_NUM == null ? ""
											: copyOfasd.AGE_IN_YEARS_NUM;

									rowtFileOutputDelimited_26[6] = copyOfasd.LANGUAGE_CD == null ? ""
											: copyOfasd.LANGUAGE_CD;

									rowtFileOutputDelimited_26[7] = copyOfasd.RACE_CD == null ? ""
											: copyOfasd.RACE_CD;

									rowtFileOutputDelimited_26[8] = copyOfasd.MARITAL_STATUS_CD == null ? ""
											: copyOfasd.MARITAL_STATUS_CD;

									rowtFileOutputDelimited_26[9] = copyOfasd.RELIGION_CD == null ? ""
											: copyOfasd.RELIGION_CD;

									rowtFileOutputDelimited_26[10] = copyOfasd.ZIP_CD == null ? ""
											: copyOfasd.ZIP_CD;

									rowtFileOutputDelimited_26[11] = copyOfasd.STATECITYZIP_PATH == null ? ""
											: copyOfasd.STATECITYZIP_PATH;

									rowtFileOutputDelimited_26[12] = copyOfasd.INCOME_CD == null ? ""
											: copyOfasd.INCOME_CD;

									rowtFileOutputDelimited_26[13] = copyOfasd.PATIENT_BLOB == null ? ""
											: copyOfasd.PATIENT_BLOB;

									rowtFileOutputDelimited_26[14] = copyOfasd.UPDATE_DATE == null ? ""
											: FormatterUtils.format_Date(
													copyOfasd.UPDATE_DATE,
													"dd-MM-yyyy");

									rowtFileOutputDelimited_26[15] = copyOfasd.DOWNLOAD_DATE == null ? ""
											: FormatterUtils.format_Date(
													copyOfasd.DOWNLOAD_DATE,
													"dd-MM-yyyy");

									rowtFileOutputDelimited_26[16] = copyOfasd.IMPORT_DATE == null ? ""
											: FormatterUtils.format_Date(
													copyOfasd.IMPORT_DATE,
													"dd-MM-yyyy");

									rowtFileOutputDelimited_26[17] = copyOfasd.SOURCESYSTEM_CD == null ? ""
											: copyOfasd.SOURCESYSTEM_CD;

									rowtFileOutputDelimited_26[18] = copyOfasd.UPLOAD_ID == null ? ""
											: copyOfasd.UPLOAD_ID;

									nb_line_tFileOutputDelimited_26++;
									CsvWritertFileOutputDelimited_26
											.writeNext(rowtFileOutputDelimited_26);

									tos_count_tFileOutputDelimited_26++;

									/**
									 * [tFileOutputDelimited_26 main ] stop
									 */

								} // End of branch "copyOfasd"

							} // G_TM_M_250 close loop read file data '1'

							/**
							 * [tMap_18_TMAP_IN end ] start
							 */

							currentComponent = "tMap_18_TMAP_IN";

							// ###############################
							// # Lookup hashes releasing
							fsi_tMap_18_1.endGet();

							if (tHash_Lookup_row36 != null) {
								tHash_Lookup_row36.endGet();
							}
							globalMap.remove("tHash_Lookup_row36");

							// ###############################

							ok_Hash.put("tMap_18_TMAP_IN", true);
							end_Hash.put("tMap_18_TMAP_IN",
									System.currentTimeMillis());

							/**
							 * [tMap_18_TMAP_IN end ] stop
							 */

							/**
							 * [tFileOutputDelimited_26 end ] start
							 */

							currentComponent = "tFileOutputDelimited_26";

						} finally {

							if (CsvWritertFileOutputDelimited_26 != null) {
								CsvWritertFileOutputDelimited_26.close();
							}
							globalMap.put("tFileOutputDelimited_26_NB_LINE",
									nb_line_tFileOutputDelimited_26);
						} // finally

						ok_Hash.put("tFileOutputDelimited_26", true);
						end_Hash.put("tFileOutputDelimited_26",
								System.currentTimeMillis());

						/**
						 * [tFileOutputDelimited_26 end ] stop
						 */

						/**
						 * [tFileOutputDelimited_25 end ] start
						 */

						currentComponent = "tFileOutputDelimited_25";

					} finally {

						if (CsvWritertFileOutputDelimited_25 != null) {
							CsvWritertFileOutputDelimited_25.close();
						}
						globalMap.put("tFileOutputDelimited_25_NB_LINE",
								nb_line_tFileOutputDelimited_25);
					} // finally

					ok_Hash.put("tFileOutputDelimited_25", true);
					end_Hash.put("tFileOutputDelimited_25",
							System.currentTimeMillis());

					/**
					 * [tFileOutputDelimited_25 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_24 end ] start
					 */

					currentComponent = "tFileOutputDelimited_24";

				} finally {

					if (CsvWritertFileOutputDelimited_24 != null) {
						CsvWritertFileOutputDelimited_24.close();
					}
					globalMap.put("tFileOutputDelimited_24_NB_LINE",
							nb_line_tFileOutputDelimited_24);
				} // finally

				ok_Hash.put("tFileOutputDelimited_24", true);
				end_Hash.put("tFileOutputDelimited_24",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_24 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_16:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_16Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_16_SUBPROCESS_STATE", 1);
	}

	public void tJava_16Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_16 begin ] start
				 */

				ok_Hash.put("tJava_16", false);
				start_Hash.put("tJava_16", System.currentTimeMillis());
				currentComponent = "tJava_16";

				int tos_count_tJava_16 = 0;

				System.out.println("Extracting Source Data...");
				StatusListener.setStatus(70, "Transforming Staging to Target",
						"");

				/**
				 * [tJava_16 begin ] stop
				 */
				/**
				 * [tJava_16 main ] start
				 */

				currentComponent = "tJava_16";

				tos_count_tJava_16++;

				/**
				 * [tJava_16 main ] stop
				 */
				/**
				 * [tJava_16 end ] start
				 */

				currentComponent = "tJava_16";

				ok_Hash.put("tJava_16", true);
				end_Hash.put("tJava_16", System.currentTimeMillis());

				/**
				 * [tJava_16 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_16:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_26Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_16_SUBPROCESS_STATE", 1);
	}

	public static class row42Struct implements
			routines.system.IPersistableRow<row42Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.PATIENT_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row42Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row40Struct implements
			routines.system.IPersistableRow<row40Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.PATIENT_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row40Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_26Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_26_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row40Struct row40 = new row40Struct();
				row42Struct row42 = new row42Struct();

				/**
				 * [tFileOutputDelimited_27 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_27", false);
				start_Hash.put("tFileOutputDelimited_27",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_27";

				int tos_count_tFileOutputDelimited_27 = 0;

				String fileName_tFileOutputDelimited_27 = "";
				fileName_tFileOutputDelimited_27 = (new java.io.File(
						context.folderMain + context.folderOutput
								+ "/patient_mapping.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_27 = null;
				String extension_tFileOutputDelimited_27 = null;
				String directory_tFileOutputDelimited_27 = null;
				if ((fileName_tFileOutputDelimited_27.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_27.lastIndexOf(".") < fileName_tFileOutputDelimited_27
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_27 = fileName_tFileOutputDelimited_27;
						extension_tFileOutputDelimited_27 = "";
					} else {
						fullName_tFileOutputDelimited_27 = fileName_tFileOutputDelimited_27
								.substring(0, fileName_tFileOutputDelimited_27
										.lastIndexOf("."));
						extension_tFileOutputDelimited_27 = fileName_tFileOutputDelimited_27
								.substring(fileName_tFileOutputDelimited_27
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_27 = fileName_tFileOutputDelimited_27
							.substring(0, fileName_tFileOutputDelimited_27
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_27.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_27 = fileName_tFileOutputDelimited_27
								.substring(0, fileName_tFileOutputDelimited_27
										.lastIndexOf("."));
						extension_tFileOutputDelimited_27 = fileName_tFileOutputDelimited_27
								.substring(fileName_tFileOutputDelimited_27
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_27 = fileName_tFileOutputDelimited_27;
						extension_tFileOutputDelimited_27 = "";
					}
					directory_tFileOutputDelimited_27 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_27 = true;
				java.io.File filetFileOutputDelimited_27 = new java.io.File(
						fileName_tFileOutputDelimited_27);
				globalMap.put("tFileOutputDelimited_27_FILE_NAME",
						fileName_tFileOutputDelimited_27);

				String[] headColutFileOutputDelimited_27 = new String[10];
				class CSVBasicSet_tFileOutputDelimited_27 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_27[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_27 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_27[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_27[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_27 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_27[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_27[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_27 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_27[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_27 = 0;
				int splitEvery_tFileOutputDelimited_27 = 1000;
				int splitedFileNo_tFileOutputDelimited_27 = 0;
				int currentRow_tFileOutputDelimited_27 = 0;

				CSVBasicSet_tFileOutputDelimited_27 csvSettings_tFileOutputDelimited_27 = new CSVBasicSet_tFileOutputDelimited_27();
				csvSettings_tFileOutputDelimited_27.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_27.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_27.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_27 != null
						&& directory_tFileOutputDelimited_27.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_27 = new java.io.File(
							directory_tFileOutputDelimited_27);
					if (!dir_tFileOutputDelimited_27.exists()) {
						dir_tFileOutputDelimited_27.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_27 = null;
				try {
					CsvWritertFileOutputDelimited_27 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_27,
													false), "UTF-8")));
					CsvWritertFileOutputDelimited_27
							.setSeparator(csvSettings_tFileOutputDelimited_27
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_27
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_27
									.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_27
									.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_27.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_27
										.getRowDelim());
					}

					if (filetFileOutputDelimited_27.length() == 0) {

						headColutFileOutputDelimited_27[0] = "PATIENT_IDE";

						headColutFileOutputDelimited_27[1] = "PATIENT_IDE_SOURCE";

						headColutFileOutputDelimited_27[2] = "PATIENT_NUM";

						headColutFileOutputDelimited_27[3] = "PATIENT_IDE_STATUS";

						headColutFileOutputDelimited_27[4] = "UPLOAD_DATE";

						headColutFileOutputDelimited_27[5] = "UPDATE_DATE";

						headColutFileOutputDelimited_27[6] = "DOWNLOAD_DATE";

						headColutFileOutputDelimited_27[7] = "IMPORT_DATE";

						headColutFileOutputDelimited_27[8] = "SOURCESYSTEM_CD";

						headColutFileOutputDelimited_27[9] = "UPLOAD_ID";

						CsvWritertFileOutputDelimited_27
								.writeNext(headColutFileOutputDelimited_27);
						CsvWritertFileOutputDelimited_27.flush();

					}

					CsvWritertFileOutputDelimited_27
							.setEscapeChar(csvSettings_tFileOutputDelimited_27
									.getEscapeChar());
					CsvWritertFileOutputDelimited_27
							.setQuoteChar(csvSettings_tFileOutputDelimited_27
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_27
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_27 begin ] stop
					 */

					/**
					 * [tUniqRow_10 begin ] start
					 */

					ok_Hash.put("tUniqRow_10", false);
					start_Hash.put("tUniqRow_10", System.currentTimeMillis());
					currentComponent = "tUniqRow_10";

					int tos_count_tUniqRow_10 = 0;

					class KeyStruct_tUniqRow_10 {

						private static final int DEFAULT_HASHCODE = 1;
						private static final int PRIME = 31;
						private int hashCode = DEFAULT_HASHCODE;
						public boolean hashCodeDirty = true;

						String PATIENT_IDE;
						String PATIENT_IDE_SOURCE;

						@Override
						public int hashCode() {
							if (this.hashCodeDirty) {
								final int prime = PRIME;
								int result = DEFAULT_HASHCODE;

								result = prime
										* result
										+ ((this.PATIENT_IDE == null) ? 0
												: this.PATIENT_IDE.hashCode());

								result = prime
										* result
										+ ((this.PATIENT_IDE_SOURCE == null) ? 0
												: this.PATIENT_IDE_SOURCE
														.hashCode());

								this.hashCode = result;
								this.hashCodeDirty = false;
							}
							return this.hashCode;
						}

						@Override
						public boolean equals(Object obj) {
							if (this == obj)
								return true;
							if (obj == null)
								return false;
							if (getClass() != obj.getClass())
								return false;
							final KeyStruct_tUniqRow_10 other = (KeyStruct_tUniqRow_10) obj;

							if (this.PATIENT_IDE == null) {
								if (other.PATIENT_IDE != null)
									return false;
							} else if (!this.PATIENT_IDE
									.equals(other.PATIENT_IDE))
								return false;

							if (this.PATIENT_IDE_SOURCE == null) {
								if (other.PATIENT_IDE_SOURCE != null)
									return false;
							} else if (!this.PATIENT_IDE_SOURCE
									.equals(other.PATIENT_IDE_SOURCE))
								return false;

							return true;
						}

					}

					int nb_uniques_tUniqRow_10 = 0;
					int nb_duplicates_tUniqRow_10 = 0;
					KeyStruct_tUniqRow_10 finder_tUniqRow_10 = new KeyStruct_tUniqRow_10();
					java.util.Set<KeyStruct_tUniqRow_10> keystUniqRow_10 = new java.util.HashSet<KeyStruct_tUniqRow_10>();

					/**
					 * [tUniqRow_10 begin ] stop
					 */

					/**
					 * [tFileInputDelimited_26 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_26", false);
					start_Hash.put("tFileInputDelimited_26",
							System.currentTimeMillis());
					currentComponent = "tFileInputDelimited_26";

					int tos_count_tFileInputDelimited_26 = 0;

					int nb_line_tFileInputDelimited_26 = 0;
					int footer_tFileInputDelimited_26 = 0;
					int totalLinetFileInputDelimited_26 = 0;
					int limittFileInputDelimited_26 = -1;
					int lastLinetFileInputDelimited_26 = -1;

					char fieldSeparator_tFileInputDelimited_26[] = null;

					// support passing value (property: Field Separator) by
					// 'context.fs' or 'globalMap.get("fs")'.
					if (((String) "\t").length() > 0) {
						fieldSeparator_tFileInputDelimited_26 = ((String) "\t")
								.toCharArray();
					} else {
						throw new IllegalArgumentException(
								"Field Separator must be assigned a char.");
					}

					char rowSeparator_tFileInputDelimited_26[] = null;

					// support passing value (property: Row Separator) by
					// 'context.rs' or 'globalMap.get("rs")'.
					if (((String) "\n").length() > 0) {
						rowSeparator_tFileInputDelimited_26 = ((String) "\n")
								.toCharArray();
					} else {
						throw new IllegalArgumentException(
								"Row Separator must be assigned a char.");
					}

					Object filename_tFileInputDelimited_26 = /**
					 * Start field
					 * tFileInputDelimited_26:FILENAME
					 */
					((String) globalMap.get("tCreateTemporaryFile_11_FILEPATH"))/**
					 * 
					 * End field tFileInputDelimited_26:FILENAME
					 */
					;
					com.talend.csv.CSVReader csvReadertFileInputDelimited_26 = null;

					try {

						String[] rowtFileInputDelimited_26 = null;
						int currentLinetFileInputDelimited_26 = 0;
						int outputLinetFileInputDelimited_26 = 0;
						try {// TD110 begin
							if (filename_tFileInputDelimited_26 instanceof java.io.InputStream) {

								int footer_value_tFileInputDelimited_26 = 0;
								if (footer_value_tFileInputDelimited_26 > 0) {
									throw new java.lang.Exception(
											"When the input source is a stream,footer shouldn't be bigger than 0.");
								}

								csvReadertFileInputDelimited_26 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_26,
										fieldSeparator_tFileInputDelimited_26[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_26 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_26)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_26[0]);
							}

							csvReadertFileInputDelimited_26
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_26[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_26[0] != '\r'))
								csvReadertFileInputDelimited_26
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_26[0]);

							csvReadertFileInputDelimited_26.setQuoteChar('"');

							csvReadertFileInputDelimited_26
									.setEscapeChar(csvReadertFileInputDelimited_26
											.getQuoteChar());

							if (footer_tFileInputDelimited_26 > 0) {
								for (totalLinetFileInputDelimited_26 = 0; totalLinetFileInputDelimited_26 < 0; totalLinetFileInputDelimited_26++) {
									csvReadertFileInputDelimited_26.readNext();
								}
								csvReadertFileInputDelimited_26
										.setSkipEmptyRecords(true);
								while (csvReadertFileInputDelimited_26
										.readNext()) {

									rowtFileInputDelimited_26 = csvReadertFileInputDelimited_26
											.getValues();
									if (!(rowtFileInputDelimited_26.length == 1 && ("\015")
											.equals(rowtFileInputDelimited_26[0]))) {// empty
																						// line
																						// when
																						// row
																						// separator
																						// is
																						// '\n'

										totalLinetFileInputDelimited_26++;

									}

								}
								int lastLineTemptFileInputDelimited_26 = totalLinetFileInputDelimited_26
										- footer_tFileInputDelimited_26 < 0 ? 0
										: totalLinetFileInputDelimited_26
												- footer_tFileInputDelimited_26;
								if (lastLinetFileInputDelimited_26 > 0) {
									lastLinetFileInputDelimited_26 = lastLinetFileInputDelimited_26 < lastLineTemptFileInputDelimited_26 ? lastLinetFileInputDelimited_26
											: lastLineTemptFileInputDelimited_26;
								} else {
									lastLinetFileInputDelimited_26 = lastLineTemptFileInputDelimited_26;
								}

								csvReadertFileInputDelimited_26.close();
								if (filename_tFileInputDelimited_26 instanceof java.io.InputStream) {
									csvReadertFileInputDelimited_26 = new com.talend.csv.CSVReader(
											(java.io.InputStream) filename_tFileInputDelimited_26,
											fieldSeparator_tFileInputDelimited_26[0],
											"UTF-8");
								} else {
									csvReadertFileInputDelimited_26 = new com.talend.csv.CSVReader(
											new java.io.BufferedReader(
													new java.io.InputStreamReader(
															new java.io.FileInputStream(
																	String.valueOf(filename_tFileInputDelimited_26)),
															"UTF-8")),
											fieldSeparator_tFileInputDelimited_26[0]);
								}
								csvReadertFileInputDelimited_26
										.setTrimWhitespace(false);
								if ((rowSeparator_tFileInputDelimited_26[0] != '\n')
										&& (rowSeparator_tFileInputDelimited_26[0] != '\r'))
									csvReadertFileInputDelimited_26
											.setLineEnd(""
													+ rowSeparator_tFileInputDelimited_26[0]);

								csvReadertFileInputDelimited_26
										.setQuoteChar('"');

								csvReadertFileInputDelimited_26
										.setEscapeChar(csvReadertFileInputDelimited_26
												.getQuoteChar());

							}

							if (limittFileInputDelimited_26 != 0) {
								for (currentLinetFileInputDelimited_26 = 0; currentLinetFileInputDelimited_26 < 0; currentLinetFileInputDelimited_26++) {
									csvReadertFileInputDelimited_26.readNext();
								}
							}
							csvReadertFileInputDelimited_26
									.setSkipEmptyRecords(true);

						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());

						}// TD110 end

						while (limittFileInputDelimited_26 != 0
								&& csvReadertFileInputDelimited_26 != null
								&& csvReadertFileInputDelimited_26.readNext()) {

							rowtFileInputDelimited_26 = csvReadertFileInputDelimited_26
									.getValues();

							if (rowtFileInputDelimited_26.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_26[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
								continue;
							}

							currentLinetFileInputDelimited_26++;

							if (lastLinetFileInputDelimited_26 > -1
									&& currentLinetFileInputDelimited_26 > lastLinetFileInputDelimited_26) {
								break;
							}
							outputLinetFileInputDelimited_26++;
							if (limittFileInputDelimited_26 > 0
									&& outputLinetFileInputDelimited_26 > limittFileInputDelimited_26) {
								break;
							}

							row40 = null;

							boolean whetherReject_tFileInputDelimited_26 = false;
							row40 = new row40Struct();
							try {

								if (rowtFileInputDelimited_26.length == 1
										&& ("\015")
												.equals(rowtFileInputDelimited_26[0])) {// empty
																						// line
																						// when
																						// row
																						// separator
																						// is
																						// '\n'

									row40.PATIENT_IDE = null;

									row40.PATIENT_IDE_SOURCE = null;

									row40.PATIENT_NUM = null;

									row40.PATIENT_IDE_STATUS = null;

									row40.UPLOAD_DATE = null;

									row40.UPDATE_DATE = null;

									row40.DOWNLOAD_DATE = null;

									row40.IMPORT_DATE = null;

									row40.SOURCESYSTEM_CD = null;

									row40.UPLOAD_ID = null;

								} else {

									int columnIndexWithD_tFileInputDelimited_26 = 0; // Column
																						// Index

									columnIndexWithD_tFileInputDelimited_26 = 0;

									if (columnIndexWithD_tFileInputDelimited_26 < rowtFileInputDelimited_26.length) {

										row40.PATIENT_IDE = rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26];

									} else {
										row40.PATIENT_IDE = null;
									}

									columnIndexWithD_tFileInputDelimited_26 = 1;

									if (columnIndexWithD_tFileInputDelimited_26 < rowtFileInputDelimited_26.length) {

										row40.PATIENT_IDE_SOURCE = rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26];

									} else {
										row40.PATIENT_IDE_SOURCE = null;
									}

									columnIndexWithD_tFileInputDelimited_26 = 2;

									if (columnIndexWithD_tFileInputDelimited_26 < rowtFileInputDelimited_26.length) {

										if (rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26]
												.length() > 0) {

											row40.PATIENT_NUM = ParserUtils
													.parseTo_BigDecimal(rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26]);

										} else {
											row40.PATIENT_NUM = null;
										}

									} else {
										row40.PATIENT_NUM = null;
									}

									columnIndexWithD_tFileInputDelimited_26 = 3;

									if (columnIndexWithD_tFileInputDelimited_26 < rowtFileInputDelimited_26.length) {

										row40.PATIENT_IDE_STATUS = rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26];

									} else {
										row40.PATIENT_IDE_STATUS = null;
									}

									columnIndexWithD_tFileInputDelimited_26 = 4;

									if (columnIndexWithD_tFileInputDelimited_26 < rowtFileInputDelimited_26.length) {

										if (rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26]
												.length() > 0) {

											row40.UPLOAD_DATE = ParserUtils
													.parseTo_Date(
															rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26],
															"dd-MM-yyyy");

										} else {
											row40.UPLOAD_DATE = null;
										}

									} else {
										row40.UPLOAD_DATE = null;
									}

									columnIndexWithD_tFileInputDelimited_26 = 5;

									if (columnIndexWithD_tFileInputDelimited_26 < rowtFileInputDelimited_26.length) {

										if (rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26]
												.length() > 0) {

											row40.UPDATE_DATE = ParserUtils
													.parseTo_Date(
															rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26],
															"dd-MM-yyyy");

										} else {
											row40.UPDATE_DATE = null;
										}

									} else {
										row40.UPDATE_DATE = null;
									}

									columnIndexWithD_tFileInputDelimited_26 = 6;

									if (columnIndexWithD_tFileInputDelimited_26 < rowtFileInputDelimited_26.length) {

										if (rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26]
												.length() > 0) {

											row40.DOWNLOAD_DATE = ParserUtils
													.parseTo_Date(
															rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26],
															"dd-MM-yyyy");

										} else {
											row40.DOWNLOAD_DATE = null;
										}

									} else {
										row40.DOWNLOAD_DATE = null;
									}

									columnIndexWithD_tFileInputDelimited_26 = 7;

									if (columnIndexWithD_tFileInputDelimited_26 < rowtFileInputDelimited_26.length) {

										if (rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26]
												.length() > 0) {

											row40.IMPORT_DATE = ParserUtils
													.parseTo_Date(
															rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26],
															"dd-MM-yyyy");

										} else {
											row40.IMPORT_DATE = null;
										}

									} else {
										row40.IMPORT_DATE = null;
									}

									columnIndexWithD_tFileInputDelimited_26 = 8;

									if (columnIndexWithD_tFileInputDelimited_26 < rowtFileInputDelimited_26.length) {

										row40.SOURCESYSTEM_CD = rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26];

									} else {
										row40.SOURCESYSTEM_CD = null;
									}

									columnIndexWithD_tFileInputDelimited_26 = 9;

									if (columnIndexWithD_tFileInputDelimited_26 < rowtFileInputDelimited_26.length) {

										row40.UPLOAD_ID = rowtFileInputDelimited_26[columnIndexWithD_tFileInputDelimited_26];

									} else {
										row40.UPLOAD_ID = null;
									}

								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputDelimited_26 = true;

								System.err.println(e.getMessage());
								row40 = null;

							}

							/**
							 * [tFileInputDelimited_26 begin ] stop
							 */
							/**
							 * [tFileInputDelimited_26 main ] start
							 */

							currentComponent = "tFileInputDelimited_26";

							tos_count_tFileInputDelimited_26++;

							/**
							 * [tFileInputDelimited_26 main ] stop
							 */
							// Start of branch "row40"
							if (row40 != null) {

								/**
								 * [tUniqRow_10 main ] start
								 */

								currentComponent = "tUniqRow_10";

								row42 = null;
								if (row40.PATIENT_IDE == null) {
									finder_tUniqRow_10.PATIENT_IDE = null;
								} else {
									finder_tUniqRow_10.PATIENT_IDE = row40.PATIENT_IDE
											.toLowerCase();
								}
								if (row40.PATIENT_IDE_SOURCE == null) {
									finder_tUniqRow_10.PATIENT_IDE_SOURCE = null;
								} else {
									finder_tUniqRow_10.PATIENT_IDE_SOURCE = row40.PATIENT_IDE_SOURCE
											.toLowerCase();
								}
								finder_tUniqRow_10.hashCodeDirty = true;
								if (!keystUniqRow_10
										.contains(finder_tUniqRow_10)) {
									KeyStruct_tUniqRow_10 new_tUniqRow_10 = new KeyStruct_tUniqRow_10();

									if (row40.PATIENT_IDE == null) {
										new_tUniqRow_10.PATIENT_IDE = null;
									} else {
										new_tUniqRow_10.PATIENT_IDE = row40.PATIENT_IDE
												.toLowerCase();
									}
									if (row40.PATIENT_IDE_SOURCE == null) {
										new_tUniqRow_10.PATIENT_IDE_SOURCE = null;
									} else {
										new_tUniqRow_10.PATIENT_IDE_SOURCE = row40.PATIENT_IDE_SOURCE
												.toLowerCase();
									}

									keystUniqRow_10.add(new_tUniqRow_10);
									if (row42 == null) {
										row42 = new row42Struct();
									}
									row42.PATIENT_IDE = row40.PATIENT_IDE;
									row42.PATIENT_IDE_SOURCE = row40.PATIENT_IDE_SOURCE;
									row42.PATIENT_NUM = row40.PATIENT_NUM;
									row42.PATIENT_IDE_STATUS = row40.PATIENT_IDE_STATUS;
									row42.UPLOAD_DATE = row40.UPLOAD_DATE;
									row42.UPDATE_DATE = row40.UPDATE_DATE;
									row42.DOWNLOAD_DATE = row40.DOWNLOAD_DATE;
									row42.IMPORT_DATE = row40.IMPORT_DATE;
									row42.SOURCESYSTEM_CD = row40.SOURCESYSTEM_CD;
									row42.UPLOAD_ID = row40.UPLOAD_ID;
									nb_uniques_tUniqRow_10++;
								} else {
									nb_duplicates_tUniqRow_10++;
								}

								tos_count_tUniqRow_10++;

								/**
								 * [tUniqRow_10 main ] stop
								 */
								// Start of branch "row42"
								if (row42 != null) {

									/**
									 * [tFileOutputDelimited_27 main ] start
									 */

									currentComponent = "tFileOutputDelimited_27";

									String[] rowtFileOutputDelimited_27 = new String[10];

									rowtFileOutputDelimited_27[0] = row42.PATIENT_IDE == null ? ""
											: row42.PATIENT_IDE;

									rowtFileOutputDelimited_27[1] = row42.PATIENT_IDE_SOURCE == null ? ""
											: row42.PATIENT_IDE_SOURCE;

									rowtFileOutputDelimited_27[2] = row42.PATIENT_NUM == null ? ""
											: row42.PATIENT_NUM.toPlainString();

									rowtFileOutputDelimited_27[3] = row42.PATIENT_IDE_STATUS == null ? ""
											: row42.PATIENT_IDE_STATUS;

									rowtFileOutputDelimited_27[4] = row42.UPLOAD_DATE == null ? ""
											: FormatterUtils.format_Date(
													row42.UPLOAD_DATE,
													"dd-MM-yyyy");

									rowtFileOutputDelimited_27[5] = row42.UPDATE_DATE == null ? ""
											: FormatterUtils.format_Date(
													row42.UPDATE_DATE,
													"dd-MM-yyyy");

									rowtFileOutputDelimited_27[6] = row42.DOWNLOAD_DATE == null ? ""
											: FormatterUtils.format_Date(
													row42.DOWNLOAD_DATE,
													"dd-MM-yyyy");

									rowtFileOutputDelimited_27[7] = row42.IMPORT_DATE == null ? ""
											: FormatterUtils.format_Date(
													row42.IMPORT_DATE,
													"dd-MM-yyyy");

									rowtFileOutputDelimited_27[8] = row42.SOURCESYSTEM_CD == null ? ""
											: row42.SOURCESYSTEM_CD;

									rowtFileOutputDelimited_27[9] = row42.UPLOAD_ID == null ? ""
											: row42.UPLOAD_ID;

									nb_line_tFileOutputDelimited_27++;
									CsvWritertFileOutputDelimited_27
											.writeNext(rowtFileOutputDelimited_27);

									tos_count_tFileOutputDelimited_27++;

									/**
									 * [tFileOutputDelimited_27 main ] stop
									 */

								} // End of branch "row42"

							} // End of branch "row40"

							/**
							 * [tFileInputDelimited_26 end ] start
							 */

							currentComponent = "tFileInputDelimited_26";

							nb_line_tFileInputDelimited_26++;
						}

					} finally {
						if (!(filename_tFileInputDelimited_26 instanceof java.io.InputStream)) {
							if (csvReadertFileInputDelimited_26 != null) {
								csvReadertFileInputDelimited_26.close();
							}
						}
						if (csvReadertFileInputDelimited_26 != null) {
							globalMap.put("tFileInputDelimited_26_NB_LINE",
									nb_line_tFileInputDelimited_26);
						}
					}

					ok_Hash.put("tFileInputDelimited_26", true);
					end_Hash.put("tFileInputDelimited_26",
							System.currentTimeMillis());

					/**
					 * [tFileInputDelimited_26 end ] stop
					 */

					/**
					 * [tUniqRow_10 end ] start
					 */

					currentComponent = "tUniqRow_10";

					globalMap.put("tUniqRow_10_NB_UNIQUES",
							nb_uniques_tUniqRow_10);
					globalMap.put("tUniqRow_10_NB_DUPLICATES",
							nb_duplicates_tUniqRow_10);

					ok_Hash.put("tUniqRow_10", true);
					end_Hash.put("tUniqRow_10", System.currentTimeMillis());

					/**
					 * [tUniqRow_10 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_27 end ] start
					 */

					currentComponent = "tFileOutputDelimited_27";

				} finally {

					if (CsvWritertFileOutputDelimited_27 != null) {
						CsvWritertFileOutputDelimited_27.close();
					}
					globalMap.put("tFileOutputDelimited_27_NB_LINE",
							nb_line_tFileOutputDelimited_27);
				} // finally

				ok_Hash.put("tFileOutputDelimited_27", true);
				end_Hash.put("tFileOutputDelimited_27",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_27 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_26:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputDelimited_18Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_26_SUBPROCESS_STATE", 1);
	}

	public static class row41Struct implements
			routines.system.IPersistableRow<row41Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String VITAL_STATUS_CD;

		public String getVITAL_STATUS_CD() {
			return this.VITAL_STATUS_CD;
		}

		public String BIRTH_DATE;

		public String getBIRTH_DATE() {
			return this.BIRTH_DATE;
		}

		public String DEATH_DATE;

		public String getDEATH_DATE() {
			return this.DEATH_DATE;
		}

		public String SEX_CD;

		public String getSEX_CD() {
			return this.SEX_CD;
		}

		public String AGE_IN_YEARS_NUM;

		public String getAGE_IN_YEARS_NUM() {
			return this.AGE_IN_YEARS_NUM;
		}

		public String LANGUAGE_CD;

		public String getLANGUAGE_CD() {
			return this.LANGUAGE_CD;
		}

		public String RACE_CD;

		public String getRACE_CD() {
			return this.RACE_CD;
		}

		public String MARITAL_STATUS_CD;

		public String getMARITAL_STATUS_CD() {
			return this.MARITAL_STATUS_CD;
		}

		public String RELIGION_CD;

		public String getRELIGION_CD() {
			return this.RELIGION_CD;
		}

		public String ZIP_CD;

		public String getZIP_CD() {
			return this.ZIP_CD;
		}

		public String STATECITYZIP_PATH;

		public String getSTATECITYZIP_PATH() {
			return this.STATECITYZIP_PATH;
		}

		public String INCOME_CD;

		public String getINCOME_CD() {
			return this.INCOME_CD;
		}

		public String PATIENT_BLOB;

		public String getPATIENT_BLOB() {
			return this.PATIENT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.VITAL_STATUS_CD = readString(dis);

					this.BIRTH_DATE = readString(dis);

					this.DEATH_DATE = readString(dis);

					this.SEX_CD = readString(dis);

					this.AGE_IN_YEARS_NUM = readString(dis);

					this.LANGUAGE_CD = readString(dis);

					this.RACE_CD = readString(dis);

					this.MARITAL_STATUS_CD = readString(dis);

					this.RELIGION_CD = readString(dis);

					this.ZIP_CD = readString(dis);

					this.STATECITYZIP_PATH = readString(dis);

					this.INCOME_CD = readString(dis);

					this.PATIENT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.VITAL_STATUS_CD, dos);

				// String

				writeString(this.BIRTH_DATE, dos);

				// String

				writeString(this.DEATH_DATE, dos);

				// String

				writeString(this.SEX_CD, dos);

				// String

				writeString(this.AGE_IN_YEARS_NUM, dos);

				// String

				writeString(this.LANGUAGE_CD, dos);

				// String

				writeString(this.RACE_CD, dos);

				// String

				writeString(this.MARITAL_STATUS_CD, dos);

				// String

				writeString(this.RELIGION_CD, dos);

				// String

				writeString(this.ZIP_CD, dos);

				// String

				writeString(this.STATECITYZIP_PATH, dos);

				// String

				writeString(this.INCOME_CD, dos);

				// String

				writeString(this.PATIENT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",VITAL_STATUS_CD=" + VITAL_STATUS_CD);
			sb.append(",BIRTH_DATE=" + BIRTH_DATE);
			sb.append(",DEATH_DATE=" + DEATH_DATE);
			sb.append(",SEX_CD=" + SEX_CD);
			sb.append(",AGE_IN_YEARS_NUM=" + AGE_IN_YEARS_NUM);
			sb.append(",LANGUAGE_CD=" + LANGUAGE_CD);
			sb.append(",RACE_CD=" + RACE_CD);
			sb.append(",MARITAL_STATUS_CD=" + MARITAL_STATUS_CD);
			sb.append(",RELIGION_CD=" + RELIGION_CD);
			sb.append(",ZIP_CD=" + ZIP_CD);
			sb.append(",STATECITYZIP_PATH=" + STATECITYZIP_PATH);
			sb.append(",INCOME_CD=" + INCOME_CD);
			sb.append(",PATIENT_BLOB=" + PATIENT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row41Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row39Struct implements
			routines.system.IPersistableRow<row39Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String VITAL_STATUS_CD;

		public String getVITAL_STATUS_CD() {
			return this.VITAL_STATUS_CD;
		}

		public String BIRTH_DATE;

		public String getBIRTH_DATE() {
			return this.BIRTH_DATE;
		}

		public String DEATH_DATE;

		public String getDEATH_DATE() {
			return this.DEATH_DATE;
		}

		public String SEX_CD;

		public String getSEX_CD() {
			return this.SEX_CD;
		}

		public String AGE_IN_YEARS_NUM;

		public String getAGE_IN_YEARS_NUM() {
			return this.AGE_IN_YEARS_NUM;
		}

		public String LANGUAGE_CD;

		public String getLANGUAGE_CD() {
			return this.LANGUAGE_CD;
		}

		public String RACE_CD;

		public String getRACE_CD() {
			return this.RACE_CD;
		}

		public String MARITAL_STATUS_CD;

		public String getMARITAL_STATUS_CD() {
			return this.MARITAL_STATUS_CD;
		}

		public String RELIGION_CD;

		public String getRELIGION_CD() {
			return this.RELIGION_CD;
		}

		public String ZIP_CD;

		public String getZIP_CD() {
			return this.ZIP_CD;
		}

		public String STATECITYZIP_PATH;

		public String getSTATECITYZIP_PATH() {
			return this.STATECITYZIP_PATH;
		}

		public String INCOME_CD;

		public String getINCOME_CD() {
			return this.INCOME_CD;
		}

		public String PATIENT_BLOB;

		public String getPATIENT_BLOB() {
			return this.PATIENT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.VITAL_STATUS_CD = readString(dis);

					this.BIRTH_DATE = readString(dis);

					this.DEATH_DATE = readString(dis);

					this.SEX_CD = readString(dis);

					this.AGE_IN_YEARS_NUM = readString(dis);

					this.LANGUAGE_CD = readString(dis);

					this.RACE_CD = readString(dis);

					this.MARITAL_STATUS_CD = readString(dis);

					this.RELIGION_CD = readString(dis);

					this.ZIP_CD = readString(dis);

					this.STATECITYZIP_PATH = readString(dis);

					this.INCOME_CD = readString(dis);

					this.PATIENT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.VITAL_STATUS_CD, dos);

				// String

				writeString(this.BIRTH_DATE, dos);

				// String

				writeString(this.DEATH_DATE, dos);

				// String

				writeString(this.SEX_CD, dos);

				// String

				writeString(this.AGE_IN_YEARS_NUM, dos);

				// String

				writeString(this.LANGUAGE_CD, dos);

				// String

				writeString(this.RACE_CD, dos);

				// String

				writeString(this.MARITAL_STATUS_CD, dos);

				// String

				writeString(this.RELIGION_CD, dos);

				// String

				writeString(this.ZIP_CD, dos);

				// String

				writeString(this.STATECITYZIP_PATH, dos);

				// String

				writeString(this.INCOME_CD, dos);

				// String

				writeString(this.PATIENT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",VITAL_STATUS_CD=" + VITAL_STATUS_CD);
			sb.append(",BIRTH_DATE=" + BIRTH_DATE);
			sb.append(",DEATH_DATE=" + DEATH_DATE);
			sb.append(",SEX_CD=" + SEX_CD);
			sb.append(",AGE_IN_YEARS_NUM=" + AGE_IN_YEARS_NUM);
			sb.append(",LANGUAGE_CD=" + LANGUAGE_CD);
			sb.append(",RACE_CD=" + RACE_CD);
			sb.append(",MARITAL_STATUS_CD=" + MARITAL_STATUS_CD);
			sb.append(",RELIGION_CD=" + RELIGION_CD);
			sb.append(",ZIP_CD=" + ZIP_CD);
			sb.append(",STATECITYZIP_PATH=" + STATECITYZIP_PATH);
			sb.append(",INCOME_CD=" + INCOME_CD);
			sb.append(",PATIENT_BLOB=" + PATIENT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row39Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_18Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_18_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row39Struct row39 = new row39Struct();
				row41Struct row41 = new row41Struct();

				/**
				 * [tFileOutputDelimited_28 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_28", false);
				start_Hash.put("tFileOutputDelimited_28",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_28";

				int tos_count_tFileOutputDelimited_28 = 0;

				String fileName_tFileOutputDelimited_28 = "";
				fileName_tFileOutputDelimited_28 = (new java.io.File(
						context.folderMain + context.folderOutput
								+ "/patient_dimension.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_28 = null;
				String extension_tFileOutputDelimited_28 = null;
				String directory_tFileOutputDelimited_28 = null;
				if ((fileName_tFileOutputDelimited_28.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_28.lastIndexOf(".") < fileName_tFileOutputDelimited_28
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_28 = fileName_tFileOutputDelimited_28;
						extension_tFileOutputDelimited_28 = "";
					} else {
						fullName_tFileOutputDelimited_28 = fileName_tFileOutputDelimited_28
								.substring(0, fileName_tFileOutputDelimited_28
										.lastIndexOf("."));
						extension_tFileOutputDelimited_28 = fileName_tFileOutputDelimited_28
								.substring(fileName_tFileOutputDelimited_28
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_28 = fileName_tFileOutputDelimited_28
							.substring(0, fileName_tFileOutputDelimited_28
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_28.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_28 = fileName_tFileOutputDelimited_28
								.substring(0, fileName_tFileOutputDelimited_28
										.lastIndexOf("."));
						extension_tFileOutputDelimited_28 = fileName_tFileOutputDelimited_28
								.substring(fileName_tFileOutputDelimited_28
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_28 = fileName_tFileOutputDelimited_28;
						extension_tFileOutputDelimited_28 = "";
					}
					directory_tFileOutputDelimited_28 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_28 = true;
				java.io.File filetFileOutputDelimited_28 = new java.io.File(
						fileName_tFileOutputDelimited_28);
				globalMap.put("tFileOutputDelimited_28_FILE_NAME",
						fileName_tFileOutputDelimited_28);

				String[] headColutFileOutputDelimited_28 = new String[19];
				class CSVBasicSet_tFileOutputDelimited_28 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_28[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_28 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_28[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_28[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_28 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_28[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_28[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_28 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_28[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_28 = 0;
				int splitEvery_tFileOutputDelimited_28 = 1000;
				int splitedFileNo_tFileOutputDelimited_28 = 0;
				int currentRow_tFileOutputDelimited_28 = 0;

				CSVBasicSet_tFileOutputDelimited_28 csvSettings_tFileOutputDelimited_28 = new CSVBasicSet_tFileOutputDelimited_28();
				csvSettings_tFileOutputDelimited_28.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_28.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_28.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_28 != null
						&& directory_tFileOutputDelimited_28.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_28 = new java.io.File(
							directory_tFileOutputDelimited_28);
					if (!dir_tFileOutputDelimited_28.exists()) {
						dir_tFileOutputDelimited_28.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_28 = null;
				try {
					CsvWritertFileOutputDelimited_28 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_28,
													false), "UTF-8")));
					CsvWritertFileOutputDelimited_28
							.setSeparator(csvSettings_tFileOutputDelimited_28
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_28
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_28
									.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_28
									.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_28.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_28
										.getRowDelim());
					}

					if (filetFileOutputDelimited_28.length() == 0) {

						headColutFileOutputDelimited_28[0] = "PATIENT_NUM";

						headColutFileOutputDelimited_28[1] = "VITAL_STATUS_CD";

						headColutFileOutputDelimited_28[2] = "BIRTH_DATE";

						headColutFileOutputDelimited_28[3] = "DEATH_DATE";

						headColutFileOutputDelimited_28[4] = "SEX_CD";

						headColutFileOutputDelimited_28[5] = "AGE_IN_YEARS_NUM";

						headColutFileOutputDelimited_28[6] = "LANGUAGE_CD";

						headColutFileOutputDelimited_28[7] = "RACE_CD";

						headColutFileOutputDelimited_28[8] = "MARITAL_STATUS_CD";

						headColutFileOutputDelimited_28[9] = "RELIGION_CD";

						headColutFileOutputDelimited_28[10] = "ZIP_CD";

						headColutFileOutputDelimited_28[11] = "STATECITYZIP_PATH";

						headColutFileOutputDelimited_28[12] = "INCOME_CD";

						headColutFileOutputDelimited_28[13] = "PATIENT_BLOB";

						headColutFileOutputDelimited_28[14] = "UPDATE_DATE";

						headColutFileOutputDelimited_28[15] = "DOWNLOAD_DATE";

						headColutFileOutputDelimited_28[16] = "IMPORT_DATE";

						headColutFileOutputDelimited_28[17] = "SOURCESYSTEM_CD";

						headColutFileOutputDelimited_28[18] = "UPLOAD_ID";

						CsvWritertFileOutputDelimited_28
								.writeNext(headColutFileOutputDelimited_28);
						CsvWritertFileOutputDelimited_28.flush();

					}

					CsvWritertFileOutputDelimited_28
							.setEscapeChar(csvSettings_tFileOutputDelimited_28
									.getEscapeChar());
					CsvWritertFileOutputDelimited_28
							.setQuoteChar(csvSettings_tFileOutputDelimited_28
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_28
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_28 begin ] stop
					 */

					/**
					 * [tUniqRow_9 begin ] start
					 */

					ok_Hash.put("tUniqRow_9", false);
					start_Hash.put("tUniqRow_9", System.currentTimeMillis());
					currentComponent = "tUniqRow_9";

					int tos_count_tUniqRow_9 = 0;

					class KeyStruct_tUniqRow_9 {

						private static final int DEFAULT_HASHCODE = 1;
						private static final int PRIME = 31;
						private int hashCode = DEFAULT_HASHCODE;
						public boolean hashCodeDirty = true;

						BigDecimal PATIENT_NUM;

						@Override
						public int hashCode() {
							if (this.hashCodeDirty) {
								final int prime = PRIME;
								int result = DEFAULT_HASHCODE;

								result = prime
										* result
										+ ((this.PATIENT_NUM == null) ? 0
												: this.PATIENT_NUM.hashCode());

								this.hashCode = result;
								this.hashCodeDirty = false;
							}
							return this.hashCode;
						}

						@Override
						public boolean equals(Object obj) {
							if (this == obj)
								return true;
							if (obj == null)
								return false;
							if (getClass() != obj.getClass())
								return false;
							final KeyStruct_tUniqRow_9 other = (KeyStruct_tUniqRow_9) obj;

							if (this.PATIENT_NUM == null) {
								if (other.PATIENT_NUM != null)
									return false;
							} else if (!this.PATIENT_NUM
									.equals(other.PATIENT_NUM))
								return false;

							return true;
						}

					}

					int nb_uniques_tUniqRow_9 = 0;
					int nb_duplicates_tUniqRow_9 = 0;
					KeyStruct_tUniqRow_9 finder_tUniqRow_9 = new KeyStruct_tUniqRow_9();
					java.util.Set<KeyStruct_tUniqRow_9> keystUniqRow_9 = new java.util.HashSet<KeyStruct_tUniqRow_9>();

					/**
					 * [tUniqRow_9 begin ] stop
					 */

					/**
					 * [tFileInputDelimited_18 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_18", false);
					start_Hash.put("tFileInputDelimited_18",
							System.currentTimeMillis());
					currentComponent = "tFileInputDelimited_18";

					int tos_count_tFileInputDelimited_18 = 0;

					int nb_line_tFileInputDelimited_18 = 0;
					int footer_tFileInputDelimited_18 = 0;
					int totalLinetFileInputDelimited_18 = 0;
					int limittFileInputDelimited_18 = -1;
					int lastLinetFileInputDelimited_18 = -1;

					char fieldSeparator_tFileInputDelimited_18[] = null;

					// support passing value (property: Field Separator) by
					// 'context.fs' or 'globalMap.get("fs")'.
					if (((String) "\t").length() > 0) {
						fieldSeparator_tFileInputDelimited_18 = ((String) "\t")
								.toCharArray();
					} else {
						throw new IllegalArgumentException(
								"Field Separator must be assigned a char.");
					}

					char rowSeparator_tFileInputDelimited_18[] = null;

					// support passing value (property: Row Separator) by
					// 'context.rs' or 'globalMap.get("rs")'.
					if (((String) "\n").length() > 0) {
						rowSeparator_tFileInputDelimited_18 = ((String) "\n")
								.toCharArray();
					} else {
						throw new IllegalArgumentException(
								"Row Separator must be assigned a char.");
					}

					Object filename_tFileInputDelimited_18 = /**
					 * Start field
					 * tFileInputDelimited_18:FILENAME
					 */
					((String) globalMap.get("tCreateTemporaryFile_12_FILEPATH"))/**
					 * 
					 * End field tFileInputDelimited_18:FILENAME
					 */
					;
					com.talend.csv.CSVReader csvReadertFileInputDelimited_18 = null;

					try {

						String[] rowtFileInputDelimited_18 = null;
						int currentLinetFileInputDelimited_18 = 0;
						int outputLinetFileInputDelimited_18 = 0;
						try {// TD110 begin
							if (filename_tFileInputDelimited_18 instanceof java.io.InputStream) {

								int footer_value_tFileInputDelimited_18 = 0;
								if (footer_value_tFileInputDelimited_18 > 0) {
									throw new java.lang.Exception(
											"When the input source is a stream,footer shouldn't be bigger than 0.");
								}

								csvReadertFileInputDelimited_18 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_18,
										fieldSeparator_tFileInputDelimited_18[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_18 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_18)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_18[0]);
							}

							csvReadertFileInputDelimited_18
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_18[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_18[0] != '\r'))
								csvReadertFileInputDelimited_18
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_18[0]);

							csvReadertFileInputDelimited_18.setQuoteChar('"');

							csvReadertFileInputDelimited_18
									.setEscapeChar(csvReadertFileInputDelimited_18
											.getQuoteChar());

							if (footer_tFileInputDelimited_18 > 0) {
								for (totalLinetFileInputDelimited_18 = 0; totalLinetFileInputDelimited_18 < 0; totalLinetFileInputDelimited_18++) {
									csvReadertFileInputDelimited_18.readNext();
								}
								csvReadertFileInputDelimited_18
										.setSkipEmptyRecords(true);
								while (csvReadertFileInputDelimited_18
										.readNext()) {

									rowtFileInputDelimited_18 = csvReadertFileInputDelimited_18
											.getValues();
									if (!(rowtFileInputDelimited_18.length == 1 && ("\015")
											.equals(rowtFileInputDelimited_18[0]))) {// empty
																						// line
																						// when
																						// row
																						// separator
																						// is
																						// '\n'

										totalLinetFileInputDelimited_18++;

									}

								}
								int lastLineTemptFileInputDelimited_18 = totalLinetFileInputDelimited_18
										- footer_tFileInputDelimited_18 < 0 ? 0
										: totalLinetFileInputDelimited_18
												- footer_tFileInputDelimited_18;
								if (lastLinetFileInputDelimited_18 > 0) {
									lastLinetFileInputDelimited_18 = lastLinetFileInputDelimited_18 < lastLineTemptFileInputDelimited_18 ? lastLinetFileInputDelimited_18
											: lastLineTemptFileInputDelimited_18;
								} else {
									lastLinetFileInputDelimited_18 = lastLineTemptFileInputDelimited_18;
								}

								csvReadertFileInputDelimited_18.close();
								if (filename_tFileInputDelimited_18 instanceof java.io.InputStream) {
									csvReadertFileInputDelimited_18 = new com.talend.csv.CSVReader(
											(java.io.InputStream) filename_tFileInputDelimited_18,
											fieldSeparator_tFileInputDelimited_18[0],
											"UTF-8");
								} else {
									csvReadertFileInputDelimited_18 = new com.talend.csv.CSVReader(
											new java.io.BufferedReader(
													new java.io.InputStreamReader(
															new java.io.FileInputStream(
																	String.valueOf(filename_tFileInputDelimited_18)),
															"UTF-8")),
											fieldSeparator_tFileInputDelimited_18[0]);
								}
								csvReadertFileInputDelimited_18
										.setTrimWhitespace(false);
								if ((rowSeparator_tFileInputDelimited_18[0] != '\n')
										&& (rowSeparator_tFileInputDelimited_18[0] != '\r'))
									csvReadertFileInputDelimited_18
											.setLineEnd(""
													+ rowSeparator_tFileInputDelimited_18[0]);

								csvReadertFileInputDelimited_18
										.setQuoteChar('"');

								csvReadertFileInputDelimited_18
										.setEscapeChar(csvReadertFileInputDelimited_18
												.getQuoteChar());

							}

							if (limittFileInputDelimited_18 != 0) {
								for (currentLinetFileInputDelimited_18 = 0; currentLinetFileInputDelimited_18 < 0; currentLinetFileInputDelimited_18++) {
									csvReadertFileInputDelimited_18.readNext();
								}
							}
							csvReadertFileInputDelimited_18
									.setSkipEmptyRecords(true);

						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());

						}// TD110 end

						while (limittFileInputDelimited_18 != 0
								&& csvReadertFileInputDelimited_18 != null
								&& csvReadertFileInputDelimited_18.readNext()) {

							rowtFileInputDelimited_18 = csvReadertFileInputDelimited_18
									.getValues();

							if (rowtFileInputDelimited_18.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_18[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
								continue;
							}

							currentLinetFileInputDelimited_18++;

							if (lastLinetFileInputDelimited_18 > -1
									&& currentLinetFileInputDelimited_18 > lastLinetFileInputDelimited_18) {
								break;
							}
							outputLinetFileInputDelimited_18++;
							if (limittFileInputDelimited_18 > 0
									&& outputLinetFileInputDelimited_18 > limittFileInputDelimited_18) {
								break;
							}

							row39 = null;

							boolean whetherReject_tFileInputDelimited_18 = false;
							row39 = new row39Struct();
							try {

								if (rowtFileInputDelimited_18.length == 1
										&& ("\015")
												.equals(rowtFileInputDelimited_18[0])) {// empty
																						// line
																						// when
																						// row
																						// separator
																						// is
																						// '\n'

									row39.PATIENT_NUM = null;

									row39.VITAL_STATUS_CD = null;

									row39.BIRTH_DATE = null;

									row39.DEATH_DATE = null;

									row39.SEX_CD = null;

									row39.AGE_IN_YEARS_NUM = null;

									row39.LANGUAGE_CD = null;

									row39.RACE_CD = null;

									row39.MARITAL_STATUS_CD = null;

									row39.RELIGION_CD = null;

									row39.ZIP_CD = null;

									row39.STATECITYZIP_PATH = null;

									row39.INCOME_CD = null;

									row39.PATIENT_BLOB = null;

									row39.UPDATE_DATE = null;

									row39.DOWNLOAD_DATE = null;

									row39.IMPORT_DATE = null;

									row39.SOURCESYSTEM_CD = null;

									row39.UPLOAD_ID = null;

								} else {

									int columnIndexWithD_tFileInputDelimited_18 = 0; // Column
																						// Index

									columnIndexWithD_tFileInputDelimited_18 = 0;

									if (columnIndexWithD_tFileInputDelimited_18 < rowtFileInputDelimited_18.length) {

										if (rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18]
												.length() > 0) {

											row39.PATIENT_NUM = ParserUtils
													.parseTo_BigDecimal(rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18]);

										} else {
											row39.PATIENT_NUM = null;
										}

									} else {
										row39.PATIENT_NUM = null;
									}

									columnIndexWithD_tFileInputDelimited_18 = 1;

									if (columnIndexWithD_tFileInputDelimited_18 < rowtFileInputDelimited_18.length) {

										row39.VITAL_STATUS_CD = rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18];

									} else {
										row39.VITAL_STATUS_CD = null;
									}

									columnIndexWithD_tFileInputDelimited_18 = 2;

									if (columnIndexWithD_tFileInputDelimited_18 < rowtFileInputDelimited_18.length) {

										row39.BIRTH_DATE = rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18];

									} else {
										row39.BIRTH_DATE = null;
									}

									columnIndexWithD_tFileInputDelimited_18 = 3;

									if (columnIndexWithD_tFileInputDelimited_18 < rowtFileInputDelimited_18.length) {

										row39.DEATH_DATE = rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18];

									} else {
										row39.DEATH_DATE = null;
									}

									columnIndexWithD_tFileInputDelimited_18 = 4;

									if (columnIndexWithD_tFileInputDelimited_18 < rowtFileInputDelimited_18.length) {

										row39.SEX_CD = rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18];

									} else {
										row39.SEX_CD = null;
									}

									columnIndexWithD_tFileInputDelimited_18 = 5;

									if (columnIndexWithD_tFileInputDelimited_18 < rowtFileInputDelimited_18.length) {

										row39.AGE_IN_YEARS_NUM = rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18];

									} else {
										row39.AGE_IN_YEARS_NUM = null;
									}

									columnIndexWithD_tFileInputDelimited_18 = 6;

									if (columnIndexWithD_tFileInputDelimited_18 < rowtFileInputDelimited_18.length) {

										row39.LANGUAGE_CD = rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18];

									} else {
										row39.LANGUAGE_CD = null;
									}

									columnIndexWithD_tFileInputDelimited_18 = 7;

									if (columnIndexWithD_tFileInputDelimited_18 < rowtFileInputDelimited_18.length) {

										row39.RACE_CD = rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18];

									} else {
										row39.RACE_CD = null;
									}

									columnIndexWithD_tFileInputDelimited_18 = 8;

									if (columnIndexWithD_tFileInputDelimited_18 < rowtFileInputDelimited_18.length) {

										row39.MARITAL_STATUS_CD = rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18];

									} else {
										row39.MARITAL_STATUS_CD = null;
									}

									columnIndexWithD_tFileInputDelimited_18 = 9;

									if (columnIndexWithD_tFileInputDelimited_18 < rowtFileInputDelimited_18.length) {

										row39.RELIGION_CD = rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18];

									} else {
										row39.RELIGION_CD = null;
									}

									columnIndexWithD_tFileInputDelimited_18 = 10;

									if (columnIndexWithD_tFileInputDelimited_18 < rowtFileInputDelimited_18.length) {

										row39.ZIP_CD = rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18];

									} else {
										row39.ZIP_CD = null;
									}

									columnIndexWithD_tFileInputDelimited_18 = 11;

									if (columnIndexWithD_tFileInputDelimited_18 < rowtFileInputDelimited_18.length) {

										row39.STATECITYZIP_PATH = rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18];

									} else {
										row39.STATECITYZIP_PATH = null;
									}

									columnIndexWithD_tFileInputDelimited_18 = 12;

									if (columnIndexWithD_tFileInputDelimited_18 < rowtFileInputDelimited_18.length) {

										row39.INCOME_CD = rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18];

									} else {
										row39.INCOME_CD = null;
									}

									columnIndexWithD_tFileInputDelimited_18 = 13;

									if (columnIndexWithD_tFileInputDelimited_18 < rowtFileInputDelimited_18.length) {

										row39.PATIENT_BLOB = rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18];

									} else {
										row39.PATIENT_BLOB = null;
									}

									columnIndexWithD_tFileInputDelimited_18 = 14;

									if (columnIndexWithD_tFileInputDelimited_18 < rowtFileInputDelimited_18.length) {

										if (rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18]
												.length() > 0) {

											row39.UPDATE_DATE = ParserUtils
													.parseTo_Date(
															rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18],
															"dd-MM-yyyy");

										} else {
											row39.UPDATE_DATE = null;
										}

									} else {
										row39.UPDATE_DATE = null;
									}

									columnIndexWithD_tFileInputDelimited_18 = 15;

									if (columnIndexWithD_tFileInputDelimited_18 < rowtFileInputDelimited_18.length) {

										if (rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18]
												.length() > 0) {

											row39.DOWNLOAD_DATE = ParserUtils
													.parseTo_Date(
															rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18],
															"dd-MM-yyyy");

										} else {
											row39.DOWNLOAD_DATE = null;
										}

									} else {
										row39.DOWNLOAD_DATE = null;
									}

									columnIndexWithD_tFileInputDelimited_18 = 16;

									if (columnIndexWithD_tFileInputDelimited_18 < rowtFileInputDelimited_18.length) {

										if (rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18]
												.length() > 0) {

											row39.IMPORT_DATE = ParserUtils
													.parseTo_Date(
															rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18],
															"dd-MM-yyyy");

										} else {
											row39.IMPORT_DATE = null;
										}

									} else {
										row39.IMPORT_DATE = null;
									}

									columnIndexWithD_tFileInputDelimited_18 = 17;

									if (columnIndexWithD_tFileInputDelimited_18 < rowtFileInputDelimited_18.length) {

										row39.SOURCESYSTEM_CD = rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18];

									} else {
										row39.SOURCESYSTEM_CD = null;
									}

									columnIndexWithD_tFileInputDelimited_18 = 18;

									if (columnIndexWithD_tFileInputDelimited_18 < rowtFileInputDelimited_18.length) {

										row39.UPLOAD_ID = rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18];

									} else {
										row39.UPLOAD_ID = null;
									}

								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputDelimited_18 = true;

								System.err.println(e.getMessage());
								row39 = null;

							}

							/**
							 * [tFileInputDelimited_18 begin ] stop
							 */
							/**
							 * [tFileInputDelimited_18 main ] start
							 */

							currentComponent = "tFileInputDelimited_18";

							tos_count_tFileInputDelimited_18++;

							/**
							 * [tFileInputDelimited_18 main ] stop
							 */
							// Start of branch "row39"
							if (row39 != null) {

								/**
								 * [tUniqRow_9 main ] start
								 */

								currentComponent = "tUniqRow_9";

								row41 = null;
								finder_tUniqRow_9.PATIENT_NUM = row39.PATIENT_NUM;
								finder_tUniqRow_9.hashCodeDirty = true;
								if (!keystUniqRow_9.contains(finder_tUniqRow_9)) {
									KeyStruct_tUniqRow_9 new_tUniqRow_9 = new KeyStruct_tUniqRow_9();

									new_tUniqRow_9.PATIENT_NUM = row39.PATIENT_NUM;

									keystUniqRow_9.add(new_tUniqRow_9);
									if (row41 == null) {
										row41 = new row41Struct();
									}
									row41.PATIENT_NUM = row39.PATIENT_NUM;
									row41.VITAL_STATUS_CD = row39.VITAL_STATUS_CD;
									row41.BIRTH_DATE = row39.BIRTH_DATE;
									row41.DEATH_DATE = row39.DEATH_DATE;
									row41.SEX_CD = row39.SEX_CD;
									row41.AGE_IN_YEARS_NUM = row39.AGE_IN_YEARS_NUM;
									row41.LANGUAGE_CD = row39.LANGUAGE_CD;
									row41.RACE_CD = row39.RACE_CD;
									row41.MARITAL_STATUS_CD = row39.MARITAL_STATUS_CD;
									row41.RELIGION_CD = row39.RELIGION_CD;
									row41.ZIP_CD = row39.ZIP_CD;
									row41.STATECITYZIP_PATH = row39.STATECITYZIP_PATH;
									row41.INCOME_CD = row39.INCOME_CD;
									row41.PATIENT_BLOB = row39.PATIENT_BLOB;
									row41.UPDATE_DATE = row39.UPDATE_DATE;
									row41.DOWNLOAD_DATE = row39.DOWNLOAD_DATE;
									row41.IMPORT_DATE = row39.IMPORT_DATE;
									row41.SOURCESYSTEM_CD = row39.SOURCESYSTEM_CD;
									row41.UPLOAD_ID = row39.UPLOAD_ID;
									nb_uniques_tUniqRow_9++;
								} else {
									nb_duplicates_tUniqRow_9++;
								}

								tos_count_tUniqRow_9++;

								/**
								 * [tUniqRow_9 main ] stop
								 */
								// Start of branch "row41"
								if (row41 != null) {

									/**
									 * [tFileOutputDelimited_28 main ] start
									 */

									currentComponent = "tFileOutputDelimited_28";

									String[] rowtFileOutputDelimited_28 = new String[19];

									rowtFileOutputDelimited_28[0] = row41.PATIENT_NUM == null ? ""
											: row41.PATIENT_NUM.toPlainString();

									rowtFileOutputDelimited_28[1] = row41.VITAL_STATUS_CD == null ? ""
											: row41.VITAL_STATUS_CD;

									rowtFileOutputDelimited_28[2] = row41.BIRTH_DATE == null ? ""
											: row41.BIRTH_DATE;

									rowtFileOutputDelimited_28[3] = row41.DEATH_DATE == null ? ""
											: row41.DEATH_DATE;

									rowtFileOutputDelimited_28[4] = row41.SEX_CD == null ? ""
											: row41.SEX_CD;

									rowtFileOutputDelimited_28[5] = row41.AGE_IN_YEARS_NUM == null ? ""
											: row41.AGE_IN_YEARS_NUM;

									rowtFileOutputDelimited_28[6] = row41.LANGUAGE_CD == null ? ""
											: row41.LANGUAGE_CD;

									rowtFileOutputDelimited_28[7] = row41.RACE_CD == null ? ""
											: row41.RACE_CD;

									rowtFileOutputDelimited_28[8] = row41.MARITAL_STATUS_CD == null ? ""
											: row41.MARITAL_STATUS_CD;

									rowtFileOutputDelimited_28[9] = row41.RELIGION_CD == null ? ""
											: row41.RELIGION_CD;

									rowtFileOutputDelimited_28[10] = row41.ZIP_CD == null ? ""
											: row41.ZIP_CD;

									rowtFileOutputDelimited_28[11] = row41.STATECITYZIP_PATH == null ? ""
											: row41.STATECITYZIP_PATH;

									rowtFileOutputDelimited_28[12] = row41.INCOME_CD == null ? ""
											: row41.INCOME_CD;

									rowtFileOutputDelimited_28[13] = row41.PATIENT_BLOB == null ? ""
											: row41.PATIENT_BLOB;

									rowtFileOutputDelimited_28[14] = row41.UPDATE_DATE == null ? ""
											: FormatterUtils.format_Date(
													row41.UPDATE_DATE,
													"dd-MM-yyyy");

									rowtFileOutputDelimited_28[15] = row41.DOWNLOAD_DATE == null ? ""
											: FormatterUtils.format_Date(
													row41.DOWNLOAD_DATE,
													"dd-MM-yyyy");

									rowtFileOutputDelimited_28[16] = row41.IMPORT_DATE == null ? ""
											: FormatterUtils.format_Date(
													row41.IMPORT_DATE,
													"dd-MM-yyyy");

									rowtFileOutputDelimited_28[17] = row41.SOURCESYSTEM_CD == null ? ""
											: row41.SOURCESYSTEM_CD;

									rowtFileOutputDelimited_28[18] = row41.UPLOAD_ID == null ? ""
											: row41.UPLOAD_ID;

									nb_line_tFileOutputDelimited_28++;
									CsvWritertFileOutputDelimited_28
											.writeNext(rowtFileOutputDelimited_28);

									tos_count_tFileOutputDelimited_28++;

									/**
									 * [tFileOutputDelimited_28 main ] stop
									 */

								} // End of branch "row41"

							} // End of branch "row39"

							/**
							 * [tFileInputDelimited_18 end ] start
							 */

							currentComponent = "tFileInputDelimited_18";

							nb_line_tFileInputDelimited_18++;
						}

					} finally {
						if (!(filename_tFileInputDelimited_18 instanceof java.io.InputStream)) {
							if (csvReadertFileInputDelimited_18 != null) {
								csvReadertFileInputDelimited_18.close();
							}
						}
						if (csvReadertFileInputDelimited_18 != null) {
							globalMap.put("tFileInputDelimited_18_NB_LINE",
									nb_line_tFileInputDelimited_18);
						}
					}

					ok_Hash.put("tFileInputDelimited_18", true);
					end_Hash.put("tFileInputDelimited_18",
							System.currentTimeMillis());

					/**
					 * [tFileInputDelimited_18 end ] stop
					 */

					/**
					 * [tUniqRow_9 end ] start
					 */

					currentComponent = "tUniqRow_9";

					globalMap.put("tUniqRow_9_NB_UNIQUES",
							nb_uniques_tUniqRow_9);
					globalMap.put("tUniqRow_9_NB_DUPLICATES",
							nb_duplicates_tUniqRow_9);

					ok_Hash.put("tUniqRow_9", true);
					end_Hash.put("tUniqRow_9", System.currentTimeMillis());

					/**
					 * [tUniqRow_9 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_28 end ] start
					 */

					currentComponent = "tFileOutputDelimited_28";

				} finally {

					if (CsvWritertFileOutputDelimited_28 != null) {
						CsvWritertFileOutputDelimited_28.close();
					}
					globalMap.put("tFileOutputDelimited_28_NB_LINE",
							nb_line_tFileOutputDelimited_28);
				} // finally

				ok_Hash.put("tFileOutputDelimited_28", true);
				end_Hash.put("tFileOutputDelimited_28",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_28 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_18:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_13Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_18_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_13Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_13 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_13", false);
				start_Hash.put("tCreateTemporaryFile_13",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_13";

				int tos_count_tCreateTemporaryFile_13 = 0;

				java.io.File dir_tCreateTemporaryFile_13 = new java.io.File(
						"C:/ToS/WS5.3_2");
				dir_tCreateTemporaryFile_13.mkdirs();
				String name_tCreateTemporaryFile_13 = "talend_XXXX".replaceAll(
						"XXXX", routines.TalendString.getAsciiRandomString(4)
								.toUpperCase());
				String suffix_tCreateTemporaryFile_13 = ("tmp".replaceAll(
						"\\.", "").length() == 0) ? "tmp" : "tmp".replaceAll(
						"\\.", "");
				java.io.File file_tCreateTemporaryFile_13 = new java.io.File(
						dir_tCreateTemporaryFile_13,
						name_tCreateTemporaryFile_13 + "."
								+ suffix_tCreateTemporaryFile_13);
				if (file_tCreateTemporaryFile_13.createNewFile()) {
					file_tCreateTemporaryFile_13.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_13_FILEPATH",
						file_tCreateTemporaryFile_13.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_13 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_13 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_13";

				tos_count_tCreateTemporaryFile_13++;

				/**
				 * [tCreateTemporaryFile_13 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_13 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_13";

				ok_Hash.put("tCreateTemporaryFile_13", true);
				end_Hash.put("tCreateTemporaryFile_13",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_13 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_13:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCClose_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_13_SUBPROCESS_STATE", 1);
	}

	public void tJDBCClose_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCClose_1 begin ] start
				 */

				ok_Hash.put("tJDBCClose_1", false);
				start_Hash.put("tJDBCClose_1", System.currentTimeMillis());
				currentComponent = "tJDBCClose_1";

				int tos_count_tJDBCClose_1 = 0;

				/**
				 * [tJDBCClose_1 begin ] stop
				 */
				/**
				 * [tJDBCClose_1 main ] start
				 */

				currentComponent = "tJDBCClose_1";

				java.sql.Connection conn_tJDBCClose_1 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				if (null == conn_tJDBCClose_1) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCClose_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					if (dataSources_tJDBCClose_1 != null) {
						if (dataSources_tJDBCClose_1.get("") != null) {
							conn_tJDBCClose_1 = dataSources_tJDBCClose_1
									.get("").getConnection();
						}
					}
				}

				if (conn_tJDBCClose_1 != null && !conn_tJDBCClose_1.isClosed()) {
					conn_tJDBCClose_1.close();
				}

				tos_count_tJDBCClose_1++;

				/**
				 * [tJDBCClose_1 main ] stop
				 */
				/**
				 * [tJDBCClose_1 end ] start
				 */

				currentComponent = "tJDBCClose_1";

				ok_Hash.put("tJDBCClose_1", true);
				end_Hash.put("tJDBCClose_1", System.currentTimeMillis());

				/**
				 * [tJDBCClose_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCClose_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_17Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCClose_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_17Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_17_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_17 begin ] start
				 */

				ok_Hash.put("tJava_17", false);
				start_Hash.put("tJava_17", System.currentTimeMillis());
				currentComponent = "tJava_17";

				int tos_count_tJava_17 = 0;

				System.out.println("Extracting Source Data...");
				StatusListener.setStatus(80, "Uploading new Data...", "");

				/**
				 * [tJava_17 begin ] stop
				 */
				/**
				 * [tJava_17 main ] start
				 */

				currentComponent = "tJava_17";

				tos_count_tJava_17++;

				/**
				 * [tJava_17 main ] stop
				 */
				/**
				 * [tJava_17 end ] start
				 */

				currentComponent = "tJava_17";

				ok_Hash.put("tJava_17", true);
				end_Hash.put("tJava_17", System.currentTimeMillis());

				/**
				 * [tJava_17 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_17:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tRunJob_2Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_17_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_2 begin ] start
				 */

				ok_Hash.put("tRunJob_2", false);
				start_Hash.put("tRunJob_2", System.currentTimeMillis());
				currentComponent = "tRunJob_2";

				int tos_count_tRunJob_2 = 0;

				/**
				 * [tRunJob_2 begin ] stop
				 */
				/**
				 * [tRunJob_2 main ] start
				 */

				currentComponent = "tRunJob_2";

				java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();
				paraList_tRunJob_2.add("--father_pid=" + pid);

				paraList_tRunJob_2.add("--root_pid=" + rootPid);

				paraList_tRunJob_2.add("--father_node=tRunJob_2");

				paraList_tRunJob_2.add("--context=Default");

				// for feature:10589
				paraList_tRunJob_2.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_2.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_2 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_2 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_2".equals(tRunJobName_tRunJob_2)
						&& childResumePath_tRunJob_2 != null) {
					paraList_tRunJob_2
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_2");

				java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_2 = null;

				obj_tRunJob_2 = context.DB_TargetI2B2_Host;
				paraList_tRunJob_2.add("--context_param DB_StagingI2B2_Host="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
				parentContextMap_tRunJob_2.put("DB_StagingI2B2_Host",
						obj_tRunJob_2);
				obj_tRunJob_2 = context.DB_TargetI2B2_Instance;
				paraList_tRunJob_2
						.add("--context_param DB_StagingI2B2_Instance="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_2));
				parentContextMap_tRunJob_2.put("DB_StagingI2B2_Instance",
						obj_tRunJob_2);
				obj_tRunJob_2 = context.DB_TargetI2B2_Port;
				paraList_tRunJob_2.add("--context_param DB_StagingI2B2_Port="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
				parentContextMap_tRunJob_2.put("DB_StagingI2B2_Port",
						obj_tRunJob_2);
				obj_tRunJob_2 = context.DB_TargetI2B2_Password;
				paraList_tRunJob_2
						.add("--context_param DB_StagingI2B2_Password="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_2));
				parentContextMap_tRunJob_2.put("DB_StagingI2B2_Password",
						obj_tRunJob_2);
				obj_tRunJob_2 = context.DB_TargetI2B2_Schema;
				paraList_tRunJob_2.add("--context_param DB_StagingI2B2_Schema="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
				parentContextMap_tRunJob_2.put("DB_StagingI2B2_Schema",
						obj_tRunJob_2);
				obj_tRunJob_2 = context.folderMain;
				paraList_tRunJob_2.add("--context_param folderMain="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
				parentContextMap_tRunJob_2.put("folderMain", obj_tRunJob_2);
				obj_tRunJob_2 = "output/";
				paraList_tRunJob_2.add("--context_param folderOutput="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
				parentContextMap_tRunJob_2.put("folderOutput", obj_tRunJob_2);
				obj_tRunJob_2 = context.DB_TargetI2B2_Username;
				paraList_tRunJob_2
						.add("--context_param DB_StagingI2B2_Username="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_2));
				parentContextMap_tRunJob_2.put("DB_StagingI2B2_Username",
						obj_tRunJob_2);
				obj_tRunJob_2 = context.DB_TargetI2B2_DatabaseType;
				paraList_tRunJob_2
						.add("--context_param DB_StagingI2B2_DatabaseType="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_2));
				parentContextMap_tRunJob_2.put("DB_StagingI2B2_DatabaseType",
						obj_tRunJob_2);
				obj_tRunJob_2 = "UTF-8";
				paraList_tRunJob_2.add("--context_param coding="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
				parentContextMap_tRunJob_2.put("coding", obj_tRunJob_2);
				tos.copy_of_idrt_jdbc_upload_1_0.Copy_of_IDRT_JDBC_Upload childJob_tRunJob_2 = new tos.copy_of_idrt_jdbc_upload_1_0.Copy_of_IDRT_JDBC_Upload();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_2) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
							.entrySet()) {
						dataSources_tRunJob_2.put(
								talendDataSourceEntry_tRunJob_2.getKey(),
								talendDataSourceEntry_tRunJob_2.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
				}
				childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;
				String[][] childReturn_tRunJob_2 = childJob_tRunJob_2
						.runJob((String[]) paraList_tRunJob_2
								.toArray(new String[paraList_tRunJob_2.size()]));
				errorCode = childJob_tRunJob_2.getErrorCode();

				if (childJob_tRunJob_2.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_2_CHILD_RETURN_CODE",
							childJob_tRunJob_2.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_2
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_2_CHILD_RETURN_CODE",
							childJob_tRunJob_2.getErrorCode());
				}
				if (childJob_tRunJob_2.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_2.getExceptionStackTrace());
				}

				if (childJob_tRunJob_2.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_2.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_2++;

				/**
				 * [tRunJob_2 main ] stop
				 */
				/**
				 * [tRunJob_2 end ] start
				 */

				currentComponent = "tRunJob_2";

				ok_Hash.put("tRunJob_2", true);
				end_Hash.put("tRunJob_2", System.currentTimeMillis());

				/**
				 * [tRunJob_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tRunJob_2:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_18Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_18Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_18_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_18 begin ] start
				 */

				ok_Hash.put("tJava_18", false);
				start_Hash.put("tJava_18", System.currentTimeMillis());
				currentComponent = "tJava_18";

				int tos_count_tJava_18 = 0;

				StatusListener.setStatus(90, "Upload Complete...", "");

				/**
				 * [tJava_18 begin ] stop
				 */
				/**
				 * [tJava_18 main ] start
				 */

				currentComponent = "tJava_18";

				tos_count_tJava_18++;

				/**
				 * [tJava_18 main ] stop
				 */
				/**
				 * [tJava_18 end ] start
				 */

				currentComponent = "tJava_18";

				ok_Hash.put("tJava_18", true);
				end_Hash.put("tJava_18", System.currentTimeMillis());

				/**
				 * [tJava_18 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_18_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());
				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				// System.out.println("***********");
				// System.out.println("Context: ");
				// System.out.println(context.DB_TargetI2B2_Host);
				// System.out.println(context.DB_TargetI2B2_Instance);
				// System.out.println(context.DB_TargetI2B2_Port);
				// System.out.println(context.DB_TargetI2B2_Password);
				// System.out.println(context.DB_TargetI2B2_Schema);
				// System.out.println(context.DB_TargetI2B2_Username);
				// System.out.println("***********");

				/**
				 * [tJava_1 begin ] stop
				 */
				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */
				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tRunJob_3Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_3 begin ] start
				 */

				ok_Hash.put("tRunJob_3", false);
				start_Hash.put("tRunJob_3", System.currentTimeMillis());
				currentComponent = "tRunJob_3";

				int tos_count_tRunJob_3 = 0;

				/**
				 * [tRunJob_3 begin ] stop
				 */
				/**
				 * [tRunJob_3 main ] start
				 */

				currentComponent = "tRunJob_3";

				java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();
				paraList_tRunJob_3.add("--father_pid=" + pid);

				paraList_tRunJob_3.add("--root_pid=" + rootPid);

				paraList_tRunJob_3.add("--father_node=tRunJob_3");

				paraList_tRunJob_3.add("--context=Default");

				// for feature:10589
				paraList_tRunJob_3.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_3.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_3 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_3 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_3".equals(tRunJobName_tRunJob_3)
						&& childResumePath_tRunJob_3 != null) {
					paraList_tRunJob_3
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_3.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_3");

				java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_3 = context
						.propertyNames();
				while (propertyNames_tRunJob_3.hasMoreElements()) {
					String key_tRunJob_3 = (String) propertyNames_tRunJob_3
							.nextElement();
					Object value_tRunJob_3 = (Object) context
							.get(key_tRunJob_3);
					paraList_tRunJob_3.add("--context_param " + key_tRunJob_3
							+ "=" + value_tRunJob_3);
				}

				parentContextMap_tRunJob_3.put("folderOutput",
						context.folderOutput);
				parentContextMap_tRunJob_3
						.put("folderMain", context.folderMain);
				parentContextMap_tRunJob_3.put("DB_StagingI2B2_sqlclassname",
						context.DB_StagingI2B2_sqlclassname);
				parentContextMap_tRunJob_3.put("TargetID", context.TargetID);
				parentContextMap_tRunJob_3.put("sql", context.sql);
				parentContextMap_tRunJob_3.put("DB_StagingI2B2_DatabaseType",
						context.DB_StagingI2B2_DatabaseType);
				parentContextMap_tRunJob_3.put("DB_StagingI2B2_DriverClass",
						context.DB_StagingI2B2_DriverClass);
				parentContextMap_tRunJob_3.put("DB_StagingI2B2_Host",
						context.DB_StagingI2B2_Host);
				parentContextMap_tRunJob_3.put("DB_StagingI2B2_Instance",
						context.DB_StagingI2B2_Instance);
				parentContextMap_tRunJob_3.put("DB_StagingI2B2_jdbcurl",
						context.DB_StagingI2B2_jdbcurl);
				parentContextMap_tRunJob_3.put("DB_StagingI2B2_Password",
						context.DB_StagingI2B2_Password);
				parentContextMap_tRunJob_3.put("DB_StagingI2B2_Port",
						context.DB_StagingI2B2_Port);
				parentContextMap_tRunJob_3.put("DB_StagingI2B2_Schema",
						context.DB_StagingI2B2_Schema);
				parentContextMap_tRunJob_3.put("DB_StagingI2B2_Username",
						context.DB_StagingI2B2_Username);
				parentContextMap_tRunJob_3.put("DB_TargetI2B2_DatabaseType",
						context.DB_TargetI2B2_DatabaseType);
				parentContextMap_tRunJob_3.put("DB_TargetI2B2_DriverClass",
						context.DB_TargetI2B2_DriverClass);
				parentContextMap_tRunJob_3.put("DB_TargetI2B2_Host",
						context.DB_TargetI2B2_Host);
				parentContextMap_tRunJob_3.put("DB_TargetI2B2_Instance",
						context.DB_TargetI2B2_Instance);
				parentContextMap_tRunJob_3.put("DB_TargetI2B2_jdbcurl",
						context.DB_TargetI2B2_jdbcurl);
				parentContextMap_tRunJob_3.put("DB_TargetI2B2_Password",
						context.DB_TargetI2B2_Password);
				parentContextMap_tRunJob_3.put("DB_TargetI2B2_Port",
						context.DB_TargetI2B2_Port);
				parentContextMap_tRunJob_3.put("DB_TargetI2B2_Schema",
						context.DB_TargetI2B2_Schema);
				parentContextMap_tRunJob_3.put("DB_TargetI2B2_sqlclassname",
						context.DB_TargetI2B2_sqlclassname);
				parentContextMap_tRunJob_3.put("DB_TargetI2B2_Username",
						context.DB_TargetI2B2_Username);
				parentContextMap_tRunJob_3.put("currentQuery",
						context.currentQuery);

				Object obj_tRunJob_3 = null;

				obj_tRunJob_3 = context.DB_TargetI2B2_Host;
				paraList_tRunJob_3.add("--context_param DBHost="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
				parentContextMap_tRunJob_3.put("DBHost", obj_tRunJob_3);
				obj_tRunJob_3 = context.DB_TargetI2B2_Instance;
				paraList_tRunJob_3.add("--context_param DBInstance="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
				parentContextMap_tRunJob_3.put("DBInstance", obj_tRunJob_3);
				obj_tRunJob_3 = context.DB_TargetI2B2_Port;
				paraList_tRunJob_3.add("--context_param DBPort="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
				parentContextMap_tRunJob_3.put("DBPort", obj_tRunJob_3);
				obj_tRunJob_3 = context.DB_TargetI2B2_Password;
				paraList_tRunJob_3.add("--context_param DBPassword="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
				parentContextMap_tRunJob_3.put("DBPassword", obj_tRunJob_3);
				obj_tRunJob_3 = context.DB_TargetI2B2_Schema;
				paraList_tRunJob_3.add("--context_param DBSchema="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
				parentContextMap_tRunJob_3.put("DBSchema", obj_tRunJob_3);
				obj_tRunJob_3 = context.DB_TargetI2B2_Username;
				paraList_tRunJob_3.add("--context_param DBUsername="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
				parentContextMap_tRunJob_3.put("DBUsername", obj_tRunJob_3);
				obj_tRunJob_3 = context.DB_TargetI2B2_Schema;
				paraList_tRunJob_3.add("--context_param project="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
				parentContextMap_tRunJob_3.put("project", obj_tRunJob_3);
				obj_tRunJob_3 = true;
				paraList_tRunJob_3.add("--context_param truncateQueries="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
				parentContextMap_tRunJob_3
						.put("truncateQueries", obj_tRunJob_3);
				tos.idrt_truncate_tables_0_1.IDRT_Truncate_Tables childJob_tRunJob_3 = new tos.idrt_truncate_tables_0_1.IDRT_Truncate_Tables();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_3) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_3 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_3 : talendDataSources_tRunJob_3
							.entrySet()) {
						dataSources_tRunJob_3.put(
								talendDataSourceEntry_tRunJob_3.getKey(),
								talendDataSourceEntry_tRunJob_3.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_3.setDataSources(dataSources_tRunJob_3);
				}
				childJob_tRunJob_3.parentContextMap = parentContextMap_tRunJob_3;
				String[][] childReturn_tRunJob_3 = childJob_tRunJob_3
						.runJob((String[]) paraList_tRunJob_3
								.toArray(new String[paraList_tRunJob_3.size()]));
				errorCode = childJob_tRunJob_3.getErrorCode();

				if (childJob_tRunJob_3.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_3_CHILD_RETURN_CODE",
							childJob_tRunJob_3.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_3
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_3_CHILD_RETURN_CODE",
							childJob_tRunJob_3.getErrorCode());
				}
				if (childJob_tRunJob_3.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_3.getExceptionStackTrace());
				}

				tos_count_tRunJob_3++;

				/**
				 * [tRunJob_3 main ] stop
				 */
				/**
				 * [tRunJob_3 end ] start
				 */

				currentComponent = "tRunJob_3";

				ok_Hash.put("tRunJob_3", true);
				end_Hash.put("tRunJob_3", System.currentTimeMillis());

				/**
				 * [tRunJob_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tRunJob_3:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCConnection_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_1 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_1", false);
				start_Hash.put("tCreateTemporaryFile_1",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_1";

				int tos_count_tCreateTemporaryFile_1 = 0;

				java.io.File dir_tCreateTemporaryFile_1 = new java.io.File(
						context.folderMain + context.folderOutput);
				dir_tCreateTemporaryFile_1.mkdirs();
				String name_tCreateTemporaryFile_1 = "talend_01_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_1 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_1 = new java.io.File(
						dir_tCreateTemporaryFile_1, name_tCreateTemporaryFile_1
								+ "." + suffix_tCreateTemporaryFile_1);
				if (file_tCreateTemporaryFile_1.createNewFile()) {
					file_tCreateTemporaryFile_1.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_1_FILEPATH",
						file_tCreateTemporaryFile_1.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_1 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_1 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_1";

				tos_count_tCreateTemporaryFile_1++;

				/**
				 * [tCreateTemporaryFile_1 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_1 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_1";

				ok_Hash.put("tCreateTemporaryFile_1", true);
				end_Hash.put("tCreateTemporaryFile_1",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tLibraryLoad_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_1_SUBPROCESS_STATE", 1);
	}

	public void tLibraryLoad_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLibraryLoad_1 begin ] start
				 */

				ok_Hash.put("tLibraryLoad_1", false);
				start_Hash.put("tLibraryLoad_1", System.currentTimeMillis());
				currentComponent = "tLibraryLoad_1";

				int tos_count_tLibraryLoad_1 = 0;

				/**
				 * [tLibraryLoad_1 begin ] stop
				 */
				/**
				 * [tLibraryLoad_1 main ] start
				 */

				currentComponent = "tLibraryLoad_1";

				tos_count_tLibraryLoad_1++;

				/**
				 * [tLibraryLoad_1 main ] stop
				 */
				/**
				 * [tLibraryLoad_1 end ] start
				 */

				currentComponent = "tLibraryLoad_1";

				ok_Hash.put("tLibraryLoad_1", true);
				end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				/**
				 * [tLibraryLoad_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tLibraryLoad_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_2 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_2", false);
				start_Hash.put("tCreateTemporaryFile_2",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_2";

				int tos_count_tCreateTemporaryFile_2 = 0;

				java.io.File dir_tCreateTemporaryFile_2 = new java.io.File(
						context.folderMain + context.folderOutput);
				dir_tCreateTemporaryFile_2.mkdirs();
				String name_tCreateTemporaryFile_2 = "talend_02_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_2 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_2 = new java.io.File(
						dir_tCreateTemporaryFile_2, name_tCreateTemporaryFile_2
								+ "." + suffix_tCreateTemporaryFile_2);
				if (file_tCreateTemporaryFile_2.createNewFile()) {
					file_tCreateTemporaryFile_2.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_2_FILEPATH",
						file_tCreateTemporaryFile_2.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_2 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_2 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_2";

				tos_count_tCreateTemporaryFile_2++;

				/**
				 * [tCreateTemporaryFile_2 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_2 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_2";

				ok_Hash.put("tCreateTemporaryFile_2", true);
				end_Hash.put("tCreateTemporaryFile_2",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_2_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_3 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_3", false);
				start_Hash.put("tCreateTemporaryFile_3",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_3";

				int tos_count_tCreateTemporaryFile_3 = 0;

				java.io.File dir_tCreateTemporaryFile_3 = new java.io.File(
						context.folderMain + context.folderOutput);
				dir_tCreateTemporaryFile_3.mkdirs();
				String name_tCreateTemporaryFile_3 = "talend_03_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_3 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_3 = new java.io.File(
						dir_tCreateTemporaryFile_3, name_tCreateTemporaryFile_3
								+ "." + suffix_tCreateTemporaryFile_3);
				if (file_tCreateTemporaryFile_3.createNewFile()) {
					file_tCreateTemporaryFile_3.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_3_FILEPATH",
						file_tCreateTemporaryFile_3.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_3 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_3 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_3";

				tos_count_tCreateTemporaryFile_3++;

				/**
				 * [tCreateTemporaryFile_3 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_3 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_3";

				ok_Hash.put("tCreateTemporaryFile_3", true);
				end_Hash.put("tCreateTemporaryFile_3",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_3:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_2Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_3_SUBPROCESS_STATE", 1);
	}

	public static class from_src_ontStruct implements
			routines.system.IPersistableComparableLookupRow<from_src_ontStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal C_HLEVEL;

		public BigDecimal getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String C_SYNONYM_CD;

		public String getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public BigDecimal C_TOTALNUM;

		public BigDecimal getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public String C_COLUMNDATATYPE;

		public String getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public Object C_COMMENT;

		public Object getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.C_FULLNAME == null) ? 0 : this.C_FULLNAME
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final from_src_ontStruct other = (from_src_ontStruct) obj;

			if (this.C_FULLNAME == null) {
				if (other.C_FULLNAME != null)
					return false;
			} else if (!this.C_FULLNAME.equals(other.C_FULLNAME))
				return false;

			return true;
		}

		public void copyDataTo(from_src_ontStruct other) {

			other.C_HLEVEL = this.C_HLEVEL;
			other.C_FULLNAME = this.C_FULLNAME;
			other.C_NAME = this.C_NAME;
			other.C_SYNONYM_CD = this.C_SYNONYM_CD;
			other.C_VISUALATTRIBUTES = this.C_VISUALATTRIBUTES;
			other.C_TOTALNUM = this.C_TOTALNUM;
			other.C_BASECODE = this.C_BASECODE;
			other.C_METADATAXML = this.C_METADATAXML;
			other.C_FACTTABLECOLUMN = this.C_FACTTABLECOLUMN;
			other.C_TABLENAME = this.C_TABLENAME;
			other.C_COLUMNNAME = this.C_COLUMNNAME;
			other.C_COLUMNDATATYPE = this.C_COLUMNDATATYPE;
			other.C_OPERATOR = this.C_OPERATOR;
			other.C_DIMCODE = this.C_DIMCODE;
			other.C_COMMENT = this.C_COMMENT;
			other.C_TOOLTIP = this.C_TOOLTIP;
			other.M_APPLIED_PATH = this.M_APPLIED_PATH;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.VALUETYPE_CD = this.VALUETYPE_CD;
			other.M_EXCLUSION_CD = this.M_EXCLUSION_CD;
			other.C_PATH = this.C_PATH;
			other.C_SYMBOL = this.C_SYMBOL;

		}

		public void copyKeysDataTo(from_src_ontStruct other) {

			other.C_FULLNAME = this.C_FULLNAME;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.C_FULLNAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.C_FULLNAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.C_HLEVEL = (BigDecimal) ois.readObject();

				this.C_NAME = readString(dis, ois);

				this.C_SYNONYM_CD = readString(dis, ois);

				this.C_VISUALATTRIBUTES = readString(dis, ois);

				this.C_TOTALNUM = (BigDecimal) ois.readObject();

				this.C_BASECODE = readString(dis, ois);

				this.C_METADATAXML = readString(dis, ois);

				this.C_FACTTABLECOLUMN = readString(dis, ois);

				this.C_TABLENAME = readString(dis, ois);

				this.C_COLUMNNAME = readString(dis, ois);

				this.C_COLUMNDATATYPE = readString(dis, ois);

				this.C_OPERATOR = readString(dis, ois);

				this.C_DIMCODE = readString(dis, ois);

				this.C_COMMENT = (Object) ois.readObject();

				this.C_TOOLTIP = readString(dis, ois);

				this.M_APPLIED_PATH = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.VALUETYPE_CD = readString(dis, ois);

				this.M_EXCLUSION_CD = readString(dis, ois);

				this.C_PATH = readString(dis, ois);

				this.C_SYMBOL = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				oos.writeObject(this.C_HLEVEL);

				writeString(this.C_NAME, dos, oos);

				writeString(this.C_SYNONYM_CD, dos, oos);

				writeString(this.C_VISUALATTRIBUTES, dos, oos);

				oos.writeObject(this.C_TOTALNUM);

				writeString(this.C_BASECODE, dos, oos);

				writeString(this.C_METADATAXML, dos, oos);

				writeString(this.C_FACTTABLECOLUMN, dos, oos);

				writeString(this.C_TABLENAME, dos, oos);

				writeString(this.C_COLUMNNAME, dos, oos);

				writeString(this.C_COLUMNDATATYPE, dos, oos);

				writeString(this.C_OPERATOR, dos, oos);

				writeString(this.C_DIMCODE, dos, oos);

				oos.writeObject(this.C_COMMENT);

				writeString(this.C_TOOLTIP, dos, oos);

				writeString(this.M_APPLIED_PATH, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.VALUETYPE_CD, dos, oos);

				writeString(this.M_EXCLUSION_CD, dos, oos);

				writeString(this.C_PATH, dos, oos);

				writeString(this.C_SYMBOL, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + C_SYNONYM_CD);
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + String.valueOf(C_TOTALNUM));
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + C_COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + String.valueOf(C_COMMENT));
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(from_src_ontStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.C_FULLNAME,
					other.C_FULLNAME);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				from_src_ontStruct from_src_ont = new from_src_ontStruct();

				/**
				 * [tAdvancedHash_from_src_ont begin ] start
				 */

				ok_Hash.put("tAdvancedHash_from_src_ont", false);
				start_Hash.put("tAdvancedHash_from_src_ont",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_from_src_ont";

				int tos_count_tAdvancedHash_from_src_ont = 0;

				// connection name:from_src_ont
				// source node:tFileInputDelimited_2 -
				// inputs:(after_tFileInputDelimited_1)
				// outputs:(from_src_ont,from_src_ont) | target
				// node:tAdvancedHash_from_src_ont - inputs:(from_src_ont)
				// outputs:()
				// linked node: tMap_1 - inputs:(from_OE_ONT,from_src_ont)
				// outputs:(target_ont,to_cd_dim,to_mod_dim)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_from_src_ont = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<from_src_ontStruct> tHash_Lookup_from_src_ont = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<from_src_ontStruct> getLookup(matchingModeEnum_from_src_ont);

				globalMap.put("tHash_Lookup_from_src_ont",
						tHash_Lookup_from_src_ont);

				/**
				 * [tAdvancedHash_from_src_ont begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;

				char fieldSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_2 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_2 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_2 = /**
				 * Start field
				 * tFileInputDelimited_2:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_2_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_2:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;

				try {

					String[] rowtFileInputDelimited_2 = null;
					int currentLinetFileInputDelimited_2 = 0;
					int outputLinetFileInputDelimited_2 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_2 = 0;
							if (footer_value_tFileInputDelimited_2 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_2,
									fieldSeparator_tFileInputDelimited_2[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_2)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_2[0]);
						}

						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
							csvReadertFileInputDelimited_2.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_2[0]);

						csvReadertFileInputDelimited_2.setQuoteChar('"');

						csvReadertFileInputDelimited_2
								.setEscapeChar(csvReadertFileInputDelimited_2
										.getQuoteChar());

						if (footer_tFileInputDelimited_2 > 0) {
							for (totalLinetFileInputDelimited_2 = 0; totalLinetFileInputDelimited_2 < 1; totalLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
							csvReadertFileInputDelimited_2
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_2.readNext()) {

								rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
										.getValues();
								if (!(rowtFileInputDelimited_2.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_2[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_2++;

								}

							}
							int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2
									- footer_tFileInputDelimited_2 < 0 ? 0
									: totalLinetFileInputDelimited_2
											- footer_tFileInputDelimited_2;
							if (lastLinetFileInputDelimited_2 > 0) {
								lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2
										: lastLineTemptFileInputDelimited_2;
							} else {
								lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
							}

							csvReadertFileInputDelimited_2.close();
							if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_2,
										fieldSeparator_tFileInputDelimited_2[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_2)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_2[0]);
							}
							csvReadertFileInputDelimited_2
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
								csvReadertFileInputDelimited_2
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_2[0]);

							csvReadertFileInputDelimited_2.setQuoteChar('"');

							csvReadertFileInputDelimited_2
									.setEscapeChar(csvReadertFileInputDelimited_2
											.getQuoteChar());

						}

						if (limittFileInputDelimited_2 != 0) {
							for (currentLinetFileInputDelimited_2 = 0; currentLinetFileInputDelimited_2 < 1; currentLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
						}
						csvReadertFileInputDelimited_2
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_2 != 0
							&& csvReadertFileInputDelimited_2 != null
							&& csvReadertFileInputDelimited_2.readNext()) {

						rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
								.getValues();

						if (rowtFileInputDelimited_2.length == 1
								&& ("\015").equals(rowtFileInputDelimited_2[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_2++;

						if (lastLinetFileInputDelimited_2 > -1
								&& currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
							break;
						}
						outputLinetFileInputDelimited_2++;
						if (limittFileInputDelimited_2 > 0
								&& outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
							break;
						}

						from_src_ont = null;

						from_src_ont = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						from_src_ont = new from_src_ontStruct();
						try {

							if (rowtFileInputDelimited_2.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_2[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								from_src_ont.C_HLEVEL = null;

								from_src_ont.C_FULLNAME = null;

								from_src_ont.C_NAME = null;

								from_src_ont.C_SYNONYM_CD = null;

								from_src_ont.C_VISUALATTRIBUTES = null;

								from_src_ont.C_TOTALNUM = null;

								from_src_ont.C_BASECODE = null;

								from_src_ont.C_METADATAXML = null;

								from_src_ont.C_FACTTABLECOLUMN = null;

								from_src_ont.C_TABLENAME = null;

								from_src_ont.C_COLUMNNAME = null;

								from_src_ont.C_COLUMNDATATYPE = null;

								from_src_ont.C_OPERATOR = null;

								from_src_ont.C_DIMCODE = null;

								from_src_ont.C_COMMENT = null;

								from_src_ont.C_TOOLTIP = null;

								from_src_ont.M_APPLIED_PATH = null;

								from_src_ont.UPDATE_DATE = null;

								from_src_ont.DOWNLOAD_DATE = null;

								from_src_ont.IMPORT_DATE = null;

								from_src_ont.SOURCESYSTEM_CD = null;

								from_src_ont.VALUETYPE_CD = null;

								from_src_ont.M_EXCLUSION_CD = null;

								from_src_ont.C_PATH = null;

								from_src_ont.C_SYMBOL = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_2 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_2 = 0;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										from_src_ont.C_HLEVEL = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);

									} else {
										from_src_ont.C_HLEVEL = null;
									}

								} else {
									from_src_ont.C_HLEVEL = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 1;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.C_FULLNAME = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.C_FULLNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 2;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.C_NAME = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.C_NAME = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 3;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.C_SYNONYM_CD = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.C_SYNONYM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 4;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.C_VISUALATTRIBUTES = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.C_VISUALATTRIBUTES = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 5;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										from_src_ont.C_TOTALNUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);

									} else {
										from_src_ont.C_TOTALNUM = null;
									}

								} else {
									from_src_ont.C_TOTALNUM = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 6;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.C_BASECODE = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.C_BASECODE = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 7;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.C_METADATAXML = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.C_METADATAXML = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 8;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.C_FACTTABLECOLUMN = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.C_FACTTABLECOLUMN = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 9;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.C_TABLENAME = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.C_TABLENAME = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 10;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.C_COLUMNNAME = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.C_COLUMNNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 11;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.C_COLUMNDATATYPE = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.C_COLUMNDATATYPE = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 12;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.C_OPERATOR = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.C_OPERATOR = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 13;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.C_DIMCODE = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.C_DIMCODE = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 14;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.C_COMMENT = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.C_COMMENT = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 15;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.C_TOOLTIP = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.C_TOOLTIP = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 16;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.M_APPLIED_PATH = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.M_APPLIED_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 17;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										from_src_ont.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
														"dd-MM-yyyy");

									} else {
										from_src_ont.UPDATE_DATE = null;
									}

								} else {
									from_src_ont.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 18;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										from_src_ont.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
														"dd-MM-yyyy");

									} else {
										from_src_ont.DOWNLOAD_DATE = null;
									}

								} else {
									from_src_ont.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 19;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										from_src_ont.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
														"dd-MM-yyyy");

									} else {
										from_src_ont.IMPORT_DATE = null;
									}

								} else {
									from_src_ont.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 20;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.SOURCESYSTEM_CD = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 21;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.VALUETYPE_CD = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.VALUETYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 22;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.M_EXCLUSION_CD = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.M_EXCLUSION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 23;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.C_PATH = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.C_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 24;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.C_SYMBOL = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.C_SYMBOL = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							from_src_ont = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */
						// Start of branch "from_src_ont"
						if (from_src_ont != null) {

							/**
							 * [tAdvancedHash_from_src_ont main ] start
							 */

							currentComponent = "tAdvancedHash_from_src_ont";

							from_src_ontStruct from_src_ont_HashRow = new from_src_ontStruct();

							from_src_ont_HashRow.C_HLEVEL = from_src_ont.C_HLEVEL;

							from_src_ont_HashRow.C_FULLNAME = from_src_ont.C_FULLNAME;

							from_src_ont_HashRow.C_NAME = from_src_ont.C_NAME;

							from_src_ont_HashRow.C_SYNONYM_CD = from_src_ont.C_SYNONYM_CD;

							from_src_ont_HashRow.C_VISUALATTRIBUTES = from_src_ont.C_VISUALATTRIBUTES;

							from_src_ont_HashRow.C_TOTALNUM = from_src_ont.C_TOTALNUM;

							from_src_ont_HashRow.C_BASECODE = from_src_ont.C_BASECODE;

							from_src_ont_HashRow.C_METADATAXML = from_src_ont.C_METADATAXML;

							from_src_ont_HashRow.C_FACTTABLECOLUMN = from_src_ont.C_FACTTABLECOLUMN;

							from_src_ont_HashRow.C_TABLENAME = from_src_ont.C_TABLENAME;

							from_src_ont_HashRow.C_COLUMNNAME = from_src_ont.C_COLUMNNAME;

							from_src_ont_HashRow.C_COLUMNDATATYPE = from_src_ont.C_COLUMNDATATYPE;

							from_src_ont_HashRow.C_OPERATOR = from_src_ont.C_OPERATOR;

							from_src_ont_HashRow.C_DIMCODE = from_src_ont.C_DIMCODE;

							from_src_ont_HashRow.C_COMMENT = from_src_ont.C_COMMENT;

							from_src_ont_HashRow.C_TOOLTIP = from_src_ont.C_TOOLTIP;

							from_src_ont_HashRow.M_APPLIED_PATH = from_src_ont.M_APPLIED_PATH;

							from_src_ont_HashRow.UPDATE_DATE = from_src_ont.UPDATE_DATE;

							from_src_ont_HashRow.DOWNLOAD_DATE = from_src_ont.DOWNLOAD_DATE;

							from_src_ont_HashRow.IMPORT_DATE = from_src_ont.IMPORT_DATE;

							from_src_ont_HashRow.SOURCESYSTEM_CD = from_src_ont.SOURCESYSTEM_CD;

							from_src_ont_HashRow.VALUETYPE_CD = from_src_ont.VALUETYPE_CD;

							from_src_ont_HashRow.M_EXCLUSION_CD = from_src_ont.M_EXCLUSION_CD;

							from_src_ont_HashRow.C_PATH = from_src_ont.C_PATH;

							from_src_ont_HashRow.C_SYMBOL = from_src_ont.C_SYMBOL;

							tHash_Lookup_from_src_ont.put(from_src_ont_HashRow);

							tos_count_tAdvancedHash_from_src_ont++;

							/**
							 * [tAdvancedHash_from_src_ont main ] stop
							 */

						} // End of branch "from_src_ont"

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						nb_line_tFileInputDelimited_2++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_2 != null) {
							csvReadertFileInputDelimited_2.close();
						}
					}
					if (csvReadertFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE",
								nb_line_tFileInputDelimited_2);
					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_from_src_ont end ] start
				 */

				currentComponent = "tAdvancedHash_from_src_ont";

				tHash_Lookup_from_src_ont.endPut();

				ok_Hash.put("tAdvancedHash_from_src_ont", true);
				end_Hash.put("tAdvancedHash_from_src_ont",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_from_src_ont end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class row47Struct implements
			routines.system.IPersistableComparableLookupRow<row47Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String MODIFIER_PATH;

		public String getMODIFIER_PATH() {
			return this.MODIFIER_PATH;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String MODIFIER_BLOB;

		public String getMODIFIER_BLOB() {
			return this.MODIFIER_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.MODIFIER_PATH == null) ? 0
								: this.MODIFIER_PATH.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row47Struct other = (row47Struct) obj;

			if (this.MODIFIER_PATH == null) {
				if (other.MODIFIER_PATH != null)
					return false;
			} else if (!this.MODIFIER_PATH.equals(other.MODIFIER_PATH))
				return false;

			return true;
		}

		public void copyDataTo(row47Struct other) {

			other.MODIFIER_PATH = this.MODIFIER_PATH;
			other.MODIFIER_CD = this.MODIFIER_CD;
			other.NAME_CHAR = this.NAME_CHAR;
			other.MODIFIER_BLOB = this.MODIFIER_BLOB;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row47Struct other) {

			other.MODIFIER_PATH = this.MODIFIER_PATH;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.MODIFIER_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MODIFIER_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.MODIFIER_CD = readString(dis, ois);

				this.NAME_CHAR = readString(dis, ois);

				this.MODIFIER_BLOB = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.MODIFIER_CD, dos, oos);

				writeString(this.NAME_CHAR, dos, oos);

				writeString(this.MODIFIER_BLOB, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MODIFIER_PATH=" + MODIFIER_PATH);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",MODIFIER_BLOB=" + MODIFIER_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row47Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.MODIFIER_PATH,
					other.MODIFIER_PATH);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_31Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_31_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row47Struct row47 = new row47Struct();

				/**
				 * [tAdvancedHash_row47 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row47", false);
				start_Hash.put("tAdvancedHash_row47",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row47";

				int tos_count_tAdvancedHash_row47 = 0;

				// connection name:row47
				// source node:tFileInputDelimited_31 -
				// inputs:(after_tFileInputDelimited_1) outputs:(row47,row47) |
				// target node:tAdvancedHash_row47 - inputs:(row47) outputs:()
				// linked node: tMap_19 - inputs:(row11,row47)
				// outputs:(copyOfto_conc_dim)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row47 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row47Struct> tHash_Lookup_row47 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row47Struct> getLookup(matchingModeEnum_row47);

				globalMap.put("tHash_Lookup_row47", tHash_Lookup_row47);

				/**
				 * [tAdvancedHash_row47 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_31 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_31", false);
				start_Hash.put("tFileInputDelimited_31",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_31";

				int tos_count_tFileInputDelimited_31 = 0;

				int nb_line_tFileInputDelimited_31 = 0;
				int footer_tFileInputDelimited_31 = 0;
				int totalLinetFileInputDelimited_31 = 0;
				int limittFileInputDelimited_31 = -1;
				int lastLinetFileInputDelimited_31 = -1;

				char fieldSeparator_tFileInputDelimited_31[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_31 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_31[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_31 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_31 = /**
				 * Start field
				 * tFileInputDelimited_31:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_10_FILEPATH"))/**
				 * 
				 * End field tFileInputDelimited_31:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_31 = null;

				try {

					String[] rowtFileInputDelimited_31 = null;
					int currentLinetFileInputDelimited_31 = 0;
					int outputLinetFileInputDelimited_31 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_31 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_31 = 0;
							if (footer_value_tFileInputDelimited_31 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_31 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_31,
									fieldSeparator_tFileInputDelimited_31[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_31 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_31)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_31[0]);
						}

						csvReadertFileInputDelimited_31
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_31[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_31[0] != '\r'))
							csvReadertFileInputDelimited_31.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_31[0]);

						csvReadertFileInputDelimited_31.setQuoteChar('"');

						csvReadertFileInputDelimited_31
								.setEscapeChar(csvReadertFileInputDelimited_31
										.getQuoteChar());

						if (footer_tFileInputDelimited_31 > 0) {
							for (totalLinetFileInputDelimited_31 = 0; totalLinetFileInputDelimited_31 < 1; totalLinetFileInputDelimited_31++) {
								csvReadertFileInputDelimited_31.readNext();
							}
							csvReadertFileInputDelimited_31
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_31.readNext()) {

								rowtFileInputDelimited_31 = csvReadertFileInputDelimited_31
										.getValues();
								if (!(rowtFileInputDelimited_31.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_31[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_31++;

								}

							}
							int lastLineTemptFileInputDelimited_31 = totalLinetFileInputDelimited_31
									- footer_tFileInputDelimited_31 < 0 ? 0
									: totalLinetFileInputDelimited_31
											- footer_tFileInputDelimited_31;
							if (lastLinetFileInputDelimited_31 > 0) {
								lastLinetFileInputDelimited_31 = lastLinetFileInputDelimited_31 < lastLineTemptFileInputDelimited_31 ? lastLinetFileInputDelimited_31
										: lastLineTemptFileInputDelimited_31;
							} else {
								lastLinetFileInputDelimited_31 = lastLineTemptFileInputDelimited_31;
							}

							csvReadertFileInputDelimited_31.close();
							if (filename_tFileInputDelimited_31 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_31 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_31,
										fieldSeparator_tFileInputDelimited_31[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_31 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_31)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_31[0]);
							}
							csvReadertFileInputDelimited_31
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_31[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_31[0] != '\r'))
								csvReadertFileInputDelimited_31
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_31[0]);

							csvReadertFileInputDelimited_31.setQuoteChar('"');

							csvReadertFileInputDelimited_31
									.setEscapeChar(csvReadertFileInputDelimited_31
											.getQuoteChar());

						}

						if (limittFileInputDelimited_31 != 0) {
							for (currentLinetFileInputDelimited_31 = 0; currentLinetFileInputDelimited_31 < 1; currentLinetFileInputDelimited_31++) {
								csvReadertFileInputDelimited_31.readNext();
							}
						}
						csvReadertFileInputDelimited_31
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_31 != 0
							&& csvReadertFileInputDelimited_31 != null
							&& csvReadertFileInputDelimited_31.readNext()) {

						rowtFileInputDelimited_31 = csvReadertFileInputDelimited_31
								.getValues();

						if (rowtFileInputDelimited_31.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_31[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_31++;

						if (lastLinetFileInputDelimited_31 > -1
								&& currentLinetFileInputDelimited_31 > lastLinetFileInputDelimited_31) {
							break;
						}
						outputLinetFileInputDelimited_31++;
						if (limittFileInputDelimited_31 > 0
								&& outputLinetFileInputDelimited_31 > limittFileInputDelimited_31) {
							break;
						}

						row47 = null;

						row47 = null;

						boolean whetherReject_tFileInputDelimited_31 = false;
						row47 = new row47Struct();
						try {

							if (rowtFileInputDelimited_31.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_31[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row47.MODIFIER_PATH = null;

								row47.MODIFIER_CD = null;

								row47.NAME_CHAR = null;

								row47.MODIFIER_BLOB = null;

								row47.UPDATE_DATE = null;

								row47.DOWNLOAD_DATE = null;

								row47.IMPORT_DATE = null;

								row47.SOURCESYSTEM_CD = null;

								row47.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_31 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_31 = 0;

								if (columnIndexWithD_tFileInputDelimited_31 < rowtFileInputDelimited_31.length) {

									row47.MODIFIER_PATH = rowtFileInputDelimited_31[columnIndexWithD_tFileInputDelimited_31];

								} else {
									row47.MODIFIER_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_31 = 1;

								if (columnIndexWithD_tFileInputDelimited_31 < rowtFileInputDelimited_31.length) {

									row47.MODIFIER_CD = rowtFileInputDelimited_31[columnIndexWithD_tFileInputDelimited_31];

								} else {
									row47.MODIFIER_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_31 = 2;

								if (columnIndexWithD_tFileInputDelimited_31 < rowtFileInputDelimited_31.length) {

									row47.NAME_CHAR = rowtFileInputDelimited_31[columnIndexWithD_tFileInputDelimited_31];

								} else {
									row47.NAME_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_31 = 3;

								if (columnIndexWithD_tFileInputDelimited_31 < rowtFileInputDelimited_31.length) {

									row47.MODIFIER_BLOB = rowtFileInputDelimited_31[columnIndexWithD_tFileInputDelimited_31];

								} else {
									row47.MODIFIER_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_31 = 4;

								if (columnIndexWithD_tFileInputDelimited_31 < rowtFileInputDelimited_31.length) {

									if (rowtFileInputDelimited_31[columnIndexWithD_tFileInputDelimited_31]
											.length() > 0) {

										row47.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_31[columnIndexWithD_tFileInputDelimited_31],
														"dd-MM-yyyy");

									} else {
										row47.UPDATE_DATE = null;
									}

								} else {
									row47.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_31 = 5;

								if (columnIndexWithD_tFileInputDelimited_31 < rowtFileInputDelimited_31.length) {

									if (rowtFileInputDelimited_31[columnIndexWithD_tFileInputDelimited_31]
											.length() > 0) {

										row47.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_31[columnIndexWithD_tFileInputDelimited_31],
														"dd-MM-yyyy");

									} else {
										row47.DOWNLOAD_DATE = null;
									}

								} else {
									row47.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_31 = 6;

								if (columnIndexWithD_tFileInputDelimited_31 < rowtFileInputDelimited_31.length) {

									if (rowtFileInputDelimited_31[columnIndexWithD_tFileInputDelimited_31]
											.length() > 0) {

										row47.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_31[columnIndexWithD_tFileInputDelimited_31],
														"dd-MM-yyyy");

									} else {
										row47.IMPORT_DATE = null;
									}

								} else {
									row47.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_31 = 7;

								if (columnIndexWithD_tFileInputDelimited_31 < rowtFileInputDelimited_31.length) {

									row47.SOURCESYSTEM_CD = rowtFileInputDelimited_31[columnIndexWithD_tFileInputDelimited_31];

								} else {
									row47.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_31 = 8;

								if (columnIndexWithD_tFileInputDelimited_31 < rowtFileInputDelimited_31.length) {

									row47.UPLOAD_ID = rowtFileInputDelimited_31[columnIndexWithD_tFileInputDelimited_31];

								} else {
									row47.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_31 = true;

							System.err.println(e.getMessage());
							row47 = null;

						}

						/**
						 * [tFileInputDelimited_31 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_31 main ] start
						 */

						currentComponent = "tFileInputDelimited_31";

						tos_count_tFileInputDelimited_31++;

						/**
						 * [tFileInputDelimited_31 main ] stop
						 */
						// Start of branch "row47"
						if (row47 != null) {

							/**
							 * [tAdvancedHash_row47 main ] start
							 */

							currentComponent = "tAdvancedHash_row47";

							row47Struct row47_HashRow = new row47Struct();

							row47_HashRow.MODIFIER_PATH = row47.MODIFIER_PATH;

							row47_HashRow.MODIFIER_CD = row47.MODIFIER_CD;

							row47_HashRow.NAME_CHAR = row47.NAME_CHAR;

							row47_HashRow.MODIFIER_BLOB = row47.MODIFIER_BLOB;

							row47_HashRow.UPDATE_DATE = row47.UPDATE_DATE;

							row47_HashRow.DOWNLOAD_DATE = row47.DOWNLOAD_DATE;

							row47_HashRow.IMPORT_DATE = row47.IMPORT_DATE;

							row47_HashRow.SOURCESYSTEM_CD = row47.SOURCESYSTEM_CD;

							row47_HashRow.UPLOAD_ID = row47.UPLOAD_ID;

							tHash_Lookup_row47.put(row47_HashRow);

							tos_count_tAdvancedHash_row47++;

							/**
							 * [tAdvancedHash_row47 main ] stop
							 */

						} // End of branch "row47"

						/**
						 * [tFileInputDelimited_31 end ] start
						 */

						currentComponent = "tFileInputDelimited_31";

						nb_line_tFileInputDelimited_31++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_31 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_31 != null) {
							csvReadertFileInputDelimited_31.close();
						}
					}
					if (csvReadertFileInputDelimited_31 != null) {
						globalMap.put("tFileInputDelimited_31_NB_LINE",
								nb_line_tFileInputDelimited_31);
					}
				}

				ok_Hash.put("tFileInputDelimited_31", true);
				end_Hash.put("tFileInputDelimited_31",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_31 end ] stop
				 */

				/**
				 * [tAdvancedHash_row47 end ] start
				 */

				currentComponent = "tAdvancedHash_row47";

				tHash_Lookup_row47.endPut();

				ok_Hash.put("tAdvancedHash_row47", true);
				end_Hash.put("tAdvancedHash_row47", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row47 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_31_SUBPROCESS_STATE", 1);
	}

	public static class row48Struct implements
			routines.system.IPersistableComparableLookupRow<row48Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.CONCEPT_PATH == null) ? 0 : this.CONCEPT_PATH
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row48Struct other = (row48Struct) obj;

			if (this.CONCEPT_PATH == null) {
				if (other.CONCEPT_PATH != null)
					return false;
			} else if (!this.CONCEPT_PATH.equals(other.CONCEPT_PATH))
				return false;

			return true;
		}

		public void copyDataTo(row48Struct other) {

			other.CONCEPT_PATH = this.CONCEPT_PATH;
			other.CONCEPT_CD = this.CONCEPT_CD;
			other.NAME_CHAR = this.NAME_CHAR;
			other.CONCEPT_BLOB = this.CONCEPT_BLOB;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row48Struct other) {

			other.CONCEPT_PATH = this.CONCEPT_PATH;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.CONCEPT_CD = readString(dis, ois);

				this.NAME_CHAR = readString(dis, ois);

				this.CONCEPT_BLOB = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.CONCEPT_CD, dos, oos);

				writeString(this.NAME_CHAR, dos, oos);

				writeString(this.CONCEPT_BLOB, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row48Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CONCEPT_PATH,
					other.CONCEPT_PATH);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_32Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_32_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row48Struct row48 = new row48Struct();

				/**
				 * [tAdvancedHash_row48 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row48", false);
				start_Hash.put("tAdvancedHash_row48",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row48";

				int tos_count_tAdvancedHash_row48 = 0;

				// connection name:row48
				// source node:tFileInputDelimited_32 -
				// inputs:(after_tFileInputDelimited_1) outputs:(row48,row48) |
				// target node:tAdvancedHash_row48 - inputs:(row48) outputs:()
				// linked node: tMap_2 - inputs:(row4,row48)
				// outputs:(to_conc_dim)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row48 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row48Struct> tHash_Lookup_row48 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row48Struct> getLookup(matchingModeEnum_row48);

				globalMap.put("tHash_Lookup_row48", tHash_Lookup_row48);

				/**
				 * [tAdvancedHash_row48 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_32 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_32", false);
				start_Hash.put("tFileInputDelimited_32",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_32";

				int tos_count_tFileInputDelimited_32 = 0;

				int nb_line_tFileInputDelimited_32 = 0;
				int footer_tFileInputDelimited_32 = 0;
				int totalLinetFileInputDelimited_32 = 0;
				int limittFileInputDelimited_32 = -1;
				int lastLinetFileInputDelimited_32 = -1;

				char fieldSeparator_tFileInputDelimited_32[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_32 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_32[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_32 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_32 = /**
				 * Start field
				 * tFileInputDelimited_32:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_4_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_32:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_32 = null;

				try {

					String[] rowtFileInputDelimited_32 = null;
					int currentLinetFileInputDelimited_32 = 0;
					int outputLinetFileInputDelimited_32 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_32 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_32 = 0;
							if (footer_value_tFileInputDelimited_32 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_32 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_32,
									fieldSeparator_tFileInputDelimited_32[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_32 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_32)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_32[0]);
						}

						csvReadertFileInputDelimited_32
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_32[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_32[0] != '\r'))
							csvReadertFileInputDelimited_32.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_32[0]);

						csvReadertFileInputDelimited_32.setQuoteChar('"');

						csvReadertFileInputDelimited_32
								.setEscapeChar(csvReadertFileInputDelimited_32
										.getQuoteChar());

						if (footer_tFileInputDelimited_32 > 0) {
							for (totalLinetFileInputDelimited_32 = 0; totalLinetFileInputDelimited_32 < 1; totalLinetFileInputDelimited_32++) {
								csvReadertFileInputDelimited_32.readNext();
							}
							csvReadertFileInputDelimited_32
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_32.readNext()) {

								rowtFileInputDelimited_32 = csvReadertFileInputDelimited_32
										.getValues();
								if (!(rowtFileInputDelimited_32.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_32[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_32++;

								}

							}
							int lastLineTemptFileInputDelimited_32 = totalLinetFileInputDelimited_32
									- footer_tFileInputDelimited_32 < 0 ? 0
									: totalLinetFileInputDelimited_32
											- footer_tFileInputDelimited_32;
							if (lastLinetFileInputDelimited_32 > 0) {
								lastLinetFileInputDelimited_32 = lastLinetFileInputDelimited_32 < lastLineTemptFileInputDelimited_32 ? lastLinetFileInputDelimited_32
										: lastLineTemptFileInputDelimited_32;
							} else {
								lastLinetFileInputDelimited_32 = lastLineTemptFileInputDelimited_32;
							}

							csvReadertFileInputDelimited_32.close();
							if (filename_tFileInputDelimited_32 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_32 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_32,
										fieldSeparator_tFileInputDelimited_32[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_32 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_32)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_32[0]);
							}
							csvReadertFileInputDelimited_32
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_32[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_32[0] != '\r'))
								csvReadertFileInputDelimited_32
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_32[0]);

							csvReadertFileInputDelimited_32.setQuoteChar('"');

							csvReadertFileInputDelimited_32
									.setEscapeChar(csvReadertFileInputDelimited_32
											.getQuoteChar());

						}

						if (limittFileInputDelimited_32 != 0) {
							for (currentLinetFileInputDelimited_32 = 0; currentLinetFileInputDelimited_32 < 1; currentLinetFileInputDelimited_32++) {
								csvReadertFileInputDelimited_32.readNext();
							}
						}
						csvReadertFileInputDelimited_32
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_32 != 0
							&& csvReadertFileInputDelimited_32 != null
							&& csvReadertFileInputDelimited_32.readNext()) {

						rowtFileInputDelimited_32 = csvReadertFileInputDelimited_32
								.getValues();

						if (rowtFileInputDelimited_32.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_32[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_32++;

						if (lastLinetFileInputDelimited_32 > -1
								&& currentLinetFileInputDelimited_32 > lastLinetFileInputDelimited_32) {
							break;
						}
						outputLinetFileInputDelimited_32++;
						if (limittFileInputDelimited_32 > 0
								&& outputLinetFileInputDelimited_32 > limittFileInputDelimited_32) {
							break;
						}

						row48 = null;

						row48 = null;

						boolean whetherReject_tFileInputDelimited_32 = false;
						row48 = new row48Struct();
						try {

							if (rowtFileInputDelimited_32.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_32[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row48.CONCEPT_PATH = null;

								row48.CONCEPT_CD = null;

								row48.NAME_CHAR = null;

								row48.CONCEPT_BLOB = null;

								row48.UPDATE_DATE = null;

								row48.DOWNLOAD_DATE = null;

								row48.IMPORT_DATE = null;

								row48.SOURCESYSTEM_CD = null;

								row48.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_32 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_32 = 0;

								if (columnIndexWithD_tFileInputDelimited_32 < rowtFileInputDelimited_32.length) {

									row48.CONCEPT_PATH = rowtFileInputDelimited_32[columnIndexWithD_tFileInputDelimited_32];

								} else {
									row48.CONCEPT_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_32 = 1;

								if (columnIndexWithD_tFileInputDelimited_32 < rowtFileInputDelimited_32.length) {

									row48.CONCEPT_CD = rowtFileInputDelimited_32[columnIndexWithD_tFileInputDelimited_32];

								} else {
									row48.CONCEPT_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_32 = 2;

								if (columnIndexWithD_tFileInputDelimited_32 < rowtFileInputDelimited_32.length) {

									row48.NAME_CHAR = rowtFileInputDelimited_32[columnIndexWithD_tFileInputDelimited_32];

								} else {
									row48.NAME_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_32 = 3;

								if (columnIndexWithD_tFileInputDelimited_32 < rowtFileInputDelimited_32.length) {

									row48.CONCEPT_BLOB = rowtFileInputDelimited_32[columnIndexWithD_tFileInputDelimited_32];

								} else {
									row48.CONCEPT_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_32 = 4;

								if (columnIndexWithD_tFileInputDelimited_32 < rowtFileInputDelimited_32.length) {

									if (rowtFileInputDelimited_32[columnIndexWithD_tFileInputDelimited_32]
											.length() > 0) {

										row48.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_32[columnIndexWithD_tFileInputDelimited_32],
														"dd-MM-yyyy");

									} else {
										row48.UPDATE_DATE = null;
									}

								} else {
									row48.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_32 = 5;

								if (columnIndexWithD_tFileInputDelimited_32 < rowtFileInputDelimited_32.length) {

									if (rowtFileInputDelimited_32[columnIndexWithD_tFileInputDelimited_32]
											.length() > 0) {

										row48.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_32[columnIndexWithD_tFileInputDelimited_32],
														"dd-MM-yyyy");

									} else {
										row48.DOWNLOAD_DATE = null;
									}

								} else {
									row48.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_32 = 6;

								if (columnIndexWithD_tFileInputDelimited_32 < rowtFileInputDelimited_32.length) {

									if (rowtFileInputDelimited_32[columnIndexWithD_tFileInputDelimited_32]
											.length() > 0) {

										row48.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_32[columnIndexWithD_tFileInputDelimited_32],
														"dd-MM-yyyy");

									} else {
										row48.IMPORT_DATE = null;
									}

								} else {
									row48.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_32 = 7;

								if (columnIndexWithD_tFileInputDelimited_32 < rowtFileInputDelimited_32.length) {

									row48.SOURCESYSTEM_CD = rowtFileInputDelimited_32[columnIndexWithD_tFileInputDelimited_32];

								} else {
									row48.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_32 = 8;

								if (columnIndexWithD_tFileInputDelimited_32 < rowtFileInputDelimited_32.length) {

									row48.UPLOAD_ID = rowtFileInputDelimited_32[columnIndexWithD_tFileInputDelimited_32];

								} else {
									row48.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_32 = true;

							System.err.println(e.getMessage());
							row48 = null;

						}

						/**
						 * [tFileInputDelimited_32 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_32 main ] start
						 */

						currentComponent = "tFileInputDelimited_32";

						tos_count_tFileInputDelimited_32++;

						/**
						 * [tFileInputDelimited_32 main ] stop
						 */
						// Start of branch "row48"
						if (row48 != null) {

							/**
							 * [tAdvancedHash_row48 main ] start
							 */

							currentComponent = "tAdvancedHash_row48";

							row48Struct row48_HashRow = new row48Struct();

							row48_HashRow.CONCEPT_PATH = row48.CONCEPT_PATH;

							row48_HashRow.CONCEPT_CD = row48.CONCEPT_CD;

							row48_HashRow.NAME_CHAR = row48.NAME_CHAR;

							row48_HashRow.CONCEPT_BLOB = row48.CONCEPT_BLOB;

							row48_HashRow.UPDATE_DATE = row48.UPDATE_DATE;

							row48_HashRow.DOWNLOAD_DATE = row48.DOWNLOAD_DATE;

							row48_HashRow.IMPORT_DATE = row48.IMPORT_DATE;

							row48_HashRow.SOURCESYSTEM_CD = row48.SOURCESYSTEM_CD;

							row48_HashRow.UPLOAD_ID = row48.UPLOAD_ID;

							tHash_Lookup_row48.put(row48_HashRow);

							tos_count_tAdvancedHash_row48++;

							/**
							 * [tAdvancedHash_row48 main ] stop
							 */

						} // End of branch "row48"

						/**
						 * [tFileInputDelimited_32 end ] start
						 */

						currentComponent = "tFileInputDelimited_32";

						nb_line_tFileInputDelimited_32++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_32 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_32 != null) {
							csvReadertFileInputDelimited_32.close();
						}
					}
					if (csvReadertFileInputDelimited_32 != null) {
						globalMap.put("tFileInputDelimited_32_NB_LINE",
								nb_line_tFileInputDelimited_32);
					}
				}

				ok_Hash.put("tFileInputDelimited_32", true);
				end_Hash.put("tFileInputDelimited_32",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_32 end ] stop
				 */

				/**
				 * [tAdvancedHash_row48 end ] start
				 */

				currentComponent = "tAdvancedHash_row48";

				tHash_Lookup_row48.endPut();

				ok_Hash.put("tAdvancedHash_row48", true);
				end_Hash.put("tAdvancedHash_row48", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row48 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_32_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_4 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_4", false);
				start_Hash.put("tCreateTemporaryFile_4",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_4";

				int tos_count_tCreateTemporaryFile_4 = 0;

				java.io.File dir_tCreateTemporaryFile_4 = new java.io.File(
						context.folderMain + context.folderOutput);
				dir_tCreateTemporaryFile_4.mkdirs();
				String name_tCreateTemporaryFile_4 = "talend_04_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_4 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_4 = new java.io.File(
						dir_tCreateTemporaryFile_4, name_tCreateTemporaryFile_4
								+ "." + suffix_tCreateTemporaryFile_4);
				if (file_tCreateTemporaryFile_4.createNewFile()) {
					file_tCreateTemporaryFile_4.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_4_FILEPATH",
						file_tCreateTemporaryFile_4.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_4 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_4 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_4";

				tos_count_tCreateTemporaryFile_4++;

				/**
				 * [tCreateTemporaryFile_4 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_4 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_4";

				ok_Hash.put("tCreateTemporaryFile_4", true);
				end_Hash.put("tCreateTemporaryFile_4",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_4 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_4:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_3Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_4_SUBPROCESS_STATE", 1);
	}

	public static class from_src_conc_dimStruct
			implements
			routines.system.IPersistableComparableLookupRow<from_src_conc_dimStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.CONCEPT_PATH == null) ? 0 : this.CONCEPT_PATH
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final from_src_conc_dimStruct other = (from_src_conc_dimStruct) obj;

			if (this.CONCEPT_PATH == null) {
				if (other.CONCEPT_PATH != null)
					return false;
			} else if (!this.CONCEPT_PATH.equals(other.CONCEPT_PATH))
				return false;

			return true;
		}

		public void copyDataTo(from_src_conc_dimStruct other) {

			other.CONCEPT_PATH = this.CONCEPT_PATH;
			other.CONCEPT_CD = this.CONCEPT_CD;
			other.NAME_CHAR = this.NAME_CHAR;
			other.CONCEPT_BLOB = this.CONCEPT_BLOB;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(from_src_conc_dimStruct other) {

			other.CONCEPT_PATH = this.CONCEPT_PATH;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.CONCEPT_CD = readString(dis, ois);

				this.NAME_CHAR = readString(dis, ois);

				this.CONCEPT_BLOB = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.CONCEPT_CD, dos, oos);

				writeString(this.NAME_CHAR, dos, oos);

				writeString(this.CONCEPT_BLOB, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(from_src_conc_dimStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CONCEPT_PATH,
					other.CONCEPT_PATH);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				from_src_conc_dimStruct from_src_conc_dim = new from_src_conc_dimStruct();

				/**
				 * [tAdvancedHash_from_src_conc_dim begin ] start
				 */

				ok_Hash.put("tAdvancedHash_from_src_conc_dim", false);
				start_Hash.put("tAdvancedHash_from_src_conc_dim",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_from_src_conc_dim";

				int tos_count_tAdvancedHash_from_src_conc_dim = 0;

				// connection name:from_src_conc_dim
				// source node:tFileInputDelimited_4 -
				// inputs:(after_tFileInputDelimited_5)
				// outputs:(from_src_conc_dim,from_src_conc_dim) | target
				// node:tAdvancedHash_from_src_conc_dim -
				// inputs:(from_src_conc_dim) outputs:()
				// linked node: tMap_3 -
				// inputs:(from_oe_target_ont,from_src_conc_dim)
				// outputs:(to_tmap)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_from_src_conc_dim = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<from_src_conc_dimStruct> tHash_Lookup_from_src_conc_dim = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<from_src_conc_dimStruct>(
						matchingModeEnum_from_src_conc_dim,
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid
								+ "_Lookup_from_src_conc_dim_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public from_src_conc_dimStruct createRowInstance() {
								return new from_src_conc_dimStruct();
							}
						}

						, 200000

				);

				tHash_Lookup_from_src_conc_dim.initPut();

				globalMap.put("tHash_Lookup_from_src_conc_dim",
						tHash_Lookup_from_src_conc_dim);

				/**
				 * [tAdvancedHash_from_src_conc_dim begin ] stop
				 */

				/**
				 * [tFileInputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_4", false);
				start_Hash.put("tFileInputDelimited_4",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_4";

				int tos_count_tFileInputDelimited_4 = 0;

				int nb_line_tFileInputDelimited_4 = 0;
				int footer_tFileInputDelimited_4 = 0;
				int totalLinetFileInputDelimited_4 = 0;
				int limittFileInputDelimited_4 = -1;
				int lastLinetFileInputDelimited_4 = -1;

				char fieldSeparator_tFileInputDelimited_4[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_4 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_4[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_4 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_4 = /**
				 * Start field
				 * tFileInputDelimited_4:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_4_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_4:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_4 = null;

				try {

					String[] rowtFileInputDelimited_4 = null;
					int currentLinetFileInputDelimited_4 = 0;
					int outputLinetFileInputDelimited_4 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_4 = 0;
							if (footer_value_tFileInputDelimited_4 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_4,
									fieldSeparator_tFileInputDelimited_4[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_4)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_4[0]);
						}

						csvReadertFileInputDelimited_4.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_4[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_4[0] != '\r'))
							csvReadertFileInputDelimited_4.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_4[0]);

						csvReadertFileInputDelimited_4.setQuoteChar('"');

						csvReadertFileInputDelimited_4
								.setEscapeChar(csvReadertFileInputDelimited_4
										.getQuoteChar());

						if (footer_tFileInputDelimited_4 > 0) {
							for (totalLinetFileInputDelimited_4 = 0; totalLinetFileInputDelimited_4 < 1; totalLinetFileInputDelimited_4++) {
								csvReadertFileInputDelimited_4.readNext();
							}
							csvReadertFileInputDelimited_4
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_4.readNext()) {

								rowtFileInputDelimited_4 = csvReadertFileInputDelimited_4
										.getValues();
								if (!(rowtFileInputDelimited_4.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_4[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_4++;

								}

							}
							int lastLineTemptFileInputDelimited_4 = totalLinetFileInputDelimited_4
									- footer_tFileInputDelimited_4 < 0 ? 0
									: totalLinetFileInputDelimited_4
											- footer_tFileInputDelimited_4;
							if (lastLinetFileInputDelimited_4 > 0) {
								lastLinetFileInputDelimited_4 = lastLinetFileInputDelimited_4 < lastLineTemptFileInputDelimited_4 ? lastLinetFileInputDelimited_4
										: lastLineTemptFileInputDelimited_4;
							} else {
								lastLinetFileInputDelimited_4 = lastLineTemptFileInputDelimited_4;
							}

							csvReadertFileInputDelimited_4.close();
							if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_4,
										fieldSeparator_tFileInputDelimited_4[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_4)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_4[0]);
							}
							csvReadertFileInputDelimited_4
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_4[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_4[0] != '\r'))
								csvReadertFileInputDelimited_4
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_4[0]);

							csvReadertFileInputDelimited_4.setQuoteChar('"');

							csvReadertFileInputDelimited_4
									.setEscapeChar(csvReadertFileInputDelimited_4
											.getQuoteChar());

						}

						if (limittFileInputDelimited_4 != 0) {
							for (currentLinetFileInputDelimited_4 = 0; currentLinetFileInputDelimited_4 < 1; currentLinetFileInputDelimited_4++) {
								csvReadertFileInputDelimited_4.readNext();
							}
						}
						csvReadertFileInputDelimited_4
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_4 != 0
							&& csvReadertFileInputDelimited_4 != null
							&& csvReadertFileInputDelimited_4.readNext()) {

						rowtFileInputDelimited_4 = csvReadertFileInputDelimited_4
								.getValues();

						if (rowtFileInputDelimited_4.length == 1
								&& ("\015").equals(rowtFileInputDelimited_4[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_4++;

						if (lastLinetFileInputDelimited_4 > -1
								&& currentLinetFileInputDelimited_4 > lastLinetFileInputDelimited_4) {
							break;
						}
						outputLinetFileInputDelimited_4++;
						if (limittFileInputDelimited_4 > 0
								&& outputLinetFileInputDelimited_4 > limittFileInputDelimited_4) {
							break;
						}

						from_src_conc_dim = null;

						from_src_conc_dim = null;

						boolean whetherReject_tFileInputDelimited_4 = false;
						from_src_conc_dim = new from_src_conc_dimStruct();
						try {

							if (rowtFileInputDelimited_4.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_4[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								from_src_conc_dim.CONCEPT_PATH = null;

								from_src_conc_dim.CONCEPT_CD = null;

								from_src_conc_dim.NAME_CHAR = null;

								from_src_conc_dim.CONCEPT_BLOB = null;

								from_src_conc_dim.UPDATE_DATE = null;

								from_src_conc_dim.DOWNLOAD_DATE = null;

								from_src_conc_dim.IMPORT_DATE = null;

								from_src_conc_dim.SOURCESYSTEM_CD = null;

								from_src_conc_dim.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_4 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_4 = 0;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									from_src_conc_dim.CONCEPT_PATH = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									from_src_conc_dim.CONCEPT_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 1;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									from_src_conc_dim.CONCEPT_CD = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									from_src_conc_dim.CONCEPT_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 2;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									from_src_conc_dim.NAME_CHAR = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									from_src_conc_dim.NAME_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 3;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									from_src_conc_dim.CONCEPT_BLOB = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									from_src_conc_dim.CONCEPT_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 4;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									if (rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]
											.length() > 0) {

										from_src_conc_dim.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4],
														"dd-MM-yyyy");

									} else {
										from_src_conc_dim.UPDATE_DATE = null;
									}

								} else {
									from_src_conc_dim.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 5;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									if (rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]
											.length() > 0) {

										from_src_conc_dim.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4],
														"dd-MM-yyyy");

									} else {
										from_src_conc_dim.DOWNLOAD_DATE = null;
									}

								} else {
									from_src_conc_dim.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 6;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									if (rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]
											.length() > 0) {

										from_src_conc_dim.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4],
														"dd-MM-yyyy");

									} else {
										from_src_conc_dim.IMPORT_DATE = null;
									}

								} else {
									from_src_conc_dim.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 7;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									from_src_conc_dim.SOURCESYSTEM_CD = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									from_src_conc_dim.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 8;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									from_src_conc_dim.UPLOAD_ID = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									from_src_conc_dim.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_4 = true;

							System.err.println(e.getMessage());
							from_src_conc_dim = null;

						}

						/**
						 * [tFileInputDelimited_4 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_4 main ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						tos_count_tFileInputDelimited_4++;

						/**
						 * [tFileInputDelimited_4 main ] stop
						 */
						// Start of branch "from_src_conc_dim"
						if (from_src_conc_dim != null) {

							/**
							 * [tAdvancedHash_from_src_conc_dim main ] start
							 */

							currentComponent = "tAdvancedHash_from_src_conc_dim";

							from_src_conc_dimStruct from_src_conc_dim_HashRow = tHash_Lookup_from_src_conc_dim
									.getNextFreeRow();

							from_src_conc_dim_HashRow.CONCEPT_PATH = from_src_conc_dim.CONCEPT_PATH;

							from_src_conc_dim_HashRow.CONCEPT_CD = from_src_conc_dim.CONCEPT_CD;

							from_src_conc_dim_HashRow.NAME_CHAR = from_src_conc_dim.NAME_CHAR;

							from_src_conc_dim_HashRow.CONCEPT_BLOB = from_src_conc_dim.CONCEPT_BLOB;

							from_src_conc_dim_HashRow.UPDATE_DATE = from_src_conc_dim.UPDATE_DATE;

							from_src_conc_dim_HashRow.DOWNLOAD_DATE = from_src_conc_dim.DOWNLOAD_DATE;

							from_src_conc_dim_HashRow.IMPORT_DATE = from_src_conc_dim.IMPORT_DATE;

							from_src_conc_dim_HashRow.SOURCESYSTEM_CD = from_src_conc_dim.SOURCESYSTEM_CD;

							from_src_conc_dim_HashRow.UPLOAD_ID = from_src_conc_dim.UPLOAD_ID;

							tHash_Lookup_from_src_conc_dim
									.put(from_src_conc_dim_HashRow);

							tos_count_tAdvancedHash_from_src_conc_dim++;

							/**
							 * [tAdvancedHash_from_src_conc_dim main ] stop
							 */

						} // End of branch "from_src_conc_dim"

						/**
						 * [tFileInputDelimited_4 end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						nb_line_tFileInputDelimited_4++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_4 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_4 != null) {
							csvReadertFileInputDelimited_4.close();
						}
					}
					if (csvReadertFileInputDelimited_4 != null) {
						globalMap.put("tFileInputDelimited_4_NB_LINE",
								nb_line_tFileInputDelimited_4);
					}
				}

				ok_Hash.put("tFileInputDelimited_4", true);
				end_Hash.put("tFileInputDelimited_4",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_from_src_conc_dim end ] start
				 */

				currentComponent = "tAdvancedHash_from_src_conc_dim";

				tHash_Lookup_from_src_conc_dim.endPut();

				ok_Hash.put("tAdvancedHash_from_src_conc_dim", true);
				end_Hash.put("tAdvancedHash_from_src_conc_dim",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_from_src_conc_dim end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}

	public static class from_srxc_obsfctStruct
			implements
			routines.system.IPersistableComparableLookupRow<from_srxc_obsfctStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public String START_DATE;

		public String getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public String END_DATE;

		public String getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.CONCEPT_CD == null) ? 0 : this.CONCEPT_CD
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final from_srxc_obsfctStruct other = (from_srxc_obsfctStruct) obj;

			if (this.CONCEPT_CD == null) {
				if (other.CONCEPT_CD != null)
					return false;
			} else if (!this.CONCEPT_CD.equals(other.CONCEPT_CD))
				return false;

			return true;
		}

		public void copyDataTo(from_srxc_obsfctStruct other) {

			other.ENCOUNTER_NUM = this.ENCOUNTER_NUM;
			other.PATIENT_NUM = this.PATIENT_NUM;
			other.CONCEPT_CD = this.CONCEPT_CD;
			other.PROVIDER_ID = this.PROVIDER_ID;
			other.START_DATE = this.START_DATE;
			other.MODIFIER_CD = this.MODIFIER_CD;
			other.INSTANCE_NUM = this.INSTANCE_NUM;
			other.VALTYPE_CD = this.VALTYPE_CD;
			other.TVAL_CHAR = this.TVAL_CHAR;
			other.NVAL_NUM = this.NVAL_NUM;
			other.VALUEFLAG_CD = this.VALUEFLAG_CD;
			other.QUANTITY_NUM = this.QUANTITY_NUM;
			other.UNITS_CD = this.UNITS_CD;
			other.END_DATE = this.END_DATE;
			other.LOCATION_CD = this.LOCATION_CD;
			other.OBSERVATION_BLOB = this.OBSERVATION_BLOB;
			other.CONFIDENCE_NUM = this.CONFIDENCE_NUM;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(from_srxc_obsfctStruct other) {

			other.CONCEPT_CD = this.CONCEPT_CD;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.CONCEPT_CD = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_CD, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ENCOUNTER_NUM = (BigDecimal) ois.readObject();

				this.PATIENT_NUM = (BigDecimal) ois.readObject();

				this.PROVIDER_ID = readString(dis, ois);

				this.START_DATE = readString(dis, ois);

				this.MODIFIER_CD = readString(dis, ois);

				this.INSTANCE_NUM = readString(dis, ois);

				this.VALTYPE_CD = readString(dis, ois);

				this.TVAL_CHAR = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.NVAL_NUM = null;
				} else {
					this.NVAL_NUM = dis.readFloat();
				}

				this.VALUEFLAG_CD = readString(dis, ois);

				this.QUANTITY_NUM = readString(dis, ois);

				this.UNITS_CD = readString(dis, ois);

				this.END_DATE = readString(dis, ois);

				this.LOCATION_CD = readString(dis, ois);

				this.OBSERVATION_BLOB = readString(dis, ois);

				this.CONFIDENCE_NUM = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				oos.writeObject(this.ENCOUNTER_NUM);

				oos.writeObject(this.PATIENT_NUM);

				writeString(this.PROVIDER_ID, dos, oos);

				writeString(this.START_DATE, dos, oos);

				writeString(this.MODIFIER_CD, dos, oos);

				writeString(this.INSTANCE_NUM, dos, oos);

				writeString(this.VALTYPE_CD, dos, oos);

				writeString(this.TVAL_CHAR, dos, oos);

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				writeString(this.VALUEFLAG_CD, dos, oos);

				writeString(this.QUANTITY_NUM, dos, oos);

				writeString(this.UNITS_CD, dos, oos);

				writeString(this.END_DATE, dos, oos);

				writeString(this.LOCATION_CD, dos, oos);

				writeString(this.OBSERVATION_BLOB, dos, oos);

				writeString(this.CONFIDENCE_NUM, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + START_DATE);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + END_DATE);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(from_srxc_obsfctStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CONCEPT_CD,
					other.CONCEPT_CD);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				from_srxc_obsfctStruct from_srxc_obsfct = new from_srxc_obsfctStruct();

				/**
				 * [tAdvancedHash_from_srxc_obsfct begin ] start
				 */

				ok_Hash.put("tAdvancedHash_from_srxc_obsfct", false);
				start_Hash.put("tAdvancedHash_from_srxc_obsfct",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_from_srxc_obsfct";

				int tos_count_tAdvancedHash_from_srxc_obsfct = 0;

				// connection name:from_srxc_obsfct
				// source node:tFileInputDelimited_3 -
				// inputs:(after_tFileInputDelimited_5)
				// outputs:(from_srxc_obsfct,from_srxc_obsfct) | target
				// node:tAdvancedHash_from_srxc_obsfct -
				// inputs:(from_srxc_obsfct) outputs:()
				// linked node: tMap_4 - inputs:(to_tmap,from_srxc_obsfct)
				// outputs:(to_obs_fct)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_from_srxc_obsfct = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<from_srxc_obsfctStruct> tHash_Lookup_from_srxc_obsfct = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<from_srxc_obsfctStruct>(
						matchingModeEnum_from_srxc_obsfct,
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid
								+ "_Lookup_from_srxc_obsfct_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public from_srxc_obsfctStruct createRowInstance() {
								return new from_srxc_obsfctStruct();
							}
						}

						, 200000

				);

				tHash_Lookup_from_srxc_obsfct.initPut();

				globalMap.put("tHash_Lookup_from_srxc_obsfct",
						tHash_Lookup_from_srxc_obsfct);

				/**
				 * [tAdvancedHash_from_srxc_obsfct begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				int nb_line_tFileInputDelimited_3 = 0;
				int footer_tFileInputDelimited_3 = 0;
				int totalLinetFileInputDelimited_3 = 0;
				int limittFileInputDelimited_3 = -1;
				int lastLinetFileInputDelimited_3 = -1;

				char fieldSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_3 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_3 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_3 = /**
				 * Start field
				 * tFileInputDelimited_3:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_3_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_3:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_3 = null;

				try {

					String[] rowtFileInputDelimited_3 = null;
					int currentLinetFileInputDelimited_3 = 0;
					int outputLinetFileInputDelimited_3 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_3 = 0;
							if (footer_value_tFileInputDelimited_3 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_3,
									fieldSeparator_tFileInputDelimited_3[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_3)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_3[0]);
						}

						csvReadertFileInputDelimited_3.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
							csvReadertFileInputDelimited_3.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_3[0]);

						csvReadertFileInputDelimited_3.setQuoteChar('"');

						csvReadertFileInputDelimited_3
								.setEscapeChar(csvReadertFileInputDelimited_3
										.getQuoteChar());

						if (footer_tFileInputDelimited_3 > 0) {
							for (totalLinetFileInputDelimited_3 = 0; totalLinetFileInputDelimited_3 < 0; totalLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
							csvReadertFileInputDelimited_3
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_3.readNext()) {

								rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3
										.getValues();
								if (!(rowtFileInputDelimited_3.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_3[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_3++;

								}

							}
							int lastLineTemptFileInputDelimited_3 = totalLinetFileInputDelimited_3
									- footer_tFileInputDelimited_3 < 0 ? 0
									: totalLinetFileInputDelimited_3
											- footer_tFileInputDelimited_3;
							if (lastLinetFileInputDelimited_3 > 0) {
								lastLinetFileInputDelimited_3 = lastLinetFileInputDelimited_3 < lastLineTemptFileInputDelimited_3 ? lastLinetFileInputDelimited_3
										: lastLineTemptFileInputDelimited_3;
							} else {
								lastLinetFileInputDelimited_3 = lastLineTemptFileInputDelimited_3;
							}

							csvReadertFileInputDelimited_3.close();
							if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_3,
										fieldSeparator_tFileInputDelimited_3[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_3)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_3[0]);
							}
							csvReadertFileInputDelimited_3
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
								csvReadertFileInputDelimited_3
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_3[0]);

							csvReadertFileInputDelimited_3.setQuoteChar('"');

							csvReadertFileInputDelimited_3
									.setEscapeChar(csvReadertFileInputDelimited_3
											.getQuoteChar());

						}

						if (limittFileInputDelimited_3 != 0) {
							for (currentLinetFileInputDelimited_3 = 0; currentLinetFileInputDelimited_3 < 0; currentLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
						}
						csvReadertFileInputDelimited_3
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_3 != 0
							&& csvReadertFileInputDelimited_3 != null
							&& csvReadertFileInputDelimited_3.readNext()) {

						rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3
								.getValues();

						if (rowtFileInputDelimited_3.length == 1
								&& ("\015").equals(rowtFileInputDelimited_3[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_3++;

						if (lastLinetFileInputDelimited_3 > -1
								&& currentLinetFileInputDelimited_3 > lastLinetFileInputDelimited_3) {
							break;
						}
						outputLinetFileInputDelimited_3++;
						if (limittFileInputDelimited_3 > 0
								&& outputLinetFileInputDelimited_3 > limittFileInputDelimited_3) {
							break;
						}

						from_srxc_obsfct = null;

						from_srxc_obsfct = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						from_srxc_obsfct = new from_srxc_obsfctStruct();
						try {

							if (rowtFileInputDelimited_3.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_3[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								from_srxc_obsfct.ENCOUNTER_NUM = null;

								from_srxc_obsfct.PATIENT_NUM = null;

								from_srxc_obsfct.CONCEPT_CD = null;

								from_srxc_obsfct.PROVIDER_ID = null;

								from_srxc_obsfct.START_DATE = null;

								from_srxc_obsfct.MODIFIER_CD = null;

								from_srxc_obsfct.INSTANCE_NUM = null;

								from_srxc_obsfct.VALTYPE_CD = null;

								from_srxc_obsfct.TVAL_CHAR = null;

								from_srxc_obsfct.NVAL_NUM = null;

								from_srxc_obsfct.VALUEFLAG_CD = null;

								from_srxc_obsfct.QUANTITY_NUM = null;

								from_srxc_obsfct.UNITS_CD = null;

								from_srxc_obsfct.END_DATE = null;

								from_srxc_obsfct.LOCATION_CD = null;

								from_srxc_obsfct.OBSERVATION_BLOB = null;

								from_srxc_obsfct.CONFIDENCE_NUM = null;

								from_srxc_obsfct.UPDATE_DATE = null;

								from_srxc_obsfct.DOWNLOAD_DATE = null;

								from_srxc_obsfct.IMPORT_DATE = null;

								from_srxc_obsfct.SOURCESYSTEM_CD = null;

								from_srxc_obsfct.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_3 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_3 = 0;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]
											.length() > 0) {

										from_srxc_obsfct.ENCOUNTER_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);

									} else {
										from_srxc_obsfct.ENCOUNTER_NUM = null;
									}

								} else {
									from_srxc_obsfct.ENCOUNTER_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 1;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]
											.length() > 0) {

										from_srxc_obsfct.PATIENT_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);

									} else {
										from_srxc_obsfct.PATIENT_NUM = null;
									}

								} else {
									from_srxc_obsfct.PATIENT_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 2;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									from_srxc_obsfct.CONCEPT_CD = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									from_srxc_obsfct.CONCEPT_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 3;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									from_srxc_obsfct.PROVIDER_ID = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									from_srxc_obsfct.PROVIDER_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 4;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									from_srxc_obsfct.START_DATE = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									from_srxc_obsfct.START_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 5;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									from_srxc_obsfct.MODIFIER_CD = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									from_srxc_obsfct.MODIFIER_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 6;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									from_srxc_obsfct.INSTANCE_NUM = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									from_srxc_obsfct.INSTANCE_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 7;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									from_srxc_obsfct.VALTYPE_CD = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									from_srxc_obsfct.VALTYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 8;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									from_srxc_obsfct.TVAL_CHAR = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									from_srxc_obsfct.TVAL_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 9;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]
											.length() > 0) {

										from_srxc_obsfct.NVAL_NUM = ParserUtils
												.parseTo_Float(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);

									} else {
										from_srxc_obsfct.NVAL_NUM = null;
									}

								} else {
									from_srxc_obsfct.NVAL_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 10;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									from_srxc_obsfct.VALUEFLAG_CD = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									from_srxc_obsfct.VALUEFLAG_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 11;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									from_srxc_obsfct.QUANTITY_NUM = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									from_srxc_obsfct.QUANTITY_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 12;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									from_srxc_obsfct.UNITS_CD = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									from_srxc_obsfct.UNITS_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 13;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									from_srxc_obsfct.END_DATE = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									from_srxc_obsfct.END_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 14;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									from_srxc_obsfct.LOCATION_CD = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									from_srxc_obsfct.LOCATION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 15;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									from_srxc_obsfct.OBSERVATION_BLOB = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									from_srxc_obsfct.OBSERVATION_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 16;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									from_srxc_obsfct.CONFIDENCE_NUM = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									from_srxc_obsfct.CONFIDENCE_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 17;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]
											.length() > 0) {

										from_srxc_obsfct.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3],
														"yyyy-MM-dd");

									} else {
										from_srxc_obsfct.UPDATE_DATE = null;
									}

								} else {
									from_srxc_obsfct.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 18;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]
											.length() > 0) {

										from_srxc_obsfct.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3],
														"yyyy-MM-dd");

									} else {
										from_srxc_obsfct.DOWNLOAD_DATE = null;
									}

								} else {
									from_srxc_obsfct.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 19;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]
											.length() > 0) {

										from_srxc_obsfct.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3],
														"yyyy-MM-dd");

									} else {
										from_srxc_obsfct.IMPORT_DATE = null;
									}

								} else {
									from_srxc_obsfct.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 20;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									from_srxc_obsfct.SOURCESYSTEM_CD = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									from_srxc_obsfct.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 21;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									from_srxc_obsfct.UPLOAD_ID = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									from_srxc_obsfct.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							from_srxc_obsfct = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */
						// Start of branch "from_srxc_obsfct"
						if (from_srxc_obsfct != null) {

							/**
							 * [tAdvancedHash_from_srxc_obsfct main ] start
							 */

							currentComponent = "tAdvancedHash_from_srxc_obsfct";

							from_srxc_obsfctStruct from_srxc_obsfct_HashRow = tHash_Lookup_from_srxc_obsfct
									.getNextFreeRow();

							from_srxc_obsfct_HashRow.ENCOUNTER_NUM = from_srxc_obsfct.ENCOUNTER_NUM;

							from_srxc_obsfct_HashRow.PATIENT_NUM = from_srxc_obsfct.PATIENT_NUM;

							from_srxc_obsfct_HashRow.CONCEPT_CD = from_srxc_obsfct.CONCEPT_CD;

							from_srxc_obsfct_HashRow.PROVIDER_ID = from_srxc_obsfct.PROVIDER_ID;

							from_srxc_obsfct_HashRow.START_DATE = from_srxc_obsfct.START_DATE;

							from_srxc_obsfct_HashRow.MODIFIER_CD = from_srxc_obsfct.MODIFIER_CD;

							from_srxc_obsfct_HashRow.INSTANCE_NUM = from_srxc_obsfct.INSTANCE_NUM;

							from_srxc_obsfct_HashRow.VALTYPE_CD = from_srxc_obsfct.VALTYPE_CD;

							from_srxc_obsfct_HashRow.TVAL_CHAR = from_srxc_obsfct.TVAL_CHAR;

							from_srxc_obsfct_HashRow.NVAL_NUM = from_srxc_obsfct.NVAL_NUM;

							from_srxc_obsfct_HashRow.VALUEFLAG_CD = from_srxc_obsfct.VALUEFLAG_CD;

							from_srxc_obsfct_HashRow.QUANTITY_NUM = from_srxc_obsfct.QUANTITY_NUM;

							from_srxc_obsfct_HashRow.UNITS_CD = from_srxc_obsfct.UNITS_CD;

							from_srxc_obsfct_HashRow.END_DATE = from_srxc_obsfct.END_DATE;

							from_srxc_obsfct_HashRow.LOCATION_CD = from_srxc_obsfct.LOCATION_CD;

							from_srxc_obsfct_HashRow.OBSERVATION_BLOB = from_srxc_obsfct.OBSERVATION_BLOB;

							from_srxc_obsfct_HashRow.CONFIDENCE_NUM = from_srxc_obsfct.CONFIDENCE_NUM;

							from_srxc_obsfct_HashRow.UPDATE_DATE = from_srxc_obsfct.UPDATE_DATE;

							from_srxc_obsfct_HashRow.DOWNLOAD_DATE = from_srxc_obsfct.DOWNLOAD_DATE;

							from_srxc_obsfct_HashRow.IMPORT_DATE = from_srxc_obsfct.IMPORT_DATE;

							from_srxc_obsfct_HashRow.SOURCESYSTEM_CD = from_srxc_obsfct.SOURCESYSTEM_CD;

							from_srxc_obsfct_HashRow.UPLOAD_ID = from_srxc_obsfct.UPLOAD_ID;

							tHash_Lookup_from_srxc_obsfct
									.put(from_srxc_obsfct_HashRow);

							tos_count_tAdvancedHash_from_srxc_obsfct++;

							/**
							 * [tAdvancedHash_from_srxc_obsfct main ] stop
							 */

						} // End of branch "from_srxc_obsfct"

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						nb_line_tFileInputDelimited_3++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_3 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_3 != null) {
							csvReadertFileInputDelimited_3.close();
						}
					}
					if (csvReadertFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE",
								nb_line_tFileInputDelimited_3);
					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_from_srxc_obsfct end ] start
				 */

				currentComponent = "tAdvancedHash_from_srxc_obsfct";

				tHash_Lookup_from_srxc_obsfct.endPut();

				ok_Hash.put("tAdvancedHash_from_srxc_obsfct", true);
				end_Hash.put("tAdvancedHash_from_srxc_obsfct",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_from_srxc_obsfct end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public static class row14Struct implements
			routines.system.IPersistableComparableLookupRow<row14Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public String START_DATE;

		public String getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public String END_DATE;

		public String getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.PATIENT_NUM == null) ? 0 : this.PATIENT_NUM
								.hashCode());

				result = prime
						* result
						+ ((this.CONCEPT_CD == null) ? 0 : this.CONCEPT_CD
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row14Struct other = (row14Struct) obj;

			if (this.PATIENT_NUM == null) {
				if (other.PATIENT_NUM != null)
					return false;
			} else if (!this.PATIENT_NUM.equals(other.PATIENT_NUM))
				return false;

			if (this.CONCEPT_CD == null) {
				if (other.CONCEPT_CD != null)
					return false;
			} else if (!this.CONCEPT_CD.equals(other.CONCEPT_CD))
				return false;

			return true;
		}

		public void copyDataTo(row14Struct other) {

			other.ENCOUNTER_NUM = this.ENCOUNTER_NUM;
			other.PATIENT_NUM = this.PATIENT_NUM;
			other.CONCEPT_CD = this.CONCEPT_CD;
			other.PROVIDER_ID = this.PROVIDER_ID;
			other.START_DATE = this.START_DATE;
			other.MODIFIER_CD = this.MODIFIER_CD;
			other.INSTANCE_NUM = this.INSTANCE_NUM;
			other.VALTYPE_CD = this.VALTYPE_CD;
			other.TVAL_CHAR = this.TVAL_CHAR;
			other.NVAL_NUM = this.NVAL_NUM;
			other.VALUEFLAG_CD = this.VALUEFLAG_CD;
			other.QUANTITY_NUM = this.QUANTITY_NUM;
			other.UNITS_CD = this.UNITS_CD;
			other.END_DATE = this.END_DATE;
			other.LOCATION_CD = this.LOCATION_CD;
			other.OBSERVATION_BLOB = this.OBSERVATION_BLOB;
			other.CONFIDENCE_NUM = this.CONFIDENCE_NUM;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row14Struct other) {

			other.PATIENT_NUM = this.PATIENT_NUM;
			other.CONCEPT_CD = this.CONCEPT_CD;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ENCOUNTER_NUM = (BigDecimal) ois.readObject();

				this.PROVIDER_ID = readString(dis, ois);

				this.START_DATE = readString(dis, ois);

				this.MODIFIER_CD = readString(dis, ois);

				this.INSTANCE_NUM = readString(dis, ois);

				this.VALTYPE_CD = readString(dis, ois);

				this.TVAL_CHAR = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.NVAL_NUM = null;
				} else {
					this.NVAL_NUM = dis.readFloat();
				}

				this.VALUEFLAG_CD = readString(dis, ois);

				this.QUANTITY_NUM = readString(dis, ois);

				this.UNITS_CD = readString(dis, ois);

				this.END_DATE = readString(dis, ois);

				this.LOCATION_CD = readString(dis, ois);

				this.OBSERVATION_BLOB = readString(dis, ois);

				this.CONFIDENCE_NUM = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				oos.writeObject(this.ENCOUNTER_NUM);

				writeString(this.PROVIDER_ID, dos, oos);

				writeString(this.START_DATE, dos, oos);

				writeString(this.MODIFIER_CD, dos, oos);

				writeString(this.INSTANCE_NUM, dos, oos);

				writeString(this.VALTYPE_CD, dos, oos);

				writeString(this.TVAL_CHAR, dos, oos);

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				writeString(this.VALUEFLAG_CD, dos, oos);

				writeString(this.QUANTITY_NUM, dos, oos);

				writeString(this.UNITS_CD, dos, oos);

				writeString(this.END_DATE, dos, oos);

				writeString(this.LOCATION_CD, dos, oos);

				writeString(this.OBSERVATION_BLOB, dos, oos);

				writeString(this.CONFIDENCE_NUM, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + START_DATE);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + END_DATE);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PATIENT_NUM,
					other.PATIENT_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.CONCEPT_CD,
					other.CONCEPT_CD);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_11Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row14Struct row14 = new row14Struct();

				/**
				 * [tAdvancedHash_row14 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row14", false);
				start_Hash.put("tAdvancedHash_row14",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row14";

				int tos_count_tAdvancedHash_row14 = 0;

				// connection name:row14
				// source node:tFileInputDelimited_11 -
				// inputs:(after_tFileInputDelimited_5) outputs:(row14,row14) |
				// target node:tAdvancedHash_row14 - inputs:(row14) outputs:()
				// linked node: tMap_9 - inputs:(to_obs_fct,row14,row15)
				// outputs:(out1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row14 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row14Struct> tHash_Lookup_row14 = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row14Struct>(
						matchingModeEnum_row14,
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid
								+ "_Lookup_row14_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public row14Struct createRowInstance() {
								return new row14Struct();
							}
						}

						, 200000

				);

				tHash_Lookup_row14.initPut();

				globalMap.put("tHash_Lookup_row14", tHash_Lookup_row14);

				/**
				 * [tAdvancedHash_row14 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_11 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_11", false);
				start_Hash.put("tFileInputDelimited_11",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_11";

				int tos_count_tFileInputDelimited_11 = 0;

				int nb_line_tFileInputDelimited_11 = 0;
				int footer_tFileInputDelimited_11 = 0;
				int totalLinetFileInputDelimited_11 = 0;
				int limittFileInputDelimited_11 = -1;
				int lastLinetFileInputDelimited_11 = -1;

				char fieldSeparator_tFileInputDelimited_11[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_11 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_11[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_11 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_11 = /**
				 * Start field
				 * tFileInputDelimited_11:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_3_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_11:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_11 = null;

				try {

					String[] rowtFileInputDelimited_11 = null;
					int currentLinetFileInputDelimited_11 = 0;
					int outputLinetFileInputDelimited_11 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_11 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_11 = 0;
							if (footer_value_tFileInputDelimited_11 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_11 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_11,
									fieldSeparator_tFileInputDelimited_11[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_11 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_11)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_11[0]);
						}

						csvReadertFileInputDelimited_11
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_11[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_11[0] != '\r'))
							csvReadertFileInputDelimited_11.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_11[0]);

						csvReadertFileInputDelimited_11.setQuoteChar('"');

						csvReadertFileInputDelimited_11
								.setEscapeChar(csvReadertFileInputDelimited_11
										.getQuoteChar());

						if (footer_tFileInputDelimited_11 > 0) {
							for (totalLinetFileInputDelimited_11 = 0; totalLinetFileInputDelimited_11 < 0; totalLinetFileInputDelimited_11++) {
								csvReadertFileInputDelimited_11.readNext();
							}
							csvReadertFileInputDelimited_11
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_11.readNext()) {

								rowtFileInputDelimited_11 = csvReadertFileInputDelimited_11
										.getValues();
								if (!(rowtFileInputDelimited_11.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_11[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_11++;

								}

							}
							int lastLineTemptFileInputDelimited_11 = totalLinetFileInputDelimited_11
									- footer_tFileInputDelimited_11 < 0 ? 0
									: totalLinetFileInputDelimited_11
											- footer_tFileInputDelimited_11;
							if (lastLinetFileInputDelimited_11 > 0) {
								lastLinetFileInputDelimited_11 = lastLinetFileInputDelimited_11 < lastLineTemptFileInputDelimited_11 ? lastLinetFileInputDelimited_11
										: lastLineTemptFileInputDelimited_11;
							} else {
								lastLinetFileInputDelimited_11 = lastLineTemptFileInputDelimited_11;
							}

							csvReadertFileInputDelimited_11.close();
							if (filename_tFileInputDelimited_11 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_11 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_11,
										fieldSeparator_tFileInputDelimited_11[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_11 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_11)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_11[0]);
							}
							csvReadertFileInputDelimited_11
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_11[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_11[0] != '\r'))
								csvReadertFileInputDelimited_11
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_11[0]);

							csvReadertFileInputDelimited_11.setQuoteChar('"');

							csvReadertFileInputDelimited_11
									.setEscapeChar(csvReadertFileInputDelimited_11
											.getQuoteChar());

						}

						if (limittFileInputDelimited_11 != 0) {
							for (currentLinetFileInputDelimited_11 = 0; currentLinetFileInputDelimited_11 < 0; currentLinetFileInputDelimited_11++) {
								csvReadertFileInputDelimited_11.readNext();
							}
						}
						csvReadertFileInputDelimited_11
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_11 != 0
							&& csvReadertFileInputDelimited_11 != null
							&& csvReadertFileInputDelimited_11.readNext()) {

						rowtFileInputDelimited_11 = csvReadertFileInputDelimited_11
								.getValues();

						if (rowtFileInputDelimited_11.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_11[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_11++;

						if (lastLinetFileInputDelimited_11 > -1
								&& currentLinetFileInputDelimited_11 > lastLinetFileInputDelimited_11) {
							break;
						}
						outputLinetFileInputDelimited_11++;
						if (limittFileInputDelimited_11 > 0
								&& outputLinetFileInputDelimited_11 > limittFileInputDelimited_11) {
							break;
						}

						row14 = null;

						row14 = null;

						boolean whetherReject_tFileInputDelimited_11 = false;
						row14 = new row14Struct();
						try {

							if (rowtFileInputDelimited_11.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_11[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row14.ENCOUNTER_NUM = null;

								row14.PATIENT_NUM = null;

								row14.CONCEPT_CD = null;

								row14.PROVIDER_ID = null;

								row14.START_DATE = null;

								row14.MODIFIER_CD = null;

								row14.INSTANCE_NUM = null;

								row14.VALTYPE_CD = null;

								row14.TVAL_CHAR = null;

								row14.NVAL_NUM = null;

								row14.VALUEFLAG_CD = null;

								row14.QUANTITY_NUM = null;

								row14.UNITS_CD = null;

								row14.END_DATE = null;

								row14.LOCATION_CD = null;

								row14.OBSERVATION_BLOB = null;

								row14.CONFIDENCE_NUM = null;

								row14.UPDATE_DATE = null;

								row14.DOWNLOAD_DATE = null;

								row14.IMPORT_DATE = null;

								row14.SOURCESYSTEM_CD = null;

								row14.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_11 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_11 = 0;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									if (rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11]
											.length() > 0) {

										row14.ENCOUNTER_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11]);

									} else {
										row14.ENCOUNTER_NUM = null;
									}

								} else {
									row14.ENCOUNTER_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 1;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									if (rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11]
											.length() > 0) {

										row14.PATIENT_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11]);

									} else {
										row14.PATIENT_NUM = null;
									}

								} else {
									row14.PATIENT_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 2;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									row14.CONCEPT_CD = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

								} else {
									row14.CONCEPT_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 3;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									row14.PROVIDER_ID = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

								} else {
									row14.PROVIDER_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 4;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									row14.START_DATE = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

								} else {
									row14.START_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 5;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									row14.MODIFIER_CD = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

								} else {
									row14.MODIFIER_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 6;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									row14.INSTANCE_NUM = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

								} else {
									row14.INSTANCE_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 7;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									row14.VALTYPE_CD = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

								} else {
									row14.VALTYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 8;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									row14.TVAL_CHAR = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

								} else {
									row14.TVAL_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 9;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									if (rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11]
											.length() > 0) {

										row14.NVAL_NUM = ParserUtils
												.parseTo_Float(rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11]);

									} else {
										row14.NVAL_NUM = null;
									}

								} else {
									row14.NVAL_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 10;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									row14.VALUEFLAG_CD = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

								} else {
									row14.VALUEFLAG_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 11;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									row14.QUANTITY_NUM = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

								} else {
									row14.QUANTITY_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 12;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									row14.UNITS_CD = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

								} else {
									row14.UNITS_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 13;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									row14.END_DATE = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

								} else {
									row14.END_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 14;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									row14.LOCATION_CD = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

								} else {
									row14.LOCATION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 15;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									row14.OBSERVATION_BLOB = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

								} else {
									row14.OBSERVATION_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 16;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									row14.CONFIDENCE_NUM = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

								} else {
									row14.CONFIDENCE_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 17;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									if (rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11]
											.length() > 0) {

										row14.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11],
														"yyyy-MM-dd");

									} else {
										row14.UPDATE_DATE = null;
									}

								} else {
									row14.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 18;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									if (rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11]
											.length() > 0) {

										row14.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11],
														"yyyy-MM-dd");

									} else {
										row14.DOWNLOAD_DATE = null;
									}

								} else {
									row14.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 19;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									if (rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11]
											.length() > 0) {

										row14.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11],
														"yyyy-MM-dd");

									} else {
										row14.IMPORT_DATE = null;
									}

								} else {
									row14.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 20;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									row14.SOURCESYSTEM_CD = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

								} else {
									row14.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 21;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									row14.UPLOAD_ID = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

								} else {
									row14.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_11 = true;

							System.err.println(e.getMessage());
							row14 = null;

						}

						/**
						 * [tFileInputDelimited_11 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_11 main ] start
						 */

						currentComponent = "tFileInputDelimited_11";

						tos_count_tFileInputDelimited_11++;

						/**
						 * [tFileInputDelimited_11 main ] stop
						 */
						// Start of branch "row14"
						if (row14 != null) {

							/**
							 * [tAdvancedHash_row14 main ] start
							 */

							currentComponent = "tAdvancedHash_row14";

							row14Struct row14_HashRow = tHash_Lookup_row14
									.getNextFreeRow();

							row14_HashRow.ENCOUNTER_NUM = row14.ENCOUNTER_NUM;

							row14_HashRow.PATIENT_NUM = row14.PATIENT_NUM;

							row14_HashRow.CONCEPT_CD = row14.CONCEPT_CD;

							row14_HashRow.PROVIDER_ID = row14.PROVIDER_ID;

							row14_HashRow.START_DATE = row14.START_DATE;

							row14_HashRow.MODIFIER_CD = row14.MODIFIER_CD;

							row14_HashRow.INSTANCE_NUM = row14.INSTANCE_NUM;

							row14_HashRow.VALTYPE_CD = row14.VALTYPE_CD;

							row14_HashRow.TVAL_CHAR = row14.TVAL_CHAR;

							row14_HashRow.NVAL_NUM = row14.NVAL_NUM;

							row14_HashRow.VALUEFLAG_CD = row14.VALUEFLAG_CD;

							row14_HashRow.QUANTITY_NUM = row14.QUANTITY_NUM;

							row14_HashRow.UNITS_CD = row14.UNITS_CD;

							row14_HashRow.END_DATE = row14.END_DATE;

							row14_HashRow.LOCATION_CD = row14.LOCATION_CD;

							row14_HashRow.OBSERVATION_BLOB = row14.OBSERVATION_BLOB;

							row14_HashRow.CONFIDENCE_NUM = row14.CONFIDENCE_NUM;

							row14_HashRow.UPDATE_DATE = row14.UPDATE_DATE;

							row14_HashRow.DOWNLOAD_DATE = row14.DOWNLOAD_DATE;

							row14_HashRow.IMPORT_DATE = row14.IMPORT_DATE;

							row14_HashRow.SOURCESYSTEM_CD = row14.SOURCESYSTEM_CD;

							row14_HashRow.UPLOAD_ID = row14.UPLOAD_ID;

							tHash_Lookup_row14.put(row14_HashRow);

							tos_count_tAdvancedHash_row14++;

							/**
							 * [tAdvancedHash_row14 main ] stop
							 */

						} // End of branch "row14"

						/**
						 * [tFileInputDelimited_11 end ] start
						 */

						currentComponent = "tFileInputDelimited_11";

						nb_line_tFileInputDelimited_11++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_11 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_11 != null) {
							csvReadertFileInputDelimited_11.close();
						}
					}
					if (csvReadertFileInputDelimited_11 != null) {
						globalMap.put("tFileInputDelimited_11_NB_LINE",
								nb_line_tFileInputDelimited_11);
					}
				}

				ok_Hash.put("tFileInputDelimited_11", true);
				end_Hash.put("tFileInputDelimited_11",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_11 end ] stop
				 */

				/**
				 * [tAdvancedHash_row14 end ] start
				 */

				currentComponent = "tAdvancedHash_row14";

				tHash_Lookup_row14.endPut();

				ok_Hash.put("tAdvancedHash_row14", true);
				end_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row14 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_11_SUBPROCESS_STATE", 1);
	}

	public static class row15Struct implements
			routines.system.IPersistableComparableLookupRow<row15Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.CONCEPT_PATH == null) ? 0 : this.CONCEPT_PATH
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row15Struct other = (row15Struct) obj;

			if (this.CONCEPT_PATH == null) {
				if (other.CONCEPT_PATH != null)
					return false;
			} else if (!this.CONCEPT_PATH.equals(other.CONCEPT_PATH))
				return false;

			return true;
		}

		public void copyDataTo(row15Struct other) {

			other.CONCEPT_PATH = this.CONCEPT_PATH;
			other.CONCEPT_CD = this.CONCEPT_CD;
			other.NAME_CHAR = this.NAME_CHAR;
			other.CONCEPT_BLOB = this.CONCEPT_BLOB;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row15Struct other) {

			other.CONCEPT_PATH = this.CONCEPT_PATH;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.CONCEPT_CD = readString(dis, ois);

				this.NAME_CHAR = readString(dis, ois);

				this.CONCEPT_BLOB = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.CONCEPT_CD, dos, oos);

				writeString(this.NAME_CHAR, dos, oos);

				writeString(this.CONCEPT_BLOB, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CONCEPT_PATH,
					other.CONCEPT_PATH);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_10Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row15Struct row15 = new row15Struct();

				/**
				 * [tAdvancedHash_row15 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row15", false);
				start_Hash.put("tAdvancedHash_row15",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row15";

				int tos_count_tAdvancedHash_row15 = 0;

				// connection name:row15
				// source node:tFileInputDelimited_10 -
				// inputs:(after_tFileInputDelimited_5) outputs:(row15,row15) |
				// target node:tAdvancedHash_row15 - inputs:(row15) outputs:()
				// linked node: tMap_9 - inputs:(to_obs_fct,row14,row15)
				// outputs:(out1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row15 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row15Struct> tHash_Lookup_row15 = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row15Struct>(
						matchingModeEnum_row15,
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid
								+ "_Lookup_row15_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public row15Struct createRowInstance() {
								return new row15Struct();
							}
						}

						, 200000

				);

				tHash_Lookup_row15.initPut();

				globalMap.put("tHash_Lookup_row15", tHash_Lookup_row15);

				/**
				 * [tAdvancedHash_row15 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_10 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_10", false);
				start_Hash.put("tFileInputDelimited_10",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_10";

				int tos_count_tFileInputDelimited_10 = 0;

				int nb_line_tFileInputDelimited_10 = 0;
				int footer_tFileInputDelimited_10 = 0;
				int totalLinetFileInputDelimited_10 = 0;
				int limittFileInputDelimited_10 = -1;
				int lastLinetFileInputDelimited_10 = -1;

				char fieldSeparator_tFileInputDelimited_10[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_10 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_10[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_10 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_10 = /**
				 * Start field
				 * tFileInputDelimited_10:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_4_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_10:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_10 = null;

				try {

					String[] rowtFileInputDelimited_10 = null;
					int currentLinetFileInputDelimited_10 = 0;
					int outputLinetFileInputDelimited_10 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_10 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_10 = 0;
							if (footer_value_tFileInputDelimited_10 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_10 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_10,
									fieldSeparator_tFileInputDelimited_10[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_10 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_10)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_10[0]);
						}

						csvReadertFileInputDelimited_10
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_10[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_10[0] != '\r'))
							csvReadertFileInputDelimited_10.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_10[0]);

						csvReadertFileInputDelimited_10.setQuoteChar('"');

						csvReadertFileInputDelimited_10
								.setEscapeChar(csvReadertFileInputDelimited_10
										.getQuoteChar());

						if (footer_tFileInputDelimited_10 > 0) {
							for (totalLinetFileInputDelimited_10 = 0; totalLinetFileInputDelimited_10 < 1; totalLinetFileInputDelimited_10++) {
								csvReadertFileInputDelimited_10.readNext();
							}
							csvReadertFileInputDelimited_10
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_10.readNext()) {

								rowtFileInputDelimited_10 = csvReadertFileInputDelimited_10
										.getValues();
								if (!(rowtFileInputDelimited_10.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_10[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_10++;

								}

							}
							int lastLineTemptFileInputDelimited_10 = totalLinetFileInputDelimited_10
									- footer_tFileInputDelimited_10 < 0 ? 0
									: totalLinetFileInputDelimited_10
											- footer_tFileInputDelimited_10;
							if (lastLinetFileInputDelimited_10 > 0) {
								lastLinetFileInputDelimited_10 = lastLinetFileInputDelimited_10 < lastLineTemptFileInputDelimited_10 ? lastLinetFileInputDelimited_10
										: lastLineTemptFileInputDelimited_10;
							} else {
								lastLinetFileInputDelimited_10 = lastLineTemptFileInputDelimited_10;
							}

							csvReadertFileInputDelimited_10.close();
							if (filename_tFileInputDelimited_10 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_10 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_10,
										fieldSeparator_tFileInputDelimited_10[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_10 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_10)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_10[0]);
							}
							csvReadertFileInputDelimited_10
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_10[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_10[0] != '\r'))
								csvReadertFileInputDelimited_10
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_10[0]);

							csvReadertFileInputDelimited_10.setQuoteChar('"');

							csvReadertFileInputDelimited_10
									.setEscapeChar(csvReadertFileInputDelimited_10
											.getQuoteChar());

						}

						if (limittFileInputDelimited_10 != 0) {
							for (currentLinetFileInputDelimited_10 = 0; currentLinetFileInputDelimited_10 < 1; currentLinetFileInputDelimited_10++) {
								csvReadertFileInputDelimited_10.readNext();
							}
						}
						csvReadertFileInputDelimited_10
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_10 != 0
							&& csvReadertFileInputDelimited_10 != null
							&& csvReadertFileInputDelimited_10.readNext()) {

						rowtFileInputDelimited_10 = csvReadertFileInputDelimited_10
								.getValues();

						if (rowtFileInputDelimited_10.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_10[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_10++;

						if (lastLinetFileInputDelimited_10 > -1
								&& currentLinetFileInputDelimited_10 > lastLinetFileInputDelimited_10) {
							break;
						}
						outputLinetFileInputDelimited_10++;
						if (limittFileInputDelimited_10 > 0
								&& outputLinetFileInputDelimited_10 > limittFileInputDelimited_10) {
							break;
						}

						row15 = null;

						row15 = null;

						boolean whetherReject_tFileInputDelimited_10 = false;
						row15 = new row15Struct();
						try {

							if (rowtFileInputDelimited_10.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_10[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row15.CONCEPT_PATH = null;

								row15.CONCEPT_CD = null;

								row15.NAME_CHAR = null;

								row15.CONCEPT_BLOB = null;

								row15.UPDATE_DATE = null;

								row15.DOWNLOAD_DATE = null;

								row15.IMPORT_DATE = null;

								row15.SOURCESYSTEM_CD = null;

								row15.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_10 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_10 = 0;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row15.CONCEPT_PATH = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row15.CONCEPT_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 1;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row15.CONCEPT_CD = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row15.CONCEPT_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 2;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row15.NAME_CHAR = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row15.NAME_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 3;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row15.CONCEPT_BLOB = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row15.CONCEPT_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 4;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									if (rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10]
											.length() > 0) {

										row15.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10],
														"dd-MM-yyyy");

									} else {
										row15.UPDATE_DATE = null;
									}

								} else {
									row15.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 5;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									if (rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10]
											.length() > 0) {

										row15.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10],
														"dd-MM-yyyy");

									} else {
										row15.DOWNLOAD_DATE = null;
									}

								} else {
									row15.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 6;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									if (rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10]
											.length() > 0) {

										row15.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10],
														"dd-MM-yyyy");

									} else {
										row15.IMPORT_DATE = null;
									}

								} else {
									row15.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 7;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row15.SOURCESYSTEM_CD = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row15.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 8;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row15.UPLOAD_ID = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row15.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_10 = true;

							System.err.println(e.getMessage());
							row15 = null;

						}

						/**
						 * [tFileInputDelimited_10 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_10 main ] start
						 */

						currentComponent = "tFileInputDelimited_10";

						tos_count_tFileInputDelimited_10++;

						/**
						 * [tFileInputDelimited_10 main ] stop
						 */
						// Start of branch "row15"
						if (row15 != null) {

							/**
							 * [tAdvancedHash_row15 main ] start
							 */

							currentComponent = "tAdvancedHash_row15";

							row15Struct row15_HashRow = tHash_Lookup_row15
									.getNextFreeRow();

							row15_HashRow.CONCEPT_PATH = row15.CONCEPT_PATH;

							row15_HashRow.CONCEPT_CD = row15.CONCEPT_CD;

							row15_HashRow.NAME_CHAR = row15.NAME_CHAR;

							row15_HashRow.CONCEPT_BLOB = row15.CONCEPT_BLOB;

							row15_HashRow.UPDATE_DATE = row15.UPDATE_DATE;

							row15_HashRow.DOWNLOAD_DATE = row15.DOWNLOAD_DATE;

							row15_HashRow.IMPORT_DATE = row15.IMPORT_DATE;

							row15_HashRow.SOURCESYSTEM_CD = row15.SOURCESYSTEM_CD;

							row15_HashRow.UPLOAD_ID = row15.UPLOAD_ID;

							tHash_Lookup_row15.put(row15_HashRow);

							tos_count_tAdvancedHash_row15++;

							/**
							 * [tAdvancedHash_row15 main ] stop
							 */

						} // End of branch "row15"

						/**
						 * [tFileInputDelimited_10 end ] start
						 */

						currentComponent = "tFileInputDelimited_10";

						nb_line_tFileInputDelimited_10++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_10 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_10 != null) {
							csvReadertFileInputDelimited_10.close();
						}
					}
					if (csvReadertFileInputDelimited_10 != null) {
						globalMap.put("tFileInputDelimited_10_NB_LINE",
								nb_line_tFileInputDelimited_10);
					}
				}

				ok_Hash.put("tFileInputDelimited_10", true);
				end_Hash.put("tFileInputDelimited_10",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_10 end ] stop
				 */

				/**
				 * [tAdvancedHash_row15 end ] start
				 */

				currentComponent = "tAdvancedHash_row15";

				tHash_Lookup_row15.endPut();

				ok_Hash.put("tAdvancedHash_row15", true);
				end_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row15 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_10_SUBPROCESS_STATE", 1);
	}

	public static class row16Struct implements
			routines.system.IPersistableComparableLookupRow<row16Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.CONCEPT_PATH == null) ? 0 : this.CONCEPT_PATH
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row16Struct other = (row16Struct) obj;

			if (this.CONCEPT_PATH == null) {
				if (other.CONCEPT_PATH != null)
					return false;
			} else if (!this.CONCEPT_PATH.equals(other.CONCEPT_PATH))
				return false;

			return true;
		}

		public void copyDataTo(row16Struct other) {

			other.CONCEPT_PATH = this.CONCEPT_PATH;
			other.CONCEPT_CD = this.CONCEPT_CD;
			other.NAME_CHAR = this.NAME_CHAR;
			other.CONCEPT_BLOB = this.CONCEPT_BLOB;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row16Struct other) {

			other.CONCEPT_PATH = this.CONCEPT_PATH;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.CONCEPT_CD = readString(dis, ois);

				this.NAME_CHAR = readString(dis, ois);

				this.CONCEPT_BLOB = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.CONCEPT_CD, dos, oos);

				writeString(this.NAME_CHAR, dos, oos);

				writeString(this.CONCEPT_BLOB, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CONCEPT_PATH,
					other.CONCEPT_PATH);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_9Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row16Struct row16 = new row16Struct();

				/**
				 * [tAdvancedHash_row16 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row16", false);
				start_Hash.put("tAdvancedHash_row16",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row16";

				int tos_count_tAdvancedHash_row16 = 0;

				// connection name:row16
				// source node:tFileInputDelimited_9 -
				// inputs:(after_tFileInputDelimited_5) outputs:(row16,row16) |
				// target node:tAdvancedHash_row16 - inputs:(row16) outputs:()
				// linked node: tMap_8 - inputs:(out1,row16,row17)
				// outputs:(asddd)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row16 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row16Struct> tHash_Lookup_row16 = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row16Struct>(
						matchingModeEnum_row16,
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid
								+ "_Lookup_row16_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public row16Struct createRowInstance() {
								return new row16Struct();
							}
						}

						, 200000

				);

				tHash_Lookup_row16.initPut();

				globalMap.put("tHash_Lookup_row16", tHash_Lookup_row16);

				/**
				 * [tAdvancedHash_row16 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_9 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_9", false);
				start_Hash.put("tFileInputDelimited_9",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_9";

				int tos_count_tFileInputDelimited_9 = 0;

				int nb_line_tFileInputDelimited_9 = 0;
				int footer_tFileInputDelimited_9 = 0;
				int totalLinetFileInputDelimited_9 = 0;
				int limittFileInputDelimited_9 = -1;
				int lastLinetFileInputDelimited_9 = -1;

				char fieldSeparator_tFileInputDelimited_9[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_9 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_9[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_9 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_9 = /**
				 * Start field
				 * tFileInputDelimited_9:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_4_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_9:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_9 = null;

				try {

					String[] rowtFileInputDelimited_9 = null;
					int currentLinetFileInputDelimited_9 = 0;
					int outputLinetFileInputDelimited_9 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_9 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_9 = 0;
							if (footer_value_tFileInputDelimited_9 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_9,
									fieldSeparator_tFileInputDelimited_9[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_9)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_9[0]);
						}

						csvReadertFileInputDelimited_9.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_9[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_9[0] != '\r'))
							csvReadertFileInputDelimited_9.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_9[0]);

						csvReadertFileInputDelimited_9.setQuoteChar('"');

						csvReadertFileInputDelimited_9
								.setEscapeChar(csvReadertFileInputDelimited_9
										.getQuoteChar());

						if (footer_tFileInputDelimited_9 > 0) {
							for (totalLinetFileInputDelimited_9 = 0; totalLinetFileInputDelimited_9 < 1; totalLinetFileInputDelimited_9++) {
								csvReadertFileInputDelimited_9.readNext();
							}
							csvReadertFileInputDelimited_9
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_9.readNext()) {

								rowtFileInputDelimited_9 = csvReadertFileInputDelimited_9
										.getValues();
								if (!(rowtFileInputDelimited_9.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_9[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_9++;

								}

							}
							int lastLineTemptFileInputDelimited_9 = totalLinetFileInputDelimited_9
									- footer_tFileInputDelimited_9 < 0 ? 0
									: totalLinetFileInputDelimited_9
											- footer_tFileInputDelimited_9;
							if (lastLinetFileInputDelimited_9 > 0) {
								lastLinetFileInputDelimited_9 = lastLinetFileInputDelimited_9 < lastLineTemptFileInputDelimited_9 ? lastLinetFileInputDelimited_9
										: lastLineTemptFileInputDelimited_9;
							} else {
								lastLinetFileInputDelimited_9 = lastLineTemptFileInputDelimited_9;
							}

							csvReadertFileInputDelimited_9.close();
							if (filename_tFileInputDelimited_9 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_9,
										fieldSeparator_tFileInputDelimited_9[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_9)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_9[0]);
							}
							csvReadertFileInputDelimited_9
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_9[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_9[0] != '\r'))
								csvReadertFileInputDelimited_9
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_9[0]);

							csvReadertFileInputDelimited_9.setQuoteChar('"');

							csvReadertFileInputDelimited_9
									.setEscapeChar(csvReadertFileInputDelimited_9
											.getQuoteChar());

						}

						if (limittFileInputDelimited_9 != 0) {
							for (currentLinetFileInputDelimited_9 = 0; currentLinetFileInputDelimited_9 < 1; currentLinetFileInputDelimited_9++) {
								csvReadertFileInputDelimited_9.readNext();
							}
						}
						csvReadertFileInputDelimited_9
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_9 != 0
							&& csvReadertFileInputDelimited_9 != null
							&& csvReadertFileInputDelimited_9.readNext()) {

						rowtFileInputDelimited_9 = csvReadertFileInputDelimited_9
								.getValues();

						if (rowtFileInputDelimited_9.length == 1
								&& ("\015").equals(rowtFileInputDelimited_9[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_9++;

						if (lastLinetFileInputDelimited_9 > -1
								&& currentLinetFileInputDelimited_9 > lastLinetFileInputDelimited_9) {
							break;
						}
						outputLinetFileInputDelimited_9++;
						if (limittFileInputDelimited_9 > 0
								&& outputLinetFileInputDelimited_9 > limittFileInputDelimited_9) {
							break;
						}

						row16 = null;

						row16 = null;

						boolean whetherReject_tFileInputDelimited_9 = false;
						row16 = new row16Struct();
						try {

							if (rowtFileInputDelimited_9.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_9[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row16.CONCEPT_PATH = null;

								row16.CONCEPT_CD = null;

								row16.NAME_CHAR = null;

								row16.CONCEPT_BLOB = null;

								row16.UPDATE_DATE = null;

								row16.DOWNLOAD_DATE = null;

								row16.IMPORT_DATE = null;

								row16.SOURCESYSTEM_CD = null;

								row16.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_9 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_9 = 0;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row16.CONCEPT_PATH = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row16.CONCEPT_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 1;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row16.CONCEPT_CD = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row16.CONCEPT_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 2;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row16.NAME_CHAR = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row16.NAME_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 3;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row16.CONCEPT_BLOB = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row16.CONCEPT_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 4;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row16.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9],
														"dd-MM-yyyy");

									} else {
										row16.UPDATE_DATE = null;
									}

								} else {
									row16.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 5;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row16.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9],
														"dd-MM-yyyy");

									} else {
										row16.DOWNLOAD_DATE = null;
									}

								} else {
									row16.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 6;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row16.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9],
														"dd-MM-yyyy");

									} else {
										row16.IMPORT_DATE = null;
									}

								} else {
									row16.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 7;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row16.SOURCESYSTEM_CD = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row16.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 8;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row16.UPLOAD_ID = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row16.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_9 = true;

							System.err.println(e.getMessage());
							row16 = null;

						}

						/**
						 * [tFileInputDelimited_9 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_9 main ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						tos_count_tFileInputDelimited_9++;

						/**
						 * [tFileInputDelimited_9 main ] stop
						 */
						// Start of branch "row16"
						if (row16 != null) {

							/**
							 * [tAdvancedHash_row16 main ] start
							 */

							currentComponent = "tAdvancedHash_row16";

							row16Struct row16_HashRow = tHash_Lookup_row16
									.getNextFreeRow();

							row16_HashRow.CONCEPT_PATH = row16.CONCEPT_PATH;

							row16_HashRow.CONCEPT_CD = row16.CONCEPT_CD;

							row16_HashRow.NAME_CHAR = row16.NAME_CHAR;

							row16_HashRow.CONCEPT_BLOB = row16.CONCEPT_BLOB;

							row16_HashRow.UPDATE_DATE = row16.UPDATE_DATE;

							row16_HashRow.DOWNLOAD_DATE = row16.DOWNLOAD_DATE;

							row16_HashRow.IMPORT_DATE = row16.IMPORT_DATE;

							row16_HashRow.SOURCESYSTEM_CD = row16.SOURCESYSTEM_CD;

							row16_HashRow.UPLOAD_ID = row16.UPLOAD_ID;

							tHash_Lookup_row16.put(row16_HashRow);

							tos_count_tAdvancedHash_row16++;

							/**
							 * [tAdvancedHash_row16 main ] stop
							 */

						} // End of branch "row16"

						/**
						 * [tFileInputDelimited_9 end ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						nb_line_tFileInputDelimited_9++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_9 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_9 != null) {
							csvReadertFileInputDelimited_9.close();
						}
					}
					if (csvReadertFileInputDelimited_9 != null) {
						globalMap.put("tFileInputDelimited_9_NB_LINE",
								nb_line_tFileInputDelimited_9);
					}
				}

				ok_Hash.put("tFileInputDelimited_9", true);
				end_Hash.put("tFileInputDelimited_9",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_9 end ] stop
				 */

				/**
				 * [tAdvancedHash_row16 end ] start
				 */

				currentComponent = "tAdvancedHash_row16";

				tHash_Lookup_row16.endPut();

				ok_Hash.put("tAdvancedHash_row16", true);
				end_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row16 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 1);
	}

	public static class row17Struct implements
			routines.system.IPersistableComparableLookupRow<row17Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public String START_DATE;

		public String getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public String END_DATE;

		public String getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.PATIENT_NUM == null) ? 0 : this.PATIENT_NUM
								.hashCode());

				result = prime
						* result
						+ ((this.CONCEPT_CD == null) ? 0 : this.CONCEPT_CD
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row17Struct other = (row17Struct) obj;

			if (this.PATIENT_NUM == null) {
				if (other.PATIENT_NUM != null)
					return false;
			} else if (!this.PATIENT_NUM.equals(other.PATIENT_NUM))
				return false;

			if (this.CONCEPT_CD == null) {
				if (other.CONCEPT_CD != null)
					return false;
			} else if (!this.CONCEPT_CD.equals(other.CONCEPT_CD))
				return false;

			return true;
		}

		public void copyDataTo(row17Struct other) {

			other.ENCOUNTER_NUM = this.ENCOUNTER_NUM;
			other.PATIENT_NUM = this.PATIENT_NUM;
			other.CONCEPT_CD = this.CONCEPT_CD;
			other.PROVIDER_ID = this.PROVIDER_ID;
			other.START_DATE = this.START_DATE;
			other.MODIFIER_CD = this.MODIFIER_CD;
			other.INSTANCE_NUM = this.INSTANCE_NUM;
			other.VALTYPE_CD = this.VALTYPE_CD;
			other.TVAL_CHAR = this.TVAL_CHAR;
			other.NVAL_NUM = this.NVAL_NUM;
			other.VALUEFLAG_CD = this.VALUEFLAG_CD;
			other.QUANTITY_NUM = this.QUANTITY_NUM;
			other.UNITS_CD = this.UNITS_CD;
			other.END_DATE = this.END_DATE;
			other.LOCATION_CD = this.LOCATION_CD;
			other.OBSERVATION_BLOB = this.OBSERVATION_BLOB;
			other.CONFIDENCE_NUM = this.CONFIDENCE_NUM;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row17Struct other) {

			other.PATIENT_NUM = this.PATIENT_NUM;
			other.CONCEPT_CD = this.CONCEPT_CD;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ENCOUNTER_NUM = (BigDecimal) ois.readObject();

				this.PROVIDER_ID = readString(dis, ois);

				this.START_DATE = readString(dis, ois);

				this.MODIFIER_CD = readString(dis, ois);

				this.INSTANCE_NUM = readString(dis, ois);

				this.VALTYPE_CD = readString(dis, ois);

				this.TVAL_CHAR = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.NVAL_NUM = null;
				} else {
					this.NVAL_NUM = dis.readFloat();
				}

				this.VALUEFLAG_CD = readString(dis, ois);

				this.QUANTITY_NUM = readString(dis, ois);

				this.UNITS_CD = readString(dis, ois);

				this.END_DATE = readString(dis, ois);

				this.LOCATION_CD = readString(dis, ois);

				this.OBSERVATION_BLOB = readString(dis, ois);

				this.CONFIDENCE_NUM = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				oos.writeObject(this.ENCOUNTER_NUM);

				writeString(this.PROVIDER_ID, dos, oos);

				writeString(this.START_DATE, dos, oos);

				writeString(this.MODIFIER_CD, dos, oos);

				writeString(this.INSTANCE_NUM, dos, oos);

				writeString(this.VALTYPE_CD, dos, oos);

				writeString(this.TVAL_CHAR, dos, oos);

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				writeString(this.VALUEFLAG_CD, dos, oos);

				writeString(this.QUANTITY_NUM, dos, oos);

				writeString(this.UNITS_CD, dos, oos);

				writeString(this.END_DATE, dos, oos);

				writeString(this.LOCATION_CD, dos, oos);

				writeString(this.OBSERVATION_BLOB, dos, oos);

				writeString(this.CONFIDENCE_NUM, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + START_DATE);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + END_DATE);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PATIENT_NUM,
					other.PATIENT_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.CONCEPT_CD,
					other.CONCEPT_CD);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_12Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row17Struct row17 = new row17Struct();

				/**
				 * [tAdvancedHash_row17 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row17", false);
				start_Hash.put("tAdvancedHash_row17",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row17";

				int tos_count_tAdvancedHash_row17 = 0;

				// connection name:row17
				// source node:tFileInputDelimited_12 -
				// inputs:(after_tFileInputDelimited_5) outputs:(row17,row17) |
				// target node:tAdvancedHash_row17 - inputs:(row17) outputs:()
				// linked node: tMap_8 - inputs:(out1,row16,row17)
				// outputs:(asddd)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row17 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row17Struct> tHash_Lookup_row17 = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row17Struct>(
						matchingModeEnum_row17,
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid
								+ "_Lookup_row17_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public row17Struct createRowInstance() {
								return new row17Struct();
							}
						}

						, 200000

				);

				tHash_Lookup_row17.initPut();

				globalMap.put("tHash_Lookup_row17", tHash_Lookup_row17);

				/**
				 * [tAdvancedHash_row17 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_12 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_12", false);
				start_Hash.put("tFileInputDelimited_12",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_12";

				int tos_count_tFileInputDelimited_12 = 0;

				int nb_line_tFileInputDelimited_12 = 0;
				int footer_tFileInputDelimited_12 = 0;
				int totalLinetFileInputDelimited_12 = 0;
				int limittFileInputDelimited_12 = -1;
				int lastLinetFileInputDelimited_12 = -1;

				char fieldSeparator_tFileInputDelimited_12[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_12 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_12[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_12 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_12 = /**
				 * Start field
				 * tFileInputDelimited_12:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_3_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_12:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_12 = null;

				try {

					String[] rowtFileInputDelimited_12 = null;
					int currentLinetFileInputDelimited_12 = 0;
					int outputLinetFileInputDelimited_12 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_12 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_12 = 0;
							if (footer_value_tFileInputDelimited_12 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_12 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_12,
									fieldSeparator_tFileInputDelimited_12[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_12 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_12)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_12[0]);
						}

						csvReadertFileInputDelimited_12
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_12[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_12[0] != '\r'))
							csvReadertFileInputDelimited_12.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_12[0]);

						csvReadertFileInputDelimited_12.setQuoteChar('"');

						csvReadertFileInputDelimited_12
								.setEscapeChar(csvReadertFileInputDelimited_12
										.getQuoteChar());

						if (footer_tFileInputDelimited_12 > 0) {
							for (totalLinetFileInputDelimited_12 = 0; totalLinetFileInputDelimited_12 < 0; totalLinetFileInputDelimited_12++) {
								csvReadertFileInputDelimited_12.readNext();
							}
							csvReadertFileInputDelimited_12
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_12.readNext()) {

								rowtFileInputDelimited_12 = csvReadertFileInputDelimited_12
										.getValues();
								if (!(rowtFileInputDelimited_12.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_12[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_12++;

								}

							}
							int lastLineTemptFileInputDelimited_12 = totalLinetFileInputDelimited_12
									- footer_tFileInputDelimited_12 < 0 ? 0
									: totalLinetFileInputDelimited_12
											- footer_tFileInputDelimited_12;
							if (lastLinetFileInputDelimited_12 > 0) {
								lastLinetFileInputDelimited_12 = lastLinetFileInputDelimited_12 < lastLineTemptFileInputDelimited_12 ? lastLinetFileInputDelimited_12
										: lastLineTemptFileInputDelimited_12;
							} else {
								lastLinetFileInputDelimited_12 = lastLineTemptFileInputDelimited_12;
							}

							csvReadertFileInputDelimited_12.close();
							if (filename_tFileInputDelimited_12 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_12 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_12,
										fieldSeparator_tFileInputDelimited_12[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_12 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_12)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_12[0]);
							}
							csvReadertFileInputDelimited_12
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_12[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_12[0] != '\r'))
								csvReadertFileInputDelimited_12
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_12[0]);

							csvReadertFileInputDelimited_12.setQuoteChar('"');

							csvReadertFileInputDelimited_12
									.setEscapeChar(csvReadertFileInputDelimited_12
											.getQuoteChar());

						}

						if (limittFileInputDelimited_12 != 0) {
							for (currentLinetFileInputDelimited_12 = 0; currentLinetFileInputDelimited_12 < 0; currentLinetFileInputDelimited_12++) {
								csvReadertFileInputDelimited_12.readNext();
							}
						}
						csvReadertFileInputDelimited_12
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_12 != 0
							&& csvReadertFileInputDelimited_12 != null
							&& csvReadertFileInputDelimited_12.readNext()) {

						rowtFileInputDelimited_12 = csvReadertFileInputDelimited_12
								.getValues();

						if (rowtFileInputDelimited_12.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_12[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_12++;

						if (lastLinetFileInputDelimited_12 > -1
								&& currentLinetFileInputDelimited_12 > lastLinetFileInputDelimited_12) {
							break;
						}
						outputLinetFileInputDelimited_12++;
						if (limittFileInputDelimited_12 > 0
								&& outputLinetFileInputDelimited_12 > limittFileInputDelimited_12) {
							break;
						}

						row17 = null;

						row17 = null;

						boolean whetherReject_tFileInputDelimited_12 = false;
						row17 = new row17Struct();
						try {

							if (rowtFileInputDelimited_12.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_12[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row17.ENCOUNTER_NUM = null;

								row17.PATIENT_NUM = null;

								row17.CONCEPT_CD = null;

								row17.PROVIDER_ID = null;

								row17.START_DATE = null;

								row17.MODIFIER_CD = null;

								row17.INSTANCE_NUM = null;

								row17.VALTYPE_CD = null;

								row17.TVAL_CHAR = null;

								row17.NVAL_NUM = null;

								row17.VALUEFLAG_CD = null;

								row17.QUANTITY_NUM = null;

								row17.UNITS_CD = null;

								row17.END_DATE = null;

								row17.LOCATION_CD = null;

								row17.OBSERVATION_BLOB = null;

								row17.CONFIDENCE_NUM = null;

								row17.UPDATE_DATE = null;

								row17.DOWNLOAD_DATE = null;

								row17.IMPORT_DATE = null;

								row17.SOURCESYSTEM_CD = null;

								row17.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_12 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_12 = 0;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									if (rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]
											.length() > 0) {

										row17.ENCOUNTER_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]);

									} else {
										row17.ENCOUNTER_NUM = null;
									}

								} else {
									row17.ENCOUNTER_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 1;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									if (rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]
											.length() > 0) {

										row17.PATIENT_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]);

									} else {
										row17.PATIENT_NUM = null;
									}

								} else {
									row17.PATIENT_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 2;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row17.CONCEPT_CD = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row17.CONCEPT_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 3;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row17.PROVIDER_ID = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row17.PROVIDER_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 4;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row17.START_DATE = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row17.START_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 5;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row17.MODIFIER_CD = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row17.MODIFIER_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 6;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row17.INSTANCE_NUM = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row17.INSTANCE_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 7;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row17.VALTYPE_CD = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row17.VALTYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 8;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row17.TVAL_CHAR = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row17.TVAL_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 9;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									if (rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]
											.length() > 0) {

										row17.NVAL_NUM = ParserUtils
												.parseTo_Float(rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]);

									} else {
										row17.NVAL_NUM = null;
									}

								} else {
									row17.NVAL_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 10;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row17.VALUEFLAG_CD = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row17.VALUEFLAG_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 11;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row17.QUANTITY_NUM = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row17.QUANTITY_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 12;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row17.UNITS_CD = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row17.UNITS_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 13;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row17.END_DATE = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row17.END_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 14;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row17.LOCATION_CD = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row17.LOCATION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 15;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row17.OBSERVATION_BLOB = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row17.OBSERVATION_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 16;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row17.CONFIDENCE_NUM = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row17.CONFIDENCE_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 17;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									if (rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]
											.length() > 0) {

										row17.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12],
														"yyyy-MM-dd");

									} else {
										row17.UPDATE_DATE = null;
									}

								} else {
									row17.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 18;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									if (rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]
											.length() > 0) {

										row17.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12],
														"yyyy-MM-dd");

									} else {
										row17.DOWNLOAD_DATE = null;
									}

								} else {
									row17.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 19;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									if (rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]
											.length() > 0) {

										row17.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12],
														"yyyy-MM-dd");

									} else {
										row17.IMPORT_DATE = null;
									}

								} else {
									row17.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 20;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row17.SOURCESYSTEM_CD = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row17.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 21;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row17.UPLOAD_ID = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row17.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_12 = true;

							System.err.println(e.getMessage());
							row17 = null;

						}

						/**
						 * [tFileInputDelimited_12 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_12 main ] start
						 */

						currentComponent = "tFileInputDelimited_12";

						tos_count_tFileInputDelimited_12++;

						/**
						 * [tFileInputDelimited_12 main ] stop
						 */
						// Start of branch "row17"
						if (row17 != null) {

							/**
							 * [tAdvancedHash_row17 main ] start
							 */

							currentComponent = "tAdvancedHash_row17";

							row17Struct row17_HashRow = tHash_Lookup_row17
									.getNextFreeRow();

							row17_HashRow.ENCOUNTER_NUM = row17.ENCOUNTER_NUM;

							row17_HashRow.PATIENT_NUM = row17.PATIENT_NUM;

							row17_HashRow.CONCEPT_CD = row17.CONCEPT_CD;

							row17_HashRow.PROVIDER_ID = row17.PROVIDER_ID;

							row17_HashRow.START_DATE = row17.START_DATE;

							row17_HashRow.MODIFIER_CD = row17.MODIFIER_CD;

							row17_HashRow.INSTANCE_NUM = row17.INSTANCE_NUM;

							row17_HashRow.VALTYPE_CD = row17.VALTYPE_CD;

							row17_HashRow.TVAL_CHAR = row17.TVAL_CHAR;

							row17_HashRow.NVAL_NUM = row17.NVAL_NUM;

							row17_HashRow.VALUEFLAG_CD = row17.VALUEFLAG_CD;

							row17_HashRow.QUANTITY_NUM = row17.QUANTITY_NUM;

							row17_HashRow.UNITS_CD = row17.UNITS_CD;

							row17_HashRow.END_DATE = row17.END_DATE;

							row17_HashRow.LOCATION_CD = row17.LOCATION_CD;

							row17_HashRow.OBSERVATION_BLOB = row17.OBSERVATION_BLOB;

							row17_HashRow.CONFIDENCE_NUM = row17.CONFIDENCE_NUM;

							row17_HashRow.UPDATE_DATE = row17.UPDATE_DATE;

							row17_HashRow.DOWNLOAD_DATE = row17.DOWNLOAD_DATE;

							row17_HashRow.IMPORT_DATE = row17.IMPORT_DATE;

							row17_HashRow.SOURCESYSTEM_CD = row17.SOURCESYSTEM_CD;

							row17_HashRow.UPLOAD_ID = row17.UPLOAD_ID;

							tHash_Lookup_row17.put(row17_HashRow);

							tos_count_tAdvancedHash_row17++;

							/**
							 * [tAdvancedHash_row17 main ] stop
							 */

						} // End of branch "row17"

						/**
						 * [tFileInputDelimited_12 end ] start
						 */

						currentComponent = "tFileInputDelimited_12";

						nb_line_tFileInputDelimited_12++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_12 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_12 != null) {
							csvReadertFileInputDelimited_12.close();
						}
					}
					if (csvReadertFileInputDelimited_12 != null) {
						globalMap.put("tFileInputDelimited_12_NB_LINE",
								nb_line_tFileInputDelimited_12);
					}
				}

				ok_Hash.put("tFileInputDelimited_12", true);
				end_Hash.put("tFileInputDelimited_12",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_12 end ] stop
				 */

				/**
				 * [tAdvancedHash_row17 end ] start
				 */

				currentComponent = "tAdvancedHash_row17";

				tHash_Lookup_row17.endPut();

				ok_Hash.put("tAdvancedHash_row17", true);
				end_Hash.put("tAdvancedHash_row17", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row17 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_12_SUBPROCESS_STATE", 1);
	}

	public static class row9Struct implements
			routines.system.IPersistableComparableLookupRow<row9Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.PATIENT_NUM == null) ? 0 : this.PATIENT_NUM
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row9Struct other = (row9Struct) obj;

			if (this.PATIENT_NUM == null) {
				if (other.PATIENT_NUM != null)
					return false;
			} else if (!this.PATIENT_NUM.equals(other.PATIENT_NUM))
				return false;

			return true;
		}

		public void copyDataTo(row9Struct other) {

			other.PATIENT_IDE = this.PATIENT_IDE;
			other.PATIENT_IDE_SOURCE = this.PATIENT_IDE_SOURCE;
			other.PATIENT_NUM = this.PATIENT_NUM;
			other.PATIENT_IDE_STATUS = this.PATIENT_IDE_STATUS;
			other.UPLOAD_DATE = this.UPLOAD_DATE;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row9Struct other) {

			other.PATIENT_NUM = this.PATIENT_NUM;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.PATIENT_IDE = readString(dis, ois);

				this.PATIENT_IDE_SOURCE = readString(dis, ois);

				this.PATIENT_IDE_STATUS = readString(dis, ois);

				this.UPLOAD_DATE = readDate(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.PATIENT_IDE, dos, oos);

				writeString(this.PATIENT_IDE_SOURCE, dos, oos);

				writeString(this.PATIENT_IDE_STATUS, dos, oos);

				writeDate(this.UPLOAD_DATE, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PATIENT_NUM,
					other.PATIENT_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();

				/**
				 * [tAdvancedHash_row9 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row9", false);
				start_Hash
						.put("tAdvancedHash_row9", System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row9";

				int tos_count_tAdvancedHash_row9 = 0;

				// connection name:row9
				// source node:tFileInputDelimited_6 -
				// inputs:(after_tFileInputDelimited_5) outputs:(row9,row9) |
				// target node:tAdvancedHash_row9 - inputs:(row9) outputs:()
				// linked node: tMap_6 - inputs:(to_patient_mapping,row9)
				// outputs:(to_pat_mapping,asdd)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row9 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row9Struct> tHash_Lookup_row9 = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row9Struct>(
						matchingModeEnum_row9,
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid
								+ "_Lookup_row9_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public row9Struct createRowInstance() {
								return new row9Struct();
							}
						}

						, 200000

				);

				tHash_Lookup_row9.initPut();

				globalMap.put("tHash_Lookup_row9", tHash_Lookup_row9);

				/**
				 * [tAdvancedHash_row9 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_6", false);
				start_Hash.put("tFileInputDelimited_6",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_6";

				int tos_count_tFileInputDelimited_6 = 0;

				int nb_line_tFileInputDelimited_6 = 0;
				int footer_tFileInputDelimited_6 = 0;
				int totalLinetFileInputDelimited_6 = 0;
				int limittFileInputDelimited_6 = -1;
				int lastLinetFileInputDelimited_6 = -1;

				char fieldSeparator_tFileInputDelimited_6[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_6 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_6[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_6 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_6 = /**
				 * Start field
				 * tFileInputDelimited_6:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_5_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_6:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_6 = null;

				try {

					String[] rowtFileInputDelimited_6 = null;
					int currentLinetFileInputDelimited_6 = 0;
					int outputLinetFileInputDelimited_6 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_6 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_6 = 0;
							if (footer_value_tFileInputDelimited_6 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_6,
									fieldSeparator_tFileInputDelimited_6[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_6)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_6[0]);
						}

						csvReadertFileInputDelimited_6.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_6[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_6[0] != '\r'))
							csvReadertFileInputDelimited_6.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_6[0]);

						csvReadertFileInputDelimited_6.setQuoteChar('"');

						csvReadertFileInputDelimited_6
								.setEscapeChar(csvReadertFileInputDelimited_6
										.getQuoteChar());

						if (footer_tFileInputDelimited_6 > 0) {
							for (totalLinetFileInputDelimited_6 = 0; totalLinetFileInputDelimited_6 < 1; totalLinetFileInputDelimited_6++) {
								csvReadertFileInputDelimited_6.readNext();
							}
							csvReadertFileInputDelimited_6
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_6.readNext()) {

								rowtFileInputDelimited_6 = csvReadertFileInputDelimited_6
										.getValues();
								if (!(rowtFileInputDelimited_6.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_6[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_6++;

								}

							}
							int lastLineTemptFileInputDelimited_6 = totalLinetFileInputDelimited_6
									- footer_tFileInputDelimited_6 < 0 ? 0
									: totalLinetFileInputDelimited_6
											- footer_tFileInputDelimited_6;
							if (lastLinetFileInputDelimited_6 > 0) {
								lastLinetFileInputDelimited_6 = lastLinetFileInputDelimited_6 < lastLineTemptFileInputDelimited_6 ? lastLinetFileInputDelimited_6
										: lastLineTemptFileInputDelimited_6;
							} else {
								lastLinetFileInputDelimited_6 = lastLineTemptFileInputDelimited_6;
							}

							csvReadertFileInputDelimited_6.close();
							if (filename_tFileInputDelimited_6 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_6,
										fieldSeparator_tFileInputDelimited_6[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_6)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_6[0]);
							}
							csvReadertFileInputDelimited_6
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_6[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_6[0] != '\r'))
								csvReadertFileInputDelimited_6
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_6[0]);

							csvReadertFileInputDelimited_6.setQuoteChar('"');

							csvReadertFileInputDelimited_6
									.setEscapeChar(csvReadertFileInputDelimited_6
											.getQuoteChar());

						}

						if (limittFileInputDelimited_6 != 0) {
							for (currentLinetFileInputDelimited_6 = 0; currentLinetFileInputDelimited_6 < 1; currentLinetFileInputDelimited_6++) {
								csvReadertFileInputDelimited_6.readNext();
							}
						}
						csvReadertFileInputDelimited_6
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_6 != 0
							&& csvReadertFileInputDelimited_6 != null
							&& csvReadertFileInputDelimited_6.readNext()) {

						rowtFileInputDelimited_6 = csvReadertFileInputDelimited_6
								.getValues();

						if (rowtFileInputDelimited_6.length == 1
								&& ("\015").equals(rowtFileInputDelimited_6[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_6++;

						if (lastLinetFileInputDelimited_6 > -1
								&& currentLinetFileInputDelimited_6 > lastLinetFileInputDelimited_6) {
							break;
						}
						outputLinetFileInputDelimited_6++;
						if (limittFileInputDelimited_6 > 0
								&& outputLinetFileInputDelimited_6 > limittFileInputDelimited_6) {
							break;
						}

						row9 = null;

						row9 = null;

						boolean whetherReject_tFileInputDelimited_6 = false;
						row9 = new row9Struct();
						try {

							if (rowtFileInputDelimited_6.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_6[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row9.PATIENT_IDE = null;

								row9.PATIENT_IDE_SOURCE = null;

								row9.PATIENT_NUM = null;

								row9.PATIENT_IDE_STATUS = null;

								row9.UPLOAD_DATE = null;

								row9.UPDATE_DATE = null;

								row9.DOWNLOAD_DATE = null;

								row9.IMPORT_DATE = null;

								row9.SOURCESYSTEM_CD = null;

								row9.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_6 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_6 = 0;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row9.PATIENT_IDE = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row9.PATIENT_IDE = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 1;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row9.PATIENT_IDE_SOURCE = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row9.PATIENT_IDE_SOURCE = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 2;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									if (rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]
											.length() > 0) {

										row9.PATIENT_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]);

									} else {
										row9.PATIENT_NUM = null;
									}

								} else {
									row9.PATIENT_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 3;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row9.PATIENT_IDE_STATUS = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row9.PATIENT_IDE_STATUS = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 4;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									if (rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]
											.length() > 0) {

										row9.UPLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6],
														"dd-MM-yyyy");

									} else {
										row9.UPLOAD_DATE = null;
									}

								} else {
									row9.UPLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 5;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									if (rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]
											.length() > 0) {

										row9.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6],
														"dd-MM-yyyy");

									} else {
										row9.UPDATE_DATE = null;
									}

								} else {
									row9.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 6;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									if (rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]
											.length() > 0) {

										row9.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6],
														"dd-MM-yyyy");

									} else {
										row9.DOWNLOAD_DATE = null;
									}

								} else {
									row9.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 7;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									if (rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]
											.length() > 0) {

										row9.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6],
														"dd-MM-yyyy");

									} else {
										row9.IMPORT_DATE = null;
									}

								} else {
									row9.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 8;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row9.SOURCESYSTEM_CD = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row9.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 9;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row9.UPLOAD_ID = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row9.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_6 = true;

							System.err.println(e.getMessage());
							row9 = null;

						}

						/**
						 * [tFileInputDelimited_6 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_6 main ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						tos_count_tFileInputDelimited_6++;

						/**
						 * [tFileInputDelimited_6 main ] stop
						 */
						// Start of branch "row9"
						if (row9 != null) {

							/**
							 * [tAdvancedHash_row9 main ] start
							 */

							currentComponent = "tAdvancedHash_row9";

							row9Struct row9_HashRow = tHash_Lookup_row9
									.getNextFreeRow();

							row9_HashRow.PATIENT_IDE = row9.PATIENT_IDE;

							row9_HashRow.PATIENT_IDE_SOURCE = row9.PATIENT_IDE_SOURCE;

							row9_HashRow.PATIENT_NUM = row9.PATIENT_NUM;

							row9_HashRow.PATIENT_IDE_STATUS = row9.PATIENT_IDE_STATUS;

							row9_HashRow.UPLOAD_DATE = row9.UPLOAD_DATE;

							row9_HashRow.UPDATE_DATE = row9.UPDATE_DATE;

							row9_HashRow.DOWNLOAD_DATE = row9.DOWNLOAD_DATE;

							row9_HashRow.IMPORT_DATE = row9.IMPORT_DATE;

							row9_HashRow.SOURCESYSTEM_CD = row9.SOURCESYSTEM_CD;

							row9_HashRow.UPLOAD_ID = row9.UPLOAD_ID;

							tHash_Lookup_row9.put(row9_HashRow);

							tos_count_tAdvancedHash_row9++;

							/**
							 * [tAdvancedHash_row9 main ] stop
							 */

						} // End of branch "row9"

						/**
						 * [tFileInputDelimited_6 end ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						nb_line_tFileInputDelimited_6++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_6 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_6 != null) {
							csvReadertFileInputDelimited_6.close();
						}
					}
					if (csvReadertFileInputDelimited_6 != null) {
						globalMap.put("tFileInputDelimited_6_NB_LINE",
								nb_line_tFileInputDelimited_6);
					}
				}

				ok_Hash.put("tFileInputDelimited_6", true);
				end_Hash.put("tFileInputDelimited_6",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_6 end ] stop
				 */

				/**
				 * [tAdvancedHash_row9 end ] start
				 */

				currentComponent = "tAdvancedHash_row9";

				tHash_Lookup_row9.endPut();

				ok_Hash.put("tAdvancedHash_row9", true);
				end_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row9 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 1);
	}

	public static class row10Struct implements
			routines.system.IPersistableComparableLookupRow<row10Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String VITAL_STATUS_CD;

		public String getVITAL_STATUS_CD() {
			return this.VITAL_STATUS_CD;
		}

		public String BIRTH_DATE;

		public String getBIRTH_DATE() {
			return this.BIRTH_DATE;
		}

		public String DEATH_DATE;

		public String getDEATH_DATE() {
			return this.DEATH_DATE;
		}

		public String SEX_CD;

		public String getSEX_CD() {
			return this.SEX_CD;
		}

		public String AGE_IN_YEARS_NUM;

		public String getAGE_IN_YEARS_NUM() {
			return this.AGE_IN_YEARS_NUM;
		}

		public String LANGUAGE_CD;

		public String getLANGUAGE_CD() {
			return this.LANGUAGE_CD;
		}

		public String RACE_CD;

		public String getRACE_CD() {
			return this.RACE_CD;
		}

		public String MARITAL_STATUS_CD;

		public String getMARITAL_STATUS_CD() {
			return this.MARITAL_STATUS_CD;
		}

		public String RELIGION_CD;

		public String getRELIGION_CD() {
			return this.RELIGION_CD;
		}

		public String ZIP_CD;

		public String getZIP_CD() {
			return this.ZIP_CD;
		}

		public String STATECITYZIP_PATH;

		public String getSTATECITYZIP_PATH() {
			return this.STATECITYZIP_PATH;
		}

		public String INCOME_CD;

		public String getINCOME_CD() {
			return this.INCOME_CD;
		}

		public String PATIENT_BLOB;

		public String getPATIENT_BLOB() {
			return this.PATIENT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.PATIENT_NUM == null) ? 0 : this.PATIENT_NUM
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row10Struct other = (row10Struct) obj;

			if (this.PATIENT_NUM == null) {
				if (other.PATIENT_NUM != null)
					return false;
			} else if (!this.PATIENT_NUM.equals(other.PATIENT_NUM))
				return false;

			return true;
		}

		public void copyDataTo(row10Struct other) {

			other.PATIENT_NUM = this.PATIENT_NUM;
			other.VITAL_STATUS_CD = this.VITAL_STATUS_CD;
			other.BIRTH_DATE = this.BIRTH_DATE;
			other.DEATH_DATE = this.DEATH_DATE;
			other.SEX_CD = this.SEX_CD;
			other.AGE_IN_YEARS_NUM = this.AGE_IN_YEARS_NUM;
			other.LANGUAGE_CD = this.LANGUAGE_CD;
			other.RACE_CD = this.RACE_CD;
			other.MARITAL_STATUS_CD = this.MARITAL_STATUS_CD;
			other.RELIGION_CD = this.RELIGION_CD;
			other.ZIP_CD = this.ZIP_CD;
			other.STATECITYZIP_PATH = this.STATECITYZIP_PATH;
			other.INCOME_CD = this.INCOME_CD;
			other.PATIENT_BLOB = this.PATIENT_BLOB;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row10Struct other) {

			other.PATIENT_NUM = this.PATIENT_NUM;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.VITAL_STATUS_CD = readString(dis, ois);

				this.BIRTH_DATE = readString(dis, ois);

				this.DEATH_DATE = readString(dis, ois);

				this.SEX_CD = readString(dis, ois);

				this.AGE_IN_YEARS_NUM = readString(dis, ois);

				this.LANGUAGE_CD = readString(dis, ois);

				this.RACE_CD = readString(dis, ois);

				this.MARITAL_STATUS_CD = readString(dis, ois);

				this.RELIGION_CD = readString(dis, ois);

				this.ZIP_CD = readString(dis, ois);

				this.STATECITYZIP_PATH = readString(dis, ois);

				this.INCOME_CD = readString(dis, ois);

				this.PATIENT_BLOB = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.VITAL_STATUS_CD, dos, oos);

				writeString(this.BIRTH_DATE, dos, oos);

				writeString(this.DEATH_DATE, dos, oos);

				writeString(this.SEX_CD, dos, oos);

				writeString(this.AGE_IN_YEARS_NUM, dos, oos);

				writeString(this.LANGUAGE_CD, dos, oos);

				writeString(this.RACE_CD, dos, oos);

				writeString(this.MARITAL_STATUS_CD, dos, oos);

				writeString(this.RELIGION_CD, dos, oos);

				writeString(this.ZIP_CD, dos, oos);

				writeString(this.STATECITYZIP_PATH, dos, oos);

				writeString(this.INCOME_CD, dos, oos);

				writeString(this.PATIENT_BLOB, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",VITAL_STATUS_CD=" + VITAL_STATUS_CD);
			sb.append(",BIRTH_DATE=" + BIRTH_DATE);
			sb.append(",DEATH_DATE=" + DEATH_DATE);
			sb.append(",SEX_CD=" + SEX_CD);
			sb.append(",AGE_IN_YEARS_NUM=" + AGE_IN_YEARS_NUM);
			sb.append(",LANGUAGE_CD=" + LANGUAGE_CD);
			sb.append(",RACE_CD=" + RACE_CD);
			sb.append(",MARITAL_STATUS_CD=" + MARITAL_STATUS_CD);
			sb.append(",RELIGION_CD=" + RELIGION_CD);
			sb.append(",ZIP_CD=" + ZIP_CD);
			sb.append(",STATECITYZIP_PATH=" + STATECITYZIP_PATH);
			sb.append(",INCOME_CD=" + INCOME_CD);
			sb.append(",PATIENT_BLOB=" + PATIENT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PATIENT_NUM,
					other.PATIENT_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row10Struct row10 = new row10Struct();

				/**
				 * [tAdvancedHash_row10 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row10", false);
				start_Hash.put("tAdvancedHash_row10",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row10";

				int tos_count_tAdvancedHash_row10 = 0;

				// connection name:row10
				// source node:tFileInputDelimited_7 -
				// inputs:(after_tFileInputDelimited_5) outputs:(row10,row10) |
				// target node:tAdvancedHash_row10 - inputs:(row10) outputs:()
				// linked node: tMap_7 - inputs:(asdd,row10) outputs:(asd)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row10 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row10Struct> tHash_Lookup_row10 = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row10Struct>(
						matchingModeEnum_row10,
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid
								+ "_Lookup_row10_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public row10Struct createRowInstance() {
								return new row10Struct();
							}
						}

						, 200000

				);

				tHash_Lookup_row10.initPut();

				globalMap.put("tHash_Lookup_row10", tHash_Lookup_row10);

				/**
				 * [tAdvancedHash_row10 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_7", false);
				start_Hash.put("tFileInputDelimited_7",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_7";

				int tos_count_tFileInputDelimited_7 = 0;

				int nb_line_tFileInputDelimited_7 = 0;
				int footer_tFileInputDelimited_7 = 0;
				int totalLinetFileInputDelimited_7 = 0;
				int limittFileInputDelimited_7 = -1;
				int lastLinetFileInputDelimited_7 = -1;

				char fieldSeparator_tFileInputDelimited_7[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_7 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_7[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_7 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_7 = /**
				 * Start field
				 * tFileInputDelimited_7:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_6_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_7:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_7 = null;

				try {

					String[] rowtFileInputDelimited_7 = null;
					int currentLinetFileInputDelimited_7 = 0;
					int outputLinetFileInputDelimited_7 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_7 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_7 = 0;
							if (footer_value_tFileInputDelimited_7 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_7,
									fieldSeparator_tFileInputDelimited_7[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_7)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_7[0]);
						}

						csvReadertFileInputDelimited_7.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_7[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_7[0] != '\r'))
							csvReadertFileInputDelimited_7.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_7[0]);

						csvReadertFileInputDelimited_7.setQuoteChar('"');

						csvReadertFileInputDelimited_7
								.setEscapeChar(csvReadertFileInputDelimited_7
										.getQuoteChar());

						if (footer_tFileInputDelimited_7 > 0) {
							for (totalLinetFileInputDelimited_7 = 0; totalLinetFileInputDelimited_7 < 1; totalLinetFileInputDelimited_7++) {
								csvReadertFileInputDelimited_7.readNext();
							}
							csvReadertFileInputDelimited_7
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_7.readNext()) {

								rowtFileInputDelimited_7 = csvReadertFileInputDelimited_7
										.getValues();
								if (!(rowtFileInputDelimited_7.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_7[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_7++;

								}

							}
							int lastLineTemptFileInputDelimited_7 = totalLinetFileInputDelimited_7
									- footer_tFileInputDelimited_7 < 0 ? 0
									: totalLinetFileInputDelimited_7
											- footer_tFileInputDelimited_7;
							if (lastLinetFileInputDelimited_7 > 0) {
								lastLinetFileInputDelimited_7 = lastLinetFileInputDelimited_7 < lastLineTemptFileInputDelimited_7 ? lastLinetFileInputDelimited_7
										: lastLineTemptFileInputDelimited_7;
							} else {
								lastLinetFileInputDelimited_7 = lastLineTemptFileInputDelimited_7;
							}

							csvReadertFileInputDelimited_7.close();
							if (filename_tFileInputDelimited_7 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_7,
										fieldSeparator_tFileInputDelimited_7[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_7)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_7[0]);
							}
							csvReadertFileInputDelimited_7
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_7[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_7[0] != '\r'))
								csvReadertFileInputDelimited_7
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_7[0]);

							csvReadertFileInputDelimited_7.setQuoteChar('"');

							csvReadertFileInputDelimited_7
									.setEscapeChar(csvReadertFileInputDelimited_7
											.getQuoteChar());

						}

						if (limittFileInputDelimited_7 != 0) {
							for (currentLinetFileInputDelimited_7 = 0; currentLinetFileInputDelimited_7 < 1; currentLinetFileInputDelimited_7++) {
								csvReadertFileInputDelimited_7.readNext();
							}
						}
						csvReadertFileInputDelimited_7
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_7 != 0
							&& csvReadertFileInputDelimited_7 != null
							&& csvReadertFileInputDelimited_7.readNext()) {

						rowtFileInputDelimited_7 = csvReadertFileInputDelimited_7
								.getValues();

						if (rowtFileInputDelimited_7.length == 1
								&& ("\015").equals(rowtFileInputDelimited_7[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_7++;

						if (lastLinetFileInputDelimited_7 > -1
								&& currentLinetFileInputDelimited_7 > lastLinetFileInputDelimited_7) {
							break;
						}
						outputLinetFileInputDelimited_7++;
						if (limittFileInputDelimited_7 > 0
								&& outputLinetFileInputDelimited_7 > limittFileInputDelimited_7) {
							break;
						}

						row10 = null;

						row10 = null;

						boolean whetherReject_tFileInputDelimited_7 = false;
						row10 = new row10Struct();
						try {

							if (rowtFileInputDelimited_7.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_7[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row10.PATIENT_NUM = null;

								row10.VITAL_STATUS_CD = null;

								row10.BIRTH_DATE = null;

								row10.DEATH_DATE = null;

								row10.SEX_CD = null;

								row10.AGE_IN_YEARS_NUM = null;

								row10.LANGUAGE_CD = null;

								row10.RACE_CD = null;

								row10.MARITAL_STATUS_CD = null;

								row10.RELIGION_CD = null;

								row10.ZIP_CD = null;

								row10.STATECITYZIP_PATH = null;

								row10.INCOME_CD = null;

								row10.PATIENT_BLOB = null;

								row10.UPDATE_DATE = null;

								row10.DOWNLOAD_DATE = null;

								row10.IMPORT_DATE = null;

								row10.SOURCESYSTEM_CD = null;

								row10.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_7 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_7 = 0;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									if (rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]
											.length() > 0) {

										row10.PATIENT_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]);

									} else {
										row10.PATIENT_NUM = null;
									}

								} else {
									row10.PATIENT_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 1;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row10.VITAL_STATUS_CD = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row10.VITAL_STATUS_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 2;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row10.BIRTH_DATE = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row10.BIRTH_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 3;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row10.DEATH_DATE = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row10.DEATH_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 4;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row10.SEX_CD = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row10.SEX_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 5;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row10.AGE_IN_YEARS_NUM = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row10.AGE_IN_YEARS_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 6;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row10.LANGUAGE_CD = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row10.LANGUAGE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 7;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row10.RACE_CD = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row10.RACE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 8;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row10.MARITAL_STATUS_CD = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row10.MARITAL_STATUS_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 9;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row10.RELIGION_CD = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row10.RELIGION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 10;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row10.ZIP_CD = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row10.ZIP_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 11;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row10.STATECITYZIP_PATH = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row10.STATECITYZIP_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 12;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row10.INCOME_CD = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row10.INCOME_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 13;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row10.PATIENT_BLOB = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row10.PATIENT_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 14;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									if (rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]
											.length() > 0) {

										row10.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7],
														"dd-MM-yyyy");

									} else {
										row10.UPDATE_DATE = null;
									}

								} else {
									row10.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 15;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									if (rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]
											.length() > 0) {

										row10.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7],
														"dd-MM-yyyy");

									} else {
										row10.DOWNLOAD_DATE = null;
									}

								} else {
									row10.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 16;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									if (rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]
											.length() > 0) {

										row10.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7],
														"dd-MM-yyyy");

									} else {
										row10.IMPORT_DATE = null;
									}

								} else {
									row10.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 17;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row10.SOURCESYSTEM_CD = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row10.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 18;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row10.UPLOAD_ID = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row10.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_7 = true;

							System.err.println(e.getMessage());
							row10 = null;

						}

						/**
						 * [tFileInputDelimited_7 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_7 main ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						tos_count_tFileInputDelimited_7++;

						/**
						 * [tFileInputDelimited_7 main ] stop
						 */
						// Start of branch "row10"
						if (row10 != null) {

							/**
							 * [tAdvancedHash_row10 main ] start
							 */

							currentComponent = "tAdvancedHash_row10";

							row10Struct row10_HashRow = tHash_Lookup_row10
									.getNextFreeRow();

							row10_HashRow.PATIENT_NUM = row10.PATIENT_NUM;

							row10_HashRow.VITAL_STATUS_CD = row10.VITAL_STATUS_CD;

							row10_HashRow.BIRTH_DATE = row10.BIRTH_DATE;

							row10_HashRow.DEATH_DATE = row10.DEATH_DATE;

							row10_HashRow.SEX_CD = row10.SEX_CD;

							row10_HashRow.AGE_IN_YEARS_NUM = row10.AGE_IN_YEARS_NUM;

							row10_HashRow.LANGUAGE_CD = row10.LANGUAGE_CD;

							row10_HashRow.RACE_CD = row10.RACE_CD;

							row10_HashRow.MARITAL_STATUS_CD = row10.MARITAL_STATUS_CD;

							row10_HashRow.RELIGION_CD = row10.RELIGION_CD;

							row10_HashRow.ZIP_CD = row10.ZIP_CD;

							row10_HashRow.STATECITYZIP_PATH = row10.STATECITYZIP_PATH;

							row10_HashRow.INCOME_CD = row10.INCOME_CD;

							row10_HashRow.PATIENT_BLOB = row10.PATIENT_BLOB;

							row10_HashRow.UPDATE_DATE = row10.UPDATE_DATE;

							row10_HashRow.DOWNLOAD_DATE = row10.DOWNLOAD_DATE;

							row10_HashRow.IMPORT_DATE = row10.IMPORT_DATE;

							row10_HashRow.SOURCESYSTEM_CD = row10.SOURCESYSTEM_CD;

							row10_HashRow.UPLOAD_ID = row10.UPLOAD_ID;

							tHash_Lookup_row10.put(row10_HashRow);

							tos_count_tAdvancedHash_row10++;

							/**
							 * [tAdvancedHash_row10 main ] stop
							 */

						} // End of branch "row10"

						/**
						 * [tFileInputDelimited_7 end ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						nb_line_tFileInputDelimited_7++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_7 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_7 != null) {
							csvReadertFileInputDelimited_7.close();
						}
					}
					if (csvReadertFileInputDelimited_7 != null) {
						globalMap.put("tFileInputDelimited_7_NB_LINE",
								nb_line_tFileInputDelimited_7);
					}
				}

				ok_Hash.put("tFileInputDelimited_7", true);
				end_Hash.put("tFileInputDelimited_7",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_7 end ] stop
				 */

				/**
				 * [tAdvancedHash_row10 end ] start
				 */

				currentComponent = "tAdvancedHash_row10";

				tHash_Lookup_row10.endPut();

				ok_Hash.put("tAdvancedHash_row10", true);
				end_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row10 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_5 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_5", false);
				start_Hash.put("tCreateTemporaryFile_5",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_5";

				int tos_count_tCreateTemporaryFile_5 = 0;

				java.io.File dir_tCreateTemporaryFile_5 = new java.io.File(
						context.folderMain + context.folderOutput);
				dir_tCreateTemporaryFile_5.mkdirs();
				String name_tCreateTemporaryFile_5 = "talend_05_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_5 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_5 = new java.io.File(
						dir_tCreateTemporaryFile_5, name_tCreateTemporaryFile_5
								+ "." + suffix_tCreateTemporaryFile_5);
				if (file_tCreateTemporaryFile_5.createNewFile()) {
					file_tCreateTemporaryFile_5.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_5_FILEPATH",
						file_tCreateTemporaryFile_5.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_5 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_5 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_5";

				tos_count_tCreateTemporaryFile_5++;

				/**
				 * [tCreateTemporaryFile_5 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_5 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_5";

				ok_Hash.put("tCreateTemporaryFile_5", true);
				end_Hash.put("tCreateTemporaryFile_5",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_5 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_5:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_4Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_5_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_6 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_6", false);
				start_Hash.put("tCreateTemporaryFile_6",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_6";

				int tos_count_tCreateTemporaryFile_6 = 0;

				java.io.File dir_tCreateTemporaryFile_6 = new java.io.File(
						context.folderMain + context.folderOutput);
				dir_tCreateTemporaryFile_6.mkdirs();
				String name_tCreateTemporaryFile_6 = "talend_06_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_6 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_6 = new java.io.File(
						dir_tCreateTemporaryFile_6, name_tCreateTemporaryFile_6
								+ "." + suffix_tCreateTemporaryFile_6);
				if (file_tCreateTemporaryFile_6.createNewFile()) {
					file_tCreateTemporaryFile_6.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_6_FILEPATH",
						file_tCreateTemporaryFile_6.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_6 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_6 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_6";

				tos_count_tCreateTemporaryFile_6++;

				/**
				 * [tCreateTemporaryFile_6 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_6 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_6";

				ok_Hash.put("tCreateTemporaryFile_6", true);
				end_Hash.put("tCreateTemporaryFile_6",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_6 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_6:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_5Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_6_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_7 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_7", false);
				start_Hash.put("tCreateTemporaryFile_7",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_7";

				int tos_count_tCreateTemporaryFile_7 = 0;

				java.io.File dir_tCreateTemporaryFile_7 = new java.io.File(
						context.folderMain + context.folderOutput);
				dir_tCreateTemporaryFile_7.mkdirs();
				String name_tCreateTemporaryFile_7 = "talend_07_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_7 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_7 = new java.io.File(
						dir_tCreateTemporaryFile_7, name_tCreateTemporaryFile_7
								+ "." + suffix_tCreateTemporaryFile_7);
				if (file_tCreateTemporaryFile_7.createNewFile()) {
					file_tCreateTemporaryFile_7.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_7_FILEPATH",
						file_tCreateTemporaryFile_7.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_7 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_7 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_7";

				tos_count_tCreateTemporaryFile_7++;

				/**
				 * [tCreateTemporaryFile_7 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_7 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_7";

				ok_Hash.put("tCreateTemporaryFile_7", true);
				end_Hash.put("tCreateTemporaryFile_7",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_7 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_7:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_6Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_7_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_8Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_8 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_8", false);
				start_Hash.put("tCreateTemporaryFile_8",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_8";

				int tos_count_tCreateTemporaryFile_8 = 0;

				java.io.File dir_tCreateTemporaryFile_8 = new java.io.File(
						context.folderMain + context.folderOutput);
				dir_tCreateTemporaryFile_8.mkdirs();
				String name_tCreateTemporaryFile_8 = "talend_08_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_8 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_8 = new java.io.File(
						dir_tCreateTemporaryFile_8, name_tCreateTemporaryFile_8
								+ "." + suffix_tCreateTemporaryFile_8);
				if (file_tCreateTemporaryFile_8.createNewFile()) {
					file_tCreateTemporaryFile_8.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_8_FILEPATH",
						file_tCreateTemporaryFile_8.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_8 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_8 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_8";

				tos_count_tCreateTemporaryFile_8++;

				/**
				 * [tCreateTemporaryFile_8 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_8 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_8";

				ok_Hash.put("tCreateTemporaryFile_8", true);
				end_Hash.put("tCreateTemporaryFile_8",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_8 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_8:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_7Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_8_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_9Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_9 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_9", false);
				start_Hash.put("tCreateTemporaryFile_9",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_9";

				int tos_count_tCreateTemporaryFile_9 = 0;

				java.io.File dir_tCreateTemporaryFile_9 = new java.io.File(
						context.folderMain + context.folderOutput);
				dir_tCreateTemporaryFile_9.mkdirs();
				String name_tCreateTemporaryFile_9 = "talend_09_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_9 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_9 = new java.io.File(
						dir_tCreateTemporaryFile_9, name_tCreateTemporaryFile_9
								+ "." + suffix_tCreateTemporaryFile_9);
				if (file_tCreateTemporaryFile_9.createNewFile()) {
					file_tCreateTemporaryFile_9.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_9_FILEPATH",
						file_tCreateTemporaryFile_9.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_9 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_9 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_9";

				tos_count_tCreateTemporaryFile_9++;

				/**
				 * [tCreateTemporaryFile_9 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_9 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_9";

				ok_Hash.put("tCreateTemporaryFile_9", true);
				end_Hash.put("tCreateTemporaryFile_9",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_9 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_9:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_8Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_9_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_10Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_10 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_10", false);
				start_Hash.put("tCreateTemporaryFile_10",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_10";

				int tos_count_tCreateTemporaryFile_10 = 0;

				java.io.File dir_tCreateTemporaryFile_10 = new java.io.File(
						context.folderMain + context.folderOutput);
				dir_tCreateTemporaryFile_10.mkdirs();
				String name_tCreateTemporaryFile_10 = "talend_10_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_10 = ("tmp".replaceAll(
						"\\.", "").length() == 0) ? "tmp" : "tmp".replaceAll(
						"\\.", "");
				java.io.File file_tCreateTemporaryFile_10 = new java.io.File(
						dir_tCreateTemporaryFile_10,
						name_tCreateTemporaryFile_10 + "."
								+ suffix_tCreateTemporaryFile_10);
				if (file_tCreateTemporaryFile_10.createNewFile()) {
					file_tCreateTemporaryFile_10.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_10_FILEPATH",
						file_tCreateTemporaryFile_10.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_10 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_10 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_10";

				tos_count_tCreateTemporaryFile_10++;

				/**
				 * [tCreateTemporaryFile_10 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_10 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_10";

				ok_Hash.put("tCreateTemporaryFile_10", true);
				end_Hash.put("tCreateTemporaryFile_10",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_10 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_10:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_9Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_10_SUBPROCESS_STATE", 1);
	}

	public static class row27Struct implements
			routines.system.IPersistableComparableLookupRow<row27Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String MODIFIER_PATH;

		public String getMODIFIER_PATH() {
			return this.MODIFIER_PATH;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String MODIFIER_BLOB;

		public String getMODIFIER_BLOB() {
			return this.MODIFIER_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.MODIFIER_PATH == null) ? 0
								: this.MODIFIER_PATH.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row27Struct other = (row27Struct) obj;

			if (this.MODIFIER_PATH == null) {
				if (other.MODIFIER_PATH != null)
					return false;
			} else if (!this.MODIFIER_PATH.equals(other.MODIFIER_PATH))
				return false;

			return true;
		}

		public void copyDataTo(row27Struct other) {

			other.MODIFIER_PATH = this.MODIFIER_PATH;
			other.MODIFIER_CD = this.MODIFIER_CD;
			other.NAME_CHAR = this.NAME_CHAR;
			other.MODIFIER_BLOB = this.MODIFIER_BLOB;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row27Struct other) {

			other.MODIFIER_PATH = this.MODIFIER_PATH;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.MODIFIER_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MODIFIER_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.MODIFIER_CD = readString(dis, ois);

				this.NAME_CHAR = readString(dis, ois);

				this.MODIFIER_BLOB = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.MODIFIER_CD, dos, oos);

				writeString(this.NAME_CHAR, dos, oos);

				writeString(this.MODIFIER_BLOB, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MODIFIER_PATH=" + MODIFIER_PATH);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",MODIFIER_BLOB=" + MODIFIER_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row27Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.MODIFIER_PATH,
					other.MODIFIER_PATH);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_15Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row27Struct row27 = new row27Struct();

				/**
				 * [tAdvancedHash_row27 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row27", false);
				start_Hash.put("tAdvancedHash_row27",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row27";

				int tos_count_tAdvancedHash_row27 = 0;

				// connection name:row27
				// source node:tFileInputDelimited_15 -
				// inputs:(after_tFileInputDelimited_16) outputs:(row27,row27) |
				// target node:tAdvancedHash_row27 - inputs:(row27) outputs:()
				// linked node: tMap_12 - inputs:(row28,row27)
				// outputs:(copyOfto_tmap)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row27 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row27Struct> tHash_Lookup_row27 = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row27Struct>(
						matchingModeEnum_row27,
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid
								+ "_Lookup_row27_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public row27Struct createRowInstance() {
								return new row27Struct();
							}
						}

						, 200000

				);

				tHash_Lookup_row27.initPut();

				globalMap.put("tHash_Lookup_row27", tHash_Lookup_row27);

				/**
				 * [tAdvancedHash_row27 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_15 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_15", false);
				start_Hash.put("tFileInputDelimited_15",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_15";

				int tos_count_tFileInputDelimited_15 = 0;

				int nb_line_tFileInputDelimited_15 = 0;
				int footer_tFileInputDelimited_15 = 0;
				int totalLinetFileInputDelimited_15 = 0;
				int limittFileInputDelimited_15 = -1;
				int lastLinetFileInputDelimited_15 = -1;

				char fieldSeparator_tFileInputDelimited_15[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_15 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_15[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_15 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_15 = /**
				 * Start field
				 * tFileInputDelimited_15:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_10_FILEPATH"))/**
				 * 
				 * End field tFileInputDelimited_15:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_15 = null;

				try {

					String[] rowtFileInputDelimited_15 = null;
					int currentLinetFileInputDelimited_15 = 0;
					int outputLinetFileInputDelimited_15 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_15 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_15 = 0;
							if (footer_value_tFileInputDelimited_15 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_15 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_15,
									fieldSeparator_tFileInputDelimited_15[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_15 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_15)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_15[0]);
						}

						csvReadertFileInputDelimited_15
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_15[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_15[0] != '\r'))
							csvReadertFileInputDelimited_15.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_15[0]);

						csvReadertFileInputDelimited_15.setQuoteChar('"');

						csvReadertFileInputDelimited_15
								.setEscapeChar(csvReadertFileInputDelimited_15
										.getQuoteChar());

						if (footer_tFileInputDelimited_15 > 0) {
							for (totalLinetFileInputDelimited_15 = 0; totalLinetFileInputDelimited_15 < 1; totalLinetFileInputDelimited_15++) {
								csvReadertFileInputDelimited_15.readNext();
							}
							csvReadertFileInputDelimited_15
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_15.readNext()) {

								rowtFileInputDelimited_15 = csvReadertFileInputDelimited_15
										.getValues();
								if (!(rowtFileInputDelimited_15.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_15[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_15++;

								}

							}
							int lastLineTemptFileInputDelimited_15 = totalLinetFileInputDelimited_15
									- footer_tFileInputDelimited_15 < 0 ? 0
									: totalLinetFileInputDelimited_15
											- footer_tFileInputDelimited_15;
							if (lastLinetFileInputDelimited_15 > 0) {
								lastLinetFileInputDelimited_15 = lastLinetFileInputDelimited_15 < lastLineTemptFileInputDelimited_15 ? lastLinetFileInputDelimited_15
										: lastLineTemptFileInputDelimited_15;
							} else {
								lastLinetFileInputDelimited_15 = lastLineTemptFileInputDelimited_15;
							}

							csvReadertFileInputDelimited_15.close();
							if (filename_tFileInputDelimited_15 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_15 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_15,
										fieldSeparator_tFileInputDelimited_15[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_15 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_15)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_15[0]);
							}
							csvReadertFileInputDelimited_15
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_15[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_15[0] != '\r'))
								csvReadertFileInputDelimited_15
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_15[0]);

							csvReadertFileInputDelimited_15.setQuoteChar('"');

							csvReadertFileInputDelimited_15
									.setEscapeChar(csvReadertFileInputDelimited_15
											.getQuoteChar());

						}

						if (limittFileInputDelimited_15 != 0) {
							for (currentLinetFileInputDelimited_15 = 0; currentLinetFileInputDelimited_15 < 1; currentLinetFileInputDelimited_15++) {
								csvReadertFileInputDelimited_15.readNext();
							}
						}
						csvReadertFileInputDelimited_15
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_15 != 0
							&& csvReadertFileInputDelimited_15 != null
							&& csvReadertFileInputDelimited_15.readNext()) {

						rowtFileInputDelimited_15 = csvReadertFileInputDelimited_15
								.getValues();

						if (rowtFileInputDelimited_15.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_15[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_15++;

						if (lastLinetFileInputDelimited_15 > -1
								&& currentLinetFileInputDelimited_15 > lastLinetFileInputDelimited_15) {
							break;
						}
						outputLinetFileInputDelimited_15++;
						if (limittFileInputDelimited_15 > 0
								&& outputLinetFileInputDelimited_15 > limittFileInputDelimited_15) {
							break;
						}

						row27 = null;

						row27 = null;

						boolean whetherReject_tFileInputDelimited_15 = false;
						row27 = new row27Struct();
						try {

							if (rowtFileInputDelimited_15.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_15[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row27.MODIFIER_PATH = null;

								row27.MODIFIER_CD = null;

								row27.NAME_CHAR = null;

								row27.MODIFIER_BLOB = null;

								row27.UPDATE_DATE = null;

								row27.DOWNLOAD_DATE = null;

								row27.IMPORT_DATE = null;

								row27.SOURCESYSTEM_CD = null;

								row27.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_15 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_15 = 0;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row27.MODIFIER_PATH = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row27.MODIFIER_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 1;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row27.MODIFIER_CD = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row27.MODIFIER_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 2;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row27.NAME_CHAR = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row27.NAME_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 3;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row27.MODIFIER_BLOB = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row27.MODIFIER_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 4;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									if (rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]
											.length() > 0) {

										row27.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15],
														"dd-MM-yyyy");

									} else {
										row27.UPDATE_DATE = null;
									}

								} else {
									row27.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 5;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									if (rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]
											.length() > 0) {

										row27.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15],
														"dd-MM-yyyy");

									} else {
										row27.DOWNLOAD_DATE = null;
									}

								} else {
									row27.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 6;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									if (rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]
											.length() > 0) {

										row27.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15],
														"dd-MM-yyyy");

									} else {
										row27.IMPORT_DATE = null;
									}

								} else {
									row27.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 7;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row27.SOURCESYSTEM_CD = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row27.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 8;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row27.UPLOAD_ID = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row27.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_15 = true;

							System.err.println(e.getMessage());
							row27 = null;

						}

						/**
						 * [tFileInputDelimited_15 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_15 main ] start
						 */

						currentComponent = "tFileInputDelimited_15";

						tos_count_tFileInputDelimited_15++;

						/**
						 * [tFileInputDelimited_15 main ] stop
						 */
						// Start of branch "row27"
						if (row27 != null) {

							/**
							 * [tAdvancedHash_row27 main ] start
							 */

							currentComponent = "tAdvancedHash_row27";

							row27Struct row27_HashRow = tHash_Lookup_row27
									.getNextFreeRow();

							row27_HashRow.MODIFIER_PATH = row27.MODIFIER_PATH;

							row27_HashRow.MODIFIER_CD = row27.MODIFIER_CD;

							row27_HashRow.NAME_CHAR = row27.NAME_CHAR;

							row27_HashRow.MODIFIER_BLOB = row27.MODIFIER_BLOB;

							row27_HashRow.UPDATE_DATE = row27.UPDATE_DATE;

							row27_HashRow.DOWNLOAD_DATE = row27.DOWNLOAD_DATE;

							row27_HashRow.IMPORT_DATE = row27.IMPORT_DATE;

							row27_HashRow.SOURCESYSTEM_CD = row27.SOURCESYSTEM_CD;

							row27_HashRow.UPLOAD_ID = row27.UPLOAD_ID;

							tHash_Lookup_row27.put(row27_HashRow);

							tos_count_tAdvancedHash_row27++;

							/**
							 * [tAdvancedHash_row27 main ] stop
							 */

						} // End of branch "row27"

						/**
						 * [tFileInputDelimited_15 end ] start
						 */

						currentComponent = "tFileInputDelimited_15";

						nb_line_tFileInputDelimited_15++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_15 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_15 != null) {
							csvReadertFileInputDelimited_15.close();
						}
					}
					if (csvReadertFileInputDelimited_15 != null) {
						globalMap.put("tFileInputDelimited_15_NB_LINE",
								nb_line_tFileInputDelimited_15);
					}
				}

				ok_Hash.put("tFileInputDelimited_15", true);
				end_Hash.put("tFileInputDelimited_15",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_15 end ] stop
				 */

				/**
				 * [tAdvancedHash_row27 end ] start
				 */

				currentComponent = "tAdvancedHash_row27";

				tHash_Lookup_row27.endPut();

				ok_Hash.put("tAdvancedHash_row27", true);
				end_Hash.put("tAdvancedHash_row27", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row27 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_15_SUBPROCESS_STATE", 1);
	}

	public static class row29Struct implements
			routines.system.IPersistableComparableLookupRow<row29Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public String START_DATE;

		public String getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public String END_DATE;

		public String getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.MODIFIER_CD == null) ? 0 : this.MODIFIER_CD
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row29Struct other = (row29Struct) obj;

			if (this.MODIFIER_CD == null) {
				if (other.MODIFIER_CD != null)
					return false;
			} else if (!this.MODIFIER_CD.equals(other.MODIFIER_CD))
				return false;

			return true;
		}

		public void copyDataTo(row29Struct other) {

			other.ENCOUNTER_NUM = this.ENCOUNTER_NUM;
			other.PATIENT_NUM = this.PATIENT_NUM;
			other.CONCEPT_CD = this.CONCEPT_CD;
			other.PROVIDER_ID = this.PROVIDER_ID;
			other.START_DATE = this.START_DATE;
			other.MODIFIER_CD = this.MODIFIER_CD;
			other.INSTANCE_NUM = this.INSTANCE_NUM;
			other.VALTYPE_CD = this.VALTYPE_CD;
			other.TVAL_CHAR = this.TVAL_CHAR;
			other.NVAL_NUM = this.NVAL_NUM;
			other.VALUEFLAG_CD = this.VALUEFLAG_CD;
			other.QUANTITY_NUM = this.QUANTITY_NUM;
			other.UNITS_CD = this.UNITS_CD;
			other.END_DATE = this.END_DATE;
			other.LOCATION_CD = this.LOCATION_CD;
			other.OBSERVATION_BLOB = this.OBSERVATION_BLOB;
			other.CONFIDENCE_NUM = this.CONFIDENCE_NUM;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row29Struct other) {

			other.MODIFIER_CD = this.MODIFIER_CD;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.MODIFIER_CD = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MODIFIER_CD, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ENCOUNTER_NUM = (BigDecimal) ois.readObject();

				this.PATIENT_NUM = (BigDecimal) ois.readObject();

				this.CONCEPT_CD = readString(dis, ois);

				this.PROVIDER_ID = readString(dis, ois);

				this.START_DATE = readString(dis, ois);

				this.INSTANCE_NUM = readString(dis, ois);

				this.VALTYPE_CD = readString(dis, ois);

				this.TVAL_CHAR = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.NVAL_NUM = null;
				} else {
					this.NVAL_NUM = dis.readFloat();
				}

				this.VALUEFLAG_CD = readString(dis, ois);

				this.QUANTITY_NUM = readString(dis, ois);

				this.UNITS_CD = readString(dis, ois);

				this.END_DATE = readString(dis, ois);

				this.LOCATION_CD = readString(dis, ois);

				this.OBSERVATION_BLOB = readString(dis, ois);

				this.CONFIDENCE_NUM = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				oos.writeObject(this.ENCOUNTER_NUM);

				oos.writeObject(this.PATIENT_NUM);

				writeString(this.CONCEPT_CD, dos, oos);

				writeString(this.PROVIDER_ID, dos, oos);

				writeString(this.START_DATE, dos, oos);

				writeString(this.INSTANCE_NUM, dos, oos);

				writeString(this.VALTYPE_CD, dos, oos);

				writeString(this.TVAL_CHAR, dos, oos);

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				writeString(this.VALUEFLAG_CD, dos, oos);

				writeString(this.QUANTITY_NUM, dos, oos);

				writeString(this.UNITS_CD, dos, oos);

				writeString(this.END_DATE, dos, oos);

				writeString(this.LOCATION_CD, dos, oos);

				writeString(this.OBSERVATION_BLOB, dos, oos);

				writeString(this.CONFIDENCE_NUM, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + START_DATE);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + END_DATE);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row29Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.MODIFIER_CD,
					other.MODIFIER_CD);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_17Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_17_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row29Struct row29 = new row29Struct();

				/**
				 * [tAdvancedHash_row29 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row29", false);
				start_Hash.put("tAdvancedHash_row29",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row29";

				int tos_count_tAdvancedHash_row29 = 0;

				// connection name:row29
				// source node:tFileInputDelimited_17 -
				// inputs:(after_tFileInputDelimited_16) outputs:(row29,row29) |
				// target node:tAdvancedHash_row29 - inputs:(row29) outputs:()
				// linked node: tMap_13 - inputs:(copyOfto_tmap,row29)
				// outputs:(copyOfto_obs_fct)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row29 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row29Struct> tHash_Lookup_row29 = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row29Struct>(
						matchingModeEnum_row29,
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid
								+ "_Lookup_row29_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public row29Struct createRowInstance() {
								return new row29Struct();
							}
						}

						, 200000

				);

				tHash_Lookup_row29.initPut();

				globalMap.put("tHash_Lookup_row29", tHash_Lookup_row29);

				/**
				 * [tAdvancedHash_row29 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_17 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_17", false);
				start_Hash.put("tFileInputDelimited_17",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_17";

				int tos_count_tFileInputDelimited_17 = 0;

				int nb_line_tFileInputDelimited_17 = 0;
				int footer_tFileInputDelimited_17 = 0;
				int totalLinetFileInputDelimited_17 = 0;
				int limittFileInputDelimited_17 = -1;
				int lastLinetFileInputDelimited_17 = -1;

				char fieldSeparator_tFileInputDelimited_17[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_17 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_17[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_17 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_17 = /**
				 * Start field
				 * tFileInputDelimited_17:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_3_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_17:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_17 = null;

				try {

					String[] rowtFileInputDelimited_17 = null;
					int currentLinetFileInputDelimited_17 = 0;
					int outputLinetFileInputDelimited_17 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_17 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_17 = 0;
							if (footer_value_tFileInputDelimited_17 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_17 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_17,
									fieldSeparator_tFileInputDelimited_17[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_17 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_17)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_17[0]);
						}

						csvReadertFileInputDelimited_17
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_17[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_17[0] != '\r'))
							csvReadertFileInputDelimited_17.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_17[0]);

						csvReadertFileInputDelimited_17.setQuoteChar('"');

						csvReadertFileInputDelimited_17
								.setEscapeChar(csvReadertFileInputDelimited_17
										.getQuoteChar());

						if (footer_tFileInputDelimited_17 > 0) {
							for (totalLinetFileInputDelimited_17 = 0; totalLinetFileInputDelimited_17 < 0; totalLinetFileInputDelimited_17++) {
								csvReadertFileInputDelimited_17.readNext();
							}
							csvReadertFileInputDelimited_17
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_17.readNext()) {

								rowtFileInputDelimited_17 = csvReadertFileInputDelimited_17
										.getValues();
								if (!(rowtFileInputDelimited_17.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_17[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_17++;

								}

							}
							int lastLineTemptFileInputDelimited_17 = totalLinetFileInputDelimited_17
									- footer_tFileInputDelimited_17 < 0 ? 0
									: totalLinetFileInputDelimited_17
											- footer_tFileInputDelimited_17;
							if (lastLinetFileInputDelimited_17 > 0) {
								lastLinetFileInputDelimited_17 = lastLinetFileInputDelimited_17 < lastLineTemptFileInputDelimited_17 ? lastLinetFileInputDelimited_17
										: lastLineTemptFileInputDelimited_17;
							} else {
								lastLinetFileInputDelimited_17 = lastLineTemptFileInputDelimited_17;
							}

							csvReadertFileInputDelimited_17.close();
							if (filename_tFileInputDelimited_17 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_17 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_17,
										fieldSeparator_tFileInputDelimited_17[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_17 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_17)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_17[0]);
							}
							csvReadertFileInputDelimited_17
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_17[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_17[0] != '\r'))
								csvReadertFileInputDelimited_17
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_17[0]);

							csvReadertFileInputDelimited_17.setQuoteChar('"');

							csvReadertFileInputDelimited_17
									.setEscapeChar(csvReadertFileInputDelimited_17
											.getQuoteChar());

						}

						if (limittFileInputDelimited_17 != 0) {
							for (currentLinetFileInputDelimited_17 = 0; currentLinetFileInputDelimited_17 < 0; currentLinetFileInputDelimited_17++) {
								csvReadertFileInputDelimited_17.readNext();
							}
						}
						csvReadertFileInputDelimited_17
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_17 != 0
							&& csvReadertFileInputDelimited_17 != null
							&& csvReadertFileInputDelimited_17.readNext()) {

						rowtFileInputDelimited_17 = csvReadertFileInputDelimited_17
								.getValues();

						if (rowtFileInputDelimited_17.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_17[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_17++;

						if (lastLinetFileInputDelimited_17 > -1
								&& currentLinetFileInputDelimited_17 > lastLinetFileInputDelimited_17) {
							break;
						}
						outputLinetFileInputDelimited_17++;
						if (limittFileInputDelimited_17 > 0
								&& outputLinetFileInputDelimited_17 > limittFileInputDelimited_17) {
							break;
						}

						row29 = null;

						row29 = null;

						boolean whetherReject_tFileInputDelimited_17 = false;
						row29 = new row29Struct();
						try {

							if (rowtFileInputDelimited_17.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_17[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row29.ENCOUNTER_NUM = null;

								row29.PATIENT_NUM = null;

								row29.CONCEPT_CD = null;

								row29.PROVIDER_ID = null;

								row29.START_DATE = null;

								row29.MODIFIER_CD = null;

								row29.INSTANCE_NUM = null;

								row29.VALTYPE_CD = null;

								row29.TVAL_CHAR = null;

								row29.NVAL_NUM = null;

								row29.VALUEFLAG_CD = null;

								row29.QUANTITY_NUM = null;

								row29.UNITS_CD = null;

								row29.END_DATE = null;

								row29.LOCATION_CD = null;

								row29.OBSERVATION_BLOB = null;

								row29.CONFIDENCE_NUM = null;

								row29.UPDATE_DATE = null;

								row29.DOWNLOAD_DATE = null;

								row29.IMPORT_DATE = null;

								row29.SOURCESYSTEM_CD = null;

								row29.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_17 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_17 = 0;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									if (rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17]
											.length() > 0) {

										row29.ENCOUNTER_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17]);

									} else {
										row29.ENCOUNTER_NUM = null;
									}

								} else {
									row29.ENCOUNTER_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 1;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									if (rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17]
											.length() > 0) {

										row29.PATIENT_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17]);

									} else {
										row29.PATIENT_NUM = null;
									}

								} else {
									row29.PATIENT_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 2;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row29.CONCEPT_CD = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row29.CONCEPT_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 3;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row29.PROVIDER_ID = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row29.PROVIDER_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 4;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row29.START_DATE = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row29.START_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 5;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row29.MODIFIER_CD = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row29.MODIFIER_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 6;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row29.INSTANCE_NUM = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row29.INSTANCE_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 7;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row29.VALTYPE_CD = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row29.VALTYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 8;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row29.TVAL_CHAR = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row29.TVAL_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 9;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									if (rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17]
											.length() > 0) {

										row29.NVAL_NUM = ParserUtils
												.parseTo_Float(rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17]);

									} else {
										row29.NVAL_NUM = null;
									}

								} else {
									row29.NVAL_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 10;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row29.VALUEFLAG_CD = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row29.VALUEFLAG_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 11;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row29.QUANTITY_NUM = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row29.QUANTITY_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 12;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row29.UNITS_CD = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row29.UNITS_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 13;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row29.END_DATE = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row29.END_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 14;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row29.LOCATION_CD = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row29.LOCATION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 15;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row29.OBSERVATION_BLOB = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row29.OBSERVATION_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 16;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row29.CONFIDENCE_NUM = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row29.CONFIDENCE_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 17;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									if (rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17]
											.length() > 0) {

										row29.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17],
														"yyyy-MM-dd");

									} else {
										row29.UPDATE_DATE = null;
									}

								} else {
									row29.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 18;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									if (rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17]
											.length() > 0) {

										row29.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17],
														"yyyy-MM-dd");

									} else {
										row29.DOWNLOAD_DATE = null;
									}

								} else {
									row29.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 19;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									if (rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17]
											.length() > 0) {

										row29.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17],
														"yyyy-MM-dd");

									} else {
										row29.IMPORT_DATE = null;
									}

								} else {
									row29.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 20;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row29.SOURCESYSTEM_CD = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row29.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 21;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row29.UPLOAD_ID = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row29.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_17 = true;

							System.err.println(e.getMessage());
							row29 = null;

						}

						/**
						 * [tFileInputDelimited_17 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_17 main ] start
						 */

						currentComponent = "tFileInputDelimited_17";

						tos_count_tFileInputDelimited_17++;

						/**
						 * [tFileInputDelimited_17 main ] stop
						 */
						// Start of branch "row29"
						if (row29 != null) {

							/**
							 * [tAdvancedHash_row29 main ] start
							 */

							currentComponent = "tAdvancedHash_row29";

							row29Struct row29_HashRow = tHash_Lookup_row29
									.getNextFreeRow();

							row29_HashRow.ENCOUNTER_NUM = row29.ENCOUNTER_NUM;

							row29_HashRow.PATIENT_NUM = row29.PATIENT_NUM;

							row29_HashRow.CONCEPT_CD = row29.CONCEPT_CD;

							row29_HashRow.PROVIDER_ID = row29.PROVIDER_ID;

							row29_HashRow.START_DATE = row29.START_DATE;

							row29_HashRow.MODIFIER_CD = row29.MODIFIER_CD;

							row29_HashRow.INSTANCE_NUM = row29.INSTANCE_NUM;

							row29_HashRow.VALTYPE_CD = row29.VALTYPE_CD;

							row29_HashRow.TVAL_CHAR = row29.TVAL_CHAR;

							row29_HashRow.NVAL_NUM = row29.NVAL_NUM;

							row29_HashRow.VALUEFLAG_CD = row29.VALUEFLAG_CD;

							row29_HashRow.QUANTITY_NUM = row29.QUANTITY_NUM;

							row29_HashRow.UNITS_CD = row29.UNITS_CD;

							row29_HashRow.END_DATE = row29.END_DATE;

							row29_HashRow.LOCATION_CD = row29.LOCATION_CD;

							row29_HashRow.OBSERVATION_BLOB = row29.OBSERVATION_BLOB;

							row29_HashRow.CONFIDENCE_NUM = row29.CONFIDENCE_NUM;

							row29_HashRow.UPDATE_DATE = row29.UPDATE_DATE;

							row29_HashRow.DOWNLOAD_DATE = row29.DOWNLOAD_DATE;

							row29_HashRow.IMPORT_DATE = row29.IMPORT_DATE;

							row29_HashRow.SOURCESYSTEM_CD = row29.SOURCESYSTEM_CD;

							row29_HashRow.UPLOAD_ID = row29.UPLOAD_ID;

							tHash_Lookup_row29.put(row29_HashRow);

							tos_count_tAdvancedHash_row29++;

							/**
							 * [tAdvancedHash_row29 main ] stop
							 */

						} // End of branch "row29"

						/**
						 * [tFileInputDelimited_17 end ] start
						 */

						currentComponent = "tFileInputDelimited_17";

						nb_line_tFileInputDelimited_17++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_17 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_17 != null) {
							csvReadertFileInputDelimited_17.close();
						}
					}
					if (csvReadertFileInputDelimited_17 != null) {
						globalMap.put("tFileInputDelimited_17_NB_LINE",
								nb_line_tFileInputDelimited_17);
					}
				}

				ok_Hash.put("tFileInputDelimited_17", true);
				end_Hash.put("tFileInputDelimited_17",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_17 end ] stop
				 */

				/**
				 * [tAdvancedHash_row29 end ] start
				 */

				currentComponent = "tAdvancedHash_row29";

				tHash_Lookup_row29.endPut();

				ok_Hash.put("tAdvancedHash_row29", true);
				end_Hash.put("tAdvancedHash_row29", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row29 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_17_SUBPROCESS_STATE", 1);
	}

	public static class row31Struct implements
			routines.system.IPersistableComparableLookupRow<row31Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String MODIFIER_PATH;

		public String getMODIFIER_PATH() {
			return this.MODIFIER_PATH;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String MODIFIER_BLOB;

		public String getMODIFIER_BLOB() {
			return this.MODIFIER_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.MODIFIER_PATH == null) ? 0
								: this.MODIFIER_PATH.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row31Struct other = (row31Struct) obj;

			if (this.MODIFIER_PATH == null) {
				if (other.MODIFIER_PATH != null)
					return false;
			} else if (!this.MODIFIER_PATH.equals(other.MODIFIER_PATH))
				return false;

			return true;
		}

		public void copyDataTo(row31Struct other) {

			other.MODIFIER_PATH = this.MODIFIER_PATH;
			other.MODIFIER_CD = this.MODIFIER_CD;
			other.NAME_CHAR = this.NAME_CHAR;
			other.MODIFIER_BLOB = this.MODIFIER_BLOB;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row31Struct other) {

			other.MODIFIER_PATH = this.MODIFIER_PATH;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.MODIFIER_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MODIFIER_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.MODIFIER_CD = readString(dis, ois);

				this.NAME_CHAR = readString(dis, ois);

				this.MODIFIER_BLOB = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.MODIFIER_CD, dos, oos);

				writeString(this.NAME_CHAR, dos, oos);

				writeString(this.MODIFIER_BLOB, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MODIFIER_PATH=" + MODIFIER_PATH);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",MODIFIER_BLOB=" + MODIFIER_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row31Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.MODIFIER_PATH,
					other.MODIFIER_PATH);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_19Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_19_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row31Struct row31 = new row31Struct();

				/**
				 * [tAdvancedHash_row31 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row31", false);
				start_Hash.put("tAdvancedHash_row31",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row31";

				int tos_count_tAdvancedHash_row31 = 0;

				// connection name:row31
				// source node:tFileInputDelimited_19 -
				// inputs:(after_tFileInputDelimited_16) outputs:(row31,row31) |
				// target node:tAdvancedHash_row31 - inputs:(row31) outputs:()
				// linked node: tMap_15 - inputs:(copyOfto_obs_fct,row31,row32)
				// outputs:(copyOfout1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row31 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row31Struct> tHash_Lookup_row31 = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row31Struct>(
						matchingModeEnum_row31,
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid
								+ "_Lookup_row31_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public row31Struct createRowInstance() {
								return new row31Struct();
							}
						}

						, 200000

				);

				tHash_Lookup_row31.initPut();

				globalMap.put("tHash_Lookup_row31", tHash_Lookup_row31);

				/**
				 * [tAdvancedHash_row31 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_19 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_19", false);
				start_Hash.put("tFileInputDelimited_19",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_19";

				int tos_count_tFileInputDelimited_19 = 0;

				int nb_line_tFileInputDelimited_19 = 0;
				int footer_tFileInputDelimited_19 = 0;
				int totalLinetFileInputDelimited_19 = 0;
				int limittFileInputDelimited_19 = -1;
				int lastLinetFileInputDelimited_19 = -1;

				char fieldSeparator_tFileInputDelimited_19[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_19 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_19[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_19 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_19 = /**
				 * Start field
				 * tFileInputDelimited_19:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_10_FILEPATH"))/**
				 * 
				 * End field tFileInputDelimited_19:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_19 = null;

				try {

					String[] rowtFileInputDelimited_19 = null;
					int currentLinetFileInputDelimited_19 = 0;
					int outputLinetFileInputDelimited_19 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_19 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_19 = 0;
							if (footer_value_tFileInputDelimited_19 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_19 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_19,
									fieldSeparator_tFileInputDelimited_19[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_19 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_19)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_19[0]);
						}

						csvReadertFileInputDelimited_19
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_19[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_19[0] != '\r'))
							csvReadertFileInputDelimited_19.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_19[0]);

						csvReadertFileInputDelimited_19.setQuoteChar('"');

						csvReadertFileInputDelimited_19
								.setEscapeChar(csvReadertFileInputDelimited_19
										.getQuoteChar());

						if (footer_tFileInputDelimited_19 > 0) {
							for (totalLinetFileInputDelimited_19 = 0; totalLinetFileInputDelimited_19 < 1; totalLinetFileInputDelimited_19++) {
								csvReadertFileInputDelimited_19.readNext();
							}
							csvReadertFileInputDelimited_19
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_19.readNext()) {

								rowtFileInputDelimited_19 = csvReadertFileInputDelimited_19
										.getValues();
								if (!(rowtFileInputDelimited_19.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_19[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_19++;

								}

							}
							int lastLineTemptFileInputDelimited_19 = totalLinetFileInputDelimited_19
									- footer_tFileInputDelimited_19 < 0 ? 0
									: totalLinetFileInputDelimited_19
											- footer_tFileInputDelimited_19;
							if (lastLinetFileInputDelimited_19 > 0) {
								lastLinetFileInputDelimited_19 = lastLinetFileInputDelimited_19 < lastLineTemptFileInputDelimited_19 ? lastLinetFileInputDelimited_19
										: lastLineTemptFileInputDelimited_19;
							} else {
								lastLinetFileInputDelimited_19 = lastLineTemptFileInputDelimited_19;
							}

							csvReadertFileInputDelimited_19.close();
							if (filename_tFileInputDelimited_19 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_19 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_19,
										fieldSeparator_tFileInputDelimited_19[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_19 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_19)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_19[0]);
							}
							csvReadertFileInputDelimited_19
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_19[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_19[0] != '\r'))
								csvReadertFileInputDelimited_19
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_19[0]);

							csvReadertFileInputDelimited_19.setQuoteChar('"');

							csvReadertFileInputDelimited_19
									.setEscapeChar(csvReadertFileInputDelimited_19
											.getQuoteChar());

						}

						if (limittFileInputDelimited_19 != 0) {
							for (currentLinetFileInputDelimited_19 = 0; currentLinetFileInputDelimited_19 < 1; currentLinetFileInputDelimited_19++) {
								csvReadertFileInputDelimited_19.readNext();
							}
						}
						csvReadertFileInputDelimited_19
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_19 != 0
							&& csvReadertFileInputDelimited_19 != null
							&& csvReadertFileInputDelimited_19.readNext()) {

						rowtFileInputDelimited_19 = csvReadertFileInputDelimited_19
								.getValues();

						if (rowtFileInputDelimited_19.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_19[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_19++;

						if (lastLinetFileInputDelimited_19 > -1
								&& currentLinetFileInputDelimited_19 > lastLinetFileInputDelimited_19) {
							break;
						}
						outputLinetFileInputDelimited_19++;
						if (limittFileInputDelimited_19 > 0
								&& outputLinetFileInputDelimited_19 > limittFileInputDelimited_19) {
							break;
						}

						row31 = null;

						row31 = null;

						boolean whetherReject_tFileInputDelimited_19 = false;
						row31 = new row31Struct();
						try {

							if (rowtFileInputDelimited_19.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_19[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row31.MODIFIER_PATH = null;

								row31.MODIFIER_CD = null;

								row31.NAME_CHAR = null;

								row31.MODIFIER_BLOB = null;

								row31.UPDATE_DATE = null;

								row31.DOWNLOAD_DATE = null;

								row31.IMPORT_DATE = null;

								row31.SOURCESYSTEM_CD = null;

								row31.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_19 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_19 = 0;

								if (columnIndexWithD_tFileInputDelimited_19 < rowtFileInputDelimited_19.length) {

									row31.MODIFIER_PATH = rowtFileInputDelimited_19[columnIndexWithD_tFileInputDelimited_19];

								} else {
									row31.MODIFIER_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_19 = 1;

								if (columnIndexWithD_tFileInputDelimited_19 < rowtFileInputDelimited_19.length) {

									row31.MODIFIER_CD = rowtFileInputDelimited_19[columnIndexWithD_tFileInputDelimited_19];

								} else {
									row31.MODIFIER_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_19 = 2;

								if (columnIndexWithD_tFileInputDelimited_19 < rowtFileInputDelimited_19.length) {

									row31.NAME_CHAR = rowtFileInputDelimited_19[columnIndexWithD_tFileInputDelimited_19];

								} else {
									row31.NAME_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_19 = 3;

								if (columnIndexWithD_tFileInputDelimited_19 < rowtFileInputDelimited_19.length) {

									row31.MODIFIER_BLOB = rowtFileInputDelimited_19[columnIndexWithD_tFileInputDelimited_19];

								} else {
									row31.MODIFIER_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_19 = 4;

								if (columnIndexWithD_tFileInputDelimited_19 < rowtFileInputDelimited_19.length) {

									if (rowtFileInputDelimited_19[columnIndexWithD_tFileInputDelimited_19]
											.length() > 0) {

										row31.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_19[columnIndexWithD_tFileInputDelimited_19],
														"dd-MM-yyyy");

									} else {
										row31.UPDATE_DATE = null;
									}

								} else {
									row31.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_19 = 5;

								if (columnIndexWithD_tFileInputDelimited_19 < rowtFileInputDelimited_19.length) {

									if (rowtFileInputDelimited_19[columnIndexWithD_tFileInputDelimited_19]
											.length() > 0) {

										row31.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_19[columnIndexWithD_tFileInputDelimited_19],
														"dd-MM-yyyy");

									} else {
										row31.DOWNLOAD_DATE = null;
									}

								} else {
									row31.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_19 = 6;

								if (columnIndexWithD_tFileInputDelimited_19 < rowtFileInputDelimited_19.length) {

									if (rowtFileInputDelimited_19[columnIndexWithD_tFileInputDelimited_19]
											.length() > 0) {

										row31.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_19[columnIndexWithD_tFileInputDelimited_19],
														"dd-MM-yyyy");

									} else {
										row31.IMPORT_DATE = null;
									}

								} else {
									row31.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_19 = 7;

								if (columnIndexWithD_tFileInputDelimited_19 < rowtFileInputDelimited_19.length) {

									row31.SOURCESYSTEM_CD = rowtFileInputDelimited_19[columnIndexWithD_tFileInputDelimited_19];

								} else {
									row31.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_19 = 8;

								if (columnIndexWithD_tFileInputDelimited_19 < rowtFileInputDelimited_19.length) {

									row31.UPLOAD_ID = rowtFileInputDelimited_19[columnIndexWithD_tFileInputDelimited_19];

								} else {
									row31.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_19 = true;

							System.err.println(e.getMessage());
							row31 = null;

						}

						/**
						 * [tFileInputDelimited_19 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_19 main ] start
						 */

						currentComponent = "tFileInputDelimited_19";

						tos_count_tFileInputDelimited_19++;

						/**
						 * [tFileInputDelimited_19 main ] stop
						 */
						// Start of branch "row31"
						if (row31 != null) {

							/**
							 * [tAdvancedHash_row31 main ] start
							 */

							currentComponent = "tAdvancedHash_row31";

							row31Struct row31_HashRow = tHash_Lookup_row31
									.getNextFreeRow();

							row31_HashRow.MODIFIER_PATH = row31.MODIFIER_PATH;

							row31_HashRow.MODIFIER_CD = row31.MODIFIER_CD;

							row31_HashRow.NAME_CHAR = row31.NAME_CHAR;

							row31_HashRow.MODIFIER_BLOB = row31.MODIFIER_BLOB;

							row31_HashRow.UPDATE_DATE = row31.UPDATE_DATE;

							row31_HashRow.DOWNLOAD_DATE = row31.DOWNLOAD_DATE;

							row31_HashRow.IMPORT_DATE = row31.IMPORT_DATE;

							row31_HashRow.SOURCESYSTEM_CD = row31.SOURCESYSTEM_CD;

							row31_HashRow.UPLOAD_ID = row31.UPLOAD_ID;

							tHash_Lookup_row31.put(row31_HashRow);

							tos_count_tAdvancedHash_row31++;

							/**
							 * [tAdvancedHash_row31 main ] stop
							 */

						} // End of branch "row31"

						/**
						 * [tFileInputDelimited_19 end ] start
						 */

						currentComponent = "tFileInputDelimited_19";

						nb_line_tFileInputDelimited_19++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_19 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_19 != null) {
							csvReadertFileInputDelimited_19.close();
						}
					}
					if (csvReadertFileInputDelimited_19 != null) {
						globalMap.put("tFileInputDelimited_19_NB_LINE",
								nb_line_tFileInputDelimited_19);
					}
				}

				ok_Hash.put("tFileInputDelimited_19", true);
				end_Hash.put("tFileInputDelimited_19",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_19 end ] stop
				 */

				/**
				 * [tAdvancedHash_row31 end ] start
				 */

				currentComponent = "tAdvancedHash_row31";

				tHash_Lookup_row31.endPut();

				ok_Hash.put("tAdvancedHash_row31", true);
				end_Hash.put("tAdvancedHash_row31", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row31 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_19_SUBPROCESS_STATE", 1);
	}

	public static class row32Struct implements
			routines.system.IPersistableComparableLookupRow<row32Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public String START_DATE;

		public String getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public String END_DATE;

		public String getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.PATIENT_NUM == null) ? 0 : this.PATIENT_NUM
								.hashCode());

				result = prime
						* result
						+ ((this.MODIFIER_CD == null) ? 0 : this.MODIFIER_CD
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row32Struct other = (row32Struct) obj;

			if (this.PATIENT_NUM == null) {
				if (other.PATIENT_NUM != null)
					return false;
			} else if (!this.PATIENT_NUM.equals(other.PATIENT_NUM))
				return false;

			if (this.MODIFIER_CD == null) {
				if (other.MODIFIER_CD != null)
					return false;
			} else if (!this.MODIFIER_CD.equals(other.MODIFIER_CD))
				return false;

			return true;
		}

		public void copyDataTo(row32Struct other) {

			other.ENCOUNTER_NUM = this.ENCOUNTER_NUM;
			other.PATIENT_NUM = this.PATIENT_NUM;
			other.CONCEPT_CD = this.CONCEPT_CD;
			other.PROVIDER_ID = this.PROVIDER_ID;
			other.START_DATE = this.START_DATE;
			other.MODIFIER_CD = this.MODIFIER_CD;
			other.INSTANCE_NUM = this.INSTANCE_NUM;
			other.VALTYPE_CD = this.VALTYPE_CD;
			other.TVAL_CHAR = this.TVAL_CHAR;
			other.NVAL_NUM = this.NVAL_NUM;
			other.VALUEFLAG_CD = this.VALUEFLAG_CD;
			other.QUANTITY_NUM = this.QUANTITY_NUM;
			other.UNITS_CD = this.UNITS_CD;
			other.END_DATE = this.END_DATE;
			other.LOCATION_CD = this.LOCATION_CD;
			other.OBSERVATION_BLOB = this.OBSERVATION_BLOB;
			other.CONFIDENCE_NUM = this.CONFIDENCE_NUM;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row32Struct other) {

			other.PATIENT_NUM = this.PATIENT_NUM;
			other.MODIFIER_CD = this.MODIFIER_CD;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.MODIFIER_CD = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.MODIFIER_CD, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ENCOUNTER_NUM = (BigDecimal) ois.readObject();

				this.CONCEPT_CD = readString(dis, ois);

				this.PROVIDER_ID = readString(dis, ois);

				this.START_DATE = readString(dis, ois);

				this.INSTANCE_NUM = readString(dis, ois);

				this.VALTYPE_CD = readString(dis, ois);

				this.TVAL_CHAR = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.NVAL_NUM = null;
				} else {
					this.NVAL_NUM = dis.readFloat();
				}

				this.VALUEFLAG_CD = readString(dis, ois);

				this.QUANTITY_NUM = readString(dis, ois);

				this.UNITS_CD = readString(dis, ois);

				this.END_DATE = readString(dis, ois);

				this.LOCATION_CD = readString(dis, ois);

				this.OBSERVATION_BLOB = readString(dis, ois);

				this.CONFIDENCE_NUM = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				oos.writeObject(this.ENCOUNTER_NUM);

				writeString(this.CONCEPT_CD, dos, oos);

				writeString(this.PROVIDER_ID, dos, oos);

				writeString(this.START_DATE, dos, oos);

				writeString(this.INSTANCE_NUM, dos, oos);

				writeString(this.VALTYPE_CD, dos, oos);

				writeString(this.TVAL_CHAR, dos, oos);

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				writeString(this.VALUEFLAG_CD, dos, oos);

				writeString(this.QUANTITY_NUM, dos, oos);

				writeString(this.UNITS_CD, dos, oos);

				writeString(this.END_DATE, dos, oos);

				writeString(this.LOCATION_CD, dos, oos);

				writeString(this.OBSERVATION_BLOB, dos, oos);

				writeString(this.CONFIDENCE_NUM, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + START_DATE);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + END_DATE);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row32Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PATIENT_NUM,
					other.PATIENT_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.MODIFIER_CD,
					other.MODIFIER_CD);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_20Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_20_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row32Struct row32 = new row32Struct();

				/**
				 * [tAdvancedHash_row32 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row32", false);
				start_Hash.put("tAdvancedHash_row32",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row32";

				int tos_count_tAdvancedHash_row32 = 0;

				// connection name:row32
				// source node:tFileInputDelimited_20 -
				// inputs:(after_tFileInputDelimited_16) outputs:(row32,row32) |
				// target node:tAdvancedHash_row32 - inputs:(row32) outputs:()
				// linked node: tMap_15 - inputs:(copyOfto_obs_fct,row31,row32)
				// outputs:(copyOfout1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row32 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row32Struct> tHash_Lookup_row32 = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row32Struct>(
						matchingModeEnum_row32,
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid
								+ "_Lookup_row32_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public row32Struct createRowInstance() {
								return new row32Struct();
							}
						}

						, 200000

				);

				tHash_Lookup_row32.initPut();

				globalMap.put("tHash_Lookup_row32", tHash_Lookup_row32);

				/**
				 * [tAdvancedHash_row32 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_20 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_20", false);
				start_Hash.put("tFileInputDelimited_20",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_20";

				int tos_count_tFileInputDelimited_20 = 0;

				int nb_line_tFileInputDelimited_20 = 0;
				int footer_tFileInputDelimited_20 = 0;
				int totalLinetFileInputDelimited_20 = 0;
				int limittFileInputDelimited_20 = -1;
				int lastLinetFileInputDelimited_20 = -1;

				char fieldSeparator_tFileInputDelimited_20[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_20 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_20[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_20 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_20 = /**
				 * Start field
				 * tFileInputDelimited_20:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_3_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_20:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_20 = null;

				try {

					String[] rowtFileInputDelimited_20 = null;
					int currentLinetFileInputDelimited_20 = 0;
					int outputLinetFileInputDelimited_20 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_20 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_20 = 0;
							if (footer_value_tFileInputDelimited_20 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_20 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_20,
									fieldSeparator_tFileInputDelimited_20[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_20 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_20)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_20[0]);
						}

						csvReadertFileInputDelimited_20
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_20[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_20[0] != '\r'))
							csvReadertFileInputDelimited_20.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_20[0]);

						csvReadertFileInputDelimited_20.setQuoteChar('"');

						csvReadertFileInputDelimited_20
								.setEscapeChar(csvReadertFileInputDelimited_20
										.getQuoteChar());

						if (footer_tFileInputDelimited_20 > 0) {
							for (totalLinetFileInputDelimited_20 = 0; totalLinetFileInputDelimited_20 < 0; totalLinetFileInputDelimited_20++) {
								csvReadertFileInputDelimited_20.readNext();
							}
							csvReadertFileInputDelimited_20
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_20.readNext()) {

								rowtFileInputDelimited_20 = csvReadertFileInputDelimited_20
										.getValues();
								if (!(rowtFileInputDelimited_20.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_20[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_20++;

								}

							}
							int lastLineTemptFileInputDelimited_20 = totalLinetFileInputDelimited_20
									- footer_tFileInputDelimited_20 < 0 ? 0
									: totalLinetFileInputDelimited_20
											- footer_tFileInputDelimited_20;
							if (lastLinetFileInputDelimited_20 > 0) {
								lastLinetFileInputDelimited_20 = lastLinetFileInputDelimited_20 < lastLineTemptFileInputDelimited_20 ? lastLinetFileInputDelimited_20
										: lastLineTemptFileInputDelimited_20;
							} else {
								lastLinetFileInputDelimited_20 = lastLineTemptFileInputDelimited_20;
							}

							csvReadertFileInputDelimited_20.close();
							if (filename_tFileInputDelimited_20 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_20 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_20,
										fieldSeparator_tFileInputDelimited_20[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_20 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_20)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_20[0]);
							}
							csvReadertFileInputDelimited_20
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_20[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_20[0] != '\r'))
								csvReadertFileInputDelimited_20
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_20[0]);

							csvReadertFileInputDelimited_20.setQuoteChar('"');

							csvReadertFileInputDelimited_20
									.setEscapeChar(csvReadertFileInputDelimited_20
											.getQuoteChar());

						}

						if (limittFileInputDelimited_20 != 0) {
							for (currentLinetFileInputDelimited_20 = 0; currentLinetFileInputDelimited_20 < 0; currentLinetFileInputDelimited_20++) {
								csvReadertFileInputDelimited_20.readNext();
							}
						}
						csvReadertFileInputDelimited_20
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_20 != 0
							&& csvReadertFileInputDelimited_20 != null
							&& csvReadertFileInputDelimited_20.readNext()) {

						rowtFileInputDelimited_20 = csvReadertFileInputDelimited_20
								.getValues();

						if (rowtFileInputDelimited_20.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_20[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_20++;

						if (lastLinetFileInputDelimited_20 > -1
								&& currentLinetFileInputDelimited_20 > lastLinetFileInputDelimited_20) {
							break;
						}
						outputLinetFileInputDelimited_20++;
						if (limittFileInputDelimited_20 > 0
								&& outputLinetFileInputDelimited_20 > limittFileInputDelimited_20) {
							break;
						}

						row32 = null;

						row32 = null;

						boolean whetherReject_tFileInputDelimited_20 = false;
						row32 = new row32Struct();
						try {

							if (rowtFileInputDelimited_20.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_20[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row32.ENCOUNTER_NUM = null;

								row32.PATIENT_NUM = null;

								row32.CONCEPT_CD = null;

								row32.PROVIDER_ID = null;

								row32.START_DATE = null;

								row32.MODIFIER_CD = null;

								row32.INSTANCE_NUM = null;

								row32.VALTYPE_CD = null;

								row32.TVAL_CHAR = null;

								row32.NVAL_NUM = null;

								row32.VALUEFLAG_CD = null;

								row32.QUANTITY_NUM = null;

								row32.UNITS_CD = null;

								row32.END_DATE = null;

								row32.LOCATION_CD = null;

								row32.OBSERVATION_BLOB = null;

								row32.CONFIDENCE_NUM = null;

								row32.UPDATE_DATE = null;

								row32.DOWNLOAD_DATE = null;

								row32.IMPORT_DATE = null;

								row32.SOURCESYSTEM_CD = null;

								row32.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_20 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_20 = 0;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									if (rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]
											.length() > 0) {

										row32.ENCOUNTER_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]);

									} else {
										row32.ENCOUNTER_NUM = null;
									}

								} else {
									row32.ENCOUNTER_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 1;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									if (rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]
											.length() > 0) {

										row32.PATIENT_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]);

									} else {
										row32.PATIENT_NUM = null;
									}

								} else {
									row32.PATIENT_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 2;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									row32.CONCEPT_CD = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									row32.CONCEPT_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 3;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									row32.PROVIDER_ID = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									row32.PROVIDER_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 4;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									row32.START_DATE = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									row32.START_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 5;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									row32.MODIFIER_CD = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									row32.MODIFIER_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 6;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									row32.INSTANCE_NUM = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									row32.INSTANCE_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 7;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									row32.VALTYPE_CD = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									row32.VALTYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 8;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									row32.TVAL_CHAR = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									row32.TVAL_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 9;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									if (rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]
											.length() > 0) {

										row32.NVAL_NUM = ParserUtils
												.parseTo_Float(rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]);

									} else {
										row32.NVAL_NUM = null;
									}

								} else {
									row32.NVAL_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 10;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									row32.VALUEFLAG_CD = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									row32.VALUEFLAG_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 11;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									row32.QUANTITY_NUM = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									row32.QUANTITY_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 12;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									row32.UNITS_CD = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									row32.UNITS_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 13;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									row32.END_DATE = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									row32.END_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 14;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									row32.LOCATION_CD = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									row32.LOCATION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 15;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									row32.OBSERVATION_BLOB = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									row32.OBSERVATION_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 16;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									row32.CONFIDENCE_NUM = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									row32.CONFIDENCE_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 17;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									if (rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]
											.length() > 0) {

										row32.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20],
														"yyyy-MM-dd");

									} else {
										row32.UPDATE_DATE = null;
									}

								} else {
									row32.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 18;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									if (rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]
											.length() > 0) {

										row32.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20],
														"yyyy-MM-dd");

									} else {
										row32.DOWNLOAD_DATE = null;
									}

								} else {
									row32.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 19;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									if (rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]
											.length() > 0) {

										row32.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20],
														"yyyy-MM-dd");

									} else {
										row32.IMPORT_DATE = null;
									}

								} else {
									row32.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 20;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									row32.SOURCESYSTEM_CD = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									row32.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 21;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									row32.UPLOAD_ID = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									row32.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_20 = true;

							System.err.println(e.getMessage());
							row32 = null;

						}

						/**
						 * [tFileInputDelimited_20 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_20 main ] start
						 */

						currentComponent = "tFileInputDelimited_20";

						tos_count_tFileInputDelimited_20++;

						/**
						 * [tFileInputDelimited_20 main ] stop
						 */
						// Start of branch "row32"
						if (row32 != null) {

							/**
							 * [tAdvancedHash_row32 main ] start
							 */

							currentComponent = "tAdvancedHash_row32";

							row32Struct row32_HashRow = tHash_Lookup_row32
									.getNextFreeRow();

							row32_HashRow.ENCOUNTER_NUM = row32.ENCOUNTER_NUM;

							row32_HashRow.PATIENT_NUM = row32.PATIENT_NUM;

							row32_HashRow.CONCEPT_CD = row32.CONCEPT_CD;

							row32_HashRow.PROVIDER_ID = row32.PROVIDER_ID;

							row32_HashRow.START_DATE = row32.START_DATE;

							row32_HashRow.MODIFIER_CD = row32.MODIFIER_CD;

							row32_HashRow.INSTANCE_NUM = row32.INSTANCE_NUM;

							row32_HashRow.VALTYPE_CD = row32.VALTYPE_CD;

							row32_HashRow.TVAL_CHAR = row32.TVAL_CHAR;

							row32_HashRow.NVAL_NUM = row32.NVAL_NUM;

							row32_HashRow.VALUEFLAG_CD = row32.VALUEFLAG_CD;

							row32_HashRow.QUANTITY_NUM = row32.QUANTITY_NUM;

							row32_HashRow.UNITS_CD = row32.UNITS_CD;

							row32_HashRow.END_DATE = row32.END_DATE;

							row32_HashRow.LOCATION_CD = row32.LOCATION_CD;

							row32_HashRow.OBSERVATION_BLOB = row32.OBSERVATION_BLOB;

							row32_HashRow.CONFIDENCE_NUM = row32.CONFIDENCE_NUM;

							row32_HashRow.UPDATE_DATE = row32.UPDATE_DATE;

							row32_HashRow.DOWNLOAD_DATE = row32.DOWNLOAD_DATE;

							row32_HashRow.IMPORT_DATE = row32.IMPORT_DATE;

							row32_HashRow.SOURCESYSTEM_CD = row32.SOURCESYSTEM_CD;

							row32_HashRow.UPLOAD_ID = row32.UPLOAD_ID;

							tHash_Lookup_row32.put(row32_HashRow);

							tos_count_tAdvancedHash_row32++;

							/**
							 * [tAdvancedHash_row32 main ] stop
							 */

						} // End of branch "row32"

						/**
						 * [tFileInputDelimited_20 end ] start
						 */

						currentComponent = "tFileInputDelimited_20";

						nb_line_tFileInputDelimited_20++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_20 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_20 != null) {
							csvReadertFileInputDelimited_20.close();
						}
					}
					if (csvReadertFileInputDelimited_20 != null) {
						globalMap.put("tFileInputDelimited_20_NB_LINE",
								nb_line_tFileInputDelimited_20);
					}
				}

				ok_Hash.put("tFileInputDelimited_20", true);
				end_Hash.put("tFileInputDelimited_20",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_20 end ] stop
				 */

				/**
				 * [tAdvancedHash_row32 end ] start
				 */

				currentComponent = "tAdvancedHash_row32";

				tHash_Lookup_row32.endPut();

				ok_Hash.put("tAdvancedHash_row32", true);
				end_Hash.put("tAdvancedHash_row32", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row32 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_20_SUBPROCESS_STATE", 1);
	}

	public static class row33Struct implements
			routines.system.IPersistableComparableLookupRow<row33Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public String START_DATE;

		public String getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public String END_DATE;

		public String getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.PATIENT_NUM == null) ? 0 : this.PATIENT_NUM
								.hashCode());

				result = prime
						* result
						+ ((this.MODIFIER_CD == null) ? 0 : this.MODIFIER_CD
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row33Struct other = (row33Struct) obj;

			if (this.PATIENT_NUM == null) {
				if (other.PATIENT_NUM != null)
					return false;
			} else if (!this.PATIENT_NUM.equals(other.PATIENT_NUM))
				return false;

			if (this.MODIFIER_CD == null) {
				if (other.MODIFIER_CD != null)
					return false;
			} else if (!this.MODIFIER_CD.equals(other.MODIFIER_CD))
				return false;

			return true;
		}

		public void copyDataTo(row33Struct other) {

			other.ENCOUNTER_NUM = this.ENCOUNTER_NUM;
			other.PATIENT_NUM = this.PATIENT_NUM;
			other.CONCEPT_CD = this.CONCEPT_CD;
			other.PROVIDER_ID = this.PROVIDER_ID;
			other.START_DATE = this.START_DATE;
			other.MODIFIER_CD = this.MODIFIER_CD;
			other.INSTANCE_NUM = this.INSTANCE_NUM;
			other.VALTYPE_CD = this.VALTYPE_CD;
			other.TVAL_CHAR = this.TVAL_CHAR;
			other.NVAL_NUM = this.NVAL_NUM;
			other.VALUEFLAG_CD = this.VALUEFLAG_CD;
			other.QUANTITY_NUM = this.QUANTITY_NUM;
			other.UNITS_CD = this.UNITS_CD;
			other.END_DATE = this.END_DATE;
			other.LOCATION_CD = this.LOCATION_CD;
			other.OBSERVATION_BLOB = this.OBSERVATION_BLOB;
			other.CONFIDENCE_NUM = this.CONFIDENCE_NUM;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row33Struct other) {

			other.PATIENT_NUM = this.PATIENT_NUM;
			other.MODIFIER_CD = this.MODIFIER_CD;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.MODIFIER_CD = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.MODIFIER_CD, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ENCOUNTER_NUM = (BigDecimal) ois.readObject();

				this.CONCEPT_CD = readString(dis, ois);

				this.PROVIDER_ID = readString(dis, ois);

				this.START_DATE = readString(dis, ois);

				this.INSTANCE_NUM = readString(dis, ois);

				this.VALTYPE_CD = readString(dis, ois);

				this.TVAL_CHAR = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.NVAL_NUM = null;
				} else {
					this.NVAL_NUM = dis.readFloat();
				}

				this.VALUEFLAG_CD = readString(dis, ois);

				this.QUANTITY_NUM = readString(dis, ois);

				this.UNITS_CD = readString(dis, ois);

				this.END_DATE = readString(dis, ois);

				this.LOCATION_CD = readString(dis, ois);

				this.OBSERVATION_BLOB = readString(dis, ois);

				this.CONFIDENCE_NUM = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				oos.writeObject(this.ENCOUNTER_NUM);

				writeString(this.CONCEPT_CD, dos, oos);

				writeString(this.PROVIDER_ID, dos, oos);

				writeString(this.START_DATE, dos, oos);

				writeString(this.INSTANCE_NUM, dos, oos);

				writeString(this.VALTYPE_CD, dos, oos);

				writeString(this.TVAL_CHAR, dos, oos);

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				writeString(this.VALUEFLAG_CD, dos, oos);

				writeString(this.QUANTITY_NUM, dos, oos);

				writeString(this.UNITS_CD, dos, oos);

				writeString(this.END_DATE, dos, oos);

				writeString(this.LOCATION_CD, dos, oos);

				writeString(this.OBSERVATION_BLOB, dos, oos);

				writeString(this.CONFIDENCE_NUM, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + START_DATE);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + END_DATE);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row33Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PATIENT_NUM,
					other.PATIENT_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.MODIFIER_CD,
					other.MODIFIER_CD);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_21Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_21_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row33Struct row33 = new row33Struct();

				/**
				 * [tAdvancedHash_row33 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row33", false);
				start_Hash.put("tAdvancedHash_row33",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row33";

				int tos_count_tAdvancedHash_row33 = 0;

				// connection name:row33
				// source node:tFileInputDelimited_21 -
				// inputs:(after_tFileInputDelimited_16) outputs:(row33,row33) |
				// target node:tAdvancedHash_row33 - inputs:(row33) outputs:()
				// linked node: tMap_14 - inputs:(copyOfout1,row33,row30)
				// outputs:(copyOfasddd)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row33 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row33Struct> tHash_Lookup_row33 = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row33Struct>(
						matchingModeEnum_row33,
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid
								+ "_Lookup_row33_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public row33Struct createRowInstance() {
								return new row33Struct();
							}
						}

						, 200000

				);

				tHash_Lookup_row33.initPut();

				globalMap.put("tHash_Lookup_row33", tHash_Lookup_row33);

				/**
				 * [tAdvancedHash_row33 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_21 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_21", false);
				start_Hash.put("tFileInputDelimited_21",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_21";

				int tos_count_tFileInputDelimited_21 = 0;

				int nb_line_tFileInputDelimited_21 = 0;
				int footer_tFileInputDelimited_21 = 0;
				int totalLinetFileInputDelimited_21 = 0;
				int limittFileInputDelimited_21 = -1;
				int lastLinetFileInputDelimited_21 = -1;

				char fieldSeparator_tFileInputDelimited_21[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_21 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_21[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_21 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_21 = /**
				 * Start field
				 * tFileInputDelimited_21:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_3_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_21:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_21 = null;

				try {

					String[] rowtFileInputDelimited_21 = null;
					int currentLinetFileInputDelimited_21 = 0;
					int outputLinetFileInputDelimited_21 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_21 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_21 = 0;
							if (footer_value_tFileInputDelimited_21 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_21 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_21,
									fieldSeparator_tFileInputDelimited_21[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_21 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_21)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_21[0]);
						}

						csvReadertFileInputDelimited_21
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_21[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_21[0] != '\r'))
							csvReadertFileInputDelimited_21.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_21[0]);

						csvReadertFileInputDelimited_21.setQuoteChar('"');

						csvReadertFileInputDelimited_21
								.setEscapeChar(csvReadertFileInputDelimited_21
										.getQuoteChar());

						if (footer_tFileInputDelimited_21 > 0) {
							for (totalLinetFileInputDelimited_21 = 0; totalLinetFileInputDelimited_21 < 0; totalLinetFileInputDelimited_21++) {
								csvReadertFileInputDelimited_21.readNext();
							}
							csvReadertFileInputDelimited_21
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_21.readNext()) {

								rowtFileInputDelimited_21 = csvReadertFileInputDelimited_21
										.getValues();
								if (!(rowtFileInputDelimited_21.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_21[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_21++;

								}

							}
							int lastLineTemptFileInputDelimited_21 = totalLinetFileInputDelimited_21
									- footer_tFileInputDelimited_21 < 0 ? 0
									: totalLinetFileInputDelimited_21
											- footer_tFileInputDelimited_21;
							if (lastLinetFileInputDelimited_21 > 0) {
								lastLinetFileInputDelimited_21 = lastLinetFileInputDelimited_21 < lastLineTemptFileInputDelimited_21 ? lastLinetFileInputDelimited_21
										: lastLineTemptFileInputDelimited_21;
							} else {
								lastLinetFileInputDelimited_21 = lastLineTemptFileInputDelimited_21;
							}

							csvReadertFileInputDelimited_21.close();
							if (filename_tFileInputDelimited_21 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_21 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_21,
										fieldSeparator_tFileInputDelimited_21[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_21 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_21)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_21[0]);
							}
							csvReadertFileInputDelimited_21
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_21[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_21[0] != '\r'))
								csvReadertFileInputDelimited_21
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_21[0]);

							csvReadertFileInputDelimited_21.setQuoteChar('"');

							csvReadertFileInputDelimited_21
									.setEscapeChar(csvReadertFileInputDelimited_21
											.getQuoteChar());

						}

						if (limittFileInputDelimited_21 != 0) {
							for (currentLinetFileInputDelimited_21 = 0; currentLinetFileInputDelimited_21 < 0; currentLinetFileInputDelimited_21++) {
								csvReadertFileInputDelimited_21.readNext();
							}
						}
						csvReadertFileInputDelimited_21
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_21 != 0
							&& csvReadertFileInputDelimited_21 != null
							&& csvReadertFileInputDelimited_21.readNext()) {

						rowtFileInputDelimited_21 = csvReadertFileInputDelimited_21
								.getValues();

						if (rowtFileInputDelimited_21.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_21[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_21++;

						if (lastLinetFileInputDelimited_21 > -1
								&& currentLinetFileInputDelimited_21 > lastLinetFileInputDelimited_21) {
							break;
						}
						outputLinetFileInputDelimited_21++;
						if (limittFileInputDelimited_21 > 0
								&& outputLinetFileInputDelimited_21 > limittFileInputDelimited_21) {
							break;
						}

						row33 = null;

						row33 = null;

						boolean whetherReject_tFileInputDelimited_21 = false;
						row33 = new row33Struct();
						try {

							if (rowtFileInputDelimited_21.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_21[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row33.ENCOUNTER_NUM = null;

								row33.PATIENT_NUM = null;

								row33.CONCEPT_CD = null;

								row33.PROVIDER_ID = null;

								row33.START_DATE = null;

								row33.MODIFIER_CD = null;

								row33.INSTANCE_NUM = null;

								row33.VALTYPE_CD = null;

								row33.TVAL_CHAR = null;

								row33.NVAL_NUM = null;

								row33.VALUEFLAG_CD = null;

								row33.QUANTITY_NUM = null;

								row33.UNITS_CD = null;

								row33.END_DATE = null;

								row33.LOCATION_CD = null;

								row33.OBSERVATION_BLOB = null;

								row33.CONFIDENCE_NUM = null;

								row33.UPDATE_DATE = null;

								row33.DOWNLOAD_DATE = null;

								row33.IMPORT_DATE = null;

								row33.SOURCESYSTEM_CD = null;

								row33.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_21 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_21 = 0;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									if (rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21]
											.length() > 0) {

										row33.ENCOUNTER_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21]);

									} else {
										row33.ENCOUNTER_NUM = null;
									}

								} else {
									row33.ENCOUNTER_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 1;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									if (rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21]
											.length() > 0) {

										row33.PATIENT_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21]);

									} else {
										row33.PATIENT_NUM = null;
									}

								} else {
									row33.PATIENT_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 2;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									row33.CONCEPT_CD = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									row33.CONCEPT_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 3;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									row33.PROVIDER_ID = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									row33.PROVIDER_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 4;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									row33.START_DATE = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									row33.START_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 5;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									row33.MODIFIER_CD = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									row33.MODIFIER_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 6;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									row33.INSTANCE_NUM = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									row33.INSTANCE_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 7;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									row33.VALTYPE_CD = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									row33.VALTYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 8;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									row33.TVAL_CHAR = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									row33.TVAL_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 9;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									if (rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21]
											.length() > 0) {

										row33.NVAL_NUM = ParserUtils
												.parseTo_Float(rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21]);

									} else {
										row33.NVAL_NUM = null;
									}

								} else {
									row33.NVAL_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 10;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									row33.VALUEFLAG_CD = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									row33.VALUEFLAG_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 11;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									row33.QUANTITY_NUM = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									row33.QUANTITY_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 12;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									row33.UNITS_CD = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									row33.UNITS_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 13;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									row33.END_DATE = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									row33.END_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 14;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									row33.LOCATION_CD = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									row33.LOCATION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 15;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									row33.OBSERVATION_BLOB = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									row33.OBSERVATION_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 16;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									row33.CONFIDENCE_NUM = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									row33.CONFIDENCE_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 17;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									if (rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21]
											.length() > 0) {

										row33.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21],
														"yyyy-MM-dd");

									} else {
										row33.UPDATE_DATE = null;
									}

								} else {
									row33.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 18;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									if (rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21]
											.length() > 0) {

										row33.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21],
														"yyyy-MM-dd");

									} else {
										row33.DOWNLOAD_DATE = null;
									}

								} else {
									row33.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 19;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									if (rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21]
											.length() > 0) {

										row33.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21],
														"yyyy-MM-dd");

									} else {
										row33.IMPORT_DATE = null;
									}

								} else {
									row33.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 20;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									row33.SOURCESYSTEM_CD = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									row33.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 21;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									row33.UPLOAD_ID = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									row33.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_21 = true;

							System.err.println(e.getMessage());
							row33 = null;

						}

						/**
						 * [tFileInputDelimited_21 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_21 main ] start
						 */

						currentComponent = "tFileInputDelimited_21";

						tos_count_tFileInputDelimited_21++;

						/**
						 * [tFileInputDelimited_21 main ] stop
						 */
						// Start of branch "row33"
						if (row33 != null) {

							/**
							 * [tAdvancedHash_row33 main ] start
							 */

							currentComponent = "tAdvancedHash_row33";

							row33Struct row33_HashRow = tHash_Lookup_row33
									.getNextFreeRow();

							row33_HashRow.ENCOUNTER_NUM = row33.ENCOUNTER_NUM;

							row33_HashRow.PATIENT_NUM = row33.PATIENT_NUM;

							row33_HashRow.CONCEPT_CD = row33.CONCEPT_CD;

							row33_HashRow.PROVIDER_ID = row33.PROVIDER_ID;

							row33_HashRow.START_DATE = row33.START_DATE;

							row33_HashRow.MODIFIER_CD = row33.MODIFIER_CD;

							row33_HashRow.INSTANCE_NUM = row33.INSTANCE_NUM;

							row33_HashRow.VALTYPE_CD = row33.VALTYPE_CD;

							row33_HashRow.TVAL_CHAR = row33.TVAL_CHAR;

							row33_HashRow.NVAL_NUM = row33.NVAL_NUM;

							row33_HashRow.VALUEFLAG_CD = row33.VALUEFLAG_CD;

							row33_HashRow.QUANTITY_NUM = row33.QUANTITY_NUM;

							row33_HashRow.UNITS_CD = row33.UNITS_CD;

							row33_HashRow.END_DATE = row33.END_DATE;

							row33_HashRow.LOCATION_CD = row33.LOCATION_CD;

							row33_HashRow.OBSERVATION_BLOB = row33.OBSERVATION_BLOB;

							row33_HashRow.CONFIDENCE_NUM = row33.CONFIDENCE_NUM;

							row33_HashRow.UPDATE_DATE = row33.UPDATE_DATE;

							row33_HashRow.DOWNLOAD_DATE = row33.DOWNLOAD_DATE;

							row33_HashRow.IMPORT_DATE = row33.IMPORT_DATE;

							row33_HashRow.SOURCESYSTEM_CD = row33.SOURCESYSTEM_CD;

							row33_HashRow.UPLOAD_ID = row33.UPLOAD_ID;

							tHash_Lookup_row33.put(row33_HashRow);

							tos_count_tAdvancedHash_row33++;

							/**
							 * [tAdvancedHash_row33 main ] stop
							 */

						} // End of branch "row33"

						/**
						 * [tFileInputDelimited_21 end ] start
						 */

						currentComponent = "tFileInputDelimited_21";

						nb_line_tFileInputDelimited_21++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_21 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_21 != null) {
							csvReadertFileInputDelimited_21.close();
						}
					}
					if (csvReadertFileInputDelimited_21 != null) {
						globalMap.put("tFileInputDelimited_21_NB_LINE",
								nb_line_tFileInputDelimited_21);
					}
				}

				ok_Hash.put("tFileInputDelimited_21", true);
				end_Hash.put("tFileInputDelimited_21",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_21 end ] stop
				 */

				/**
				 * [tAdvancedHash_row33 end ] start
				 */

				currentComponent = "tAdvancedHash_row33";

				tHash_Lookup_row33.endPut();

				ok_Hash.put("tAdvancedHash_row33", true);
				end_Hash.put("tAdvancedHash_row33", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row33 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_21_SUBPROCESS_STATE", 1);
	}

	public static class row35Struct implements
			routines.system.IPersistableComparableLookupRow<row35Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.PATIENT_NUM == null) ? 0 : this.PATIENT_NUM
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row35Struct other = (row35Struct) obj;

			if (this.PATIENT_NUM == null) {
				if (other.PATIENT_NUM != null)
					return false;
			} else if (!this.PATIENT_NUM.equals(other.PATIENT_NUM))
				return false;

			return true;
		}

		public void copyDataTo(row35Struct other) {

			other.PATIENT_IDE = this.PATIENT_IDE;
			other.PATIENT_IDE_SOURCE = this.PATIENT_IDE_SOURCE;
			other.PATIENT_NUM = this.PATIENT_NUM;
			other.PATIENT_IDE_STATUS = this.PATIENT_IDE_STATUS;
			other.UPLOAD_DATE = this.UPLOAD_DATE;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row35Struct other) {

			other.PATIENT_NUM = this.PATIENT_NUM;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.PATIENT_IDE = readString(dis, ois);

				this.PATIENT_IDE_SOURCE = readString(dis, ois);

				this.PATIENT_IDE_STATUS = readString(dis, ois);

				this.UPLOAD_DATE = readDate(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.PATIENT_IDE, dos, oos);

				writeString(this.PATIENT_IDE_SOURCE, dos, oos);

				writeString(this.PATIENT_IDE_STATUS, dos, oos);

				writeDate(this.UPLOAD_DATE, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row35Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PATIENT_NUM,
					other.PATIENT_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_22Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_22_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row35Struct row35 = new row35Struct();

				/**
				 * [tAdvancedHash_row35 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row35", false);
				start_Hash.put("tAdvancedHash_row35",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row35";

				int tos_count_tAdvancedHash_row35 = 0;

				// connection name:row35
				// source node:tFileInputDelimited_22 -
				// inputs:(after_tFileInputDelimited_16) outputs:(row35,row35) |
				// target node:tAdvancedHash_row35 - inputs:(row35) outputs:()
				// linked node: tMap_17 -
				// inputs:(copyOfto_patient_mapping,row35)
				// outputs:(copyOfto_pat_mapping,copyOfasdd)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row35 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row35Struct> tHash_Lookup_row35 = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row35Struct>(
						matchingModeEnum_row35,
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid
								+ "_Lookup_row35_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public row35Struct createRowInstance() {
								return new row35Struct();
							}
						}

						, 200000

				);

				tHash_Lookup_row35.initPut();

				globalMap.put("tHash_Lookup_row35", tHash_Lookup_row35);

				/**
				 * [tAdvancedHash_row35 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_22 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_22", false);
				start_Hash.put("tFileInputDelimited_22",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_22";

				int tos_count_tFileInputDelimited_22 = 0;

				int nb_line_tFileInputDelimited_22 = 0;
				int footer_tFileInputDelimited_22 = 0;
				int totalLinetFileInputDelimited_22 = 0;
				int limittFileInputDelimited_22 = -1;
				int lastLinetFileInputDelimited_22 = -1;

				char fieldSeparator_tFileInputDelimited_22[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_22 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_22[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_22 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_22 = /**
				 * Start field
				 * tFileInputDelimited_22:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_5_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_22:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_22 = null;

				try {

					String[] rowtFileInputDelimited_22 = null;
					int currentLinetFileInputDelimited_22 = 0;
					int outputLinetFileInputDelimited_22 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_22 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_22 = 0;
							if (footer_value_tFileInputDelimited_22 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_22 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_22,
									fieldSeparator_tFileInputDelimited_22[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_22 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_22)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_22[0]);
						}

						csvReadertFileInputDelimited_22
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_22[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_22[0] != '\r'))
							csvReadertFileInputDelimited_22.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_22[0]);

						csvReadertFileInputDelimited_22.setQuoteChar('"');

						csvReadertFileInputDelimited_22
								.setEscapeChar(csvReadertFileInputDelimited_22
										.getQuoteChar());

						if (footer_tFileInputDelimited_22 > 0) {
							for (totalLinetFileInputDelimited_22 = 0; totalLinetFileInputDelimited_22 < 1; totalLinetFileInputDelimited_22++) {
								csvReadertFileInputDelimited_22.readNext();
							}
							csvReadertFileInputDelimited_22
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_22.readNext()) {

								rowtFileInputDelimited_22 = csvReadertFileInputDelimited_22
										.getValues();
								if (!(rowtFileInputDelimited_22.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_22[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_22++;

								}

							}
							int lastLineTemptFileInputDelimited_22 = totalLinetFileInputDelimited_22
									- footer_tFileInputDelimited_22 < 0 ? 0
									: totalLinetFileInputDelimited_22
											- footer_tFileInputDelimited_22;
							if (lastLinetFileInputDelimited_22 > 0) {
								lastLinetFileInputDelimited_22 = lastLinetFileInputDelimited_22 < lastLineTemptFileInputDelimited_22 ? lastLinetFileInputDelimited_22
										: lastLineTemptFileInputDelimited_22;
							} else {
								lastLinetFileInputDelimited_22 = lastLineTemptFileInputDelimited_22;
							}

							csvReadertFileInputDelimited_22.close();
							if (filename_tFileInputDelimited_22 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_22 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_22,
										fieldSeparator_tFileInputDelimited_22[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_22 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_22)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_22[0]);
							}
							csvReadertFileInputDelimited_22
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_22[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_22[0] != '\r'))
								csvReadertFileInputDelimited_22
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_22[0]);

							csvReadertFileInputDelimited_22.setQuoteChar('"');

							csvReadertFileInputDelimited_22
									.setEscapeChar(csvReadertFileInputDelimited_22
											.getQuoteChar());

						}

						if (limittFileInputDelimited_22 != 0) {
							for (currentLinetFileInputDelimited_22 = 0; currentLinetFileInputDelimited_22 < 1; currentLinetFileInputDelimited_22++) {
								csvReadertFileInputDelimited_22.readNext();
							}
						}
						csvReadertFileInputDelimited_22
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_22 != 0
							&& csvReadertFileInputDelimited_22 != null
							&& csvReadertFileInputDelimited_22.readNext()) {

						rowtFileInputDelimited_22 = csvReadertFileInputDelimited_22
								.getValues();

						if (rowtFileInputDelimited_22.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_22[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_22++;

						if (lastLinetFileInputDelimited_22 > -1
								&& currentLinetFileInputDelimited_22 > lastLinetFileInputDelimited_22) {
							break;
						}
						outputLinetFileInputDelimited_22++;
						if (limittFileInputDelimited_22 > 0
								&& outputLinetFileInputDelimited_22 > limittFileInputDelimited_22) {
							break;
						}

						row35 = null;

						row35 = null;

						boolean whetherReject_tFileInputDelimited_22 = false;
						row35 = new row35Struct();
						try {

							if (rowtFileInputDelimited_22.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_22[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row35.PATIENT_IDE = null;

								row35.PATIENT_IDE_SOURCE = null;

								row35.PATIENT_NUM = null;

								row35.PATIENT_IDE_STATUS = null;

								row35.UPLOAD_DATE = null;

								row35.UPDATE_DATE = null;

								row35.DOWNLOAD_DATE = null;

								row35.IMPORT_DATE = null;

								row35.SOURCESYSTEM_CD = null;

								row35.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_22 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_22 = 0;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row35.PATIENT_IDE = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row35.PATIENT_IDE = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 1;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row35.PATIENT_IDE_SOURCE = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row35.PATIENT_IDE_SOURCE = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 2;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									if (rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22]
											.length() > 0) {

										row35.PATIENT_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22]);

									} else {
										row35.PATIENT_NUM = null;
									}

								} else {
									row35.PATIENT_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 3;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row35.PATIENT_IDE_STATUS = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row35.PATIENT_IDE_STATUS = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 4;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									if (rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22]
											.length() > 0) {

										row35.UPLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22],
														"dd-MM-yyyy");

									} else {
										row35.UPLOAD_DATE = null;
									}

								} else {
									row35.UPLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 5;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									if (rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22]
											.length() > 0) {

										row35.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22],
														"dd-MM-yyyy");

									} else {
										row35.UPDATE_DATE = null;
									}

								} else {
									row35.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 6;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									if (rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22]
											.length() > 0) {

										row35.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22],
														"dd-MM-yyyy");

									} else {
										row35.DOWNLOAD_DATE = null;
									}

								} else {
									row35.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 7;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									if (rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22]
											.length() > 0) {

										row35.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22],
														"dd-MM-yyyy");

									} else {
										row35.IMPORT_DATE = null;
									}

								} else {
									row35.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 8;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row35.SOURCESYSTEM_CD = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row35.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_22 = 9;

								if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

									row35.UPLOAD_ID = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

								} else {
									row35.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_22 = true;

							System.err.println(e.getMessage());
							row35 = null;

						}

						/**
						 * [tFileInputDelimited_22 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_22 main ] start
						 */

						currentComponent = "tFileInputDelimited_22";

						tos_count_tFileInputDelimited_22++;

						/**
						 * [tFileInputDelimited_22 main ] stop
						 */
						// Start of branch "row35"
						if (row35 != null) {

							/**
							 * [tAdvancedHash_row35 main ] start
							 */

							currentComponent = "tAdvancedHash_row35";

							row35Struct row35_HashRow = tHash_Lookup_row35
									.getNextFreeRow();

							row35_HashRow.PATIENT_IDE = row35.PATIENT_IDE;

							row35_HashRow.PATIENT_IDE_SOURCE = row35.PATIENT_IDE_SOURCE;

							row35_HashRow.PATIENT_NUM = row35.PATIENT_NUM;

							row35_HashRow.PATIENT_IDE_STATUS = row35.PATIENT_IDE_STATUS;

							row35_HashRow.UPLOAD_DATE = row35.UPLOAD_DATE;

							row35_HashRow.UPDATE_DATE = row35.UPDATE_DATE;

							row35_HashRow.DOWNLOAD_DATE = row35.DOWNLOAD_DATE;

							row35_HashRow.IMPORT_DATE = row35.IMPORT_DATE;

							row35_HashRow.SOURCESYSTEM_CD = row35.SOURCESYSTEM_CD;

							row35_HashRow.UPLOAD_ID = row35.UPLOAD_ID;

							tHash_Lookup_row35.put(row35_HashRow);

							tos_count_tAdvancedHash_row35++;

							/**
							 * [tAdvancedHash_row35 main ] stop
							 */

						} // End of branch "row35"

						/**
						 * [tFileInputDelimited_22 end ] start
						 */

						currentComponent = "tFileInputDelimited_22";

						nb_line_tFileInputDelimited_22++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_22 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_22 != null) {
							csvReadertFileInputDelimited_22.close();
						}
					}
					if (csvReadertFileInputDelimited_22 != null) {
						globalMap.put("tFileInputDelimited_22_NB_LINE",
								nb_line_tFileInputDelimited_22);
					}
				}

				ok_Hash.put("tFileInputDelimited_22", true);
				end_Hash.put("tFileInputDelimited_22",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_22 end ] stop
				 */

				/**
				 * [tAdvancedHash_row35 end ] start
				 */

				currentComponent = "tAdvancedHash_row35";

				tHash_Lookup_row35.endPut();

				ok_Hash.put("tAdvancedHash_row35", true);
				end_Hash.put("tAdvancedHash_row35", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row35 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_22_SUBPROCESS_STATE", 1);
	}

	public static class row36Struct implements
			routines.system.IPersistableComparableLookupRow<row36Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String VITAL_STATUS_CD;

		public String getVITAL_STATUS_CD() {
			return this.VITAL_STATUS_CD;
		}

		public String BIRTH_DATE;

		public String getBIRTH_DATE() {
			return this.BIRTH_DATE;
		}

		public String DEATH_DATE;

		public String getDEATH_DATE() {
			return this.DEATH_DATE;
		}

		public String SEX_CD;

		public String getSEX_CD() {
			return this.SEX_CD;
		}

		public String AGE_IN_YEARS_NUM;

		public String getAGE_IN_YEARS_NUM() {
			return this.AGE_IN_YEARS_NUM;
		}

		public String LANGUAGE_CD;

		public String getLANGUAGE_CD() {
			return this.LANGUAGE_CD;
		}

		public String RACE_CD;

		public String getRACE_CD() {
			return this.RACE_CD;
		}

		public String MARITAL_STATUS_CD;

		public String getMARITAL_STATUS_CD() {
			return this.MARITAL_STATUS_CD;
		}

		public String RELIGION_CD;

		public String getRELIGION_CD() {
			return this.RELIGION_CD;
		}

		public String ZIP_CD;

		public String getZIP_CD() {
			return this.ZIP_CD;
		}

		public String STATECITYZIP_PATH;

		public String getSTATECITYZIP_PATH() {
			return this.STATECITYZIP_PATH;
		}

		public String INCOME_CD;

		public String getINCOME_CD() {
			return this.INCOME_CD;
		}

		public String PATIENT_BLOB;

		public String getPATIENT_BLOB() {
			return this.PATIENT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.PATIENT_NUM == null) ? 0 : this.PATIENT_NUM
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row36Struct other = (row36Struct) obj;

			if (this.PATIENT_NUM == null) {
				if (other.PATIENT_NUM != null)
					return false;
			} else if (!this.PATIENT_NUM.equals(other.PATIENT_NUM))
				return false;

			return true;
		}

		public void copyDataTo(row36Struct other) {

			other.PATIENT_NUM = this.PATIENT_NUM;
			other.VITAL_STATUS_CD = this.VITAL_STATUS_CD;
			other.BIRTH_DATE = this.BIRTH_DATE;
			other.DEATH_DATE = this.DEATH_DATE;
			other.SEX_CD = this.SEX_CD;
			other.AGE_IN_YEARS_NUM = this.AGE_IN_YEARS_NUM;
			other.LANGUAGE_CD = this.LANGUAGE_CD;
			other.RACE_CD = this.RACE_CD;
			other.MARITAL_STATUS_CD = this.MARITAL_STATUS_CD;
			other.RELIGION_CD = this.RELIGION_CD;
			other.ZIP_CD = this.ZIP_CD;
			other.STATECITYZIP_PATH = this.STATECITYZIP_PATH;
			other.INCOME_CD = this.INCOME_CD;
			other.PATIENT_BLOB = this.PATIENT_BLOB;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row36Struct other) {

			other.PATIENT_NUM = this.PATIENT_NUM;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.VITAL_STATUS_CD = readString(dis, ois);

				this.BIRTH_DATE = readString(dis, ois);

				this.DEATH_DATE = readString(dis, ois);

				this.SEX_CD = readString(dis, ois);

				this.AGE_IN_YEARS_NUM = readString(dis, ois);

				this.LANGUAGE_CD = readString(dis, ois);

				this.RACE_CD = readString(dis, ois);

				this.MARITAL_STATUS_CD = readString(dis, ois);

				this.RELIGION_CD = readString(dis, ois);

				this.ZIP_CD = readString(dis, ois);

				this.STATECITYZIP_PATH = readString(dis, ois);

				this.INCOME_CD = readString(dis, ois);

				this.PATIENT_BLOB = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.VITAL_STATUS_CD, dos, oos);

				writeString(this.BIRTH_DATE, dos, oos);

				writeString(this.DEATH_DATE, dos, oos);

				writeString(this.SEX_CD, dos, oos);

				writeString(this.AGE_IN_YEARS_NUM, dos, oos);

				writeString(this.LANGUAGE_CD, dos, oos);

				writeString(this.RACE_CD, dos, oos);

				writeString(this.MARITAL_STATUS_CD, dos, oos);

				writeString(this.RELIGION_CD, dos, oos);

				writeString(this.ZIP_CD, dos, oos);

				writeString(this.STATECITYZIP_PATH, dos, oos);

				writeString(this.INCOME_CD, dos, oos);

				writeString(this.PATIENT_BLOB, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",VITAL_STATUS_CD=" + VITAL_STATUS_CD);
			sb.append(",BIRTH_DATE=" + BIRTH_DATE);
			sb.append(",DEATH_DATE=" + DEATH_DATE);
			sb.append(",SEX_CD=" + SEX_CD);
			sb.append(",AGE_IN_YEARS_NUM=" + AGE_IN_YEARS_NUM);
			sb.append(",LANGUAGE_CD=" + LANGUAGE_CD);
			sb.append(",RACE_CD=" + RACE_CD);
			sb.append(",MARITAL_STATUS_CD=" + MARITAL_STATUS_CD);
			sb.append(",RELIGION_CD=" + RELIGION_CD);
			sb.append(",ZIP_CD=" + ZIP_CD);
			sb.append(",STATECITYZIP_PATH=" + STATECITYZIP_PATH);
			sb.append(",INCOME_CD=" + INCOME_CD);
			sb.append(",PATIENT_BLOB=" + PATIENT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row36Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PATIENT_NUM,
					other.PATIENT_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_23Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_23_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row36Struct row36 = new row36Struct();

				/**
				 * [tAdvancedHash_row36 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row36", false);
				start_Hash.put("tAdvancedHash_row36",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row36";

				int tos_count_tAdvancedHash_row36 = 0;

				// connection name:row36
				// source node:tFileInputDelimited_23 -
				// inputs:(after_tFileInputDelimited_16) outputs:(row36,row36) |
				// target node:tAdvancedHash_row36 - inputs:(row36) outputs:()
				// linked node: tMap_18 - inputs:(copyOfasdd,row36)
				// outputs:(copyOfasd)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row36 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row36Struct> tHash_Lookup_row36 = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row36Struct>(
						matchingModeEnum_row36,
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid
								+ "_Lookup_row36_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public row36Struct createRowInstance() {
								return new row36Struct();
							}
						}

						, 200000

				);

				tHash_Lookup_row36.initPut();

				globalMap.put("tHash_Lookup_row36", tHash_Lookup_row36);

				/**
				 * [tAdvancedHash_row36 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_23 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_23", false);
				start_Hash.put("tFileInputDelimited_23",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_23";

				int tos_count_tFileInputDelimited_23 = 0;

				int nb_line_tFileInputDelimited_23 = 0;
				int footer_tFileInputDelimited_23 = 0;
				int totalLinetFileInputDelimited_23 = 0;
				int limittFileInputDelimited_23 = -1;
				int lastLinetFileInputDelimited_23 = -1;

				char fieldSeparator_tFileInputDelimited_23[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_23 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_23[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_23 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_23 = /**
				 * Start field
				 * tFileInputDelimited_23:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_6_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_23:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_23 = null;

				try {

					String[] rowtFileInputDelimited_23 = null;
					int currentLinetFileInputDelimited_23 = 0;
					int outputLinetFileInputDelimited_23 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_23 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_23 = 0;
							if (footer_value_tFileInputDelimited_23 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_23 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_23,
									fieldSeparator_tFileInputDelimited_23[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_23 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_23)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_23[0]);
						}

						csvReadertFileInputDelimited_23
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_23[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_23[0] != '\r'))
							csvReadertFileInputDelimited_23.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_23[0]);

						csvReadertFileInputDelimited_23.setQuoteChar('"');

						csvReadertFileInputDelimited_23
								.setEscapeChar(csvReadertFileInputDelimited_23
										.getQuoteChar());

						if (footer_tFileInputDelimited_23 > 0) {
							for (totalLinetFileInputDelimited_23 = 0; totalLinetFileInputDelimited_23 < 1; totalLinetFileInputDelimited_23++) {
								csvReadertFileInputDelimited_23.readNext();
							}
							csvReadertFileInputDelimited_23
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_23.readNext()) {

								rowtFileInputDelimited_23 = csvReadertFileInputDelimited_23
										.getValues();
								if (!(rowtFileInputDelimited_23.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_23[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_23++;

								}

							}
							int lastLineTemptFileInputDelimited_23 = totalLinetFileInputDelimited_23
									- footer_tFileInputDelimited_23 < 0 ? 0
									: totalLinetFileInputDelimited_23
											- footer_tFileInputDelimited_23;
							if (lastLinetFileInputDelimited_23 > 0) {
								lastLinetFileInputDelimited_23 = lastLinetFileInputDelimited_23 < lastLineTemptFileInputDelimited_23 ? lastLinetFileInputDelimited_23
										: lastLineTemptFileInputDelimited_23;
							} else {
								lastLinetFileInputDelimited_23 = lastLineTemptFileInputDelimited_23;
							}

							csvReadertFileInputDelimited_23.close();
							if (filename_tFileInputDelimited_23 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_23 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_23,
										fieldSeparator_tFileInputDelimited_23[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_23 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_23)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_23[0]);
							}
							csvReadertFileInputDelimited_23
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_23[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_23[0] != '\r'))
								csvReadertFileInputDelimited_23
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_23[0]);

							csvReadertFileInputDelimited_23.setQuoteChar('"');

							csvReadertFileInputDelimited_23
									.setEscapeChar(csvReadertFileInputDelimited_23
											.getQuoteChar());

						}

						if (limittFileInputDelimited_23 != 0) {
							for (currentLinetFileInputDelimited_23 = 0; currentLinetFileInputDelimited_23 < 1; currentLinetFileInputDelimited_23++) {
								csvReadertFileInputDelimited_23.readNext();
							}
						}
						csvReadertFileInputDelimited_23
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_23 != 0
							&& csvReadertFileInputDelimited_23 != null
							&& csvReadertFileInputDelimited_23.readNext()) {

						rowtFileInputDelimited_23 = csvReadertFileInputDelimited_23
								.getValues();

						if (rowtFileInputDelimited_23.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_23[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_23++;

						if (lastLinetFileInputDelimited_23 > -1
								&& currentLinetFileInputDelimited_23 > lastLinetFileInputDelimited_23) {
							break;
						}
						outputLinetFileInputDelimited_23++;
						if (limittFileInputDelimited_23 > 0
								&& outputLinetFileInputDelimited_23 > limittFileInputDelimited_23) {
							break;
						}

						row36 = null;

						row36 = null;

						boolean whetherReject_tFileInputDelimited_23 = false;
						row36 = new row36Struct();
						try {

							if (rowtFileInputDelimited_23.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_23[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row36.PATIENT_NUM = null;

								row36.VITAL_STATUS_CD = null;

								row36.BIRTH_DATE = null;

								row36.DEATH_DATE = null;

								row36.SEX_CD = null;

								row36.AGE_IN_YEARS_NUM = null;

								row36.LANGUAGE_CD = null;

								row36.RACE_CD = null;

								row36.MARITAL_STATUS_CD = null;

								row36.RELIGION_CD = null;

								row36.ZIP_CD = null;

								row36.STATECITYZIP_PATH = null;

								row36.INCOME_CD = null;

								row36.PATIENT_BLOB = null;

								row36.UPDATE_DATE = null;

								row36.DOWNLOAD_DATE = null;

								row36.IMPORT_DATE = null;

								row36.SOURCESYSTEM_CD = null;

								row36.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_23 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_23 = 0;

								if (columnIndexWithD_tFileInputDelimited_23 < rowtFileInputDelimited_23.length) {

									if (rowtFileInputDelimited_23[columnIndexWithD_tFileInputDelimited_23]
											.length() > 0) {

										row36.PATIENT_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_23[columnIndexWithD_tFileInputDelimited_23]);

									} else {
										row36.PATIENT_NUM = null;
									}

								} else {
									row36.PATIENT_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_23 = 1;

								if (columnIndexWithD_tFileInputDelimited_23 < rowtFileInputDelimited_23.length) {

									row36.VITAL_STATUS_CD = rowtFileInputDelimited_23[columnIndexWithD_tFileInputDelimited_23];

								} else {
									row36.VITAL_STATUS_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_23 = 2;

								if (columnIndexWithD_tFileInputDelimited_23 < rowtFileInputDelimited_23.length) {

									row36.BIRTH_DATE = rowtFileInputDelimited_23[columnIndexWithD_tFileInputDelimited_23];

								} else {
									row36.BIRTH_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_23 = 3;

								if (columnIndexWithD_tFileInputDelimited_23 < rowtFileInputDelimited_23.length) {

									row36.DEATH_DATE = rowtFileInputDelimited_23[columnIndexWithD_tFileInputDelimited_23];

								} else {
									row36.DEATH_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_23 = 4;

								if (columnIndexWithD_tFileInputDelimited_23 < rowtFileInputDelimited_23.length) {

									row36.SEX_CD = rowtFileInputDelimited_23[columnIndexWithD_tFileInputDelimited_23];

								} else {
									row36.SEX_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_23 = 5;

								if (columnIndexWithD_tFileInputDelimited_23 < rowtFileInputDelimited_23.length) {

									row36.AGE_IN_YEARS_NUM = rowtFileInputDelimited_23[columnIndexWithD_tFileInputDelimited_23];

								} else {
									row36.AGE_IN_YEARS_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_23 = 6;

								if (columnIndexWithD_tFileInputDelimited_23 < rowtFileInputDelimited_23.length) {

									row36.LANGUAGE_CD = rowtFileInputDelimited_23[columnIndexWithD_tFileInputDelimited_23];

								} else {
									row36.LANGUAGE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_23 = 7;

								if (columnIndexWithD_tFileInputDelimited_23 < rowtFileInputDelimited_23.length) {

									row36.RACE_CD = rowtFileInputDelimited_23[columnIndexWithD_tFileInputDelimited_23];

								} else {
									row36.RACE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_23 = 8;

								if (columnIndexWithD_tFileInputDelimited_23 < rowtFileInputDelimited_23.length) {

									row36.MARITAL_STATUS_CD = rowtFileInputDelimited_23[columnIndexWithD_tFileInputDelimited_23];

								} else {
									row36.MARITAL_STATUS_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_23 = 9;

								if (columnIndexWithD_tFileInputDelimited_23 < rowtFileInputDelimited_23.length) {

									row36.RELIGION_CD = rowtFileInputDelimited_23[columnIndexWithD_tFileInputDelimited_23];

								} else {
									row36.RELIGION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_23 = 10;

								if (columnIndexWithD_tFileInputDelimited_23 < rowtFileInputDelimited_23.length) {

									row36.ZIP_CD = rowtFileInputDelimited_23[columnIndexWithD_tFileInputDelimited_23];

								} else {
									row36.ZIP_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_23 = 11;

								if (columnIndexWithD_tFileInputDelimited_23 < rowtFileInputDelimited_23.length) {

									row36.STATECITYZIP_PATH = rowtFileInputDelimited_23[columnIndexWithD_tFileInputDelimited_23];

								} else {
									row36.STATECITYZIP_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_23 = 12;

								if (columnIndexWithD_tFileInputDelimited_23 < rowtFileInputDelimited_23.length) {

									row36.INCOME_CD = rowtFileInputDelimited_23[columnIndexWithD_tFileInputDelimited_23];

								} else {
									row36.INCOME_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_23 = 13;

								if (columnIndexWithD_tFileInputDelimited_23 < rowtFileInputDelimited_23.length) {

									row36.PATIENT_BLOB = rowtFileInputDelimited_23[columnIndexWithD_tFileInputDelimited_23];

								} else {
									row36.PATIENT_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_23 = 14;

								if (columnIndexWithD_tFileInputDelimited_23 < rowtFileInputDelimited_23.length) {

									if (rowtFileInputDelimited_23[columnIndexWithD_tFileInputDelimited_23]
											.length() > 0) {

										row36.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_23[columnIndexWithD_tFileInputDelimited_23],
														"dd-MM-yyyy");

									} else {
										row36.UPDATE_DATE = null;
									}

								} else {
									row36.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_23 = 15;

								if (columnIndexWithD_tFileInputDelimited_23 < rowtFileInputDelimited_23.length) {

									if (rowtFileInputDelimited_23[columnIndexWithD_tFileInputDelimited_23]
											.length() > 0) {

										row36.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_23[columnIndexWithD_tFileInputDelimited_23],
														"dd-MM-yyyy");

									} else {
										row36.DOWNLOAD_DATE = null;
									}

								} else {
									row36.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_23 = 16;

								if (columnIndexWithD_tFileInputDelimited_23 < rowtFileInputDelimited_23.length) {

									if (rowtFileInputDelimited_23[columnIndexWithD_tFileInputDelimited_23]
											.length() > 0) {

										row36.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_23[columnIndexWithD_tFileInputDelimited_23],
														"dd-MM-yyyy");

									} else {
										row36.IMPORT_DATE = null;
									}

								} else {
									row36.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_23 = 17;

								if (columnIndexWithD_tFileInputDelimited_23 < rowtFileInputDelimited_23.length) {

									row36.SOURCESYSTEM_CD = rowtFileInputDelimited_23[columnIndexWithD_tFileInputDelimited_23];

								} else {
									row36.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_23 = 18;

								if (columnIndexWithD_tFileInputDelimited_23 < rowtFileInputDelimited_23.length) {

									row36.UPLOAD_ID = rowtFileInputDelimited_23[columnIndexWithD_tFileInputDelimited_23];

								} else {
									row36.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_23 = true;

							System.err.println(e.getMessage());
							row36 = null;

						}

						/**
						 * [tFileInputDelimited_23 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_23 main ] start
						 */

						currentComponent = "tFileInputDelimited_23";

						tos_count_tFileInputDelimited_23++;

						/**
						 * [tFileInputDelimited_23 main ] stop
						 */
						// Start of branch "row36"
						if (row36 != null) {

							/**
							 * [tAdvancedHash_row36 main ] start
							 */

							currentComponent = "tAdvancedHash_row36";

							row36Struct row36_HashRow = tHash_Lookup_row36
									.getNextFreeRow();

							row36_HashRow.PATIENT_NUM = row36.PATIENT_NUM;

							row36_HashRow.VITAL_STATUS_CD = row36.VITAL_STATUS_CD;

							row36_HashRow.BIRTH_DATE = row36.BIRTH_DATE;

							row36_HashRow.DEATH_DATE = row36.DEATH_DATE;

							row36_HashRow.SEX_CD = row36.SEX_CD;

							row36_HashRow.AGE_IN_YEARS_NUM = row36.AGE_IN_YEARS_NUM;

							row36_HashRow.LANGUAGE_CD = row36.LANGUAGE_CD;

							row36_HashRow.RACE_CD = row36.RACE_CD;

							row36_HashRow.MARITAL_STATUS_CD = row36.MARITAL_STATUS_CD;

							row36_HashRow.RELIGION_CD = row36.RELIGION_CD;

							row36_HashRow.ZIP_CD = row36.ZIP_CD;

							row36_HashRow.STATECITYZIP_PATH = row36.STATECITYZIP_PATH;

							row36_HashRow.INCOME_CD = row36.INCOME_CD;

							row36_HashRow.PATIENT_BLOB = row36.PATIENT_BLOB;

							row36_HashRow.UPDATE_DATE = row36.UPDATE_DATE;

							row36_HashRow.DOWNLOAD_DATE = row36.DOWNLOAD_DATE;

							row36_HashRow.IMPORT_DATE = row36.IMPORT_DATE;

							row36_HashRow.SOURCESYSTEM_CD = row36.SOURCESYSTEM_CD;

							row36_HashRow.UPLOAD_ID = row36.UPLOAD_ID;

							tHash_Lookup_row36.put(row36_HashRow);

							tos_count_tAdvancedHash_row36++;

							/**
							 * [tAdvancedHash_row36 main ] stop
							 */

						} // End of branch "row36"

						/**
						 * [tFileInputDelimited_23 end ] start
						 */

						currentComponent = "tFileInputDelimited_23";

						nb_line_tFileInputDelimited_23++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_23 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_23 != null) {
							csvReadertFileInputDelimited_23.close();
						}
					}
					if (csvReadertFileInputDelimited_23 != null) {
						globalMap.put("tFileInputDelimited_23_NB_LINE",
								nb_line_tFileInputDelimited_23);
					}
				}

				ok_Hash.put("tFileInputDelimited_23", true);
				end_Hash.put("tFileInputDelimited_23",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_23 end ] stop
				 */

				/**
				 * [tAdvancedHash_row36 end ] start
				 */

				currentComponent = "tAdvancedHash_row36";

				tHash_Lookup_row36.endPut();

				ok_Hash.put("tAdvancedHash_row36", true);
				end_Hash.put("tAdvancedHash_row36", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row36 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_23_SUBPROCESS_STATE", 1);
	}

	public static class row30Struct implements
			routines.system.IPersistableComparableLookupRow<row30Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String MODIFIER_PATH;

		public String getMODIFIER_PATH() {
			return this.MODIFIER_PATH;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String MODIFIER_BLOB;

		public String getMODIFIER_BLOB() {
			return this.MODIFIER_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.MODIFIER_PATH == null) ? 0
								: this.MODIFIER_PATH.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row30Struct other = (row30Struct) obj;

			if (this.MODIFIER_PATH == null) {
				if (other.MODIFIER_PATH != null)
					return false;
			} else if (!this.MODIFIER_PATH.equals(other.MODIFIER_PATH))
				return false;

			return true;
		}

		public void copyDataTo(row30Struct other) {

			other.MODIFIER_PATH = this.MODIFIER_PATH;
			other.MODIFIER_CD = this.MODIFIER_CD;
			other.NAME_CHAR = this.NAME_CHAR;
			other.MODIFIER_BLOB = this.MODIFIER_BLOB;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row30Struct other) {

			other.MODIFIER_PATH = this.MODIFIER_PATH;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.MODIFIER_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MODIFIER_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.MODIFIER_CD = readString(dis, ois);

				this.NAME_CHAR = readString(dis, ois);

				this.MODIFIER_BLOB = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.MODIFIER_CD, dos, oos);

				writeString(this.NAME_CHAR, dos, oos);

				writeString(this.MODIFIER_BLOB, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MODIFIER_PATH=" + MODIFIER_PATH);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",MODIFIER_BLOB=" + MODIFIER_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row30Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.MODIFIER_PATH,
					other.MODIFIER_PATH);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_25Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_25_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row30Struct row30 = new row30Struct();

				/**
				 * [tAdvancedHash_row30 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row30", false);
				start_Hash.put("tAdvancedHash_row30",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row30";

				int tos_count_tAdvancedHash_row30 = 0;

				// connection name:row30
				// source node:tFileInputDelimited_25 -
				// inputs:(after_tFileInputDelimited_16) outputs:(row30,row30) |
				// target node:tAdvancedHash_row30 - inputs:(row30) outputs:()
				// linked node: tMap_14 - inputs:(copyOfout1,row33,row30)
				// outputs:(copyOfasddd)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row30 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row30Struct> tHash_Lookup_row30 = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row30Struct>(
						matchingModeEnum_row30,
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid
								+ "_Lookup_row30_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public row30Struct createRowInstance() {
								return new row30Struct();
							}
						}

						, 200000

				);

				tHash_Lookup_row30.initPut();

				globalMap.put("tHash_Lookup_row30", tHash_Lookup_row30);

				/**
				 * [tAdvancedHash_row30 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_25 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_25", false);
				start_Hash.put("tFileInputDelimited_25",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_25";

				int tos_count_tFileInputDelimited_25 = 0;

				int nb_line_tFileInputDelimited_25 = 0;
				int footer_tFileInputDelimited_25 = 0;
				int totalLinetFileInputDelimited_25 = 0;
				int limittFileInputDelimited_25 = -1;
				int lastLinetFileInputDelimited_25 = -1;

				char fieldSeparator_tFileInputDelimited_25[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_25 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_25[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_25 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_25 = /**
				 * Start field
				 * tFileInputDelimited_25:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_10_FILEPATH"))/**
				 * 
				 * End field tFileInputDelimited_25:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_25 = null;

				try {

					String[] rowtFileInputDelimited_25 = null;
					int currentLinetFileInputDelimited_25 = 0;
					int outputLinetFileInputDelimited_25 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_25 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_25 = 0;
							if (footer_value_tFileInputDelimited_25 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_25 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_25,
									fieldSeparator_tFileInputDelimited_25[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_25 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_25)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_25[0]);
						}

						csvReadertFileInputDelimited_25
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_25[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_25[0] != '\r'))
							csvReadertFileInputDelimited_25.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_25[0]);

						csvReadertFileInputDelimited_25.setQuoteChar('"');

						csvReadertFileInputDelimited_25
								.setEscapeChar(csvReadertFileInputDelimited_25
										.getQuoteChar());

						if (footer_tFileInputDelimited_25 > 0) {
							for (totalLinetFileInputDelimited_25 = 0; totalLinetFileInputDelimited_25 < 1; totalLinetFileInputDelimited_25++) {
								csvReadertFileInputDelimited_25.readNext();
							}
							csvReadertFileInputDelimited_25
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_25.readNext()) {

								rowtFileInputDelimited_25 = csvReadertFileInputDelimited_25
										.getValues();
								if (!(rowtFileInputDelimited_25.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_25[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_25++;

								}

							}
							int lastLineTemptFileInputDelimited_25 = totalLinetFileInputDelimited_25
									- footer_tFileInputDelimited_25 < 0 ? 0
									: totalLinetFileInputDelimited_25
											- footer_tFileInputDelimited_25;
							if (lastLinetFileInputDelimited_25 > 0) {
								lastLinetFileInputDelimited_25 = lastLinetFileInputDelimited_25 < lastLineTemptFileInputDelimited_25 ? lastLinetFileInputDelimited_25
										: lastLineTemptFileInputDelimited_25;
							} else {
								lastLinetFileInputDelimited_25 = lastLineTemptFileInputDelimited_25;
							}

							csvReadertFileInputDelimited_25.close();
							if (filename_tFileInputDelimited_25 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_25 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_25,
										fieldSeparator_tFileInputDelimited_25[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_25 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_25)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_25[0]);
							}
							csvReadertFileInputDelimited_25
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_25[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_25[0] != '\r'))
								csvReadertFileInputDelimited_25
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_25[0]);

							csvReadertFileInputDelimited_25.setQuoteChar('"');

							csvReadertFileInputDelimited_25
									.setEscapeChar(csvReadertFileInputDelimited_25
											.getQuoteChar());

						}

						if (limittFileInputDelimited_25 != 0) {
							for (currentLinetFileInputDelimited_25 = 0; currentLinetFileInputDelimited_25 < 1; currentLinetFileInputDelimited_25++) {
								csvReadertFileInputDelimited_25.readNext();
							}
						}
						csvReadertFileInputDelimited_25
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_25 != 0
							&& csvReadertFileInputDelimited_25 != null
							&& csvReadertFileInputDelimited_25.readNext()) {

						rowtFileInputDelimited_25 = csvReadertFileInputDelimited_25
								.getValues();

						if (rowtFileInputDelimited_25.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_25[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_25++;

						if (lastLinetFileInputDelimited_25 > -1
								&& currentLinetFileInputDelimited_25 > lastLinetFileInputDelimited_25) {
							break;
						}
						outputLinetFileInputDelimited_25++;
						if (limittFileInputDelimited_25 > 0
								&& outputLinetFileInputDelimited_25 > limittFileInputDelimited_25) {
							break;
						}

						row30 = null;

						row30 = null;

						boolean whetherReject_tFileInputDelimited_25 = false;
						row30 = new row30Struct();
						try {

							if (rowtFileInputDelimited_25.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_25[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row30.MODIFIER_PATH = null;

								row30.MODIFIER_CD = null;

								row30.NAME_CHAR = null;

								row30.MODIFIER_BLOB = null;

								row30.UPDATE_DATE = null;

								row30.DOWNLOAD_DATE = null;

								row30.IMPORT_DATE = null;

								row30.SOURCESYSTEM_CD = null;

								row30.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_25 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_25 = 0;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									row30.MODIFIER_PATH = rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25];

								} else {
									row30.MODIFIER_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 1;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									row30.MODIFIER_CD = rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25];

								} else {
									row30.MODIFIER_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 2;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									row30.NAME_CHAR = rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25];

								} else {
									row30.NAME_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 3;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									row30.MODIFIER_BLOB = rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25];

								} else {
									row30.MODIFIER_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 4;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									if (rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25]
											.length() > 0) {

										row30.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25],
														"dd-MM-yyyy");

									} else {
										row30.UPDATE_DATE = null;
									}

								} else {
									row30.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 5;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									if (rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25]
											.length() > 0) {

										row30.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25],
														"dd-MM-yyyy");

									} else {
										row30.DOWNLOAD_DATE = null;
									}

								} else {
									row30.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 6;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									if (rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25]
											.length() > 0) {

										row30.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25],
														"dd-MM-yyyy");

									} else {
										row30.IMPORT_DATE = null;
									}

								} else {
									row30.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 7;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									row30.SOURCESYSTEM_CD = rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25];

								} else {
									row30.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 8;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									row30.UPLOAD_ID = rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25];

								} else {
									row30.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_25 = true;

							System.err.println(e.getMessage());
							row30 = null;

						}

						/**
						 * [tFileInputDelimited_25 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_25 main ] start
						 */

						currentComponent = "tFileInputDelimited_25";

						tos_count_tFileInputDelimited_25++;

						/**
						 * [tFileInputDelimited_25 main ] stop
						 */
						// Start of branch "row30"
						if (row30 != null) {

							/**
							 * [tAdvancedHash_row30 main ] start
							 */

							currentComponent = "tAdvancedHash_row30";

							row30Struct row30_HashRow = tHash_Lookup_row30
									.getNextFreeRow();

							row30_HashRow.MODIFIER_PATH = row30.MODIFIER_PATH;

							row30_HashRow.MODIFIER_CD = row30.MODIFIER_CD;

							row30_HashRow.NAME_CHAR = row30.NAME_CHAR;

							row30_HashRow.MODIFIER_BLOB = row30.MODIFIER_BLOB;

							row30_HashRow.UPDATE_DATE = row30.UPDATE_DATE;

							row30_HashRow.DOWNLOAD_DATE = row30.DOWNLOAD_DATE;

							row30_HashRow.IMPORT_DATE = row30.IMPORT_DATE;

							row30_HashRow.SOURCESYSTEM_CD = row30.SOURCESYSTEM_CD;

							row30_HashRow.UPLOAD_ID = row30.UPLOAD_ID;

							tHash_Lookup_row30.put(row30_HashRow);

							tos_count_tAdvancedHash_row30++;

							/**
							 * [tAdvancedHash_row30 main ] stop
							 */

						} // End of branch "row30"

						/**
						 * [tFileInputDelimited_25 end ] start
						 */

						currentComponent = "tFileInputDelimited_25";

						nb_line_tFileInputDelimited_25++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_25 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_25 != null) {
							csvReadertFileInputDelimited_25.close();
						}
					}
					if (csvReadertFileInputDelimited_25 != null) {
						globalMap.put("tFileInputDelimited_25_NB_LINE",
								nb_line_tFileInputDelimited_25);
					}
				}

				ok_Hash.put("tFileInputDelimited_25", true);
				end_Hash.put("tFileInputDelimited_25",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_25 end ] stop
				 */

				/**
				 * [tAdvancedHash_row30 end ] start
				 */

				currentComponent = "tAdvancedHash_row30";

				tHash_Lookup_row30.endPut();

				ok_Hash.put("tAdvancedHash_row30", true);
				end_Hash.put("tAdvancedHash_row30", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row30 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_25_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_11Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_11 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_11", false);
				start_Hash.put("tCreateTemporaryFile_11",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_11";

				int tos_count_tCreateTemporaryFile_11 = 0;

				java.io.File dir_tCreateTemporaryFile_11 = new java.io.File(
						context.folderMain + context.folderOutput);
				dir_tCreateTemporaryFile_11.mkdirs();
				String name_tCreateTemporaryFile_11 = "talend_11_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_11 = ("tmp".replaceAll(
						"\\.", "").length() == 0) ? "tmp" : "tmp".replaceAll(
						"\\.", "");
				java.io.File file_tCreateTemporaryFile_11 = new java.io.File(
						dir_tCreateTemporaryFile_11,
						name_tCreateTemporaryFile_11 + "."
								+ suffix_tCreateTemporaryFile_11);
				if (file_tCreateTemporaryFile_11.createNewFile()) {
					file_tCreateTemporaryFile_11.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_11_FILEPATH",
						file_tCreateTemporaryFile_11.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_11 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_11 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_11";

				tos_count_tCreateTemporaryFile_11++;

				/**
				 * [tCreateTemporaryFile_11 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_11 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_11";

				ok_Hash.put("tCreateTemporaryFile_11", true);
				end_Hash.put("tCreateTemporaryFile_11",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_11 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_11:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_10Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_11_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_12Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_12 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_12", false);
				start_Hash.put("tCreateTemporaryFile_12",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_12";

				int tos_count_tCreateTemporaryFile_12 = 0;

				java.io.File dir_tCreateTemporaryFile_12 = new java.io.File(
						context.folderMain + context.folderOutput);
				dir_tCreateTemporaryFile_12.mkdirs();
				String name_tCreateTemporaryFile_12 = "talend_12_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_12 = ("tmp".replaceAll(
						"\\.", "").length() == 0) ? "tmp" : "tmp".replaceAll(
						"\\.", "");
				java.io.File file_tCreateTemporaryFile_12 = new java.io.File(
						dir_tCreateTemporaryFile_12,
						name_tCreateTemporaryFile_12 + "."
								+ suffix_tCreateTemporaryFile_12);
				if (file_tCreateTemporaryFile_12.createNewFile()) {
					file_tCreateTemporaryFile_12.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_12_FILEPATH",
						file_tCreateTemporaryFile_12.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_12 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_12 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_12";

				tos_count_tCreateTemporaryFile_12++;

				/**
				 * [tCreateTemporaryFile_12 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_12 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_12";

				ok_Hash.put("tCreateTemporaryFile_12", true);
				end_Hash.put("tCreateTemporaryFile_12",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_12 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_12:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_11Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_12_SUBPROCESS_STATE", 1);
	}

	public static class row49Struct implements
			routines.system.IPersistableComparableLookupRow<row49Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.CONCEPT_PATH == null) ? 0 : this.CONCEPT_PATH
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row49Struct other = (row49Struct) obj;

			if (this.CONCEPT_PATH == null) {
				if (other.CONCEPT_PATH != null)
					return false;
			} else if (!this.CONCEPT_PATH.equals(other.CONCEPT_PATH))
				return false;

			return true;
		}

		public void copyDataTo(row49Struct other) {

			other.CONCEPT_PATH = this.CONCEPT_PATH;
			other.CONCEPT_CD = this.CONCEPT_CD;
			other.NAME_CHAR = this.NAME_CHAR;
			other.CONCEPT_BLOB = this.CONCEPT_BLOB;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row49Struct other) {

			other.CONCEPT_PATH = this.CONCEPT_PATH;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.CONCEPT_CD = readString(dis, ois);

				this.NAME_CHAR = readString(dis, ois);

				this.CONCEPT_BLOB = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.CONCEPT_CD, dos, oos);

				writeString(this.NAME_CHAR, dos, oos);

				writeString(this.CONCEPT_BLOB, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row49Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CONCEPT_PATH,
					other.CONCEPT_PATH);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_33Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_33_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row49Struct row49 = new row49Struct();

				/**
				 * [tAdvancedHash_row49 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row49", false);
				start_Hash.put("tAdvancedHash_row49",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row49";

				int tos_count_tAdvancedHash_row49 = 0;

				// connection name:row49
				// source node:tFileInputDelimited_33 -
				// inputs:(after_tFileInputDelimited_28) outputs:(row49,row49) |
				// target node:tAdvancedHash_row49 - inputs:(row49) outputs:()
				// linked node: tMap_21 - inputs:(row43,row49)
				// outputs:(toCD_Mod)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row49 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row49Struct> tHash_Lookup_row49 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row49Struct> getLookup(matchingModeEnum_row49);

				globalMap.put("tHash_Lookup_row49", tHash_Lookup_row49);

				/**
				 * [tAdvancedHash_row49 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_33 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_33", false);
				start_Hash.put("tFileInputDelimited_33",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_33";

				int tos_count_tFileInputDelimited_33 = 0;

				int nb_line_tFileInputDelimited_33 = 0;
				int footer_tFileInputDelimited_33 = 0;
				int totalLinetFileInputDelimited_33 = 0;
				int limittFileInputDelimited_33 = -1;
				int lastLinetFileInputDelimited_33 = -1;

				char fieldSeparator_tFileInputDelimited_33[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_33 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_33[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_33 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_33 = /**
				 * Start field
				 * tFileInputDelimited_33:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_4_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_33:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_33 = null;

				try {

					String[] rowtFileInputDelimited_33 = null;
					int currentLinetFileInputDelimited_33 = 0;
					int outputLinetFileInputDelimited_33 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_33 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_33 = 0;
							if (footer_value_tFileInputDelimited_33 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_33 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_33,
									fieldSeparator_tFileInputDelimited_33[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_33 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_33)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_33[0]);
						}

						csvReadertFileInputDelimited_33
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_33[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_33[0] != '\r'))
							csvReadertFileInputDelimited_33.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_33[0]);

						csvReadertFileInputDelimited_33.setQuoteChar('"');

						csvReadertFileInputDelimited_33
								.setEscapeChar(csvReadertFileInputDelimited_33
										.getQuoteChar());

						if (footer_tFileInputDelimited_33 > 0) {
							for (totalLinetFileInputDelimited_33 = 0; totalLinetFileInputDelimited_33 < 1; totalLinetFileInputDelimited_33++) {
								csvReadertFileInputDelimited_33.readNext();
							}
							csvReadertFileInputDelimited_33
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_33.readNext()) {

								rowtFileInputDelimited_33 = csvReadertFileInputDelimited_33
										.getValues();
								if (!(rowtFileInputDelimited_33.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_33[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_33++;

								}

							}
							int lastLineTemptFileInputDelimited_33 = totalLinetFileInputDelimited_33
									- footer_tFileInputDelimited_33 < 0 ? 0
									: totalLinetFileInputDelimited_33
											- footer_tFileInputDelimited_33;
							if (lastLinetFileInputDelimited_33 > 0) {
								lastLinetFileInputDelimited_33 = lastLinetFileInputDelimited_33 < lastLineTemptFileInputDelimited_33 ? lastLinetFileInputDelimited_33
										: lastLineTemptFileInputDelimited_33;
							} else {
								lastLinetFileInputDelimited_33 = lastLineTemptFileInputDelimited_33;
							}

							csvReadertFileInputDelimited_33.close();
							if (filename_tFileInputDelimited_33 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_33 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_33,
										fieldSeparator_tFileInputDelimited_33[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_33 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_33)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_33[0]);
							}
							csvReadertFileInputDelimited_33
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_33[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_33[0] != '\r'))
								csvReadertFileInputDelimited_33
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_33[0]);

							csvReadertFileInputDelimited_33.setQuoteChar('"');

							csvReadertFileInputDelimited_33
									.setEscapeChar(csvReadertFileInputDelimited_33
											.getQuoteChar());

						}

						if (limittFileInputDelimited_33 != 0) {
							for (currentLinetFileInputDelimited_33 = 0; currentLinetFileInputDelimited_33 < 1; currentLinetFileInputDelimited_33++) {
								csvReadertFileInputDelimited_33.readNext();
							}
						}
						csvReadertFileInputDelimited_33
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_33 != 0
							&& csvReadertFileInputDelimited_33 != null
							&& csvReadertFileInputDelimited_33.readNext()) {

						rowtFileInputDelimited_33 = csvReadertFileInputDelimited_33
								.getValues();

						if (rowtFileInputDelimited_33.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_33[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_33++;

						if (lastLinetFileInputDelimited_33 > -1
								&& currentLinetFileInputDelimited_33 > lastLinetFileInputDelimited_33) {
							break;
						}
						outputLinetFileInputDelimited_33++;
						if (limittFileInputDelimited_33 > 0
								&& outputLinetFileInputDelimited_33 > limittFileInputDelimited_33) {
							break;
						}

						row49 = null;

						row49 = null;

						boolean whetherReject_tFileInputDelimited_33 = false;
						row49 = new row49Struct();
						try {

							if (rowtFileInputDelimited_33.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_33[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row49.CONCEPT_PATH = null;

								row49.CONCEPT_CD = null;

								row49.NAME_CHAR = null;

								row49.CONCEPT_BLOB = null;

								row49.UPDATE_DATE = null;

								row49.DOWNLOAD_DATE = null;

								row49.IMPORT_DATE = null;

								row49.SOURCESYSTEM_CD = null;

								row49.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_33 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_33 = 0;

								if (columnIndexWithD_tFileInputDelimited_33 < rowtFileInputDelimited_33.length) {

									row49.CONCEPT_PATH = rowtFileInputDelimited_33[columnIndexWithD_tFileInputDelimited_33];

								} else {
									row49.CONCEPT_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_33 = 1;

								if (columnIndexWithD_tFileInputDelimited_33 < rowtFileInputDelimited_33.length) {

									row49.CONCEPT_CD = rowtFileInputDelimited_33[columnIndexWithD_tFileInputDelimited_33];

								} else {
									row49.CONCEPT_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_33 = 2;

								if (columnIndexWithD_tFileInputDelimited_33 < rowtFileInputDelimited_33.length) {

									row49.NAME_CHAR = rowtFileInputDelimited_33[columnIndexWithD_tFileInputDelimited_33];

								} else {
									row49.NAME_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_33 = 3;

								if (columnIndexWithD_tFileInputDelimited_33 < rowtFileInputDelimited_33.length) {

									row49.CONCEPT_BLOB = rowtFileInputDelimited_33[columnIndexWithD_tFileInputDelimited_33];

								} else {
									row49.CONCEPT_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_33 = 4;

								if (columnIndexWithD_tFileInputDelimited_33 < rowtFileInputDelimited_33.length) {

									if (rowtFileInputDelimited_33[columnIndexWithD_tFileInputDelimited_33]
											.length() > 0) {

										row49.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_33[columnIndexWithD_tFileInputDelimited_33],
														"dd-MM-yyyy");

									} else {
										row49.UPDATE_DATE = null;
									}

								} else {
									row49.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_33 = 5;

								if (columnIndexWithD_tFileInputDelimited_33 < rowtFileInputDelimited_33.length) {

									if (rowtFileInputDelimited_33[columnIndexWithD_tFileInputDelimited_33]
											.length() > 0) {

										row49.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_33[columnIndexWithD_tFileInputDelimited_33],
														"dd-MM-yyyy");

									} else {
										row49.DOWNLOAD_DATE = null;
									}

								} else {
									row49.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_33 = 6;

								if (columnIndexWithD_tFileInputDelimited_33 < rowtFileInputDelimited_33.length) {

									if (rowtFileInputDelimited_33[columnIndexWithD_tFileInputDelimited_33]
											.length() > 0) {

										row49.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_33[columnIndexWithD_tFileInputDelimited_33],
														"dd-MM-yyyy");

									} else {
										row49.IMPORT_DATE = null;
									}

								} else {
									row49.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_33 = 7;

								if (columnIndexWithD_tFileInputDelimited_33 < rowtFileInputDelimited_33.length) {

									row49.SOURCESYSTEM_CD = rowtFileInputDelimited_33[columnIndexWithD_tFileInputDelimited_33];

								} else {
									row49.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_33 = 8;

								if (columnIndexWithD_tFileInputDelimited_33 < rowtFileInputDelimited_33.length) {

									row49.UPLOAD_ID = rowtFileInputDelimited_33[columnIndexWithD_tFileInputDelimited_33];

								} else {
									row49.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_33 = true;

							System.err.println(e.getMessage());
							row49 = null;

						}

						/**
						 * [tFileInputDelimited_33 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_33 main ] start
						 */

						currentComponent = "tFileInputDelimited_33";

						tos_count_tFileInputDelimited_33++;

						/**
						 * [tFileInputDelimited_33 main ] stop
						 */
						// Start of branch "row49"
						if (row49 != null) {

							/**
							 * [tAdvancedHash_row49 main ] start
							 */

							currentComponent = "tAdvancedHash_row49";

							row49Struct row49_HashRow = new row49Struct();

							row49_HashRow.CONCEPT_PATH = row49.CONCEPT_PATH;

							row49_HashRow.CONCEPT_CD = row49.CONCEPT_CD;

							row49_HashRow.NAME_CHAR = row49.NAME_CHAR;

							row49_HashRow.CONCEPT_BLOB = row49.CONCEPT_BLOB;

							row49_HashRow.UPDATE_DATE = row49.UPDATE_DATE;

							row49_HashRow.DOWNLOAD_DATE = row49.DOWNLOAD_DATE;

							row49_HashRow.IMPORT_DATE = row49.IMPORT_DATE;

							row49_HashRow.SOURCESYSTEM_CD = row49.SOURCESYSTEM_CD;

							row49_HashRow.UPLOAD_ID = row49.UPLOAD_ID;

							tHash_Lookup_row49.put(row49_HashRow);

							tos_count_tAdvancedHash_row49++;

							/**
							 * [tAdvancedHash_row49 main ] stop
							 */

						} // End of branch "row49"

						/**
						 * [tFileInputDelimited_33 end ] start
						 */

						currentComponent = "tFileInputDelimited_33";

						nb_line_tFileInputDelimited_33++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_33 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_33 != null) {
							csvReadertFileInputDelimited_33.close();
						}
					}
					if (csvReadertFileInputDelimited_33 != null) {
						globalMap.put("tFileInputDelimited_33_NB_LINE",
								nb_line_tFileInputDelimited_33);
					}
				}

				ok_Hash.put("tFileInputDelimited_33", true);
				end_Hash.put("tFileInputDelimited_33",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_33 end ] stop
				 */

				/**
				 * [tAdvancedHash_row49 end ] start
				 */

				currentComponent = "tAdvancedHash_row49";

				tHash_Lookup_row49.endPut();

				ok_Hash.put("tAdvancedHash_row49", true);
				end_Hash.put("tAdvancedHash_row49", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row49 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_33_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final TOSIDRTCommand_TransformationToTarget TOSIDRTCommand_TransformationToTargetClass = new TOSIDRTCommand_TransformationToTarget();

		int exitCode = TOSIDRTCommand_TransformationToTargetClass
				.runJobInTOS(args);
		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = TOSIDRTCommand_TransformationToTarget.class
					.getClassLoader().getResourceAsStream(
							"tos/tosidrtcommand_transformationtotarget_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.folderOutput = (String) context.getProperty("folderOutput");
			context.folderMain = (String) context.getProperty("folderMain");
			context.DB_StagingI2B2_sqlclassname = (String) context
					.getProperty("DB_StagingI2B2_sqlclassname");
			try {
				context.TargetID = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("TargetID"));
			} catch (NumberFormatException e) {
				context.TargetID = null;
			}
			context.sql = (String) context.getProperty("sql");
			context.DB_StagingI2B2_DatabaseType = (String) context
					.getProperty("DB_StagingI2B2_DatabaseType");
			context.DB_StagingI2B2_DriverClass = (String) context
					.getProperty("DB_StagingI2B2_DriverClass");
			context.DB_StagingI2B2_Host = (String) context
					.getProperty("DB_StagingI2B2_Host");
			context.DB_StagingI2B2_Instance = (String) context
					.getProperty("DB_StagingI2B2_Instance");
			context.DB_StagingI2B2_jdbcurl = (String) context
					.getProperty("DB_StagingI2B2_jdbcurl");
			context.DB_StagingI2B2_Password = (java.lang.String) context
					.getProperty("DB_StagingI2B2_Password");
			context.DB_StagingI2B2_Port = (String) context
					.getProperty("DB_StagingI2B2_Port");
			context.DB_StagingI2B2_Schema = (String) context
					.getProperty("DB_StagingI2B2_Schema");
			context.DB_StagingI2B2_Username = (String) context
					.getProperty("DB_StagingI2B2_Username");
			context.DB_TargetI2B2_DatabaseType = (String) context
					.getProperty("DB_TargetI2B2_DatabaseType");
			context.DB_TargetI2B2_DriverClass = (String) context
					.getProperty("DB_TargetI2B2_DriverClass");
			context.DB_TargetI2B2_Host = (String) context
					.getProperty("DB_TargetI2B2_Host");
			context.DB_TargetI2B2_Instance = (String) context
					.getProperty("DB_TargetI2B2_Instance");
			context.DB_TargetI2B2_jdbcurl = (String) context
					.getProperty("DB_TargetI2B2_jdbcurl");
			context.DB_TargetI2B2_Password = (java.lang.String) context
					.getProperty("DB_TargetI2B2_Password");
			context.DB_TargetI2B2_Port = (String) context
					.getProperty("DB_TargetI2B2_Port");
			context.DB_TargetI2B2_Schema = (String) context
					.getProperty("DB_TargetI2B2_Schema");
			context.DB_TargetI2B2_sqlclassname = (String) context
					.getProperty("DB_TargetI2B2_sqlclassname");
			context.DB_TargetI2B2_Username = (String) context
					.getProperty("DB_TargetI2B2_Username");
			context.currentQuery = (String) context.getProperty("currentQuery");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("folderOutput")) {
				context.folderOutput = (String) parentContextMap
						.get("folderOutput");
			}
			if (parentContextMap.containsKey("folderMain")) {
				context.folderMain = (String) parentContextMap
						.get("folderMain");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_sqlclassname")) {
				context.DB_StagingI2B2_sqlclassname = (String) parentContextMap
						.get("DB_StagingI2B2_sqlclassname");
			}
			if (parentContextMap.containsKey("TargetID")) {
				context.TargetID = (Integer) parentContextMap.get("TargetID");
			}
			if (parentContextMap.containsKey("sql")) {
				context.sql = (String) parentContextMap.get("sql");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_DatabaseType")) {
				context.DB_StagingI2B2_DatabaseType = (String) parentContextMap
						.get("DB_StagingI2B2_DatabaseType");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_DriverClass")) {
				context.DB_StagingI2B2_DriverClass = (String) parentContextMap
						.get("DB_StagingI2B2_DriverClass");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Host")) {
				context.DB_StagingI2B2_Host = (String) parentContextMap
						.get("DB_StagingI2B2_Host");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Instance")) {
				context.DB_StagingI2B2_Instance = (String) parentContextMap
						.get("DB_StagingI2B2_Instance");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_jdbcurl")) {
				context.DB_StagingI2B2_jdbcurl = (String) parentContextMap
						.get("DB_StagingI2B2_jdbcurl");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Password")) {
				context.DB_StagingI2B2_Password = (java.lang.String) parentContextMap
						.get("DB_StagingI2B2_Password");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Port")) {
				context.DB_StagingI2B2_Port = (String) parentContextMap
						.get("DB_StagingI2B2_Port");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Schema")) {
				context.DB_StagingI2B2_Schema = (String) parentContextMap
						.get("DB_StagingI2B2_Schema");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Username")) {
				context.DB_StagingI2B2_Username = (String) parentContextMap
						.get("DB_StagingI2B2_Username");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_DatabaseType")) {
				context.DB_TargetI2B2_DatabaseType = (String) parentContextMap
						.get("DB_TargetI2B2_DatabaseType");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_DriverClass")) {
				context.DB_TargetI2B2_DriverClass = (String) parentContextMap
						.get("DB_TargetI2B2_DriverClass");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Host")) {
				context.DB_TargetI2B2_Host = (String) parentContextMap
						.get("DB_TargetI2B2_Host");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Instance")) {
				context.DB_TargetI2B2_Instance = (String) parentContextMap
						.get("DB_TargetI2B2_Instance");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_jdbcurl")) {
				context.DB_TargetI2B2_jdbcurl = (String) parentContextMap
						.get("DB_TargetI2B2_jdbcurl");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Password")) {
				context.DB_TargetI2B2_Password = (java.lang.String) parentContextMap
						.get("DB_TargetI2B2_Password");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Port")) {
				context.DB_TargetI2B2_Port = (String) parentContextMap
						.get("DB_TargetI2B2_Port");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Schema")) {
				context.DB_TargetI2B2_Schema = (String) parentContextMap
						.get("DB_TargetI2B2_Schema");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_sqlclassname")) {
				context.DB_TargetI2B2_sqlclassname = (String) parentContextMap
						.get("DB_TargetI2B2_sqlclassname");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Username")) {
				context.DB_TargetI2B2_Username = (String) parentContextMap
						.get("DB_TargetI2B2_Username");
			}
			if (parentContextMap.containsKey("currentQuery")) {
				context.currentQuery = (String) parentContextMap
						.get("currentQuery");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tCreateTemporaryFile_12Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tCreateTemporaryFile_12) {

			e_tCreateTemporaryFile_12.printStackTrace();
			globalMap.put("tCreateTemporaryFile_12_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : TOSIDRTCommand_TransformationToTarget");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 2499217 characters generated by Talend Open Studio for Data Integration on
 * the August 1, 2014 1:51:08 PM CEST
 ************************************************************************************************/
