// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package tos.tosidrtcommand_transformationtotarget_0_1;

import routines.IIT;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.ExportDB;
import routines.enc_num_routine;
import routines.Mathematical;
import routines.Relational;
import routines.TalendDate;
import routines.IDRTHelper;
import routines.PIDGen;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
//import java.util.List;

//the import part of tJava_2
//import java.util.List;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJavaRow_2
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: TOSIDRTCommand_TransformationToTarget Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.3.1.r104014
 * @status 
 */
public class TOSIDRTCommand_TransformationToTarget implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (folderOutput != null) {

				this.setProperty("folderOutput", folderOutput.toString());

			}

			if (folderMain != null) {

				this.setProperty("folderMain", folderMain.toString());

			}

			if (DB_StagingI2B2_Host != null) {

				this.setProperty("DB_StagingI2B2_Host",
						DB_StagingI2B2_Host.toString());

			}

			if (DB_StagingI2B2_Instance != null) {

				this.setProperty("DB_StagingI2B2_Instance",
						DB_StagingI2B2_Instance.toString());

			}

			if (DB_StagingI2B2_jdbcurl != null) {

				this.setProperty("DB_StagingI2B2_jdbcurl",
						DB_StagingI2B2_jdbcurl.toString());

			}

			if (DB_StagingI2B2_Password != null) {

				this.setProperty("DB_StagingI2B2_Password",
						DB_StagingI2B2_Password.toString());

			}

			if (DB_StagingI2B2_Port != null) {

				this.setProperty("DB_StagingI2B2_Port",
						DB_StagingI2B2_Port.toString());

			}

			if (DB_StagingI2B2_Schema != null) {

				this.setProperty("DB_StagingI2B2_Schema",
						DB_StagingI2B2_Schema.toString());

			}

			if (DB_StagingI2B2_sqlclassname != null) {

				this.setProperty("DB_StagingI2B2_sqlclassname",
						DB_StagingI2B2_sqlclassname.toString());

			}

			if (DB_StagingI2B2_Username != null) {

				this.setProperty("DB_StagingI2B2_Username",
						DB_StagingI2B2_Username.toString());

			}

			if (DB_TargetI2B2_Host != null) {

				this.setProperty("DB_TargetI2B2_Host",
						DB_TargetI2B2_Host.toString());

			}

			if (DB_TargetI2B2_Instance != null) {

				this.setProperty("DB_TargetI2B2_Instance",
						DB_TargetI2B2_Instance.toString());

			}

			if (DB_TargetI2B2_jdbcurl != null) {

				this.setProperty("DB_TargetI2B2_jdbcurl",
						DB_TargetI2B2_jdbcurl.toString());

			}

			if (DB_TargetI2B2_Password != null) {

				this.setProperty("DB_TargetI2B2_Password",
						DB_TargetI2B2_Password.toString());

			}

			if (DB_TargetI2B2_Port != null) {

				this.setProperty("DB_TargetI2B2_Port",
						DB_TargetI2B2_Port.toString());

			}

			if (DB_TargetI2B2_Schema != null) {

				this.setProperty("DB_TargetI2B2_Schema",
						DB_TargetI2B2_Schema.toString());

			}

			if (DB_TargetI2B2_sqlclassname != null) {

				this.setProperty("DB_TargetI2B2_sqlclassname",
						DB_TargetI2B2_sqlclassname.toString());

			}

			if (DB_TargetI2B2_Username != null) {

				this.setProperty("DB_TargetI2B2_Username",
						DB_TargetI2B2_Username.toString());

			}

			if (TargetID != null) {

				this.setProperty("TargetID", TargetID.toString());

			}

		}

		public String folderOutput;

		public String getFolderOutput() {
			return this.folderOutput;
		}

		public String folderMain;

		public String getFolderMain() {
			return this.folderMain;
		}

		public String DB_StagingI2B2_Host;

		public String getDB_StagingI2B2_Host() {
			return this.DB_StagingI2B2_Host;
		}

		public String DB_StagingI2B2_Instance;

		public String getDB_StagingI2B2_Instance() {
			return this.DB_StagingI2B2_Instance;
		}

		public String DB_StagingI2B2_jdbcurl;

		public String getDB_StagingI2B2_jdbcurl() {
			return this.DB_StagingI2B2_jdbcurl;
		}

		public java.lang.String DB_StagingI2B2_Password;

		public java.lang.String getDB_StagingI2B2_Password() {
			return this.DB_StagingI2B2_Password;
		}

		public String DB_StagingI2B2_Port;

		public String getDB_StagingI2B2_Port() {
			return this.DB_StagingI2B2_Port;
		}

		public String DB_StagingI2B2_Schema;

		public String getDB_StagingI2B2_Schema() {
			return this.DB_StagingI2B2_Schema;
		}

		public String DB_StagingI2B2_sqlclassname;

		public String getDB_StagingI2B2_sqlclassname() {
			return this.DB_StagingI2B2_sqlclassname;
		}

		public String DB_StagingI2B2_Username;

		public String getDB_StagingI2B2_Username() {
			return this.DB_StagingI2B2_Username;
		}

		public String DB_TargetI2B2_Host;

		public String getDB_TargetI2B2_Host() {
			return this.DB_TargetI2B2_Host;
		}

		public String DB_TargetI2B2_Instance;

		public String getDB_TargetI2B2_Instance() {
			return this.DB_TargetI2B2_Instance;
		}

		public String DB_TargetI2B2_jdbcurl;

		public String getDB_TargetI2B2_jdbcurl() {
			return this.DB_TargetI2B2_jdbcurl;
		}

		public java.lang.String DB_TargetI2B2_Password;

		public java.lang.String getDB_TargetI2B2_Password() {
			return this.DB_TargetI2B2_Password;
		}

		public String DB_TargetI2B2_Port;

		public String getDB_TargetI2B2_Port() {
			return this.DB_TargetI2B2_Port;
		}

		public String DB_TargetI2B2_Schema;

		public String getDB_TargetI2B2_Schema() {
			return this.DB_TargetI2B2_Schema;
		}

		public String DB_TargetI2B2_sqlclassname;

		public String getDB_TargetI2B2_sqlclassname() {
			return this.DB_TargetI2B2_sqlclassname;
		}

		public String DB_TargetI2B2_Username;

		public String getDB_TargetI2B2_Username() {
			return this.DB_TargetI2B2_Username;
		}

		public Integer TargetID;

		public Integer getTargetID() {
			return this.TargetID;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "TOSIDRTCommand_TransformationToTarget";
	private final String projectName = "TOS";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					TOSIDRTCommand_TransformationToTarget.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(
									TOSIDRTCommand_TransformationToTarget.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tCreateTemporaryFile_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_8", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_7", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_6", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_5", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_4", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_3", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_2", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_1", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_1", System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCConnection_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCConnection_1", System.currentTimeMillis());

		status = "failure";

		tJDBCConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_2", System.currentTimeMillis());

		status = "failure";

		tJava_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_1", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_2", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_3", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_4", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_7", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_5", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_8", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_6", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_9", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_7", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_14", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_9", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_8", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_5", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_6", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_6", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_10", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_7", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_11", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJDBCClose_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCClose_1", System.currentTimeMillis());

		status = "failure";

		tJDBCClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_3", System.currentTimeMillis());

		status = "failure";

		tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_2", System.currentTimeMillis());

		status = "failure";

		tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_11", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_11_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_10", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_12", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_12_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_from_src_ont_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_from_src_ont", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_from_src_conc_dim_error(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_from_src_conc_dim",
				System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_from_srxc_obsfct_error(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_from_srxc_obsfct",
				System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_11_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row17", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_12_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_8_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_7_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_6_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_5_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_4_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_3_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_2_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCConnection_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_6_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_7_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_5_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCClose_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_4_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_11_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_10_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_9_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_12_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_6_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_7_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_8Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_8 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_8", false);
				start_Hash.put("tCreateTemporaryFile_8",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_8";

				int tos_count_tCreateTemporaryFile_8 = 0;

				java.io.File dir_tCreateTemporaryFile_8 = new java.io.File(
						context.folderMain + context.folderOutput);
				dir_tCreateTemporaryFile_8.mkdirs();
				String name_tCreateTemporaryFile_8 = "talend_TT_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_8 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_8 = new java.io.File(
						dir_tCreateTemporaryFile_8, name_tCreateTemporaryFile_8
								+ "." + suffix_tCreateTemporaryFile_8);
				if (file_tCreateTemporaryFile_8.createNewFile()) {
					file_tCreateTemporaryFile_8.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_8_FILEPATH",
						file_tCreateTemporaryFile_8.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_8 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_8 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_8";

				tos_count_tCreateTemporaryFile_8++;

				/**
				 * [tCreateTemporaryFile_8 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_8 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_8";

				ok_Hash.put("tCreateTemporaryFile_8", true);
				end_Hash.put("tCreateTemporaryFile_8",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_8 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_8:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_7Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_8_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_7 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_7", false);
				start_Hash.put("tCreateTemporaryFile_7",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_7";

				int tos_count_tCreateTemporaryFile_7 = 0;

				java.io.File dir_tCreateTemporaryFile_7 = new java.io.File(
						context.folderMain + context.folderOutput);
				dir_tCreateTemporaryFile_7.mkdirs();
				String name_tCreateTemporaryFile_7 = "talend_TT_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_7 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_7 = new java.io.File(
						dir_tCreateTemporaryFile_7, name_tCreateTemporaryFile_7
								+ "." + suffix_tCreateTemporaryFile_7);
				if (file_tCreateTemporaryFile_7.createNewFile()) {
					file_tCreateTemporaryFile_7.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_7_FILEPATH",
						file_tCreateTemporaryFile_7.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_7 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_7 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_7";

				tos_count_tCreateTemporaryFile_7++;

				/**
				 * [tCreateTemporaryFile_7 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_7 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_7";

				ok_Hash.put("tCreateTemporaryFile_7", true);
				end_Hash.put("tCreateTemporaryFile_7",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_7 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_7:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_6Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_7_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_6 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_6", false);
				start_Hash.put("tCreateTemporaryFile_6",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_6";

				int tos_count_tCreateTemporaryFile_6 = 0;

				java.io.File dir_tCreateTemporaryFile_6 = new java.io.File(
						context.folderMain + context.folderOutput);
				dir_tCreateTemporaryFile_6.mkdirs();
				String name_tCreateTemporaryFile_6 = "talend_TT_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_6 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_6 = new java.io.File(
						dir_tCreateTemporaryFile_6, name_tCreateTemporaryFile_6
								+ "." + suffix_tCreateTemporaryFile_6);
				if (file_tCreateTemporaryFile_6.createNewFile()) {
					file_tCreateTemporaryFile_6.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_6_FILEPATH",
						file_tCreateTemporaryFile_6.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_6 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_6 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_6";

				tos_count_tCreateTemporaryFile_6++;

				/**
				 * [tCreateTemporaryFile_6 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_6 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_6";

				ok_Hash.put("tCreateTemporaryFile_6", true);
				end_Hash.put("tCreateTemporaryFile_6",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_6 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_6:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_5Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_6_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_5 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_5", false);
				start_Hash.put("tCreateTemporaryFile_5",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_5";

				int tos_count_tCreateTemporaryFile_5 = 0;

				java.io.File dir_tCreateTemporaryFile_5 = new java.io.File(
						context.folderMain + context.folderOutput);
				dir_tCreateTemporaryFile_5.mkdirs();
				String name_tCreateTemporaryFile_5 = "talend_TT_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_5 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_5 = new java.io.File(
						dir_tCreateTemporaryFile_5, name_tCreateTemporaryFile_5
								+ "." + suffix_tCreateTemporaryFile_5);
				if (file_tCreateTemporaryFile_5.createNewFile()) {
					file_tCreateTemporaryFile_5.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_5_FILEPATH",
						file_tCreateTemporaryFile_5.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_5 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_5 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_5";

				tos_count_tCreateTemporaryFile_5++;

				/**
				 * [tCreateTemporaryFile_5 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_5 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_5";

				ok_Hash.put("tCreateTemporaryFile_5", true);
				end_Hash.put("tCreateTemporaryFile_5",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_5 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_5:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_4Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_5_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_4 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_4", false);
				start_Hash.put("tCreateTemporaryFile_4",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_4";

				int tos_count_tCreateTemporaryFile_4 = 0;

				java.io.File dir_tCreateTemporaryFile_4 = new java.io.File(
						context.folderMain + context.folderOutput);
				dir_tCreateTemporaryFile_4.mkdirs();
				String name_tCreateTemporaryFile_4 = "talend_TT_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_4 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_4 = new java.io.File(
						dir_tCreateTemporaryFile_4, name_tCreateTemporaryFile_4
								+ "." + suffix_tCreateTemporaryFile_4);
				if (file_tCreateTemporaryFile_4.createNewFile()) {
					file_tCreateTemporaryFile_4.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_4_FILEPATH",
						file_tCreateTemporaryFile_4.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_4 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_4 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_4";

				tos_count_tCreateTemporaryFile_4++;

				/**
				 * [tCreateTemporaryFile_4 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_4 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_4";

				ok_Hash.put("tCreateTemporaryFile_4", true);
				end_Hash.put("tCreateTemporaryFile_4",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_4 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_4:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_3Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_4_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_3 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_3", false);
				start_Hash.put("tCreateTemporaryFile_3",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_3";

				int tos_count_tCreateTemporaryFile_3 = 0;

				java.io.File dir_tCreateTemporaryFile_3 = new java.io.File(
						context.folderMain + context.folderOutput);
				dir_tCreateTemporaryFile_3.mkdirs();
				String name_tCreateTemporaryFile_3 = "talend_TT_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_3 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_3 = new java.io.File(
						dir_tCreateTemporaryFile_3, name_tCreateTemporaryFile_3
								+ "." + suffix_tCreateTemporaryFile_3);
				if (file_tCreateTemporaryFile_3.createNewFile()) {
					file_tCreateTemporaryFile_3.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_3_FILEPATH",
						file_tCreateTemporaryFile_3.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_3 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_3 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_3";

				tos_count_tCreateTemporaryFile_3++;

				/**
				 * [tCreateTemporaryFile_3 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_3 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_3";

				ok_Hash.put("tCreateTemporaryFile_3", true);
				end_Hash.put("tCreateTemporaryFile_3",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_3:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_2Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_3_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_2 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_2", false);
				start_Hash.put("tCreateTemporaryFile_2",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_2";

				int tos_count_tCreateTemporaryFile_2 = 0;

				java.io.File dir_tCreateTemporaryFile_2 = new java.io.File(
						context.folderMain + context.folderOutput);
				dir_tCreateTemporaryFile_2.mkdirs();
				String name_tCreateTemporaryFile_2 = "talend_TT_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_2 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_2 = new java.io.File(
						dir_tCreateTemporaryFile_2, name_tCreateTemporaryFile_2
								+ "." + suffix_tCreateTemporaryFile_2);
				if (file_tCreateTemporaryFile_2.createNewFile()) {
					file_tCreateTemporaryFile_2.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_2_FILEPATH",
						file_tCreateTemporaryFile_2.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_2 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_2 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_2";

				tos_count_tCreateTemporaryFile_2++;

				/**
				 * [tCreateTemporaryFile_2 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_2 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_2";

				ok_Hash.put("tCreateTemporaryFile_2", true);
				end_Hash.put("tCreateTemporaryFile_2",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_2_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_1 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_1", false);
				start_Hash.put("tCreateTemporaryFile_1",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_1";

				int tos_count_tCreateTemporaryFile_1 = 0;

				java.io.File dir_tCreateTemporaryFile_1 = new java.io.File(
						context.folderMain + context.folderOutput);
				dir_tCreateTemporaryFile_1.mkdirs();
				String name_tCreateTemporaryFile_1 = "talend_TT_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_1 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_1 = new java.io.File(
						dir_tCreateTemporaryFile_1, name_tCreateTemporaryFile_1
								+ "." + suffix_tCreateTemporaryFile_1);
				if (file_tCreateTemporaryFile_1.createNewFile()) {
				}
				globalMap.put("tCreateTemporaryFile_1_FILEPATH",
						file_tCreateTemporaryFile_1.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_1 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_1 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_1";

				tos_count_tCreateTemporaryFile_1++;

				/**
				 * [tCreateTemporaryFile_1 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_1 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_1";

				ok_Hash.put("tCreateTemporaryFile_1", true);
				end_Hash.put("tCreateTemporaryFile_1",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());
				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				System.out.println("Setting JDBC URL");
				context.DB_StagingI2B2_jdbcurl = "jdbc:oracle:thin:@"
						+ context.DB_StagingI2B2_Host + ":"
						+ context.DB_StagingI2B2_Port + ":"
						+ context.DB_StagingI2B2_Instance;
				System.out.println("!!!: " + context.DB_StagingI2B2_jdbcurl);
				System.out.println("***: " + context.DB_StagingI2B2_Schema);
				System.out.println("13:40");

				/**
				 * [tJava_1 begin ] stop
				 */
				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */
				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCConnection_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public void tJDBCConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCConnection_1 begin ] start
				 */

				ok_Hash.put("tJDBCConnection_1", false);
				start_Hash.put("tJDBCConnection_1", System.currentTimeMillis());
				currentComponent = "tJDBCConnection_1";

				int tos_count_tJDBCConnection_1 = 0;

				String url_tJDBCConnection_1 = context.DB_StagingI2B2_jdbcurl;

				String userName_tJDBCConnection_1 = context.DB_StagingI2B2_Username;
				String password_tJDBCConnection_1 = context.DB_StagingI2B2_Password;

				java.sql.Connection conn_tJDBCConnection_1 = null;

				if ((null == globalMap.get(KEY_DB_DATASOURCES))
						|| "".equals("")) {

					java.lang.Class
							.forName(context.DB_StagingI2B2_sqlclassname);

					conn_tJDBCConnection_1 = java.sql.DriverManager
							.getConnection(url_tJDBCConnection_1,
									userName_tJDBCConnection_1,
									password_tJDBCConnection_1);
					globalMap.put("conn_tJDBCConnection_1",
							conn_tJDBCConnection_1);
				}
				if (null != conn_tJDBCConnection_1) {

				}

				globalMap.put("conn_tJDBCConnection_1", conn_tJDBCConnection_1);
				globalMap.put("url_tJDBCConnection_1", url_tJDBCConnection_1);
				// globalMap.put("user_tJDBCConnection_1",
				// userName_tJDBCConnection_1);
				// globalMap.put("pass_tJDBCConnection_1",
				// password_tJDBCConnection_1);

				/**
				 * [tJDBCConnection_1 begin ] stop
				 */
				/**
				 * [tJDBCConnection_1 main ] start
				 */

				currentComponent = "tJDBCConnection_1";

				tos_count_tJDBCConnection_1++;

				/**
				 * [tJDBCConnection_1 main ] stop
				 */
				/**
				 * [tJDBCConnection_1 end ] start
				 */

				currentComponent = "tJDBCConnection_1";

				ok_Hash.put("tJDBCConnection_1", true);
				end_Hash.put("tJDBCConnection_1", System.currentTimeMillis());

				/**
				 * [tJDBCConnection_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJDBCConnection_1:OnSubjobOk1",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tJava_2Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJDBCConnection_1:OnSubjobOk2",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tFileInputDelimited_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());
				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				System.out.println("Extracting Source Data...");

				/**
				 * [tJava_2 begin ] stop
				 */
				/**
				 * [tJava_2 main ] start
				 */

				currentComponent = "tJava_2";

				tos_count_tJava_2++;

				/**
				 * [tJava_2 main ] stop
				 */
				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				/**
				 * [tJava_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk1", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCInput_1Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk2", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCInput_2Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk3", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCInput_3Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk4", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCInput_4Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk5", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCInput_5Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk6", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCInput_6Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk7", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCInput_7Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String TARGET_ID;

		public String getTARGET_ID() {
			return this.TARGET_ID;
		}

		public String TREE_LEVEL;

		public String getTREE_LEVEL() {
			return this.TREE_LEVEL;
		}

		public String TREE_PATH;

		public String getTREE_PATH() {
			return this.TREE_PATH;
		}

		public String STAGING_PATH;

		public String getSTAGING_PATH() {
			return this.STAGING_PATH;
		}

		public String STAGING_DIMENSION;

		public String getSTAGING_DIMENSION() {
			return this.STAGING_DIMENSION;
		}

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		public String CHANGED;

		public String getCHANGED() {
			return this.CHANGED;
		}

		public String STARTDATE_STAGING_PATH;

		public String getSTARTDATE_STAGING_PATH() {
			return this.STARTDATE_STAGING_PATH;
		}

		public String ENDDATE_STAGING_PATH;

		public String getENDDATE_STAGING_PATH() {
			return this.ENDDATE_STAGING_PATH;
		}

		public String VISUALATTRIBUTES;

		public String getVISUALATTRIBUTES() {
			return this.VISUALATTRIBUTES;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.TARGET_ID = readString(dis);

					this.TREE_LEVEL = readString(dis);

					this.TREE_PATH = readString(dis);

					this.STAGING_PATH = readString(dis);

					this.STAGING_DIMENSION = readString(dis);

					this.NAME = readString(dis);

					this.CHANGED = readString(dis);

					this.STARTDATE_STAGING_PATH = readString(dis);

					this.ENDDATE_STAGING_PATH = readString(dis);

					this.VISUALATTRIBUTES = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.TARGET_ID, dos);

				// String

				writeString(this.TREE_LEVEL, dos);

				// String

				writeString(this.TREE_PATH, dos);

				// String

				writeString(this.STAGING_PATH, dos);

				// String

				writeString(this.STAGING_DIMENSION, dos);

				// String

				writeString(this.NAME, dos);

				// String

				writeString(this.CHANGED, dos);

				// String

				writeString(this.STARTDATE_STAGING_PATH, dos);

				// String

				writeString(this.ENDDATE_STAGING_PATH, dos);

				// String

				writeString(this.VISUALATTRIBUTES, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TARGET_ID=" + TARGET_ID);
			sb.append(",TREE_LEVEL=" + TREE_LEVEL);
			sb.append(",TREE_PATH=" + TREE_PATH);
			sb.append(",STAGING_PATH=" + STAGING_PATH);
			sb.append(",STAGING_DIMENSION=" + STAGING_DIMENSION);
			sb.append(",NAME=" + NAME);
			sb.append(",CHANGED=" + CHANGED);
			sb.append(",STARTDATE_STAGING_PATH=" + STARTDATE_STAGING_PATH);
			sb.append(",ENDDATE_STAGING_PATH=" + ENDDATE_STAGING_PATH);
			sb.append(",VISUALATTRIBUTES=" + VISUALATTRIBUTES);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_1";

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						((String) globalMap
								.get("tCreateTemporaryFile_1_FILEPATH"))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);

				int nb_line_tFileOutputDelimited_1 = 0;
				int splitEvery_tFileOutputDelimited_1 = 1000;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /**
				 * Start field
				 * tFileOutputDelimited_1:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
				 * Start
				 * field tFileOutputDelimited_1:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;
				try {
					outtFileOutputDelimited_1 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_1,
											false), "UTF-8"));

					if (filetFileOutputDelimited_1.length() == 0) {

						outtFileOutputDelimited_1.write("TARGET_ID");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("TREE_LEVEL");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("TREE_PATH");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("STAGING_PATH");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("STAGING_DIMENSION");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("NAME");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("CHANGED");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1
								.write("STARTDATE_STAGING_PATH");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("ENDDATE_STAGING_PATH");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write("VISUALATTRIBUTES");

						outtFileOutputDelimited_1
								.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
						outtFileOutputDelimited_1.flush();
					}

					/**
					 * [tFileOutputDelimited_1 begin ] stop
					 */

					/**
					 * [tJDBCInput_1 begin ] start
					 */

					ok_Hash.put("tJDBCInput_1", false);
					start_Hash.put("tJDBCInput_1", System.currentTimeMillis());
					currentComponent = "tJDBCInput_1";

					int tos_count_tJDBCInput_1 = 0;

					int nb_line_tJDBCInput_1 = 0;
					java.sql.Connection conn_tJDBCInput_1 = null;
					conn_tJDBCInput_1 = (java.sql.Connection) globalMap
							.get("conn_tJDBCConnection_1");
					if (null == conn_tJDBCInput_1) {
						java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCInput_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
								.get(KEY_DB_DATASOURCES);
						conn_tJDBCInput_1 = dataSources_tJDBCInput_1.get("")
								.getConnection();
						// globalMap.put("conn_tJDBCConnection_1",
						// conn_tJDBCInput_1);
					}

					java.sql.Statement stmt_tJDBCInput_1 = conn_tJDBCInput_1
							.createStatement();

					String dbquery_tJDBCInput_1 = "select * from "
							+ context.DB_StagingI2B2_Schema
							+ ".IOE_TARGET_ONTOLOGY where target_id = "
							+ context.TargetID;

					globalMap.put("tJDBCInput_1_QUERY", dbquery_tJDBCInput_1);

					java.sql.ResultSet rs_tJDBCInput_1 = stmt_tJDBCInput_1
							.executeQuery(dbquery_tJDBCInput_1);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_1 = rs_tJDBCInput_1
							.getMetaData();
					int colQtyInRs_tJDBCInput_1 = rsmd_tJDBCInput_1
							.getColumnCount();

					String tmpContent_tJDBCInput_1 = null;
					int column_index_tJDBCInput_1 = 1;
					while (rs_tJDBCInput_1.next()) {
						nb_line_tJDBCInput_1++;

						column_index_tJDBCInput_1 = 1;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.TARGET_ID = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(column_index_tJDBCInput_1);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.TARGET_ID = tmpContent_tJDBCInput_1;
							} else {
								row1.TARGET_ID = null;
							}

							if (rs_tJDBCInput_1.wasNull()) {
								row1.TARGET_ID = null;
							}
						}
						column_index_tJDBCInput_1 = 2;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.TREE_LEVEL = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(column_index_tJDBCInput_1);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.TREE_LEVEL = tmpContent_tJDBCInput_1;
							} else {
								row1.TREE_LEVEL = null;
							}

							if (rs_tJDBCInput_1.wasNull()) {
								row1.TREE_LEVEL = null;
							}
						}
						column_index_tJDBCInput_1 = 3;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.TREE_PATH = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(column_index_tJDBCInput_1);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.TREE_PATH = tmpContent_tJDBCInput_1;
							} else {
								row1.TREE_PATH = null;
							}

							if (rs_tJDBCInput_1.wasNull()) {
								row1.TREE_PATH = null;
							}
						}
						column_index_tJDBCInput_1 = 4;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.STAGING_PATH = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(column_index_tJDBCInput_1);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.STAGING_PATH = tmpContent_tJDBCInput_1;
							} else {
								row1.STAGING_PATH = null;
							}

							if (rs_tJDBCInput_1.wasNull()) {
								row1.STAGING_PATH = null;
							}
						}
						column_index_tJDBCInput_1 = 5;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.STAGING_DIMENSION = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(column_index_tJDBCInput_1);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.STAGING_DIMENSION = tmpContent_tJDBCInput_1;
							} else {
								row1.STAGING_DIMENSION = null;
							}

							if (rs_tJDBCInput_1.wasNull()) {
								row1.STAGING_DIMENSION = null;
							}
						}
						column_index_tJDBCInput_1 = 6;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.NAME = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(column_index_tJDBCInput_1);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.NAME = tmpContent_tJDBCInput_1;
							} else {
								row1.NAME = null;
							}

							if (rs_tJDBCInput_1.wasNull()) {
								row1.NAME = null;
							}
						}
						column_index_tJDBCInput_1 = 7;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.CHANGED = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(column_index_tJDBCInput_1);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.CHANGED = tmpContent_tJDBCInput_1;
							} else {
								row1.CHANGED = null;
							}

							if (rs_tJDBCInput_1.wasNull()) {
								row1.CHANGED = null;
							}
						}
						column_index_tJDBCInput_1 = 8;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.STARTDATE_STAGING_PATH = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(column_index_tJDBCInput_1);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.STARTDATE_STAGING_PATH = tmpContent_tJDBCInput_1;
							} else {
								row1.STARTDATE_STAGING_PATH = null;
							}

							if (rs_tJDBCInput_1.wasNull()) {
								row1.STARTDATE_STAGING_PATH = null;
							}
						}
						column_index_tJDBCInput_1 = 9;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.ENDDATE_STAGING_PATH = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(column_index_tJDBCInput_1);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.ENDDATE_STAGING_PATH = tmpContent_tJDBCInput_1;
							} else {
								row1.ENDDATE_STAGING_PATH = null;
							}

							if (rs_tJDBCInput_1.wasNull()) {
								row1.ENDDATE_STAGING_PATH = null;
							}
						}
						column_index_tJDBCInput_1 = 10;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.VISUALATTRIBUTES = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(column_index_tJDBCInput_1);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.VISUALATTRIBUTES = tmpContent_tJDBCInput_1;
							} else {
								row1.VISUALATTRIBUTES = null;
							}

							if (rs_tJDBCInput_1.wasNull()) {
								row1.VISUALATTRIBUTES = null;
							}
						}

						/**
						 * [tJDBCInput_1 begin ] stop
						 */
						/**
						 * [tJDBCInput_1 main ] start
						 */

						currentComponent = "tJDBCInput_1";

						tos_count_tJDBCInput_1++;

						/**
						 * [tJDBCInput_1 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 main ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();

						if (row1.TARGET_ID != null) {

							sb_tFileOutputDelimited_1.append(

							row1.TARGET_ID

							);

						}

						sb_tFileOutputDelimited_1
								.append(OUT_DELIM_tFileOutputDelimited_1);

						if (row1.TREE_LEVEL != null) {

							sb_tFileOutputDelimited_1.append(

							row1.TREE_LEVEL

							);

						}

						sb_tFileOutputDelimited_1
								.append(OUT_DELIM_tFileOutputDelimited_1);

						if (row1.TREE_PATH != null) {

							sb_tFileOutputDelimited_1.append(

							row1.TREE_PATH

							);

						}

						sb_tFileOutputDelimited_1
								.append(OUT_DELIM_tFileOutputDelimited_1);

						if (row1.STAGING_PATH != null) {

							sb_tFileOutputDelimited_1.append(

							row1.STAGING_PATH

							);

						}

						sb_tFileOutputDelimited_1
								.append(OUT_DELIM_tFileOutputDelimited_1);

						if (row1.STAGING_DIMENSION != null) {

							sb_tFileOutputDelimited_1.append(

							row1.STAGING_DIMENSION

							);

						}

						sb_tFileOutputDelimited_1
								.append(OUT_DELIM_tFileOutputDelimited_1);

						if (row1.NAME != null) {

							sb_tFileOutputDelimited_1.append(

							row1.NAME

							);

						}

						sb_tFileOutputDelimited_1
								.append(OUT_DELIM_tFileOutputDelimited_1);

						if (row1.CHANGED != null) {

							sb_tFileOutputDelimited_1.append(

							row1.CHANGED

							);

						}

						sb_tFileOutputDelimited_1
								.append(OUT_DELIM_tFileOutputDelimited_1);

						if (row1.STARTDATE_STAGING_PATH != null) {

							sb_tFileOutputDelimited_1.append(

							row1.STARTDATE_STAGING_PATH

							);

						}

						sb_tFileOutputDelimited_1
								.append(OUT_DELIM_tFileOutputDelimited_1);

						if (row1.ENDDATE_STAGING_PATH != null) {

							sb_tFileOutputDelimited_1.append(

							row1.ENDDATE_STAGING_PATH

							);

						}

						sb_tFileOutputDelimited_1
								.append(OUT_DELIM_tFileOutputDelimited_1);

						if (row1.VISUALATTRIBUTES != null) {

							sb_tFileOutputDelimited_1.append(

							row1.VISUALATTRIBUTES

							);

						}

						sb_tFileOutputDelimited_1
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

						nb_line_tFileOutputDelimited_1++;

						outtFileOutputDelimited_1
								.write(sb_tFileOutputDelimited_1.toString());

						tos_count_tFileOutputDelimited_1++;

						/**
						 * [tFileOutputDelimited_1 main ] stop
						 */

						/**
						 * [tJDBCInput_1 end ] start
						 */

						currentComponent = "tJDBCInput_1";

					}
					rs_tJDBCInput_1.close();
					stmt_tJDBCInput_1.close();

					globalMap.put("tJDBCInput_1_NB_LINE", nb_line_tJDBCInput_1);

					ok_Hash.put("tJDBCInput_1", true);
					end_Hash.put("tJDBCInput_1", System.currentTimeMillis());

					/**
					 * [tJDBCInput_1 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 end ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

				} finally {
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
					globalMap.put("tFileOutputDelimited_1_NB_LINE",
							nb_line_tFileOutputDelimited_1);
					globalMap.put("tFileOutputDelimited_1_FILE_NAME",
							fileName_tFileOutputDelimited_1);
				} // finally

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal C_HLEVEL;

		public BigDecimal getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String C_SYNONYM_CD;

		public String getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public BigDecimal C_TOTALNUM;

		public BigDecimal getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public String C_COLUMNDATATYPE;

		public String getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public Object C_COMMENT;

		public Object getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.C_HLEVEL = (BigDecimal) dis.readObject();

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					this.C_SYNONYM_CD = readString(dis);

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = (BigDecimal) dis.readObject();

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					this.C_COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = (Object) dis.readObject();

					this.C_TOOLTIP = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.C_HLEVEL);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.C_SYNONYM_CD, dos);

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// BigDecimal

				dos.writeObject(this.C_TOTALNUM);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// String

				writeString(this.C_COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// Object

				dos.writeObject(this.C_COMMENT);

				// String

				writeString(this.C_TOOLTIP, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + C_SYNONYM_CD);
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + String.valueOf(C_TOTALNUM));
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + C_COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + String.valueOf(C_COMMENT));
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_2";

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						((String) globalMap
								.get("tCreateTemporaryFile_2_FILEPATH"))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(0, fileName_tFileOutputDelimited_2
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);

				int nb_line_tFileOutputDelimited_2 = 0;
				int splitEvery_tFileOutputDelimited_2 = 1000;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				final String OUT_DELIM_tFileOutputDelimited_2 = /**
				 * Start field
				 * tFileOutputDelimited_2:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
				 * Start
				 * field tFileOutputDelimited_2:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null
						&& directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
							directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_2 = null;
				try {
					outtFileOutputDelimited_2 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_2,
											false), "UTF-8"));

					if (filetFileOutputDelimited_2.length() == 0) {

						outtFileOutputDelimited_2.write("C_HLEVEL");

						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);

						outtFileOutputDelimited_2.write("C_FULLNAME");

						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);

						outtFileOutputDelimited_2.write("C_NAME");

						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);

						outtFileOutputDelimited_2.write("C_SYNONYM_CD");

						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);

						outtFileOutputDelimited_2.write("C_VISUALATTRIBUTES");

						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);

						outtFileOutputDelimited_2.write("C_TOTALNUM");

						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);

						outtFileOutputDelimited_2.write("C_BASECODE");

						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);

						outtFileOutputDelimited_2.write("C_METADATAXML");

						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);

						outtFileOutputDelimited_2.write("C_FACTTABLECOLUMN");

						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);

						outtFileOutputDelimited_2.write("C_TABLENAME");

						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);

						outtFileOutputDelimited_2.write("C_COLUMNNAME");

						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);

						outtFileOutputDelimited_2.write("C_COLUMNDATATYPE");

						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);

						outtFileOutputDelimited_2.write("C_OPERATOR");

						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);

						outtFileOutputDelimited_2.write("C_DIMCODE");

						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);

						outtFileOutputDelimited_2.write("C_COMMENT");

						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);

						outtFileOutputDelimited_2.write("C_TOOLTIP");

						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);

						outtFileOutputDelimited_2.write("M_APPLIED_PATH");

						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);

						outtFileOutputDelimited_2.write("UPDATE_DATE");

						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);

						outtFileOutputDelimited_2.write("DOWNLOAD_DATE");

						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);

						outtFileOutputDelimited_2.write("IMPORT_DATE");

						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);

						outtFileOutputDelimited_2.write("SOURCESYSTEM_CD");

						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);

						outtFileOutputDelimited_2.write("VALUETYPE_CD");

						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);

						outtFileOutputDelimited_2.write("M_EXCLUSION_CD");

						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);

						outtFileOutputDelimited_2.write("C_PATH");

						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);

						outtFileOutputDelimited_2.write("C_SYMBOL");

						outtFileOutputDelimited_2
								.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
						outtFileOutputDelimited_2.flush();
					}

					/**
					 * [tFileOutputDelimited_2 begin ] stop
					 */

					/**
					 * [tJDBCInput_2 begin ] start
					 */

					ok_Hash.put("tJDBCInput_2", false);
					start_Hash.put("tJDBCInput_2", System.currentTimeMillis());
					currentComponent = "tJDBCInput_2";

					int tos_count_tJDBCInput_2 = 0;

					int nb_line_tJDBCInput_2 = 0;
					java.sql.Connection conn_tJDBCInput_2 = null;
					conn_tJDBCInput_2 = (java.sql.Connection) globalMap
							.get("conn_tJDBCConnection_1");
					if (null == conn_tJDBCInput_2) {
						java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCInput_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
								.get(KEY_DB_DATASOURCES);
						conn_tJDBCInput_2 = dataSources_tJDBCInput_2.get("")
								.getConnection();
						// globalMap.put("conn_tJDBCConnection_1",
						// conn_tJDBCInput_2);
					}

					java.sql.Statement stmt_tJDBCInput_2 = conn_tJDBCInput_2
							.createStatement();

					String dbquery_tJDBCInput_2 = "select * from "
							+ context.DB_StagingI2B2_Schema + ".i2b2";

					globalMap.put("tJDBCInput_2_QUERY", dbquery_tJDBCInput_2);

					java.sql.ResultSet rs_tJDBCInput_2 = stmt_tJDBCInput_2
							.executeQuery(dbquery_tJDBCInput_2);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_2 = rs_tJDBCInput_2
							.getMetaData();
					int colQtyInRs_tJDBCInput_2 = rsmd_tJDBCInput_2
							.getColumnCount();

					String tmpContent_tJDBCInput_2 = null;
					int column_index_tJDBCInput_2 = 1;
					while (rs_tJDBCInput_2.next()) {
						nb_line_tJDBCInput_2++;

						column_index_tJDBCInput_2 = 1;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.C_HLEVEL = null;
						} else {

							if (rs_tJDBCInput_2
									.getObject(column_index_tJDBCInput_2) != null) {
								row2.C_HLEVEL = rs_tJDBCInput_2
										.getBigDecimal(column_index_tJDBCInput_2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}
						column_index_tJDBCInput_2 = 2;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.C_FULLNAME = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_FULLNAME = tmpContent_tJDBCInput_2;
							} else {
								row2.C_FULLNAME = null;
							}

						}
						column_index_tJDBCInput_2 = 3;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.C_NAME = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_NAME = tmpContent_tJDBCInput_2;
							} else {
								row2.C_NAME = null;
							}

						}
						column_index_tJDBCInput_2 = 4;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.C_SYNONYM_CD = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_SYNONYM_CD = tmpContent_tJDBCInput_2;
							} else {
								row2.C_SYNONYM_CD = null;
							}

						}
						column_index_tJDBCInput_2 = 5;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.C_VISUALATTRIBUTES = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_VISUALATTRIBUTES = tmpContent_tJDBCInput_2;
							} else {
								row2.C_VISUALATTRIBUTES = null;
							}

						}
						column_index_tJDBCInput_2 = 6;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.C_TOTALNUM = null;
						} else {

							if (rs_tJDBCInput_2
									.getObject(column_index_tJDBCInput_2) != null) {
								row2.C_TOTALNUM = rs_tJDBCInput_2
										.getBigDecimal(column_index_tJDBCInput_2);
							} else {
								row2.C_TOTALNUM = null;
							}

							if (rs_tJDBCInput_2.wasNull()) {
								row2.C_TOTALNUM = null;
							}
						}
						column_index_tJDBCInput_2 = 7;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.C_BASECODE = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_BASECODE = tmpContent_tJDBCInput_2;
							} else {
								row2.C_BASECODE = null;
							}

							if (rs_tJDBCInput_2.wasNull()) {
								row2.C_BASECODE = null;
							}
						}
						column_index_tJDBCInput_2 = 8;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.C_METADATAXML = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_METADATAXML = tmpContent_tJDBCInput_2;
							} else {
								row2.C_METADATAXML = null;
							}

							if (rs_tJDBCInput_2.wasNull()) {
								row2.C_METADATAXML = null;
							}
						}
						column_index_tJDBCInput_2 = 9;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.C_FACTTABLECOLUMN = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_FACTTABLECOLUMN = tmpContent_tJDBCInput_2;
							} else {
								row2.C_FACTTABLECOLUMN = null;
							}

						}
						column_index_tJDBCInput_2 = 10;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.C_TABLENAME = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_TABLENAME = tmpContent_tJDBCInput_2;
							} else {
								row2.C_TABLENAME = null;
							}

						}
						column_index_tJDBCInput_2 = 11;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.C_COLUMNNAME = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_COLUMNNAME = tmpContent_tJDBCInput_2;
							} else {
								row2.C_COLUMNNAME = null;
							}

						}
						column_index_tJDBCInput_2 = 12;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.C_COLUMNDATATYPE = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_COLUMNDATATYPE = tmpContent_tJDBCInput_2;
							} else {
								row2.C_COLUMNDATATYPE = null;
							}

						}
						column_index_tJDBCInput_2 = 13;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.C_OPERATOR = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_OPERATOR = tmpContent_tJDBCInput_2;
							} else {
								row2.C_OPERATOR = null;
							}

						}
						column_index_tJDBCInput_2 = 14;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.C_DIMCODE = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_DIMCODE = tmpContent_tJDBCInput_2;
							} else {
								row2.C_DIMCODE = null;
							}

						}
						column_index_tJDBCInput_2 = 15;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.C_COMMENT = null;
						} else {

							if (rs_tJDBCInput_2
									.getObject(column_index_tJDBCInput_2) != null) {
								row2.C_COMMENT = rs_tJDBCInput_2
										.getObject(column_index_tJDBCInput_2);
							} else {
								row2.C_COMMENT = null;
							}

							if (rs_tJDBCInput_2.wasNull()) {
								row2.C_COMMENT = null;
							}
						}
						column_index_tJDBCInput_2 = 16;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.C_TOOLTIP = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_TOOLTIP = tmpContent_tJDBCInput_2;
							} else {
								row2.C_TOOLTIP = null;
							}

							if (rs_tJDBCInput_2.wasNull()) {
								row2.C_TOOLTIP = null;
							}
						}
						column_index_tJDBCInput_2 = 17;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.M_APPLIED_PATH = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.M_APPLIED_PATH = tmpContent_tJDBCInput_2;
							} else {
								row2.M_APPLIED_PATH = null;
							}

						}
						column_index_tJDBCInput_2 = 18;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.UPDATE_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_2 = null;
							try {
								date_tJDBCInput_2 = rs_tJDBCInput_2
										.getTimestamp(column_index_tJDBCInput_2);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_2 = rs_tJDBCInput_2
										.getDate(column_index_tJDBCInput_2);
							}
							row2.UPDATE_DATE = date_tJDBCInput_2;

						}
						column_index_tJDBCInput_2 = 19;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.DOWNLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_2 = null;
							try {
								date_tJDBCInput_2 = rs_tJDBCInput_2
										.getTimestamp(column_index_tJDBCInput_2);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_2 = rs_tJDBCInput_2
										.getDate(column_index_tJDBCInput_2);
							}
							row2.DOWNLOAD_DATE = date_tJDBCInput_2;

							if (rs_tJDBCInput_2.wasNull()) {
								row2.DOWNLOAD_DATE = null;
							}
						}
						column_index_tJDBCInput_2 = 20;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.IMPORT_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_2 = null;
							try {
								date_tJDBCInput_2 = rs_tJDBCInput_2
										.getTimestamp(column_index_tJDBCInput_2);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_2 = rs_tJDBCInput_2
										.getDate(column_index_tJDBCInput_2);
							}
							row2.IMPORT_DATE = date_tJDBCInput_2;

							if (rs_tJDBCInput_2.wasNull()) {
								row2.IMPORT_DATE = null;
							}
						}
						column_index_tJDBCInput_2 = 21;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.SOURCESYSTEM_CD = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.SOURCESYSTEM_CD = tmpContent_tJDBCInput_2;
							} else {
								row2.SOURCESYSTEM_CD = null;
							}

							if (rs_tJDBCInput_2.wasNull()) {
								row2.SOURCESYSTEM_CD = null;
							}
						}
						column_index_tJDBCInput_2 = 22;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.VALUETYPE_CD = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.VALUETYPE_CD = tmpContent_tJDBCInput_2;
							} else {
								row2.VALUETYPE_CD = null;
							}

							if (rs_tJDBCInput_2.wasNull()) {
								row2.VALUETYPE_CD = null;
							}
						}
						column_index_tJDBCInput_2 = 23;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.M_EXCLUSION_CD = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.M_EXCLUSION_CD = tmpContent_tJDBCInput_2;
							} else {
								row2.M_EXCLUSION_CD = null;
							}

							if (rs_tJDBCInput_2.wasNull()) {
								row2.M_EXCLUSION_CD = null;
							}
						}
						column_index_tJDBCInput_2 = 24;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.C_PATH = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_PATH = tmpContent_tJDBCInput_2;
							} else {
								row2.C_PATH = null;
							}

							if (rs_tJDBCInput_2.wasNull()) {
								row2.C_PATH = null;
							}
						}
						column_index_tJDBCInput_2 = 25;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row2.C_SYMBOL = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_SYMBOL = tmpContent_tJDBCInput_2;
							} else {
								row2.C_SYMBOL = null;
							}

							if (rs_tJDBCInput_2.wasNull()) {
								row2.C_SYMBOL = null;
							}
						}

						/**
						 * [tJDBCInput_2 begin ] stop
						 */
						/**
						 * [tJDBCInput_2 main ] start
						 */

						currentComponent = "tJDBCInput_2";

						tos_count_tJDBCInput_2++;

						/**
						 * [tJDBCInput_2 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_2 main ] start
						 */

						currentComponent = "tFileOutputDelimited_2";

						StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();

						if (row2.C_HLEVEL != null) {

							sb_tFileOutputDelimited_2.append(

							row2.C_HLEVEL.setScale(0,
									java.math.RoundingMode.HALF_UP)
									.toPlainString()

							);

						}

						sb_tFileOutputDelimited_2
								.append(OUT_DELIM_tFileOutputDelimited_2);

						if (row2.C_FULLNAME != null) {

							sb_tFileOutputDelimited_2.append(

							row2.C_FULLNAME

							);

						}

						sb_tFileOutputDelimited_2
								.append(OUT_DELIM_tFileOutputDelimited_2);

						if (row2.C_NAME != null) {

							sb_tFileOutputDelimited_2.append(

							row2.C_NAME

							);

						}

						sb_tFileOutputDelimited_2
								.append(OUT_DELIM_tFileOutputDelimited_2);

						if (row2.C_SYNONYM_CD != null) {

							sb_tFileOutputDelimited_2.append(

							row2.C_SYNONYM_CD

							);

						}

						sb_tFileOutputDelimited_2
								.append(OUT_DELIM_tFileOutputDelimited_2);

						if (row2.C_VISUALATTRIBUTES != null) {

							sb_tFileOutputDelimited_2.append(

							row2.C_VISUALATTRIBUTES

							);

						}

						sb_tFileOutputDelimited_2
								.append(OUT_DELIM_tFileOutputDelimited_2);

						if (row2.C_TOTALNUM != null) {

							sb_tFileOutputDelimited_2.append(

							row2.C_TOTALNUM.setScale(0,
									java.math.RoundingMode.HALF_UP)
									.toPlainString()

							);

						}

						sb_tFileOutputDelimited_2
								.append(OUT_DELIM_tFileOutputDelimited_2);

						if (row2.C_BASECODE != null) {

							sb_tFileOutputDelimited_2.append(

							row2.C_BASECODE

							);

						}

						sb_tFileOutputDelimited_2
								.append(OUT_DELIM_tFileOutputDelimited_2);

						if (row2.C_METADATAXML != null) {

							sb_tFileOutputDelimited_2.append(

							row2.C_METADATAXML

							);

						}

						sb_tFileOutputDelimited_2
								.append(OUT_DELIM_tFileOutputDelimited_2);

						if (row2.C_FACTTABLECOLUMN != null) {

							sb_tFileOutputDelimited_2.append(

							row2.C_FACTTABLECOLUMN

							);

						}

						sb_tFileOutputDelimited_2
								.append(OUT_DELIM_tFileOutputDelimited_2);

						if (row2.C_TABLENAME != null) {

							sb_tFileOutputDelimited_2.append(

							row2.C_TABLENAME

							);

						}

						sb_tFileOutputDelimited_2
								.append(OUT_DELIM_tFileOutputDelimited_2);

						if (row2.C_COLUMNNAME != null) {

							sb_tFileOutputDelimited_2.append(

							row2.C_COLUMNNAME

							);

						}

						sb_tFileOutputDelimited_2
								.append(OUT_DELIM_tFileOutputDelimited_2);

						if (row2.C_COLUMNDATATYPE != null) {

							sb_tFileOutputDelimited_2.append(

							row2.C_COLUMNDATATYPE

							);

						}

						sb_tFileOutputDelimited_2
								.append(OUT_DELIM_tFileOutputDelimited_2);

						if (row2.C_OPERATOR != null) {

							sb_tFileOutputDelimited_2.append(

							row2.C_OPERATOR

							);

						}

						sb_tFileOutputDelimited_2
								.append(OUT_DELIM_tFileOutputDelimited_2);

						if (row2.C_DIMCODE != null) {

							sb_tFileOutputDelimited_2.append(

							row2.C_DIMCODE

							);

						}

						sb_tFileOutputDelimited_2
								.append(OUT_DELIM_tFileOutputDelimited_2);

						if (row2.C_COMMENT != null) {

							sb_tFileOutputDelimited_2.append(

							row2.C_COMMENT

							);

						}

						sb_tFileOutputDelimited_2
								.append(OUT_DELIM_tFileOutputDelimited_2);

						if (row2.C_TOOLTIP != null) {

							sb_tFileOutputDelimited_2.append(

							row2.C_TOOLTIP

							);

						}

						sb_tFileOutputDelimited_2
								.append(OUT_DELIM_tFileOutputDelimited_2);

						if (row2.M_APPLIED_PATH != null) {

							sb_tFileOutputDelimited_2.append(

							row2.M_APPLIED_PATH

							);

						}

						sb_tFileOutputDelimited_2
								.append(OUT_DELIM_tFileOutputDelimited_2);

						if (row2.UPDATE_DATE != null) {

							sb_tFileOutputDelimited_2.append(

							FormatterUtils.format_Date(row2.UPDATE_DATE,
									"dd-MM-yyyy")

							);

						}

						sb_tFileOutputDelimited_2
								.append(OUT_DELIM_tFileOutputDelimited_2);

						if (row2.DOWNLOAD_DATE != null) {

							sb_tFileOutputDelimited_2.append(

							FormatterUtils.format_Date(row2.DOWNLOAD_DATE,
									"dd-MM-yyyy")

							);

						}

						sb_tFileOutputDelimited_2
								.append(OUT_DELIM_tFileOutputDelimited_2);

						if (row2.IMPORT_DATE != null) {

							sb_tFileOutputDelimited_2.append(

							FormatterUtils.format_Date(row2.IMPORT_DATE,
									"dd-MM-yyyy")

							);

						}

						sb_tFileOutputDelimited_2
								.append(OUT_DELIM_tFileOutputDelimited_2);

						if (row2.SOURCESYSTEM_CD != null) {

							sb_tFileOutputDelimited_2.append(

							row2.SOURCESYSTEM_CD

							);

						}

						sb_tFileOutputDelimited_2
								.append(OUT_DELIM_tFileOutputDelimited_2);

						if (row2.VALUETYPE_CD != null) {

							sb_tFileOutputDelimited_2.append(

							row2.VALUETYPE_CD

							);

						}

						sb_tFileOutputDelimited_2
								.append(OUT_DELIM_tFileOutputDelimited_2);

						if (row2.M_EXCLUSION_CD != null) {

							sb_tFileOutputDelimited_2.append(

							row2.M_EXCLUSION_CD

							);

						}

						sb_tFileOutputDelimited_2
								.append(OUT_DELIM_tFileOutputDelimited_2);

						if (row2.C_PATH != null) {

							sb_tFileOutputDelimited_2.append(

							row2.C_PATH

							);

						}

						sb_tFileOutputDelimited_2
								.append(OUT_DELIM_tFileOutputDelimited_2);

						if (row2.C_SYMBOL != null) {

							sb_tFileOutputDelimited_2.append(

							row2.C_SYMBOL

							);

						}

						sb_tFileOutputDelimited_2
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

						nb_line_tFileOutputDelimited_2++;

						outtFileOutputDelimited_2
								.write(sb_tFileOutputDelimited_2.toString());

						tos_count_tFileOutputDelimited_2++;

						/**
						 * [tFileOutputDelimited_2 main ] stop
						 */

						/**
						 * [tJDBCInput_2 end ] start
						 */

						currentComponent = "tJDBCInput_2";

					}
					rs_tJDBCInput_2.close();
					stmt_tJDBCInput_2.close();

					globalMap.put("tJDBCInput_2_NB_LINE", nb_line_tJDBCInput_2);

					ok_Hash.put("tJDBCInput_2", true);
					end_Hash.put("tJDBCInput_2", System.currentTimeMillis());

					/**
					 * [tJDBCInput_2 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_2 end ] start
					 */

					currentComponent = "tFileOutputDelimited_2";

				} finally {
					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
					globalMap.put("tFileOutputDelimited_2_NB_LINE",
							nb_line_tFileOutputDelimited_2);
					globalMap.put("tFileOutputDelimited_2_FILE_NAME",
							fileName_tFileOutputDelimited_2);
				} // finally

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readDate(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readDate(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_3";

				int tos_count_tFileOutputDelimited_3 = 0;

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(
						((String) globalMap
								.get("tCreateTemporaryFile_3_FILEPATH"))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
							.substring(0, fileName_tFileOutputDelimited_3
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(
						fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",
						fileName_tFileOutputDelimited_3);

				int nb_line_tFileOutputDelimited_3 = 0;
				int splitEvery_tFileOutputDelimited_3 = 1000;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				final String OUT_DELIM_tFileOutputDelimited_3 = /**
				 * Start field
				 * tFileOutputDelimited_3:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /**
				 * Start
				 * field tFileOutputDelimited_3:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null
						&& directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(
							directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						dir_tFileOutputDelimited_3.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_3 = null;
				try {
					outtFileOutputDelimited_3 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_3,
											false), "UTF-8"));

					if (filetFileOutputDelimited_3.length() == 0) {

						outtFileOutputDelimited_3.write("ENCOUNTER_NUM");

						outtFileOutputDelimited_3
								.write(OUT_DELIM_tFileOutputDelimited_3);

						outtFileOutputDelimited_3.write("PATIENT_NUM");

						outtFileOutputDelimited_3
								.write(OUT_DELIM_tFileOutputDelimited_3);

						outtFileOutputDelimited_3.write("CONCEPT_CD");

						outtFileOutputDelimited_3
								.write(OUT_DELIM_tFileOutputDelimited_3);

						outtFileOutputDelimited_3.write("PROVIDER_ID");

						outtFileOutputDelimited_3
								.write(OUT_DELIM_tFileOutputDelimited_3);

						outtFileOutputDelimited_3.write("START_DATE");

						outtFileOutputDelimited_3
								.write(OUT_DELIM_tFileOutputDelimited_3);

						outtFileOutputDelimited_3.write("MODIFIER_CD");

						outtFileOutputDelimited_3
								.write(OUT_DELIM_tFileOutputDelimited_3);

						outtFileOutputDelimited_3.write("INSTANCE_NUM");

						outtFileOutputDelimited_3
								.write(OUT_DELIM_tFileOutputDelimited_3);

						outtFileOutputDelimited_3.write("VALTYPE_CD");

						outtFileOutputDelimited_3
								.write(OUT_DELIM_tFileOutputDelimited_3);

						outtFileOutputDelimited_3.write("TVAL_CHAR");

						outtFileOutputDelimited_3
								.write(OUT_DELIM_tFileOutputDelimited_3);

						outtFileOutputDelimited_3.write("NVAL_NUM");

						outtFileOutputDelimited_3
								.write(OUT_DELIM_tFileOutputDelimited_3);

						outtFileOutputDelimited_3.write("VALUEFLAG_CD");

						outtFileOutputDelimited_3
								.write(OUT_DELIM_tFileOutputDelimited_3);

						outtFileOutputDelimited_3.write("QUANTITY_NUM");

						outtFileOutputDelimited_3
								.write(OUT_DELIM_tFileOutputDelimited_3);

						outtFileOutputDelimited_3.write("UNITS_CD");

						outtFileOutputDelimited_3
								.write(OUT_DELIM_tFileOutputDelimited_3);

						outtFileOutputDelimited_3.write("END_DATE");

						outtFileOutputDelimited_3
								.write(OUT_DELIM_tFileOutputDelimited_3);

						outtFileOutputDelimited_3.write("LOCATION_CD");

						outtFileOutputDelimited_3
								.write(OUT_DELIM_tFileOutputDelimited_3);

						outtFileOutputDelimited_3.write("OBSERVATION_BLOB");

						outtFileOutputDelimited_3
								.write(OUT_DELIM_tFileOutputDelimited_3);

						outtFileOutputDelimited_3.write("CONFIDENCE_NUM");

						outtFileOutputDelimited_3
								.write(OUT_DELIM_tFileOutputDelimited_3);

						outtFileOutputDelimited_3.write("UPDATE_DATE");

						outtFileOutputDelimited_3
								.write(OUT_DELIM_tFileOutputDelimited_3);

						outtFileOutputDelimited_3.write("DOWNLOAD_DATE");

						outtFileOutputDelimited_3
								.write(OUT_DELIM_tFileOutputDelimited_3);

						outtFileOutputDelimited_3.write("IMPORT_DATE");

						outtFileOutputDelimited_3
								.write(OUT_DELIM_tFileOutputDelimited_3);

						outtFileOutputDelimited_3.write("SOURCESYSTEM_CD");

						outtFileOutputDelimited_3
								.write(OUT_DELIM_tFileOutputDelimited_3);

						outtFileOutputDelimited_3.write("UPLOAD_ID");

						outtFileOutputDelimited_3
								.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);
						outtFileOutputDelimited_3.flush();
					}

					/**
					 * [tFileOutputDelimited_3 begin ] stop
					 */

					/**
					 * [tJDBCInput_3 begin ] start
					 */

					ok_Hash.put("tJDBCInput_3", false);
					start_Hash.put("tJDBCInput_3", System.currentTimeMillis());
					currentComponent = "tJDBCInput_3";

					int tos_count_tJDBCInput_3 = 0;

					int nb_line_tJDBCInput_3 = 0;
					java.sql.Connection conn_tJDBCInput_3 = null;
					conn_tJDBCInput_3 = (java.sql.Connection) globalMap
							.get("conn_tJDBCConnection_1");
					if (null == conn_tJDBCInput_3) {
						java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCInput_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
								.get(KEY_DB_DATASOURCES);
						conn_tJDBCInput_3 = dataSources_tJDBCInput_3.get("")
								.getConnection();
						// globalMap.put("conn_tJDBCConnection_1",
						// conn_tJDBCInput_3);
					}

					java.sql.Statement stmt_tJDBCInput_3 = conn_tJDBCInput_3
							.createStatement();

					String dbquery_tJDBCInput_3 = "select * from "
							+ context.DB_StagingI2B2_Schema
							+ ".OBSERVATION_FACT";

					globalMap.put("tJDBCInput_3_QUERY", dbquery_tJDBCInput_3);

					java.sql.ResultSet rs_tJDBCInput_3 = stmt_tJDBCInput_3
							.executeQuery(dbquery_tJDBCInput_3);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_3 = rs_tJDBCInput_3
							.getMetaData();
					int colQtyInRs_tJDBCInput_3 = rsmd_tJDBCInput_3
							.getColumnCount();

					String tmpContent_tJDBCInput_3 = null;
					int column_index_tJDBCInput_3 = 1;
					while (rs_tJDBCInput_3.next()) {
						nb_line_tJDBCInput_3++;

						column_index_tJDBCInput_3 = 1;

						if (colQtyInRs_tJDBCInput_3 < column_index_tJDBCInput_3) {
							row3.ENCOUNTER_NUM = null;
						} else {

							if (rs_tJDBCInput_3
									.getObject(column_index_tJDBCInput_3) != null) {
								row3.ENCOUNTER_NUM = rs_tJDBCInput_3
										.getBigDecimal(column_index_tJDBCInput_3);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}
						column_index_tJDBCInput_3 = 2;

						if (colQtyInRs_tJDBCInput_3 < column_index_tJDBCInput_3) {
							row3.PATIENT_NUM = null;
						} else {

							if (rs_tJDBCInput_3
									.getObject(column_index_tJDBCInput_3) != null) {
								row3.PATIENT_NUM = rs_tJDBCInput_3
										.getBigDecimal(column_index_tJDBCInput_3);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}
						column_index_tJDBCInput_3 = 3;

						if (colQtyInRs_tJDBCInput_3 < column_index_tJDBCInput_3) {
							row3.CONCEPT_CD = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(column_index_tJDBCInput_3);
							if (tmpContent_tJDBCInput_3 != null) {
								row3.CONCEPT_CD = tmpContent_tJDBCInput_3;
							} else {
								row3.CONCEPT_CD = null;
							}

						}
						column_index_tJDBCInput_3 = 4;

						if (colQtyInRs_tJDBCInput_3 < column_index_tJDBCInput_3) {
							row3.PROVIDER_ID = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(column_index_tJDBCInput_3);
							if (tmpContent_tJDBCInput_3 != null) {
								row3.PROVIDER_ID = tmpContent_tJDBCInput_3;
							} else {
								row3.PROVIDER_ID = null;
							}

						}
						column_index_tJDBCInput_3 = 5;

						if (colQtyInRs_tJDBCInput_3 < column_index_tJDBCInput_3) {
							row3.START_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_3 = null;
							try {
								date_tJDBCInput_3 = rs_tJDBCInput_3
										.getTimestamp(column_index_tJDBCInput_3);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_3 = rs_tJDBCInput_3
										.getDate(column_index_tJDBCInput_3);
							}
							row3.START_DATE = date_tJDBCInput_3;

						}
						column_index_tJDBCInput_3 = 6;

						if (colQtyInRs_tJDBCInput_3 < column_index_tJDBCInput_3) {
							row3.MODIFIER_CD = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(column_index_tJDBCInput_3);
							if (tmpContent_tJDBCInput_3 != null) {
								row3.MODIFIER_CD = tmpContent_tJDBCInput_3;
							} else {
								row3.MODIFIER_CD = null;
							}

						}
						column_index_tJDBCInput_3 = 7;

						if (colQtyInRs_tJDBCInput_3 < column_index_tJDBCInput_3) {
							row3.INSTANCE_NUM = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(column_index_tJDBCInput_3);
							if (tmpContent_tJDBCInput_3 != null) {
								row3.INSTANCE_NUM = tmpContent_tJDBCInput_3;
							} else {
								row3.INSTANCE_NUM = null;
							}

						}
						column_index_tJDBCInput_3 = 8;

						if (colQtyInRs_tJDBCInput_3 < column_index_tJDBCInput_3) {
							row3.VALTYPE_CD = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(column_index_tJDBCInput_3);
							if (tmpContent_tJDBCInput_3 != null) {
								row3.VALTYPE_CD = tmpContent_tJDBCInput_3;
							} else {
								row3.VALTYPE_CD = null;
							}

							if (rs_tJDBCInput_3.wasNull()) {
								row3.VALTYPE_CD = null;
							}
						}
						column_index_tJDBCInput_3 = 9;

						if (colQtyInRs_tJDBCInput_3 < column_index_tJDBCInput_3) {
							row3.TVAL_CHAR = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(column_index_tJDBCInput_3);
							if (tmpContent_tJDBCInput_3 != null) {
								row3.TVAL_CHAR = tmpContent_tJDBCInput_3;
							} else {
								row3.TVAL_CHAR = null;
							}

							if (rs_tJDBCInput_3.wasNull()) {
								row3.TVAL_CHAR = null;
							}
						}
						column_index_tJDBCInput_3 = 10;

						if (colQtyInRs_tJDBCInput_3 < column_index_tJDBCInput_3) {
							row3.NVAL_NUM = null;
						} else {

							if (rs_tJDBCInput_3
									.getObject(column_index_tJDBCInput_3) != null) {
								row3.NVAL_NUM = rs_tJDBCInput_3
										.getFloat(column_index_tJDBCInput_3);
							} else {
								row3.NVAL_NUM = null;
							}

							if (rs_tJDBCInput_3.wasNull()) {
								row3.NVAL_NUM = null;
							}
						}
						column_index_tJDBCInput_3 = 11;

						if (colQtyInRs_tJDBCInput_3 < column_index_tJDBCInput_3) {
							row3.VALUEFLAG_CD = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(column_index_tJDBCInput_3);
							if (tmpContent_tJDBCInput_3 != null) {
								row3.VALUEFLAG_CD = tmpContent_tJDBCInput_3;
							} else {
								row3.VALUEFLAG_CD = null;
							}

							if (rs_tJDBCInput_3.wasNull()) {
								row3.VALUEFLAG_CD = null;
							}
						}
						column_index_tJDBCInput_3 = 12;

						if (colQtyInRs_tJDBCInput_3 < column_index_tJDBCInput_3) {
							row3.QUANTITY_NUM = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(column_index_tJDBCInput_3);
							if (tmpContent_tJDBCInput_3 != null) {
								row3.QUANTITY_NUM = tmpContent_tJDBCInput_3;
							} else {
								row3.QUANTITY_NUM = null;
							}

							if (rs_tJDBCInput_3.wasNull()) {
								row3.QUANTITY_NUM = null;
							}
						}
						column_index_tJDBCInput_3 = 13;

						if (colQtyInRs_tJDBCInput_3 < column_index_tJDBCInput_3) {
							row3.UNITS_CD = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(column_index_tJDBCInput_3);
							if (tmpContent_tJDBCInput_3 != null) {
								row3.UNITS_CD = tmpContent_tJDBCInput_3;
							} else {
								row3.UNITS_CD = null;
							}

							if (rs_tJDBCInput_3.wasNull()) {
								row3.UNITS_CD = null;
							}
						}
						column_index_tJDBCInput_3 = 14;

						if (colQtyInRs_tJDBCInput_3 < column_index_tJDBCInput_3) {
							row3.END_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_3 = null;
							try {
								date_tJDBCInput_3 = rs_tJDBCInput_3
										.getTimestamp(column_index_tJDBCInput_3);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_3 = rs_tJDBCInput_3
										.getDate(column_index_tJDBCInput_3);
							}
							row3.END_DATE = date_tJDBCInput_3;

							if (rs_tJDBCInput_3.wasNull()) {
								row3.END_DATE = null;
							}
						}
						column_index_tJDBCInput_3 = 15;

						if (colQtyInRs_tJDBCInput_3 < column_index_tJDBCInput_3) {
							row3.LOCATION_CD = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(column_index_tJDBCInput_3);
							if (tmpContent_tJDBCInput_3 != null) {
								row3.LOCATION_CD = tmpContent_tJDBCInput_3;
							} else {
								row3.LOCATION_CD = null;
							}

							if (rs_tJDBCInput_3.wasNull()) {
								row3.LOCATION_CD = null;
							}
						}
						column_index_tJDBCInput_3 = 16;

						if (colQtyInRs_tJDBCInput_3 < column_index_tJDBCInput_3) {
							row3.OBSERVATION_BLOB = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(column_index_tJDBCInput_3);
							if (tmpContent_tJDBCInput_3 != null) {
								row3.OBSERVATION_BLOB = tmpContent_tJDBCInput_3;
							} else {
								row3.OBSERVATION_BLOB = null;
							}

							if (rs_tJDBCInput_3.wasNull()) {
								row3.OBSERVATION_BLOB = null;
							}
						}
						column_index_tJDBCInput_3 = 17;

						if (colQtyInRs_tJDBCInput_3 < column_index_tJDBCInput_3) {
							row3.CONFIDENCE_NUM = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(column_index_tJDBCInput_3);
							if (tmpContent_tJDBCInput_3 != null) {
								row3.CONFIDENCE_NUM = tmpContent_tJDBCInput_3;
							} else {
								row3.CONFIDENCE_NUM = null;
							}

							if (rs_tJDBCInput_3.wasNull()) {
								row3.CONFIDENCE_NUM = null;
							}
						}
						column_index_tJDBCInput_3 = 18;

						if (colQtyInRs_tJDBCInput_3 < column_index_tJDBCInput_3) {
							row3.UPDATE_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_3 = null;
							try {
								date_tJDBCInput_3 = rs_tJDBCInput_3
										.getTimestamp(column_index_tJDBCInput_3);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_3 = rs_tJDBCInput_3
										.getDate(column_index_tJDBCInput_3);
							}
							row3.UPDATE_DATE = date_tJDBCInput_3;

							if (rs_tJDBCInput_3.wasNull()) {
								row3.UPDATE_DATE = null;
							}
						}
						column_index_tJDBCInput_3 = 19;

						if (colQtyInRs_tJDBCInput_3 < column_index_tJDBCInput_3) {
							row3.DOWNLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_3 = null;
							try {
								date_tJDBCInput_3 = rs_tJDBCInput_3
										.getTimestamp(column_index_tJDBCInput_3);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_3 = rs_tJDBCInput_3
										.getDate(column_index_tJDBCInput_3);
							}
							row3.DOWNLOAD_DATE = date_tJDBCInput_3;

							if (rs_tJDBCInput_3.wasNull()) {
								row3.DOWNLOAD_DATE = null;
							}
						}
						column_index_tJDBCInput_3 = 20;

						if (colQtyInRs_tJDBCInput_3 < column_index_tJDBCInput_3) {
							row3.IMPORT_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_3 = null;
							try {
								date_tJDBCInput_3 = rs_tJDBCInput_3
										.getTimestamp(column_index_tJDBCInput_3);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_3 = rs_tJDBCInput_3
										.getDate(column_index_tJDBCInput_3);
							}
							row3.IMPORT_DATE = date_tJDBCInput_3;

							if (rs_tJDBCInput_3.wasNull()) {
								row3.IMPORT_DATE = null;
							}
						}
						column_index_tJDBCInput_3 = 21;

						if (colQtyInRs_tJDBCInput_3 < column_index_tJDBCInput_3) {
							row3.SOURCESYSTEM_CD = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(column_index_tJDBCInput_3);
							if (tmpContent_tJDBCInput_3 != null) {
								row3.SOURCESYSTEM_CD = tmpContent_tJDBCInput_3;
							} else {
								row3.SOURCESYSTEM_CD = null;
							}

							if (rs_tJDBCInput_3.wasNull()) {
								row3.SOURCESYSTEM_CD = null;
							}
						}
						column_index_tJDBCInput_3 = 22;

						if (colQtyInRs_tJDBCInput_3 < column_index_tJDBCInput_3) {
							row3.UPLOAD_ID = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(column_index_tJDBCInput_3);
							if (tmpContent_tJDBCInput_3 != null) {
								row3.UPLOAD_ID = tmpContent_tJDBCInput_3;
							} else {
								row3.UPLOAD_ID = null;
							}

							if (rs_tJDBCInput_3.wasNull()) {
								row3.UPLOAD_ID = null;
							}
						}

						/**
						 * [tJDBCInput_3 begin ] stop
						 */
						/**
						 * [tJDBCInput_3 main ] start
						 */

						currentComponent = "tJDBCInput_3";

						tos_count_tJDBCInput_3++;

						/**
						 * [tJDBCInput_3 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_3 main ] start
						 */

						currentComponent = "tFileOutputDelimited_3";

						StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();

						if (row3.ENCOUNTER_NUM != null) {

							sb_tFileOutputDelimited_3.append(

							row3.ENCOUNTER_NUM.toPlainString()

							);

						}

						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);

						if (row3.PATIENT_NUM != null) {

							sb_tFileOutputDelimited_3.append(

							row3.PATIENT_NUM.toPlainString()

							);

						}

						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);

						if (row3.CONCEPT_CD != null) {

							sb_tFileOutputDelimited_3.append(

							row3.CONCEPT_CD

							);

						}

						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);

						if (row3.PROVIDER_ID != null) {

							sb_tFileOutputDelimited_3.append(

							row3.PROVIDER_ID

							);

						}

						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);

						if (row3.START_DATE != null) {

							sb_tFileOutputDelimited_3.append(

							FormatterUtils.format_Date(row3.START_DATE,
									"yyyy-MM-dd")

							);

						}

						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);

						if (row3.MODIFIER_CD != null) {

							sb_tFileOutputDelimited_3.append(

							row3.MODIFIER_CD

							);

						}

						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);

						if (row3.INSTANCE_NUM != null) {

							sb_tFileOutputDelimited_3.append(

							row3.INSTANCE_NUM

							);

						}

						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);

						if (row3.VALTYPE_CD != null) {

							sb_tFileOutputDelimited_3.append(

							row3.VALTYPE_CD

							);

						}

						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);

						if (row3.TVAL_CHAR != null) {

							sb_tFileOutputDelimited_3.append(

							row3.TVAL_CHAR

							);

						}

						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);

						if (row3.NVAL_NUM != null) {

							sb_tFileOutputDelimited_3.append(

							row3.NVAL_NUM

							);

						}

						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);

						if (row3.VALUEFLAG_CD != null) {

							sb_tFileOutputDelimited_3.append(

							row3.VALUEFLAG_CD

							);

						}

						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);

						if (row3.QUANTITY_NUM != null) {

							sb_tFileOutputDelimited_3.append(

							row3.QUANTITY_NUM

							);

						}

						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);

						if (row3.UNITS_CD != null) {

							sb_tFileOutputDelimited_3.append(

							row3.UNITS_CD

							);

						}

						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);

						if (row3.END_DATE != null) {

							sb_tFileOutputDelimited_3.append(

							FormatterUtils.format_Date(row3.END_DATE,
									"yyyy-MM-dd")

							);

						}

						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);

						if (row3.LOCATION_CD != null) {

							sb_tFileOutputDelimited_3.append(

							row3.LOCATION_CD

							);

						}

						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);

						if (row3.OBSERVATION_BLOB != null) {

							sb_tFileOutputDelimited_3.append(

							row3.OBSERVATION_BLOB

							);

						}

						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);

						if (row3.CONFIDENCE_NUM != null) {

							sb_tFileOutputDelimited_3.append(

							row3.CONFIDENCE_NUM

							);

						}

						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);

						if (row3.UPDATE_DATE != null) {

							sb_tFileOutputDelimited_3.append(

							FormatterUtils.format_Date(row3.UPDATE_DATE,
									"yyyy-MM-dd")

							);

						}

						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);

						if (row3.DOWNLOAD_DATE != null) {

							sb_tFileOutputDelimited_3.append(

							FormatterUtils.format_Date(row3.DOWNLOAD_DATE,
									"yyyy-MM-dd")

							);

						}

						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);

						if (row3.IMPORT_DATE != null) {

							sb_tFileOutputDelimited_3.append(

							FormatterUtils.format_Date(row3.IMPORT_DATE,
									"yyyy-MM-dd")

							);

						}

						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);

						if (row3.SOURCESYSTEM_CD != null) {

							sb_tFileOutputDelimited_3.append(

							row3.SOURCESYSTEM_CD

							);

						}

						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);

						if (row3.UPLOAD_ID != null) {

							sb_tFileOutputDelimited_3.append(

							row3.UPLOAD_ID

							);

						}

						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);

						nb_line_tFileOutputDelimited_3++;

						outtFileOutputDelimited_3
								.write(sb_tFileOutputDelimited_3.toString());

						tos_count_tFileOutputDelimited_3++;

						/**
						 * [tFileOutputDelimited_3 main ] stop
						 */

						/**
						 * [tJDBCInput_3 end ] start
						 */

						currentComponent = "tJDBCInput_3";

					}
					rs_tJDBCInput_3.close();
					stmt_tJDBCInput_3.close();

					globalMap.put("tJDBCInput_3_NB_LINE", nb_line_tJDBCInput_3);

					ok_Hash.put("tJDBCInput_3", true);
					end_Hash.put("tJDBCInput_3", System.currentTimeMillis());

					/**
					 * [tJDBCInput_3 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_3 end ] start
					 */

					currentComponent = "tFileOutputDelimited_3";

				} finally {
					if (outtFileOutputDelimited_3 != null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}
					globalMap.put("tFileOutputDelimited_3_NB_LINE",
							nb_line_tFileOutputDelimited_3);
					globalMap.put("tFileOutputDelimited_3_FILE_NAME",
							fileName_tFileOutputDelimited_3);
				} // finally

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.CONCEPT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.CONCEPT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tFileOutputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_7", false);
				start_Hash.put("tFileOutputDelimited_7",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_7";

				int tos_count_tFileOutputDelimited_7 = 0;

				String fileName_tFileOutputDelimited_7 = "";
				fileName_tFileOutputDelimited_7 = (new java.io.File(
						((String) globalMap
								.get("tCreateTemporaryFile_4_FILEPATH"))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_7 = null;
				String extension_tFileOutputDelimited_7 = null;
				String directory_tFileOutputDelimited_7 = null;
				if ((fileName_tFileOutputDelimited_7.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_7.lastIndexOf(".") < fileName_tFileOutputDelimited_7
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
						extension_tFileOutputDelimited_7 = "";
					} else {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(0, fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
						extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
							.substring(0, fileName_tFileOutputDelimited_7
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_7.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(0, fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
						extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
						extension_tFileOutputDelimited_7 = "";
					}
					directory_tFileOutputDelimited_7 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_7 = true;
				java.io.File filetFileOutputDelimited_7 = new java.io.File(
						fileName_tFileOutputDelimited_7);
				globalMap.put("tFileOutputDelimited_7_FILE_NAME",
						fileName_tFileOutputDelimited_7);

				int nb_line_tFileOutputDelimited_7 = 0;
				int splitEvery_tFileOutputDelimited_7 = 1000;
				int splitedFileNo_tFileOutputDelimited_7 = 0;
				int currentRow_tFileOutputDelimited_7 = 0;

				final String OUT_DELIM_tFileOutputDelimited_7 = /**
				 * Start field
				 * tFileOutputDelimited_7:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_7:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_7 = /**
				 * Start
				 * field tFileOutputDelimited_7:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_7:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_7 != null
						&& directory_tFileOutputDelimited_7.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_7 = new java.io.File(
							directory_tFileOutputDelimited_7);
					if (!dir_tFileOutputDelimited_7.exists()) {
						dir_tFileOutputDelimited_7.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_7 = null;
				try {
					outtFileOutputDelimited_7 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_7,
											false), "ISO-8859-15"));

					if (filetFileOutputDelimited_7.length() == 0) {

						outtFileOutputDelimited_7.write("CONCEPT_PATH");

						outtFileOutputDelimited_7
								.write(OUT_DELIM_tFileOutputDelimited_7);

						outtFileOutputDelimited_7.write("CONCEPT_CD");

						outtFileOutputDelimited_7
								.write(OUT_DELIM_tFileOutputDelimited_7);

						outtFileOutputDelimited_7.write("NAME_CHAR");

						outtFileOutputDelimited_7
								.write(OUT_DELIM_tFileOutputDelimited_7);

						outtFileOutputDelimited_7.write("CONCEPT_BLOB");

						outtFileOutputDelimited_7
								.write(OUT_DELIM_tFileOutputDelimited_7);

						outtFileOutputDelimited_7.write("UPDATE_DATE");

						outtFileOutputDelimited_7
								.write(OUT_DELIM_tFileOutputDelimited_7);

						outtFileOutputDelimited_7.write("DOWNLOAD_DATE");

						outtFileOutputDelimited_7
								.write(OUT_DELIM_tFileOutputDelimited_7);

						outtFileOutputDelimited_7.write("IMPORT_DATE");

						outtFileOutputDelimited_7
								.write(OUT_DELIM_tFileOutputDelimited_7);

						outtFileOutputDelimited_7.write("SOURCESYSTEM_CD");

						outtFileOutputDelimited_7
								.write(OUT_DELIM_tFileOutputDelimited_7);

						outtFileOutputDelimited_7.write("UPLOAD_ID");

						outtFileOutputDelimited_7
								.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_7);
						outtFileOutputDelimited_7.flush();
					}

					/**
					 * [tFileOutputDelimited_7 begin ] stop
					 */

					/**
					 * [tJDBCInput_4 begin ] start
					 */

					ok_Hash.put("tJDBCInput_4", false);
					start_Hash.put("tJDBCInput_4", System.currentTimeMillis());
					currentComponent = "tJDBCInput_4";

					int tos_count_tJDBCInput_4 = 0;

					int nb_line_tJDBCInput_4 = 0;
					java.sql.Connection conn_tJDBCInput_4 = null;
					conn_tJDBCInput_4 = (java.sql.Connection) globalMap
							.get("conn_tJDBCConnection_1");
					if (null == conn_tJDBCInput_4) {
						java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCInput_4 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
								.get(KEY_DB_DATASOURCES);
						conn_tJDBCInput_4 = dataSources_tJDBCInput_4.get("")
								.getConnection();
						// globalMap.put("conn_tJDBCConnection_1",
						// conn_tJDBCInput_4);
					}

					java.sql.Statement stmt_tJDBCInput_4 = conn_tJDBCInput_4
							.createStatement();

					String dbquery_tJDBCInput_4 = "select * from "
							+ context.DB_StagingI2B2_Schema
							+ ".CONCEPT_DIMENSION";

					globalMap.put("tJDBCInput_4_QUERY", dbquery_tJDBCInput_4);

					java.sql.ResultSet rs_tJDBCInput_4 = stmt_tJDBCInput_4
							.executeQuery(dbquery_tJDBCInput_4);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_4 = rs_tJDBCInput_4
							.getMetaData();
					int colQtyInRs_tJDBCInput_4 = rsmd_tJDBCInput_4
							.getColumnCount();

					String tmpContent_tJDBCInput_4 = null;
					int column_index_tJDBCInput_4 = 1;
					while (rs_tJDBCInput_4.next()) {
						nb_line_tJDBCInput_4++;

						column_index_tJDBCInput_4 = 1;

						if (colQtyInRs_tJDBCInput_4 < column_index_tJDBCInput_4) {
							row6.CONCEPT_PATH = null;
						} else {

							tmpContent_tJDBCInput_4 = rs_tJDBCInput_4
									.getString(column_index_tJDBCInput_4);
							if (tmpContent_tJDBCInput_4 != null) {
								row6.CONCEPT_PATH = tmpContent_tJDBCInput_4;
							} else {
								row6.CONCEPT_PATH = null;
							}

						}
						column_index_tJDBCInput_4 = 2;

						if (colQtyInRs_tJDBCInput_4 < column_index_tJDBCInput_4) {
							row6.CONCEPT_CD = null;
						} else {

							tmpContent_tJDBCInput_4 = rs_tJDBCInput_4
									.getString(column_index_tJDBCInput_4);
							if (tmpContent_tJDBCInput_4 != null) {
								row6.CONCEPT_CD = tmpContent_tJDBCInput_4;
							} else {
								row6.CONCEPT_CD = null;
							}

						}
						column_index_tJDBCInput_4 = 3;

						if (colQtyInRs_tJDBCInput_4 < column_index_tJDBCInput_4) {
							row6.NAME_CHAR = null;
						} else {

							tmpContent_tJDBCInput_4 = rs_tJDBCInput_4
									.getString(column_index_tJDBCInput_4);
							if (tmpContent_tJDBCInput_4 != null) {
								row6.NAME_CHAR = tmpContent_tJDBCInput_4;
							} else {
								row6.NAME_CHAR = null;
							}

							if (rs_tJDBCInput_4.wasNull()) {
								row6.NAME_CHAR = null;
							}
						}
						column_index_tJDBCInput_4 = 4;

						if (colQtyInRs_tJDBCInput_4 < column_index_tJDBCInput_4) {
							row6.CONCEPT_BLOB = null;
						} else {

							tmpContent_tJDBCInput_4 = rs_tJDBCInput_4
									.getString(column_index_tJDBCInput_4);
							if (tmpContent_tJDBCInput_4 != null) {
								row6.CONCEPT_BLOB = tmpContent_tJDBCInput_4;
							} else {
								row6.CONCEPT_BLOB = null;
							}

							if (rs_tJDBCInput_4.wasNull()) {
								row6.CONCEPT_BLOB = null;
							}
						}
						column_index_tJDBCInput_4 = 5;

						if (colQtyInRs_tJDBCInput_4 < column_index_tJDBCInput_4) {
							row6.UPDATE_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_4 = null;
							try {
								date_tJDBCInput_4 = rs_tJDBCInput_4
										.getTimestamp(column_index_tJDBCInput_4);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_4 = rs_tJDBCInput_4
										.getDate(column_index_tJDBCInput_4);
							}
							row6.UPDATE_DATE = date_tJDBCInput_4;

							if (rs_tJDBCInput_4.wasNull()) {
								row6.UPDATE_DATE = null;
							}
						}
						column_index_tJDBCInput_4 = 6;

						if (colQtyInRs_tJDBCInput_4 < column_index_tJDBCInput_4) {
							row6.DOWNLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_4 = null;
							try {
								date_tJDBCInput_4 = rs_tJDBCInput_4
										.getTimestamp(column_index_tJDBCInput_4);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_4 = rs_tJDBCInput_4
										.getDate(column_index_tJDBCInput_4);
							}
							row6.DOWNLOAD_DATE = date_tJDBCInput_4;

							if (rs_tJDBCInput_4.wasNull()) {
								row6.DOWNLOAD_DATE = null;
							}
						}
						column_index_tJDBCInput_4 = 7;

						if (colQtyInRs_tJDBCInput_4 < column_index_tJDBCInput_4) {
							row6.IMPORT_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_4 = null;
							try {
								date_tJDBCInput_4 = rs_tJDBCInput_4
										.getTimestamp(column_index_tJDBCInput_4);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_4 = rs_tJDBCInput_4
										.getDate(column_index_tJDBCInput_4);
							}
							row6.IMPORT_DATE = date_tJDBCInput_4;

							if (rs_tJDBCInput_4.wasNull()) {
								row6.IMPORT_DATE = null;
							}
						}
						column_index_tJDBCInput_4 = 8;

						if (colQtyInRs_tJDBCInput_4 < column_index_tJDBCInput_4) {
							row6.SOURCESYSTEM_CD = null;
						} else {

							tmpContent_tJDBCInput_4 = rs_tJDBCInput_4
									.getString(column_index_tJDBCInput_4);
							if (tmpContent_tJDBCInput_4 != null) {
								row6.SOURCESYSTEM_CD = tmpContent_tJDBCInput_4;
							} else {
								row6.SOURCESYSTEM_CD = null;
							}

							if (rs_tJDBCInput_4.wasNull()) {
								row6.SOURCESYSTEM_CD = null;
							}
						}
						column_index_tJDBCInput_4 = 9;

						if (colQtyInRs_tJDBCInput_4 < column_index_tJDBCInput_4) {
							row6.UPLOAD_ID = null;
						} else {

							tmpContent_tJDBCInput_4 = rs_tJDBCInput_4
									.getString(column_index_tJDBCInput_4);
							if (tmpContent_tJDBCInput_4 != null) {
								row6.UPLOAD_ID = tmpContent_tJDBCInput_4;
							} else {
								row6.UPLOAD_ID = null;
							}

							if (rs_tJDBCInput_4.wasNull()) {
								row6.UPLOAD_ID = null;
							}
						}

						/**
						 * [tJDBCInput_4 begin ] stop
						 */
						/**
						 * [tJDBCInput_4 main ] start
						 */

						currentComponent = "tJDBCInput_4";

						tos_count_tJDBCInput_4++;

						/**
						 * [tJDBCInput_4 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_7 main ] start
						 */

						currentComponent = "tFileOutputDelimited_7";

						StringBuilder sb_tFileOutputDelimited_7 = new StringBuilder();

						if (row6.CONCEPT_PATH != null) {

							sb_tFileOutputDelimited_7.append(

							row6.CONCEPT_PATH

							);

						}

						sb_tFileOutputDelimited_7
								.append(OUT_DELIM_tFileOutputDelimited_7);

						if (row6.CONCEPT_CD != null) {

							sb_tFileOutputDelimited_7.append(

							row6.CONCEPT_CD

							);

						}

						sb_tFileOutputDelimited_7
								.append(OUT_DELIM_tFileOutputDelimited_7);

						if (row6.NAME_CHAR != null) {

							sb_tFileOutputDelimited_7.append(

							row6.NAME_CHAR

							);

						}

						sb_tFileOutputDelimited_7
								.append(OUT_DELIM_tFileOutputDelimited_7);

						if (row6.CONCEPT_BLOB != null) {

							sb_tFileOutputDelimited_7.append(

							row6.CONCEPT_BLOB

							);

						}

						sb_tFileOutputDelimited_7
								.append(OUT_DELIM_tFileOutputDelimited_7);

						if (row6.UPDATE_DATE != null) {

							sb_tFileOutputDelimited_7.append(

							FormatterUtils.format_Date(row6.UPDATE_DATE,
									"dd-MM-yyyy")

							);

						}

						sb_tFileOutputDelimited_7
								.append(OUT_DELIM_tFileOutputDelimited_7);

						if (row6.DOWNLOAD_DATE != null) {

							sb_tFileOutputDelimited_7.append(

							FormatterUtils.format_Date(row6.DOWNLOAD_DATE,
									"dd-MM-yyyy")

							);

						}

						sb_tFileOutputDelimited_7
								.append(OUT_DELIM_tFileOutputDelimited_7);

						if (row6.IMPORT_DATE != null) {

							sb_tFileOutputDelimited_7.append(

							FormatterUtils.format_Date(row6.IMPORT_DATE,
									"dd-MM-yyyy")

							);

						}

						sb_tFileOutputDelimited_7
								.append(OUT_DELIM_tFileOutputDelimited_7);

						if (row6.SOURCESYSTEM_CD != null) {

							sb_tFileOutputDelimited_7.append(

							row6.SOURCESYSTEM_CD

							);

						}

						sb_tFileOutputDelimited_7
								.append(OUT_DELIM_tFileOutputDelimited_7);

						if (row6.UPLOAD_ID != null) {

							sb_tFileOutputDelimited_7.append(

							row6.UPLOAD_ID

							);

						}

						sb_tFileOutputDelimited_7
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_7);

						nb_line_tFileOutputDelimited_7++;

						outtFileOutputDelimited_7
								.write(sb_tFileOutputDelimited_7.toString());

						tos_count_tFileOutputDelimited_7++;

						/**
						 * [tFileOutputDelimited_7 main ] stop
						 */

						/**
						 * [tJDBCInput_4 end ] start
						 */

						currentComponent = "tJDBCInput_4";

					}
					rs_tJDBCInput_4.close();
					stmt_tJDBCInput_4.close();

					globalMap.put("tJDBCInput_4_NB_LINE", nb_line_tJDBCInput_4);

					ok_Hash.put("tJDBCInput_4", true);
					end_Hash.put("tJDBCInput_4", System.currentTimeMillis());

					/**
					 * [tJDBCInput_4 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_7 end ] start
					 */

					currentComponent = "tFileOutputDelimited_7";

				} finally {
					if (outtFileOutputDelimited_7 != null) {
						outtFileOutputDelimited_7.flush();
						outtFileOutputDelimited_7.close();
					}
					globalMap.put("tFileOutputDelimited_7_NB_LINE",
							nb_line_tFileOutputDelimited_7);
					globalMap.put("tFileOutputDelimited_7_FILE_NAME",
							fileName_tFileOutputDelimited_7);
				} // finally

				ok_Hash.put("tFileOutputDelimited_7", true);
				end_Hash.put("tFileOutputDelimited_7",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.PATIENT_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tFileOutputDelimited_8 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_8", false);
				start_Hash.put("tFileOutputDelimited_8",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_8";

				int tos_count_tFileOutputDelimited_8 = 0;

				String fileName_tFileOutputDelimited_8 = "";
				fileName_tFileOutputDelimited_8 = (new java.io.File(
						((String) globalMap
								.get("tCreateTemporaryFile_5_FILEPATH"))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_8 = null;
				String extension_tFileOutputDelimited_8 = null;
				String directory_tFileOutputDelimited_8 = null;
				if ((fileName_tFileOutputDelimited_8.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_8.lastIndexOf(".") < fileName_tFileOutputDelimited_8
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
						extension_tFileOutputDelimited_8 = "";
					} else {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
								.substring(0, fileName_tFileOutputDelimited_8
										.lastIndexOf("."));
						extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
								.substring(fileName_tFileOutputDelimited_8
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
							.substring(0, fileName_tFileOutputDelimited_8
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_8.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
								.substring(0, fileName_tFileOutputDelimited_8
										.lastIndexOf("."));
						extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
								.substring(fileName_tFileOutputDelimited_8
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
						extension_tFileOutputDelimited_8 = "";
					}
					directory_tFileOutputDelimited_8 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_8 = true;
				java.io.File filetFileOutputDelimited_8 = new java.io.File(
						fileName_tFileOutputDelimited_8);
				globalMap.put("tFileOutputDelimited_8_FILE_NAME",
						fileName_tFileOutputDelimited_8);

				int nb_line_tFileOutputDelimited_8 = 0;
				int splitEvery_tFileOutputDelimited_8 = 1000;
				int splitedFileNo_tFileOutputDelimited_8 = 0;
				int currentRow_tFileOutputDelimited_8 = 0;

				final String OUT_DELIM_tFileOutputDelimited_8 = /**
				 * Start field
				 * tFileOutputDelimited_8:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_8:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_8 = /**
				 * Start
				 * field tFileOutputDelimited_8:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_8:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_8 != null
						&& directory_tFileOutputDelimited_8.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_8 = new java.io.File(
							directory_tFileOutputDelimited_8);
					if (!dir_tFileOutputDelimited_8.exists()) {
						dir_tFileOutputDelimited_8.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_8 = null;
				try {
					outtFileOutputDelimited_8 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_8,
											false), "UTF-8"));

					if (filetFileOutputDelimited_8.length() == 0) {

						outtFileOutputDelimited_8.write("PATIENT_IDE");

						outtFileOutputDelimited_8
								.write(OUT_DELIM_tFileOutputDelimited_8);

						outtFileOutputDelimited_8.write("PATIENT_IDE_SOURCE");

						outtFileOutputDelimited_8
								.write(OUT_DELIM_tFileOutputDelimited_8);

						outtFileOutputDelimited_8.write("PATIENT_NUM");

						outtFileOutputDelimited_8
								.write(OUT_DELIM_tFileOutputDelimited_8);

						outtFileOutputDelimited_8.write("PATIENT_IDE_STATUS");

						outtFileOutputDelimited_8
								.write(OUT_DELIM_tFileOutputDelimited_8);

						outtFileOutputDelimited_8.write("UPLOAD_DATE");

						outtFileOutputDelimited_8
								.write(OUT_DELIM_tFileOutputDelimited_8);

						outtFileOutputDelimited_8.write("UPDATE_DATE");

						outtFileOutputDelimited_8
								.write(OUT_DELIM_tFileOutputDelimited_8);

						outtFileOutputDelimited_8.write("DOWNLOAD_DATE");

						outtFileOutputDelimited_8
								.write(OUT_DELIM_tFileOutputDelimited_8);

						outtFileOutputDelimited_8.write("IMPORT_DATE");

						outtFileOutputDelimited_8
								.write(OUT_DELIM_tFileOutputDelimited_8);

						outtFileOutputDelimited_8.write("SOURCESYSTEM_CD");

						outtFileOutputDelimited_8
								.write(OUT_DELIM_tFileOutputDelimited_8);

						outtFileOutputDelimited_8.write("UPLOAD_ID");

						outtFileOutputDelimited_8
								.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_8);
						outtFileOutputDelimited_8.flush();
					}

					/**
					 * [tFileOutputDelimited_8 begin ] stop
					 */

					/**
					 * [tJDBCInput_5 begin ] start
					 */

					ok_Hash.put("tJDBCInput_5", false);
					start_Hash.put("tJDBCInput_5", System.currentTimeMillis());
					currentComponent = "tJDBCInput_5";

					int tos_count_tJDBCInput_5 = 0;

					int nb_line_tJDBCInput_5 = 0;
					java.sql.Connection conn_tJDBCInput_5 = null;
					conn_tJDBCInput_5 = (java.sql.Connection) globalMap
							.get("conn_tJDBCConnection_1");
					if (null == conn_tJDBCInput_5) {
						java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCInput_5 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
								.get(KEY_DB_DATASOURCES);
						conn_tJDBCInput_5 = dataSources_tJDBCInput_5.get("")
								.getConnection();
						// globalMap.put("conn_tJDBCConnection_1",
						// conn_tJDBCInput_5);
					}

					java.sql.Statement stmt_tJDBCInput_5 = conn_tJDBCInput_5
							.createStatement();

					String dbquery_tJDBCInput_5 = "select * from "
							+ context.DB_StagingI2B2_Schema
							+ ".PATIENT_MAPPING";

					globalMap.put("tJDBCInput_5_QUERY", dbquery_tJDBCInput_5);

					java.sql.ResultSet rs_tJDBCInput_5 = stmt_tJDBCInput_5
							.executeQuery(dbquery_tJDBCInput_5);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_5 = rs_tJDBCInput_5
							.getMetaData();
					int colQtyInRs_tJDBCInput_5 = rsmd_tJDBCInput_5
							.getColumnCount();

					String tmpContent_tJDBCInput_5 = null;
					int column_index_tJDBCInput_5 = 1;
					while (rs_tJDBCInput_5.next()) {
						nb_line_tJDBCInput_5++;

						column_index_tJDBCInput_5 = 1;

						if (colQtyInRs_tJDBCInput_5 < column_index_tJDBCInput_5) {
							row7.PATIENT_IDE = null;
						} else {

							tmpContent_tJDBCInput_5 = rs_tJDBCInput_5
									.getString(column_index_tJDBCInput_5);
							if (tmpContent_tJDBCInput_5 != null) {
								row7.PATIENT_IDE = tmpContent_tJDBCInput_5;
							} else {
								row7.PATIENT_IDE = null;
							}

						}
						column_index_tJDBCInput_5 = 2;

						if (colQtyInRs_tJDBCInput_5 < column_index_tJDBCInput_5) {
							row7.PATIENT_IDE_SOURCE = null;
						} else {

							tmpContent_tJDBCInput_5 = rs_tJDBCInput_5
									.getString(column_index_tJDBCInput_5);
							if (tmpContent_tJDBCInput_5 != null) {
								row7.PATIENT_IDE_SOURCE = tmpContent_tJDBCInput_5;
							} else {
								row7.PATIENT_IDE_SOURCE = null;
							}

						}
						column_index_tJDBCInput_5 = 3;

						if (colQtyInRs_tJDBCInput_5 < column_index_tJDBCInput_5) {
							row7.PATIENT_NUM = null;
						} else {

							if (rs_tJDBCInput_5
									.getObject(column_index_tJDBCInput_5) != null) {
								row7.PATIENT_NUM = rs_tJDBCInput_5
										.getBigDecimal(column_index_tJDBCInput_5);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}
						column_index_tJDBCInput_5 = 4;

						if (colQtyInRs_tJDBCInput_5 < column_index_tJDBCInput_5) {
							row7.PATIENT_IDE_STATUS = null;
						} else {

							tmpContent_tJDBCInput_5 = rs_tJDBCInput_5
									.getString(column_index_tJDBCInput_5);
							if (tmpContent_tJDBCInput_5 != null) {
								row7.PATIENT_IDE_STATUS = tmpContent_tJDBCInput_5;
							} else {
								row7.PATIENT_IDE_STATUS = null;
							}

							if (rs_tJDBCInput_5.wasNull()) {
								row7.PATIENT_IDE_STATUS = null;
							}
						}
						column_index_tJDBCInput_5 = 5;

						if (colQtyInRs_tJDBCInput_5 < column_index_tJDBCInput_5) {
							row7.UPLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_5 = null;
							try {
								date_tJDBCInput_5 = rs_tJDBCInput_5
										.getTimestamp(column_index_tJDBCInput_5);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_5 = rs_tJDBCInput_5
										.getDate(column_index_tJDBCInput_5);
							}
							row7.UPLOAD_DATE = date_tJDBCInput_5;

							if (rs_tJDBCInput_5.wasNull()) {
								row7.UPLOAD_DATE = null;
							}
						}
						column_index_tJDBCInput_5 = 6;

						if (colQtyInRs_tJDBCInput_5 < column_index_tJDBCInput_5) {
							row7.UPDATE_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_5 = null;
							try {
								date_tJDBCInput_5 = rs_tJDBCInput_5
										.getTimestamp(column_index_tJDBCInput_5);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_5 = rs_tJDBCInput_5
										.getDate(column_index_tJDBCInput_5);
							}
							row7.UPDATE_DATE = date_tJDBCInput_5;

							if (rs_tJDBCInput_5.wasNull()) {
								row7.UPDATE_DATE = null;
							}
						}
						column_index_tJDBCInput_5 = 7;

						if (colQtyInRs_tJDBCInput_5 < column_index_tJDBCInput_5) {
							row7.DOWNLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_5 = null;
							try {
								date_tJDBCInput_5 = rs_tJDBCInput_5
										.getTimestamp(column_index_tJDBCInput_5);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_5 = rs_tJDBCInput_5
										.getDate(column_index_tJDBCInput_5);
							}
							row7.DOWNLOAD_DATE = date_tJDBCInput_5;

							if (rs_tJDBCInput_5.wasNull()) {
								row7.DOWNLOAD_DATE = null;
							}
						}
						column_index_tJDBCInput_5 = 8;

						if (colQtyInRs_tJDBCInput_5 < column_index_tJDBCInput_5) {
							row7.IMPORT_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_5 = null;
							try {
								date_tJDBCInput_5 = rs_tJDBCInput_5
										.getTimestamp(column_index_tJDBCInput_5);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_5 = rs_tJDBCInput_5
										.getDate(column_index_tJDBCInput_5);
							}
							row7.IMPORT_DATE = date_tJDBCInput_5;

							if (rs_tJDBCInput_5.wasNull()) {
								row7.IMPORT_DATE = null;
							}
						}
						column_index_tJDBCInput_5 = 9;

						if (colQtyInRs_tJDBCInput_5 < column_index_tJDBCInput_5) {
							row7.SOURCESYSTEM_CD = null;
						} else {

							tmpContent_tJDBCInput_5 = rs_tJDBCInput_5
									.getString(column_index_tJDBCInput_5);
							if (tmpContent_tJDBCInput_5 != null) {
								row7.SOURCESYSTEM_CD = tmpContent_tJDBCInput_5;
							} else {
								row7.SOURCESYSTEM_CD = null;
							}

							if (rs_tJDBCInput_5.wasNull()) {
								row7.SOURCESYSTEM_CD = null;
							}
						}
						column_index_tJDBCInput_5 = 10;

						if (colQtyInRs_tJDBCInput_5 < column_index_tJDBCInput_5) {
							row7.UPLOAD_ID = null;
						} else {

							tmpContent_tJDBCInput_5 = rs_tJDBCInput_5
									.getString(column_index_tJDBCInput_5);
							if (tmpContent_tJDBCInput_5 != null) {
								row7.UPLOAD_ID = tmpContent_tJDBCInput_5;
							} else {
								row7.UPLOAD_ID = null;
							}

							if (rs_tJDBCInput_5.wasNull()) {
								row7.UPLOAD_ID = null;
							}
						}

						/**
						 * [tJDBCInput_5 begin ] stop
						 */
						/**
						 * [tJDBCInput_5 main ] start
						 */

						currentComponent = "tJDBCInput_5";

						tos_count_tJDBCInput_5++;

						/**
						 * [tJDBCInput_5 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_8 main ] start
						 */

						currentComponent = "tFileOutputDelimited_8";

						StringBuilder sb_tFileOutputDelimited_8 = new StringBuilder();

						if (row7.PATIENT_IDE != null) {

							sb_tFileOutputDelimited_8.append(

							row7.PATIENT_IDE

							);

						}

						sb_tFileOutputDelimited_8
								.append(OUT_DELIM_tFileOutputDelimited_8);

						if (row7.PATIENT_IDE_SOURCE != null) {

							sb_tFileOutputDelimited_8.append(

							row7.PATIENT_IDE_SOURCE

							);

						}

						sb_tFileOutputDelimited_8
								.append(OUT_DELIM_tFileOutputDelimited_8);

						if (row7.PATIENT_NUM != null) {

							sb_tFileOutputDelimited_8.append(

							row7.PATIENT_NUM.toPlainString()

							);

						}

						sb_tFileOutputDelimited_8
								.append(OUT_DELIM_tFileOutputDelimited_8);

						if (row7.PATIENT_IDE_STATUS != null) {

							sb_tFileOutputDelimited_8.append(

							row7.PATIENT_IDE_STATUS

							);

						}

						sb_tFileOutputDelimited_8
								.append(OUT_DELIM_tFileOutputDelimited_8);

						if (row7.UPLOAD_DATE != null) {

							sb_tFileOutputDelimited_8.append(

							FormatterUtils.format_Date(row7.UPLOAD_DATE,
									"dd-MM-yyyy")

							);

						}

						sb_tFileOutputDelimited_8
								.append(OUT_DELIM_tFileOutputDelimited_8);

						if (row7.UPDATE_DATE != null) {

							sb_tFileOutputDelimited_8.append(

							FormatterUtils.format_Date(row7.UPDATE_DATE,
									"dd-MM-yyyy")

							);

						}

						sb_tFileOutputDelimited_8
								.append(OUT_DELIM_tFileOutputDelimited_8);

						if (row7.DOWNLOAD_DATE != null) {

							sb_tFileOutputDelimited_8.append(

							FormatterUtils.format_Date(row7.DOWNLOAD_DATE,
									"dd-MM-yyyy")

							);

						}

						sb_tFileOutputDelimited_8
								.append(OUT_DELIM_tFileOutputDelimited_8);

						if (row7.IMPORT_DATE != null) {

							sb_tFileOutputDelimited_8.append(

							FormatterUtils.format_Date(row7.IMPORT_DATE,
									"dd-MM-yyyy")

							);

						}

						sb_tFileOutputDelimited_8
								.append(OUT_DELIM_tFileOutputDelimited_8);

						if (row7.SOURCESYSTEM_CD != null) {

							sb_tFileOutputDelimited_8.append(

							row7.SOURCESYSTEM_CD

							);

						}

						sb_tFileOutputDelimited_8
								.append(OUT_DELIM_tFileOutputDelimited_8);

						if (row7.UPLOAD_ID != null) {

							sb_tFileOutputDelimited_8.append(

							row7.UPLOAD_ID

							);

						}

						sb_tFileOutputDelimited_8
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_8);

						nb_line_tFileOutputDelimited_8++;

						outtFileOutputDelimited_8
								.write(sb_tFileOutputDelimited_8.toString());

						tos_count_tFileOutputDelimited_8++;

						/**
						 * [tFileOutputDelimited_8 main ] stop
						 */

						/**
						 * [tJDBCInput_5 end ] start
						 */

						currentComponent = "tJDBCInput_5";

					}
					rs_tJDBCInput_5.close();
					stmt_tJDBCInput_5.close();

					globalMap.put("tJDBCInput_5_NB_LINE", nb_line_tJDBCInput_5);

					ok_Hash.put("tJDBCInput_5", true);
					end_Hash.put("tJDBCInput_5", System.currentTimeMillis());

					/**
					 * [tJDBCInput_5 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_8 end ] start
					 */

					currentComponent = "tFileOutputDelimited_8";

				} finally {
					if (outtFileOutputDelimited_8 != null) {
						outtFileOutputDelimited_8.flush();
						outtFileOutputDelimited_8.close();
					}
					globalMap.put("tFileOutputDelimited_8_NB_LINE",
							nb_line_tFileOutputDelimited_8);
					globalMap.put("tFileOutputDelimited_8_FILE_NAME",
							fileName_tFileOutputDelimited_8);
				} // finally

				ok_Hash.put("tFileOutputDelimited_8", true);
				end_Hash.put("tFileOutputDelimited_8",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCInput_5_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String VITAL_STATUS_CD;

		public String getVITAL_STATUS_CD() {
			return this.VITAL_STATUS_CD;
		}

		public String BIRTH_DATE;

		public String getBIRTH_DATE() {
			return this.BIRTH_DATE;
		}

		public String DEATH_DATE;

		public String getDEATH_DATE() {
			return this.DEATH_DATE;
		}

		public String SEX_CD;

		public String getSEX_CD() {
			return this.SEX_CD;
		}

		public String AGE_IN_YEARS_NUM;

		public String getAGE_IN_YEARS_NUM() {
			return this.AGE_IN_YEARS_NUM;
		}

		public String LANGUAGE_CD;

		public String getLANGUAGE_CD() {
			return this.LANGUAGE_CD;
		}

		public String RACE_CD;

		public String getRACE_CD() {
			return this.RACE_CD;
		}

		public String MARITAL_STATUS_CD;

		public String getMARITAL_STATUS_CD() {
			return this.MARITAL_STATUS_CD;
		}

		public String RELIGION_CD;

		public String getRELIGION_CD() {
			return this.RELIGION_CD;
		}

		public String ZIP_CD;

		public String getZIP_CD() {
			return this.ZIP_CD;
		}

		public String STATECITYZIP_PATH;

		public String getSTATECITYZIP_PATH() {
			return this.STATECITYZIP_PATH;
		}

		public String INCOME_CD;

		public String getINCOME_CD() {
			return this.INCOME_CD;
		}

		public String PATIENT_BLOB;

		public String getPATIENT_BLOB() {
			return this.PATIENT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.VITAL_STATUS_CD = readString(dis);

					this.BIRTH_DATE = readString(dis);

					this.DEATH_DATE = readString(dis);

					this.SEX_CD = readString(dis);

					this.AGE_IN_YEARS_NUM = readString(dis);

					this.LANGUAGE_CD = readString(dis);

					this.RACE_CD = readString(dis);

					this.MARITAL_STATUS_CD = readString(dis);

					this.RELIGION_CD = readString(dis);

					this.ZIP_CD = readString(dis);

					this.STATECITYZIP_PATH = readString(dis);

					this.INCOME_CD = readString(dis);

					this.PATIENT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.VITAL_STATUS_CD, dos);

				// String

				writeString(this.BIRTH_DATE, dos);

				// String

				writeString(this.DEATH_DATE, dos);

				// String

				writeString(this.SEX_CD, dos);

				// String

				writeString(this.AGE_IN_YEARS_NUM, dos);

				// String

				writeString(this.LANGUAGE_CD, dos);

				// String

				writeString(this.RACE_CD, dos);

				// String

				writeString(this.MARITAL_STATUS_CD, dos);

				// String

				writeString(this.RELIGION_CD, dos);

				// String

				writeString(this.ZIP_CD, dos);

				// String

				writeString(this.STATECITYZIP_PATH, dos);

				// String

				writeString(this.INCOME_CD, dos);

				// String

				writeString(this.PATIENT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",VITAL_STATUS_CD=" + VITAL_STATUS_CD);
			sb.append(",BIRTH_DATE=" + BIRTH_DATE);
			sb.append(",DEATH_DATE=" + DEATH_DATE);
			sb.append(",SEX_CD=" + SEX_CD);
			sb.append(",AGE_IN_YEARS_NUM=" + AGE_IN_YEARS_NUM);
			sb.append(",LANGUAGE_CD=" + LANGUAGE_CD);
			sb.append(",RACE_CD=" + RACE_CD);
			sb.append(",MARITAL_STATUS_CD=" + MARITAL_STATUS_CD);
			sb.append(",RELIGION_CD=" + RELIGION_CD);
			sb.append(",ZIP_CD=" + ZIP_CD);
			sb.append(",STATECITYZIP_PATH=" + STATECITYZIP_PATH);
			sb.append(",INCOME_CD=" + INCOME_CD);
			sb.append(",PATIENT_BLOB=" + PATIENT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();

				/**
				 * [tFileOutputDelimited_9 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_9", false);
				start_Hash.put("tFileOutputDelimited_9",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_9";

				int tos_count_tFileOutputDelimited_9 = 0;

				String fileName_tFileOutputDelimited_9 = "";
				fileName_tFileOutputDelimited_9 = (new java.io.File(
						((String) globalMap
								.get("tCreateTemporaryFile_6_FILEPATH"))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_9 = null;
				String extension_tFileOutputDelimited_9 = null;
				String directory_tFileOutputDelimited_9 = null;
				if ((fileName_tFileOutputDelimited_9.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_9.lastIndexOf(".") < fileName_tFileOutputDelimited_9
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9;
						extension_tFileOutputDelimited_9 = "";
					} else {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
								.substring(0, fileName_tFileOutputDelimited_9
										.lastIndexOf("."));
						extension_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
								.substring(fileName_tFileOutputDelimited_9
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
							.substring(0, fileName_tFileOutputDelimited_9
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_9.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
								.substring(0, fileName_tFileOutputDelimited_9
										.lastIndexOf("."));
						extension_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
								.substring(fileName_tFileOutputDelimited_9
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9;
						extension_tFileOutputDelimited_9 = "";
					}
					directory_tFileOutputDelimited_9 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_9 = true;
				java.io.File filetFileOutputDelimited_9 = new java.io.File(
						fileName_tFileOutputDelimited_9);
				globalMap.put("tFileOutputDelimited_9_FILE_NAME",
						fileName_tFileOutputDelimited_9);

				int nb_line_tFileOutputDelimited_9 = 0;
				int splitEvery_tFileOutputDelimited_9 = 1000;
				int splitedFileNo_tFileOutputDelimited_9 = 0;
				int currentRow_tFileOutputDelimited_9 = 0;

				final String OUT_DELIM_tFileOutputDelimited_9 = /**
				 * Start field
				 * tFileOutputDelimited_9:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_9:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_9 = /**
				 * Start
				 * field tFileOutputDelimited_9:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_9:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_9 != null
						&& directory_tFileOutputDelimited_9.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_9 = new java.io.File(
							directory_tFileOutputDelimited_9);
					if (!dir_tFileOutputDelimited_9.exists()) {
						dir_tFileOutputDelimited_9.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_9 = null;
				try {
					outtFileOutputDelimited_9 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_9,
											false), "UTF-8"));

					if (filetFileOutputDelimited_9.length() == 0) {

						outtFileOutputDelimited_9.write("PATIENT_NUM");

						outtFileOutputDelimited_9
								.write(OUT_DELIM_tFileOutputDelimited_9);

						outtFileOutputDelimited_9.write("VITAL_STATUS_CD");

						outtFileOutputDelimited_9
								.write(OUT_DELIM_tFileOutputDelimited_9);

						outtFileOutputDelimited_9.write("BIRTH_DATE");

						outtFileOutputDelimited_9
								.write(OUT_DELIM_tFileOutputDelimited_9);

						outtFileOutputDelimited_9.write("DEATH_DATE");

						outtFileOutputDelimited_9
								.write(OUT_DELIM_tFileOutputDelimited_9);

						outtFileOutputDelimited_9.write("SEX_CD");

						outtFileOutputDelimited_9
								.write(OUT_DELIM_tFileOutputDelimited_9);

						outtFileOutputDelimited_9.write("AGE_IN_YEARS_NUM");

						outtFileOutputDelimited_9
								.write(OUT_DELIM_tFileOutputDelimited_9);

						outtFileOutputDelimited_9.write("LANGUAGE_CD");

						outtFileOutputDelimited_9
								.write(OUT_DELIM_tFileOutputDelimited_9);

						outtFileOutputDelimited_9.write("RACE_CD");

						outtFileOutputDelimited_9
								.write(OUT_DELIM_tFileOutputDelimited_9);

						outtFileOutputDelimited_9.write("MARITAL_STATUS_CD");

						outtFileOutputDelimited_9
								.write(OUT_DELIM_tFileOutputDelimited_9);

						outtFileOutputDelimited_9.write("RELIGION_CD");

						outtFileOutputDelimited_9
								.write(OUT_DELIM_tFileOutputDelimited_9);

						outtFileOutputDelimited_9.write("ZIP_CD");

						outtFileOutputDelimited_9
								.write(OUT_DELIM_tFileOutputDelimited_9);

						outtFileOutputDelimited_9.write("STATECITYZIP_PATH");

						outtFileOutputDelimited_9
								.write(OUT_DELIM_tFileOutputDelimited_9);

						outtFileOutputDelimited_9.write("INCOME_CD");

						outtFileOutputDelimited_9
								.write(OUT_DELIM_tFileOutputDelimited_9);

						outtFileOutputDelimited_9.write("PATIENT_BLOB");

						outtFileOutputDelimited_9
								.write(OUT_DELIM_tFileOutputDelimited_9);

						outtFileOutputDelimited_9.write("UPDATE_DATE");

						outtFileOutputDelimited_9
								.write(OUT_DELIM_tFileOutputDelimited_9);

						outtFileOutputDelimited_9.write("DOWNLOAD_DATE");

						outtFileOutputDelimited_9
								.write(OUT_DELIM_tFileOutputDelimited_9);

						outtFileOutputDelimited_9.write("IMPORT_DATE");

						outtFileOutputDelimited_9
								.write(OUT_DELIM_tFileOutputDelimited_9);

						outtFileOutputDelimited_9.write("SOURCESYSTEM_CD");

						outtFileOutputDelimited_9
								.write(OUT_DELIM_tFileOutputDelimited_9);

						outtFileOutputDelimited_9.write("UPLOAD_ID");

						outtFileOutputDelimited_9
								.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_9);
						outtFileOutputDelimited_9.flush();
					}

					/**
					 * [tFileOutputDelimited_9 begin ] stop
					 */

					/**
					 * [tJDBCInput_6 begin ] start
					 */

					ok_Hash.put("tJDBCInput_6", false);
					start_Hash.put("tJDBCInput_6", System.currentTimeMillis());
					currentComponent = "tJDBCInput_6";

					int tos_count_tJDBCInput_6 = 0;

					int nb_line_tJDBCInput_6 = 0;
					java.sql.Connection conn_tJDBCInput_6 = null;
					conn_tJDBCInput_6 = (java.sql.Connection) globalMap
							.get("conn_tJDBCConnection_1");
					if (null == conn_tJDBCInput_6) {
						java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCInput_6 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
								.get(KEY_DB_DATASOURCES);
						conn_tJDBCInput_6 = dataSources_tJDBCInput_6.get("")
								.getConnection();
						// globalMap.put("conn_tJDBCConnection_1",
						// conn_tJDBCInput_6);
					}

					java.sql.Statement stmt_tJDBCInput_6 = conn_tJDBCInput_6
							.createStatement();

					String dbquery_tJDBCInput_6 = "select * from "
							+ context.DB_StagingI2B2_Schema
							+ ".PATIENT_DIMENSION";

					globalMap.put("tJDBCInput_6_QUERY", dbquery_tJDBCInput_6);

					java.sql.ResultSet rs_tJDBCInput_6 = stmt_tJDBCInput_6
							.executeQuery(dbquery_tJDBCInput_6);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_6 = rs_tJDBCInput_6
							.getMetaData();
					int colQtyInRs_tJDBCInput_6 = rsmd_tJDBCInput_6
							.getColumnCount();

					String tmpContent_tJDBCInput_6 = null;
					int column_index_tJDBCInput_6 = 1;
					while (rs_tJDBCInput_6.next()) {
						nb_line_tJDBCInput_6++;

						column_index_tJDBCInput_6 = 1;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.PATIENT_NUM = null;
						} else {

							if (rs_tJDBCInput_6
									.getObject(column_index_tJDBCInput_6) != null) {
								row8.PATIENT_NUM = rs_tJDBCInput_6
										.getBigDecimal(column_index_tJDBCInput_6);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}
						column_index_tJDBCInput_6 = 2;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.VITAL_STATUS_CD = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(column_index_tJDBCInput_6);
							if (tmpContent_tJDBCInput_6 != null) {
								row8.VITAL_STATUS_CD = tmpContent_tJDBCInput_6;
							} else {
								row8.VITAL_STATUS_CD = null;
							}

							if (rs_tJDBCInput_6.wasNull()) {
								row8.VITAL_STATUS_CD = null;
							}
						}
						column_index_tJDBCInput_6 = 3;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.BIRTH_DATE = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(column_index_tJDBCInput_6);
							if (tmpContent_tJDBCInput_6 != null) {
								row8.BIRTH_DATE = tmpContent_tJDBCInput_6;
							} else {
								row8.BIRTH_DATE = null;
							}

							if (rs_tJDBCInput_6.wasNull()) {
								row8.BIRTH_DATE = null;
							}
						}
						column_index_tJDBCInput_6 = 4;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.DEATH_DATE = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(column_index_tJDBCInput_6);
							if (tmpContent_tJDBCInput_6 != null) {
								row8.DEATH_DATE = tmpContent_tJDBCInput_6;
							} else {
								row8.DEATH_DATE = null;
							}

							if (rs_tJDBCInput_6.wasNull()) {
								row8.DEATH_DATE = null;
							}
						}
						column_index_tJDBCInput_6 = 5;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.SEX_CD = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(column_index_tJDBCInput_6);
							if (tmpContent_tJDBCInput_6 != null) {
								row8.SEX_CD = tmpContent_tJDBCInput_6;
							} else {
								row8.SEX_CD = null;
							}

							if (rs_tJDBCInput_6.wasNull()) {
								row8.SEX_CD = null;
							}
						}
						column_index_tJDBCInput_6 = 6;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.AGE_IN_YEARS_NUM = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(column_index_tJDBCInput_6);
							if (tmpContent_tJDBCInput_6 != null) {
								row8.AGE_IN_YEARS_NUM = tmpContent_tJDBCInput_6;
							} else {
								row8.AGE_IN_YEARS_NUM = null;
							}

							if (rs_tJDBCInput_6.wasNull()) {
								row8.AGE_IN_YEARS_NUM = null;
							}
						}
						column_index_tJDBCInput_6 = 7;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.LANGUAGE_CD = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(column_index_tJDBCInput_6);
							if (tmpContent_tJDBCInput_6 != null) {
								row8.LANGUAGE_CD = tmpContent_tJDBCInput_6;
							} else {
								row8.LANGUAGE_CD = null;
							}

							if (rs_tJDBCInput_6.wasNull()) {
								row8.LANGUAGE_CD = null;
							}
						}
						column_index_tJDBCInput_6 = 8;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.RACE_CD = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(column_index_tJDBCInput_6);
							if (tmpContent_tJDBCInput_6 != null) {
								row8.RACE_CD = tmpContent_tJDBCInput_6;
							} else {
								row8.RACE_CD = null;
							}

							if (rs_tJDBCInput_6.wasNull()) {
								row8.RACE_CD = null;
							}
						}
						column_index_tJDBCInput_6 = 9;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.MARITAL_STATUS_CD = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(column_index_tJDBCInput_6);
							if (tmpContent_tJDBCInput_6 != null) {
								row8.MARITAL_STATUS_CD = tmpContent_tJDBCInput_6;
							} else {
								row8.MARITAL_STATUS_CD = null;
							}

							if (rs_tJDBCInput_6.wasNull()) {
								row8.MARITAL_STATUS_CD = null;
							}
						}
						column_index_tJDBCInput_6 = 10;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.RELIGION_CD = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(column_index_tJDBCInput_6);
							if (tmpContent_tJDBCInput_6 != null) {
								row8.RELIGION_CD = tmpContent_tJDBCInput_6;
							} else {
								row8.RELIGION_CD = null;
							}

							if (rs_tJDBCInput_6.wasNull()) {
								row8.RELIGION_CD = null;
							}
						}
						column_index_tJDBCInput_6 = 11;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.ZIP_CD = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(column_index_tJDBCInput_6);
							if (tmpContent_tJDBCInput_6 != null) {
								row8.ZIP_CD = tmpContent_tJDBCInput_6;
							} else {
								row8.ZIP_CD = null;
							}

							if (rs_tJDBCInput_6.wasNull()) {
								row8.ZIP_CD = null;
							}
						}
						column_index_tJDBCInput_6 = 12;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.STATECITYZIP_PATH = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(column_index_tJDBCInput_6);
							if (tmpContent_tJDBCInput_6 != null) {
								row8.STATECITYZIP_PATH = tmpContent_tJDBCInput_6;
							} else {
								row8.STATECITYZIP_PATH = null;
							}

							if (rs_tJDBCInput_6.wasNull()) {
								row8.STATECITYZIP_PATH = null;
							}
						}
						column_index_tJDBCInput_6 = 13;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.INCOME_CD = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(column_index_tJDBCInput_6);
							if (tmpContent_tJDBCInput_6 != null) {
								row8.INCOME_CD = tmpContent_tJDBCInput_6;
							} else {
								row8.INCOME_CD = null;
							}

							if (rs_tJDBCInput_6.wasNull()) {
								row8.INCOME_CD = null;
							}
						}
						column_index_tJDBCInput_6 = 14;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.PATIENT_BLOB = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(column_index_tJDBCInput_6);
							if (tmpContent_tJDBCInput_6 != null) {
								row8.PATIENT_BLOB = tmpContent_tJDBCInput_6;
							} else {
								row8.PATIENT_BLOB = null;
							}

							if (rs_tJDBCInput_6.wasNull()) {
								row8.PATIENT_BLOB = null;
							}
						}
						column_index_tJDBCInput_6 = 15;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.UPDATE_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_6 = null;
							try {
								date_tJDBCInput_6 = rs_tJDBCInput_6
										.getTimestamp(column_index_tJDBCInput_6);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_6 = rs_tJDBCInput_6
										.getDate(column_index_tJDBCInput_6);
							}
							row8.UPDATE_DATE = date_tJDBCInput_6;

							if (rs_tJDBCInput_6.wasNull()) {
								row8.UPDATE_DATE = null;
							}
						}
						column_index_tJDBCInput_6 = 16;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.DOWNLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_6 = null;
							try {
								date_tJDBCInput_6 = rs_tJDBCInput_6
										.getTimestamp(column_index_tJDBCInput_6);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_6 = rs_tJDBCInput_6
										.getDate(column_index_tJDBCInput_6);
							}
							row8.DOWNLOAD_DATE = date_tJDBCInput_6;

							if (rs_tJDBCInput_6.wasNull()) {
								row8.DOWNLOAD_DATE = null;
							}
						}
						column_index_tJDBCInput_6 = 17;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.IMPORT_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_6 = null;
							try {
								date_tJDBCInput_6 = rs_tJDBCInput_6
										.getTimestamp(column_index_tJDBCInput_6);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_6 = rs_tJDBCInput_6
										.getDate(column_index_tJDBCInput_6);
							}
							row8.IMPORT_DATE = date_tJDBCInput_6;

							if (rs_tJDBCInput_6.wasNull()) {
								row8.IMPORT_DATE = null;
							}
						}
						column_index_tJDBCInput_6 = 18;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.SOURCESYSTEM_CD = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(column_index_tJDBCInput_6);
							if (tmpContent_tJDBCInput_6 != null) {
								row8.SOURCESYSTEM_CD = tmpContent_tJDBCInput_6;
							} else {
								row8.SOURCESYSTEM_CD = null;
							}

							if (rs_tJDBCInput_6.wasNull()) {
								row8.SOURCESYSTEM_CD = null;
							}
						}
						column_index_tJDBCInput_6 = 19;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row8.UPLOAD_ID = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(column_index_tJDBCInput_6);
							if (tmpContent_tJDBCInput_6 != null) {
								row8.UPLOAD_ID = tmpContent_tJDBCInput_6;
							} else {
								row8.UPLOAD_ID = null;
							}

							if (rs_tJDBCInput_6.wasNull()) {
								row8.UPLOAD_ID = null;
							}
						}

						/**
						 * [tJDBCInput_6 begin ] stop
						 */
						/**
						 * [tJDBCInput_6 main ] start
						 */

						currentComponent = "tJDBCInput_6";

						tos_count_tJDBCInput_6++;

						/**
						 * [tJDBCInput_6 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_9 main ] start
						 */

						currentComponent = "tFileOutputDelimited_9";

						StringBuilder sb_tFileOutputDelimited_9 = new StringBuilder();

						if (row8.PATIENT_NUM != null) {

							sb_tFileOutputDelimited_9.append(

							row8.PATIENT_NUM.toPlainString()

							);

						}

						sb_tFileOutputDelimited_9
								.append(OUT_DELIM_tFileOutputDelimited_9);

						if (row8.VITAL_STATUS_CD != null) {

							sb_tFileOutputDelimited_9.append(

							row8.VITAL_STATUS_CD

							);

						}

						sb_tFileOutputDelimited_9
								.append(OUT_DELIM_tFileOutputDelimited_9);

						if (row8.BIRTH_DATE != null) {

							sb_tFileOutputDelimited_9.append(

							row8.BIRTH_DATE

							);

						}

						sb_tFileOutputDelimited_9
								.append(OUT_DELIM_tFileOutputDelimited_9);

						if (row8.DEATH_DATE != null) {

							sb_tFileOutputDelimited_9.append(

							row8.DEATH_DATE

							);

						}

						sb_tFileOutputDelimited_9
								.append(OUT_DELIM_tFileOutputDelimited_9);

						if (row8.SEX_CD != null) {

							sb_tFileOutputDelimited_9.append(

							row8.SEX_CD

							);

						}

						sb_tFileOutputDelimited_9
								.append(OUT_DELIM_tFileOutputDelimited_9);

						if (row8.AGE_IN_YEARS_NUM != null) {

							sb_tFileOutputDelimited_9.append(

							row8.AGE_IN_YEARS_NUM

							);

						}

						sb_tFileOutputDelimited_9
								.append(OUT_DELIM_tFileOutputDelimited_9);

						if (row8.LANGUAGE_CD != null) {

							sb_tFileOutputDelimited_9.append(

							row8.LANGUAGE_CD

							);

						}

						sb_tFileOutputDelimited_9
								.append(OUT_DELIM_tFileOutputDelimited_9);

						if (row8.RACE_CD != null) {

							sb_tFileOutputDelimited_9.append(

							row8.RACE_CD

							);

						}

						sb_tFileOutputDelimited_9
								.append(OUT_DELIM_tFileOutputDelimited_9);

						if (row8.MARITAL_STATUS_CD != null) {

							sb_tFileOutputDelimited_9.append(

							row8.MARITAL_STATUS_CD

							);

						}

						sb_tFileOutputDelimited_9
								.append(OUT_DELIM_tFileOutputDelimited_9);

						if (row8.RELIGION_CD != null) {

							sb_tFileOutputDelimited_9.append(

							row8.RELIGION_CD

							);

						}

						sb_tFileOutputDelimited_9
								.append(OUT_DELIM_tFileOutputDelimited_9);

						if (row8.ZIP_CD != null) {

							sb_tFileOutputDelimited_9.append(

							row8.ZIP_CD

							);

						}

						sb_tFileOutputDelimited_9
								.append(OUT_DELIM_tFileOutputDelimited_9);

						if (row8.STATECITYZIP_PATH != null) {

							sb_tFileOutputDelimited_9.append(

							row8.STATECITYZIP_PATH

							);

						}

						sb_tFileOutputDelimited_9
								.append(OUT_DELIM_tFileOutputDelimited_9);

						if (row8.INCOME_CD != null) {

							sb_tFileOutputDelimited_9.append(

							row8.INCOME_CD

							);

						}

						sb_tFileOutputDelimited_9
								.append(OUT_DELIM_tFileOutputDelimited_9);

						if (row8.PATIENT_BLOB != null) {

							sb_tFileOutputDelimited_9.append(

							row8.PATIENT_BLOB

							);

						}

						sb_tFileOutputDelimited_9
								.append(OUT_DELIM_tFileOutputDelimited_9);

						if (row8.UPDATE_DATE != null) {

							sb_tFileOutputDelimited_9.append(

							FormatterUtils.format_Date(row8.UPDATE_DATE,
									"dd-MM-yyyy")

							);

						}

						sb_tFileOutputDelimited_9
								.append(OUT_DELIM_tFileOutputDelimited_9);

						if (row8.DOWNLOAD_DATE != null) {

							sb_tFileOutputDelimited_9.append(

							FormatterUtils.format_Date(row8.DOWNLOAD_DATE,
									"dd-MM-yyyy")

							);

						}

						sb_tFileOutputDelimited_9
								.append(OUT_DELIM_tFileOutputDelimited_9);

						if (row8.IMPORT_DATE != null) {

							sb_tFileOutputDelimited_9.append(

							FormatterUtils.format_Date(row8.IMPORT_DATE,
									"dd-MM-yyyy")

							);

						}

						sb_tFileOutputDelimited_9
								.append(OUT_DELIM_tFileOutputDelimited_9);

						if (row8.SOURCESYSTEM_CD != null) {

							sb_tFileOutputDelimited_9.append(

							row8.SOURCESYSTEM_CD

							);

						}

						sb_tFileOutputDelimited_9
								.append(OUT_DELIM_tFileOutputDelimited_9);

						if (row8.UPLOAD_ID != null) {

							sb_tFileOutputDelimited_9.append(

							row8.UPLOAD_ID

							);

						}

						sb_tFileOutputDelimited_9
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_9);

						nb_line_tFileOutputDelimited_9++;

						outtFileOutputDelimited_9
								.write(sb_tFileOutputDelimited_9.toString());

						tos_count_tFileOutputDelimited_9++;

						/**
						 * [tFileOutputDelimited_9 main ] stop
						 */

						/**
						 * [tJDBCInput_6 end ] start
						 */

						currentComponent = "tJDBCInput_6";

					}
					rs_tJDBCInput_6.close();
					stmt_tJDBCInput_6.close();

					globalMap.put("tJDBCInput_6_NB_LINE", nb_line_tJDBCInput_6);

					ok_Hash.put("tJDBCInput_6", true);
					end_Hash.put("tJDBCInput_6", System.currentTimeMillis());

					/**
					 * [tJDBCInput_6 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_9 end ] start
					 */

					currentComponent = "tFileOutputDelimited_9";

				} finally {
					if (outtFileOutputDelimited_9 != null) {
						outtFileOutputDelimited_9.flush();
						outtFileOutputDelimited_9.close();
					}
					globalMap.put("tFileOutputDelimited_9_NB_LINE",
							nb_line_tFileOutputDelimited_9);
					globalMap.put("tFileOutputDelimited_9_FILE_NAME",
							fileName_tFileOutputDelimited_9);
				} // finally

				ok_Hash.put("tFileOutputDelimited_9", true);
				end_Hash.put("tFileOutputDelimited_9",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_9 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCInput_6_SUBPROCESS_STATE", 1);
	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String ENCOUNTER_IDE;

		public String getENCOUNTER_IDE() {
			return this.ENCOUNTER_IDE;
		}

		public String ENCOUNTER_IDE_SOURCE;

		public String getENCOUNTER_IDE_SOURCE() {
			return this.ENCOUNTER_IDE_SOURCE;
		}

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public String ENCOUNTER_IDE_STATUS;

		public String getENCOUNTER_IDE_STATUS() {
			return this.ENCOUNTER_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_IDE = readString(dis);

					this.ENCOUNTER_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ENCOUNTER_IDE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_IDE=" + ENCOUNTER_IDE);
			sb.append(",ENCOUNTER_IDE_SOURCE=" + ENCOUNTER_IDE_SOURCE);
			sb.append(",ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",ENCOUNTER_IDE_STATUS=" + ENCOUNTER_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row13Struct row13 = new row13Struct();

				/**
				 * [tFileOutputDelimited_14 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_14", false);
				start_Hash.put("tFileOutputDelimited_14",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_14";

				int tos_count_tFileOutputDelimited_14 = 0;

				String fileName_tFileOutputDelimited_14 = "";
				fileName_tFileOutputDelimited_14 = (new java.io.File(
						context.folderMain + context.folderOutput
								+ "/encounter_mapping.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_14 = null;
				String extension_tFileOutputDelimited_14 = null;
				String directory_tFileOutputDelimited_14 = null;
				if ((fileName_tFileOutputDelimited_14.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_14.lastIndexOf(".") < fileName_tFileOutputDelimited_14
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14;
						extension_tFileOutputDelimited_14 = "";
					} else {
						fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14
								.substring(0, fileName_tFileOutputDelimited_14
										.lastIndexOf("."));
						extension_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14
								.substring(fileName_tFileOutputDelimited_14
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14
							.substring(0, fileName_tFileOutputDelimited_14
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_14.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14
								.substring(0, fileName_tFileOutputDelimited_14
										.lastIndexOf("."));
						extension_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14
								.substring(fileName_tFileOutputDelimited_14
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14;
						extension_tFileOutputDelimited_14 = "";
					}
					directory_tFileOutputDelimited_14 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_14 = true;
				java.io.File filetFileOutputDelimited_14 = new java.io.File(
						fileName_tFileOutputDelimited_14);
				globalMap.put("tFileOutputDelimited_14_FILE_NAME",
						fileName_tFileOutputDelimited_14);

				int nb_line_tFileOutputDelimited_14 = 0;
				int splitEvery_tFileOutputDelimited_14 = 1000;
				int splitedFileNo_tFileOutputDelimited_14 = 0;
				int currentRow_tFileOutputDelimited_14 = 0;

				final String OUT_DELIM_tFileOutputDelimited_14 = /**
				 * Start field
				 * tFileOutputDelimited_14:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_14:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_14 = /**
				 * Start
				 * field tFileOutputDelimited_14:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_14:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_14 != null
						&& directory_tFileOutputDelimited_14.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_14 = new java.io.File(
							directory_tFileOutputDelimited_14);
					if (!dir_tFileOutputDelimited_14.exists()) {
						dir_tFileOutputDelimited_14.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_14 = null;
				try {
					outtFileOutputDelimited_14 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_14,
											false), "UTF-8"));

					if (filetFileOutputDelimited_14.length() == 0) {

						outtFileOutputDelimited_14.write("ENCOUNTER_IDE");

						outtFileOutputDelimited_14
								.write(OUT_DELIM_tFileOutputDelimited_14);

						outtFileOutputDelimited_14
								.write("ENCOUNTER_IDE_SOURCE");

						outtFileOutputDelimited_14
								.write(OUT_DELIM_tFileOutputDelimited_14);

						outtFileOutputDelimited_14.write("ENCOUNTER_NUM");

						outtFileOutputDelimited_14
								.write(OUT_DELIM_tFileOutputDelimited_14);

						outtFileOutputDelimited_14.write("PATIENT_IDE");

						outtFileOutputDelimited_14
								.write(OUT_DELIM_tFileOutputDelimited_14);

						outtFileOutputDelimited_14.write("PATIENT_IDE_SOURCE");

						outtFileOutputDelimited_14
								.write(OUT_DELIM_tFileOutputDelimited_14);

						outtFileOutputDelimited_14
								.write("ENCOUNTER_IDE_STATUS");

						outtFileOutputDelimited_14
								.write(OUT_DELIM_tFileOutputDelimited_14);

						outtFileOutputDelimited_14.write("UPLOAD_DATE");

						outtFileOutputDelimited_14
								.write(OUT_DELIM_tFileOutputDelimited_14);

						outtFileOutputDelimited_14.write("UPDATE_DATE");

						outtFileOutputDelimited_14
								.write(OUT_DELIM_tFileOutputDelimited_14);

						outtFileOutputDelimited_14.write("DOWNLOAD_DATE");

						outtFileOutputDelimited_14
								.write(OUT_DELIM_tFileOutputDelimited_14);

						outtFileOutputDelimited_14.write("IMPORT_DATE");

						outtFileOutputDelimited_14
								.write(OUT_DELIM_tFileOutputDelimited_14);

						outtFileOutputDelimited_14.write("SOURCESYSTEM_CD");

						outtFileOutputDelimited_14
								.write(OUT_DELIM_tFileOutputDelimited_14);

						outtFileOutputDelimited_14.write("UPLOAD_ID");

						outtFileOutputDelimited_14
								.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_14);
						outtFileOutputDelimited_14.flush();
					}

					/**
					 * [tFileOutputDelimited_14 begin ] stop
					 */

					/**
					 * [tJDBCInput_7 begin ] start
					 */

					ok_Hash.put("tJDBCInput_7", false);
					start_Hash.put("tJDBCInput_7", System.currentTimeMillis());
					currentComponent = "tJDBCInput_7";

					int tos_count_tJDBCInput_7 = 0;

					int nb_line_tJDBCInput_7 = 0;
					java.sql.Connection conn_tJDBCInput_7 = null;
					conn_tJDBCInput_7 = (java.sql.Connection) globalMap
							.get("conn_tJDBCConnection_1");
					if (null == conn_tJDBCInput_7) {
						java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCInput_7 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
								.get(KEY_DB_DATASOURCES);
						conn_tJDBCInput_7 = dataSources_tJDBCInput_7.get("")
								.getConnection();
						// globalMap.put("conn_tJDBCConnection_1",
						// conn_tJDBCInput_7);
					}

					java.sql.Statement stmt_tJDBCInput_7 = conn_tJDBCInput_7
							.createStatement();

					String dbquery_tJDBCInput_7 = "select * from "
							+ context.DB_StagingI2B2_Schema
							+ ".ENCOUNTER_MAPPING";

					globalMap.put("tJDBCInput_7_QUERY", dbquery_tJDBCInput_7);

					java.sql.ResultSet rs_tJDBCInput_7 = stmt_tJDBCInput_7
							.executeQuery(dbquery_tJDBCInput_7);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_7 = rs_tJDBCInput_7
							.getMetaData();
					int colQtyInRs_tJDBCInput_7 = rsmd_tJDBCInput_7
							.getColumnCount();

					String tmpContent_tJDBCInput_7 = null;
					int column_index_tJDBCInput_7 = 1;
					while (rs_tJDBCInput_7.next()) {
						nb_line_tJDBCInput_7++;

						column_index_tJDBCInput_7 = 1;

						if (colQtyInRs_tJDBCInput_7 < column_index_tJDBCInput_7) {
							row13.ENCOUNTER_IDE = null;
						} else {

							tmpContent_tJDBCInput_7 = rs_tJDBCInput_7
									.getString(column_index_tJDBCInput_7);
							if (tmpContent_tJDBCInput_7 != null) {
								row13.ENCOUNTER_IDE = tmpContent_tJDBCInput_7;
							} else {
								row13.ENCOUNTER_IDE = null;
							}

						}
						column_index_tJDBCInput_7 = 2;

						if (colQtyInRs_tJDBCInput_7 < column_index_tJDBCInput_7) {
							row13.ENCOUNTER_IDE_SOURCE = null;
						} else {

							tmpContent_tJDBCInput_7 = rs_tJDBCInput_7
									.getString(column_index_tJDBCInput_7);
							if (tmpContent_tJDBCInput_7 != null) {
								row13.ENCOUNTER_IDE_SOURCE = tmpContent_tJDBCInput_7;
							} else {
								row13.ENCOUNTER_IDE_SOURCE = null;
							}

						}
						column_index_tJDBCInput_7 = 3;

						if (colQtyInRs_tJDBCInput_7 < column_index_tJDBCInput_7) {
							row13.ENCOUNTER_NUM = null;
						} else {

							if (rs_tJDBCInput_7
									.getObject(column_index_tJDBCInput_7) != null) {
								row13.ENCOUNTER_NUM = rs_tJDBCInput_7
										.getBigDecimal(column_index_tJDBCInput_7);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}
						column_index_tJDBCInput_7 = 4;

						if (colQtyInRs_tJDBCInput_7 < column_index_tJDBCInput_7) {
							row13.PATIENT_IDE = null;
						} else {

							tmpContent_tJDBCInput_7 = rs_tJDBCInput_7
									.getString(column_index_tJDBCInput_7);
							if (tmpContent_tJDBCInput_7 != null) {
								row13.PATIENT_IDE = tmpContent_tJDBCInput_7;
							} else {
								row13.PATIENT_IDE = null;
							}

							if (rs_tJDBCInput_7.wasNull()) {
								row13.PATIENT_IDE = null;
							}
						}
						column_index_tJDBCInput_7 = 5;

						if (colQtyInRs_tJDBCInput_7 < column_index_tJDBCInput_7) {
							row13.PATIENT_IDE_SOURCE = null;
						} else {

							tmpContent_tJDBCInput_7 = rs_tJDBCInput_7
									.getString(column_index_tJDBCInput_7);
							if (tmpContent_tJDBCInput_7 != null) {
								row13.PATIENT_IDE_SOURCE = tmpContent_tJDBCInput_7;
							} else {
								row13.PATIENT_IDE_SOURCE = null;
							}

							if (rs_tJDBCInput_7.wasNull()) {
								row13.PATIENT_IDE_SOURCE = null;
							}
						}
						column_index_tJDBCInput_7 = 6;

						if (colQtyInRs_tJDBCInput_7 < column_index_tJDBCInput_7) {
							row13.ENCOUNTER_IDE_STATUS = null;
						} else {

							tmpContent_tJDBCInput_7 = rs_tJDBCInput_7
									.getString(column_index_tJDBCInput_7);
							if (tmpContent_tJDBCInput_7 != null) {
								row13.ENCOUNTER_IDE_STATUS = tmpContent_tJDBCInput_7;
							} else {
								row13.ENCOUNTER_IDE_STATUS = null;
							}

							if (rs_tJDBCInput_7.wasNull()) {
								row13.ENCOUNTER_IDE_STATUS = null;
							}
						}
						column_index_tJDBCInput_7 = 7;

						if (colQtyInRs_tJDBCInput_7 < column_index_tJDBCInput_7) {
							row13.UPLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_7 = null;
							try {
								date_tJDBCInput_7 = rs_tJDBCInput_7
										.getTimestamp(column_index_tJDBCInput_7);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_7 = rs_tJDBCInput_7
										.getDate(column_index_tJDBCInput_7);
							}
							row13.UPLOAD_DATE = date_tJDBCInput_7;

							if (rs_tJDBCInput_7.wasNull()) {
								row13.UPLOAD_DATE = null;
							}
						}
						column_index_tJDBCInput_7 = 8;

						if (colQtyInRs_tJDBCInput_7 < column_index_tJDBCInput_7) {
							row13.UPDATE_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_7 = null;
							try {
								date_tJDBCInput_7 = rs_tJDBCInput_7
										.getTimestamp(column_index_tJDBCInput_7);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_7 = rs_tJDBCInput_7
										.getDate(column_index_tJDBCInput_7);
							}
							row13.UPDATE_DATE = date_tJDBCInput_7;

							if (rs_tJDBCInput_7.wasNull()) {
								row13.UPDATE_DATE = null;
							}
						}
						column_index_tJDBCInput_7 = 9;

						if (colQtyInRs_tJDBCInput_7 < column_index_tJDBCInput_7) {
							row13.DOWNLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_7 = null;
							try {
								date_tJDBCInput_7 = rs_tJDBCInput_7
										.getTimestamp(column_index_tJDBCInput_7);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_7 = rs_tJDBCInput_7
										.getDate(column_index_tJDBCInput_7);
							}
							row13.DOWNLOAD_DATE = date_tJDBCInput_7;

							if (rs_tJDBCInput_7.wasNull()) {
								row13.DOWNLOAD_DATE = null;
							}
						}
						column_index_tJDBCInput_7 = 10;

						if (colQtyInRs_tJDBCInput_7 < column_index_tJDBCInput_7) {
							row13.IMPORT_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_7 = null;
							try {
								date_tJDBCInput_7 = rs_tJDBCInput_7
										.getTimestamp(column_index_tJDBCInput_7);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_7 = rs_tJDBCInput_7
										.getDate(column_index_tJDBCInput_7);
							}
							row13.IMPORT_DATE = date_tJDBCInput_7;

							if (rs_tJDBCInput_7.wasNull()) {
								row13.IMPORT_DATE = null;
							}
						}
						column_index_tJDBCInput_7 = 11;

						if (colQtyInRs_tJDBCInput_7 < column_index_tJDBCInput_7) {
							row13.SOURCESYSTEM_CD = null;
						} else {

							tmpContent_tJDBCInput_7 = rs_tJDBCInput_7
									.getString(column_index_tJDBCInput_7);
							if (tmpContent_tJDBCInput_7 != null) {
								row13.SOURCESYSTEM_CD = tmpContent_tJDBCInput_7;
							} else {
								row13.SOURCESYSTEM_CD = null;
							}

							if (rs_tJDBCInput_7.wasNull()) {
								row13.SOURCESYSTEM_CD = null;
							}
						}
						column_index_tJDBCInput_7 = 12;

						if (colQtyInRs_tJDBCInput_7 < column_index_tJDBCInput_7) {
							row13.UPLOAD_ID = null;
						} else {

							tmpContent_tJDBCInput_7 = rs_tJDBCInput_7
									.getString(column_index_tJDBCInput_7);
							if (tmpContent_tJDBCInput_7 != null) {
								row13.UPLOAD_ID = tmpContent_tJDBCInput_7;
							} else {
								row13.UPLOAD_ID = null;
							}

							if (rs_tJDBCInput_7.wasNull()) {
								row13.UPLOAD_ID = null;
							}
						}

						/**
						 * [tJDBCInput_7 begin ] stop
						 */
						/**
						 * [tJDBCInput_7 main ] start
						 */

						currentComponent = "tJDBCInput_7";

						tos_count_tJDBCInput_7++;

						/**
						 * [tJDBCInput_7 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_14 main ] start
						 */

						currentComponent = "tFileOutputDelimited_14";

						StringBuilder sb_tFileOutputDelimited_14 = new StringBuilder();

						if (row13.ENCOUNTER_IDE != null) {

							sb_tFileOutputDelimited_14.append(

							row13.ENCOUNTER_IDE

							);

						}

						sb_tFileOutputDelimited_14
								.append(OUT_DELIM_tFileOutputDelimited_14);

						if (row13.ENCOUNTER_IDE_SOURCE != null) {

							sb_tFileOutputDelimited_14.append(

							row13.ENCOUNTER_IDE_SOURCE

							);

						}

						sb_tFileOutputDelimited_14
								.append(OUT_DELIM_tFileOutputDelimited_14);

						if (row13.ENCOUNTER_NUM != null) {

							sb_tFileOutputDelimited_14.append(

							row13.ENCOUNTER_NUM.toPlainString()

							);

						}

						sb_tFileOutputDelimited_14
								.append(OUT_DELIM_tFileOutputDelimited_14);

						if (row13.PATIENT_IDE != null) {

							sb_tFileOutputDelimited_14.append(

							row13.PATIENT_IDE

							);

						}

						sb_tFileOutputDelimited_14
								.append(OUT_DELIM_tFileOutputDelimited_14);

						if (row13.PATIENT_IDE_SOURCE != null) {

							sb_tFileOutputDelimited_14.append(

							row13.PATIENT_IDE_SOURCE

							);

						}

						sb_tFileOutputDelimited_14
								.append(OUT_DELIM_tFileOutputDelimited_14);

						if (row13.ENCOUNTER_IDE_STATUS != null) {

							sb_tFileOutputDelimited_14.append(

							row13.ENCOUNTER_IDE_STATUS

							);

						}

						sb_tFileOutputDelimited_14
								.append(OUT_DELIM_tFileOutputDelimited_14);

						if (row13.UPLOAD_DATE != null) {

							sb_tFileOutputDelimited_14.append(

							FormatterUtils.format_Date(row13.UPLOAD_DATE,
									"dd-MM-yyyy")

							);

						}

						sb_tFileOutputDelimited_14
								.append(OUT_DELIM_tFileOutputDelimited_14);

						if (row13.UPDATE_DATE != null) {

							sb_tFileOutputDelimited_14.append(

							FormatterUtils.format_Date(row13.UPDATE_DATE,
									"dd-MM-yyyy")

							);

						}

						sb_tFileOutputDelimited_14
								.append(OUT_DELIM_tFileOutputDelimited_14);

						if (row13.DOWNLOAD_DATE != null) {

							sb_tFileOutputDelimited_14.append(

							FormatterUtils.format_Date(row13.DOWNLOAD_DATE,
									"dd-MM-yyyy")

							);

						}

						sb_tFileOutputDelimited_14
								.append(OUT_DELIM_tFileOutputDelimited_14);

						if (row13.IMPORT_DATE != null) {

							sb_tFileOutputDelimited_14.append(

							FormatterUtils.format_Date(row13.IMPORT_DATE,
									"dd-MM-yyyy")

							);

						}

						sb_tFileOutputDelimited_14
								.append(OUT_DELIM_tFileOutputDelimited_14);

						if (row13.SOURCESYSTEM_CD != null) {

							sb_tFileOutputDelimited_14.append(

							row13.SOURCESYSTEM_CD

							);

						}

						sb_tFileOutputDelimited_14
								.append(OUT_DELIM_tFileOutputDelimited_14);

						if (row13.UPLOAD_ID != null) {

							sb_tFileOutputDelimited_14.append(

							row13.UPLOAD_ID

							);

						}

						sb_tFileOutputDelimited_14
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_14);

						nb_line_tFileOutputDelimited_14++;

						outtFileOutputDelimited_14
								.write(sb_tFileOutputDelimited_14.toString());

						tos_count_tFileOutputDelimited_14++;

						/**
						 * [tFileOutputDelimited_14 main ] stop
						 */

						/**
						 * [tJDBCInput_7 end ] start
						 */

						currentComponent = "tJDBCInput_7";

					}
					rs_tJDBCInput_7.close();
					stmt_tJDBCInput_7.close();

					globalMap.put("tJDBCInput_7_NB_LINE", nb_line_tJDBCInput_7);

					ok_Hash.put("tJDBCInput_7", true);
					end_Hash.put("tJDBCInput_7", System.currentTimeMillis());

					/**
					 * [tJDBCInput_7 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_14 end ] start
					 */

					currentComponent = "tFileOutputDelimited_14";

				} finally {
					if (outtFileOutputDelimited_14 != null) {
						outtFileOutputDelimited_14.flush();
						outtFileOutputDelimited_14.close();
					}
					globalMap.put("tFileOutputDelimited_14_NB_LINE",
							nb_line_tFileOutputDelimited_14);
					globalMap.put("tFileOutputDelimited_14_FILE_NAME",
							fileName_tFileOutputDelimited_14);
				} // finally

				ok_Hash.put("tFileOutputDelimited_14", true);
				end_Hash.put("tFileOutputDelimited_14",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_14 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCInput_7_SUBPROCESS_STATE", 1);
	}

	public static class row19Struct implements
			routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String C_HLEVEL;

		public String getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String C_SYNONYM_CD;

		public String getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public BigDecimal C_TOTALNUM;

		public BigDecimal getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public String C_COLUMNDATATYPE;

		public String getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public Object C_COMMENT;

		public Object getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.C_HLEVEL = readString(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					this.C_SYNONYM_CD = readString(dis);

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = (BigDecimal) dis.readObject();

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					this.C_COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = (Object) dis.readObject();

					this.C_TOOLTIP = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.C_SYNONYM_CD, dos);

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// BigDecimal

				dos.writeObject(this.C_TOTALNUM);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// String

				writeString(this.C_COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// Object

				dos.writeObject(this.C_COMMENT);

				// String

				writeString(this.C_TOOLTIP, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + C_HLEVEL);
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + C_SYNONYM_CD);
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + String.valueOf(C_TOTALNUM));
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + C_COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + String.valueOf(C_COMMENT));
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row18Struct implements
			routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.CONCEPT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.CONCEPT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class to_conc_dimStruct implements
			routines.system.IPersistableRow<to_conc_dimStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.CONCEPT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.CONCEPT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(to_conc_dimStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.CONCEPT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.CONCEPT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class target_ontStruct implements
			routines.system.IPersistableRow<target_ontStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String C_HLEVEL;

		public String getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String C_SYNONYM_CD;

		public String getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public BigDecimal C_TOTALNUM;

		public BigDecimal getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public String C_COLUMNDATATYPE;

		public String getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public Object C_COMMENT;

		public Object getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.C_HLEVEL = readString(dis);

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					this.C_SYNONYM_CD = readString(dis);

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = (BigDecimal) dis.readObject();

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					this.C_COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = (Object) dis.readObject();

					this.C_TOOLTIP = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.C_HLEVEL, dos);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.C_SYNONYM_CD, dos);

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// BigDecimal

				dos.writeObject(this.C_TOTALNUM);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// String

				writeString(this.C_COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// Object

				dos.writeObject(this.C_COMMENT);

				// String

				writeString(this.C_TOOLTIP, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + C_HLEVEL);
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + C_SYNONYM_CD);
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + String.valueOf(C_TOTALNUM));
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + C_COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + String.valueOf(C_COMMENT));
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(target_ontStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class to_cd_dimStruct implements
			routines.system.IPersistableRow<to_cd_dimStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.CONCEPT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.CONCEPT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(to_cd_dimStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class from_OE_ONTStruct implements
			routines.system.IPersistableRow<from_OE_ONTStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String TARGET_ID;

		public String getTARGET_ID() {
			return this.TARGET_ID;
		}

		public String TREE_LEVEL;

		public String getTREE_LEVEL() {
			return this.TREE_LEVEL;
		}

		public String TREE_PATH;

		public String getTREE_PATH() {
			return this.TREE_PATH;
		}

		public String STAGING_PATH;

		public String getSTAGING_PATH() {
			return this.STAGING_PATH;
		}

		public String STAGING_DIMENSION;

		public String getSTAGING_DIMENSION() {
			return this.STAGING_DIMENSION;
		}

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		public String CHANGED;

		public String getCHANGED() {
			return this.CHANGED;
		}

		public String STARTDATE_STAGING_PATH;

		public String getSTARTDATE_STAGING_PATH() {
			return this.STARTDATE_STAGING_PATH;
		}

		public String ENDDATE_STAGING_PATH;

		public String getENDDATE_STAGING_PATH() {
			return this.ENDDATE_STAGING_PATH;
		}

		public String VISUALATTRIBUTES;

		public String getVISUALATTRIBUTES() {
			return this.VISUALATTRIBUTES;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.TARGET_ID = readString(dis);

					this.TREE_LEVEL = readString(dis);

					this.TREE_PATH = readString(dis);

					this.STAGING_PATH = readString(dis);

					this.STAGING_DIMENSION = readString(dis);

					this.NAME = readString(dis);

					this.CHANGED = readString(dis);

					this.STARTDATE_STAGING_PATH = readString(dis);

					this.ENDDATE_STAGING_PATH = readString(dis);

					this.VISUALATTRIBUTES = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.TARGET_ID, dos);

				// String

				writeString(this.TREE_LEVEL, dos);

				// String

				writeString(this.TREE_PATH, dos);

				// String

				writeString(this.STAGING_PATH, dos);

				// String

				writeString(this.STAGING_DIMENSION, dos);

				// String

				writeString(this.NAME, dos);

				// String

				writeString(this.CHANGED, dos);

				// String

				writeString(this.STARTDATE_STAGING_PATH, dos);

				// String

				writeString(this.ENDDATE_STAGING_PATH, dos);

				// String

				writeString(this.VISUALATTRIBUTES, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TARGET_ID=" + TARGET_ID);
			sb.append(",TREE_LEVEL=" + TREE_LEVEL);
			sb.append(",TREE_PATH=" + TREE_PATH);
			sb.append(",STAGING_PATH=" + STAGING_PATH);
			sb.append(",STAGING_DIMENSION=" + STAGING_DIMENSION);
			sb.append(",NAME=" + NAME);
			sb.append(",CHANGED=" + CHANGED);
			sb.append(",STARTDATE_STAGING_PATH=" + STARTDATE_STAGING_PATH);
			sb.append(",ENDDATE_STAGING_PATH=" + ENDDATE_STAGING_PATH);
			sb.append(",VISUALATTRIBUTES=" + VISUALATTRIBUTES);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(from_OE_ONTStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_1Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String TARGET_ID;

		public String getTARGET_ID() {
			return this.TARGET_ID;
		}

		public String TREE_LEVEL;

		public String getTREE_LEVEL() {
			return this.TREE_LEVEL;
		}

		public String TREE_PATH;

		public String getTREE_PATH() {
			return this.TREE_PATH;
		}

		public String STAGING_PATH;

		public String getSTAGING_PATH() {
			return this.STAGING_PATH;
		}

		public String STAGING_DIMENSION;

		public String getSTAGING_DIMENSION() {
			return this.STAGING_DIMENSION;
		}

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		public String CHANGED;

		public String getCHANGED() {
			return this.CHANGED;
		}

		public String STARTDATE_STAGING_PATH;

		public String getSTARTDATE_STAGING_PATH() {
			return this.STARTDATE_STAGING_PATH;
		}

		public String ENDDATE_STAGING_PATH;

		public String getENDDATE_STAGING_PATH() {
			return this.ENDDATE_STAGING_PATH;
		}

		public String VISUALATTRIBUTES;

		public String getVISUALATTRIBUTES() {
			return this.VISUALATTRIBUTES;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.TARGET_ID = readString(dis);

					this.TREE_LEVEL = readString(dis);

					this.TREE_PATH = readString(dis);

					this.STAGING_PATH = readString(dis);

					this.STAGING_DIMENSION = readString(dis);

					this.NAME = readString(dis);

					this.CHANGED = readString(dis);

					this.STARTDATE_STAGING_PATH = readString(dis);

					this.ENDDATE_STAGING_PATH = readString(dis);

					this.VISUALATTRIBUTES = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.TARGET_ID, dos);

				// String

				writeString(this.TREE_LEVEL, dos);

				// String

				writeString(this.TREE_PATH, dos);

				// String

				writeString(this.STAGING_PATH, dos);

				// String

				writeString(this.STAGING_DIMENSION, dos);

				// String

				writeString(this.NAME, dos);

				// String

				writeString(this.CHANGED, dos);

				// String

				writeString(this.STARTDATE_STAGING_PATH, dos);

				// String

				writeString(this.ENDDATE_STAGING_PATH, dos);

				// String

				writeString(this.VISUALATTRIBUTES, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TARGET_ID=" + TARGET_ID);
			sb.append(",TREE_LEVEL=" + TREE_LEVEL);
			sb.append(",TREE_PATH=" + TREE_PATH);
			sb.append(",STAGING_PATH=" + STAGING_PATH);
			sb.append(",STAGING_DIMENSION=" + STAGING_DIMENSION);
			sb.append(",NAME=" + NAME);
			sb.append(",CHANGED=" + CHANGED);
			sb.append(",STARTDATE_STAGING_PATH=" + STARTDATE_STAGING_PATH);
			sb.append(",ENDDATE_STAGING_PATH=" + ENDDATE_STAGING_PATH);
			sb.append(",VISUALATTRIBUTES=" + VISUALATTRIBUTES);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_2Process(globalMap);

				from_OE_ONTStruct from_OE_ONT = new from_OE_ONTStruct();
				target_ontStruct target_ont = new target_ontStruct();
				row19Struct row19 = new row19Struct();
				to_cd_dimStruct to_cd_dim = new to_cd_dimStruct();
				row4Struct row4 = new row4Struct();
				to_conc_dimStruct to_conc_dim = new to_conc_dimStruct();
				row18Struct row18 = new row18Struct();

				/**
				 * [tFileOutputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_4", false);
				start_Hash.put("tFileOutputDelimited_4",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_4";

				int tos_count_tFileOutputDelimited_4 = 0;

				String fileName_tFileOutputDelimited_4 = "";
				fileName_tFileOutputDelimited_4 = (new java.io.File(
						context.folderMain + context.folderOutput
								+ "/ontology.csv")).getAbsolutePath().replace(
						"\\", "/");
				String fullName_tFileOutputDelimited_4 = null;
				String extension_tFileOutputDelimited_4 = null;
				String directory_tFileOutputDelimited_4 = null;
				if ((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(0, fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
							.substring(0, fileName_tFileOutputDelimited_4
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(0, fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					}
					directory_tFileOutputDelimited_4 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_4 = true;
				java.io.File filetFileOutputDelimited_4 = new java.io.File(
						fileName_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME",
						fileName_tFileOutputDelimited_4);

				int nb_line_tFileOutputDelimited_4 = 0;
				int splitEvery_tFileOutputDelimited_4 = 1000;
				int splitedFileNo_tFileOutputDelimited_4 = 0;
				int currentRow_tFileOutputDelimited_4 = 0;

				final String OUT_DELIM_tFileOutputDelimited_4 = /**
				 * Start field
				 * tFileOutputDelimited_4:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_4:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /**
				 * Start
				 * field tFileOutputDelimited_4:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_4 != null
						&& directory_tFileOutputDelimited_4.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_4 = new java.io.File(
							directory_tFileOutputDelimited_4);
					if (!dir_tFileOutputDelimited_4.exists()) {
						dir_tFileOutputDelimited_4.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_4 = null;
				try {
					outtFileOutputDelimited_4 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_4,
											false), "UTF-8"));

					if (filetFileOutputDelimited_4.length() == 0) {

						outtFileOutputDelimited_4.write("C_HLEVEL");

						outtFileOutputDelimited_4
								.write(OUT_DELIM_tFileOutputDelimited_4);

						outtFileOutputDelimited_4.write("C_FULLNAME");

						outtFileOutputDelimited_4
								.write(OUT_DELIM_tFileOutputDelimited_4);

						outtFileOutputDelimited_4.write("C_NAME");

						outtFileOutputDelimited_4
								.write(OUT_DELIM_tFileOutputDelimited_4);

						outtFileOutputDelimited_4.write("C_SYNONYM_CD");

						outtFileOutputDelimited_4
								.write(OUT_DELIM_tFileOutputDelimited_4);

						outtFileOutputDelimited_4.write("C_VISUALATTRIBUTES");

						outtFileOutputDelimited_4
								.write(OUT_DELIM_tFileOutputDelimited_4);

						outtFileOutputDelimited_4.write("C_TOTALNUM");

						outtFileOutputDelimited_4
								.write(OUT_DELIM_tFileOutputDelimited_4);

						outtFileOutputDelimited_4.write("C_BASECODE");

						outtFileOutputDelimited_4
								.write(OUT_DELIM_tFileOutputDelimited_4);

						outtFileOutputDelimited_4.write("C_METADATAXML");

						outtFileOutputDelimited_4
								.write(OUT_DELIM_tFileOutputDelimited_4);

						outtFileOutputDelimited_4.write("C_FACTTABLECOLUMN");

						outtFileOutputDelimited_4
								.write(OUT_DELIM_tFileOutputDelimited_4);

						outtFileOutputDelimited_4.write("C_TABLENAME");

						outtFileOutputDelimited_4
								.write(OUT_DELIM_tFileOutputDelimited_4);

						outtFileOutputDelimited_4.write("C_COLUMNNAME");

						outtFileOutputDelimited_4
								.write(OUT_DELIM_tFileOutputDelimited_4);

						outtFileOutputDelimited_4.write("C_COLUMNDATATYPE");

						outtFileOutputDelimited_4
								.write(OUT_DELIM_tFileOutputDelimited_4);

						outtFileOutputDelimited_4.write("C_OPERATOR");

						outtFileOutputDelimited_4
								.write(OUT_DELIM_tFileOutputDelimited_4);

						outtFileOutputDelimited_4.write("C_DIMCODE");

						outtFileOutputDelimited_4
								.write(OUT_DELIM_tFileOutputDelimited_4);

						outtFileOutputDelimited_4.write("C_COMMENT");

						outtFileOutputDelimited_4
								.write(OUT_DELIM_tFileOutputDelimited_4);

						outtFileOutputDelimited_4.write("C_TOOLTIP");

						outtFileOutputDelimited_4
								.write(OUT_DELIM_tFileOutputDelimited_4);

						outtFileOutputDelimited_4.write("M_APPLIED_PATH");

						outtFileOutputDelimited_4
								.write(OUT_DELIM_tFileOutputDelimited_4);

						outtFileOutputDelimited_4.write("UPDATE_DATE");

						outtFileOutputDelimited_4
								.write(OUT_DELIM_tFileOutputDelimited_4);

						outtFileOutputDelimited_4.write("DOWNLOAD_DATE");

						outtFileOutputDelimited_4
								.write(OUT_DELIM_tFileOutputDelimited_4);

						outtFileOutputDelimited_4.write("IMPORT_DATE");

						outtFileOutputDelimited_4
								.write(OUT_DELIM_tFileOutputDelimited_4);

						outtFileOutputDelimited_4.write("SOURCESYSTEM_CD");

						outtFileOutputDelimited_4
								.write(OUT_DELIM_tFileOutputDelimited_4);

						outtFileOutputDelimited_4.write("VALUETYPE_CD");

						outtFileOutputDelimited_4
								.write(OUT_DELIM_tFileOutputDelimited_4);

						outtFileOutputDelimited_4.write("M_EXCLUSION_CD");

						outtFileOutputDelimited_4
								.write(OUT_DELIM_tFileOutputDelimited_4);

						outtFileOutputDelimited_4.write("C_PATH");

						outtFileOutputDelimited_4
								.write(OUT_DELIM_tFileOutputDelimited_4);

						outtFileOutputDelimited_4.write("C_SYMBOL");

						outtFileOutputDelimited_4
								.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);
						outtFileOutputDelimited_4.flush();
					}

					/**
					 * [tFileOutputDelimited_4 begin ] stop
					 */

					/**
					 * [tUniqRow_4 begin ] start
					 */

					ok_Hash.put("tUniqRow_4", false);
					start_Hash.put("tUniqRow_4", System.currentTimeMillis());
					currentComponent = "tUniqRow_4";

					int tos_count_tUniqRow_4 = 0;

					class KeyStruct_tUniqRow_4 {

						private static final int DEFAULT_HASHCODE = 1;
						private static final int PRIME = 31;
						private int hashCode = DEFAULT_HASHCODE;
						public boolean hashCodeDirty = true;

						String C_FULLNAME;

						@Override
						public int hashCode() {
							if (this.hashCodeDirty) {
								final int prime = PRIME;
								int result = DEFAULT_HASHCODE;

								result = prime
										* result
										+ ((this.C_FULLNAME == null) ? 0
												: this.C_FULLNAME.hashCode());

								this.hashCode = result;
								this.hashCodeDirty = false;
							}
							return this.hashCode;
						}

						@Override
						public boolean equals(Object obj) {
							if (this == obj)
								return true;
							if (obj == null)
								return false;
							if (getClass() != obj.getClass())
								return false;
							final KeyStruct_tUniqRow_4 other = (KeyStruct_tUniqRow_4) obj;

							if (this.C_FULLNAME == null) {
								if (other.C_FULLNAME != null)
									return false;
							} else if (!this.C_FULLNAME
									.equals(other.C_FULLNAME))
								return false;

							return true;
						}

					}

					int nb_uniques_tUniqRow_4 = 0;
					int nb_duplicates_tUniqRow_4 = 0;
					KeyStruct_tUniqRow_4 finder_tUniqRow_4 = new KeyStruct_tUniqRow_4();
					java.util.Set<KeyStruct_tUniqRow_4> keystUniqRow_4 = new java.util.HashSet<KeyStruct_tUniqRow_4>();

					/**
					 * [tUniqRow_4 begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_5 begin ] start
					 */

					ok_Hash.put("tFileOutputDelimited_5", false);
					start_Hash.put("tFileOutputDelimited_5",
							System.currentTimeMillis());
					currentComponent = "tFileOutputDelimited_5";

					int tos_count_tFileOutputDelimited_5 = 0;

					String fileName_tFileOutputDelimited_5 = "";
					fileName_tFileOutputDelimited_5 = (new java.io.File(
							context.folderMain + context.folderOutput
									+ "/concept_dimension.csv"))
							.getAbsolutePath().replace("\\", "/");
					String fullName_tFileOutputDelimited_5 = null;
					String extension_tFileOutputDelimited_5 = null;
					String directory_tFileOutputDelimited_5 = null;
					if ((fileName_tFileOutputDelimited_5.indexOf("/") != -1)) {
						if (fileName_tFileOutputDelimited_5.lastIndexOf(".") < fileName_tFileOutputDelimited_5
								.lastIndexOf("/")) {
							fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
							extension_tFileOutputDelimited_5 = "";
						} else {
							fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
									.substring(0,
											fileName_tFileOutputDelimited_5
													.lastIndexOf("."));
							extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
									.substring(fileName_tFileOutputDelimited_5
											.lastIndexOf("."));
						}
						directory_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(0, fileName_tFileOutputDelimited_5
										.lastIndexOf("/"));
					} else {
						if (fileName_tFileOutputDelimited_5.lastIndexOf(".") != -1) {
							fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
									.substring(0,
											fileName_tFileOutputDelimited_5
													.lastIndexOf("."));
							extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
									.substring(fileName_tFileOutputDelimited_5
											.lastIndexOf("."));
						} else {
							fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
							extension_tFileOutputDelimited_5 = "";
						}
						directory_tFileOutputDelimited_5 = "";
					}
					boolean isFileGenerated_tFileOutputDelimited_5 = true;
					java.io.File filetFileOutputDelimited_5 = new java.io.File(
							fileName_tFileOutputDelimited_5);
					globalMap.put("tFileOutputDelimited_5_FILE_NAME",
							fileName_tFileOutputDelimited_5);

					int nb_line_tFileOutputDelimited_5 = 0;
					int splitEvery_tFileOutputDelimited_5 = 1000;
					int splitedFileNo_tFileOutputDelimited_5 = 0;
					int currentRow_tFileOutputDelimited_5 = 0;

					final String OUT_DELIM_tFileOutputDelimited_5 = /**
					 * Start
					 * field tFileOutputDelimited_5:FIELDSEPARATOR
					 */
					"\t"/** End field tFileOutputDelimited_5:FIELDSEPARATOR */
					;

					final String OUT_DELIM_ROWSEP_tFileOutputDelimited_5 = /**
					 * 
					 * Start field tFileOutputDelimited_5:ROWSEPARATOR
					 */
					"\n"/** End field tFileOutputDelimited_5:ROWSEPARATOR */
					;

					// create directory only if not exists
					if (directory_tFileOutputDelimited_5 != null
							&& directory_tFileOutputDelimited_5.trim().length() != 0) {
						java.io.File dir_tFileOutputDelimited_5 = new java.io.File(
								directory_tFileOutputDelimited_5);
						if (!dir_tFileOutputDelimited_5.exists()) {
							dir_tFileOutputDelimited_5.mkdirs();
						}
					}

					// routines.system.Row
					java.io.Writer outtFileOutputDelimited_5 = null;
					try {
						outtFileOutputDelimited_5 = new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_5,
												false), "UTF-8"));

						if (filetFileOutputDelimited_5.length() == 0) {

							outtFileOutputDelimited_5.write("CONCEPT_PATH");

							outtFileOutputDelimited_5
									.write(OUT_DELIM_tFileOutputDelimited_5);

							outtFileOutputDelimited_5.write("CONCEPT_CD");

							outtFileOutputDelimited_5
									.write(OUT_DELIM_tFileOutputDelimited_5);

							outtFileOutputDelimited_5.write("NAME_CHAR");

							outtFileOutputDelimited_5
									.write(OUT_DELIM_tFileOutputDelimited_5);

							outtFileOutputDelimited_5.write("CONCEPT_BLOB");

							outtFileOutputDelimited_5
									.write(OUT_DELIM_tFileOutputDelimited_5);

							outtFileOutputDelimited_5.write("UPDATE_DATE");

							outtFileOutputDelimited_5
									.write(OUT_DELIM_tFileOutputDelimited_5);

							outtFileOutputDelimited_5.write("DOWNLOAD_DATE");

							outtFileOutputDelimited_5
									.write(OUT_DELIM_tFileOutputDelimited_5);

							outtFileOutputDelimited_5.write("IMPORT_DATE");

							outtFileOutputDelimited_5
									.write(OUT_DELIM_tFileOutputDelimited_5);

							outtFileOutputDelimited_5.write("SOURCESYSTEM_CD");

							outtFileOutputDelimited_5
									.write(OUT_DELIM_tFileOutputDelimited_5);

							outtFileOutputDelimited_5.write("UPLOAD_ID");

							outtFileOutputDelimited_5
									.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);
							outtFileOutputDelimited_5.flush();
						}

						/**
						 * [tFileOutputDelimited_5 begin ] stop
						 */

						/**
						 * [tUniqRow_3 begin ] start
						 */

						ok_Hash.put("tUniqRow_3", false);
						start_Hash
								.put("tUniqRow_3", System.currentTimeMillis());
						currentComponent = "tUniqRow_3";

						int tos_count_tUniqRow_3 = 0;

						class KeyStruct_tUniqRow_3 {

							private static final int DEFAULT_HASHCODE = 1;
							private static final int PRIME = 31;
							private int hashCode = DEFAULT_HASHCODE;
							public boolean hashCodeDirty = true;

							String CONCEPT_PATH;

							@Override
							public int hashCode() {
								if (this.hashCodeDirty) {
									final int prime = PRIME;
									int result = DEFAULT_HASHCODE;

									result = prime
											* result
											+ ((this.CONCEPT_PATH == null) ? 0
													: this.CONCEPT_PATH
															.hashCode());

									this.hashCode = result;
									this.hashCodeDirty = false;
								}
								return this.hashCode;
							}

							@Override
							public boolean equals(Object obj) {
								if (this == obj)
									return true;
								if (obj == null)
									return false;
								if (getClass() != obj.getClass())
									return false;
								final KeyStruct_tUniqRow_3 other = (KeyStruct_tUniqRow_3) obj;

								if (this.CONCEPT_PATH == null) {
									if (other.CONCEPT_PATH != null)
										return false;
								} else if (!this.CONCEPT_PATH
										.equals(other.CONCEPT_PATH))
									return false;

								return true;
							}

						}

						int nb_uniques_tUniqRow_3 = 0;
						int nb_duplicates_tUniqRow_3 = 0;
						KeyStruct_tUniqRow_3 finder_tUniqRow_3 = new KeyStruct_tUniqRow_3();
						java.util.Set<KeyStruct_tUniqRow_3> keystUniqRow_3 = new java.util.HashSet<KeyStruct_tUniqRow_3>();

						/**
						 * [tUniqRow_3 begin ] stop
						 */

						/**
						 * [tMap_2 begin ] start
						 */

						ok_Hash.put("tMap_2", false);
						start_Hash.put("tMap_2", System.currentTimeMillis());
						currentComponent = "tMap_2";

						int tos_count_tMap_2 = 0;

						// ###############################
						// # Lookup's keys initialization
						// ###############################

						// ###############################
						// # Vars initialization
						class Var__tMap_2__Struct {
						}
						Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
						// ###############################

						// ###############################
						// # Outputs initialization
						to_conc_dimStruct to_conc_dim_tmp = new to_conc_dimStruct();
						// ###############################

						/**
						 * [tMap_2 begin ] stop
						 */

						/**
						 * [tJavaRow_1 begin ] start
						 */

						ok_Hash.put("tJavaRow_1", false);
						start_Hash
								.put("tJavaRow_1", System.currentTimeMillis());
						currentComponent = "tJavaRow_1";

						int tos_count_tJavaRow_1 = 0;

						int nb_line_tJavaRow_1 = 0;

						/**
						 * [tJavaRow_1 begin ] stop
						 */

						/**
						 * [tMap_1 begin ] start
						 */

						ok_Hash.put("tMap_1", false);
						start_Hash.put("tMap_1", System.currentTimeMillis());
						currentComponent = "tMap_1";

						int tos_count_tMap_1 = 0;

						// ###############################
						// # Lookup's keys initialization

						org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<from_src_ontStruct> tHash_Lookup_from_src_ont = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<from_src_ontStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<from_src_ontStruct>) globalMap
								.get("tHash_Lookup_from_src_ont"));

						from_src_ontStruct from_src_ontHashKey = new from_src_ontStruct();
						from_src_ontStruct from_src_ontDefault = new from_src_ontStruct();
						// ###############################

						// ###############################
						// # Vars initialization
						class Var__tMap_1__Struct {
						}
						Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
						// ###############################

						// ###############################
						// # Outputs initialization
						target_ontStruct target_ont_tmp = new target_ontStruct();
						to_cd_dimStruct to_cd_dim_tmp = new to_cd_dimStruct();
						// ###############################

						List<target_ontStruct> target_ont_List = new java.util.ArrayList<target_ontStruct>();
						List<to_cd_dimStruct> to_cd_dim_List = new java.util.ArrayList<to_cd_dimStruct>();

						/**
						 * [tMap_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 begin ] start
						 */

						ok_Hash.put("tFileInputDelimited_1", false);
						start_Hash.put("tFileInputDelimited_1",
								System.currentTimeMillis());
						currentComponent = "tFileInputDelimited_1";

						int tos_count_tFileInputDelimited_1 = 0;

						int nb_line_tFileInputDelimited_1 = 0;
						org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
						try {

							Object filename_tFileInputDelimited_1 = ((String) globalMap
									.get("tCreateTemporaryFile_1_FILEPATH"));
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

								int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
								if (footer_value_tFileInputDelimited_1 > 0
										|| random_value_tFileInputDelimited_1 > 0) {
									throw new java.lang.Exception(
											"When the input source is a stream,footer and random shouldn't be bigger than 0.");
								}

							}
							try {
								fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
										((String) globalMap
												.get("tCreateTemporaryFile_1_FILEPATH")),
										"UTF-8", "\t", "\n", true, 1, 0, -1,
										-1, false);
							} catch (java.lang.Exception e) {

								System.err.println(e.getMessage());

							}

							while (fid_tFileInputDelimited_1 != null
									&& fid_tFileInputDelimited_1.nextRecord()) {

								from_OE_ONT = null;

								boolean whetherReject_tFileInputDelimited_1 = false;
								from_OE_ONT = new from_OE_ONTStruct();
								try {

									int columnIndexWithD_tFileInputDelimited_1 = 0;

									columnIndexWithD_tFileInputDelimited_1 = 0;

									from_OE_ONT.TARGET_ID = fid_tFileInputDelimited_1
											.get(columnIndexWithD_tFileInputDelimited_1);

									columnIndexWithD_tFileInputDelimited_1 = 1;

									from_OE_ONT.TREE_LEVEL = fid_tFileInputDelimited_1
											.get(columnIndexWithD_tFileInputDelimited_1);

									columnIndexWithD_tFileInputDelimited_1 = 2;

									from_OE_ONT.TREE_PATH = fid_tFileInputDelimited_1
											.get(columnIndexWithD_tFileInputDelimited_1);

									columnIndexWithD_tFileInputDelimited_1 = 3;

									from_OE_ONT.STAGING_PATH = fid_tFileInputDelimited_1
											.get(columnIndexWithD_tFileInputDelimited_1);

									columnIndexWithD_tFileInputDelimited_1 = 4;

									from_OE_ONT.STAGING_DIMENSION = fid_tFileInputDelimited_1
											.get(columnIndexWithD_tFileInputDelimited_1);

									columnIndexWithD_tFileInputDelimited_1 = 5;

									from_OE_ONT.NAME = fid_tFileInputDelimited_1
											.get(columnIndexWithD_tFileInputDelimited_1);

									columnIndexWithD_tFileInputDelimited_1 = 6;

									from_OE_ONT.CHANGED = fid_tFileInputDelimited_1
											.get(columnIndexWithD_tFileInputDelimited_1);

									columnIndexWithD_tFileInputDelimited_1 = 7;

									from_OE_ONT.STARTDATE_STAGING_PATH = fid_tFileInputDelimited_1
											.get(columnIndexWithD_tFileInputDelimited_1);

									columnIndexWithD_tFileInputDelimited_1 = 8;

									from_OE_ONT.ENDDATE_STAGING_PATH = fid_tFileInputDelimited_1
											.get(columnIndexWithD_tFileInputDelimited_1);

									columnIndexWithD_tFileInputDelimited_1 = 9;

									from_OE_ONT.VISUALATTRIBUTES = fid_tFileInputDelimited_1
											.get(columnIndexWithD_tFileInputDelimited_1);

								} catch (java.lang.Exception e) {
									whetherReject_tFileInputDelimited_1 = true;

									System.err.println(e.getMessage());
									from_OE_ONT = null;

								}

								/**
								 * [tFileInputDelimited_1 begin ] stop
								 */
								/**
								 * [tFileInputDelimited_1 main ] start
								 */

								currentComponent = "tFileInputDelimited_1";

								tos_count_tFileInputDelimited_1++;

								/**
								 * [tFileInputDelimited_1 main ] stop
								 */
								// Start of branch "from_OE_ONT"
								if (from_OE_ONT != null) {

									/**
									 * [tMap_1 main ] start
									 */

									currentComponent = "tMap_1";

									boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_1 = false;
									boolean mainRowRejected_tMap_1 = false;

									// /////////////////////////////////////////////
									// Starting Lookup Table "from_src_ont"
									// /////////////////////////////////////////////

									boolean forceLoopfrom_src_ont = false;

									from_src_ontStruct from_src_ontObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

										hasCasePrimitiveKeyWithNull_tMap_1 = false;

										from_src_ontHashKey.C_FULLNAME = from_OE_ONT.STAGING_PATH;

										from_src_ontHashKey.hashCodeDirty = true;

										tHash_Lookup_from_src_ont
												.lookup(from_src_ontHashKey);

										if (!tHash_Lookup_from_src_ont
												.hasNext()) { // G_TM_M_090

											rejectedInnerJoin_tMap_1 = true;

											forceLoopfrom_src_ont = true;

										} // G_TM_M_090

									} // G_TM_M_020

									else { // G 20 - G 21
										forceLoopfrom_src_ont = true;
									} // G 21

									from_src_ontStruct from_src_ont = null;

									while ((tHash_Lookup_from_src_ont != null && tHash_Lookup_from_src_ont
											.hasNext())
											|| forceLoopfrom_src_ont) { // G_TM_M_043

										// CALL close loop of lookup
										// 'from_src_ont'

										from_src_ontStruct fromLookup_from_src_ont = null;
										from_src_ont = from_src_ontDefault;

										if (!forceLoopfrom_src_ont) { // G 46

											fromLookup_from_src_ont = tHash_Lookup_from_src_ont
													.next();

											if (fromLookup_from_src_ont != null) {
												from_src_ont = fromLookup_from_src_ont;
											}

										} // G 46

										forceLoopfrom_src_ont = false;

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
											// ###############################
											// # Output tables

											target_ont = null;
											target_ont_List.clear();
											to_cd_dim = null;
											to_cd_dim_List.clear();

											if (!rejectedInnerJoin_tMap_1) {

												// # Output table : 'target_ont'
												target_ont_tmp.C_HLEVEL = from_OE_ONT.TREE_LEVEL;
												target_ont_tmp.C_FULLNAME = from_OE_ONT.TREE_PATH;
												target_ont_tmp.C_NAME = from_OE_ONT.NAME;
												target_ont_tmp.C_SYNONYM_CD = from_src_ont.C_SYNONYM_CD;
												target_ont_tmp.C_VISUALATTRIBUTES = from_OE_ONT.VISUALATTRIBUTES;
												target_ont_tmp.C_TOTALNUM = from_src_ont.C_TOTALNUM;
												target_ont_tmp.C_BASECODE = from_src_ont.C_BASECODE;
												target_ont_tmp.C_METADATAXML = from_src_ont.C_METADATAXML;
												target_ont_tmp.C_FACTTABLECOLUMN = from_src_ont.C_FACTTABLECOLUMN;
												target_ont_tmp.C_TABLENAME = from_src_ont.C_TABLENAME;
												target_ont_tmp.C_COLUMNNAME = from_src_ont.C_COLUMNNAME;
												target_ont_tmp.C_COLUMNDATATYPE = from_src_ont.C_COLUMNDATATYPE;
												target_ont_tmp.C_OPERATOR = from_src_ont.C_OPERATOR;
												target_ont_tmp.C_DIMCODE = from_OE_ONT.TREE_PATH;
												target_ont_tmp.C_COMMENT = from_src_ont.C_COMMENT;
												target_ont_tmp.C_TOOLTIP = from_src_ont.C_TOOLTIP;
												target_ont_tmp.M_APPLIED_PATH = from_src_ont.M_APPLIED_PATH;
												target_ont_tmp.UPDATE_DATE = from_src_ont.UPDATE_DATE;
												target_ont_tmp.DOWNLOAD_DATE = from_src_ont.DOWNLOAD_DATE;
												target_ont_tmp.IMPORT_DATE = from_src_ont.IMPORT_DATE;
												target_ont_tmp.SOURCESYSTEM_CD = from_src_ont.SOURCESYSTEM_CD;
												target_ont_tmp.VALUETYPE_CD = from_src_ont.VALUETYPE_CD;
												target_ont_tmp.M_EXCLUSION_CD = from_src_ont.M_EXCLUSION_CD;
												target_ont_tmp.C_PATH = from_OE_ONT.TREE_PATH;
												target_ont_tmp.C_SYMBOL = from_src_ont.C_SYMBOL;
												target_ont_List
														.add(target_ont_tmp);
												target_ont = target_ont_tmp;

												// # Output table : 'to_cd_dim'
												// # Filter conditions
												if (

												from_OE_ONT.VISUALATTRIBUTES
														.toLowerCase()
														.startsWith("l")

												) {
													to_cd_dim_tmp.CONCEPT_PATH = from_OE_ONT.TREE_PATH;
													to_cd_dim_tmp.CONCEPT_CD = from_OE_ONT.TREE_PATH
															.substring(
																	0,
																	from_OE_ONT.TREE_PATH
																			.length() - 1)
															.replaceAll("\\\\",
																	"|");
													to_cd_dim_tmp.NAME_CHAR = from_OE_ONT.NAME;
													to_cd_dim_tmp.CONCEPT_BLOB = null;
													to_cd_dim_tmp.UPDATE_DATE = from_src_ont.UPDATE_DATE;
													to_cd_dim_tmp.DOWNLOAD_DATE = from_src_ont.DOWNLOAD_DATE;
													to_cd_dim_tmp.IMPORT_DATE = from_src_ont.IMPORT_DATE;
													to_cd_dim_tmp.SOURCESYSTEM_CD = from_src_ont.SOURCESYSTEM_CD;
													to_cd_dim_tmp.UPLOAD_ID = null;
													to_cd_dim_List
															.add(to_cd_dim_tmp);
													to_cd_dim = to_cd_dim_tmp;
												} // closing filter/reject
											} // closing inner join bracket (1)
												// ###### START REJECTS #####

											// # Output reject table : 'out4'
											// # Filter conditions
											if (rejectedInnerJoin_tMap_1) {
												target_ont_tmp = new target_ontStruct();

												target_ont_tmp.C_HLEVEL = from_OE_ONT.TREE_LEVEL;
												target_ont_tmp.C_FULLNAME = from_OE_ONT.TREE_PATH;
												target_ont_tmp.C_NAME = from_OE_ONT.NAME;
												target_ont_tmp.C_SYNONYM_CD = "N";
												target_ont_tmp.C_VISUALATTRIBUTES = from_OE_ONT.VISUALATTRIBUTES;
												target_ont_tmp.C_TOTALNUM = from_src_ont.C_TOTALNUM;
												target_ont_tmp.C_BASECODE = from_src_ont.C_BASECODE;
												target_ont_tmp.C_METADATAXML = from_src_ont.C_METADATAXML;
												target_ont_tmp.C_FACTTABLECOLUMN = "concept_cd";
												target_ont_tmp.C_TABLENAME = "concept_dimension";
												target_ont_tmp.C_COLUMNNAME = "concept_path";
												target_ont_tmp.C_COLUMNDATATYPE = "T";
												target_ont_tmp.C_OPERATOR = "LIKE";
												target_ont_tmp.C_DIMCODE = from_OE_ONT.TREE_PATH;
												target_ont_tmp.C_COMMENT = from_src_ont.C_COMMENT;
												target_ont_tmp.C_TOOLTIP = from_src_ont.C_TOOLTIP;
												target_ont_tmp.M_APPLIED_PATH = "@";
												target_ont_tmp.UPDATE_DATE = TalendDate
														.getCurrentDate();
												target_ont_tmp.DOWNLOAD_DATE = null;
												target_ont_tmp.IMPORT_DATE = null;
												target_ont_tmp.SOURCESYSTEM_CD = null;
												target_ont_tmp.VALUETYPE_CD = null;
												target_ont_tmp.M_EXCLUSION_CD = null;
												target_ont_tmp.C_PATH = from_OE_ONT.TREE_PATH;
												target_ont_tmp.C_SYMBOL = null;
												target_ont_List
														.add(target_ont_tmp);
												target_ont = target_ont_tmp;
											} // closing filter/reject

											// # Output reject table : 'out5'
											// # Filter conditions
											if (rejectedInnerJoin_tMap_1
													&& (

													from_OE_ONT.VISUALATTRIBUTES
															.toLowerCase()
															.startsWith("l")

													)) {
												to_cd_dim_tmp = new to_cd_dimStruct();

												to_cd_dim_tmp.CONCEPT_PATH = from_OE_ONT.TREE_PATH;
												to_cd_dim_tmp.CONCEPT_CD = from_OE_ONT.TREE_PATH
														.substring(
																0,
																from_OE_ONT.TREE_PATH
																		.length() - 1)
														.replaceAll("\\\\", "|");
												to_cd_dim_tmp.NAME_CHAR = from_OE_ONT.NAME;
												to_cd_dim_tmp.CONCEPT_BLOB = null;
												to_cd_dim_tmp.UPDATE_DATE = from_src_ont.UPDATE_DATE;
												to_cd_dim_tmp.DOWNLOAD_DATE = from_src_ont.DOWNLOAD_DATE;
												to_cd_dim_tmp.IMPORT_DATE = from_src_ont.IMPORT_DATE;
												to_cd_dim_tmp.SOURCESYSTEM_CD = from_src_ont.SOURCESYSTEM_CD;
												to_cd_dim_tmp.UPLOAD_ID = null;
												to_cd_dim_List
														.add(to_cd_dim_tmp);
												to_cd_dim = to_cd_dim_tmp;
											} // closing filter/reject
												// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_1 = false;

										tos_count_tMap_1++;

										/**
										 * [tMap_1 main ] stop
										 */
										// Start of branch "target_ont"
										if (target_ont != null) {
											// start of joined table loop
											for (target_ontStruct cur_target_ont : target_ont_List) {
												target_ont = cur_target_ont;

												/**
												 * [tUniqRow_4 main ] start
												 */

												currentComponent = "tUniqRow_4";

												row19 = null;
												if (target_ont.C_FULLNAME == null) {
													finder_tUniqRow_4.C_FULLNAME = null;
												} else {
													finder_tUniqRow_4.C_FULLNAME = target_ont.C_FULLNAME
															.toLowerCase();
												}
												finder_tUniqRow_4.hashCodeDirty = true;
												if (!keystUniqRow_4
														.contains(finder_tUniqRow_4)) {
													KeyStruct_tUniqRow_4 new_tUniqRow_4 = new KeyStruct_tUniqRow_4();

													if (target_ont.C_FULLNAME == null) {
														new_tUniqRow_4.C_FULLNAME = null;
													} else {
														new_tUniqRow_4.C_FULLNAME = target_ont.C_FULLNAME
																.toLowerCase();
													}

													keystUniqRow_4
															.add(new_tUniqRow_4);
													if (row19 == null) {
														row19 = new row19Struct();
													}
													row19.C_HLEVEL = target_ont.C_HLEVEL;
													row19.C_FULLNAME = target_ont.C_FULLNAME;
													row19.C_NAME = target_ont.C_NAME;
													row19.C_SYNONYM_CD = target_ont.C_SYNONYM_CD;
													row19.C_VISUALATTRIBUTES = target_ont.C_VISUALATTRIBUTES;
													row19.C_TOTALNUM = target_ont.C_TOTALNUM;
													row19.C_BASECODE = target_ont.C_BASECODE;
													row19.C_METADATAXML = target_ont.C_METADATAXML;
													row19.C_FACTTABLECOLUMN = target_ont.C_FACTTABLECOLUMN;
													row19.C_TABLENAME = target_ont.C_TABLENAME;
													row19.C_COLUMNNAME = target_ont.C_COLUMNNAME;
													row19.C_COLUMNDATATYPE = target_ont.C_COLUMNDATATYPE;
													row19.C_OPERATOR = target_ont.C_OPERATOR;
													row19.C_DIMCODE = target_ont.C_DIMCODE;
													row19.C_COMMENT = target_ont.C_COMMENT;
													row19.C_TOOLTIP = target_ont.C_TOOLTIP;
													row19.M_APPLIED_PATH = target_ont.M_APPLIED_PATH;
													row19.UPDATE_DATE = target_ont.UPDATE_DATE;
													row19.DOWNLOAD_DATE = target_ont.DOWNLOAD_DATE;
													row19.IMPORT_DATE = target_ont.IMPORT_DATE;
													row19.SOURCESYSTEM_CD = target_ont.SOURCESYSTEM_CD;
													row19.VALUETYPE_CD = target_ont.VALUETYPE_CD;
													row19.M_EXCLUSION_CD = target_ont.M_EXCLUSION_CD;
													row19.C_PATH = target_ont.C_PATH;
													row19.C_SYMBOL = target_ont.C_SYMBOL;
													nb_uniques_tUniqRow_4++;
												} else {
													nb_duplicates_tUniqRow_4++;
												}

												tos_count_tUniqRow_4++;

												/**
												 * [tUniqRow_4 main ] stop
												 */
												// Start of branch "row19"
												if (row19 != null) {

													/**
													 * [tFileOutputDelimited_4
													 * main ] start
													 */

													currentComponent = "tFileOutputDelimited_4";

													StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();

													if (row19.C_HLEVEL != null) {

														sb_tFileOutputDelimited_4
																.append(

																row19.C_HLEVEL

																);

													}

													sb_tFileOutputDelimited_4
															.append(OUT_DELIM_tFileOutputDelimited_4);

													if (row19.C_FULLNAME != null) {

														sb_tFileOutputDelimited_4
																.append(

																row19.C_FULLNAME

																);

													}

													sb_tFileOutputDelimited_4
															.append(OUT_DELIM_tFileOutputDelimited_4);

													if (row19.C_NAME != null) {

														sb_tFileOutputDelimited_4
																.append(

																row19.C_NAME

																);

													}

													sb_tFileOutputDelimited_4
															.append(OUT_DELIM_tFileOutputDelimited_4);

													if (row19.C_SYNONYM_CD != null) {

														sb_tFileOutputDelimited_4
																.append(

																row19.C_SYNONYM_CD

																);

													}

													sb_tFileOutputDelimited_4
															.append(OUT_DELIM_tFileOutputDelimited_4);

													if (row19.C_VISUALATTRIBUTES != null) {

														sb_tFileOutputDelimited_4
																.append(

																row19.C_VISUALATTRIBUTES

																);

													}

													sb_tFileOutputDelimited_4
															.append(OUT_DELIM_tFileOutputDelimited_4);

													if (row19.C_TOTALNUM != null) {

														sb_tFileOutputDelimited_4
																.append(

																row19.C_TOTALNUM
																		.setScale(
																				0,
																				java.math.RoundingMode.HALF_UP)
																		.toPlainString()

																);

													}

													sb_tFileOutputDelimited_4
															.append(OUT_DELIM_tFileOutputDelimited_4);

													if (row19.C_BASECODE != null) {

														sb_tFileOutputDelimited_4
																.append(

																row19.C_BASECODE

																);

													}

													sb_tFileOutputDelimited_4
															.append(OUT_DELIM_tFileOutputDelimited_4);

													if (row19.C_METADATAXML != null) {

														sb_tFileOutputDelimited_4
																.append(

																row19.C_METADATAXML

																);

													}

													sb_tFileOutputDelimited_4
															.append(OUT_DELIM_tFileOutputDelimited_4);

													if (row19.C_FACTTABLECOLUMN != null) {

														sb_tFileOutputDelimited_4
																.append(

																row19.C_FACTTABLECOLUMN

																);

													}

													sb_tFileOutputDelimited_4
															.append(OUT_DELIM_tFileOutputDelimited_4);

													if (row19.C_TABLENAME != null) {

														sb_tFileOutputDelimited_4
																.append(

																row19.C_TABLENAME

																);

													}

													sb_tFileOutputDelimited_4
															.append(OUT_DELIM_tFileOutputDelimited_4);

													if (row19.C_COLUMNNAME != null) {

														sb_tFileOutputDelimited_4
																.append(

																row19.C_COLUMNNAME

																);

													}

													sb_tFileOutputDelimited_4
															.append(OUT_DELIM_tFileOutputDelimited_4);

													if (row19.C_COLUMNDATATYPE != null) {

														sb_tFileOutputDelimited_4
																.append(

																row19.C_COLUMNDATATYPE

																);

													}

													sb_tFileOutputDelimited_4
															.append(OUT_DELIM_tFileOutputDelimited_4);

													if (row19.C_OPERATOR != null) {

														sb_tFileOutputDelimited_4
																.append(

																row19.C_OPERATOR

																);

													}

													sb_tFileOutputDelimited_4
															.append(OUT_DELIM_tFileOutputDelimited_4);

													if (row19.C_DIMCODE != null) {

														sb_tFileOutputDelimited_4
																.append(

																row19.C_DIMCODE

																);

													}

													sb_tFileOutputDelimited_4
															.append(OUT_DELIM_tFileOutputDelimited_4);

													if (row19.C_COMMENT != null) {

														sb_tFileOutputDelimited_4
																.append(

																row19.C_COMMENT

																);

													}

													sb_tFileOutputDelimited_4
															.append(OUT_DELIM_tFileOutputDelimited_4);

													if (row19.C_TOOLTIP != null) {

														sb_tFileOutputDelimited_4
																.append(

																row19.C_TOOLTIP

																);

													}

													sb_tFileOutputDelimited_4
															.append(OUT_DELIM_tFileOutputDelimited_4);

													if (row19.M_APPLIED_PATH != null) {

														sb_tFileOutputDelimited_4
																.append(

																row19.M_APPLIED_PATH

																);

													}

													sb_tFileOutputDelimited_4
															.append(OUT_DELIM_tFileOutputDelimited_4);

													if (row19.UPDATE_DATE != null) {

														sb_tFileOutputDelimited_4
																.append(

																FormatterUtils
																		.format_Date(
																				row19.UPDATE_DATE,
																				"dd-MM-yyyy")

																);

													}

													sb_tFileOutputDelimited_4
															.append(OUT_DELIM_tFileOutputDelimited_4);

													if (row19.DOWNLOAD_DATE != null) {

														sb_tFileOutputDelimited_4
																.append(

																FormatterUtils
																		.format_Date(
																				row19.DOWNLOAD_DATE,
																				"dd-MM-yyyy")

																);

													}

													sb_tFileOutputDelimited_4
															.append(OUT_DELIM_tFileOutputDelimited_4);

													if (row19.IMPORT_DATE != null) {

														sb_tFileOutputDelimited_4
																.append(

																FormatterUtils
																		.format_Date(
																				row19.IMPORT_DATE,
																				"dd-MM-yyyy")

																);

													}

													sb_tFileOutputDelimited_4
															.append(OUT_DELIM_tFileOutputDelimited_4);

													if (row19.SOURCESYSTEM_CD != null) {

														sb_tFileOutputDelimited_4
																.append(

																row19.SOURCESYSTEM_CD

																);

													}

													sb_tFileOutputDelimited_4
															.append(OUT_DELIM_tFileOutputDelimited_4);

													if (row19.VALUETYPE_CD != null) {

														sb_tFileOutputDelimited_4
																.append(

																row19.VALUETYPE_CD

																);

													}

													sb_tFileOutputDelimited_4
															.append(OUT_DELIM_tFileOutputDelimited_4);

													if (row19.M_EXCLUSION_CD != null) {

														sb_tFileOutputDelimited_4
																.append(

																row19.M_EXCLUSION_CD

																);

													}

													sb_tFileOutputDelimited_4
															.append(OUT_DELIM_tFileOutputDelimited_4);

													if (row19.C_PATH != null) {

														sb_tFileOutputDelimited_4
																.append(

																row19.C_PATH

																);

													}

													sb_tFileOutputDelimited_4
															.append(OUT_DELIM_tFileOutputDelimited_4);

													if (row19.C_SYMBOL != null) {

														sb_tFileOutputDelimited_4
																.append(

																row19.C_SYMBOL

																);

													}

													sb_tFileOutputDelimited_4
															.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);

													nb_line_tFileOutputDelimited_4++;

													outtFileOutputDelimited_4
															.write(sb_tFileOutputDelimited_4
																	.toString());

													tos_count_tFileOutputDelimited_4++;

													/**
													 * [tFileOutputDelimited_4
													 * main ] stop
													 */

												} // End of branch "row19"

											} // end of joined table loop
											target_ont_List.clear();

										} // End of branch "target_ont"

										// Start of branch "to_cd_dim"
										if (to_cd_dim != null) {
											// start of joined table loop
											for (to_cd_dimStruct cur_to_cd_dim : to_cd_dim_List) {
												to_cd_dim = cur_to_cd_dim;

												/**
												 * [tJavaRow_1 main ] start
												 */

												currentComponent = "tJavaRow_1";

												// Code generated according to
												// input schema and output
												// schema
												row4.CONCEPT_PATH = to_cd_dim.CONCEPT_PATH;

												if (to_cd_dim.CONCEPT_CD
														.lastIndexOf("|") > 0) {
													StringBuilder b = new StringBuilder(
															to_cd_dim.CONCEPT_CD);
													b.replace(
															to_cd_dim.CONCEPT_CD
																	.lastIndexOf("|"),
															to_cd_dim.CONCEPT_CD
																	.lastIndexOf("|") + 1,
															":");
													row4.CONCEPT_CD = b
															.toString();
												} else {
													row4.CONCEPT_CD = to_cd_dim.CONCEPT_CD;

												}

												row4.NAME_CHAR = to_cd_dim.NAME_CHAR;
												row4.CONCEPT_BLOB = to_cd_dim.CONCEPT_BLOB;
												row4.UPDATE_DATE = to_cd_dim.UPDATE_DATE;
												row4.DOWNLOAD_DATE = to_cd_dim.DOWNLOAD_DATE;
												row4.IMPORT_DATE = to_cd_dim.IMPORT_DATE;
												row4.SOURCESYSTEM_CD = to_cd_dim.SOURCESYSTEM_CD;
												row4.UPLOAD_ID = to_cd_dim.UPLOAD_ID;

												nb_line_tJavaRow_1++;

												tos_count_tJavaRow_1++;

												/**
												 * [tJavaRow_1 main ] stop
												 */

												/**
												 * [tMap_2 main ] start
												 */

												currentComponent = "tMap_2";

												boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

												// ###############################
												// # Input tables (lookups)
												boolean rejectedInnerJoin_tMap_2 = false;
												boolean mainRowRejected_tMap_2 = false;

												// ###############################
												{ // start of Var scope

													// ###############################
													// # Vars tables

													Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
													// ###############################
													// # Output tables

													to_conc_dim = null;

													// # Output table :
													// 'to_conc_dim'
													to_conc_dim_tmp.CONCEPT_PATH = row4.CONCEPT_PATH;
													to_conc_dim_tmp.CONCEPT_CD = row4.CONCEPT_CD;
													to_conc_dim_tmp.NAME_CHAR = row4.NAME_CHAR;
													to_conc_dim_tmp.CONCEPT_BLOB = row4.CONCEPT_BLOB;
													to_conc_dim_tmp.UPDATE_DATE = row4.UPDATE_DATE;
													to_conc_dim_tmp.DOWNLOAD_DATE = row4.DOWNLOAD_DATE;
													to_conc_dim_tmp.IMPORT_DATE = row4.IMPORT_DATE;
													to_conc_dim_tmp.SOURCESYSTEM_CD = row4.SOURCESYSTEM_CD;
													to_conc_dim_tmp.UPLOAD_ID = row4.UPLOAD_ID;
													to_conc_dim = to_conc_dim_tmp;
													// ###############################

												} // end of Var scope

												rejectedInnerJoin_tMap_2 = false;

												tos_count_tMap_2++;

												/**
												 * [tMap_2 main ] stop
												 */
												// Start of branch "to_conc_dim"
												if (to_conc_dim != null) {

													/**
													 * [tUniqRow_3 main ] start
													 */

													currentComponent = "tUniqRow_3";

													row18 = null;
													if (to_conc_dim.CONCEPT_PATH == null) {
														finder_tUniqRow_3.CONCEPT_PATH = null;
													} else {
														finder_tUniqRow_3.CONCEPT_PATH = to_conc_dim.CONCEPT_PATH
																.toLowerCase();
													}
													finder_tUniqRow_3.hashCodeDirty = true;
													if (!keystUniqRow_3
															.contains(finder_tUniqRow_3)) {
														KeyStruct_tUniqRow_3 new_tUniqRow_3 = new KeyStruct_tUniqRow_3();

														if (to_conc_dim.CONCEPT_PATH == null) {
															new_tUniqRow_3.CONCEPT_PATH = null;
														} else {
															new_tUniqRow_3.CONCEPT_PATH = to_conc_dim.CONCEPT_PATH
																	.toLowerCase();
														}

														keystUniqRow_3
																.add(new_tUniqRow_3);
														if (row18 == null) {
															row18 = new row18Struct();
														}
														row18.CONCEPT_PATH = to_conc_dim.CONCEPT_PATH;
														row18.CONCEPT_CD = to_conc_dim.CONCEPT_CD;
														row18.NAME_CHAR = to_conc_dim.NAME_CHAR;
														row18.CONCEPT_BLOB = to_conc_dim.CONCEPT_BLOB;
														row18.UPDATE_DATE = to_conc_dim.UPDATE_DATE;
														row18.DOWNLOAD_DATE = to_conc_dim.DOWNLOAD_DATE;
														row18.IMPORT_DATE = to_conc_dim.IMPORT_DATE;
														row18.SOURCESYSTEM_CD = to_conc_dim.SOURCESYSTEM_CD;
														row18.UPLOAD_ID = to_conc_dim.UPLOAD_ID;
														nb_uniques_tUniqRow_3++;
													} else {
														nb_duplicates_tUniqRow_3++;
													}

													tos_count_tUniqRow_3++;

													/**
													 * [tUniqRow_3 main ] stop
													 */
													// Start of branch "row18"
													if (row18 != null) {

														/**
														 * [
														 * tFileOutputDelimited_5
														 * main ] start
														 */

														currentComponent = "tFileOutputDelimited_5";

														StringBuilder sb_tFileOutputDelimited_5 = new StringBuilder();

														if (row18.CONCEPT_PATH != null) {

															sb_tFileOutputDelimited_5
																	.append(

																	row18.CONCEPT_PATH

																	);

														}

														sb_tFileOutputDelimited_5
																.append(OUT_DELIM_tFileOutputDelimited_5);

														if (row18.CONCEPT_CD != null) {

															sb_tFileOutputDelimited_5
																	.append(

																	row18.CONCEPT_CD

																	);

														}

														sb_tFileOutputDelimited_5
																.append(OUT_DELIM_tFileOutputDelimited_5);

														if (row18.NAME_CHAR != null) {

															sb_tFileOutputDelimited_5
																	.append(

																	row18.NAME_CHAR

																	);

														}

														sb_tFileOutputDelimited_5
																.append(OUT_DELIM_tFileOutputDelimited_5);

														if (row18.CONCEPT_BLOB != null) {

															sb_tFileOutputDelimited_5
																	.append(

																	row18.CONCEPT_BLOB

																	);

														}

														sb_tFileOutputDelimited_5
																.append(OUT_DELIM_tFileOutputDelimited_5);

														if (row18.UPDATE_DATE != null) {

															sb_tFileOutputDelimited_5
																	.append(

																	FormatterUtils
																			.format_Date(
																					row18.UPDATE_DATE,
																					"yyyy-MM-dd")

																	);

														}

														sb_tFileOutputDelimited_5
																.append(OUT_DELIM_tFileOutputDelimited_5);

														if (row18.DOWNLOAD_DATE != null) {

															sb_tFileOutputDelimited_5
																	.append(

																	FormatterUtils
																			.format_Date(
																					row18.DOWNLOAD_DATE,
																					"yyyy-MM-dd")

																	);

														}

														sb_tFileOutputDelimited_5
																.append(OUT_DELIM_tFileOutputDelimited_5);

														if (row18.IMPORT_DATE != null) {

															sb_tFileOutputDelimited_5
																	.append(

																	FormatterUtils
																			.format_Date(
																					row18.IMPORT_DATE,
																					"yyyy-MM-dd")

																	);

														}

														sb_tFileOutputDelimited_5
																.append(OUT_DELIM_tFileOutputDelimited_5);

														if (row18.SOURCESYSTEM_CD != null) {

															sb_tFileOutputDelimited_5
																	.append(

																	row18.SOURCESYSTEM_CD

																	);

														}

														sb_tFileOutputDelimited_5
																.append(OUT_DELIM_tFileOutputDelimited_5);

														if (row18.UPLOAD_ID != null) {

															sb_tFileOutputDelimited_5
																	.append(

																	row18.UPLOAD_ID

																	);

														}

														sb_tFileOutputDelimited_5
																.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);

														nb_line_tFileOutputDelimited_5++;

														outtFileOutputDelimited_5
																.write(sb_tFileOutputDelimited_5
																		.toString());

														tos_count_tFileOutputDelimited_5++;

														/**
														 * [
														 * tFileOutputDelimited_5
														 * main ] stop
														 */

													} // End of branch "row18"

												} // End of branch "to_conc_dim"

											} // end of joined table loop
											to_cd_dim_List.clear();

										} // End of branch "to_cd_dim"

									} // close loop of lookup 'from_src_ont' //
										// G_TM_M_043

								} // End of branch "from_OE_ONT"

								/**
								 * [tFileInputDelimited_1 end ] start
								 */

								currentComponent = "tFileInputDelimited_1";

							}
						} finally {
							if (!((Object) (((String) globalMap
									.get("tCreateTemporaryFile_1_FILEPATH"))) instanceof java.io.InputStream)) {
								if (fid_tFileInputDelimited_1 != null) {
									fid_tFileInputDelimited_1.close();
								}
							}
							if (fid_tFileInputDelimited_1 != null) {
								globalMap.put("tFileInputDelimited_1_NB_LINE",
										fid_tFileInputDelimited_1
												.getRowNumber());
							}
						}

						ok_Hash.put("tFileInputDelimited_1", true);
						end_Hash.put("tFileInputDelimited_1",
								System.currentTimeMillis());

						/**
						 * [tFileInputDelimited_1 end ] stop
						 */

						/**
						 * [tMap_1 end ] start
						 */

						currentComponent = "tMap_1";

						// ###############################
						// # Lookup hashes releasing
						if (tHash_Lookup_from_src_ont != null) {
							tHash_Lookup_from_src_ont.endGet();
						}
						globalMap.remove("tHash_Lookup_from_src_ont");

						// ###############################

						ok_Hash.put("tMap_1", true);
						end_Hash.put("tMap_1", System.currentTimeMillis());

						/**
						 * [tMap_1 end ] stop
						 */

						/**
						 * [tJavaRow_1 end ] start
						 */

						currentComponent = "tJavaRow_1";

						globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

						ok_Hash.put("tJavaRow_1", true);
						end_Hash.put("tJavaRow_1", System.currentTimeMillis());

						/**
						 * [tJavaRow_1 end ] stop
						 */

						/**
						 * [tMap_2 end ] start
						 */

						currentComponent = "tMap_2";

						// ###############################
						// # Lookup hashes releasing
						// ###############################

						ok_Hash.put("tMap_2", true);
						end_Hash.put("tMap_2", System.currentTimeMillis());

						/**
						 * [tMap_2 end ] stop
						 */

						/**
						 * [tUniqRow_3 end ] start
						 */

						currentComponent = "tUniqRow_3";

						globalMap.put("tUniqRow_3_NB_UNIQUES",
								nb_uniques_tUniqRow_3);
						globalMap.put("tUniqRow_3_NB_DUPLICATES",
								nb_duplicates_tUniqRow_3);

						ok_Hash.put("tUniqRow_3", true);
						end_Hash.put("tUniqRow_3", System.currentTimeMillis());

						/**
						 * [tUniqRow_3 end ] stop
						 */

						/**
						 * [tFileOutputDelimited_5 end ] start
						 */

						currentComponent = "tFileOutputDelimited_5";

					} finally {
						if (outtFileOutputDelimited_5 != null) {
							outtFileOutputDelimited_5.flush();
							outtFileOutputDelimited_5.close();
						}
						globalMap.put("tFileOutputDelimited_5_NB_LINE",
								nb_line_tFileOutputDelimited_5);
						globalMap.put("tFileOutputDelimited_5_FILE_NAME",
								fileName_tFileOutputDelimited_5);
					} // finally

					ok_Hash.put("tFileOutputDelimited_5", true);
					end_Hash.put("tFileOutputDelimited_5",
							System.currentTimeMillis());

					/**
					 * [tFileOutputDelimited_5 end ] stop
					 */

					/**
					 * [tUniqRow_4 end ] start
					 */

					currentComponent = "tUniqRow_4";

					globalMap.put("tUniqRow_4_NB_UNIQUES",
							nb_uniques_tUniqRow_4);
					globalMap.put("tUniqRow_4_NB_DUPLICATES",
							nb_duplicates_tUniqRow_4);

					ok_Hash.put("tUniqRow_4", true);
					end_Hash.put("tUniqRow_4", System.currentTimeMillis());

					/**
					 * [tUniqRow_4 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_4 end ] start
					 */

					currentComponent = "tFileOutputDelimited_4";

				} finally {
					if (outtFileOutputDelimited_4 != null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}
					globalMap.put("tFileOutputDelimited_4_NB_LINE",
							nb_line_tFileOutputDelimited_4);
					globalMap.put("tFileOutputDelimited_4_FILE_NAME",
							fileName_tFileOutputDelimited_4);
				} // finally

				ok_Hash.put("tFileOutputDelimited_4", true);
				end_Hash.put("tFileOutputDelimited_4",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_4 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputDelimited_5Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		} finally {
			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_from_src_ont");

		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.PATIENT_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String VITAL_STATUS_CD;

		public String getVITAL_STATUS_CD() {
			return this.VITAL_STATUS_CD;
		}

		public String BIRTH_DATE;

		public String getBIRTH_DATE() {
			return this.BIRTH_DATE;
		}

		public String DEATH_DATE;

		public String getDEATH_DATE() {
			return this.DEATH_DATE;
		}

		public String SEX_CD;

		public String getSEX_CD() {
			return this.SEX_CD;
		}

		public String AGE_IN_YEARS_NUM;

		public String getAGE_IN_YEARS_NUM() {
			return this.AGE_IN_YEARS_NUM;
		}

		public String LANGUAGE_CD;

		public String getLANGUAGE_CD() {
			return this.LANGUAGE_CD;
		}

		public String RACE_CD;

		public String getRACE_CD() {
			return this.RACE_CD;
		}

		public String MARITAL_STATUS_CD;

		public String getMARITAL_STATUS_CD() {
			return this.MARITAL_STATUS_CD;
		}

		public String RELIGION_CD;

		public String getRELIGION_CD() {
			return this.RELIGION_CD;
		}

		public String ZIP_CD;

		public String getZIP_CD() {
			return this.ZIP_CD;
		}

		public String STATECITYZIP_PATH;

		public String getSTATECITYZIP_PATH() {
			return this.STATECITYZIP_PATH;
		}

		public String INCOME_CD;

		public String getINCOME_CD() {
			return this.INCOME_CD;
		}

		public String PATIENT_BLOB;

		public String getPATIENT_BLOB() {
			return this.PATIENT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.VITAL_STATUS_CD = readString(dis);

					this.BIRTH_DATE = readString(dis);

					this.DEATH_DATE = readString(dis);

					this.SEX_CD = readString(dis);

					this.AGE_IN_YEARS_NUM = readString(dis);

					this.LANGUAGE_CD = readString(dis);

					this.RACE_CD = readString(dis);

					this.MARITAL_STATUS_CD = readString(dis);

					this.RELIGION_CD = readString(dis);

					this.ZIP_CD = readString(dis);

					this.STATECITYZIP_PATH = readString(dis);

					this.INCOME_CD = readString(dis);

					this.PATIENT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.VITAL_STATUS_CD, dos);

				// String

				writeString(this.BIRTH_DATE, dos);

				// String

				writeString(this.DEATH_DATE, dos);

				// String

				writeString(this.SEX_CD, dos);

				// String

				writeString(this.AGE_IN_YEARS_NUM, dos);

				// String

				writeString(this.LANGUAGE_CD, dos);

				// String

				writeString(this.RACE_CD, dos);

				// String

				writeString(this.MARITAL_STATUS_CD, dos);

				// String

				writeString(this.RELIGION_CD, dos);

				// String

				writeString(this.ZIP_CD, dos);

				// String

				writeString(this.STATECITYZIP_PATH, dos);

				// String

				writeString(this.INCOME_CD, dos);

				// String

				writeString(this.PATIENT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",VITAL_STATUS_CD=" + VITAL_STATUS_CD);
			sb.append(",BIRTH_DATE=" + BIRTH_DATE);
			sb.append(",DEATH_DATE=" + DEATH_DATE);
			sb.append(",SEX_CD=" + SEX_CD);
			sb.append(",AGE_IN_YEARS_NUM=" + AGE_IN_YEARS_NUM);
			sb.append(",LANGUAGE_CD=" + LANGUAGE_CD);
			sb.append(",RACE_CD=" + RACE_CD);
			sb.append(",MARITAL_STATUS_CD=" + MARITAL_STATUS_CD);
			sb.append(",RELIGION_CD=" + RELIGION_CD);
			sb.append(",ZIP_CD=" + ZIP_CD);
			sb.append(",STATECITYZIP_PATH=" + STATECITYZIP_PATH);
			sb.append(",INCOME_CD=" + INCOME_CD);
			sb.append(",PATIENT_BLOB=" + PATIENT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class asdStruct implements
			routines.system.IPersistableRow<asdStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String VITAL_STATUS_CD;

		public String getVITAL_STATUS_CD() {
			return this.VITAL_STATUS_CD;
		}

		public String BIRTH_DATE;

		public String getBIRTH_DATE() {
			return this.BIRTH_DATE;
		}

		public String DEATH_DATE;

		public String getDEATH_DATE() {
			return this.DEATH_DATE;
		}

		public String SEX_CD;

		public String getSEX_CD() {
			return this.SEX_CD;
		}

		public String AGE_IN_YEARS_NUM;

		public String getAGE_IN_YEARS_NUM() {
			return this.AGE_IN_YEARS_NUM;
		}

		public String LANGUAGE_CD;

		public String getLANGUAGE_CD() {
			return this.LANGUAGE_CD;
		}

		public String RACE_CD;

		public String getRACE_CD() {
			return this.RACE_CD;
		}

		public String MARITAL_STATUS_CD;

		public String getMARITAL_STATUS_CD() {
			return this.MARITAL_STATUS_CD;
		}

		public String RELIGION_CD;

		public String getRELIGION_CD() {
			return this.RELIGION_CD;
		}

		public String ZIP_CD;

		public String getZIP_CD() {
			return this.ZIP_CD;
		}

		public String STATECITYZIP_PATH;

		public String getSTATECITYZIP_PATH() {
			return this.STATECITYZIP_PATH;
		}

		public String INCOME_CD;

		public String getINCOME_CD() {
			return this.INCOME_CD;
		}

		public String PATIENT_BLOB;

		public String getPATIENT_BLOB() {
			return this.PATIENT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.VITAL_STATUS_CD = readString(dis);

					this.BIRTH_DATE = readString(dis);

					this.DEATH_DATE = readString(dis);

					this.SEX_CD = readString(dis);

					this.AGE_IN_YEARS_NUM = readString(dis);

					this.LANGUAGE_CD = readString(dis);

					this.RACE_CD = readString(dis);

					this.MARITAL_STATUS_CD = readString(dis);

					this.RELIGION_CD = readString(dis);

					this.ZIP_CD = readString(dis);

					this.STATECITYZIP_PATH = readString(dis);

					this.INCOME_CD = readString(dis);

					this.PATIENT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.VITAL_STATUS_CD, dos);

				// String

				writeString(this.BIRTH_DATE, dos);

				// String

				writeString(this.DEATH_DATE, dos);

				// String

				writeString(this.SEX_CD, dos);

				// String

				writeString(this.AGE_IN_YEARS_NUM, dos);

				// String

				writeString(this.LANGUAGE_CD, dos);

				// String

				writeString(this.RACE_CD, dos);

				// String

				writeString(this.MARITAL_STATUS_CD, dos);

				// String

				writeString(this.RELIGION_CD, dos);

				// String

				writeString(this.ZIP_CD, dos);

				// String

				writeString(this.STATECITYZIP_PATH, dos);

				// String

				writeString(this.INCOME_CD, dos);

				// String

				writeString(this.PATIENT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",VITAL_STATUS_CD=" + VITAL_STATUS_CD);
			sb.append(",BIRTH_DATE=" + BIRTH_DATE);
			sb.append(",DEATH_DATE=" + DEATH_DATE);
			sb.append(",SEX_CD=" + SEX_CD);
			sb.append(",AGE_IN_YEARS_NUM=" + AGE_IN_YEARS_NUM);
			sb.append(",LANGUAGE_CD=" + LANGUAGE_CD);
			sb.append(",RACE_CD=" + RACE_CD);
			sb.append(",MARITAL_STATUS_CD=" + MARITAL_STATUS_CD);
			sb.append(",RELIGION_CD=" + RELIGION_CD);
			sb.append(",ZIP_CD=" + ZIP_CD);
			sb.append(",STATECITYZIP_PATH=" + STATECITYZIP_PATH);
			sb.append(",INCOME_CD=" + INCOME_CD);
			sb.append(",PATIENT_BLOB=" + PATIENT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(asdStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class to_pat_mappingStruct implements
			routines.system.IPersistableRow<to_pat_mappingStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.PATIENT_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(to_pat_mappingStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class asddStruct implements
			routines.system.IPersistableRow<asddStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.PATIENT_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(asddStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class to_trgt_obsStruct implements
			routines.system.IPersistableRow<to_trgt_obsStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readDate(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readDate(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(to_trgt_obsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class to_patient_mappingStruct implements
			routines.system.IPersistableRow<to_patient_mappingStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(to_patient_mappingStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readDate(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readDate(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class asdddStruct implements
			routines.system.IPersistableRow<asdddStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public String START_DATE;

		public String getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public String END_DATE;

		public String getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readString(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// String

				writeString(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// String

				writeString(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + START_DATE);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + END_DATE);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(asdddStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public String START_DATE;

		public String getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public String END_DATE;

		public String getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		public String ENDDATE_SOURCE_PATH;

		public String getENDDATE_SOURCE_PATH() {
			return this.ENDDATE_SOURCE_PATH;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readString(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

					this.ENDDATE_SOURCE_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// String

				writeString(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// String

				writeString(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

				// String

				writeString(this.ENDDATE_SOURCE_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + START_DATE);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + END_DATE);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append(",ENDDATE_SOURCE_PATH=" + ENDDATE_SOURCE_PATH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class to_obs_fctStruct implements
			routines.system.IPersistableRow<to_obs_fctStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public String START_DATE;

		public String getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public String END_DATE;

		public String getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		public String STARTDATE_SOURCE_PATH;

		public String getSTARTDATE_SOURCE_PATH() {
			return this.STARTDATE_SOURCE_PATH;
		}

		public String ENDDATE_SOURCE_PATH;

		public String getENDDATE_SOURCE_PATH() {
			return this.ENDDATE_SOURCE_PATH;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readString(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

					this.STARTDATE_SOURCE_PATH = readString(dis);

					this.ENDDATE_SOURCE_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// String

				writeString(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// String

				writeString(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

				// String

				writeString(this.STARTDATE_SOURCE_PATH, dos);

				// String

				writeString(this.ENDDATE_SOURCE_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + START_DATE);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + END_DATE);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append(",STARTDATE_SOURCE_PATH=" + STARTDATE_SOURCE_PATH);
			sb.append(",ENDDATE_SOURCE_PATH=" + ENDDATE_SOURCE_PATH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(to_obs_fctStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class to_tmapStruct implements
			routines.system.IPersistableRow<to_tmapStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String TREE_PATH;

		public String getTREE_PATH() {
			return this.TREE_PATH;
		}

		public String SOURCE_PATH;

		public String getSOURCE_PATH() {
			return this.SOURCE_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		public String STARTDATE_SOURCE_PATH;

		public String getSTARTDATE_SOURCE_PATH() {
			return this.STARTDATE_SOURCE_PATH;
		}

		public String ENDDATE_SOURCE_PATH;

		public String getENDDATE_SOURCE_PATH() {
			return this.ENDDATE_SOURCE_PATH;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.TREE_PATH = readString(dis);

					this.SOURCE_PATH = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.CONCEPT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

					this.STARTDATE_SOURCE_PATH = readString(dis);

					this.ENDDATE_SOURCE_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.TREE_PATH, dos);

				// String

				writeString(this.SOURCE_PATH, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.CONCEPT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

				// String

				writeString(this.STARTDATE_SOURCE_PATH, dos);

				// String

				writeString(this.ENDDATE_SOURCE_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TREE_PATH=" + TREE_PATH);
			sb.append(",SOURCE_PATH=" + SOURCE_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append(",STARTDATE_SOURCE_PATH=" + STARTDATE_SOURCE_PATH);
			sb.append(",ENDDATE_SOURCE_PATH=" + ENDDATE_SOURCE_PATH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(to_tmapStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class from_oe_target_ontStruct implements
			routines.system.IPersistableRow<from_oe_target_ontStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String TARGET_ID;

		public String getTARGET_ID() {
			return this.TARGET_ID;
		}

		public String TREE_LEVEL;

		public String getTREE_LEVEL() {
			return this.TREE_LEVEL;
		}

		public String TREE_PATH;

		public String getTREE_PATH() {
			return this.TREE_PATH;
		}

		public String STAGING_PATH;

		public String getSTAGING_PATH() {
			return this.STAGING_PATH;
		}

		public String STAGING_DIMENSION;

		public String getSTAGING_DIMENSION() {
			return this.STAGING_DIMENSION;
		}

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		public String CHANGED;

		public String getCHANGED() {
			return this.CHANGED;
		}

		public String STARTDATE_STAGING_PATH;

		public String getSTARTDATE_STAGING_PATH() {
			return this.STARTDATE_STAGING_PATH;
		}

		public String ENDDATE_STAGING_PATH;

		public String getENDDATE_STAGING_PATH() {
			return this.ENDDATE_STAGING_PATH;
		}

		public String VISUALATTRIBUTES;

		public String getVISUALATTRIBUTES() {
			return this.VISUALATTRIBUTES;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.TARGET_ID = readString(dis);

					this.TREE_LEVEL = readString(dis);

					this.TREE_PATH = readString(dis);

					this.STAGING_PATH = readString(dis);

					this.STAGING_DIMENSION = readString(dis);

					this.NAME = readString(dis);

					this.CHANGED = readString(dis);

					this.STARTDATE_STAGING_PATH = readString(dis);

					this.ENDDATE_STAGING_PATH = readString(dis);

					this.VISUALATTRIBUTES = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.TARGET_ID, dos);

				// String

				writeString(this.TREE_LEVEL, dos);

				// String

				writeString(this.TREE_PATH, dos);

				// String

				writeString(this.STAGING_PATH, dos);

				// String

				writeString(this.STAGING_DIMENSION, dos);

				// String

				writeString(this.NAME, dos);

				// String

				writeString(this.CHANGED, dos);

				// String

				writeString(this.STARTDATE_STAGING_PATH, dos);

				// String

				writeString(this.ENDDATE_STAGING_PATH, dos);

				// String

				writeString(this.VISUALATTRIBUTES, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TARGET_ID=" + TARGET_ID);
			sb.append(",TREE_LEVEL=" + TREE_LEVEL);
			sb.append(",TREE_PATH=" + TREE_PATH);
			sb.append(",STAGING_PATH=" + STAGING_PATH);
			sb.append(",STAGING_DIMENSION=" + STAGING_DIMENSION);
			sb.append(",NAME=" + NAME);
			sb.append(",CHANGED=" + CHANGED);
			sb.append(",STARTDATE_STAGING_PATH=" + STARTDATE_STAGING_PATH);
			sb.append(",ENDDATE_STAGING_PATH=" + ENDDATE_STAGING_PATH);
			sb.append(",VISUALATTRIBUTES=" + VISUALATTRIBUTES);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(from_oe_target_ontStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_5Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_5Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String TARGET_ID;

		public String getTARGET_ID() {
			return this.TARGET_ID;
		}

		public String TREE_LEVEL;

		public String getTREE_LEVEL() {
			return this.TREE_LEVEL;
		}

		public String TREE_PATH;

		public String getTREE_PATH() {
			return this.TREE_PATH;
		}

		public String STAGING_PATH;

		public String getSTAGING_PATH() {
			return this.STAGING_PATH;
		}

		public String STAGING_DIMENSION;

		public String getSTAGING_DIMENSION() {
			return this.STAGING_DIMENSION;
		}

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		public String CHANGED;

		public String getCHANGED() {
			return this.CHANGED;
		}

		public String STARTDATE_STAGING_PATH;

		public String getSTARTDATE_STAGING_PATH() {
			return this.STARTDATE_STAGING_PATH;
		}

		public String ENDDATE_STAGING_PATH;

		public String getENDDATE_STAGING_PATH() {
			return this.ENDDATE_STAGING_PATH;
		}

		public String VISUALATTRIBUTES;

		public String getVISUALATTRIBUTES() {
			return this.VISUALATTRIBUTES;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.TARGET_ID = readString(dis);

					this.TREE_LEVEL = readString(dis);

					this.TREE_PATH = readString(dis);

					this.STAGING_PATH = readString(dis);

					this.STAGING_DIMENSION = readString(dis);

					this.NAME = readString(dis);

					this.CHANGED = readString(dis);

					this.STARTDATE_STAGING_PATH = readString(dis);

					this.ENDDATE_STAGING_PATH = readString(dis);

					this.VISUALATTRIBUTES = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.TARGET_ID, dos);

				// String

				writeString(this.TREE_LEVEL, dos);

				// String

				writeString(this.TREE_PATH, dos);

				// String

				writeString(this.STAGING_PATH, dos);

				// String

				writeString(this.STAGING_DIMENSION, dos);

				// String

				writeString(this.NAME, dos);

				// String

				writeString(this.CHANGED, dos);

				// String

				writeString(this.STARTDATE_STAGING_PATH, dos);

				// String

				writeString(this.ENDDATE_STAGING_PATH, dos);

				// String

				writeString(this.VISUALATTRIBUTES, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TARGET_ID=" + TARGET_ID);
			sb.append(",TREE_LEVEL=" + TREE_LEVEL);
			sb.append(",TREE_PATH=" + TREE_PATH);
			sb.append(",STAGING_PATH=" + STAGING_PATH);
			sb.append(",STAGING_DIMENSION=" + STAGING_DIMENSION);
			sb.append(",NAME=" + NAME);
			sb.append(",CHANGED=" + CHANGED);
			sb.append(",STARTDATE_STAGING_PATH=" + STARTDATE_STAGING_PATH);
			sb.append(",ENDDATE_STAGING_PATH=" + ENDDATE_STAGING_PATH);
			sb.append(",VISUALATTRIBUTES=" + VISUALATTRIBUTES);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_4Process(globalMap);
				tFileInputDelimited_3Process(globalMap);
				tFileInputDelimited_11Process(globalMap);
				tFileInputDelimited_10Process(globalMap);
				tFileInputDelimited_9Process(globalMap);
				tFileInputDelimited_12Process(globalMap);
				tFileInputDelimited_6Process(globalMap);
				tFileInputDelimited_7Process(globalMap);

				from_oe_target_ontStruct from_oe_target_ont = new from_oe_target_ontStruct();
				to_tmapStruct to_tmap = new to_tmapStruct();
				to_obs_fctStruct to_obs_fct = new to_obs_fctStruct();
				out1Struct out1 = new out1Struct();
				asdddStruct asddd = new asdddStruct();
				row5Struct row5 = new row5Struct();
				to_trgt_obsStruct to_trgt_obs = new to_trgt_obsStruct();
				to_patient_mappingStruct to_patient_mapping = new to_patient_mappingStruct();
				to_pat_mappingStruct to_pat_mapping = new to_pat_mappingStruct();
				row12Struct row12 = new row12Struct();
				asddStruct asdd = new asddStruct();
				asdStruct asd = new asdStruct();
				row11Struct row11 = new row11Struct();

				/**
				 * [tFileOutputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_6", false);
				start_Hash.put("tFileOutputDelimited_6",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_6";

				int tos_count_tFileOutputDelimited_6 = 0;

				String fileName_tFileOutputDelimited_6 = "";
				fileName_tFileOutputDelimited_6 = (new java.io.File(
						context.folderMain + context.folderOutput
								+ "/patient_data.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_6 = null;
				String extension_tFileOutputDelimited_6 = null;
				String directory_tFileOutputDelimited_6 = null;
				if ((fileName_tFileOutputDelimited_6.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") < fileName_tFileOutputDelimited_6
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(0, fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
							.substring(0, fileName_tFileOutputDelimited_6
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(0, fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					}
					directory_tFileOutputDelimited_6 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_6 = true;
				java.io.File filetFileOutputDelimited_6 = new java.io.File(
						fileName_tFileOutputDelimited_6);
				globalMap.put("tFileOutputDelimited_6_FILE_NAME",
						fileName_tFileOutputDelimited_6);

				int nb_line_tFileOutputDelimited_6 = 0;
				int splitEvery_tFileOutputDelimited_6 = 1000;
				int splitedFileNo_tFileOutputDelimited_6 = 0;
				int currentRow_tFileOutputDelimited_6 = 0;

				final String OUT_DELIM_tFileOutputDelimited_6 = /**
				 * Start field
				 * tFileOutputDelimited_6:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_6:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_6 = /**
				 * Start
				 * field tFileOutputDelimited_6:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_6:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_6 != null
						&& directory_tFileOutputDelimited_6.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_6 = new java.io.File(
							directory_tFileOutputDelimited_6);
					if (!dir_tFileOutputDelimited_6.exists()) {
						dir_tFileOutputDelimited_6.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_6 = null;
				try {
					outtFileOutputDelimited_6 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_6,
											false), "UTF-8"));

					if (filetFileOutputDelimited_6.length() == 0) {

						outtFileOutputDelimited_6.write("ENCOUNTER_NUM");

						outtFileOutputDelimited_6
								.write(OUT_DELIM_tFileOutputDelimited_6);

						outtFileOutputDelimited_6.write("PATIENT_NUM");

						outtFileOutputDelimited_6
								.write(OUT_DELIM_tFileOutputDelimited_6);

						outtFileOutputDelimited_6.write("CONCEPT_CD");

						outtFileOutputDelimited_6
								.write(OUT_DELIM_tFileOutputDelimited_6);

						outtFileOutputDelimited_6.write("PROVIDER_ID");

						outtFileOutputDelimited_6
								.write(OUT_DELIM_tFileOutputDelimited_6);

						outtFileOutputDelimited_6.write("START_DATE");

						outtFileOutputDelimited_6
								.write(OUT_DELIM_tFileOutputDelimited_6);

						outtFileOutputDelimited_6.write("MODIFIER_CD");

						outtFileOutputDelimited_6
								.write(OUT_DELIM_tFileOutputDelimited_6);

						outtFileOutputDelimited_6.write("INSTANCE_NUM");

						outtFileOutputDelimited_6
								.write(OUT_DELIM_tFileOutputDelimited_6);

						outtFileOutputDelimited_6.write("VALTYPE_CD");

						outtFileOutputDelimited_6
								.write(OUT_DELIM_tFileOutputDelimited_6);

						outtFileOutputDelimited_6.write("TVAL_CHAR");

						outtFileOutputDelimited_6
								.write(OUT_DELIM_tFileOutputDelimited_6);

						outtFileOutputDelimited_6.write("NVAL_NUM");

						outtFileOutputDelimited_6
								.write(OUT_DELIM_tFileOutputDelimited_6);

						outtFileOutputDelimited_6.write("VALUEFLAG_CD");

						outtFileOutputDelimited_6
								.write(OUT_DELIM_tFileOutputDelimited_6);

						outtFileOutputDelimited_6.write("QUANTITY_NUM");

						outtFileOutputDelimited_6
								.write(OUT_DELIM_tFileOutputDelimited_6);

						outtFileOutputDelimited_6.write("UNITS_CD");

						outtFileOutputDelimited_6
								.write(OUT_DELIM_tFileOutputDelimited_6);

						outtFileOutputDelimited_6.write("END_DATE");

						outtFileOutputDelimited_6
								.write(OUT_DELIM_tFileOutputDelimited_6);

						outtFileOutputDelimited_6.write("LOCATION_CD");

						outtFileOutputDelimited_6
								.write(OUT_DELIM_tFileOutputDelimited_6);

						outtFileOutputDelimited_6.write("OBSERVATION_BLOB");

						outtFileOutputDelimited_6
								.write(OUT_DELIM_tFileOutputDelimited_6);

						outtFileOutputDelimited_6.write("CONFIDENCE_NUM");

						outtFileOutputDelimited_6
								.write(OUT_DELIM_tFileOutputDelimited_6);

						outtFileOutputDelimited_6.write("UPDATE_DATE");

						outtFileOutputDelimited_6
								.write(OUT_DELIM_tFileOutputDelimited_6);

						outtFileOutputDelimited_6.write("DOWNLOAD_DATE");

						outtFileOutputDelimited_6
								.write(OUT_DELIM_tFileOutputDelimited_6);

						outtFileOutputDelimited_6.write("IMPORT_DATE");

						outtFileOutputDelimited_6
								.write(OUT_DELIM_tFileOutputDelimited_6);

						outtFileOutputDelimited_6.write("SOURCESYSTEM_CD");

						outtFileOutputDelimited_6
								.write(OUT_DELIM_tFileOutputDelimited_6);

						outtFileOutputDelimited_6.write("UPLOAD_ID");

						outtFileOutputDelimited_6
								.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_6);
						outtFileOutputDelimited_6.flush();
					}

					/**
					 * [tFileOutputDelimited_6 begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_10 begin ] start
					 */

					ok_Hash.put("tFileOutputDelimited_10", false);
					start_Hash.put("tFileOutputDelimited_10",
							System.currentTimeMillis());
					currentComponent = "tFileOutputDelimited_10";

					int tos_count_tFileOutputDelimited_10 = 0;

					String fileName_tFileOutputDelimited_10 = "";
					fileName_tFileOutputDelimited_10 = (new java.io.File(
							context.folderMain + context.folderOutput
									+ "/patient_mapping.csv"))
							.getAbsolutePath().replace("\\", "/");
					String fullName_tFileOutputDelimited_10 = null;
					String extension_tFileOutputDelimited_10 = null;
					String directory_tFileOutputDelimited_10 = null;
					if ((fileName_tFileOutputDelimited_10.indexOf("/") != -1)) {
						if (fileName_tFileOutputDelimited_10.lastIndexOf(".") < fileName_tFileOutputDelimited_10
								.lastIndexOf("/")) {
							fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10;
							extension_tFileOutputDelimited_10 = "";
						} else {
							fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
									.substring(0,
											fileName_tFileOutputDelimited_10
													.lastIndexOf("."));
							extension_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
									.substring(fileName_tFileOutputDelimited_10
											.lastIndexOf("."));
						}
						directory_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
								.substring(0, fileName_tFileOutputDelimited_10
										.lastIndexOf("/"));
					} else {
						if (fileName_tFileOutputDelimited_10.lastIndexOf(".") != -1) {
							fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
									.substring(0,
											fileName_tFileOutputDelimited_10
													.lastIndexOf("."));
							extension_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
									.substring(fileName_tFileOutputDelimited_10
											.lastIndexOf("."));
						} else {
							fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10;
							extension_tFileOutputDelimited_10 = "";
						}
						directory_tFileOutputDelimited_10 = "";
					}
					boolean isFileGenerated_tFileOutputDelimited_10 = true;
					java.io.File filetFileOutputDelimited_10 = new java.io.File(
							fileName_tFileOutputDelimited_10);
					globalMap.put("tFileOutputDelimited_10_FILE_NAME",
							fileName_tFileOutputDelimited_10);

					int nb_line_tFileOutputDelimited_10 = 0;
					int splitEvery_tFileOutputDelimited_10 = 1000;
					int splitedFileNo_tFileOutputDelimited_10 = 0;
					int currentRow_tFileOutputDelimited_10 = 0;

					final String OUT_DELIM_tFileOutputDelimited_10 = /**
					 * Start
					 * field tFileOutputDelimited_10:FIELDSEPARATOR
					 */
					"\t"/** End field tFileOutputDelimited_10:FIELDSEPARATOR */
					;

					final String OUT_DELIM_ROWSEP_tFileOutputDelimited_10 = /**
					 * 
					 * Start field tFileOutputDelimited_10:ROWSEPARATOR
					 */
					"\n"/** End field tFileOutputDelimited_10:ROWSEPARATOR */
					;

					// create directory only if not exists
					if (directory_tFileOutputDelimited_10 != null
							&& directory_tFileOutputDelimited_10.trim()
									.length() != 0) {
						java.io.File dir_tFileOutputDelimited_10 = new java.io.File(
								directory_tFileOutputDelimited_10);
						if (!dir_tFileOutputDelimited_10.exists()) {
							dir_tFileOutputDelimited_10.mkdirs();
						}
					}

					// routines.system.Row
					java.io.Writer outtFileOutputDelimited_10 = null;
					try {
						outtFileOutputDelimited_10 = new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_10,
												false), "UTF-8"));

						if (filetFileOutputDelimited_10.length() == 0) {

							outtFileOutputDelimited_10.write("PATIENT_IDE");

							outtFileOutputDelimited_10
									.write(OUT_DELIM_tFileOutputDelimited_10);

							outtFileOutputDelimited_10
									.write("PATIENT_IDE_SOURCE");

							outtFileOutputDelimited_10
									.write(OUT_DELIM_tFileOutputDelimited_10);

							outtFileOutputDelimited_10.write("PATIENT_NUM");

							outtFileOutputDelimited_10
									.write(OUT_DELIM_tFileOutputDelimited_10);

							outtFileOutputDelimited_10
									.write("PATIENT_IDE_STATUS");

							outtFileOutputDelimited_10
									.write(OUT_DELIM_tFileOutputDelimited_10);

							outtFileOutputDelimited_10.write("UPLOAD_DATE");

							outtFileOutputDelimited_10
									.write(OUT_DELIM_tFileOutputDelimited_10);

							outtFileOutputDelimited_10.write("UPDATE_DATE");

							outtFileOutputDelimited_10
									.write(OUT_DELIM_tFileOutputDelimited_10);

							outtFileOutputDelimited_10.write("DOWNLOAD_DATE");

							outtFileOutputDelimited_10
									.write(OUT_DELIM_tFileOutputDelimited_10);

							outtFileOutputDelimited_10.write("IMPORT_DATE");

							outtFileOutputDelimited_10
									.write(OUT_DELIM_tFileOutputDelimited_10);

							outtFileOutputDelimited_10.write("SOURCESYSTEM_CD");

							outtFileOutputDelimited_10
									.write(OUT_DELIM_tFileOutputDelimited_10);

							outtFileOutputDelimited_10.write("UPLOAD_ID");

							outtFileOutputDelimited_10
									.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_10);
							outtFileOutputDelimited_10.flush();
						}

						/**
						 * [tFileOutputDelimited_10 begin ] stop
						 */

						/**
						 * [tUniqRow_2 begin ] start
						 */

						ok_Hash.put("tUniqRow_2", false);
						start_Hash
								.put("tUniqRow_2", System.currentTimeMillis());
						currentComponent = "tUniqRow_2";

						int tos_count_tUniqRow_2 = 0;

						class KeyStruct_tUniqRow_2 {

							private static final int DEFAULT_HASHCODE = 1;
							private static final int PRIME = 31;
							private int hashCode = DEFAULT_HASHCODE;
							public boolean hashCodeDirty = true;

							String PATIENT_IDE;
							String PATIENT_IDE_SOURCE;
							BigDecimal PATIENT_NUM;

							@Override
							public int hashCode() {
								if (this.hashCodeDirty) {
									final int prime = PRIME;
									int result = DEFAULT_HASHCODE;

									result = prime
											* result
											+ ((this.PATIENT_IDE == null) ? 0
													: this.PATIENT_IDE
															.hashCode());

									result = prime
											* result
											+ ((this.PATIENT_IDE_SOURCE == null) ? 0
													: this.PATIENT_IDE_SOURCE
															.hashCode());

									result = prime
											* result
											+ ((this.PATIENT_NUM == null) ? 0
													: this.PATIENT_NUM
															.hashCode());

									this.hashCode = result;
									this.hashCodeDirty = false;
								}
								return this.hashCode;
							}

							@Override
							public boolean equals(Object obj) {
								if (this == obj)
									return true;
								if (obj == null)
									return false;
								if (getClass() != obj.getClass())
									return false;
								final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;

								if (this.PATIENT_IDE == null) {
									if (other.PATIENT_IDE != null)
										return false;
								} else if (!this.PATIENT_IDE
										.equals(other.PATIENT_IDE))
									return false;

								if (this.PATIENT_IDE_SOURCE == null) {
									if (other.PATIENT_IDE_SOURCE != null)
										return false;
								} else if (!this.PATIENT_IDE_SOURCE
										.equals(other.PATIENT_IDE_SOURCE))
									return false;

								if (this.PATIENT_NUM == null) {
									if (other.PATIENT_NUM != null)
										return false;
								} else if (!this.PATIENT_NUM
										.equals(other.PATIENT_NUM))
									return false;

								return true;
							}

						}

						int nb_uniques_tUniqRow_2 = 0;
						int nb_duplicates_tUniqRow_2 = 0;
						KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
						java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>();

						/**
						 * [tUniqRow_2 begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_11 begin ] start
						 */

						ok_Hash.put("tFileOutputDelimited_11", false);
						start_Hash.put("tFileOutputDelimited_11",
								System.currentTimeMillis());
						currentComponent = "tFileOutputDelimited_11";

						int tos_count_tFileOutputDelimited_11 = 0;

						String fileName_tFileOutputDelimited_11 = "";
						fileName_tFileOutputDelimited_11 = (new java.io.File(
								context.folderMain + context.folderOutput
										+ "/patient_dimension.csv"))
								.getAbsolutePath().replace("\\", "/");
						String fullName_tFileOutputDelimited_11 = null;
						String extension_tFileOutputDelimited_11 = null;
						String directory_tFileOutputDelimited_11 = null;
						if ((fileName_tFileOutputDelimited_11.indexOf("/") != -1)) {
							if (fileName_tFileOutputDelimited_11
									.lastIndexOf(".") < fileName_tFileOutputDelimited_11
									.lastIndexOf("/")) {
								fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11;
								extension_tFileOutputDelimited_11 = "";
							} else {
								fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11
										.substring(0,
												fileName_tFileOutputDelimited_11
														.lastIndexOf("."));
								extension_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11
										.substring(fileName_tFileOutputDelimited_11
												.lastIndexOf("."));
							}
							directory_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11
									.substring(0,
											fileName_tFileOutputDelimited_11
													.lastIndexOf("/"));
						} else {
							if (fileName_tFileOutputDelimited_11
									.lastIndexOf(".") != -1) {
								fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11
										.substring(0,
												fileName_tFileOutputDelimited_11
														.lastIndexOf("."));
								extension_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11
										.substring(fileName_tFileOutputDelimited_11
												.lastIndexOf("."));
							} else {
								fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11;
								extension_tFileOutputDelimited_11 = "";
							}
							directory_tFileOutputDelimited_11 = "";
						}
						boolean isFileGenerated_tFileOutputDelimited_11 = true;
						java.io.File filetFileOutputDelimited_11 = new java.io.File(
								fileName_tFileOutputDelimited_11);
						globalMap.put("tFileOutputDelimited_11_FILE_NAME",
								fileName_tFileOutputDelimited_11);

						int nb_line_tFileOutputDelimited_11 = 0;
						int splitEvery_tFileOutputDelimited_11 = 1000;
						int splitedFileNo_tFileOutputDelimited_11 = 0;
						int currentRow_tFileOutputDelimited_11 = 0;

						final String OUT_DELIM_tFileOutputDelimited_11 = /**
						 * Start
						 * field tFileOutputDelimited_11:FIELDSEPARATOR
						 */
						"\t"/** End field tFileOutputDelimited_11:FIELDSEPARATOR */
						;

						final String OUT_DELIM_ROWSEP_tFileOutputDelimited_11 = /**
						 * 
						 * Start field tFileOutputDelimited_11:ROWSEPARATOR
						 */
						"\n"/** End field tFileOutputDelimited_11:ROWSEPARATOR */
						;

						// create directory only if not exists
						if (directory_tFileOutputDelimited_11 != null
								&& directory_tFileOutputDelimited_11.trim()
										.length() != 0) {
							java.io.File dir_tFileOutputDelimited_11 = new java.io.File(
									directory_tFileOutputDelimited_11);
							if (!dir_tFileOutputDelimited_11.exists()) {
								dir_tFileOutputDelimited_11.mkdirs();
							}
						}

						// routines.system.Row
						java.io.Writer outtFileOutputDelimited_11 = null;
						try {
							outtFileOutputDelimited_11 = new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_11,
													false), "UTF-8"));

							if (filetFileOutputDelimited_11.length() == 0) {

								outtFileOutputDelimited_11.write("PATIENT_NUM");

								outtFileOutputDelimited_11
										.write(OUT_DELIM_tFileOutputDelimited_11);

								outtFileOutputDelimited_11
										.write("VITAL_STATUS_CD");

								outtFileOutputDelimited_11
										.write(OUT_DELIM_tFileOutputDelimited_11);

								outtFileOutputDelimited_11.write("BIRTH_DATE");

								outtFileOutputDelimited_11
										.write(OUT_DELIM_tFileOutputDelimited_11);

								outtFileOutputDelimited_11.write("DEATH_DATE");

								outtFileOutputDelimited_11
										.write(OUT_DELIM_tFileOutputDelimited_11);

								outtFileOutputDelimited_11.write("SEX_CD");

								outtFileOutputDelimited_11
										.write(OUT_DELIM_tFileOutputDelimited_11);

								outtFileOutputDelimited_11
										.write("AGE_IN_YEARS_NUM");

								outtFileOutputDelimited_11
										.write(OUT_DELIM_tFileOutputDelimited_11);

								outtFileOutputDelimited_11.write("LANGUAGE_CD");

								outtFileOutputDelimited_11
										.write(OUT_DELIM_tFileOutputDelimited_11);

								outtFileOutputDelimited_11.write("RACE_CD");

								outtFileOutputDelimited_11
										.write(OUT_DELIM_tFileOutputDelimited_11);

								outtFileOutputDelimited_11
										.write("MARITAL_STATUS_CD");

								outtFileOutputDelimited_11
										.write(OUT_DELIM_tFileOutputDelimited_11);

								outtFileOutputDelimited_11.write("RELIGION_CD");

								outtFileOutputDelimited_11
										.write(OUT_DELIM_tFileOutputDelimited_11);

								outtFileOutputDelimited_11.write("ZIP_CD");

								outtFileOutputDelimited_11
										.write(OUT_DELIM_tFileOutputDelimited_11);

								outtFileOutputDelimited_11
										.write("STATECITYZIP_PATH");

								outtFileOutputDelimited_11
										.write(OUT_DELIM_tFileOutputDelimited_11);

								outtFileOutputDelimited_11.write("INCOME_CD");

								outtFileOutputDelimited_11
										.write(OUT_DELIM_tFileOutputDelimited_11);

								outtFileOutputDelimited_11
										.write("PATIENT_BLOB");

								outtFileOutputDelimited_11
										.write(OUT_DELIM_tFileOutputDelimited_11);

								outtFileOutputDelimited_11.write("UPDATE_DATE");

								outtFileOutputDelimited_11
										.write(OUT_DELIM_tFileOutputDelimited_11);

								outtFileOutputDelimited_11
										.write("DOWNLOAD_DATE");

								outtFileOutputDelimited_11
										.write(OUT_DELIM_tFileOutputDelimited_11);

								outtFileOutputDelimited_11.write("IMPORT_DATE");

								outtFileOutputDelimited_11
										.write(OUT_DELIM_tFileOutputDelimited_11);

								outtFileOutputDelimited_11
										.write("SOURCESYSTEM_CD");

								outtFileOutputDelimited_11
										.write(OUT_DELIM_tFileOutputDelimited_11);

								outtFileOutputDelimited_11.write("UPLOAD_ID");

								outtFileOutputDelimited_11
										.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_11);
								outtFileOutputDelimited_11.flush();
							}

							/**
							 * [tFileOutputDelimited_11 begin ] stop
							 */

							/**
							 * [tUniqRow_1 begin ] start
							 */

							ok_Hash.put("tUniqRow_1", false);
							start_Hash.put("tUniqRow_1",
									System.currentTimeMillis());
							currentComponent = "tUniqRow_1";

							int tos_count_tUniqRow_1 = 0;

							class KeyStruct_tUniqRow_1 {

								private static final int DEFAULT_HASHCODE = 1;
								private static final int PRIME = 31;
								private int hashCode = DEFAULT_HASHCODE;
								public boolean hashCodeDirty = true;

								BigDecimal PATIENT_NUM;

								@Override
								public int hashCode() {
									if (this.hashCodeDirty) {
										final int prime = PRIME;
										int result = DEFAULT_HASHCODE;

										result = prime
												* result
												+ ((this.PATIENT_NUM == null) ? 0
														: this.PATIENT_NUM
																.hashCode());

										this.hashCode = result;
										this.hashCodeDirty = false;
									}
									return this.hashCode;
								}

								@Override
								public boolean equals(Object obj) {
									if (this == obj)
										return true;
									if (obj == null)
										return false;
									if (getClass() != obj.getClass())
										return false;
									final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;

									if (this.PATIENT_NUM == null) {
										if (other.PATIENT_NUM != null)
											return false;
									} else if (!this.PATIENT_NUM
											.equals(other.PATIENT_NUM))
										return false;

									return true;
								}

							}

							int nb_uniques_tUniqRow_1 = 0;
							int nb_duplicates_tUniqRow_1 = 0;
							KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
							java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>();

							/**
							 * [tUniqRow_1 begin ] stop
							 */

							/**
							 * [tMap_7 begin ] start
							 */

							ok_Hash.put("tMap_7", false);
							start_Hash
									.put("tMap_7", System.currentTimeMillis());
							currentComponent = "tMap_7";

							int tos_count_tMap_7 = 0;

							// ###############################
							// # Lookup's keys initialization

							org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) globalMap
									.get("tHash_Lookup_row10"));

							row10Struct row10HashKey = new row10Struct();
							row10Struct row10Default = new row10Struct();
							// ###############################

							// ###############################
							// # Vars initialization
							class Var__tMap_7__Struct {
							}
							Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
							// ###############################

							// ###############################
							// # Outputs initialization
							asdStruct asd_tmp = new asdStruct();
							// ###############################

							/**
							 * [tMap_7 begin ] stop
							 */

							/**
							 * [tMap_6 begin ] start
							 */

							ok_Hash.put("tMap_6", false);
							start_Hash
									.put("tMap_6", System.currentTimeMillis());
							currentComponent = "tMap_6";

							int tos_count_tMap_6 = 0;

							// ###############################
							// # Lookup's keys initialization

							org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) globalMap
									.get("tHash_Lookup_row9"));

							row9Struct row9HashKey = new row9Struct();
							row9Struct row9Default = new row9Struct();
							// ###############################

							// ###############################
							// # Vars initialization
							class Var__tMap_6__Struct {
							}
							Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
							// ###############################

							// ###############################
							// # Outputs initialization
							to_pat_mappingStruct to_pat_mapping_tmp = new to_pat_mappingStruct();
							asddStruct asdd_tmp = new asddStruct();
							// ###############################

							/**
							 * [tMap_6 begin ] stop
							 */

							/**
							 * [tMap_5 begin ] start
							 */

							ok_Hash.put("tMap_5", false);
							start_Hash
									.put("tMap_5", System.currentTimeMillis());
							currentComponent = "tMap_5";

							int tos_count_tMap_5 = 0;

							// ###############################
							// # Lookup's keys initialization
							// ###############################

							// ###############################
							// # Vars initialization
							class Var__tMap_5__Struct {
							}
							Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
							// ###############################

							// ###############################
							// # Outputs initialization
							to_trgt_obsStruct to_trgt_obs_tmp = new to_trgt_obsStruct();
							to_patient_mappingStruct to_patient_mapping_tmp = new to_patient_mappingStruct();
							// ###############################

							/**
							 * [tMap_5 begin ] stop
							 */

							/**
							 * [tJavaRow_2 begin ] start
							 */

							ok_Hash.put("tJavaRow_2", false);
							start_Hash.put("tJavaRow_2",
									System.currentTimeMillis());
							currentComponent = "tJavaRow_2";

							int tos_count_tJavaRow_2 = 0;

							int nb_line_tJavaRow_2 = 0;

							/**
							 * [tJavaRow_2 begin ] stop
							 */

							/**
							 * [tMap_8 begin ] start
							 */

							ok_Hash.put("tMap_8", false);
							start_Hash
									.put("tMap_8", System.currentTimeMillis());
							currentComponent = "tMap_8";

							int tos_count_tMap_8 = 0;

							// ###############################
							// # Lookup's keys initialization

							org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) globalMap
									.get("tHash_Lookup_row16"));

							row16Struct row16HashKey = new row16Struct();
							row16Struct row16Default = new row16Struct();

							org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct> tHash_Lookup_row17 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct>) globalMap
									.get("tHash_Lookup_row17"));

							row17Struct row17HashKey = new row17Struct();
							row17Struct row17Default = new row17Struct();
							// ###############################

							// ###############################
							// # Vars initialization
							class Var__tMap_8__Struct {
							}
							Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
							// ###############################

							// ###############################
							// # Outputs initialization
							asdddStruct asddd_tmp = new asdddStruct();
							// ###############################

							List<asdddStruct> asddd_List = new java.util.ArrayList<asdddStruct>();

							/**
							 * [tMap_8 begin ] stop
							 */

							/**
							 * [tMap_9 begin ] start
							 */

							ok_Hash.put("tMap_9", false);
							start_Hash
									.put("tMap_9", System.currentTimeMillis());
							currentComponent = "tMap_9";

							int tos_count_tMap_9 = 0;

							// ###############################
							// # Lookup's keys initialization

							org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) globalMap
									.get("tHash_Lookup_row15"));

							row15Struct row15HashKey = new row15Struct();
							row15Struct row15Default = new row15Struct();

							org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) globalMap
									.get("tHash_Lookup_row14"));

							row14Struct row14HashKey = new row14Struct();
							row14Struct row14Default = new row14Struct();
							// ###############################

							// ###############################
							// # Vars initialization
							class Var__tMap_9__Struct {
							}
							Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
							// ###############################

							// ###############################
							// # Outputs initialization
							out1Struct out1_tmp = new out1Struct();
							// ###############################

							List<out1Struct> out1_List = new java.util.ArrayList<out1Struct>();

							/**
							 * [tMap_9 begin ] stop
							 */

							/**
							 * [tMap_4 begin ] start
							 */

							ok_Hash.put("tMap_4", false);
							start_Hash
									.put("tMap_4", System.currentTimeMillis());
							currentComponent = "tMap_4";

							int tos_count_tMap_4 = 0;

							// ###############################
							// # Lookup's keys initialization

							org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<from_srxc_obsfctStruct> tHash_Lookup_from_srxc_obsfct = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<from_srxc_obsfctStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<from_srxc_obsfctStruct>) globalMap
									.get("tHash_Lookup_from_srxc_obsfct"));

							from_srxc_obsfctStruct from_srxc_obsfctHashKey = new from_srxc_obsfctStruct();
							from_srxc_obsfctStruct from_srxc_obsfctDefault = new from_srxc_obsfctStruct();
							// ###############################

							// ###############################
							// # Vars initialization
							class Var__tMap_4__Struct {
							}
							Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
							// ###############################

							// ###############################
							// # Outputs initialization
							to_obs_fctStruct to_obs_fct_tmp = new to_obs_fctStruct();
							// ###############################

							/**
							 * [tMap_4 begin ] stop
							 */

							/**
							 * [tMap_3 begin ] start
							 */

							ok_Hash.put("tMap_3", false);
							start_Hash
									.put("tMap_3", System.currentTimeMillis());
							currentComponent = "tMap_3";

							int tos_count_tMap_3 = 0;

							// ###############################
							// # Lookup's keys initialization

							org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<from_src_conc_dimStruct> tHash_Lookup_from_src_conc_dim = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<from_src_conc_dimStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<from_src_conc_dimStruct>) globalMap
									.get("tHash_Lookup_from_src_conc_dim"));

							from_src_conc_dimStruct from_src_conc_dimHashKey = new from_src_conc_dimStruct();
							from_src_conc_dimStruct from_src_conc_dimDefault = new from_src_conc_dimStruct();
							// ###############################

							// ###############################
							// # Vars initialization
							class Var__tMap_3__Struct {
							}
							Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
							// ###############################

							// ###############################
							// # Outputs initialization
							to_tmapStruct to_tmap_tmp = new to_tmapStruct();
							// ###############################

							/**
							 * [tMap_3 begin ] stop
							 */

							/**
							 * [tFileInputDelimited_5 begin ] start
							 */

							ok_Hash.put("tFileInputDelimited_5", false);
							start_Hash.put("tFileInputDelimited_5",
									System.currentTimeMillis());
							currentComponent = "tFileInputDelimited_5";

							int tos_count_tFileInputDelimited_5 = 0;

							int nb_line_tFileInputDelimited_5 = 0;
							org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_5 = null;
							try {

								Object filename_tFileInputDelimited_5 = ((String) globalMap
										.get("tCreateTemporaryFile_1_FILEPATH"));
								if (filename_tFileInputDelimited_5 instanceof java.io.InputStream) {

									int footer_value_tFileInputDelimited_5 = 0, random_value_tFileInputDelimited_5 = -1;
									if (footer_value_tFileInputDelimited_5 > 0
											|| random_value_tFileInputDelimited_5 > 0) {
										throw new java.lang.Exception(
												"When the input source is a stream,footer and random shouldn't be bigger than 0.");
									}

								}
								try {
									fid_tFileInputDelimited_5 = new org.talend.fileprocess.FileInputDelimited(
											((String) globalMap
													.get("tCreateTemporaryFile_1_FILEPATH")),
											"UTF-8", "\t", "\n", true, 1, 0,
											-1, -1, false);
								} catch (java.lang.Exception e) {

									System.err.println(e.getMessage());

								}

								while (fid_tFileInputDelimited_5 != null
										&& fid_tFileInputDelimited_5
												.nextRecord()) {

									from_oe_target_ont = null;

									boolean whetherReject_tFileInputDelimited_5 = false;
									from_oe_target_ont = new from_oe_target_ontStruct();
									try {

										int columnIndexWithD_tFileInputDelimited_5 = 0;

										columnIndexWithD_tFileInputDelimited_5 = 0;

										from_oe_target_ont.TARGET_ID = fid_tFileInputDelimited_5
												.get(columnIndexWithD_tFileInputDelimited_5);

										columnIndexWithD_tFileInputDelimited_5 = 1;

										from_oe_target_ont.TREE_LEVEL = fid_tFileInputDelimited_5
												.get(columnIndexWithD_tFileInputDelimited_5);

										columnIndexWithD_tFileInputDelimited_5 = 2;

										from_oe_target_ont.TREE_PATH = fid_tFileInputDelimited_5
												.get(columnIndexWithD_tFileInputDelimited_5);

										columnIndexWithD_tFileInputDelimited_5 = 3;

										from_oe_target_ont.STAGING_PATH = fid_tFileInputDelimited_5
												.get(columnIndexWithD_tFileInputDelimited_5);

										columnIndexWithD_tFileInputDelimited_5 = 4;

										from_oe_target_ont.STAGING_DIMENSION = fid_tFileInputDelimited_5
												.get(columnIndexWithD_tFileInputDelimited_5);

										columnIndexWithD_tFileInputDelimited_5 = 5;

										from_oe_target_ont.NAME = fid_tFileInputDelimited_5
												.get(columnIndexWithD_tFileInputDelimited_5);

										columnIndexWithD_tFileInputDelimited_5 = 6;

										from_oe_target_ont.CHANGED = fid_tFileInputDelimited_5
												.get(columnIndexWithD_tFileInputDelimited_5);

										columnIndexWithD_tFileInputDelimited_5 = 7;

										from_oe_target_ont.STARTDATE_STAGING_PATH = fid_tFileInputDelimited_5
												.get(columnIndexWithD_tFileInputDelimited_5);

										columnIndexWithD_tFileInputDelimited_5 = 8;

										from_oe_target_ont.ENDDATE_STAGING_PATH = fid_tFileInputDelimited_5
												.get(columnIndexWithD_tFileInputDelimited_5);

										columnIndexWithD_tFileInputDelimited_5 = 9;

										from_oe_target_ont.VISUALATTRIBUTES = fid_tFileInputDelimited_5
												.get(columnIndexWithD_tFileInputDelimited_5);

									} catch (java.lang.Exception e) {
										whetherReject_tFileInputDelimited_5 = true;

										System.err.println(e.getMessage());
										from_oe_target_ont = null;

									}

									/**
									 * [tFileInputDelimited_5 begin ] stop
									 */
									/**
									 * [tFileInputDelimited_5 main ] start
									 */

									currentComponent = "tFileInputDelimited_5";

									tos_count_tFileInputDelimited_5++;

									/**
									 * [tFileInputDelimited_5 main ] stop
									 */
									// Start of branch "from_oe_target_ont"
									if (from_oe_target_ont != null) {

										/**
										 * [tMap_3 main ] start
										 */

										currentComponent = "tMap_3";

										boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

										// ###############################
										// # Input tables (lookups)
										boolean rejectedInnerJoin_tMap_3 = false;
										boolean mainRowRejected_tMap_3 = false;

										// /////////////////////////////////////////////
										// Starting Lookup Table
										// "from_src_conc_dim"
										// /////////////////////////////////////////////

										boolean forceLoopfrom_src_conc_dim = false;

										from_src_conc_dimStruct from_src_conc_dimObjectFromLookup = null;

										if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

											hasCasePrimitiveKeyWithNull_tMap_3 = false;

											from_src_conc_dimHashKey.CONCEPT_PATH = from_oe_target_ont.STAGING_PATH;

											from_src_conc_dimHashKey.hashCodeDirty = true;

											tHash_Lookup_from_src_conc_dim
													.lookup(from_src_conc_dimHashKey);

											if (!tHash_Lookup_from_src_conc_dim
													.hasNext()) { // G_TM_M_090

												forceLoopfrom_src_conc_dim = true;

											} // G_TM_M_090

										} // G_TM_M_020

										else { // G 20 - G 21
											forceLoopfrom_src_conc_dim = true;
										} // G 21

										from_src_conc_dimStruct from_src_conc_dim = null;

										while ((tHash_Lookup_from_src_conc_dim != null && tHash_Lookup_from_src_conc_dim
												.hasNext())
												|| forceLoopfrom_src_conc_dim) { // G_TM_M_043

											// CALL close loop of lookup
											// 'from_src_conc_dim'

											from_src_conc_dimStruct fromLookup_from_src_conc_dim = null;
											from_src_conc_dim = from_src_conc_dimDefault;

											if (!forceLoopfrom_src_conc_dim) { // G
																				// 46

												fromLookup_from_src_conc_dim = tHash_Lookup_from_src_conc_dim
														.next();

												if (fromLookup_from_src_conc_dim != null) {
													from_src_conc_dim = fromLookup_from_src_conc_dim;
												}

											} // G 46

											forceLoopfrom_src_conc_dim = false;

											// ###############################
											{ // start of Var scope

												// ###############################
												// # Vars tables

												Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
												// ###############################
												// # Output tables

												to_tmap = null;

												// # Output table : 'to_tmap'
												to_tmap_tmp.TREE_PATH = from_oe_target_ont.TREE_PATH;
												to_tmap_tmp.SOURCE_PATH = from_oe_target_ont.STAGING_PATH;
												to_tmap_tmp.CONCEPT_CD = from_src_conc_dim.CONCEPT_CD;
												to_tmap_tmp.NAME_CHAR = from_src_conc_dim.NAME_CHAR;
												to_tmap_tmp.CONCEPT_BLOB = from_src_conc_dim.CONCEPT_BLOB;
												to_tmap_tmp.UPDATE_DATE = from_src_conc_dim.UPDATE_DATE;
												to_tmap_tmp.DOWNLOAD_DATE = from_src_conc_dim.DOWNLOAD_DATE;
												to_tmap_tmp.IMPORT_DATE = from_src_conc_dim.IMPORT_DATE;
												to_tmap_tmp.SOURCESYSTEM_CD = from_src_conc_dim.SOURCESYSTEM_CD;
												to_tmap_tmp.UPLOAD_ID = from_src_conc_dim.UPLOAD_ID;
												to_tmap_tmp.STARTDATE_SOURCE_PATH = from_oe_target_ont.STARTDATE_STAGING_PATH;
												to_tmap_tmp.ENDDATE_SOURCE_PATH = from_oe_target_ont.ENDDATE_STAGING_PATH;
												to_tmap = to_tmap_tmp;
												// ###############################

											} // end of Var scope

											rejectedInnerJoin_tMap_3 = false;

											tos_count_tMap_3++;

											/**
											 * [tMap_3 main ] stop
											 */
											// Start of branch "to_tmap"
											if (to_tmap != null) {

												/**
												 * [tMap_4 main ] start
												 */

												currentComponent = "tMap_4";

												boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

												// ###############################
												// # Input tables (lookups)
												boolean rejectedInnerJoin_tMap_4 = false;
												boolean mainRowRejected_tMap_4 = false;

												// /////////////////////////////////////////////
												// Starting Lookup Table
												// "from_srxc_obsfct"
												// /////////////////////////////////////////////

												boolean forceLoopfrom_srxc_obsfct = false;

												from_srxc_obsfctStruct from_srxc_obsfctObjectFromLookup = null;

												if (!rejectedInnerJoin_tMap_4) { // G_TM_M_020

													hasCasePrimitiveKeyWithNull_tMap_4 = false;

													from_srxc_obsfctHashKey.CONCEPT_CD = to_tmap.CONCEPT_CD;

													from_srxc_obsfctHashKey.hashCodeDirty = true;

													tHash_Lookup_from_srxc_obsfct
															.lookup(from_srxc_obsfctHashKey);

													if (!tHash_Lookup_from_srxc_obsfct
															.hasNext()) { // G_TM_M_090

														rejectedInnerJoin_tMap_4 = true;

														forceLoopfrom_srxc_obsfct = true;

													} // G_TM_M_090

												} // G_TM_M_020

												else { // G 20 - G 21
													forceLoopfrom_srxc_obsfct = true;
												} // G 21

												from_srxc_obsfctStruct from_srxc_obsfct = null;

												while ((tHash_Lookup_from_srxc_obsfct != null && tHash_Lookup_from_srxc_obsfct
														.hasNext())
														|| forceLoopfrom_srxc_obsfct) { // G_TM_M_043

													// CALL close loop of lookup
													// 'from_srxc_obsfct'

													from_srxc_obsfctStruct fromLookup_from_srxc_obsfct = null;
													from_srxc_obsfct = from_srxc_obsfctDefault;

													if (!forceLoopfrom_srxc_obsfct) { // G
																						// 46

														fromLookup_from_srxc_obsfct = tHash_Lookup_from_srxc_obsfct
																.next();

														if (fromLookup_from_srxc_obsfct != null) {
															from_srxc_obsfct = fromLookup_from_srxc_obsfct;
														}

													} // G 46

													forceLoopfrom_srxc_obsfct = false;

													// ###############################
													{ // start of Var scope

														// ###############################
														// # Vars tables

														Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
														// ###############################
														// # Output tables

														to_obs_fct = null;

														if (!rejectedInnerJoin_tMap_4) {

															// # Output table :
															// 'to_obs_fct'
															to_obs_fct_tmp.ENCOUNTER_NUM = from_srxc_obsfct.ENCOUNTER_NUM;
															to_obs_fct_tmp.PATIENT_NUM = from_srxc_obsfct.PATIENT_NUM;
															to_obs_fct_tmp.CONCEPT_CD = to_tmap.TREE_PATH
																	.substring(
																			0,
																			to_tmap.TREE_PATH
																					.length() - 1)
																	.replaceAll(
																			"\\\\",
																			"|");
															to_obs_fct_tmp.PROVIDER_ID = from_srxc_obsfct.PROVIDER_ID;
															to_obs_fct_tmp.START_DATE = from_srxc_obsfct.START_DATE;
															to_obs_fct_tmp.MODIFIER_CD = from_srxc_obsfct.MODIFIER_CD;
															to_obs_fct_tmp.INSTANCE_NUM = from_srxc_obsfct.INSTANCE_NUM;
															to_obs_fct_tmp.VALTYPE_CD = from_srxc_obsfct.VALTYPE_CD;
															to_obs_fct_tmp.TVAL_CHAR = from_srxc_obsfct.TVAL_CHAR;
															to_obs_fct_tmp.NVAL_NUM = from_srxc_obsfct.NVAL_NUM;
															to_obs_fct_tmp.VALUEFLAG_CD = from_srxc_obsfct.VALUEFLAG_CD;
															to_obs_fct_tmp.QUANTITY_NUM = from_srxc_obsfct.QUANTITY_NUM;
															to_obs_fct_tmp.UNITS_CD = from_srxc_obsfct.UNITS_CD;
															to_obs_fct_tmp.END_DATE = from_srxc_obsfct.END_DATE;
															to_obs_fct_tmp.LOCATION_CD = from_srxc_obsfct.LOCATION_CD;
															to_obs_fct_tmp.OBSERVATION_BLOB = from_srxc_obsfct.OBSERVATION_BLOB;
															to_obs_fct_tmp.CONFIDENCE_NUM = from_srxc_obsfct.CONFIDENCE_NUM;
															to_obs_fct_tmp.UPDATE_DATE = from_srxc_obsfct.UPDATE_DATE;
															to_obs_fct_tmp.DOWNLOAD_DATE = from_srxc_obsfct.DOWNLOAD_DATE;
															to_obs_fct_tmp.IMPORT_DATE = from_srxc_obsfct.IMPORT_DATE;
															to_obs_fct_tmp.SOURCESYSTEM_CD = from_srxc_obsfct.SOURCESYSTEM_CD;
															to_obs_fct_tmp.UPLOAD_ID = from_srxc_obsfct.UPLOAD_ID;
															to_obs_fct_tmp.STARTDATE_SOURCE_PATH = to_tmap.STARTDATE_SOURCE_PATH;
															to_obs_fct_tmp.ENDDATE_SOURCE_PATH = to_tmap.ENDDATE_SOURCE_PATH;
															to_obs_fct = to_obs_fct_tmp;
														} // closing inner join
															// bracket (2)
															// ###############################

													} // end of Var scope

													rejectedInnerJoin_tMap_4 = false;

													tos_count_tMap_4++;

													/**
													 * [tMap_4 main ] stop
													 */
													// Start of branch
													// "to_obs_fct"
													if (to_obs_fct != null) {

														/**
														 * [tMap_9 main ] start
														 */

														currentComponent = "tMap_9";

														boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;

														// ###############################
														// # Input tables
														// (lookups)
														boolean rejectedInnerJoin_tMap_9 = false;
														boolean mainRowRejected_tMap_9 = false;

														// /////////////////////////////////////////////
														// Starting Lookup Table
														// "row15"
														// /////////////////////////////////////////////

														boolean forceLooprow15 = false;

														row15Struct row15ObjectFromLookup = null;

														if (!rejectedInnerJoin_tMap_9) { // G_TM_M_020

															hasCasePrimitiveKeyWithNull_tMap_9 = false;

															row15HashKey.CONCEPT_PATH = to_obs_fct.STARTDATE_SOURCE_PATH;

															row15HashKey.hashCodeDirty = true;

															tHash_Lookup_row15
																	.lookup(row15HashKey);

															if (!tHash_Lookup_row15
																	.hasNext()) { // G_TM_M_090

																rejectedInnerJoin_tMap_9 = true;

															} // G_TM_M_090

														} // G_TM_M_020

														if (tHash_Lookup_row15 != null
																&& tHash_Lookup_row15
																		.getCount(row15HashKey) > 1) { // G
																										// 071

															// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row15' and it contains more one result from keys :  row15.CONCEPT_PATH = '"
															// +
															// row15HashKey.CONCEPT_PATH
															// + "'");
														} // G 071

														row15Struct row15 = null;

														row15Struct fromLookup_row15 = null;
														row15 = row15Default;

														if (tHash_Lookup_row15 != null
																&& tHash_Lookup_row15
																		.hasNext()) { // G
																						// 099

															fromLookup_row15 = tHash_Lookup_row15
																	.next();

														} // G 099

														if (fromLookup_row15 != null) {
															row15 = fromLookup_row15;
														}

														// /////////////////////////////////////////////
														// Starting Lookup Table
														// "row14"
														// /////////////////////////////////////////////

														boolean forceLooprow14 = false;

														row14Struct row14ObjectFromLookup = null;

														if (!rejectedInnerJoin_tMap_9) { // G_TM_M_020

															hasCasePrimitiveKeyWithNull_tMap_9 = false;

															row14HashKey.PATIENT_NUM = to_obs_fct.PATIENT_NUM;

															row14HashKey.CONCEPT_CD = row15.CONCEPT_CD;

															row14HashKey.hashCodeDirty = true;

															tHash_Lookup_row14
																	.lookup(row14HashKey);

															if (!tHash_Lookup_row14
																	.hasNext()) { // G_TM_M_090

																rejectedInnerJoin_tMap_9 = true;

															} // G_TM_M_090

														} // G_TM_M_020

														if (tHash_Lookup_row14 != null
																&& tHash_Lookup_row14
																		.getCount(row14HashKey) > 1) { // G
																										// 071

															// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row14' and it contains more one result from keys :  row14.PATIENT_NUM = '"
															// +
															// row14HashKey.PATIENT_NUM
															// +
															// "', row14.CONCEPT_CD = '"
															// +
															// row14HashKey.CONCEPT_CD
															// + "'");
														} // G 071

														row14Struct row14 = null;

														row14Struct fromLookup_row14 = null;
														row14 = row14Default;

														if (tHash_Lookup_row14 != null
																&& tHash_Lookup_row14
																		.hasNext()) { // G
																						// 099

															fromLookup_row14 = tHash_Lookup_row14
																	.next();

														} // G 099

														if (fromLookup_row14 != null) {
															row14 = fromLookup_row14;
														}

														// ###############################
														{ // start of Var scope

															// ###############################
															// # Vars tables

															Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
															// ###############################
															// # Output tables

															out1 = null;
															out1_List.clear();

															if (!rejectedInnerJoin_tMap_9) {

																// # Output
																// table :
																// 'out1'
																out1_tmp.ENCOUNTER_NUM = to_obs_fct.ENCOUNTER_NUM;
																out1_tmp.PATIENT_NUM = to_obs_fct.PATIENT_NUM;
																out1_tmp.CONCEPT_CD = to_obs_fct.CONCEPT_CD;
																out1_tmp.PROVIDER_ID = to_obs_fct.PROVIDER_ID;
																out1_tmp.START_DATE = row14.START_DATE;
																out1_tmp.MODIFIER_CD = to_obs_fct.MODIFIER_CD;
																out1_tmp.INSTANCE_NUM = to_obs_fct.INSTANCE_NUM;
																out1_tmp.VALTYPE_CD = to_obs_fct.VALTYPE_CD;
																out1_tmp.TVAL_CHAR = to_obs_fct.TVAL_CHAR;
																out1_tmp.NVAL_NUM = to_obs_fct.NVAL_NUM;
																out1_tmp.VALUEFLAG_CD = to_obs_fct.VALUEFLAG_CD;
																out1_tmp.QUANTITY_NUM = to_obs_fct.QUANTITY_NUM;
																out1_tmp.UNITS_CD = to_obs_fct.UNITS_CD;
																out1_tmp.END_DATE = to_obs_fct.END_DATE;
																out1_tmp.LOCATION_CD = to_obs_fct.LOCATION_CD;
																out1_tmp.OBSERVATION_BLOB = to_obs_fct.OBSERVATION_BLOB;
																out1_tmp.CONFIDENCE_NUM = to_obs_fct.CONFIDENCE_NUM;
																out1_tmp.UPDATE_DATE = to_obs_fct.UPDATE_DATE;
																out1_tmp.DOWNLOAD_DATE = to_obs_fct.DOWNLOAD_DATE;
																out1_tmp.IMPORT_DATE = to_obs_fct.IMPORT_DATE;
																out1_tmp.SOURCESYSTEM_CD = to_obs_fct.SOURCESYSTEM_CD;
																out1_tmp.UPLOAD_ID = to_obs_fct.UPLOAD_ID;
																out1_tmp.ENDDATE_SOURCE_PATH = to_obs_fct.ENDDATE_SOURCE_PATH;
																out1_List
																		.add(out1_tmp);
																out1 = out1_tmp;
															} // closing inner
																// join bracket
																// (1)
																// ###### START
																// REJECTS #####

															// # Output reject
															// table : 'out3'
															// # Filter
															// conditions
															if (rejectedInnerJoin_tMap_9) {
																out1_tmp = new out1Struct();

																out1_tmp.ENCOUNTER_NUM = to_obs_fct.ENCOUNTER_NUM;
																out1_tmp.PATIENT_NUM = to_obs_fct.PATIENT_NUM;
																out1_tmp.CONCEPT_CD = to_obs_fct.CONCEPT_CD;
																out1_tmp.PROVIDER_ID = to_obs_fct.PROVIDER_ID;
																out1_tmp.START_DATE = to_obs_fct.START_DATE;
																out1_tmp.MODIFIER_CD = to_obs_fct.MODIFIER_CD;
																out1_tmp.INSTANCE_NUM = to_obs_fct.INSTANCE_NUM;
																out1_tmp.VALTYPE_CD = to_obs_fct.VALTYPE_CD;
																out1_tmp.TVAL_CHAR = to_obs_fct.TVAL_CHAR;
																out1_tmp.NVAL_NUM = to_obs_fct.NVAL_NUM;
																out1_tmp.VALUEFLAG_CD = to_obs_fct.VALUEFLAG_CD;
																out1_tmp.QUANTITY_NUM = to_obs_fct.QUANTITY_NUM;
																out1_tmp.UNITS_CD = to_obs_fct.UNITS_CD;
																out1_tmp.END_DATE = to_obs_fct.END_DATE;
																out1_tmp.LOCATION_CD = to_obs_fct.LOCATION_CD;
																out1_tmp.OBSERVATION_BLOB = to_obs_fct.OBSERVATION_BLOB;
																out1_tmp.CONFIDENCE_NUM = to_obs_fct.CONFIDENCE_NUM;
																out1_tmp.UPDATE_DATE = to_obs_fct.UPDATE_DATE;
																out1_tmp.DOWNLOAD_DATE = to_obs_fct.DOWNLOAD_DATE;
																out1_tmp.IMPORT_DATE = to_obs_fct.IMPORT_DATE;
																out1_tmp.SOURCESYSTEM_CD = to_obs_fct.SOURCESYSTEM_CD;
																out1_tmp.UPLOAD_ID = to_obs_fct.UPLOAD_ID;
																out1_tmp.ENDDATE_SOURCE_PATH = to_obs_fct.ENDDATE_SOURCE_PATH;
																out1_List
																		.add(out1_tmp);
																out1 = out1_tmp;
															} // closing
																// filter/reject
																// ###############################

														} // end of Var scope

														rejectedInnerJoin_tMap_9 = false;

														tos_count_tMap_9++;

														/**
														 * [tMap_9 main ] stop
														 */
														// Start of branch
														// "out1"
														if (out1 != null) {
															// start of joined
															// table loop
															for (out1Struct cur_out1 : out1_List) {
																out1 = cur_out1;

																/**
																 * [tMap_8 main
																 * ] start
																 */

																currentComponent = "tMap_8";

																boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;

																// ###############################
																// # Input
																// tables
																// (lookups)
																boolean rejectedInnerJoin_tMap_8 = false;
																boolean mainRowRejected_tMap_8 = false;

																// /////////////////////////////////////////////
																// Starting
																// Lookup Table
																// "row16"
																// /////////////////////////////////////////////

																boolean forceLooprow16 = false;

																row16Struct row16ObjectFromLookup = null;

																if (!rejectedInnerJoin_tMap_8) { // G_TM_M_020

																	hasCasePrimitiveKeyWithNull_tMap_8 = false;

																	row16HashKey.CONCEPT_PATH = out1.ENDDATE_SOURCE_PATH;

																	row16HashKey.hashCodeDirty = true;

																	tHash_Lookup_row16
																			.lookup(row16HashKey);

																	if (!tHash_Lookup_row16
																			.hasNext()) { // G_TM_M_090

																		rejectedInnerJoin_tMap_8 = true;

																	} // G_TM_M_090

																} // G_TM_M_020

																if (tHash_Lookup_row16 != null
																		&& tHash_Lookup_row16
																				.getCount(row16HashKey) > 1) { // G
																												// 071

																	// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row16' and it contains more one result from keys :  row16.CONCEPT_PATH = '"
																	// +
																	// row16HashKey.CONCEPT_PATH
																	// + "'");
																} // G 071

																row16Struct row16 = null;

																row16Struct fromLookup_row16 = null;
																row16 = row16Default;

																if (tHash_Lookup_row16 != null
																		&& tHash_Lookup_row16
																				.hasNext()) { // G
																								// 099

																	fromLookup_row16 = tHash_Lookup_row16
																			.next();

																} // G 099

																if (fromLookup_row16 != null) {
																	row16 = fromLookup_row16;
																}

																// /////////////////////////////////////////////
																// Starting
																// Lookup Table
																// "row17"
																// /////////////////////////////////////////////

																boolean forceLooprow17 = false;

																row17Struct row17ObjectFromLookup = null;

																if (!rejectedInnerJoin_tMap_8) { // G_TM_M_020

																	hasCasePrimitiveKeyWithNull_tMap_8 = false;

																	row17HashKey.PATIENT_NUM = out1.PATIENT_NUM;

																	row17HashKey.CONCEPT_CD = row16.CONCEPT_CD;

																	row17HashKey.hashCodeDirty = true;

																	tHash_Lookup_row17
																			.lookup(row17HashKey);

																	if (!tHash_Lookup_row17
																			.hasNext()) { // G_TM_M_090

																		rejectedInnerJoin_tMap_8 = true;

																	} // G_TM_M_090

																} // G_TM_M_020

																if (tHash_Lookup_row17 != null
																		&& tHash_Lookup_row17
																				.getCount(row17HashKey) > 1) { // G
																												// 071

																	// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row17' and it contains more one result from keys :  row17.PATIENT_NUM = '"
																	// +
																	// row17HashKey.PATIENT_NUM
																	// +
																	// "', row17.CONCEPT_CD = '"
																	// +
																	// row17HashKey.CONCEPT_CD
																	// + "'");
																} // G 071

																row17Struct row17 = null;

																row17Struct fromLookup_row17 = null;
																row17 = row17Default;

																if (tHash_Lookup_row17 != null
																		&& tHash_Lookup_row17
																				.hasNext()) { // G
																								// 099

																	fromLookup_row17 = tHash_Lookup_row17
																			.next();

																} // G 099

																if (fromLookup_row17 != null) {
																	row17 = fromLookup_row17;
																}

																// ###############################
																{ // start of
																	// Var scope

																	// ###############################
																	// # Vars
																	// tables

																	Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
																	// ###############################
																	// # Output
																	// tables

																	asddd = null;
																	asddd_List
																			.clear();

																	if (!rejectedInnerJoin_tMap_8) {

																		// #
																		// Output
																		// table
																		// :
																		// 'asddd'
																		asddd_tmp.ENCOUNTER_NUM = out1.ENCOUNTER_NUM;
																		asddd_tmp.PATIENT_NUM = out1.PATIENT_NUM;
																		asddd_tmp.CONCEPT_CD = out1.CONCEPT_CD;
																		asddd_tmp.PROVIDER_ID = out1.PROVIDER_ID;
																		asddd_tmp.START_DATE = out1.START_DATE;
																		asddd_tmp.MODIFIER_CD = out1.MODIFIER_CD;
																		asddd_tmp.INSTANCE_NUM = out1.INSTANCE_NUM;
																		asddd_tmp.VALTYPE_CD = out1.VALTYPE_CD;
																		asddd_tmp.TVAL_CHAR = out1.TVAL_CHAR;
																		asddd_tmp.NVAL_NUM = out1.NVAL_NUM;
																		asddd_tmp.VALUEFLAG_CD = out1.VALUEFLAG_CD;
																		asddd_tmp.QUANTITY_NUM = out1.QUANTITY_NUM;
																		asddd_tmp.UNITS_CD = out1.UNITS_CD;
																		asddd_tmp.END_DATE = row17.TVAL_CHAR;
																		asddd_tmp.LOCATION_CD = out1.LOCATION_CD;
																		asddd_tmp.OBSERVATION_BLOB = out1.OBSERVATION_BLOB;
																		asddd_tmp.CONFIDENCE_NUM = out1.CONFIDENCE_NUM;
																		asddd_tmp.UPDATE_DATE = out1.UPDATE_DATE;
																		asddd_tmp.DOWNLOAD_DATE = out1.DOWNLOAD_DATE;
																		asddd_tmp.IMPORT_DATE = out1.IMPORT_DATE;
																		asddd_tmp.SOURCESYSTEM_CD = out1.SOURCESYSTEM_CD;
																		asddd_tmp.UPLOAD_ID = out1.UPLOAD_ID;
																		asddd_List
																				.add(asddd_tmp);
																		asddd = asddd_tmp;
																	} // closing
																		// inner
																		// join
																		// bracket
																		// (1)
																		// ######
																		// START
																		// REJECTS
																		// #####

																	// # Output
																	// reject
																	// table :
																	// 'out2'
																	// # Filter
																	// conditions
																	if (rejectedInnerJoin_tMap_8) {
																		asddd_tmp = new asdddStruct();

																		asddd_tmp.ENCOUNTER_NUM = out1.ENCOUNTER_NUM;
																		asddd_tmp.PATIENT_NUM = out1.PATIENT_NUM;
																		asddd_tmp.CONCEPT_CD = out1.CONCEPT_CD;
																		asddd_tmp.PROVIDER_ID = out1.PROVIDER_ID;
																		asddd_tmp.START_DATE = out1.START_DATE;
																		asddd_tmp.MODIFIER_CD = out1.MODIFIER_CD;
																		asddd_tmp.INSTANCE_NUM = out1.INSTANCE_NUM;
																		asddd_tmp.VALTYPE_CD = out1.VALTYPE_CD;
																		asddd_tmp.TVAL_CHAR = out1.TVAL_CHAR;
																		asddd_tmp.NVAL_NUM = out1.NVAL_NUM;
																		asddd_tmp.VALUEFLAG_CD = out1.VALUEFLAG_CD;
																		asddd_tmp.QUANTITY_NUM = out1.QUANTITY_NUM;
																		asddd_tmp.UNITS_CD = out1.UNITS_CD;
																		asddd_tmp.END_DATE = out1.END_DATE;
																		asddd_tmp.LOCATION_CD = out1.LOCATION_CD;
																		asddd_tmp.OBSERVATION_BLOB = out1.OBSERVATION_BLOB;
																		asddd_tmp.CONFIDENCE_NUM = out1.CONFIDENCE_NUM;
																		asddd_tmp.UPDATE_DATE = out1.UPDATE_DATE;
																		asddd_tmp.DOWNLOAD_DATE = out1.DOWNLOAD_DATE;
																		asddd_tmp.IMPORT_DATE = out1.IMPORT_DATE;
																		asddd_tmp.SOURCESYSTEM_CD = out1.SOURCESYSTEM_CD;
																		asddd_tmp.UPLOAD_ID = out1.UPLOAD_ID;
																		asddd_List
																				.add(asddd_tmp);
																		asddd = asddd_tmp;
																	} // closing
																		// filter/reject
																		// ###############################

																} // end of Var
																	// scope

																rejectedInnerJoin_tMap_8 = false;

																tos_count_tMap_8++;

																/**
																 * [tMap_8 main
																 * ] stop
																 */
																// Start of
																// branch
																// "asddd"
																if (asddd != null) {
																	// start of
																	// joined
																	// table
																	// loop
																	for (asdddStruct cur_asddd : asddd_List) {
																		asddd = cur_asddd;

																		/**
																		 * [
																		 * tJavaRow_2
																		 * main
																		 * ]
																		 * start
																		 */

																		currentComponent = "tJavaRow_2";

																		// Code
																		// generated
																		// according
																		// to
																		// input
																		// schema
																		// and
																		// output
																		// schema
																		row5.ENCOUNTER_NUM = asddd.ENCOUNTER_NUM;
																		row5.PATIENT_NUM = asddd.PATIENT_NUM;
																		// row5.CONCEPT_CD
																		// =
																		// asddd.CONCEPT_CD;

																		if (asddd.CONCEPT_CD
																				.lastIndexOf("|") > 0) {
																			StringBuilder b = new StringBuilder(
																					asddd.CONCEPT_CD);
																			b.replace(
																					asddd.CONCEPT_CD
																							.lastIndexOf("|"),
																					asddd.CONCEPT_CD
																							.lastIndexOf("|") + 1,
																					":");
																			row5.CONCEPT_CD = b
																					.toString();
																		} else {
																			row5.CONCEPT_CD = asddd.CONCEPT_CD;
																		}

																		row5.PROVIDER_ID = asddd.PROVIDER_ID;
																		if (asddd.START_DATE
																				.length() > 0)
																			row5.START_DATE = TalendDate
																					.parseDate(
																							"yyyy-MM-dd",
																							asddd.START_DATE);
																		else {
																			// "dd-MM-yyyy"

																			row5.START_DATE = TalendDate
																					.parseDate(
																							"yyyy-MM-dd",
																							"1900-01-01");
																		}
																		row5.MODIFIER_CD = asddd.MODIFIER_CD;
																		row5.INSTANCE_NUM = asddd.INSTANCE_NUM;
																		row5.VALTYPE_CD = asddd.VALTYPE_CD;
																		row5.TVAL_CHAR = asddd.TVAL_CHAR;
																		row5.NVAL_NUM = asddd.NVAL_NUM;
																		row5.VALUEFLAG_CD = asddd.VALUEFLAG_CD;
																		row5.QUANTITY_NUM = asddd.QUANTITY_NUM;
																		row5.UNITS_CD = asddd.UNITS_CD;
																		if (asddd.END_DATE
																				.length() > 0)
																			row5.END_DATE = TalendDate
																					.parseDate(
																							"yyyy-MM-dd",
																							asddd.END_DATE);
																		else
																			row5.END_DATE = null;
																		row5.LOCATION_CD = asddd.LOCATION_CD;
																		row5.OBSERVATION_BLOB = asddd.OBSERVATION_BLOB;
																		row5.CONFIDENCE_NUM = asddd.CONFIDENCE_NUM;
																		row5.UPDATE_DATE = asddd.UPDATE_DATE;
																		row5.DOWNLOAD_DATE = asddd.DOWNLOAD_DATE;
																		row5.IMPORT_DATE = asddd.IMPORT_DATE;
																		row5.SOURCESYSTEM_CD = asddd.SOURCESYSTEM_CD;
																		row5.UPLOAD_ID = asddd.UPLOAD_ID;

																		nb_line_tJavaRow_2++;

																		tos_count_tJavaRow_2++;

																		/**
																		 * [
																		 * tJavaRow_2
																		 * main
																		 * ]
																		 * stop
																		 */

																		/**
																		 * [
																		 * tMap_5
																		 * main
																		 * ]
																		 * start
																		 */

																		currentComponent = "tMap_5";

																		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

																		// ###############################
																		// #
																		// Input
																		// tables
																		// (lookups)
																		boolean rejectedInnerJoin_tMap_5 = false;
																		boolean mainRowRejected_tMap_5 = false;

																		// ###############################
																		{ // start
																			// of
																			// Var
																			// scope

																			// ###############################
																			// #
																			// Vars
																			// tables

																			Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
																			// ###############################
																			// #
																			// Output
																			// tables

																			to_trgt_obs = null;
																			to_patient_mapping = null;

																			// #
																			// Output
																			// table
																			// :
																			// 'to_trgt_obs'
																			to_trgt_obs_tmp.ENCOUNTER_NUM = row5.ENCOUNTER_NUM;
																			to_trgt_obs_tmp.PATIENT_NUM = row5.PATIENT_NUM;
																			to_trgt_obs_tmp.CONCEPT_CD = row5.CONCEPT_CD;
																			to_trgt_obs_tmp.PROVIDER_ID = row5.PROVIDER_ID;
																			to_trgt_obs_tmp.START_DATE = row5.START_DATE;
																			to_trgt_obs_tmp.MODIFIER_CD = row5.MODIFIER_CD;
																			to_trgt_obs_tmp.INSTANCE_NUM = row5.INSTANCE_NUM;
																			to_trgt_obs_tmp.VALTYPE_CD = row5.VALTYPE_CD;
																			to_trgt_obs_tmp.TVAL_CHAR = row5.TVAL_CHAR;
																			to_trgt_obs_tmp.NVAL_NUM = row5.NVAL_NUM;
																			to_trgt_obs_tmp.VALUEFLAG_CD = row5.VALUEFLAG_CD;
																			to_trgt_obs_tmp.QUANTITY_NUM = row5.QUANTITY_NUM;
																			to_trgt_obs_tmp.UNITS_CD = row5.UNITS_CD;
																			to_trgt_obs_tmp.END_DATE = row5.END_DATE;
																			to_trgt_obs_tmp.LOCATION_CD = row5.LOCATION_CD;
																			to_trgt_obs_tmp.OBSERVATION_BLOB = row5.OBSERVATION_BLOB;
																			to_trgt_obs_tmp.CONFIDENCE_NUM = row5.CONFIDENCE_NUM;
																			to_trgt_obs_tmp.UPDATE_DATE = row5.UPDATE_DATE;
																			to_trgt_obs_tmp.DOWNLOAD_DATE = row5.DOWNLOAD_DATE;
																			to_trgt_obs_tmp.IMPORT_DATE = row5.IMPORT_DATE;
																			to_trgt_obs_tmp.SOURCESYSTEM_CD = row5.SOURCESYSTEM_CD;
																			to_trgt_obs_tmp.UPLOAD_ID = row5.UPLOAD_ID;
																			to_trgt_obs = to_trgt_obs_tmp;

																			// #
																			// Output
																			// table
																			// :
																			// 'to_patient_mapping'
																			to_patient_mapping_tmp.PATIENT_NUM = row5.PATIENT_NUM;
																			to_patient_mapping = to_patient_mapping_tmp;
																			// ###############################

																		} // end
																			// of
																			// Var
																			// scope

																		rejectedInnerJoin_tMap_5 = false;

																		tos_count_tMap_5++;

																		/**
																		 * [
																		 * tMap_5
																		 * main
																		 * ]
																		 * stop
																		 */
																		// Start
																		// of
																		// branch
																		// "to_trgt_obs"
																		if (to_trgt_obs != null) {

																			/**
																			 * [
																			 * tFileOutputDelimited_6
																			 * main
																			 * ]
																			 * start
																			 */

																			currentComponent = "tFileOutputDelimited_6";

																			StringBuilder sb_tFileOutputDelimited_6 = new StringBuilder();

																			if (to_trgt_obs.ENCOUNTER_NUM != null) {

																				sb_tFileOutputDelimited_6
																						.append(

																						to_trgt_obs.ENCOUNTER_NUM
																								.toPlainString()

																						);

																			}

																			sb_tFileOutputDelimited_6
																					.append(OUT_DELIM_tFileOutputDelimited_6);

																			if (to_trgt_obs.PATIENT_NUM != null) {

																				sb_tFileOutputDelimited_6
																						.append(

																						to_trgt_obs.PATIENT_NUM
																								.toPlainString()

																						);

																			}

																			sb_tFileOutputDelimited_6
																					.append(OUT_DELIM_tFileOutputDelimited_6);

																			if (to_trgt_obs.CONCEPT_CD != null) {

																				sb_tFileOutputDelimited_6
																						.append(

																						to_trgt_obs.CONCEPT_CD

																						);

																			}

																			sb_tFileOutputDelimited_6
																					.append(OUT_DELIM_tFileOutputDelimited_6);

																			if (to_trgt_obs.PROVIDER_ID != null) {

																				sb_tFileOutputDelimited_6
																						.append(

																						to_trgt_obs.PROVIDER_ID

																						);

																			}

																			sb_tFileOutputDelimited_6
																					.append(OUT_DELIM_tFileOutputDelimited_6);

																			if (to_trgt_obs.START_DATE != null) {

																				sb_tFileOutputDelimited_6
																						.append(

																						FormatterUtils
																								.format_Date(
																										to_trgt_obs.START_DATE,
																										"yyyy-MM-dd")

																						);

																			}

																			sb_tFileOutputDelimited_6
																					.append(OUT_DELIM_tFileOutputDelimited_6);

																			if (to_trgt_obs.MODIFIER_CD != null) {

																				sb_tFileOutputDelimited_6
																						.append(

																						to_trgt_obs.MODIFIER_CD

																						);

																			}

																			sb_tFileOutputDelimited_6
																					.append(OUT_DELIM_tFileOutputDelimited_6);

																			if (to_trgt_obs.INSTANCE_NUM != null) {

																				sb_tFileOutputDelimited_6
																						.append(

																						to_trgt_obs.INSTANCE_NUM

																						);

																			}

																			sb_tFileOutputDelimited_6
																					.append(OUT_DELIM_tFileOutputDelimited_6);

																			if (to_trgt_obs.VALTYPE_CD != null) {

																				sb_tFileOutputDelimited_6
																						.append(

																						to_trgt_obs.VALTYPE_CD

																						);

																			}

																			sb_tFileOutputDelimited_6
																					.append(OUT_DELIM_tFileOutputDelimited_6);

																			if (to_trgt_obs.TVAL_CHAR != null) {

																				sb_tFileOutputDelimited_6
																						.append(

																						to_trgt_obs.TVAL_CHAR

																						);

																			}

																			sb_tFileOutputDelimited_6
																					.append(OUT_DELIM_tFileOutputDelimited_6);

																			if (to_trgt_obs.NVAL_NUM != null) {

																				sb_tFileOutputDelimited_6
																						.append(

																						to_trgt_obs.NVAL_NUM

																						);

																			}

																			sb_tFileOutputDelimited_6
																					.append(OUT_DELIM_tFileOutputDelimited_6);

																			if (to_trgt_obs.VALUEFLAG_CD != null) {

																				sb_tFileOutputDelimited_6
																						.append(

																						to_trgt_obs.VALUEFLAG_CD

																						);

																			}

																			sb_tFileOutputDelimited_6
																					.append(OUT_DELIM_tFileOutputDelimited_6);

																			if (to_trgt_obs.QUANTITY_NUM != null) {

																				sb_tFileOutputDelimited_6
																						.append(

																						to_trgt_obs.QUANTITY_NUM

																						);

																			}

																			sb_tFileOutputDelimited_6
																					.append(OUT_DELIM_tFileOutputDelimited_6);

																			if (to_trgt_obs.UNITS_CD != null) {

																				sb_tFileOutputDelimited_6
																						.append(

																						to_trgt_obs.UNITS_CD

																						);

																			}

																			sb_tFileOutputDelimited_6
																					.append(OUT_DELIM_tFileOutputDelimited_6);

																			if (to_trgt_obs.END_DATE != null) {

																				sb_tFileOutputDelimited_6
																						.append(

																						FormatterUtils
																								.format_Date(
																										to_trgt_obs.END_DATE,
																										"yyyy-MM-dd")

																						);

																			}

																			sb_tFileOutputDelimited_6
																					.append(OUT_DELIM_tFileOutputDelimited_6);

																			if (to_trgt_obs.LOCATION_CD != null) {

																				sb_tFileOutputDelimited_6
																						.append(

																						to_trgt_obs.LOCATION_CD

																						);

																			}

																			sb_tFileOutputDelimited_6
																					.append(OUT_DELIM_tFileOutputDelimited_6);

																			if (to_trgt_obs.OBSERVATION_BLOB != null) {

																				sb_tFileOutputDelimited_6
																						.append(

																						to_trgt_obs.OBSERVATION_BLOB

																						);

																			}

																			sb_tFileOutputDelimited_6
																					.append(OUT_DELIM_tFileOutputDelimited_6);

																			if (to_trgt_obs.CONFIDENCE_NUM != null) {

																				sb_tFileOutputDelimited_6
																						.append(

																						to_trgt_obs.CONFIDENCE_NUM

																						);

																			}

																			sb_tFileOutputDelimited_6
																					.append(OUT_DELIM_tFileOutputDelimited_6);

																			if (to_trgt_obs.UPDATE_DATE != null) {

																				sb_tFileOutputDelimited_6
																						.append(

																						FormatterUtils
																								.format_Date(
																										to_trgt_obs.UPDATE_DATE,
																										"yyyy-MM-dd")

																						);

																			}

																			sb_tFileOutputDelimited_6
																					.append(OUT_DELIM_tFileOutputDelimited_6);

																			if (to_trgt_obs.DOWNLOAD_DATE != null) {

																				sb_tFileOutputDelimited_6
																						.append(

																						FormatterUtils
																								.format_Date(
																										to_trgt_obs.DOWNLOAD_DATE,
																										"yyyy-MM-dd")

																						);

																			}

																			sb_tFileOutputDelimited_6
																					.append(OUT_DELIM_tFileOutputDelimited_6);

																			if (to_trgt_obs.IMPORT_DATE != null) {

																				sb_tFileOutputDelimited_6
																						.append(

																						FormatterUtils
																								.format_Date(
																										to_trgt_obs.IMPORT_DATE,
																										"yyyy-MM-dd")

																						);

																			}

																			sb_tFileOutputDelimited_6
																					.append(OUT_DELIM_tFileOutputDelimited_6);

																			if (to_trgt_obs.SOURCESYSTEM_CD != null) {

																				sb_tFileOutputDelimited_6
																						.append(

																						to_trgt_obs.SOURCESYSTEM_CD

																						);

																			}

																			sb_tFileOutputDelimited_6
																					.append(OUT_DELIM_tFileOutputDelimited_6);

																			if (to_trgt_obs.UPLOAD_ID != null) {

																				sb_tFileOutputDelimited_6
																						.append(

																						to_trgt_obs.UPLOAD_ID

																						);

																			}

																			sb_tFileOutputDelimited_6
																					.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_6);

																			nb_line_tFileOutputDelimited_6++;

																			outtFileOutputDelimited_6
																					.write(sb_tFileOutputDelimited_6
																							.toString());

																			tos_count_tFileOutputDelimited_6++;

																			/**
																			 * [
																			 * tFileOutputDelimited_6
																			 * main
																			 * ]
																			 * stop
																			 */

																		} // End
																			// of
																			// branch
																			// "to_trgt_obs"

																		// Start
																		// of
																		// branch
																		// "to_patient_mapping"
																		if (to_patient_mapping != null) {

																			/**
																			 * [
																			 * tMap_6
																			 * main
																			 * ]
																			 * start
																			 */

																			currentComponent = "tMap_6";

																			boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

																			// ###############################
																			// #
																			// Input
																			// tables
																			// (lookups)
																			boolean rejectedInnerJoin_tMap_6 = false;
																			boolean mainRowRejected_tMap_6 = false;

																			// /////////////////////////////////////////////
																			// Starting
																			// Lookup
																			// Table
																			// "row9"
																			// /////////////////////////////////////////////

																			boolean forceLooprow9 = false;

																			row9Struct row9ObjectFromLookup = null;

																			if (!rejectedInnerJoin_tMap_6) { // G_TM_M_020

																				hasCasePrimitiveKeyWithNull_tMap_6 = false;

																				row9HashKey.PATIENT_NUM = to_patient_mapping.PATIENT_NUM;

																				row9HashKey.hashCodeDirty = true;

																				tHash_Lookup_row9
																						.lookup(row9HashKey);

																				if (!tHash_Lookup_row9
																						.hasNext()) { // G_TM_M_090

																					forceLooprow9 = true;

																				} // G_TM_M_090

																			} // G_TM_M_020

																			else { // G
																					// 20
																					// -
																					// G
																					// 21
																				forceLooprow9 = true;
																			} // G
																				// 21

																			row9Struct row9 = null;

																			while ((tHash_Lookup_row9 != null && tHash_Lookup_row9
																					.hasNext())
																					|| forceLooprow9) { // G_TM_M_043

																				// CALL
																				// close
																				// loop
																				// of
																				// lookup
																				// 'row9'

																				row9Struct fromLookup_row9 = null;
																				row9 = row9Default;

																				if (!forceLooprow9) { // G
																										// 46

																					fromLookup_row9 = tHash_Lookup_row9
																							.next();

																					if (fromLookup_row9 != null) {
																						row9 = fromLookup_row9;
																					}

																				} // G
																					// 46

																				forceLooprow9 = false;

																				// ###############################
																				{ // start
																					// of
																					// Var
																					// scope

																					// ###############################
																					// #
																					// Vars
																					// tables

																					Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
																					// ###############################
																					// #
																					// Output
																					// tables

																					to_pat_mapping = null;
																					asdd = null;

																					// #
																					// Output
																					// table
																					// :
																					// 'to_pat_mapping'
																					to_pat_mapping_tmp.PATIENT_IDE = row9.PATIENT_IDE;
																					to_pat_mapping_tmp.PATIENT_IDE_SOURCE = row9.PATIENT_IDE_SOURCE;
																					to_pat_mapping_tmp.PATIENT_NUM = to_patient_mapping.PATIENT_NUM;
																					to_pat_mapping_tmp.PATIENT_IDE_STATUS = row9.PATIENT_IDE_STATUS;
																					to_pat_mapping_tmp.UPLOAD_DATE = row9.UPLOAD_DATE;
																					to_pat_mapping_tmp.UPDATE_DATE = row9.UPDATE_DATE;
																					to_pat_mapping_tmp.DOWNLOAD_DATE = row9.DOWNLOAD_DATE;
																					to_pat_mapping_tmp.IMPORT_DATE = row9.IMPORT_DATE;
																					to_pat_mapping_tmp.SOURCESYSTEM_CD = row9.SOURCESYSTEM_CD;
																					to_pat_mapping_tmp.UPLOAD_ID = row9.UPLOAD_ID;
																					to_pat_mapping = to_pat_mapping_tmp;

																					// #
																					// Output
																					// table
																					// :
																					// 'asdd'
																					asdd_tmp.PATIENT_IDE = row9.PATIENT_IDE;
																					asdd_tmp.PATIENT_IDE_SOURCE = row9.PATIENT_IDE_SOURCE;
																					asdd_tmp.PATIENT_NUM = row9.PATIENT_NUM;
																					asdd_tmp.PATIENT_IDE_STATUS = row9.PATIENT_IDE_STATUS;
																					asdd_tmp.UPLOAD_DATE = row9.UPLOAD_DATE;
																					asdd_tmp.UPDATE_DATE = row9.UPDATE_DATE;
																					asdd_tmp.DOWNLOAD_DATE = row9.DOWNLOAD_DATE;
																					asdd_tmp.IMPORT_DATE = row9.IMPORT_DATE;
																					asdd_tmp.SOURCESYSTEM_CD = row9.SOURCESYSTEM_CD;
																					asdd_tmp.UPLOAD_ID = row9.UPLOAD_ID;
																					asdd = asdd_tmp;
																					// ###############################

																				} // end
																					// of
																					// Var
																					// scope

																				rejectedInnerJoin_tMap_6 = false;

																				tos_count_tMap_6++;

																				/**
																				 * [
																				 * tMap_6
																				 * main
																				 * ]
																				 * stop
																				 */
																				// Start
																				// of
																				// branch
																				// "to_pat_mapping"
																				if (to_pat_mapping != null) {

																					/**
																					 * [
																					 * tUniqRow_2
																					 * main
																					 * ]
																					 * start
																					 */

																					currentComponent = "tUniqRow_2";

																					row12 = null;
																					if (to_pat_mapping.PATIENT_IDE == null) {
																						finder_tUniqRow_2.PATIENT_IDE = null;
																					} else {
																						finder_tUniqRow_2.PATIENT_IDE = to_pat_mapping.PATIENT_IDE
																								.toLowerCase();
																					}
																					if (to_pat_mapping.PATIENT_IDE_SOURCE == null) {
																						finder_tUniqRow_2.PATIENT_IDE_SOURCE = null;
																					} else {
																						finder_tUniqRow_2.PATIENT_IDE_SOURCE = to_pat_mapping.PATIENT_IDE_SOURCE
																								.toLowerCase();
																					}
																					finder_tUniqRow_2.PATIENT_NUM = to_pat_mapping.PATIENT_NUM;
																					finder_tUniqRow_2.hashCodeDirty = true;
																					if (!keystUniqRow_2
																							.contains(finder_tUniqRow_2)) {
																						KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

																						if (to_pat_mapping.PATIENT_IDE == null) {
																							new_tUniqRow_2.PATIENT_IDE = null;
																						} else {
																							new_tUniqRow_2.PATIENT_IDE = to_pat_mapping.PATIENT_IDE
																									.toLowerCase();
																						}
																						if (to_pat_mapping.PATIENT_IDE_SOURCE == null) {
																							new_tUniqRow_2.PATIENT_IDE_SOURCE = null;
																						} else {
																							new_tUniqRow_2.PATIENT_IDE_SOURCE = to_pat_mapping.PATIENT_IDE_SOURCE
																									.toLowerCase();
																						}
																						new_tUniqRow_2.PATIENT_NUM = to_pat_mapping.PATIENT_NUM;

																						keystUniqRow_2
																								.add(new_tUniqRow_2);
																						if (row12 == null) {
																							row12 = new row12Struct();
																						}
																						row12.PATIENT_IDE = to_pat_mapping.PATIENT_IDE;
																						row12.PATIENT_IDE_SOURCE = to_pat_mapping.PATIENT_IDE_SOURCE;
																						row12.PATIENT_NUM = to_pat_mapping.PATIENT_NUM;
																						row12.PATIENT_IDE_STATUS = to_pat_mapping.PATIENT_IDE_STATUS;
																						row12.UPLOAD_DATE = to_pat_mapping.UPLOAD_DATE;
																						row12.UPDATE_DATE = to_pat_mapping.UPDATE_DATE;
																						row12.DOWNLOAD_DATE = to_pat_mapping.DOWNLOAD_DATE;
																						row12.IMPORT_DATE = to_pat_mapping.IMPORT_DATE;
																						row12.SOURCESYSTEM_CD = to_pat_mapping.SOURCESYSTEM_CD;
																						row12.UPLOAD_ID = to_pat_mapping.UPLOAD_ID;
																						nb_uniques_tUniqRow_2++;
																					} else {
																						nb_duplicates_tUniqRow_2++;
																					}

																					tos_count_tUniqRow_2++;

																					/**
																					 * [
																					 * tUniqRow_2
																					 * main
																					 * ]
																					 * stop
																					 */
																					// Start
																					// of
																					// branch
																					// "row12"
																					if (row12 != null) {

																						/**
																						 * [
																						 * tFileOutputDelimited_10
																						 * main
																						 * ]
																						 * start
																						 */

																						currentComponent = "tFileOutputDelimited_10";

																						StringBuilder sb_tFileOutputDelimited_10 = new StringBuilder();

																						if (row12.PATIENT_IDE != null) {

																							sb_tFileOutputDelimited_10
																									.append(

																									row12.PATIENT_IDE

																									);

																						}

																						sb_tFileOutputDelimited_10
																								.append(OUT_DELIM_tFileOutputDelimited_10);

																						if (row12.PATIENT_IDE_SOURCE != null) {

																							sb_tFileOutputDelimited_10
																									.append(

																									row12.PATIENT_IDE_SOURCE

																									);

																						}

																						sb_tFileOutputDelimited_10
																								.append(OUT_DELIM_tFileOutputDelimited_10);

																						if (row12.PATIENT_NUM != null) {

																							sb_tFileOutputDelimited_10
																									.append(

																									row12.PATIENT_NUM
																											.toPlainString()

																									);

																						}

																						sb_tFileOutputDelimited_10
																								.append(OUT_DELIM_tFileOutputDelimited_10);

																						if (row12.PATIENT_IDE_STATUS != null) {

																							sb_tFileOutputDelimited_10
																									.append(

																									row12.PATIENT_IDE_STATUS

																									);

																						}

																						sb_tFileOutputDelimited_10
																								.append(OUT_DELIM_tFileOutputDelimited_10);

																						if (row12.UPLOAD_DATE != null) {

																							sb_tFileOutputDelimited_10
																									.append(

																									FormatterUtils
																											.format_Date(
																													row12.UPLOAD_DATE,
																													"dd-MM-yyyy")

																									);

																						}

																						sb_tFileOutputDelimited_10
																								.append(OUT_DELIM_tFileOutputDelimited_10);

																						if (row12.UPDATE_DATE != null) {

																							sb_tFileOutputDelimited_10
																									.append(

																									FormatterUtils
																											.format_Date(
																													row12.UPDATE_DATE,
																													"dd-MM-yyyy")

																									);

																						}

																						sb_tFileOutputDelimited_10
																								.append(OUT_DELIM_tFileOutputDelimited_10);

																						if (row12.DOWNLOAD_DATE != null) {

																							sb_tFileOutputDelimited_10
																									.append(

																									FormatterUtils
																											.format_Date(
																													row12.DOWNLOAD_DATE,
																													"dd-MM-yyyy")

																									);

																						}

																						sb_tFileOutputDelimited_10
																								.append(OUT_DELIM_tFileOutputDelimited_10);

																						if (row12.IMPORT_DATE != null) {

																							sb_tFileOutputDelimited_10
																									.append(

																									FormatterUtils
																											.format_Date(
																													row12.IMPORT_DATE,
																													"dd-MM-yyyy")

																									);

																						}

																						sb_tFileOutputDelimited_10
																								.append(OUT_DELIM_tFileOutputDelimited_10);

																						if (row12.SOURCESYSTEM_CD != null) {

																							sb_tFileOutputDelimited_10
																									.append(

																									row12.SOURCESYSTEM_CD

																									);

																						}

																						sb_tFileOutputDelimited_10
																								.append(OUT_DELIM_tFileOutputDelimited_10);

																						if (row12.UPLOAD_ID != null) {

																							sb_tFileOutputDelimited_10
																									.append(

																									row12.UPLOAD_ID

																									);

																						}

																						sb_tFileOutputDelimited_10
																								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_10);

																						nb_line_tFileOutputDelimited_10++;

																						outtFileOutputDelimited_10
																								.write(sb_tFileOutputDelimited_10
																										.toString());

																						tos_count_tFileOutputDelimited_10++;

																						/**
																						 * [
																						 * tFileOutputDelimited_10
																						 * main
																						 * ]
																						 * stop
																						 */

																					} // End
																						// of
																						// branch
																						// "row12"

																				} // End
																					// of
																					// branch
																					// "to_pat_mapping"

																				// Start
																				// of
																				// branch
																				// "asdd"
																				if (asdd != null) {

																					/**
																					 * [
																					 * tMap_7
																					 * main
																					 * ]
																					 * start
																					 */

																					currentComponent = "tMap_7";

																					boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;

																					// ###############################
																					// #
																					// Input
																					// tables
																					// (lookups)
																					boolean rejectedInnerJoin_tMap_7 = false;
																					boolean mainRowRejected_tMap_7 = false;

																					// /////////////////////////////////////////////
																					// Starting
																					// Lookup
																					// Table
																					// "row10"
																					// /////////////////////////////////////////////

																					boolean forceLooprow10 = false;

																					row10Struct row10ObjectFromLookup = null;

																					if (!rejectedInnerJoin_tMap_7) { // G_TM_M_020

																						hasCasePrimitiveKeyWithNull_tMap_7 = false;

																						row10HashKey.PATIENT_NUM = asdd.PATIENT_NUM;

																						row10HashKey.hashCodeDirty = true;

																						tHash_Lookup_row10
																								.lookup(row10HashKey);

																					} // G_TM_M_020

																					if (tHash_Lookup_row10 != null
																							&& tHash_Lookup_row10
																									.getCount(row10HashKey) > 1) { // G
																																	// 071

																						// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row10' and it contains more one result from keys :  row10.PATIENT_NUM = '"
																						// +
																						// row10HashKey.PATIENT_NUM
																						// +
																						// "'");
																					} // G
																						// 071

																					row10Struct row10 = null;

																					row10Struct fromLookup_row10 = null;
																					row10 = row10Default;

																					if (tHash_Lookup_row10 != null
																							&& tHash_Lookup_row10
																									.hasNext()) { // G
																													// 099

																						fromLookup_row10 = tHash_Lookup_row10
																								.next();

																					} // G
																						// 099

																					if (fromLookup_row10 != null) {
																						row10 = fromLookup_row10;
																					}

																					// ###############################
																					{ // start
																						// of
																						// Var
																						// scope

																						// ###############################
																						// #
																						// Vars
																						// tables

																						Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
																						// ###############################
																						// #
																						// Output
																						// tables

																						asd = null;

																						// #
																						// Output
																						// table
																						// :
																						// 'asd'
																						asd_tmp.PATIENT_NUM = row10.PATIENT_NUM;
																						asd_tmp.VITAL_STATUS_CD = row10.VITAL_STATUS_CD;
																						asd_tmp.BIRTH_DATE = row10.BIRTH_DATE;
																						asd_tmp.DEATH_DATE = row10.DEATH_DATE;
																						asd_tmp.SEX_CD = row10.SEX_CD;
																						asd_tmp.AGE_IN_YEARS_NUM = row10.AGE_IN_YEARS_NUM;
																						asd_tmp.LANGUAGE_CD = row10.LANGUAGE_CD;
																						asd_tmp.RACE_CD = row10.RACE_CD;
																						asd_tmp.MARITAL_STATUS_CD = row10.MARITAL_STATUS_CD;
																						asd_tmp.RELIGION_CD = row10.RELIGION_CD;
																						asd_tmp.ZIP_CD = row10.ZIP_CD;
																						asd_tmp.STATECITYZIP_PATH = row10.STATECITYZIP_PATH;
																						asd_tmp.INCOME_CD = row10.INCOME_CD;
																						asd_tmp.PATIENT_BLOB = row10.PATIENT_BLOB;
																						asd_tmp.UPDATE_DATE = row10.UPDATE_DATE;
																						asd_tmp.DOWNLOAD_DATE = row10.DOWNLOAD_DATE;
																						asd_tmp.IMPORT_DATE = row10.IMPORT_DATE;
																						asd_tmp.SOURCESYSTEM_CD = row10.SOURCESYSTEM_CD;
																						asd_tmp.UPLOAD_ID = row10.UPLOAD_ID;
																						asd = asd_tmp;
																						// ###############################

																					} // end
																						// of
																						// Var
																						// scope

																					rejectedInnerJoin_tMap_7 = false;

																					tos_count_tMap_7++;

																					/**
																					 * [
																					 * tMap_7
																					 * main
																					 * ]
																					 * stop
																					 */
																					// Start
																					// of
																					// branch
																					// "asd"
																					if (asd != null) {

																						/**
																						 * [
																						 * tUniqRow_1
																						 * main
																						 * ]
																						 * start
																						 */

																						currentComponent = "tUniqRow_1";

																						row11 = null;
																						finder_tUniqRow_1.PATIENT_NUM = asd.PATIENT_NUM;
																						finder_tUniqRow_1.hashCodeDirty = true;
																						if (!keystUniqRow_1
																								.contains(finder_tUniqRow_1)) {
																							KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

																							new_tUniqRow_1.PATIENT_NUM = asd.PATIENT_NUM;

																							keystUniqRow_1
																									.add(new_tUniqRow_1);
																							if (row11 == null) {
																								row11 = new row11Struct();
																							}
																							row11.PATIENT_NUM = asd.PATIENT_NUM;
																							row11.VITAL_STATUS_CD = asd.VITAL_STATUS_CD;
																							row11.BIRTH_DATE = asd.BIRTH_DATE;
																							row11.DEATH_DATE = asd.DEATH_DATE;
																							row11.SEX_CD = asd.SEX_CD;
																							row11.AGE_IN_YEARS_NUM = asd.AGE_IN_YEARS_NUM;
																							row11.LANGUAGE_CD = asd.LANGUAGE_CD;
																							row11.RACE_CD = asd.RACE_CD;
																							row11.MARITAL_STATUS_CD = asd.MARITAL_STATUS_CD;
																							row11.RELIGION_CD = asd.RELIGION_CD;
																							row11.ZIP_CD = asd.ZIP_CD;
																							row11.STATECITYZIP_PATH = asd.STATECITYZIP_PATH;
																							row11.INCOME_CD = asd.INCOME_CD;
																							row11.PATIENT_BLOB = asd.PATIENT_BLOB;
																							row11.UPDATE_DATE = asd.UPDATE_DATE;
																							row11.DOWNLOAD_DATE = asd.DOWNLOAD_DATE;
																							row11.IMPORT_DATE = asd.IMPORT_DATE;
																							row11.SOURCESYSTEM_CD = asd.SOURCESYSTEM_CD;
																							row11.UPLOAD_ID = asd.UPLOAD_ID;
																							nb_uniques_tUniqRow_1++;
																						} else {
																							nb_duplicates_tUniqRow_1++;
																						}

																						tos_count_tUniqRow_1++;

																						/**
																						 * [
																						 * tUniqRow_1
																						 * main
																						 * ]
																						 * stop
																						 */
																						// Start
																						// of
																						// branch
																						// "row11"
																						if (row11 != null) {

																							/**
																							 * [
																							 * tFileOutputDelimited_11
																							 * main
																							 * ]
																							 * start
																							 */

																							currentComponent = "tFileOutputDelimited_11";

																							StringBuilder sb_tFileOutputDelimited_11 = new StringBuilder();

																							if (row11.PATIENT_NUM != null) {

																								sb_tFileOutputDelimited_11
																										.append(

																										row11.PATIENT_NUM
																												.toPlainString()

																										);

																							}

																							sb_tFileOutputDelimited_11
																									.append(OUT_DELIM_tFileOutputDelimited_11);

																							if (row11.VITAL_STATUS_CD != null) {

																								sb_tFileOutputDelimited_11
																										.append(

																										row11.VITAL_STATUS_CD

																										);

																							}

																							sb_tFileOutputDelimited_11
																									.append(OUT_DELIM_tFileOutputDelimited_11);

																							if (row11.BIRTH_DATE != null) {

																								sb_tFileOutputDelimited_11
																										.append(

																										row11.BIRTH_DATE

																										);

																							}

																							sb_tFileOutputDelimited_11
																									.append(OUT_DELIM_tFileOutputDelimited_11);

																							if (row11.DEATH_DATE != null) {

																								sb_tFileOutputDelimited_11
																										.append(

																										row11.DEATH_DATE

																										);

																							}

																							sb_tFileOutputDelimited_11
																									.append(OUT_DELIM_tFileOutputDelimited_11);

																							if (row11.SEX_CD != null) {

																								sb_tFileOutputDelimited_11
																										.append(

																										row11.SEX_CD

																										);

																							}

																							sb_tFileOutputDelimited_11
																									.append(OUT_DELIM_tFileOutputDelimited_11);

																							if (row11.AGE_IN_YEARS_NUM != null) {

																								sb_tFileOutputDelimited_11
																										.append(

																										row11.AGE_IN_YEARS_NUM

																										);

																							}

																							sb_tFileOutputDelimited_11
																									.append(OUT_DELIM_tFileOutputDelimited_11);

																							if (row11.LANGUAGE_CD != null) {

																								sb_tFileOutputDelimited_11
																										.append(

																										row11.LANGUAGE_CD

																										);

																							}

																							sb_tFileOutputDelimited_11
																									.append(OUT_DELIM_tFileOutputDelimited_11);

																							if (row11.RACE_CD != null) {

																								sb_tFileOutputDelimited_11
																										.append(

																										row11.RACE_CD

																										);

																							}

																							sb_tFileOutputDelimited_11
																									.append(OUT_DELIM_tFileOutputDelimited_11);

																							if (row11.MARITAL_STATUS_CD != null) {

																								sb_tFileOutputDelimited_11
																										.append(

																										row11.MARITAL_STATUS_CD

																										);

																							}

																							sb_tFileOutputDelimited_11
																									.append(OUT_DELIM_tFileOutputDelimited_11);

																							if (row11.RELIGION_CD != null) {

																								sb_tFileOutputDelimited_11
																										.append(

																										row11.RELIGION_CD

																										);

																							}

																							sb_tFileOutputDelimited_11
																									.append(OUT_DELIM_tFileOutputDelimited_11);

																							if (row11.ZIP_CD != null) {

																								sb_tFileOutputDelimited_11
																										.append(

																										row11.ZIP_CD

																										);

																							}

																							sb_tFileOutputDelimited_11
																									.append(OUT_DELIM_tFileOutputDelimited_11);

																							if (row11.STATECITYZIP_PATH != null) {

																								sb_tFileOutputDelimited_11
																										.append(

																										row11.STATECITYZIP_PATH

																										);

																							}

																							sb_tFileOutputDelimited_11
																									.append(OUT_DELIM_tFileOutputDelimited_11);

																							if (row11.INCOME_CD != null) {

																								sb_tFileOutputDelimited_11
																										.append(

																										row11.INCOME_CD

																										);

																							}

																							sb_tFileOutputDelimited_11
																									.append(OUT_DELIM_tFileOutputDelimited_11);

																							if (row11.PATIENT_BLOB != null) {

																								sb_tFileOutputDelimited_11
																										.append(

																										row11.PATIENT_BLOB

																										);

																							}

																							sb_tFileOutputDelimited_11
																									.append(OUT_DELIM_tFileOutputDelimited_11);

																							if (row11.UPDATE_DATE != null) {

																								sb_tFileOutputDelimited_11
																										.append(

																										FormatterUtils
																												.format_Date(
																														row11.UPDATE_DATE,
																														"dd-MM-yyyy")

																										);

																							}

																							sb_tFileOutputDelimited_11
																									.append(OUT_DELIM_tFileOutputDelimited_11);

																							if (row11.DOWNLOAD_DATE != null) {

																								sb_tFileOutputDelimited_11
																										.append(

																										FormatterUtils
																												.format_Date(
																														row11.DOWNLOAD_DATE,
																														"dd-MM-yyyy")

																										);

																							}

																							sb_tFileOutputDelimited_11
																									.append(OUT_DELIM_tFileOutputDelimited_11);

																							if (row11.IMPORT_DATE != null) {

																								sb_tFileOutputDelimited_11
																										.append(

																										FormatterUtils
																												.format_Date(
																														row11.IMPORT_DATE,
																														"dd-MM-yyyy")

																										);

																							}

																							sb_tFileOutputDelimited_11
																									.append(OUT_DELIM_tFileOutputDelimited_11);

																							if (row11.SOURCESYSTEM_CD != null) {

																								sb_tFileOutputDelimited_11
																										.append(

																										row11.SOURCESYSTEM_CD

																										);

																							}

																							sb_tFileOutputDelimited_11
																									.append(OUT_DELIM_tFileOutputDelimited_11);

																							if (row11.UPLOAD_ID != null) {

																								sb_tFileOutputDelimited_11
																										.append(

																										row11.UPLOAD_ID

																										);

																							}

																							sb_tFileOutputDelimited_11
																									.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_11);

																							nb_line_tFileOutputDelimited_11++;

																							outtFileOutputDelimited_11
																									.write(sb_tFileOutputDelimited_11
																											.toString());

																							tos_count_tFileOutputDelimited_11++;

																							/**
																							 * [
																							 * tFileOutputDelimited_11
																							 * main
																							 * ]
																							 * stop
																							 */

																						} // End
																							// of
																							// branch
																							// "row11"

																					} // End
																						// of
																						// branch
																						// "asd"

																				} // End
																					// of
																					// branch
																					// "asdd"

																			} // close
																				// loop
																				// of
																				// lookup
																				// 'row9'
																				// //
																				// G_TM_M_043

																		} // End
																			// of
																			// branch
																			// "to_patient_mapping"

																	} // end of
																		// joined
																		// table
																		// loop
																	asddd_List
																			.clear();

																} // End of
																	// branch
																	// "asddd"

															} // end of joined
																// table loop
															out1_List.clear();

														} // End of branch
															// "out1"

													} // End of branch
														// "to_obs_fct"

												} // close loop of lookup
													// 'from_srxc_obsfct' //
													// G_TM_M_043

											} // End of branch "to_tmap"

										} // close loop of lookup
											// 'from_src_conc_dim' // G_TM_M_043

									} // End of branch "from_oe_target_ont"

									/**
									 * [tFileInputDelimited_5 end ] start
									 */

									currentComponent = "tFileInputDelimited_5";

								}
							} finally {
								if (!((Object) (((String) globalMap
										.get("tCreateTemporaryFile_1_FILEPATH"))) instanceof java.io.InputStream)) {
									if (fid_tFileInputDelimited_5 != null) {
										fid_tFileInputDelimited_5.close();
									}
								}
								if (fid_tFileInputDelimited_5 != null) {
									globalMap.put(
											"tFileInputDelimited_5_NB_LINE",
											fid_tFileInputDelimited_5
													.getRowNumber());
								}
							}

							ok_Hash.put("tFileInputDelimited_5", true);
							end_Hash.put("tFileInputDelimited_5",
									System.currentTimeMillis());

							/**
							 * [tFileInputDelimited_5 end ] stop
							 */

							/**
							 * [tMap_3 end ] start
							 */

							currentComponent = "tMap_3";

							// ###############################
							// # Lookup hashes releasing
							if (tHash_Lookup_from_src_conc_dim != null) {
								tHash_Lookup_from_src_conc_dim.endGet();
							}
							globalMap.remove("tHash_Lookup_from_src_conc_dim");

							// ###############################

							ok_Hash.put("tMap_3", true);
							end_Hash.put("tMap_3", System.currentTimeMillis());

							/**
							 * [tMap_3 end ] stop
							 */

							/**
							 * [tMap_4 end ] start
							 */

							currentComponent = "tMap_4";

							// ###############################
							// # Lookup hashes releasing
							if (tHash_Lookup_from_srxc_obsfct != null) {
								tHash_Lookup_from_srxc_obsfct.endGet();
							}
							globalMap.remove("tHash_Lookup_from_srxc_obsfct");

							// ###############################

							ok_Hash.put("tMap_4", true);
							end_Hash.put("tMap_4", System.currentTimeMillis());

							/**
							 * [tMap_4 end ] stop
							 */

							/**
							 * [tMap_9 end ] start
							 */

							currentComponent = "tMap_9";

							// ###############################
							// # Lookup hashes releasing
							if (tHash_Lookup_row15 != null) {
								tHash_Lookup_row15.endGet();
							}
							globalMap.remove("tHash_Lookup_row15");

							if (tHash_Lookup_row14 != null) {
								tHash_Lookup_row14.endGet();
							}
							globalMap.remove("tHash_Lookup_row14");

							// ###############################

							ok_Hash.put("tMap_9", true);
							end_Hash.put("tMap_9", System.currentTimeMillis());

							/**
							 * [tMap_9 end ] stop
							 */

							/**
							 * [tMap_8 end ] start
							 */

							currentComponent = "tMap_8";

							// ###############################
							// # Lookup hashes releasing
							if (tHash_Lookup_row16 != null) {
								tHash_Lookup_row16.endGet();
							}
							globalMap.remove("tHash_Lookup_row16");

							if (tHash_Lookup_row17 != null) {
								tHash_Lookup_row17.endGet();
							}
							globalMap.remove("tHash_Lookup_row17");

							// ###############################

							ok_Hash.put("tMap_8", true);
							end_Hash.put("tMap_8", System.currentTimeMillis());

							/**
							 * [tMap_8 end ] stop
							 */

							/**
							 * [tJavaRow_2 end ] start
							 */

							currentComponent = "tJavaRow_2";

							globalMap.put("tJavaRow_2_NB_LINE",
									nb_line_tJavaRow_2);

							ok_Hash.put("tJavaRow_2", true);
							end_Hash.put("tJavaRow_2",
									System.currentTimeMillis());

							/**
							 * [tJavaRow_2 end ] stop
							 */

							/**
							 * [tMap_5 end ] start
							 */

							currentComponent = "tMap_5";

							// ###############################
							// # Lookup hashes releasing
							// ###############################

							ok_Hash.put("tMap_5", true);
							end_Hash.put("tMap_5", System.currentTimeMillis());

							/**
							 * [tMap_5 end ] stop
							 */

							/**
							 * [tMap_6 end ] start
							 */

							currentComponent = "tMap_6";

							// ###############################
							// # Lookup hashes releasing
							if (tHash_Lookup_row9 != null) {
								tHash_Lookup_row9.endGet();
							}
							globalMap.remove("tHash_Lookup_row9");

							// ###############################

							ok_Hash.put("tMap_6", true);
							end_Hash.put("tMap_6", System.currentTimeMillis());

							/**
							 * [tMap_6 end ] stop
							 */

							/**
							 * [tMap_7 end ] start
							 */

							currentComponent = "tMap_7";

							// ###############################
							// # Lookup hashes releasing
							if (tHash_Lookup_row10 != null) {
								tHash_Lookup_row10.endGet();
							}
							globalMap.remove("tHash_Lookup_row10");

							// ###############################

							ok_Hash.put("tMap_7", true);
							end_Hash.put("tMap_7", System.currentTimeMillis());

							/**
							 * [tMap_7 end ] stop
							 */

							/**
							 * [tUniqRow_1 end ] start
							 */

							currentComponent = "tUniqRow_1";

							globalMap.put("tUniqRow_1_NB_UNIQUES",
									nb_uniques_tUniqRow_1);
							globalMap.put("tUniqRow_1_NB_DUPLICATES",
									nb_duplicates_tUniqRow_1);

							ok_Hash.put("tUniqRow_1", true);
							end_Hash.put("tUniqRow_1",
									System.currentTimeMillis());

							/**
							 * [tUniqRow_1 end ] stop
							 */

							/**
							 * [tFileOutputDelimited_11 end ] start
							 */

							currentComponent = "tFileOutputDelimited_11";

						} finally {
							if (outtFileOutputDelimited_11 != null) {
								outtFileOutputDelimited_11.flush();
								outtFileOutputDelimited_11.close();
							}
							globalMap.put("tFileOutputDelimited_11_NB_LINE",
									nb_line_tFileOutputDelimited_11);
							globalMap.put("tFileOutputDelimited_11_FILE_NAME",
									fileName_tFileOutputDelimited_11);
						} // finally

						ok_Hash.put("tFileOutputDelimited_11", true);
						end_Hash.put("tFileOutputDelimited_11",
								System.currentTimeMillis());

						/**
						 * [tFileOutputDelimited_11 end ] stop
						 */

						/**
						 * [tUniqRow_2 end ] start
						 */

						currentComponent = "tUniqRow_2";

						globalMap.put("tUniqRow_2_NB_UNIQUES",
								nb_uniques_tUniqRow_2);
						globalMap.put("tUniqRow_2_NB_DUPLICATES",
								nb_duplicates_tUniqRow_2);

						ok_Hash.put("tUniqRow_2", true);
						end_Hash.put("tUniqRow_2", System.currentTimeMillis());

						/**
						 * [tUniqRow_2 end ] stop
						 */

						/**
						 * [tFileOutputDelimited_10 end ] start
						 */

						currentComponent = "tFileOutputDelimited_10";

					} finally {
						if (outtFileOutputDelimited_10 != null) {
							outtFileOutputDelimited_10.flush();
							outtFileOutputDelimited_10.close();
						}
						globalMap.put("tFileOutputDelimited_10_NB_LINE",
								nb_line_tFileOutputDelimited_10);
						globalMap.put("tFileOutputDelimited_10_FILE_NAME",
								fileName_tFileOutputDelimited_10);
					} // finally

					ok_Hash.put("tFileOutputDelimited_10", true);
					end_Hash.put("tFileOutputDelimited_10",
							System.currentTimeMillis());

					/**
					 * [tFileOutputDelimited_10 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_6 end ] start
					 */

					currentComponent = "tFileOutputDelimited_6";

				} finally {
					if (outtFileOutputDelimited_6 != null) {
						outtFileOutputDelimited_6.flush();
						outtFileOutputDelimited_6.close();
					}
					globalMap.put("tFileOutputDelimited_6_NB_LINE",
							nb_line_tFileOutputDelimited_6);
					globalMap.put("tFileOutputDelimited_6_FILE_NAME",
							fileName_tFileOutputDelimited_6);
				} // finally

				ok_Hash.put("tFileOutputDelimited_6", true);
				end_Hash.put("tFileOutputDelimited_6",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_6 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_5:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCClose_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		} finally {
			// free memory for "tMap_7"
			globalMap.remove("tHash_Lookup_row10");

			// free memory for "tMap_6"
			globalMap.remove("tHash_Lookup_row9");

			// free memory for "tMap_8"
			globalMap.remove("tHash_Lookup_row16");

			// free memory for "tMap_8"
			globalMap.remove("tHash_Lookup_row17");

			// free memory for "tMap_9"
			globalMap.remove("tHash_Lookup_row14");

			// free memory for "tMap_9"
			globalMap.remove("tHash_Lookup_row15");

			// free memory for "tMap_4"
			globalMap.remove("tHash_Lookup_from_srxc_obsfct");

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_from_src_conc_dim");

		}

		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 1);
	}

	public void tJDBCClose_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCClose_1 begin ] start
				 */

				ok_Hash.put("tJDBCClose_1", false);
				start_Hash.put("tJDBCClose_1", System.currentTimeMillis());
				currentComponent = "tJDBCClose_1";

				int tos_count_tJDBCClose_1 = 0;

				/**
				 * [tJDBCClose_1 begin ] stop
				 */
				/**
				 * [tJDBCClose_1 main ] start
				 */

				currentComponent = "tJDBCClose_1";

				java.sql.Connection conn_tJDBCClose_1 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				if (null == conn_tJDBCClose_1) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCClose_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					if (dataSources_tJDBCClose_1 != null) {
						if (dataSources_tJDBCClose_1.get("") != null) {
							conn_tJDBCClose_1 = dataSources_tJDBCClose_1
									.get("").getConnection();
						}
					}
				}

				if (conn_tJDBCClose_1 != null && !conn_tJDBCClose_1.isClosed()) {
					conn_tJDBCClose_1.close();
				}

				tos_count_tJDBCClose_1++;

				/**
				 * [tJDBCClose_1 main ] stop
				 */
				/**
				 * [tJDBCClose_1 end ] start
				 */

				currentComponent = "tJDBCClose_1";

				ok_Hash.put("tJDBCClose_1", true);
				end_Hash.put("tJDBCClose_1", System.currentTimeMillis());

				/**
				 * [tJDBCClose_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCClose_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tRunJob_3Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCClose_1_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_3 begin ] start
				 */

				ok_Hash.put("tRunJob_3", false);
				start_Hash.put("tRunJob_3", System.currentTimeMillis());
				currentComponent = "tRunJob_3";

				int tos_count_tRunJob_3 = 0;

				/**
				 * [tRunJob_3 begin ] stop
				 */
				/**
				 * [tRunJob_3 main ] start
				 */

				currentComponent = "tRunJob_3";

				java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();
				paraList_tRunJob_3.add("--father_pid=" + pid);

				paraList_tRunJob_3.add("--root_pid=" + rootPid);

				paraList_tRunJob_3.add("--father_node=tRunJob_3");

				paraList_tRunJob_3.add("--context=Default");

				// for feature:10589
				paraList_tRunJob_3.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_3.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_3 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_3 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_3".equals(tRunJobName_tRunJob_3)
						&& childResumePath_tRunJob_3 != null) {
					paraList_tRunJob_3
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_3.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_3");

				java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_3 = null;

				obj_tRunJob_3 = context.DB_TargetI2B2_Host;
				paraList_tRunJob_3.add("--context_param DBHost="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
				parentContextMap_tRunJob_3.put("DBHost", obj_tRunJob_3);
				obj_tRunJob_3 = context.DB_TargetI2B2_Instance;
				paraList_tRunJob_3.add("--context_param DBInstance="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
				parentContextMap_tRunJob_3.put("DBInstance", obj_tRunJob_3);
				obj_tRunJob_3 = context.DB_TargetI2B2_Port;
				paraList_tRunJob_3.add("--context_param DBPort="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
				parentContextMap_tRunJob_3.put("DBPort", obj_tRunJob_3);
				obj_tRunJob_3 = context.DB_TargetI2B2_Password;
				paraList_tRunJob_3.add("--context_param DBPassword="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
				parentContextMap_tRunJob_3.put("DBPassword", obj_tRunJob_3);
				obj_tRunJob_3 = context.DB_TargetI2B2_Schema;
				paraList_tRunJob_3.add("--context_param DBSchema="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
				parentContextMap_tRunJob_3.put("DBSchema", obj_tRunJob_3);
				obj_tRunJob_3 = context.DB_TargetI2B2_Username;
				paraList_tRunJob_3.add("--context_param DBUsername="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
				parentContextMap_tRunJob_3.put("DBUsername", obj_tRunJob_3);
				tos.idrt_truncate_tables_0_1.IDRT_Truncate_Tables childJob_tRunJob_3 = new tos.idrt_truncate_tables_0_1.IDRT_Truncate_Tables();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_3) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_3 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_3 : talendDataSources_tRunJob_3
							.entrySet()) {
						dataSources_tRunJob_3.put(
								talendDataSourceEntry_tRunJob_3.getKey(),
								talendDataSourceEntry_tRunJob_3.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_3.setDataSources(dataSources_tRunJob_3);
				}
				childJob_tRunJob_3.parentContextMap = parentContextMap_tRunJob_3;
				String[][] childReturn_tRunJob_3 = childJob_tRunJob_3
						.runJob((String[]) paraList_tRunJob_3
								.toArray(new String[paraList_tRunJob_3.size()]));
				errorCode = childJob_tRunJob_3.getErrorCode();

				if (childJob_tRunJob_3.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_3_CHILD_RETURN_CODE",
							childJob_tRunJob_3.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_3
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_3_CHILD_RETURN_CODE",
							childJob_tRunJob_3.getErrorCode());
				}
				if (childJob_tRunJob_3.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_3.getExceptionStackTrace());
				}

				if (childJob_tRunJob_3.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_3.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_3++;

				/**
				 * [tRunJob_3 main ] stop
				 */
				/**
				 * [tRunJob_3 end ] start
				 */

				currentComponent = "tRunJob_3";

				ok_Hash.put("tRunJob_3", true);
				end_Hash.put("tRunJob_3", System.currentTimeMillis());

				/**
				 * [tRunJob_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tRunJob_3:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tRunJob_2Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_2 begin ] start
				 */

				ok_Hash.put("tRunJob_2", false);
				start_Hash.put("tRunJob_2", System.currentTimeMillis());
				currentComponent = "tRunJob_2";

				int tos_count_tRunJob_2 = 0;

				/**
				 * [tRunJob_2 begin ] stop
				 */
				/**
				 * [tRunJob_2 main ] start
				 */

				currentComponent = "tRunJob_2";

				java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();
				paraList_tRunJob_2.add("--father_pid=" + pid);

				paraList_tRunJob_2.add("--root_pid=" + rootPid);

				paraList_tRunJob_2.add("--father_node=tRunJob_2");

				paraList_tRunJob_2.add("--context=Default");

				// for feature:10589
				paraList_tRunJob_2.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_2.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_2 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_2 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_2".equals(tRunJobName_tRunJob_2)
						&& childResumePath_tRunJob_2 != null) {
					paraList_tRunJob_2
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_2");

				java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_2 = null;

				obj_tRunJob_2 = context.DB_TargetI2B2_Host;
				paraList_tRunJob_2.add("--context_param DBHost="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
				parentContextMap_tRunJob_2.put("DBHost", obj_tRunJob_2);
				obj_tRunJob_2 = context.DB_TargetI2B2_Instance;
				paraList_tRunJob_2.add("--context_param DBInstance="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
				parentContextMap_tRunJob_2.put("DBInstance", obj_tRunJob_2);
				obj_tRunJob_2 = context.DB_TargetI2B2_Port;
				paraList_tRunJob_2.add("--context_param DBPort="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
				parentContextMap_tRunJob_2.put("DBPort", obj_tRunJob_2);
				obj_tRunJob_2 = context.DB_TargetI2B2_Password;
				paraList_tRunJob_2.add("--context_param DBPassword="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
				parentContextMap_tRunJob_2.put("DBPassword", obj_tRunJob_2);
				obj_tRunJob_2 = context.DB_TargetI2B2_Schema;
				paraList_tRunJob_2.add("--context_param DBSchema="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
				parentContextMap_tRunJob_2.put("DBSchema", obj_tRunJob_2);
				obj_tRunJob_2 = context.folderMain;
				paraList_tRunJob_2.add("--context_param folderMain="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
				parentContextMap_tRunJob_2.put("folderMain", obj_tRunJob_2);
				obj_tRunJob_2 = "output/";
				paraList_tRunJob_2.add("--context_param folderOutput="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
				parentContextMap_tRunJob_2.put("folderOutput", obj_tRunJob_2);
				tos.idrt_jdbc_upload_1_0.IDRT_JDBC_Upload childJob_tRunJob_2 = new tos.idrt_jdbc_upload_1_0.IDRT_JDBC_Upload();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_2) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
							.entrySet()) {
						dataSources_tRunJob_2.put(
								talendDataSourceEntry_tRunJob_2.getKey(),
								talendDataSourceEntry_tRunJob_2.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
				}
				childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;
				String[][] childReturn_tRunJob_2 = childJob_tRunJob_2
						.runJob((String[]) paraList_tRunJob_2
								.toArray(new String[paraList_tRunJob_2.size()]));
				errorCode = childJob_tRunJob_2.getErrorCode();

				if (childJob_tRunJob_2.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_2_CHILD_RETURN_CODE",
							childJob_tRunJob_2.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_2
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_2_CHILD_RETURN_CODE",
							childJob_tRunJob_2.getErrorCode());
				}
				if (childJob_tRunJob_2.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_2.getExceptionStackTrace());
				}

				if (childJob_tRunJob_2.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_2.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_2++;

				/**
				 * [tRunJob_2 main ] stop
				 */
				/**
				 * [tRunJob_2 end ] start
				 */

				currentComponent = "tRunJob_2";

				ok_Hash.put("tRunJob_2", true);
				end_Hash.put("tRunJob_2", System.currentTimeMillis());

				/**
				 * [tRunJob_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}

	public static class from_src_ontStruct implements
			routines.system.IPersistableComparableLookupRow<from_src_ontStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal C_HLEVEL;

		public BigDecimal getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String C_SYNONYM_CD;

		public String getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public BigDecimal C_TOTALNUM;

		public BigDecimal getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public String C_COLUMNDATATYPE;

		public String getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public Object C_COMMENT;

		public Object getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.C_FULLNAME == null) ? 0 : this.C_FULLNAME
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final from_src_ontStruct other = (from_src_ontStruct) obj;

			if (this.C_FULLNAME == null) {
				if (other.C_FULLNAME != null)
					return false;
			} else if (!this.C_FULLNAME.equals(other.C_FULLNAME))
				return false;

			return true;
		}

		public void copyDataTo(from_src_ontStruct other) {

			other.C_HLEVEL = this.C_HLEVEL;
			other.C_FULLNAME = this.C_FULLNAME;
			other.C_NAME = this.C_NAME;
			other.C_SYNONYM_CD = this.C_SYNONYM_CD;
			other.C_VISUALATTRIBUTES = this.C_VISUALATTRIBUTES;
			other.C_TOTALNUM = this.C_TOTALNUM;
			other.C_BASECODE = this.C_BASECODE;
			other.C_METADATAXML = this.C_METADATAXML;
			other.C_FACTTABLECOLUMN = this.C_FACTTABLECOLUMN;
			other.C_TABLENAME = this.C_TABLENAME;
			other.C_COLUMNNAME = this.C_COLUMNNAME;
			other.C_COLUMNDATATYPE = this.C_COLUMNDATATYPE;
			other.C_OPERATOR = this.C_OPERATOR;
			other.C_DIMCODE = this.C_DIMCODE;
			other.C_COMMENT = this.C_COMMENT;
			other.C_TOOLTIP = this.C_TOOLTIP;
			other.M_APPLIED_PATH = this.M_APPLIED_PATH;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.VALUETYPE_CD = this.VALUETYPE_CD;
			other.M_EXCLUSION_CD = this.M_EXCLUSION_CD;
			other.C_PATH = this.C_PATH;
			other.C_SYMBOL = this.C_SYMBOL;

		}

		public void copyKeysDataTo(from_src_ontStruct other) {

			other.C_FULLNAME = this.C_FULLNAME;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.C_FULLNAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.C_FULLNAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.C_HLEVEL = (BigDecimal) ois.readObject();

				this.C_NAME = readString(dis, ois);

				this.C_SYNONYM_CD = readString(dis, ois);

				this.C_VISUALATTRIBUTES = readString(dis, ois);

				this.C_TOTALNUM = (BigDecimal) ois.readObject();

				this.C_BASECODE = readString(dis, ois);

				this.C_METADATAXML = readString(dis, ois);

				this.C_FACTTABLECOLUMN = readString(dis, ois);

				this.C_TABLENAME = readString(dis, ois);

				this.C_COLUMNNAME = readString(dis, ois);

				this.C_COLUMNDATATYPE = readString(dis, ois);

				this.C_OPERATOR = readString(dis, ois);

				this.C_DIMCODE = readString(dis, ois);

				this.C_COMMENT = (Object) ois.readObject();

				this.C_TOOLTIP = readString(dis, ois);

				this.M_APPLIED_PATH = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.VALUETYPE_CD = readString(dis, ois);

				this.M_EXCLUSION_CD = readString(dis, ois);

				this.C_PATH = readString(dis, ois);

				this.C_SYMBOL = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				oos.writeObject(this.C_HLEVEL);

				writeString(this.C_NAME, dos, oos);

				writeString(this.C_SYNONYM_CD, dos, oos);

				writeString(this.C_VISUALATTRIBUTES, dos, oos);

				oos.writeObject(this.C_TOTALNUM);

				writeString(this.C_BASECODE, dos, oos);

				writeString(this.C_METADATAXML, dos, oos);

				writeString(this.C_FACTTABLECOLUMN, dos, oos);

				writeString(this.C_TABLENAME, dos, oos);

				writeString(this.C_COLUMNNAME, dos, oos);

				writeString(this.C_COLUMNDATATYPE, dos, oos);

				writeString(this.C_OPERATOR, dos, oos);

				writeString(this.C_DIMCODE, dos, oos);

				oos.writeObject(this.C_COMMENT);

				writeString(this.C_TOOLTIP, dos, oos);

				writeString(this.M_APPLIED_PATH, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.VALUETYPE_CD, dos, oos);

				writeString(this.M_EXCLUSION_CD, dos, oos);

				writeString(this.C_PATH, dos, oos);

				writeString(this.C_SYMBOL, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + C_SYNONYM_CD);
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + String.valueOf(C_TOTALNUM));
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + C_COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + String.valueOf(C_COMMENT));
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(from_src_ontStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.C_FULLNAME,
					other.C_FULLNAME);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				from_src_ontStruct from_src_ont = new from_src_ontStruct();

				/**
				 * [tAdvancedHash_from_src_ont begin ] start
				 */

				ok_Hash.put("tAdvancedHash_from_src_ont", false);
				start_Hash.put("tAdvancedHash_from_src_ont",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_from_src_ont";

				int tos_count_tAdvancedHash_from_src_ont = 0;

				// connection name:from_src_ont
				// source node:tFileInputDelimited_2 -
				// inputs:(after_tFileInputDelimited_1)
				// outputs:(from_src_ont,from_src_ont) | target
				// node:tAdvancedHash_from_src_ont - inputs:(from_src_ont)
				// outputs:()
				// linked node: tMap_1 - inputs:(from_OE_ONT,from_src_ont)
				// outputs:(target_ont,to_cd_dim)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_from_src_ont = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<from_src_ontStruct> tHash_Lookup_from_src_ont = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<from_src_ontStruct> getLookup(matchingModeEnum_from_src_ont);

				globalMap.put("tHash_Lookup_from_src_ont",
						tHash_Lookup_from_src_ont);

				/**
				 * [tAdvancedHash_from_src_ont begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				try {

					Object filename_tFileInputDelimited_2 = ((String) globalMap
							.get("tCreateTemporaryFile_2_FILEPATH"));
					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
						if (footer_value_tFileInputDelimited_2 > 0
								|| random_value_tFileInputDelimited_2 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
								((String) globalMap
										.get("tCreateTemporaryFile_2_FILEPATH")),
								"UTF-8", "\t", "\n", true, 1, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_2 != null
							&& fid_tFileInputDelimited_2.nextRecord()) {

						from_src_ont = null;

						from_src_ont = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						from_src_ont = new from_src_ontStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_2 = 0;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								from_src_ont.C_HLEVEL = ParserUtils
										.parseTo_BigDecimal(temp);

							} else {

								from_src_ont.C_HLEVEL = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 1;

							from_src_ont.C_FULLNAME = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 2;

							from_src_ont.C_NAME = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 3;

							from_src_ont.C_SYNONYM_CD = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 4;

							from_src_ont.C_VISUALATTRIBUTES = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 5;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								from_src_ont.C_TOTALNUM = ParserUtils
										.parseTo_BigDecimal(temp);

							} else {

								from_src_ont.C_TOTALNUM = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 6;

							from_src_ont.C_BASECODE = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 7;

							from_src_ont.C_METADATAXML = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 8;

							from_src_ont.C_FACTTABLECOLUMN = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 9;

							from_src_ont.C_TABLENAME = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 10;

							from_src_ont.C_COLUMNNAME = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 11;

							from_src_ont.C_COLUMNDATATYPE = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 12;

							from_src_ont.C_OPERATOR = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 13;

							from_src_ont.C_DIMCODE = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 14;

							from_src_ont.C_COMMENT = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 15;

							from_src_ont.C_TOOLTIP = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 16;

							from_src_ont.M_APPLIED_PATH = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 17;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								from_src_ont.UPDATE_DATE = ParserUtils
										.parseTo_Date(temp, "dd-MM-yyyy");

							} else {

								from_src_ont.UPDATE_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 18;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								from_src_ont.DOWNLOAD_DATE = ParserUtils
										.parseTo_Date(temp, "dd-MM-yyyy");

							} else {

								from_src_ont.DOWNLOAD_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 19;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								from_src_ont.IMPORT_DATE = ParserUtils
										.parseTo_Date(temp, "dd-MM-yyyy");

							} else {

								from_src_ont.IMPORT_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 20;

							from_src_ont.SOURCESYSTEM_CD = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 21;

							from_src_ont.VALUETYPE_CD = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 22;

							from_src_ont.M_EXCLUSION_CD = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 23;

							from_src_ont.C_PATH = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 24;

							from_src_ont.C_SYMBOL = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							from_src_ont = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */
						// Start of branch "from_src_ont"
						if (from_src_ont != null) {

							/**
							 * [tAdvancedHash_from_src_ont main ] start
							 */

							currentComponent = "tAdvancedHash_from_src_ont";

							from_src_ontStruct from_src_ont_HashRow = new from_src_ontStruct();

							from_src_ont_HashRow.C_HLEVEL = from_src_ont.C_HLEVEL;

							from_src_ont_HashRow.C_FULLNAME = from_src_ont.C_FULLNAME;

							from_src_ont_HashRow.C_NAME = from_src_ont.C_NAME;

							from_src_ont_HashRow.C_SYNONYM_CD = from_src_ont.C_SYNONYM_CD;

							from_src_ont_HashRow.C_VISUALATTRIBUTES = from_src_ont.C_VISUALATTRIBUTES;

							from_src_ont_HashRow.C_TOTALNUM = from_src_ont.C_TOTALNUM;

							from_src_ont_HashRow.C_BASECODE = from_src_ont.C_BASECODE;

							from_src_ont_HashRow.C_METADATAXML = from_src_ont.C_METADATAXML;

							from_src_ont_HashRow.C_FACTTABLECOLUMN = from_src_ont.C_FACTTABLECOLUMN;

							from_src_ont_HashRow.C_TABLENAME = from_src_ont.C_TABLENAME;

							from_src_ont_HashRow.C_COLUMNNAME = from_src_ont.C_COLUMNNAME;

							from_src_ont_HashRow.C_COLUMNDATATYPE = from_src_ont.C_COLUMNDATATYPE;

							from_src_ont_HashRow.C_OPERATOR = from_src_ont.C_OPERATOR;

							from_src_ont_HashRow.C_DIMCODE = from_src_ont.C_DIMCODE;

							from_src_ont_HashRow.C_COMMENT = from_src_ont.C_COMMENT;

							from_src_ont_HashRow.C_TOOLTIP = from_src_ont.C_TOOLTIP;

							from_src_ont_HashRow.M_APPLIED_PATH = from_src_ont.M_APPLIED_PATH;

							from_src_ont_HashRow.UPDATE_DATE = from_src_ont.UPDATE_DATE;

							from_src_ont_HashRow.DOWNLOAD_DATE = from_src_ont.DOWNLOAD_DATE;

							from_src_ont_HashRow.IMPORT_DATE = from_src_ont.IMPORT_DATE;

							from_src_ont_HashRow.SOURCESYSTEM_CD = from_src_ont.SOURCESYSTEM_CD;

							from_src_ont_HashRow.VALUETYPE_CD = from_src_ont.VALUETYPE_CD;

							from_src_ont_HashRow.M_EXCLUSION_CD = from_src_ont.M_EXCLUSION_CD;

							from_src_ont_HashRow.C_PATH = from_src_ont.C_PATH;

							from_src_ont_HashRow.C_SYMBOL = from_src_ont.C_SYMBOL;

							tHash_Lookup_from_src_ont.put(from_src_ont_HashRow);

							tos_count_tAdvancedHash_from_src_ont++;

							/**
							 * [tAdvancedHash_from_src_ont main ] stop
							 */

						} // End of branch "from_src_ont"

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

					}
				} finally {
					if (!((Object) (((String) globalMap
							.get("tCreateTemporaryFile_2_FILEPATH"))) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE",
								fid_tFileInputDelimited_2.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_from_src_ont end ] start
				 */

				currentComponent = "tAdvancedHash_from_src_ont";

				tHash_Lookup_from_src_ont.endPut();

				ok_Hash.put("tAdvancedHash_from_src_ont", true);
				end_Hash.put("tAdvancedHash_from_src_ont",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_from_src_ont end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class from_src_conc_dimStruct
			implements
			routines.system.IPersistableComparableLookupRow<from_src_conc_dimStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.CONCEPT_PATH == null) ? 0 : this.CONCEPT_PATH
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final from_src_conc_dimStruct other = (from_src_conc_dimStruct) obj;

			if (this.CONCEPT_PATH == null) {
				if (other.CONCEPT_PATH != null)
					return false;
			} else if (!this.CONCEPT_PATH.equals(other.CONCEPT_PATH))
				return false;

			return true;
		}

		public void copyDataTo(from_src_conc_dimStruct other) {

			other.CONCEPT_PATH = this.CONCEPT_PATH;
			other.CONCEPT_CD = this.CONCEPT_CD;
			other.NAME_CHAR = this.NAME_CHAR;
			other.CONCEPT_BLOB = this.CONCEPT_BLOB;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(from_src_conc_dimStruct other) {

			other.CONCEPT_PATH = this.CONCEPT_PATH;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.CONCEPT_CD = readString(dis, ois);

				this.NAME_CHAR = readString(dis, ois);

				this.CONCEPT_BLOB = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.CONCEPT_CD, dos, oos);

				writeString(this.NAME_CHAR, dos, oos);

				writeString(this.CONCEPT_BLOB, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(from_src_conc_dimStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CONCEPT_PATH,
					other.CONCEPT_PATH);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				from_src_conc_dimStruct from_src_conc_dim = new from_src_conc_dimStruct();

				/**
				 * [tAdvancedHash_from_src_conc_dim begin ] start
				 */

				ok_Hash.put("tAdvancedHash_from_src_conc_dim", false);
				start_Hash.put("tAdvancedHash_from_src_conc_dim",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_from_src_conc_dim";

				int tos_count_tAdvancedHash_from_src_conc_dim = 0;

				// connection name:from_src_conc_dim
				// source node:tFileInputDelimited_4 -
				// inputs:(after_tFileInputDelimited_5)
				// outputs:(from_src_conc_dim,from_src_conc_dim) | target
				// node:tAdvancedHash_from_src_conc_dim -
				// inputs:(from_src_conc_dim) outputs:()
				// linked node: tMap_3 -
				// inputs:(from_oe_target_ont,from_src_conc_dim)
				// outputs:(to_tmap)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_from_src_conc_dim = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<from_src_conc_dimStruct> tHash_Lookup_from_src_conc_dim = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<from_src_conc_dimStruct> getLookup(matchingModeEnum_from_src_conc_dim);

				globalMap.put("tHash_Lookup_from_src_conc_dim",
						tHash_Lookup_from_src_conc_dim);

				/**
				 * [tAdvancedHash_from_src_conc_dim begin ] stop
				 */

				/**
				 * [tFileInputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_4", false);
				start_Hash.put("tFileInputDelimited_4",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_4";

				int tos_count_tFileInputDelimited_4 = 0;

				int nb_line_tFileInputDelimited_4 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_4 = null;
				try {

					Object filename_tFileInputDelimited_4 = ((String) globalMap
							.get("tCreateTemporaryFile_4_FILEPATH"));
					if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_4 = 0, random_value_tFileInputDelimited_4 = -1;
						if (footer_value_tFileInputDelimited_4 > 0
								|| random_value_tFileInputDelimited_4 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_4 = new org.talend.fileprocess.FileInputDelimited(
								((String) globalMap
										.get("tCreateTemporaryFile_4_FILEPATH")),
								"UTF-8", "\t", "\n", true, 1, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_4 != null
							&& fid_tFileInputDelimited_4.nextRecord()) {

						from_src_conc_dim = null;

						from_src_conc_dim = null;

						boolean whetherReject_tFileInputDelimited_4 = false;
						from_src_conc_dim = new from_src_conc_dimStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_4 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_4 = 0;

							from_src_conc_dim.CONCEPT_PATH = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 1;

							from_src_conc_dim.CONCEPT_CD = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 2;

							from_src_conc_dim.NAME_CHAR = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 3;

							from_src_conc_dim.CONCEPT_BLOB = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 4;

							temp = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								from_src_conc_dim.UPDATE_DATE = ParserUtils
										.parseTo_Date(temp, "dd-MM-yyyy");

							} else {

								from_src_conc_dim.UPDATE_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 5;

							temp = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								from_src_conc_dim.DOWNLOAD_DATE = ParserUtils
										.parseTo_Date(temp, "dd-MM-yyyy");

							} else {

								from_src_conc_dim.DOWNLOAD_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 6;

							temp = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								from_src_conc_dim.IMPORT_DATE = ParserUtils
										.parseTo_Date(temp, "dd-MM-yyyy");

							} else {

								from_src_conc_dim.IMPORT_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 7;

							from_src_conc_dim.SOURCESYSTEM_CD = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 8;

							from_src_conc_dim.UPLOAD_ID = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_4 = true;

							System.err.println(e.getMessage());
							from_src_conc_dim = null;

						}

						/**
						 * [tFileInputDelimited_4 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_4 main ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						tos_count_tFileInputDelimited_4++;

						/**
						 * [tFileInputDelimited_4 main ] stop
						 */
						// Start of branch "from_src_conc_dim"
						if (from_src_conc_dim != null) {

							/**
							 * [tAdvancedHash_from_src_conc_dim main ] start
							 */

							currentComponent = "tAdvancedHash_from_src_conc_dim";

							from_src_conc_dimStruct from_src_conc_dim_HashRow = new from_src_conc_dimStruct();

							from_src_conc_dim_HashRow.CONCEPT_PATH = from_src_conc_dim.CONCEPT_PATH;

							from_src_conc_dim_HashRow.CONCEPT_CD = from_src_conc_dim.CONCEPT_CD;

							from_src_conc_dim_HashRow.NAME_CHAR = from_src_conc_dim.NAME_CHAR;

							from_src_conc_dim_HashRow.CONCEPT_BLOB = from_src_conc_dim.CONCEPT_BLOB;

							from_src_conc_dim_HashRow.UPDATE_DATE = from_src_conc_dim.UPDATE_DATE;

							from_src_conc_dim_HashRow.DOWNLOAD_DATE = from_src_conc_dim.DOWNLOAD_DATE;

							from_src_conc_dim_HashRow.IMPORT_DATE = from_src_conc_dim.IMPORT_DATE;

							from_src_conc_dim_HashRow.SOURCESYSTEM_CD = from_src_conc_dim.SOURCESYSTEM_CD;

							from_src_conc_dim_HashRow.UPLOAD_ID = from_src_conc_dim.UPLOAD_ID;

							tHash_Lookup_from_src_conc_dim
									.put(from_src_conc_dim_HashRow);

							tos_count_tAdvancedHash_from_src_conc_dim++;

							/**
							 * [tAdvancedHash_from_src_conc_dim main ] stop
							 */

						} // End of branch "from_src_conc_dim"

						/**
						 * [tFileInputDelimited_4 end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

					}
				} finally {
					if (!((Object) (((String) globalMap
							.get("tCreateTemporaryFile_4_FILEPATH"))) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_4 != null) {
							fid_tFileInputDelimited_4.close();
						}
					}
					if (fid_tFileInputDelimited_4 != null) {
						globalMap.put("tFileInputDelimited_4_NB_LINE",
								fid_tFileInputDelimited_4.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_4", true);
				end_Hash.put("tFileInputDelimited_4",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_from_src_conc_dim end ] start
				 */

				currentComponent = "tAdvancedHash_from_src_conc_dim";

				tHash_Lookup_from_src_conc_dim.endPut();

				ok_Hash.put("tAdvancedHash_from_src_conc_dim", true);
				end_Hash.put("tAdvancedHash_from_src_conc_dim",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_from_src_conc_dim end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}

	public static class from_srxc_obsfctStruct
			implements
			routines.system.IPersistableComparableLookupRow<from_srxc_obsfctStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public String START_DATE;

		public String getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public String END_DATE;

		public String getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.CONCEPT_CD == null) ? 0 : this.CONCEPT_CD
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final from_srxc_obsfctStruct other = (from_srxc_obsfctStruct) obj;

			if (this.CONCEPT_CD == null) {
				if (other.CONCEPT_CD != null)
					return false;
			} else if (!this.CONCEPT_CD.equals(other.CONCEPT_CD))
				return false;

			return true;
		}

		public void copyDataTo(from_srxc_obsfctStruct other) {

			other.ENCOUNTER_NUM = this.ENCOUNTER_NUM;
			other.PATIENT_NUM = this.PATIENT_NUM;
			other.CONCEPT_CD = this.CONCEPT_CD;
			other.PROVIDER_ID = this.PROVIDER_ID;
			other.START_DATE = this.START_DATE;
			other.MODIFIER_CD = this.MODIFIER_CD;
			other.INSTANCE_NUM = this.INSTANCE_NUM;
			other.VALTYPE_CD = this.VALTYPE_CD;
			other.TVAL_CHAR = this.TVAL_CHAR;
			other.NVAL_NUM = this.NVAL_NUM;
			other.VALUEFLAG_CD = this.VALUEFLAG_CD;
			other.QUANTITY_NUM = this.QUANTITY_NUM;
			other.UNITS_CD = this.UNITS_CD;
			other.END_DATE = this.END_DATE;
			other.LOCATION_CD = this.LOCATION_CD;
			other.OBSERVATION_BLOB = this.OBSERVATION_BLOB;
			other.CONFIDENCE_NUM = this.CONFIDENCE_NUM;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(from_srxc_obsfctStruct other) {

			other.CONCEPT_CD = this.CONCEPT_CD;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.CONCEPT_CD = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_CD, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ENCOUNTER_NUM = (BigDecimal) ois.readObject();

				this.PATIENT_NUM = (BigDecimal) ois.readObject();

				this.PROVIDER_ID = readString(dis, ois);

				this.START_DATE = readString(dis, ois);

				this.MODIFIER_CD = readString(dis, ois);

				this.INSTANCE_NUM = readString(dis, ois);

				this.VALTYPE_CD = readString(dis, ois);

				this.TVAL_CHAR = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.NVAL_NUM = null;
				} else {
					this.NVAL_NUM = dis.readFloat();
				}

				this.VALUEFLAG_CD = readString(dis, ois);

				this.QUANTITY_NUM = readString(dis, ois);

				this.UNITS_CD = readString(dis, ois);

				this.END_DATE = readString(dis, ois);

				this.LOCATION_CD = readString(dis, ois);

				this.OBSERVATION_BLOB = readString(dis, ois);

				this.CONFIDENCE_NUM = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				oos.writeObject(this.ENCOUNTER_NUM);

				oos.writeObject(this.PATIENT_NUM);

				writeString(this.PROVIDER_ID, dos, oos);

				writeString(this.START_DATE, dos, oos);

				writeString(this.MODIFIER_CD, dos, oos);

				writeString(this.INSTANCE_NUM, dos, oos);

				writeString(this.VALTYPE_CD, dos, oos);

				writeString(this.TVAL_CHAR, dos, oos);

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				writeString(this.VALUEFLAG_CD, dos, oos);

				writeString(this.QUANTITY_NUM, dos, oos);

				writeString(this.UNITS_CD, dos, oos);

				writeString(this.END_DATE, dos, oos);

				writeString(this.LOCATION_CD, dos, oos);

				writeString(this.OBSERVATION_BLOB, dos, oos);

				writeString(this.CONFIDENCE_NUM, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + START_DATE);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + END_DATE);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(from_srxc_obsfctStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CONCEPT_CD,
					other.CONCEPT_CD);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				from_srxc_obsfctStruct from_srxc_obsfct = new from_srxc_obsfctStruct();

				/**
				 * [tAdvancedHash_from_srxc_obsfct begin ] start
				 */

				ok_Hash.put("tAdvancedHash_from_srxc_obsfct", false);
				start_Hash.put("tAdvancedHash_from_srxc_obsfct",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_from_srxc_obsfct";

				int tos_count_tAdvancedHash_from_srxc_obsfct = 0;

				// connection name:from_srxc_obsfct
				// source node:tFileInputDelimited_3 -
				// inputs:(after_tFileInputDelimited_5)
				// outputs:(from_srxc_obsfct,from_srxc_obsfct) | target
				// node:tAdvancedHash_from_srxc_obsfct -
				// inputs:(from_srxc_obsfct) outputs:()
				// linked node: tMap_4 - inputs:(to_tmap,from_srxc_obsfct)
				// outputs:(to_obs_fct)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_from_srxc_obsfct = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<from_srxc_obsfctStruct> tHash_Lookup_from_srxc_obsfct = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<from_srxc_obsfctStruct> getLookup(matchingModeEnum_from_srxc_obsfct);

				globalMap.put("tHash_Lookup_from_srxc_obsfct",
						tHash_Lookup_from_srxc_obsfct);

				/**
				 * [tAdvancedHash_from_srxc_obsfct begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				try {

					Object filename_tFileInputDelimited_3 = ((String) globalMap
							.get("tCreateTemporaryFile_3_FILEPATH"));
					if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
						if (footer_value_tFileInputDelimited_3 > 0
								|| random_value_tFileInputDelimited_3 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(
								((String) globalMap
										.get("tCreateTemporaryFile_3_FILEPATH")),
								"UTF-8", "\t", "\n", true, 1, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_3 != null
							&& fid_tFileInputDelimited_3.nextRecord()) {

						from_srxc_obsfct = null;

						from_srxc_obsfct = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						from_srxc_obsfct = new from_srxc_obsfctStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_3 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_3 = 0;

							temp = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								from_srxc_obsfct.ENCOUNTER_NUM = ParserUtils
										.parseTo_BigDecimal(temp);

							} else {

								from_srxc_obsfct.ENCOUNTER_NUM = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 1;

							temp = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								from_srxc_obsfct.PATIENT_NUM = ParserUtils
										.parseTo_BigDecimal(temp);

							} else {

								from_srxc_obsfct.PATIENT_NUM = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 2;

							from_srxc_obsfct.CONCEPT_CD = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 3;

							from_srxc_obsfct.PROVIDER_ID = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 4;

							from_srxc_obsfct.START_DATE = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 5;

							from_srxc_obsfct.MODIFIER_CD = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 6;

							from_srxc_obsfct.INSTANCE_NUM = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 7;

							from_srxc_obsfct.VALTYPE_CD = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 8;

							from_srxc_obsfct.TVAL_CHAR = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 9;

							temp = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								from_srxc_obsfct.NVAL_NUM = ParserUtils
										.parseTo_Float(temp);

							} else {

								from_srxc_obsfct.NVAL_NUM = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 10;

							from_srxc_obsfct.VALUEFLAG_CD = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 11;

							from_srxc_obsfct.QUANTITY_NUM = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 12;

							from_srxc_obsfct.UNITS_CD = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 13;

							from_srxc_obsfct.END_DATE = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 14;

							from_srxc_obsfct.LOCATION_CD = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 15;

							from_srxc_obsfct.OBSERVATION_BLOB = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 16;

							from_srxc_obsfct.CONFIDENCE_NUM = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 17;

							temp = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								from_srxc_obsfct.UPDATE_DATE = ParserUtils
										.parseTo_Date(temp, "yyyy-MM-dd");

							} else {

								from_srxc_obsfct.UPDATE_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 18;

							temp = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								from_srxc_obsfct.DOWNLOAD_DATE = ParserUtils
										.parseTo_Date(temp, "yyyy-MM-dd");

							} else {

								from_srxc_obsfct.DOWNLOAD_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 19;

							temp = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								from_srxc_obsfct.IMPORT_DATE = ParserUtils
										.parseTo_Date(temp, "yyyy-MM-dd");

							} else {

								from_srxc_obsfct.IMPORT_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 20;

							from_srxc_obsfct.SOURCESYSTEM_CD = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 21;

							from_srxc_obsfct.UPLOAD_ID = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							from_srxc_obsfct = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */
						// Start of branch "from_srxc_obsfct"
						if (from_srxc_obsfct != null) {

							/**
							 * [tAdvancedHash_from_srxc_obsfct main ] start
							 */

							currentComponent = "tAdvancedHash_from_srxc_obsfct";

							from_srxc_obsfctStruct from_srxc_obsfct_HashRow = new from_srxc_obsfctStruct();

							from_srxc_obsfct_HashRow.ENCOUNTER_NUM = from_srxc_obsfct.ENCOUNTER_NUM;

							from_srxc_obsfct_HashRow.PATIENT_NUM = from_srxc_obsfct.PATIENT_NUM;

							from_srxc_obsfct_HashRow.CONCEPT_CD = from_srxc_obsfct.CONCEPT_CD;

							from_srxc_obsfct_HashRow.PROVIDER_ID = from_srxc_obsfct.PROVIDER_ID;

							from_srxc_obsfct_HashRow.START_DATE = from_srxc_obsfct.START_DATE;

							from_srxc_obsfct_HashRow.MODIFIER_CD = from_srxc_obsfct.MODIFIER_CD;

							from_srxc_obsfct_HashRow.INSTANCE_NUM = from_srxc_obsfct.INSTANCE_NUM;

							from_srxc_obsfct_HashRow.VALTYPE_CD = from_srxc_obsfct.VALTYPE_CD;

							from_srxc_obsfct_HashRow.TVAL_CHAR = from_srxc_obsfct.TVAL_CHAR;

							from_srxc_obsfct_HashRow.NVAL_NUM = from_srxc_obsfct.NVAL_NUM;

							from_srxc_obsfct_HashRow.VALUEFLAG_CD = from_srxc_obsfct.VALUEFLAG_CD;

							from_srxc_obsfct_HashRow.QUANTITY_NUM = from_srxc_obsfct.QUANTITY_NUM;

							from_srxc_obsfct_HashRow.UNITS_CD = from_srxc_obsfct.UNITS_CD;

							from_srxc_obsfct_HashRow.END_DATE = from_srxc_obsfct.END_DATE;

							from_srxc_obsfct_HashRow.LOCATION_CD = from_srxc_obsfct.LOCATION_CD;

							from_srxc_obsfct_HashRow.OBSERVATION_BLOB = from_srxc_obsfct.OBSERVATION_BLOB;

							from_srxc_obsfct_HashRow.CONFIDENCE_NUM = from_srxc_obsfct.CONFIDENCE_NUM;

							from_srxc_obsfct_HashRow.UPDATE_DATE = from_srxc_obsfct.UPDATE_DATE;

							from_srxc_obsfct_HashRow.DOWNLOAD_DATE = from_srxc_obsfct.DOWNLOAD_DATE;

							from_srxc_obsfct_HashRow.IMPORT_DATE = from_srxc_obsfct.IMPORT_DATE;

							from_srxc_obsfct_HashRow.SOURCESYSTEM_CD = from_srxc_obsfct.SOURCESYSTEM_CD;

							from_srxc_obsfct_HashRow.UPLOAD_ID = from_srxc_obsfct.UPLOAD_ID;

							tHash_Lookup_from_srxc_obsfct
									.put(from_srxc_obsfct_HashRow);

							tos_count_tAdvancedHash_from_srxc_obsfct++;

							/**
							 * [tAdvancedHash_from_srxc_obsfct main ] stop
							 */

						} // End of branch "from_srxc_obsfct"

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

					}
				} finally {
					if (!((Object) (((String) globalMap
							.get("tCreateTemporaryFile_3_FILEPATH"))) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_3 != null) {
							fid_tFileInputDelimited_3.close();
						}
					}
					if (fid_tFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE",
								fid_tFileInputDelimited_3.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_from_srxc_obsfct end ] start
				 */

				currentComponent = "tAdvancedHash_from_srxc_obsfct";

				tHash_Lookup_from_srxc_obsfct.endPut();

				ok_Hash.put("tAdvancedHash_from_srxc_obsfct", true);
				end_Hash.put("tAdvancedHash_from_srxc_obsfct",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_from_srxc_obsfct end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public static class row14Struct implements
			routines.system.IPersistableComparableLookupRow<row14Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public String START_DATE;

		public String getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public String END_DATE;

		public String getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.PATIENT_NUM == null) ? 0 : this.PATIENT_NUM
								.hashCode());

				result = prime
						* result
						+ ((this.CONCEPT_CD == null) ? 0 : this.CONCEPT_CD
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row14Struct other = (row14Struct) obj;

			if (this.PATIENT_NUM == null) {
				if (other.PATIENT_NUM != null)
					return false;
			} else if (!this.PATIENT_NUM.equals(other.PATIENT_NUM))
				return false;

			if (this.CONCEPT_CD == null) {
				if (other.CONCEPT_CD != null)
					return false;
			} else if (!this.CONCEPT_CD.equals(other.CONCEPT_CD))
				return false;

			return true;
		}

		public void copyDataTo(row14Struct other) {

			other.ENCOUNTER_NUM = this.ENCOUNTER_NUM;
			other.PATIENT_NUM = this.PATIENT_NUM;
			other.CONCEPT_CD = this.CONCEPT_CD;
			other.PROVIDER_ID = this.PROVIDER_ID;
			other.START_DATE = this.START_DATE;
			other.MODIFIER_CD = this.MODIFIER_CD;
			other.INSTANCE_NUM = this.INSTANCE_NUM;
			other.VALTYPE_CD = this.VALTYPE_CD;
			other.TVAL_CHAR = this.TVAL_CHAR;
			other.NVAL_NUM = this.NVAL_NUM;
			other.VALUEFLAG_CD = this.VALUEFLAG_CD;
			other.QUANTITY_NUM = this.QUANTITY_NUM;
			other.UNITS_CD = this.UNITS_CD;
			other.END_DATE = this.END_DATE;
			other.LOCATION_CD = this.LOCATION_CD;
			other.OBSERVATION_BLOB = this.OBSERVATION_BLOB;
			other.CONFIDENCE_NUM = this.CONFIDENCE_NUM;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row14Struct other) {

			other.PATIENT_NUM = this.PATIENT_NUM;
			other.CONCEPT_CD = this.CONCEPT_CD;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ENCOUNTER_NUM = (BigDecimal) ois.readObject();

				this.PROVIDER_ID = readString(dis, ois);

				this.START_DATE = readString(dis, ois);

				this.MODIFIER_CD = readString(dis, ois);

				this.INSTANCE_NUM = readString(dis, ois);

				this.VALTYPE_CD = readString(dis, ois);

				this.TVAL_CHAR = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.NVAL_NUM = null;
				} else {
					this.NVAL_NUM = dis.readFloat();
				}

				this.VALUEFLAG_CD = readString(dis, ois);

				this.QUANTITY_NUM = readString(dis, ois);

				this.UNITS_CD = readString(dis, ois);

				this.END_DATE = readString(dis, ois);

				this.LOCATION_CD = readString(dis, ois);

				this.OBSERVATION_BLOB = readString(dis, ois);

				this.CONFIDENCE_NUM = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				oos.writeObject(this.ENCOUNTER_NUM);

				writeString(this.PROVIDER_ID, dos, oos);

				writeString(this.START_DATE, dos, oos);

				writeString(this.MODIFIER_CD, dos, oos);

				writeString(this.INSTANCE_NUM, dos, oos);

				writeString(this.VALTYPE_CD, dos, oos);

				writeString(this.TVAL_CHAR, dos, oos);

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				writeString(this.VALUEFLAG_CD, dos, oos);

				writeString(this.QUANTITY_NUM, dos, oos);

				writeString(this.UNITS_CD, dos, oos);

				writeString(this.END_DATE, dos, oos);

				writeString(this.LOCATION_CD, dos, oos);

				writeString(this.OBSERVATION_BLOB, dos, oos);

				writeString(this.CONFIDENCE_NUM, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + START_DATE);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + END_DATE);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PATIENT_NUM,
					other.PATIENT_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.CONCEPT_CD,
					other.CONCEPT_CD);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_11Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row14Struct row14 = new row14Struct();

				/**
				 * [tAdvancedHash_row14 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row14", false);
				start_Hash.put("tAdvancedHash_row14",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row14";

				int tos_count_tAdvancedHash_row14 = 0;

				// connection name:row14
				// source node:tFileInputDelimited_11 -
				// inputs:(after_tFileInputDelimited_5) outputs:(row14,row14) |
				// target node:tAdvancedHash_row14 - inputs:(row14) outputs:()
				// linked node: tMap_9 - inputs:(to_obs_fct,row14,row15)
				// outputs:(out1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row14 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row14Struct> getLookup(matchingModeEnum_row14);

				globalMap.put("tHash_Lookup_row14", tHash_Lookup_row14);

				/**
				 * [tAdvancedHash_row14 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_11 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_11", false);
				start_Hash.put("tFileInputDelimited_11",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_11";

				int tos_count_tFileInputDelimited_11 = 0;

				int nb_line_tFileInputDelimited_11 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_11 = null;
				try {

					Object filename_tFileInputDelimited_11 = ((String) globalMap
							.get("tCreateTemporaryFile_3_FILEPATH"));
					if (filename_tFileInputDelimited_11 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_11 = 0, random_value_tFileInputDelimited_11 = -1;
						if (footer_value_tFileInputDelimited_11 > 0
								|| random_value_tFileInputDelimited_11 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_11 = new org.talend.fileprocess.FileInputDelimited(
								((String) globalMap
										.get("tCreateTemporaryFile_3_FILEPATH")),
								"UTF-8", "\t", "\n", true, 1, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_11 != null
							&& fid_tFileInputDelimited_11.nextRecord()) {

						row14 = null;

						row14 = null;

						boolean whetherReject_tFileInputDelimited_11 = false;
						row14 = new row14Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_11 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_11 = 0;

							temp = fid_tFileInputDelimited_11
									.get(columnIndexWithD_tFileInputDelimited_11);
							if (temp.length() > 0) {

								row14.ENCOUNTER_NUM = ParserUtils
										.parseTo_BigDecimal(temp);

							} else {

								row14.ENCOUNTER_NUM = null;

							}

							columnIndexWithD_tFileInputDelimited_11 = 1;

							temp = fid_tFileInputDelimited_11
									.get(columnIndexWithD_tFileInputDelimited_11);
							if (temp.length() > 0) {

								row14.PATIENT_NUM = ParserUtils
										.parseTo_BigDecimal(temp);

							} else {

								row14.PATIENT_NUM = null;

							}

							columnIndexWithD_tFileInputDelimited_11 = 2;

							row14.CONCEPT_CD = fid_tFileInputDelimited_11
									.get(columnIndexWithD_tFileInputDelimited_11);

							columnIndexWithD_tFileInputDelimited_11 = 3;

							row14.PROVIDER_ID = fid_tFileInputDelimited_11
									.get(columnIndexWithD_tFileInputDelimited_11);

							columnIndexWithD_tFileInputDelimited_11 = 4;

							row14.START_DATE = fid_tFileInputDelimited_11
									.get(columnIndexWithD_tFileInputDelimited_11);

							columnIndexWithD_tFileInputDelimited_11 = 5;

							row14.MODIFIER_CD = fid_tFileInputDelimited_11
									.get(columnIndexWithD_tFileInputDelimited_11);

							columnIndexWithD_tFileInputDelimited_11 = 6;

							row14.INSTANCE_NUM = fid_tFileInputDelimited_11
									.get(columnIndexWithD_tFileInputDelimited_11);

							columnIndexWithD_tFileInputDelimited_11 = 7;

							row14.VALTYPE_CD = fid_tFileInputDelimited_11
									.get(columnIndexWithD_tFileInputDelimited_11);

							columnIndexWithD_tFileInputDelimited_11 = 8;

							row14.TVAL_CHAR = fid_tFileInputDelimited_11
									.get(columnIndexWithD_tFileInputDelimited_11);

							columnIndexWithD_tFileInputDelimited_11 = 9;

							temp = fid_tFileInputDelimited_11
									.get(columnIndexWithD_tFileInputDelimited_11);
							if (temp.length() > 0) {

								row14.NVAL_NUM = ParserUtils
										.parseTo_Float(temp);

							} else {

								row14.NVAL_NUM = null;

							}

							columnIndexWithD_tFileInputDelimited_11 = 10;

							row14.VALUEFLAG_CD = fid_tFileInputDelimited_11
									.get(columnIndexWithD_tFileInputDelimited_11);

							columnIndexWithD_tFileInputDelimited_11 = 11;

							row14.QUANTITY_NUM = fid_tFileInputDelimited_11
									.get(columnIndexWithD_tFileInputDelimited_11);

							columnIndexWithD_tFileInputDelimited_11 = 12;

							row14.UNITS_CD = fid_tFileInputDelimited_11
									.get(columnIndexWithD_tFileInputDelimited_11);

							columnIndexWithD_tFileInputDelimited_11 = 13;

							row14.END_DATE = fid_tFileInputDelimited_11
									.get(columnIndexWithD_tFileInputDelimited_11);

							columnIndexWithD_tFileInputDelimited_11 = 14;

							row14.LOCATION_CD = fid_tFileInputDelimited_11
									.get(columnIndexWithD_tFileInputDelimited_11);

							columnIndexWithD_tFileInputDelimited_11 = 15;

							row14.OBSERVATION_BLOB = fid_tFileInputDelimited_11
									.get(columnIndexWithD_tFileInputDelimited_11);

							columnIndexWithD_tFileInputDelimited_11 = 16;

							row14.CONFIDENCE_NUM = fid_tFileInputDelimited_11
									.get(columnIndexWithD_tFileInputDelimited_11);

							columnIndexWithD_tFileInputDelimited_11 = 17;

							temp = fid_tFileInputDelimited_11
									.get(columnIndexWithD_tFileInputDelimited_11);
							if (temp.length() > 0) {

								row14.UPDATE_DATE = ParserUtils.parseTo_Date(
										temp, "yyyy-MM-dd");

							} else {

								row14.UPDATE_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_11 = 18;

							temp = fid_tFileInputDelimited_11
									.get(columnIndexWithD_tFileInputDelimited_11);
							if (temp.length() > 0) {

								row14.DOWNLOAD_DATE = ParserUtils.parseTo_Date(
										temp, "yyyy-MM-dd");

							} else {

								row14.DOWNLOAD_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_11 = 19;

							temp = fid_tFileInputDelimited_11
									.get(columnIndexWithD_tFileInputDelimited_11);
							if (temp.length() > 0) {

								row14.IMPORT_DATE = ParserUtils.parseTo_Date(
										temp, "yyyy-MM-dd");

							} else {

								row14.IMPORT_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_11 = 20;

							row14.SOURCESYSTEM_CD = fid_tFileInputDelimited_11
									.get(columnIndexWithD_tFileInputDelimited_11);

							columnIndexWithD_tFileInputDelimited_11 = 21;

							row14.UPLOAD_ID = fid_tFileInputDelimited_11
									.get(columnIndexWithD_tFileInputDelimited_11);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_11 = true;

							System.err.println(e.getMessage());
							row14 = null;

						}

						/**
						 * [tFileInputDelimited_11 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_11 main ] start
						 */

						currentComponent = "tFileInputDelimited_11";

						tos_count_tFileInputDelimited_11++;

						/**
						 * [tFileInputDelimited_11 main ] stop
						 */
						// Start of branch "row14"
						if (row14 != null) {

							/**
							 * [tAdvancedHash_row14 main ] start
							 */

							currentComponent = "tAdvancedHash_row14";

							row14Struct row14_HashRow = new row14Struct();

							row14_HashRow.ENCOUNTER_NUM = row14.ENCOUNTER_NUM;

							row14_HashRow.PATIENT_NUM = row14.PATIENT_NUM;

							row14_HashRow.CONCEPT_CD = row14.CONCEPT_CD;

							row14_HashRow.PROVIDER_ID = row14.PROVIDER_ID;

							row14_HashRow.START_DATE = row14.START_DATE;

							row14_HashRow.MODIFIER_CD = row14.MODIFIER_CD;

							row14_HashRow.INSTANCE_NUM = row14.INSTANCE_NUM;

							row14_HashRow.VALTYPE_CD = row14.VALTYPE_CD;

							row14_HashRow.TVAL_CHAR = row14.TVAL_CHAR;

							row14_HashRow.NVAL_NUM = row14.NVAL_NUM;

							row14_HashRow.VALUEFLAG_CD = row14.VALUEFLAG_CD;

							row14_HashRow.QUANTITY_NUM = row14.QUANTITY_NUM;

							row14_HashRow.UNITS_CD = row14.UNITS_CD;

							row14_HashRow.END_DATE = row14.END_DATE;

							row14_HashRow.LOCATION_CD = row14.LOCATION_CD;

							row14_HashRow.OBSERVATION_BLOB = row14.OBSERVATION_BLOB;

							row14_HashRow.CONFIDENCE_NUM = row14.CONFIDENCE_NUM;

							row14_HashRow.UPDATE_DATE = row14.UPDATE_DATE;

							row14_HashRow.DOWNLOAD_DATE = row14.DOWNLOAD_DATE;

							row14_HashRow.IMPORT_DATE = row14.IMPORT_DATE;

							row14_HashRow.SOURCESYSTEM_CD = row14.SOURCESYSTEM_CD;

							row14_HashRow.UPLOAD_ID = row14.UPLOAD_ID;

							tHash_Lookup_row14.put(row14_HashRow);

							tos_count_tAdvancedHash_row14++;

							/**
							 * [tAdvancedHash_row14 main ] stop
							 */

						} // End of branch "row14"

						/**
						 * [tFileInputDelimited_11 end ] start
						 */

						currentComponent = "tFileInputDelimited_11";

					}
				} finally {
					if (!((Object) (((String) globalMap
							.get("tCreateTemporaryFile_3_FILEPATH"))) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_11 != null) {
							fid_tFileInputDelimited_11.close();
						}
					}
					if (fid_tFileInputDelimited_11 != null) {
						globalMap.put("tFileInputDelimited_11_NB_LINE",
								fid_tFileInputDelimited_11.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_11", true);
				end_Hash.put("tFileInputDelimited_11",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_11 end ] stop
				 */

				/**
				 * [tAdvancedHash_row14 end ] start
				 */

				currentComponent = "tAdvancedHash_row14";

				tHash_Lookup_row14.endPut();

				ok_Hash.put("tAdvancedHash_row14", true);
				end_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row14 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_11_SUBPROCESS_STATE", 1);
	}

	public static class row15Struct implements
			routines.system.IPersistableComparableLookupRow<row15Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.CONCEPT_PATH == null) ? 0 : this.CONCEPT_PATH
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row15Struct other = (row15Struct) obj;

			if (this.CONCEPT_PATH == null) {
				if (other.CONCEPT_PATH != null)
					return false;
			} else if (!this.CONCEPT_PATH.equals(other.CONCEPT_PATH))
				return false;

			return true;
		}

		public void copyDataTo(row15Struct other) {

			other.CONCEPT_PATH = this.CONCEPT_PATH;
			other.CONCEPT_CD = this.CONCEPT_CD;
			other.NAME_CHAR = this.NAME_CHAR;
			other.CONCEPT_BLOB = this.CONCEPT_BLOB;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row15Struct other) {

			other.CONCEPT_PATH = this.CONCEPT_PATH;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.CONCEPT_CD = readString(dis, ois);

				this.NAME_CHAR = readString(dis, ois);

				this.CONCEPT_BLOB = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.CONCEPT_CD, dos, oos);

				writeString(this.NAME_CHAR, dos, oos);

				writeString(this.CONCEPT_BLOB, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CONCEPT_PATH,
					other.CONCEPT_PATH);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_10Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row15Struct row15 = new row15Struct();

				/**
				 * [tAdvancedHash_row15 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row15", false);
				start_Hash.put("tAdvancedHash_row15",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row15";

				int tos_count_tAdvancedHash_row15 = 0;

				// connection name:row15
				// source node:tFileInputDelimited_10 -
				// inputs:(after_tFileInputDelimited_5) outputs:(row15,row15) |
				// target node:tAdvancedHash_row15 - inputs:(row15) outputs:()
				// linked node: tMap_9 - inputs:(to_obs_fct,row14,row15)
				// outputs:(out1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row15 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row15Struct> getLookup(matchingModeEnum_row15);

				globalMap.put("tHash_Lookup_row15", tHash_Lookup_row15);

				/**
				 * [tAdvancedHash_row15 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_10 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_10", false);
				start_Hash.put("tFileInputDelimited_10",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_10";

				int tos_count_tFileInputDelimited_10 = 0;

				int nb_line_tFileInputDelimited_10 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_10 = null;
				try {

					Object filename_tFileInputDelimited_10 = ((String) globalMap
							.get("tCreateTemporaryFile_4_FILEPATH"));
					if (filename_tFileInputDelimited_10 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_10 = 0, random_value_tFileInputDelimited_10 = -1;
						if (footer_value_tFileInputDelimited_10 > 0
								|| random_value_tFileInputDelimited_10 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_10 = new org.talend.fileprocess.FileInputDelimited(
								((String) globalMap
										.get("tCreateTemporaryFile_4_FILEPATH")),
								"UTF-8", "\t", "\n", true, 1, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_10 != null
							&& fid_tFileInputDelimited_10.nextRecord()) {

						row15 = null;

						row15 = null;

						boolean whetherReject_tFileInputDelimited_10 = false;
						row15 = new row15Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_10 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_10 = 0;

							row15.CONCEPT_PATH = fid_tFileInputDelimited_10
									.get(columnIndexWithD_tFileInputDelimited_10);

							columnIndexWithD_tFileInputDelimited_10 = 1;

							row15.CONCEPT_CD = fid_tFileInputDelimited_10
									.get(columnIndexWithD_tFileInputDelimited_10);

							columnIndexWithD_tFileInputDelimited_10 = 2;

							row15.NAME_CHAR = fid_tFileInputDelimited_10
									.get(columnIndexWithD_tFileInputDelimited_10);

							columnIndexWithD_tFileInputDelimited_10 = 3;

							row15.CONCEPT_BLOB = fid_tFileInputDelimited_10
									.get(columnIndexWithD_tFileInputDelimited_10);

							columnIndexWithD_tFileInputDelimited_10 = 4;

							temp = fid_tFileInputDelimited_10
									.get(columnIndexWithD_tFileInputDelimited_10);
							if (temp.length() > 0) {

								row15.UPDATE_DATE = ParserUtils.parseTo_Date(
										temp, "dd-MM-yyyy");

							} else {

								row15.UPDATE_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_10 = 5;

							temp = fid_tFileInputDelimited_10
									.get(columnIndexWithD_tFileInputDelimited_10);
							if (temp.length() > 0) {

								row15.DOWNLOAD_DATE = ParserUtils.parseTo_Date(
										temp, "dd-MM-yyyy");

							} else {

								row15.DOWNLOAD_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_10 = 6;

							temp = fid_tFileInputDelimited_10
									.get(columnIndexWithD_tFileInputDelimited_10);
							if (temp.length() > 0) {

								row15.IMPORT_DATE = ParserUtils.parseTo_Date(
										temp, "dd-MM-yyyy");

							} else {

								row15.IMPORT_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_10 = 7;

							row15.SOURCESYSTEM_CD = fid_tFileInputDelimited_10
									.get(columnIndexWithD_tFileInputDelimited_10);

							columnIndexWithD_tFileInputDelimited_10 = 8;

							row15.UPLOAD_ID = fid_tFileInputDelimited_10
									.get(columnIndexWithD_tFileInputDelimited_10);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_10 = true;

							System.err.println(e.getMessage());
							row15 = null;

						}

						/**
						 * [tFileInputDelimited_10 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_10 main ] start
						 */

						currentComponent = "tFileInputDelimited_10";

						tos_count_tFileInputDelimited_10++;

						/**
						 * [tFileInputDelimited_10 main ] stop
						 */
						// Start of branch "row15"
						if (row15 != null) {

							/**
							 * [tAdvancedHash_row15 main ] start
							 */

							currentComponent = "tAdvancedHash_row15";

							row15Struct row15_HashRow = new row15Struct();

							row15_HashRow.CONCEPT_PATH = row15.CONCEPT_PATH;

							row15_HashRow.CONCEPT_CD = row15.CONCEPT_CD;

							row15_HashRow.NAME_CHAR = row15.NAME_CHAR;

							row15_HashRow.CONCEPT_BLOB = row15.CONCEPT_BLOB;

							row15_HashRow.UPDATE_DATE = row15.UPDATE_DATE;

							row15_HashRow.DOWNLOAD_DATE = row15.DOWNLOAD_DATE;

							row15_HashRow.IMPORT_DATE = row15.IMPORT_DATE;

							row15_HashRow.SOURCESYSTEM_CD = row15.SOURCESYSTEM_CD;

							row15_HashRow.UPLOAD_ID = row15.UPLOAD_ID;

							tHash_Lookup_row15.put(row15_HashRow);

							tos_count_tAdvancedHash_row15++;

							/**
							 * [tAdvancedHash_row15 main ] stop
							 */

						} // End of branch "row15"

						/**
						 * [tFileInputDelimited_10 end ] start
						 */

						currentComponent = "tFileInputDelimited_10";

					}
				} finally {
					if (!((Object) (((String) globalMap
							.get("tCreateTemporaryFile_4_FILEPATH"))) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_10 != null) {
							fid_tFileInputDelimited_10.close();
						}
					}
					if (fid_tFileInputDelimited_10 != null) {
						globalMap.put("tFileInputDelimited_10_NB_LINE",
								fid_tFileInputDelimited_10.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_10", true);
				end_Hash.put("tFileInputDelimited_10",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_10 end ] stop
				 */

				/**
				 * [tAdvancedHash_row15 end ] start
				 */

				currentComponent = "tAdvancedHash_row15";

				tHash_Lookup_row15.endPut();

				ok_Hash.put("tAdvancedHash_row15", true);
				end_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row15 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_10_SUBPROCESS_STATE", 1);
	}

	public static class row16Struct implements
			routines.system.IPersistableComparableLookupRow<row16Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.CONCEPT_PATH == null) ? 0 : this.CONCEPT_PATH
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row16Struct other = (row16Struct) obj;

			if (this.CONCEPT_PATH == null) {
				if (other.CONCEPT_PATH != null)
					return false;
			} else if (!this.CONCEPT_PATH.equals(other.CONCEPT_PATH))
				return false;

			return true;
		}

		public void copyDataTo(row16Struct other) {

			other.CONCEPT_PATH = this.CONCEPT_PATH;
			other.CONCEPT_CD = this.CONCEPT_CD;
			other.NAME_CHAR = this.NAME_CHAR;
			other.CONCEPT_BLOB = this.CONCEPT_BLOB;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row16Struct other) {

			other.CONCEPT_PATH = this.CONCEPT_PATH;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.CONCEPT_CD = readString(dis, ois);

				this.NAME_CHAR = readString(dis, ois);

				this.CONCEPT_BLOB = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.CONCEPT_CD, dos, oos);

				writeString(this.NAME_CHAR, dos, oos);

				writeString(this.CONCEPT_BLOB, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CONCEPT_PATH,
					other.CONCEPT_PATH);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_9Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row16Struct row16 = new row16Struct();

				/**
				 * [tAdvancedHash_row16 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row16", false);
				start_Hash.put("tAdvancedHash_row16",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row16";

				int tos_count_tAdvancedHash_row16 = 0;

				// connection name:row16
				// source node:tFileInputDelimited_9 -
				// inputs:(after_tFileInputDelimited_5) outputs:(row16,row16) |
				// target node:tAdvancedHash_row16 - inputs:(row16) outputs:()
				// linked node: tMap_8 - inputs:(out1,row16,row17)
				// outputs:(asddd)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row16 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row16Struct> getLookup(matchingModeEnum_row16);

				globalMap.put("tHash_Lookup_row16", tHash_Lookup_row16);

				/**
				 * [tAdvancedHash_row16 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_9 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_9", false);
				start_Hash.put("tFileInputDelimited_9",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_9";

				int tos_count_tFileInputDelimited_9 = 0;

				int nb_line_tFileInputDelimited_9 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_9 = null;
				try {

					Object filename_tFileInputDelimited_9 = ((String) globalMap
							.get("tCreateTemporaryFile_4_FILEPATH"));
					if (filename_tFileInputDelimited_9 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_9 = 0, random_value_tFileInputDelimited_9 = -1;
						if (footer_value_tFileInputDelimited_9 > 0
								|| random_value_tFileInputDelimited_9 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_9 = new org.talend.fileprocess.FileInputDelimited(
								((String) globalMap
										.get("tCreateTemporaryFile_4_FILEPATH")),
								"UTF-8", "\t", "\n", true, 1, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_9 != null
							&& fid_tFileInputDelimited_9.nextRecord()) {

						row16 = null;

						row16 = null;

						boolean whetherReject_tFileInputDelimited_9 = false;
						row16 = new row16Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_9 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_9 = 0;

							row16.CONCEPT_PATH = fid_tFileInputDelimited_9
									.get(columnIndexWithD_tFileInputDelimited_9);

							columnIndexWithD_tFileInputDelimited_9 = 1;

							row16.CONCEPT_CD = fid_tFileInputDelimited_9
									.get(columnIndexWithD_tFileInputDelimited_9);

							columnIndexWithD_tFileInputDelimited_9 = 2;

							row16.NAME_CHAR = fid_tFileInputDelimited_9
									.get(columnIndexWithD_tFileInputDelimited_9);

							columnIndexWithD_tFileInputDelimited_9 = 3;

							row16.CONCEPT_BLOB = fid_tFileInputDelimited_9
									.get(columnIndexWithD_tFileInputDelimited_9);

							columnIndexWithD_tFileInputDelimited_9 = 4;

							temp = fid_tFileInputDelimited_9
									.get(columnIndexWithD_tFileInputDelimited_9);
							if (temp.length() > 0) {

								row16.UPDATE_DATE = ParserUtils.parseTo_Date(
										temp, "dd-MM-yyyy");

							} else {

								row16.UPDATE_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_9 = 5;

							temp = fid_tFileInputDelimited_9
									.get(columnIndexWithD_tFileInputDelimited_9);
							if (temp.length() > 0) {

								row16.DOWNLOAD_DATE = ParserUtils.parseTo_Date(
										temp, "dd-MM-yyyy");

							} else {

								row16.DOWNLOAD_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_9 = 6;

							temp = fid_tFileInputDelimited_9
									.get(columnIndexWithD_tFileInputDelimited_9);
							if (temp.length() > 0) {

								row16.IMPORT_DATE = ParserUtils.parseTo_Date(
										temp, "dd-MM-yyyy");

							} else {

								row16.IMPORT_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_9 = 7;

							row16.SOURCESYSTEM_CD = fid_tFileInputDelimited_9
									.get(columnIndexWithD_tFileInputDelimited_9);

							columnIndexWithD_tFileInputDelimited_9 = 8;

							row16.UPLOAD_ID = fid_tFileInputDelimited_9
									.get(columnIndexWithD_tFileInputDelimited_9);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_9 = true;

							System.err.println(e.getMessage());
							row16 = null;

						}

						/**
						 * [tFileInputDelimited_9 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_9 main ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						tos_count_tFileInputDelimited_9++;

						/**
						 * [tFileInputDelimited_9 main ] stop
						 */
						// Start of branch "row16"
						if (row16 != null) {

							/**
							 * [tAdvancedHash_row16 main ] start
							 */

							currentComponent = "tAdvancedHash_row16";

							row16Struct row16_HashRow = new row16Struct();

							row16_HashRow.CONCEPT_PATH = row16.CONCEPT_PATH;

							row16_HashRow.CONCEPT_CD = row16.CONCEPT_CD;

							row16_HashRow.NAME_CHAR = row16.NAME_CHAR;

							row16_HashRow.CONCEPT_BLOB = row16.CONCEPT_BLOB;

							row16_HashRow.UPDATE_DATE = row16.UPDATE_DATE;

							row16_HashRow.DOWNLOAD_DATE = row16.DOWNLOAD_DATE;

							row16_HashRow.IMPORT_DATE = row16.IMPORT_DATE;

							row16_HashRow.SOURCESYSTEM_CD = row16.SOURCESYSTEM_CD;

							row16_HashRow.UPLOAD_ID = row16.UPLOAD_ID;

							tHash_Lookup_row16.put(row16_HashRow);

							tos_count_tAdvancedHash_row16++;

							/**
							 * [tAdvancedHash_row16 main ] stop
							 */

						} // End of branch "row16"

						/**
						 * [tFileInputDelimited_9 end ] start
						 */

						currentComponent = "tFileInputDelimited_9";

					}
				} finally {
					if (!((Object) (((String) globalMap
							.get("tCreateTemporaryFile_4_FILEPATH"))) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_9 != null) {
							fid_tFileInputDelimited_9.close();
						}
					}
					if (fid_tFileInputDelimited_9 != null) {
						globalMap.put("tFileInputDelimited_9_NB_LINE",
								fid_tFileInputDelimited_9.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_9", true);
				end_Hash.put("tFileInputDelimited_9",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_9 end ] stop
				 */

				/**
				 * [tAdvancedHash_row16 end ] start
				 */

				currentComponent = "tAdvancedHash_row16";

				tHash_Lookup_row16.endPut();

				ok_Hash.put("tAdvancedHash_row16", true);
				end_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row16 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 1);
	}

	public static class row17Struct implements
			routines.system.IPersistableComparableLookupRow<row17Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public String START_DATE;

		public String getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public String END_DATE;

		public String getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.PATIENT_NUM == null) ? 0 : this.PATIENT_NUM
								.hashCode());

				result = prime
						* result
						+ ((this.CONCEPT_CD == null) ? 0 : this.CONCEPT_CD
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row17Struct other = (row17Struct) obj;

			if (this.PATIENT_NUM == null) {
				if (other.PATIENT_NUM != null)
					return false;
			} else if (!this.PATIENT_NUM.equals(other.PATIENT_NUM))
				return false;

			if (this.CONCEPT_CD == null) {
				if (other.CONCEPT_CD != null)
					return false;
			} else if (!this.CONCEPT_CD.equals(other.CONCEPT_CD))
				return false;

			return true;
		}

		public void copyDataTo(row17Struct other) {

			other.ENCOUNTER_NUM = this.ENCOUNTER_NUM;
			other.PATIENT_NUM = this.PATIENT_NUM;
			other.CONCEPT_CD = this.CONCEPT_CD;
			other.PROVIDER_ID = this.PROVIDER_ID;
			other.START_DATE = this.START_DATE;
			other.MODIFIER_CD = this.MODIFIER_CD;
			other.INSTANCE_NUM = this.INSTANCE_NUM;
			other.VALTYPE_CD = this.VALTYPE_CD;
			other.TVAL_CHAR = this.TVAL_CHAR;
			other.NVAL_NUM = this.NVAL_NUM;
			other.VALUEFLAG_CD = this.VALUEFLAG_CD;
			other.QUANTITY_NUM = this.QUANTITY_NUM;
			other.UNITS_CD = this.UNITS_CD;
			other.END_DATE = this.END_DATE;
			other.LOCATION_CD = this.LOCATION_CD;
			other.OBSERVATION_BLOB = this.OBSERVATION_BLOB;
			other.CONFIDENCE_NUM = this.CONFIDENCE_NUM;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row17Struct other) {

			other.PATIENT_NUM = this.PATIENT_NUM;
			other.CONCEPT_CD = this.CONCEPT_CD;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ENCOUNTER_NUM = (BigDecimal) ois.readObject();

				this.PROVIDER_ID = readString(dis, ois);

				this.START_DATE = readString(dis, ois);

				this.MODIFIER_CD = readString(dis, ois);

				this.INSTANCE_NUM = readString(dis, ois);

				this.VALTYPE_CD = readString(dis, ois);

				this.TVAL_CHAR = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.NVAL_NUM = null;
				} else {
					this.NVAL_NUM = dis.readFloat();
				}

				this.VALUEFLAG_CD = readString(dis, ois);

				this.QUANTITY_NUM = readString(dis, ois);

				this.UNITS_CD = readString(dis, ois);

				this.END_DATE = readString(dis, ois);

				this.LOCATION_CD = readString(dis, ois);

				this.OBSERVATION_BLOB = readString(dis, ois);

				this.CONFIDENCE_NUM = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				oos.writeObject(this.ENCOUNTER_NUM);

				writeString(this.PROVIDER_ID, dos, oos);

				writeString(this.START_DATE, dos, oos);

				writeString(this.MODIFIER_CD, dos, oos);

				writeString(this.INSTANCE_NUM, dos, oos);

				writeString(this.VALTYPE_CD, dos, oos);

				writeString(this.TVAL_CHAR, dos, oos);

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				writeString(this.VALUEFLAG_CD, dos, oos);

				writeString(this.QUANTITY_NUM, dos, oos);

				writeString(this.UNITS_CD, dos, oos);

				writeString(this.END_DATE, dos, oos);

				writeString(this.LOCATION_CD, dos, oos);

				writeString(this.OBSERVATION_BLOB, dos, oos);

				writeString(this.CONFIDENCE_NUM, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + START_DATE);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + END_DATE);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PATIENT_NUM,
					other.PATIENT_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.CONCEPT_CD,
					other.CONCEPT_CD);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_12Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row17Struct row17 = new row17Struct();

				/**
				 * [tAdvancedHash_row17 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row17", false);
				start_Hash.put("tAdvancedHash_row17",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row17";

				int tos_count_tAdvancedHash_row17 = 0;

				// connection name:row17
				// source node:tFileInputDelimited_12 -
				// inputs:(after_tFileInputDelimited_5) outputs:(row17,row17) |
				// target node:tAdvancedHash_row17 - inputs:(row17) outputs:()
				// linked node: tMap_8 - inputs:(out1,row16,row17)
				// outputs:(asddd)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row17 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct> tHash_Lookup_row17 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row17Struct> getLookup(matchingModeEnum_row17);

				globalMap.put("tHash_Lookup_row17", tHash_Lookup_row17);

				/**
				 * [tAdvancedHash_row17 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_12 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_12", false);
				start_Hash.put("tFileInputDelimited_12",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_12";

				int tos_count_tFileInputDelimited_12 = 0;

				int nb_line_tFileInputDelimited_12 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_12 = null;
				try {

					Object filename_tFileInputDelimited_12 = ((String) globalMap
							.get("tCreateTemporaryFile_3_FILEPATH"));
					if (filename_tFileInputDelimited_12 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_12 = 0, random_value_tFileInputDelimited_12 = -1;
						if (footer_value_tFileInputDelimited_12 > 0
								|| random_value_tFileInputDelimited_12 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_12 = new org.talend.fileprocess.FileInputDelimited(
								((String) globalMap
										.get("tCreateTemporaryFile_3_FILEPATH")),
								"UTF-8", "\t", "\n", true, 1, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_12 != null
							&& fid_tFileInputDelimited_12.nextRecord()) {

						row17 = null;

						row17 = null;

						boolean whetherReject_tFileInputDelimited_12 = false;
						row17 = new row17Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_12 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_12 = 0;

							temp = fid_tFileInputDelimited_12
									.get(columnIndexWithD_tFileInputDelimited_12);
							if (temp.length() > 0) {

								row17.ENCOUNTER_NUM = ParserUtils
										.parseTo_BigDecimal(temp);

							} else {

								row17.ENCOUNTER_NUM = null;

							}

							columnIndexWithD_tFileInputDelimited_12 = 1;

							temp = fid_tFileInputDelimited_12
									.get(columnIndexWithD_tFileInputDelimited_12);
							if (temp.length() > 0) {

								row17.PATIENT_NUM = ParserUtils
										.parseTo_BigDecimal(temp);

							} else {

								row17.PATIENT_NUM = null;

							}

							columnIndexWithD_tFileInputDelimited_12 = 2;

							row17.CONCEPT_CD = fid_tFileInputDelimited_12
									.get(columnIndexWithD_tFileInputDelimited_12);

							columnIndexWithD_tFileInputDelimited_12 = 3;

							row17.PROVIDER_ID = fid_tFileInputDelimited_12
									.get(columnIndexWithD_tFileInputDelimited_12);

							columnIndexWithD_tFileInputDelimited_12 = 4;

							row17.START_DATE = fid_tFileInputDelimited_12
									.get(columnIndexWithD_tFileInputDelimited_12);

							columnIndexWithD_tFileInputDelimited_12 = 5;

							row17.MODIFIER_CD = fid_tFileInputDelimited_12
									.get(columnIndexWithD_tFileInputDelimited_12);

							columnIndexWithD_tFileInputDelimited_12 = 6;

							row17.INSTANCE_NUM = fid_tFileInputDelimited_12
									.get(columnIndexWithD_tFileInputDelimited_12);

							columnIndexWithD_tFileInputDelimited_12 = 7;

							row17.VALTYPE_CD = fid_tFileInputDelimited_12
									.get(columnIndexWithD_tFileInputDelimited_12);

							columnIndexWithD_tFileInputDelimited_12 = 8;

							row17.TVAL_CHAR = fid_tFileInputDelimited_12
									.get(columnIndexWithD_tFileInputDelimited_12);

							columnIndexWithD_tFileInputDelimited_12 = 9;

							temp = fid_tFileInputDelimited_12
									.get(columnIndexWithD_tFileInputDelimited_12);
							if (temp.length() > 0) {

								row17.NVAL_NUM = ParserUtils
										.parseTo_Float(temp);

							} else {

								row17.NVAL_NUM = null;

							}

							columnIndexWithD_tFileInputDelimited_12 = 10;

							row17.VALUEFLAG_CD = fid_tFileInputDelimited_12
									.get(columnIndexWithD_tFileInputDelimited_12);

							columnIndexWithD_tFileInputDelimited_12 = 11;

							row17.QUANTITY_NUM = fid_tFileInputDelimited_12
									.get(columnIndexWithD_tFileInputDelimited_12);

							columnIndexWithD_tFileInputDelimited_12 = 12;

							row17.UNITS_CD = fid_tFileInputDelimited_12
									.get(columnIndexWithD_tFileInputDelimited_12);

							columnIndexWithD_tFileInputDelimited_12 = 13;

							row17.END_DATE = fid_tFileInputDelimited_12
									.get(columnIndexWithD_tFileInputDelimited_12);

							columnIndexWithD_tFileInputDelimited_12 = 14;

							row17.LOCATION_CD = fid_tFileInputDelimited_12
									.get(columnIndexWithD_tFileInputDelimited_12);

							columnIndexWithD_tFileInputDelimited_12 = 15;

							row17.OBSERVATION_BLOB = fid_tFileInputDelimited_12
									.get(columnIndexWithD_tFileInputDelimited_12);

							columnIndexWithD_tFileInputDelimited_12 = 16;

							row17.CONFIDENCE_NUM = fid_tFileInputDelimited_12
									.get(columnIndexWithD_tFileInputDelimited_12);

							columnIndexWithD_tFileInputDelimited_12 = 17;

							temp = fid_tFileInputDelimited_12
									.get(columnIndexWithD_tFileInputDelimited_12);
							if (temp.length() > 0) {

								row17.UPDATE_DATE = ParserUtils.parseTo_Date(
										temp, "yyyy-MM-dd");

							} else {

								row17.UPDATE_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_12 = 18;

							temp = fid_tFileInputDelimited_12
									.get(columnIndexWithD_tFileInputDelimited_12);
							if (temp.length() > 0) {

								row17.DOWNLOAD_DATE = ParserUtils.parseTo_Date(
										temp, "yyyy-MM-dd");

							} else {

								row17.DOWNLOAD_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_12 = 19;

							temp = fid_tFileInputDelimited_12
									.get(columnIndexWithD_tFileInputDelimited_12);
							if (temp.length() > 0) {

								row17.IMPORT_DATE = ParserUtils.parseTo_Date(
										temp, "yyyy-MM-dd");

							} else {

								row17.IMPORT_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_12 = 20;

							row17.SOURCESYSTEM_CD = fid_tFileInputDelimited_12
									.get(columnIndexWithD_tFileInputDelimited_12);

							columnIndexWithD_tFileInputDelimited_12 = 21;

							row17.UPLOAD_ID = fid_tFileInputDelimited_12
									.get(columnIndexWithD_tFileInputDelimited_12);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_12 = true;

							System.err.println(e.getMessage());
							row17 = null;

						}

						/**
						 * [tFileInputDelimited_12 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_12 main ] start
						 */

						currentComponent = "tFileInputDelimited_12";

						tos_count_tFileInputDelimited_12++;

						/**
						 * [tFileInputDelimited_12 main ] stop
						 */
						// Start of branch "row17"
						if (row17 != null) {

							/**
							 * [tAdvancedHash_row17 main ] start
							 */

							currentComponent = "tAdvancedHash_row17";

							row17Struct row17_HashRow = new row17Struct();

							row17_HashRow.ENCOUNTER_NUM = row17.ENCOUNTER_NUM;

							row17_HashRow.PATIENT_NUM = row17.PATIENT_NUM;

							row17_HashRow.CONCEPT_CD = row17.CONCEPT_CD;

							row17_HashRow.PROVIDER_ID = row17.PROVIDER_ID;

							row17_HashRow.START_DATE = row17.START_DATE;

							row17_HashRow.MODIFIER_CD = row17.MODIFIER_CD;

							row17_HashRow.INSTANCE_NUM = row17.INSTANCE_NUM;

							row17_HashRow.VALTYPE_CD = row17.VALTYPE_CD;

							row17_HashRow.TVAL_CHAR = row17.TVAL_CHAR;

							row17_HashRow.NVAL_NUM = row17.NVAL_NUM;

							row17_HashRow.VALUEFLAG_CD = row17.VALUEFLAG_CD;

							row17_HashRow.QUANTITY_NUM = row17.QUANTITY_NUM;

							row17_HashRow.UNITS_CD = row17.UNITS_CD;

							row17_HashRow.END_DATE = row17.END_DATE;

							row17_HashRow.LOCATION_CD = row17.LOCATION_CD;

							row17_HashRow.OBSERVATION_BLOB = row17.OBSERVATION_BLOB;

							row17_HashRow.CONFIDENCE_NUM = row17.CONFIDENCE_NUM;

							row17_HashRow.UPDATE_DATE = row17.UPDATE_DATE;

							row17_HashRow.DOWNLOAD_DATE = row17.DOWNLOAD_DATE;

							row17_HashRow.IMPORT_DATE = row17.IMPORT_DATE;

							row17_HashRow.SOURCESYSTEM_CD = row17.SOURCESYSTEM_CD;

							row17_HashRow.UPLOAD_ID = row17.UPLOAD_ID;

							tHash_Lookup_row17.put(row17_HashRow);

							tos_count_tAdvancedHash_row17++;

							/**
							 * [tAdvancedHash_row17 main ] stop
							 */

						} // End of branch "row17"

						/**
						 * [tFileInputDelimited_12 end ] start
						 */

						currentComponent = "tFileInputDelimited_12";

					}
				} finally {
					if (!((Object) (((String) globalMap
							.get("tCreateTemporaryFile_3_FILEPATH"))) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_12 != null) {
							fid_tFileInputDelimited_12.close();
						}
					}
					if (fid_tFileInputDelimited_12 != null) {
						globalMap.put("tFileInputDelimited_12_NB_LINE",
								fid_tFileInputDelimited_12.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_12", true);
				end_Hash.put("tFileInputDelimited_12",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_12 end ] stop
				 */

				/**
				 * [tAdvancedHash_row17 end ] start
				 */

				currentComponent = "tAdvancedHash_row17";

				tHash_Lookup_row17.endPut();

				ok_Hash.put("tAdvancedHash_row17", true);
				end_Hash.put("tAdvancedHash_row17", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row17 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_12_SUBPROCESS_STATE", 1);
	}

	public static class row9Struct implements
			routines.system.IPersistableComparableLookupRow<row9Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.PATIENT_NUM == null) ? 0 : this.PATIENT_NUM
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row9Struct other = (row9Struct) obj;

			if (this.PATIENT_NUM == null) {
				if (other.PATIENT_NUM != null)
					return false;
			} else if (!this.PATIENT_NUM.equals(other.PATIENT_NUM))
				return false;

			return true;
		}

		public void copyDataTo(row9Struct other) {

			other.PATIENT_IDE = this.PATIENT_IDE;
			other.PATIENT_IDE_SOURCE = this.PATIENT_IDE_SOURCE;
			other.PATIENT_NUM = this.PATIENT_NUM;
			other.PATIENT_IDE_STATUS = this.PATIENT_IDE_STATUS;
			other.UPLOAD_DATE = this.UPLOAD_DATE;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row9Struct other) {

			other.PATIENT_NUM = this.PATIENT_NUM;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.PATIENT_IDE = readString(dis, ois);

				this.PATIENT_IDE_SOURCE = readString(dis, ois);

				this.PATIENT_IDE_STATUS = readString(dis, ois);

				this.UPLOAD_DATE = readDate(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.PATIENT_IDE, dos, oos);

				writeString(this.PATIENT_IDE_SOURCE, dos, oos);

				writeString(this.PATIENT_IDE_STATUS, dos, oos);

				writeDate(this.UPLOAD_DATE, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PATIENT_NUM,
					other.PATIENT_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();

				/**
				 * [tAdvancedHash_row9 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row9", false);
				start_Hash
						.put("tAdvancedHash_row9", System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row9";

				int tos_count_tAdvancedHash_row9 = 0;

				// connection name:row9
				// source node:tFileInputDelimited_6 -
				// inputs:(after_tFileInputDelimited_5) outputs:(row9,row9) |
				// target node:tAdvancedHash_row9 - inputs:(row9) outputs:()
				// linked node: tMap_6 - inputs:(to_patient_mapping,row9)
				// outputs:(to_pat_mapping,asdd)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row9 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row9Struct> getLookup(matchingModeEnum_row9);

				globalMap.put("tHash_Lookup_row9", tHash_Lookup_row9);

				/**
				 * [tAdvancedHash_row9 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_6", false);
				start_Hash.put("tFileInputDelimited_6",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_6";

				int tos_count_tFileInputDelimited_6 = 0;

				int nb_line_tFileInputDelimited_6 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_6 = null;
				try {

					Object filename_tFileInputDelimited_6 = ((String) globalMap
							.get("tCreateTemporaryFile_5_FILEPATH"));
					if (filename_tFileInputDelimited_6 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_6 = 0, random_value_tFileInputDelimited_6 = -1;
						if (footer_value_tFileInputDelimited_6 > 0
								|| random_value_tFileInputDelimited_6 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_6 = new org.talend.fileprocess.FileInputDelimited(
								((String) globalMap
										.get("tCreateTemporaryFile_5_FILEPATH")),
								"UTF-8", "\t", "\n", true, 1, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_6 != null
							&& fid_tFileInputDelimited_6.nextRecord()) {

						row9 = null;

						row9 = null;

						boolean whetherReject_tFileInputDelimited_6 = false;
						row9 = new row9Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_6 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_6 = 0;

							row9.PATIENT_IDE = fid_tFileInputDelimited_6
									.get(columnIndexWithD_tFileInputDelimited_6);

							columnIndexWithD_tFileInputDelimited_6 = 1;

							row9.PATIENT_IDE_SOURCE = fid_tFileInputDelimited_6
									.get(columnIndexWithD_tFileInputDelimited_6);

							columnIndexWithD_tFileInputDelimited_6 = 2;

							temp = fid_tFileInputDelimited_6
									.get(columnIndexWithD_tFileInputDelimited_6);
							if (temp.length() > 0) {

								row9.PATIENT_NUM = ParserUtils
										.parseTo_BigDecimal(temp);

							} else {

								row9.PATIENT_NUM = null;

							}

							columnIndexWithD_tFileInputDelimited_6 = 3;

							row9.PATIENT_IDE_STATUS = fid_tFileInputDelimited_6
									.get(columnIndexWithD_tFileInputDelimited_6);

							columnIndexWithD_tFileInputDelimited_6 = 4;

							temp = fid_tFileInputDelimited_6
									.get(columnIndexWithD_tFileInputDelimited_6);
							if (temp.length() > 0) {

								row9.UPLOAD_DATE = ParserUtils.parseTo_Date(
										temp, "dd-MM-yyyy");

							} else {

								row9.UPLOAD_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_6 = 5;

							temp = fid_tFileInputDelimited_6
									.get(columnIndexWithD_tFileInputDelimited_6);
							if (temp.length() > 0) {

								row9.UPDATE_DATE = ParserUtils.parseTo_Date(
										temp, "dd-MM-yyyy");

							} else {

								row9.UPDATE_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_6 = 6;

							temp = fid_tFileInputDelimited_6
									.get(columnIndexWithD_tFileInputDelimited_6);
							if (temp.length() > 0) {

								row9.DOWNLOAD_DATE = ParserUtils.parseTo_Date(
										temp, "dd-MM-yyyy");

							} else {

								row9.DOWNLOAD_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_6 = 7;

							temp = fid_tFileInputDelimited_6
									.get(columnIndexWithD_tFileInputDelimited_6);
							if (temp.length() > 0) {

								row9.IMPORT_DATE = ParserUtils.parseTo_Date(
										temp, "dd-MM-yyyy");

							} else {

								row9.IMPORT_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_6 = 8;

							row9.SOURCESYSTEM_CD = fid_tFileInputDelimited_6
									.get(columnIndexWithD_tFileInputDelimited_6);

							columnIndexWithD_tFileInputDelimited_6 = 9;

							row9.UPLOAD_ID = fid_tFileInputDelimited_6
									.get(columnIndexWithD_tFileInputDelimited_6);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_6 = true;

							System.err.println(e.getMessage());
							row9 = null;

						}

						/**
						 * [tFileInputDelimited_6 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_6 main ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						tos_count_tFileInputDelimited_6++;

						/**
						 * [tFileInputDelimited_6 main ] stop
						 */
						// Start of branch "row9"
						if (row9 != null) {

							/**
							 * [tAdvancedHash_row9 main ] start
							 */

							currentComponent = "tAdvancedHash_row9";

							row9Struct row9_HashRow = new row9Struct();

							row9_HashRow.PATIENT_IDE = row9.PATIENT_IDE;

							row9_HashRow.PATIENT_IDE_SOURCE = row9.PATIENT_IDE_SOURCE;

							row9_HashRow.PATIENT_NUM = row9.PATIENT_NUM;

							row9_HashRow.PATIENT_IDE_STATUS = row9.PATIENT_IDE_STATUS;

							row9_HashRow.UPLOAD_DATE = row9.UPLOAD_DATE;

							row9_HashRow.UPDATE_DATE = row9.UPDATE_DATE;

							row9_HashRow.DOWNLOAD_DATE = row9.DOWNLOAD_DATE;

							row9_HashRow.IMPORT_DATE = row9.IMPORT_DATE;

							row9_HashRow.SOURCESYSTEM_CD = row9.SOURCESYSTEM_CD;

							row9_HashRow.UPLOAD_ID = row9.UPLOAD_ID;

							tHash_Lookup_row9.put(row9_HashRow);

							tos_count_tAdvancedHash_row9++;

							/**
							 * [tAdvancedHash_row9 main ] stop
							 */

						} // End of branch "row9"

						/**
						 * [tFileInputDelimited_6 end ] start
						 */

						currentComponent = "tFileInputDelimited_6";

					}
				} finally {
					if (!((Object) (((String) globalMap
							.get("tCreateTemporaryFile_5_FILEPATH"))) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_6 != null) {
							fid_tFileInputDelimited_6.close();
						}
					}
					if (fid_tFileInputDelimited_6 != null) {
						globalMap.put("tFileInputDelimited_6_NB_LINE",
								fid_tFileInputDelimited_6.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_6", true);
				end_Hash.put("tFileInputDelimited_6",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_6 end ] stop
				 */

				/**
				 * [tAdvancedHash_row9 end ] start
				 */

				currentComponent = "tAdvancedHash_row9";

				tHash_Lookup_row9.endPut();

				ok_Hash.put("tAdvancedHash_row9", true);
				end_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row9 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 1);
	}

	public static class row10Struct implements
			routines.system.IPersistableComparableLookupRow<row10Struct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String VITAL_STATUS_CD;

		public String getVITAL_STATUS_CD() {
			return this.VITAL_STATUS_CD;
		}

		public String BIRTH_DATE;

		public String getBIRTH_DATE() {
			return this.BIRTH_DATE;
		}

		public String DEATH_DATE;

		public String getDEATH_DATE() {
			return this.DEATH_DATE;
		}

		public String SEX_CD;

		public String getSEX_CD() {
			return this.SEX_CD;
		}

		public String AGE_IN_YEARS_NUM;

		public String getAGE_IN_YEARS_NUM() {
			return this.AGE_IN_YEARS_NUM;
		}

		public String LANGUAGE_CD;

		public String getLANGUAGE_CD() {
			return this.LANGUAGE_CD;
		}

		public String RACE_CD;

		public String getRACE_CD() {
			return this.RACE_CD;
		}

		public String MARITAL_STATUS_CD;

		public String getMARITAL_STATUS_CD() {
			return this.MARITAL_STATUS_CD;
		}

		public String RELIGION_CD;

		public String getRELIGION_CD() {
			return this.RELIGION_CD;
		}

		public String ZIP_CD;

		public String getZIP_CD() {
			return this.ZIP_CD;
		}

		public String STATECITYZIP_PATH;

		public String getSTATECITYZIP_PATH() {
			return this.STATECITYZIP_PATH;
		}

		public String INCOME_CD;

		public String getINCOME_CD() {
			return this.INCOME_CD;
		}

		public String PATIENT_BLOB;

		public String getPATIENT_BLOB() {
			return this.PATIENT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.PATIENT_NUM == null) ? 0 : this.PATIENT_NUM
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row10Struct other = (row10Struct) obj;

			if (this.PATIENT_NUM == null) {
				if (other.PATIENT_NUM != null)
					return false;
			} else if (!this.PATIENT_NUM.equals(other.PATIENT_NUM))
				return false;

			return true;
		}

		public void copyDataTo(row10Struct other) {

			other.PATIENT_NUM = this.PATIENT_NUM;
			other.VITAL_STATUS_CD = this.VITAL_STATUS_CD;
			other.BIRTH_DATE = this.BIRTH_DATE;
			other.DEATH_DATE = this.DEATH_DATE;
			other.SEX_CD = this.SEX_CD;
			other.AGE_IN_YEARS_NUM = this.AGE_IN_YEARS_NUM;
			other.LANGUAGE_CD = this.LANGUAGE_CD;
			other.RACE_CD = this.RACE_CD;
			other.MARITAL_STATUS_CD = this.MARITAL_STATUS_CD;
			other.RELIGION_CD = this.RELIGION_CD;
			other.ZIP_CD = this.ZIP_CD;
			other.STATECITYZIP_PATH = this.STATECITYZIP_PATH;
			other.INCOME_CD = this.INCOME_CD;
			other.PATIENT_BLOB = this.PATIENT_BLOB;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row10Struct other) {

			other.PATIENT_NUM = this.PATIENT_NUM;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.VITAL_STATUS_CD = readString(dis, ois);

				this.BIRTH_DATE = readString(dis, ois);

				this.DEATH_DATE = readString(dis, ois);

				this.SEX_CD = readString(dis, ois);

				this.AGE_IN_YEARS_NUM = readString(dis, ois);

				this.LANGUAGE_CD = readString(dis, ois);

				this.RACE_CD = readString(dis, ois);

				this.MARITAL_STATUS_CD = readString(dis, ois);

				this.RELIGION_CD = readString(dis, ois);

				this.ZIP_CD = readString(dis, ois);

				this.STATECITYZIP_PATH = readString(dis, ois);

				this.INCOME_CD = readString(dis, ois);

				this.PATIENT_BLOB = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.VITAL_STATUS_CD, dos, oos);

				writeString(this.BIRTH_DATE, dos, oos);

				writeString(this.DEATH_DATE, dos, oos);

				writeString(this.SEX_CD, dos, oos);

				writeString(this.AGE_IN_YEARS_NUM, dos, oos);

				writeString(this.LANGUAGE_CD, dos, oos);

				writeString(this.RACE_CD, dos, oos);

				writeString(this.MARITAL_STATUS_CD, dos, oos);

				writeString(this.RELIGION_CD, dos, oos);

				writeString(this.ZIP_CD, dos, oos);

				writeString(this.STATECITYZIP_PATH, dos, oos);

				writeString(this.INCOME_CD, dos, oos);

				writeString(this.PATIENT_BLOB, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",VITAL_STATUS_CD=" + VITAL_STATUS_CD);
			sb.append(",BIRTH_DATE=" + BIRTH_DATE);
			sb.append(",DEATH_DATE=" + DEATH_DATE);
			sb.append(",SEX_CD=" + SEX_CD);
			sb.append(",AGE_IN_YEARS_NUM=" + AGE_IN_YEARS_NUM);
			sb.append(",LANGUAGE_CD=" + LANGUAGE_CD);
			sb.append(",RACE_CD=" + RACE_CD);
			sb.append(",MARITAL_STATUS_CD=" + MARITAL_STATUS_CD);
			sb.append(",RELIGION_CD=" + RELIGION_CD);
			sb.append(",ZIP_CD=" + ZIP_CD);
			sb.append(",STATECITYZIP_PATH=" + STATECITYZIP_PATH);
			sb.append(",INCOME_CD=" + INCOME_CD);
			sb.append(",PATIENT_BLOB=" + PATIENT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PATIENT_NUM,
					other.PATIENT_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row10Struct row10 = new row10Struct();

				/**
				 * [tAdvancedHash_row10 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row10", false);
				start_Hash.put("tAdvancedHash_row10",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row10";

				int tos_count_tAdvancedHash_row10 = 0;

				// connection name:row10
				// source node:tFileInputDelimited_7 -
				// inputs:(after_tFileInputDelimited_5) outputs:(row10,row10) |
				// target node:tAdvancedHash_row10 - inputs:(row10) outputs:()
				// linked node: tMap_7 - inputs:(asdd,row10) outputs:(asd)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row10 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row10Struct> getLookup(matchingModeEnum_row10);

				globalMap.put("tHash_Lookup_row10", tHash_Lookup_row10);

				/**
				 * [tAdvancedHash_row10 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_7", false);
				start_Hash.put("tFileInputDelimited_7",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_7";

				int tos_count_tFileInputDelimited_7 = 0;

				int nb_line_tFileInputDelimited_7 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_7 = null;
				try {

					Object filename_tFileInputDelimited_7 = ((String) globalMap
							.get("tCreateTemporaryFile_6_FILEPATH"));
					if (filename_tFileInputDelimited_7 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_7 = 0, random_value_tFileInputDelimited_7 = -1;
						if (footer_value_tFileInputDelimited_7 > 0
								|| random_value_tFileInputDelimited_7 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_7 = new org.talend.fileprocess.FileInputDelimited(
								((String) globalMap
										.get("tCreateTemporaryFile_6_FILEPATH")),
								"UTF-8", "\t", "\n", true, 1, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_7 != null
							&& fid_tFileInputDelimited_7.nextRecord()) {

						row10 = null;

						row10 = null;

						boolean whetherReject_tFileInputDelimited_7 = false;
						row10 = new row10Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_7 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_7 = 0;

							temp = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);
							if (temp.length() > 0) {

								row10.PATIENT_NUM = ParserUtils
										.parseTo_BigDecimal(temp);

							} else {

								row10.PATIENT_NUM = null;

							}

							columnIndexWithD_tFileInputDelimited_7 = 1;

							row10.VITAL_STATUS_CD = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 2;

							row10.BIRTH_DATE = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 3;

							row10.DEATH_DATE = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 4;

							row10.SEX_CD = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 5;

							row10.AGE_IN_YEARS_NUM = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 6;

							row10.LANGUAGE_CD = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 7;

							row10.RACE_CD = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 8;

							row10.MARITAL_STATUS_CD = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 9;

							row10.RELIGION_CD = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 10;

							row10.ZIP_CD = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 11;

							row10.STATECITYZIP_PATH = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 12;

							row10.INCOME_CD = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 13;

							row10.PATIENT_BLOB = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 14;

							temp = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);
							if (temp.length() > 0) {

								row10.UPDATE_DATE = ParserUtils.parseTo_Date(
										temp, "dd-MM-yyyy");

							} else {

								row10.UPDATE_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_7 = 15;

							temp = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);
							if (temp.length() > 0) {

								row10.DOWNLOAD_DATE = ParserUtils.parseTo_Date(
										temp, "dd-MM-yyyy");

							} else {

								row10.DOWNLOAD_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_7 = 16;

							temp = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);
							if (temp.length() > 0) {

								row10.IMPORT_DATE = ParserUtils.parseTo_Date(
										temp, "dd-MM-yyyy");

							} else {

								row10.IMPORT_DATE = null;

							}

							columnIndexWithD_tFileInputDelimited_7 = 17;

							row10.SOURCESYSTEM_CD = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 18;

							row10.UPLOAD_ID = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_7 = true;

							System.err.println(e.getMessage());
							row10 = null;

						}

						/**
						 * [tFileInputDelimited_7 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_7 main ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						tos_count_tFileInputDelimited_7++;

						/**
						 * [tFileInputDelimited_7 main ] stop
						 */
						// Start of branch "row10"
						if (row10 != null) {

							/**
							 * [tAdvancedHash_row10 main ] start
							 */

							currentComponent = "tAdvancedHash_row10";

							row10Struct row10_HashRow = new row10Struct();

							row10_HashRow.PATIENT_NUM = row10.PATIENT_NUM;

							row10_HashRow.VITAL_STATUS_CD = row10.VITAL_STATUS_CD;

							row10_HashRow.BIRTH_DATE = row10.BIRTH_DATE;

							row10_HashRow.DEATH_DATE = row10.DEATH_DATE;

							row10_HashRow.SEX_CD = row10.SEX_CD;

							row10_HashRow.AGE_IN_YEARS_NUM = row10.AGE_IN_YEARS_NUM;

							row10_HashRow.LANGUAGE_CD = row10.LANGUAGE_CD;

							row10_HashRow.RACE_CD = row10.RACE_CD;

							row10_HashRow.MARITAL_STATUS_CD = row10.MARITAL_STATUS_CD;

							row10_HashRow.RELIGION_CD = row10.RELIGION_CD;

							row10_HashRow.ZIP_CD = row10.ZIP_CD;

							row10_HashRow.STATECITYZIP_PATH = row10.STATECITYZIP_PATH;

							row10_HashRow.INCOME_CD = row10.INCOME_CD;

							row10_HashRow.PATIENT_BLOB = row10.PATIENT_BLOB;

							row10_HashRow.UPDATE_DATE = row10.UPDATE_DATE;

							row10_HashRow.DOWNLOAD_DATE = row10.DOWNLOAD_DATE;

							row10_HashRow.IMPORT_DATE = row10.IMPORT_DATE;

							row10_HashRow.SOURCESYSTEM_CD = row10.SOURCESYSTEM_CD;

							row10_HashRow.UPLOAD_ID = row10.UPLOAD_ID;

							tHash_Lookup_row10.put(row10_HashRow);

							tos_count_tAdvancedHash_row10++;

							/**
							 * [tAdvancedHash_row10 main ] stop
							 */

						} // End of branch "row10"

						/**
						 * [tFileInputDelimited_7 end ] start
						 */

						currentComponent = "tFileInputDelimited_7";

					}
				} finally {
					if (!((Object) (((String) globalMap
							.get("tCreateTemporaryFile_6_FILEPATH"))) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_7 != null) {
							fid_tFileInputDelimited_7.close();
						}
					}
					if (fid_tFileInputDelimited_7 != null) {
						globalMap.put("tFileInputDelimited_7_NB_LINE",
								fid_tFileInputDelimited_7.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_7", true);
				end_Hash.put("tFileInputDelimited_7",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_7 end ] stop
				 */

				/**
				 * [tAdvancedHash_row10 end ] start
				 */

				currentComponent = "tAdvancedHash_row10";

				tHash_Lookup_row10.endPut();

				ok_Hash.put("tAdvancedHash_row10", true);
				end_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row10 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final TOSIDRTCommand_TransformationToTarget TOSIDRTCommand_TransformationToTargetClass = new TOSIDRTCommand_TransformationToTarget();

		int exitCode = TOSIDRTCommand_TransformationToTargetClass
				.runJobInTOS(args);
		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = TOSIDRTCommand_TransformationToTarget.class
					.getClassLoader().getResourceAsStream(
							"tos/tosidrtcommand_transformationtotarget_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.folderOutput = (String) context.getProperty("folderOutput");
			context.folderMain = (String) context.getProperty("folderMain");
			context.DB_StagingI2B2_Host = (String) context
					.getProperty("DB_StagingI2B2_Host");
			context.DB_StagingI2B2_Instance = (String) context
					.getProperty("DB_StagingI2B2_Instance");
			context.DB_StagingI2B2_jdbcurl = (String) context
					.getProperty("DB_StagingI2B2_jdbcurl");
			context.DB_StagingI2B2_Password = (java.lang.String) context
					.getProperty("DB_StagingI2B2_Password");
			context.DB_StagingI2B2_Port = (String) context
					.getProperty("DB_StagingI2B2_Port");
			context.DB_StagingI2B2_Schema = (String) context
					.getProperty("DB_StagingI2B2_Schema");
			context.DB_StagingI2B2_sqlclassname = (String) context
					.getProperty("DB_StagingI2B2_sqlclassname");
			context.DB_StagingI2B2_Username = (String) context
					.getProperty("DB_StagingI2B2_Username");
			context.DB_TargetI2B2_Host = (String) context
					.getProperty("DB_TargetI2B2_Host");
			context.DB_TargetI2B2_Instance = (String) context
					.getProperty("DB_TargetI2B2_Instance");
			context.DB_TargetI2B2_jdbcurl = (String) context
					.getProperty("DB_TargetI2B2_jdbcurl");
			context.DB_TargetI2B2_Password = (java.lang.String) context
					.getProperty("DB_TargetI2B2_Password");
			context.DB_TargetI2B2_Port = (String) context
					.getProperty("DB_TargetI2B2_Port");
			context.DB_TargetI2B2_Schema = (String) context
					.getProperty("DB_TargetI2B2_Schema");
			context.DB_TargetI2B2_sqlclassname = (String) context
					.getProperty("DB_TargetI2B2_sqlclassname");
			context.DB_TargetI2B2_Username = (String) context
					.getProperty("DB_TargetI2B2_Username");
			try {
				context.TargetID = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("TargetID"));
			} catch (NumberFormatException e) {
				context.TargetID = null;
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("folderOutput")) {
				context.folderOutput = (String) parentContextMap
						.get("folderOutput");
			}
			if (parentContextMap.containsKey("folderMain")) {
				context.folderMain = (String) parentContextMap
						.get("folderMain");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Host")) {
				context.DB_StagingI2B2_Host = (String) parentContextMap
						.get("DB_StagingI2B2_Host");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Instance")) {
				context.DB_StagingI2B2_Instance = (String) parentContextMap
						.get("DB_StagingI2B2_Instance");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_jdbcurl")) {
				context.DB_StagingI2B2_jdbcurl = (String) parentContextMap
						.get("DB_StagingI2B2_jdbcurl");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Password")) {
				context.DB_StagingI2B2_Password = (java.lang.String) parentContextMap
						.get("DB_StagingI2B2_Password");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Port")) {
				context.DB_StagingI2B2_Port = (String) parentContextMap
						.get("DB_StagingI2B2_Port");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Schema")) {
				context.DB_StagingI2B2_Schema = (String) parentContextMap
						.get("DB_StagingI2B2_Schema");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_sqlclassname")) {
				context.DB_StagingI2B2_sqlclassname = (String) parentContextMap
						.get("DB_StagingI2B2_sqlclassname");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Username")) {
				context.DB_StagingI2B2_Username = (String) parentContextMap
						.get("DB_StagingI2B2_Username");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Host")) {
				context.DB_TargetI2B2_Host = (String) parentContextMap
						.get("DB_TargetI2B2_Host");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Instance")) {
				context.DB_TargetI2B2_Instance = (String) parentContextMap
						.get("DB_TargetI2B2_Instance");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_jdbcurl")) {
				context.DB_TargetI2B2_jdbcurl = (String) parentContextMap
						.get("DB_TargetI2B2_jdbcurl");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Password")) {
				context.DB_TargetI2B2_Password = (java.lang.String) parentContextMap
						.get("DB_TargetI2B2_Password");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Port")) {
				context.DB_TargetI2B2_Port = (String) parentContextMap
						.get("DB_TargetI2B2_Port");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Schema")) {
				context.DB_TargetI2B2_Schema = (String) parentContextMap
						.get("DB_TargetI2B2_Schema");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_sqlclassname")) {
				context.DB_TargetI2B2_sqlclassname = (String) parentContextMap
						.get("DB_TargetI2B2_sqlclassname");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Username")) {
				context.DB_TargetI2B2_Username = (String) parentContextMap
						.get("DB_TargetI2B2_Username");
			}
			if (parentContextMap.containsKey("TargetID")) {
				context.TargetID = (Integer) parentContextMap.get("TargetID");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tCreateTemporaryFile_8Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tCreateTemporaryFile_8) {

			e_tCreateTemporaryFile_8.printStackTrace();
			globalMap.put("tCreateTemporaryFile_8_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : TOSIDRTCommand_TransformationToTarget");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 904722 characters generated by Talend Open Studio for Data Integration on the
 * 5. Dezember 2013 12:44:45 MEZ
 ************************************************************************************************/
