// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package tos.tosidrtcommand_loadtargetprojects_0_1;

import routines.IIT;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.ExportDB;
import routines.enc_num_routine;
import routines.testRoutine;
import routines.Mathematical;
import routines.Relational;
import routines.TalendDate;
import routines.IDRTHelper;
import routines.TOSHandler2;
import routines.PIDGen;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaFlex_1
//import java.util.List;

//the import part of tJava_2
//import java.util.List;

//the import part of tJavaFlex_3
//import java.util.List;

//the import part of tLibraryLoad_1
import de.umg.mi.idrt.ioe.tos.TOSHandler;

//the import part of tJava_1
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: TOSIDRTCommand_LoadTargetProjects Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.3.1.r104014
 * @status 
 */
public class TOSIDRTCommand_LoadTargetProjects implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (currentTargetProjectID != null) {

				this.setProperty("currentTargetProjectID",
						currentTargetProjectID.toString());

			}

			if (DB_StagingI2B2_Host != null) {

				this.setProperty("DB_StagingI2B2_Host",
						DB_StagingI2B2_Host.toString());

			}

			if (DB_StagingI2B2_Instance != null) {

				this.setProperty("DB_StagingI2B2_Instance",
						DB_StagingI2B2_Instance.toString());

			}

			if (DB_StagingI2B2_jdbcurl != null) {

				this.setProperty("DB_StagingI2B2_jdbcurl",
						DB_StagingI2B2_jdbcurl.toString());

			}

			if (DB_StagingI2B2_Password != null) {

				this.setProperty("DB_StagingI2B2_Password",
						DB_StagingI2B2_Password.toString());

			}

			if (DB_StagingI2B2_Port != null) {

				this.setProperty("DB_StagingI2B2_Port",
						DB_StagingI2B2_Port.toString());

			}

			if (DB_StagingI2B2_Schema != null) {

				this.setProperty("DB_StagingI2B2_Schema",
						DB_StagingI2B2_Schema.toString());

			}

			if (DB_StagingI2B2_sqlclassname != null) {

				this.setProperty("DB_StagingI2B2_sqlclassname",
						DB_StagingI2B2_sqlclassname.toString());

			}

			if (DB_StagingI2B2_Username != null) {

				this.setProperty("DB_StagingI2B2_Username",
						DB_StagingI2B2_Username.toString());

			}

			if (DB_TargetI2B2_Host != null) {

				this.setProperty("DB_TargetI2B2_Host",
						DB_TargetI2B2_Host.toString());

			}

			if (DB_TargetI2B2_Instance != null) {

				this.setProperty("DB_TargetI2B2_Instance",
						DB_TargetI2B2_Instance.toString());

			}

			if (DB_TargetI2B2_jdbcurl != null) {

				this.setProperty("DB_TargetI2B2_jdbcurl",
						DB_TargetI2B2_jdbcurl.toString());

			}

			if (DB_TargetI2B2_Password != null) {

				this.setProperty("DB_TargetI2B2_Password",
						DB_TargetI2B2_Password.toString());

			}

			if (DB_TargetI2B2_Port != null) {

				this.setProperty("DB_TargetI2B2_Port",
						DB_TargetI2B2_Port.toString());

			}

			if (DB_TargetI2B2_Schema != null) {

				this.setProperty("DB_TargetI2B2_Schema",
						DB_TargetI2B2_Schema.toString());

			}

			if (DB_TargetI2B2_sqlclassname != null) {

				this.setProperty("DB_TargetI2B2_sqlclassname",
						DB_TargetI2B2_sqlclassname.toString());

			}

			if (DB_TargetI2B2_Username != null) {

				this.setProperty("DB_TargetI2B2_Username",
						DB_TargetI2B2_Username.toString());

			}

			if (DataFile != null) {

				this.setProperty("DataFile", DataFile.toString());

			}

			if (ErrorMessage != null) {

				this.setProperty("ErrorMessage", ErrorMessage.toString());

			}

			if (IfValue != null) {

				this.setProperty("IfValue", IfValue.toString());

			}

			if (JDBC_URL != null) {

				this.setProperty("JDBC_URL", JDBC_URL.toString());

			}

			if (JDBCDriver != null) {

				this.setProperty("JDBCDriver", JDBCDriver.toString());

			}

			if (Job != null) {

				this.setProperty("Job", Job.toString());

			}

			if (OracleDB != null) {

				this.setProperty("OracleDB", OracleDB.toString());

			}

			if (OracleHost != null) {

				this.setProperty("OracleHost", OracleHost.toString());

			}

			if (OraclePassword != null) {

				this.setProperty("OraclePassword", OraclePassword.toString());

			}

			if (OraclePort != null) {

				this.setProperty("OraclePort", OraclePort.toString());

			}

			if (OracleSchema != null) {

				this.setProperty("OracleSchema", OracleSchema.toString());

			}

			if (OracleUsername != null) {

				this.setProperty("OracleUsername", OracleUsername.toString());

			}

			if (SQLCommand != null) {

				this.setProperty("SQLCommand", SQLCommand.toString());

			}

			if (SQLCommand2 != null) {

				this.setProperty("SQLCommand2", SQLCommand2.toString());

			}

			if (SQLTable != null) {

				this.setProperty("SQLTable", SQLTable.toString());

			}

			if (SQLTable2 != null) {

				this.setProperty("SQLTable2", SQLTable2.toString());

			}

			if (StatusMessage != null) {

				this.setProperty("StatusMessage", StatusMessage.toString());

			}

			if (TableIEOTarget != null) {

				this.setProperty("TableIEOTarget", TableIEOTarget.toString());

			}

			if (TableIEOTargetOntology != null) {

				this.setProperty("TableIEOTargetOntology",
						TableIEOTargetOntology.toString());

			}

			if (TableIEOTargetProject != null) {

				this.setProperty("TableIEOTargetProject",
						TableIEOTargetProject.toString());

			}

			if (TargetID != null) {

				this.setProperty("TargetID", TargetID.toString());

			}

			if (TOSHandler != null) {

				this.setProperty("TOSHandler", TOSHandler.toString());

			}

		}

		public Integer currentTargetProjectID;

		public Integer getCurrentTargetProjectID() {
			return this.currentTargetProjectID;
		}

		public String DB_StagingI2B2_Host;

		public String getDB_StagingI2B2_Host() {
			return this.DB_StagingI2B2_Host;
		}

		public String DB_StagingI2B2_Instance;

		public String getDB_StagingI2B2_Instance() {
			return this.DB_StagingI2B2_Instance;
		}

		public String DB_StagingI2B2_jdbcurl;

		public String getDB_StagingI2B2_jdbcurl() {
			return this.DB_StagingI2B2_jdbcurl;
		}

		public java.lang.String DB_StagingI2B2_Password;

		public java.lang.String getDB_StagingI2B2_Password() {
			return this.DB_StagingI2B2_Password;
		}

		public String DB_StagingI2B2_Port;

		public String getDB_StagingI2B2_Port() {
			return this.DB_StagingI2B2_Port;
		}

		public String DB_StagingI2B2_Schema;

		public String getDB_StagingI2B2_Schema() {
			return this.DB_StagingI2B2_Schema;
		}

		public String DB_StagingI2B2_sqlclassname;

		public String getDB_StagingI2B2_sqlclassname() {
			return this.DB_StagingI2B2_sqlclassname;
		}

		public String DB_StagingI2B2_Username;

		public String getDB_StagingI2B2_Username() {
			return this.DB_StagingI2B2_Username;
		}

		public String DB_TargetI2B2_Host;

		public String getDB_TargetI2B2_Host() {
			return this.DB_TargetI2B2_Host;
		}

		public String DB_TargetI2B2_Instance;

		public String getDB_TargetI2B2_Instance() {
			return this.DB_TargetI2B2_Instance;
		}

		public String DB_TargetI2B2_jdbcurl;

		public String getDB_TargetI2B2_jdbcurl() {
			return this.DB_TargetI2B2_jdbcurl;
		}

		public java.lang.String DB_TargetI2B2_Password;

		public java.lang.String getDB_TargetI2B2_Password() {
			return this.DB_TargetI2B2_Password;
		}

		public String DB_TargetI2B2_Port;

		public String getDB_TargetI2B2_Port() {
			return this.DB_TargetI2B2_Port;
		}

		public String DB_TargetI2B2_Schema;

		public String getDB_TargetI2B2_Schema() {
			return this.DB_TargetI2B2_Schema;
		}

		public String DB_TargetI2B2_sqlclassname;

		public String getDB_TargetI2B2_sqlclassname() {
			return this.DB_TargetI2B2_sqlclassname;
		}

		public String DB_TargetI2B2_Username;

		public String getDB_TargetI2B2_Username() {
			return this.DB_TargetI2B2_Username;
		}

		public String DataFile;

		public String getDataFile() {
			return this.DataFile;
		}

		public String ErrorMessage;

		public String getErrorMessage() {
			return this.ErrorMessage;
		}

		public Boolean IfValue;

		public Boolean getIfValue() {
			return this.IfValue;
		}

		public String JDBC_URL;

		public String getJDBC_URL() {
			return this.JDBC_URL;
		}

		public String JDBCDriver;

		public String getJDBCDriver() {
			return this.JDBCDriver;
		}

		public String Job;

		public String getJob() {
			return this.Job;
		}

		public String OracleDB;

		public String getOracleDB() {
			return this.OracleDB;
		}

		public String OracleHost;

		public String getOracleHost() {
			return this.OracleHost;
		}

		public String OraclePassword;

		public String getOraclePassword() {
			return this.OraclePassword;
		}

		public String OraclePort;

		public String getOraclePort() {
			return this.OraclePort;
		}

		public String OracleSchema;

		public String getOracleSchema() {
			return this.OracleSchema;
		}

		public String OracleUsername;

		public String getOracleUsername() {
			return this.OracleUsername;
		}

		public String SQLCommand;

		public String getSQLCommand() {
			return this.SQLCommand;
		}

		public String SQLCommand2;

		public String getSQLCommand2() {
			return this.SQLCommand2;
		}

		public String SQLTable;

		public String getSQLTable() {
			return this.SQLTable;
		}

		public String SQLTable2;

		public String getSQLTable2() {
			return this.SQLTable2;
		}

		public String StatusMessage;

		public String getStatusMessage() {
			return this.StatusMessage;
		}

		public String TableIEOTarget;

		public String getTableIEOTarget() {
			return this.TableIEOTarget;
		}

		public String TableIEOTargetOntology;

		public String getTableIEOTargetOntology() {
			return this.TableIEOTargetOntology;
		}

		public String TableIEOTargetProject;

		public String getTableIEOTargetProject() {
			return this.TableIEOTargetProject;
		}

		public Integer TargetID;

		public Integer getTargetID() {
			return this.TargetID;
		}

		public Object TOSHandler;

		public Object getTOSHandler() {
			return this.TOSHandler;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "TOSIDRTCommand_LoadTargetProjects";
	private final String projectName = "TOS";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					TOSIDRTCommand_LoadTargetProjects.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(TOSIDRTCommand_LoadTargetProjects.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tJDBCConnection_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCConnection_1", System.currentTimeMillis());

		status = "failure";

		tJDBCConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_1", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaFlex_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaFlex_1", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_2", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_2", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaFlex_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaFlex_3", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPrejob_1", System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLibraryLoad_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

		status = "failure";

		tLibraryLoad_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_1", System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCConnection_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLibraryLoad_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCConnection_1 begin ] start
				 */

				ok_Hash.put("tJDBCConnection_1", false);
				start_Hash.put("tJDBCConnection_1", System.currentTimeMillis());
				currentComponent = "tJDBCConnection_1";

				int tos_count_tJDBCConnection_1 = 0;

				String url_tJDBCConnection_1 = context.DB_StagingI2B2_jdbcurl;

				String userName_tJDBCConnection_1 = context.DB_StagingI2B2_Username;
				String password_tJDBCConnection_1 = context.DB_StagingI2B2_Password;

				java.sql.Connection conn_tJDBCConnection_1 = null;

				if ((null == globalMap.get(KEY_DB_DATASOURCES))
						|| "".equals("")) {

					java.lang.Class
							.forName(context.DB_StagingI2B2_sqlclassname);

					conn_tJDBCConnection_1 = java.sql.DriverManager
							.getConnection(url_tJDBCConnection_1,
									userName_tJDBCConnection_1,
									password_tJDBCConnection_1);
					globalMap.put("conn_tJDBCConnection_1",
							conn_tJDBCConnection_1);
				}
				if (null != conn_tJDBCConnection_1) {

					conn_tJDBCConnection_1.setAutoCommit(false);
				}

				globalMap.put("conn_tJDBCConnection_1", conn_tJDBCConnection_1);
				globalMap.put("url_tJDBCConnection_1", url_tJDBCConnection_1);
				// globalMap.put("user_tJDBCConnection_1",
				// userName_tJDBCConnection_1);
				// globalMap.put("pass_tJDBCConnection_1",
				// password_tJDBCConnection_1);

				/**
				 * [tJDBCConnection_1 begin ] stop
				 */
				/**
				 * [tJDBCConnection_1 main ] start
				 */

				currentComponent = "tJDBCConnection_1";

				tos_count_tJDBCConnection_1++;

				/**
				 * [tJDBCConnection_1 main ] stop
				 */
				/**
				 * [tJDBCConnection_1 end ] start
				 */

				currentComponent = "tJDBCConnection_1";

				ok_Hash.put("tJDBCConnection_1", true);
				end_Hash.put("tJDBCConnection_1", System.currentTimeMillis());

				/**
				 * [tJDBCConnection_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJDBCConnection_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tJDBCInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class targetInputStruct implements
			routines.system.IPersistableRow<targetInputStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_LoadTargetProjects = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_LoadTargetProjects = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer TARGET_ID;

		public Integer getTARGET_ID() {
			return this.TARGET_ID;
		}

		public Integer TARGETPROJECT_ID;

		public Integer getTARGETPROJECT_ID() {
			return this.TARGETPROJECT_ID;
		}

		public Integer VERSION;

		public Integer getVERSION() {
			return this.VERSION;
		}

		public java.util.Date CREATED;

		public java.util.Date getCREATED() {
			return this.CREATED;
		}

		public java.util.Date LAST_MODIFIED;

		public java.util.Date getLAST_MODIFIED() {
			return this.LAST_MODIFIED;
		}

		public String USER_ID;

		public String getUSER_ID() {
			return this.USER_ID;
		}

		public String TARGET_DB_SCHEMA;

		public String getTARGET_DB_SCHEMA() {
			return this.TARGET_DB_SCHEMA;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.TARGET_ID == null) ? 0 : this.TARGET_ID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final targetInputStruct other = (targetInputStruct) obj;

			if (this.TARGET_ID == null) {
				if (other.TARGET_ID != null)
					return false;
			} else if (!this.TARGET_ID.equals(other.TARGET_ID))
				return false;

			return true;
		}

		public void copyDataTo(targetInputStruct other) {

			other.TARGET_ID = this.TARGET_ID;
			other.TARGETPROJECT_ID = this.TARGETPROJECT_ID;
			other.VERSION = this.VERSION;
			other.CREATED = this.CREATED;
			other.LAST_MODIFIED = this.LAST_MODIFIED;
			other.USER_ID = this.USER_ID;
			other.TARGET_DB_SCHEMA = this.TARGET_DB_SCHEMA;

		}

		public void copyKeysDataTo(targetInputStruct other) {

			other.TARGET_ID = this.TARGET_ID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_LoadTargetProjects.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_LoadTargetProjects.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_LoadTargetProjects = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_LoadTargetProjects = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_LoadTargetProjects,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_LoadTargetProjects,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_LoadTargetProjects) {

				try {

					int length = 0;

					this.TARGET_ID = readInteger(dis);

					this.TARGETPROJECT_ID = readInteger(dis);

					this.VERSION = readInteger(dis);

					this.CREATED = readDate(dis);

					this.LAST_MODIFIED = readDate(dis);

					this.USER_ID = readString(dis);

					this.TARGET_DB_SCHEMA = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.TARGET_ID, dos);

				// Integer

				writeInteger(this.TARGETPROJECT_ID, dos);

				// Integer

				writeInteger(this.VERSION, dos);

				// java.util.Date

				writeDate(this.CREATED, dos);

				// java.util.Date

				writeDate(this.LAST_MODIFIED, dos);

				// String

				writeString(this.USER_ID, dos);

				// String

				writeString(this.TARGET_DB_SCHEMA, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TARGET_ID=" + String.valueOf(TARGET_ID));
			sb.append(",TARGETPROJECT_ID=" + String.valueOf(TARGETPROJECT_ID));
			sb.append(",VERSION=" + String.valueOf(VERSION));
			sb.append(",CREATED=" + String.valueOf(CREATED));
			sb.append(",LAST_MODIFIED=" + String.valueOf(LAST_MODIFIED));
			sb.append(",USER_ID=" + USER_ID);
			sb.append(",TARGET_DB_SCHEMA=" + TARGET_DB_SCHEMA);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(targetInputStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.TARGET_ID, other.TARGET_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class targetProjectsInputStruct implements
			routines.system.IPersistableRow<targetProjectsInputStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTCommand_LoadTargetProjects = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTCommand_LoadTargetProjects = new byte[0];

		public Integer TargetProjectID;

		public Integer getTargetProjectID() {
			return this.TargetProjectID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Description;

		public String getDescription() {
			return this.Description;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTCommand_LoadTargetProjects.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTCommand_LoadTargetProjects.length == 0) {
						commonByteArray_TOS_TOSIDRTCommand_LoadTargetProjects = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTCommand_LoadTargetProjects = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TOS_TOSIDRTCommand_LoadTargetProjects,
						0, length);
				strReturn = new String(
						commonByteArray_TOS_TOSIDRTCommand_LoadTargetProjects,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTCommand_LoadTargetProjects) {

				try {

					int length = 0;

					this.TargetProjectID = readInteger(dis);

					this.Name = readString(dis);

					this.Description = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.TargetProjectID, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Description, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TargetProjectID=" + String.valueOf(TargetProjectID));
			sb.append(",Name=" + Name);
			sb.append(",Description=" + Description);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(targetProjectsInputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				targetProjectsInputStruct targetProjectsInput = new targetProjectsInputStruct();
				targetInputStruct targetInput = new targetInputStruct();

				/**
				 * [tJavaFlex_1 begin ] start
				 */

				int NB_ITERATE_tJava_2 = 0; // for statistics

				ok_Hash.put("tJavaFlex_1", false);
				start_Hash.put("tJavaFlex_1", System.currentTimeMillis());
				currentComponent = "tJavaFlex_1";

				int tos_count_tJavaFlex_1 = 0;

				TOSHandler.status("Doing loop \"loading target projects\"...");

				/**
				 * [tJavaFlex_1 begin ] stop
				 */

				/**
				 * [tJDBCInput_1 begin ] start
				 */

				ok_Hash.put("tJDBCInput_1", false);
				start_Hash.put("tJDBCInput_1", System.currentTimeMillis());
				currentComponent = "tJDBCInput_1";

				int tos_count_tJDBCInput_1 = 0;

				int nb_line_tJDBCInput_1 = 0;
				java.sql.Connection conn_tJDBCInput_1 = null;
				conn_tJDBCInput_1 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");
				if (null == conn_tJDBCInput_1) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCInput_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tJDBCInput_1 = dataSources_tJDBCInput_1.get("")
							.getConnection();
					// globalMap.put("conn_tJDBCConnection_1",
					// conn_tJDBCInput_1);
				}

				java.sql.Statement stmt_tJDBCInput_1 = conn_tJDBCInput_1
						.createStatement();

				String dbquery_tJDBCInput_1 = "select * from "
						+ context.DB_StagingI2B2_Schema + "."
						+ context.TableIEOTargetProject;

				globalMap.put("tJDBCInput_1_QUERY", dbquery_tJDBCInput_1);

				java.sql.ResultSet rs_tJDBCInput_1 = stmt_tJDBCInput_1
						.executeQuery(dbquery_tJDBCInput_1);
				java.sql.ResultSetMetaData rsmd_tJDBCInput_1 = rs_tJDBCInput_1
						.getMetaData();
				int colQtyInRs_tJDBCInput_1 = rsmd_tJDBCInput_1
						.getColumnCount();

				String tmpContent_tJDBCInput_1 = null;
				int column_index_tJDBCInput_1 = 1;
				while (rs_tJDBCInput_1.next()) {
					nb_line_tJDBCInput_1++;

					column_index_tJDBCInput_1 = 1;

					if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
						targetProjectsInput.TargetProjectID = null;
					} else {

						if (rs_tJDBCInput_1
								.getObject(column_index_tJDBCInput_1) != null) {
							targetProjectsInput.TargetProjectID = rs_tJDBCInput_1
									.getInt(column_index_tJDBCInput_1);
						} else {
							targetProjectsInput.TargetProjectID = null;
						}

						if (rs_tJDBCInput_1.wasNull()) {
							targetProjectsInput.TargetProjectID = null;
						}
					}
					column_index_tJDBCInput_1 = 2;

					if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
						targetProjectsInput.Name = null;
					} else {

						tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
								.getString(column_index_tJDBCInput_1);
						if (tmpContent_tJDBCInput_1 != null) {
							targetProjectsInput.Name = tmpContent_tJDBCInput_1;
						} else {
							targetProjectsInput.Name = null;
						}

						if (rs_tJDBCInput_1.wasNull()) {
							targetProjectsInput.Name = null;
						}
					}
					column_index_tJDBCInput_1 = 3;

					if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
						targetProjectsInput.Description = null;
					} else {

						tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
								.getString(column_index_tJDBCInput_1);
						if (tmpContent_tJDBCInput_1 != null) {
							targetProjectsInput.Description = tmpContent_tJDBCInput_1;
						} else {
							targetProjectsInput.Description = null;
						}

						if (rs_tJDBCInput_1.wasNull()) {
							targetProjectsInput.Description = null;
						}
					}

					/**
					 * [tJDBCInput_1 begin ] stop
					 */
					/**
					 * [tJDBCInput_1 main ] start
					 */

					currentComponent = "tJDBCInput_1";

					tos_count_tJDBCInput_1++;

					/**
					 * [tJDBCInput_1 main ] stop
					 */

					/**
					 * [tJavaFlex_1 main ] start
					 */

					currentComponent = "tJavaFlex_1";

					System.out.println("---------------");
					System.out.println("TargetProjectID: "
							+ targetProjectsInput.TargetProjectID);
					System.out.println("Name: " + targetProjectsInput.Name);
					System.out.println("Description: "
							+ targetProjectsInput.Description);

					context.currentTargetProjectID = targetProjectsInput.TargetProjectID;
					TOSHandler.addTargetProjectToTargetProjects(
							targetProjectsInput.TargetProjectID,
							targetProjectsInput.Name,
							targetProjectsInput.Description);

					tos_count_tJavaFlex_1++;

					/**
					 * [tJavaFlex_1 main ] stop
					 */
					NB_ITERATE_tJava_2++;
					iterateLoop++;

					/**
					 * [tJava_2 begin ] start
					 */

					int NB_ITERATE_tJDBCInput_2 = 0; // for statistics

					ok_Hash.put("tJava_2", false);
					start_Hash.put("tJava_2", System.currentTimeMillis());
					currentComponent = "tJava_2";

					int tos_count_tJava_2 = 0;

					/**
					 * [tJava_2 begin ] stop
					 */
					/**
					 * [tJava_2 main ] start
					 */

					currentComponent = "tJava_2";

					tos_count_tJava_2++;

					/**
					 * [tJava_2 main ] stop
					 */
					NB_ITERATE_tJDBCInput_2++;
					iterateLoop++;

					/**
					 * [tJavaFlex_3 begin ] start
					 */

					ok_Hash.put("tJavaFlex_3", false);
					start_Hash.put("tJavaFlex_3", System.currentTimeMillis());
					currentComponent = "tJavaFlex_3";

					int tos_count_tJavaFlex_3 = 0;

					TOSHandler
							.status("Doing loop \"loading target versions\"...");

					/**
					 * [tJavaFlex_3 begin ] stop
					 */

					/**
					 * [tJDBCInput_2 begin ] start
					 */

					ok_Hash.put("tJDBCInput_2", false);
					start_Hash.put("tJDBCInput_2", System.currentTimeMillis());
					currentComponent = "tJDBCInput_2";

					int tos_count_tJDBCInput_2 = 0;

					int nb_line_tJDBCInput_2 = 0;
					java.sql.Connection conn_tJDBCInput_2 = null;
					conn_tJDBCInput_2 = (java.sql.Connection) globalMap
							.get("conn_tJDBCConnection_1");
					if (null == conn_tJDBCInput_2) {
						java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCInput_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
								.get(KEY_DB_DATASOURCES);
						conn_tJDBCInput_2 = dataSources_tJDBCInput_2.get("")
								.getConnection();
						// globalMap.put("conn_tJDBCConnection_1",
						// conn_tJDBCInput_2);
					}

					java.sql.Statement stmt_tJDBCInput_2 = conn_tJDBCInput_2
							.createStatement();

					String dbquery_tJDBCInput_2 = "select * from "
							+ context.DB_StagingI2B2_Schema + "."
							+ context.TableIEOTarget
							+ " WHERE TARGETPROJECT_ID = "
							+ context.currentTargetProjectID
							+ " ORDER BY  VERSION ASC";

					globalMap.put("tJDBCInput_2_QUERY", dbquery_tJDBCInput_2);

					java.sql.ResultSet rs_tJDBCInput_2 = stmt_tJDBCInput_2
							.executeQuery(dbquery_tJDBCInput_2);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_2 = rs_tJDBCInput_2
							.getMetaData();
					int colQtyInRs_tJDBCInput_2 = rsmd_tJDBCInput_2
							.getColumnCount();

					String tmpContent_tJDBCInput_2 = null;
					int column_index_tJDBCInput_2 = 1;
					while (rs_tJDBCInput_2.next()) {
						nb_line_tJDBCInput_2++;

						column_index_tJDBCInput_2 = 1;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							targetInput.TARGET_ID = null;
						} else {

							if (rs_tJDBCInput_2
									.getObject(column_index_tJDBCInput_2) != null) {
								targetInput.TARGET_ID = rs_tJDBCInput_2
										.getInt(column_index_tJDBCInput_2);
							} else {
								targetInput.TARGET_ID = null;
							}

							if (rs_tJDBCInput_2.wasNull()) {
								targetInput.TARGET_ID = null;
							}
						}
						column_index_tJDBCInput_2 = 2;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							targetInput.TARGETPROJECT_ID = null;
						} else {

							if (rs_tJDBCInput_2
									.getObject(column_index_tJDBCInput_2) != null) {
								targetInput.TARGETPROJECT_ID = rs_tJDBCInput_2
										.getInt(column_index_tJDBCInput_2);
							} else {
								targetInput.TARGETPROJECT_ID = null;
							}

							if (rs_tJDBCInput_2.wasNull()) {
								targetInput.TARGETPROJECT_ID = null;
							}
						}
						column_index_tJDBCInput_2 = 3;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							targetInput.VERSION = null;
						} else {

							if (rs_tJDBCInput_2
									.getObject(column_index_tJDBCInput_2) != null) {
								targetInput.VERSION = rs_tJDBCInput_2
										.getInt(column_index_tJDBCInput_2);
							} else {
								targetInput.VERSION = null;
							}

							if (rs_tJDBCInput_2.wasNull()) {
								targetInput.VERSION = null;
							}
						}
						column_index_tJDBCInput_2 = 4;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							targetInput.CREATED = null;
						} else {

							java.util.Date date_tJDBCInput_2 = null;
							try {
								date_tJDBCInput_2 = rs_tJDBCInput_2
										.getTimestamp(column_index_tJDBCInput_2);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_2 = rs_tJDBCInput_2
										.getDate(column_index_tJDBCInput_2);
							}
							targetInput.CREATED = date_tJDBCInput_2;

							if (rs_tJDBCInput_2.wasNull()) {
								targetInput.CREATED = null;
							}
						}
						column_index_tJDBCInput_2 = 5;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							targetInput.LAST_MODIFIED = null;
						} else {

							java.util.Date date_tJDBCInput_2 = null;
							try {
								date_tJDBCInput_2 = rs_tJDBCInput_2
										.getTimestamp(column_index_tJDBCInput_2);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_2 = rs_tJDBCInput_2
										.getDate(column_index_tJDBCInput_2);
							}
							targetInput.LAST_MODIFIED = date_tJDBCInput_2;

							if (rs_tJDBCInput_2.wasNull()) {
								targetInput.LAST_MODIFIED = null;
							}
						}
						column_index_tJDBCInput_2 = 6;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							targetInput.USER_ID = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								targetInput.USER_ID = tmpContent_tJDBCInput_2;
							} else {
								targetInput.USER_ID = null;
							}

							if (rs_tJDBCInput_2.wasNull()) {
								targetInput.USER_ID = null;
							}
						}
						column_index_tJDBCInput_2 = 7;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							targetInput.TARGET_DB_SCHEMA = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								targetInput.TARGET_DB_SCHEMA = tmpContent_tJDBCInput_2;
							} else {
								targetInput.TARGET_DB_SCHEMA = null;
							}

							if (rs_tJDBCInput_2.wasNull()) {
								targetInput.TARGET_DB_SCHEMA = null;
							}
						}

						/**
						 * [tJDBCInput_2 begin ] stop
						 */
						/**
						 * [tJDBCInput_2 main ] start
						 */

						currentComponent = "tJDBCInput_2";

						tos_count_tJDBCInput_2++;

						/**
						 * [tJDBCInput_2 main ] stop
						 */

						/**
						 * [tJavaFlex_3 main ] start
						 */

						currentComponent = "tJavaFlex_3";

						System.out.println("  >---------------");
						System.out.println("   TARGET_ID: "
								+ targetInput.TARGET_ID);
						System.out.println("   TARGETPROJECT_ID: "
								+ targetInput.TARGETPROJECT_ID);
						System.out
								.println("   VERSION: " + targetInput.VERSION);
						System.out.println("   LAST_MODIFIED:"
								+ targetInput.LAST_MODIFIED);
						System.out.println("   LAST_MODIFIED:"
								+ targetInput.LAST_MODIFIED);

						TOSHandler.addTargetVersionToTargeProject(
								targetInput.TARGET_ID,
								targetInput.TARGETPROJECT_ID,
								targetInput.VERSION, targetInput.CREATED,
								targetInput.LAST_MODIFIED,
								targetInput.TARGET_DB_SCHEMA);

						tos_count_tJavaFlex_3++;

						/**
						 * [tJavaFlex_3 main ] stop
						 */

						/**
						 * [tJDBCInput_2 end ] start
						 */

						currentComponent = "tJDBCInput_2";

					}
					rs_tJDBCInput_2.close();
					stmt_tJDBCInput_2.close();

					globalMap.put("tJDBCInput_2_NB_LINE", nb_line_tJDBCInput_2);

					ok_Hash.put("tJDBCInput_2", true);
					end_Hash.put("tJDBCInput_2", System.currentTimeMillis());

					/**
					 * [tJDBCInput_2 end ] stop
					 */

					/**
					 * [tJavaFlex_3 end ] start
					 */

					currentComponent = "tJavaFlex_3";

					TOSHandler
							.status("/END: Doing loop \"loading target versions\"...");

					ok_Hash.put("tJavaFlex_3", true);
					end_Hash.put("tJavaFlex_3", System.currentTimeMillis());

					/**
					 * [tJavaFlex_3 end ] stop
					 */

					/**
					 * [tJava_2 end ] start
					 */

					currentComponent = "tJava_2";

					ok_Hash.put("tJava_2", true);
					end_Hash.put("tJava_2", System.currentTimeMillis());

					/**
					 * [tJava_2 end ] stop
					 */

					/**
					 * [tJDBCInput_1 end ] start
					 */

					currentComponent = "tJDBCInput_1";

				}
				rs_tJDBCInput_1.close();
				stmt_tJDBCInput_1.close();

				globalMap.put("tJDBCInput_1_NB_LINE", nb_line_tJDBCInput_1);

				ok_Hash.put("tJDBCInput_1", true);
				end_Hash.put("tJDBCInput_1", System.currentTimeMillis());

				/**
				 * [tJDBCInput_1 end ] stop
				 */

				/**
				 * [tJavaFlex_1 end ] start
				 */

				currentComponent = "tJavaFlex_1";

				TOSHandler
						.status("/End: Doing loop \"loading target projects\"...");

				ok_Hash.put("tJavaFlex_1", true);
				end_Hash.put("tJavaFlex_1", System.currentTimeMillis());

				/**
				 * [tJavaFlex_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCInput_1_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());
				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */
				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */
				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				tLibraryLoad_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tLibraryLoad_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLibraryLoad_1 begin ] start
				 */

				ok_Hash.put("tLibraryLoad_1", false);
				start_Hash.put("tLibraryLoad_1", System.currentTimeMillis());
				currentComponent = "tLibraryLoad_1";

				int tos_count_tLibraryLoad_1 = 0;

				/**
				 * [tLibraryLoad_1 begin ] stop
				 */
				/**
				 * [tLibraryLoad_1 main ] start
				 */

				currentComponent = "tLibraryLoad_1";

				tos_count_tLibraryLoad_1++;

				/**
				 * [tLibraryLoad_1 main ] stop
				 */
				/**
				 * [tLibraryLoad_1 end ] start
				 */

				currentComponent = "tLibraryLoad_1";

				ok_Hash.put("tLibraryLoad_1", true);
				end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				/**
				 * [tLibraryLoad_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tLibraryLoad_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());
				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				TOSHandler.status("Doing TOS-Job \"LoadTargetProjects\"...");

				/**
				 * [tJava_1 begin ] stop
				 */
				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */
				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final TOSIDRTCommand_LoadTargetProjects TOSIDRTCommand_LoadTargetProjectsClass = new TOSIDRTCommand_LoadTargetProjects();

		int exitCode = TOSIDRTCommand_LoadTargetProjectsClass.runJobInTOS(args);
		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = TOSIDRTCommand_LoadTargetProjects.class
					.getClassLoader().getResourceAsStream(
							"tos/tosidrtcommand_loadtargetprojects_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			try {
				context.currentTargetProjectID = routines.system.ParserUtils
						.parseTo_Integer(context
								.getProperty("currentTargetProjectID"));
			} catch (NumberFormatException e) {
				context.currentTargetProjectID = null;
			}
			context.DB_StagingI2B2_Host = (String) context
					.getProperty("DB_StagingI2B2_Host");
			context.DB_StagingI2B2_Instance = (String) context
					.getProperty("DB_StagingI2B2_Instance");
			context.DB_StagingI2B2_jdbcurl = (String) context
					.getProperty("DB_StagingI2B2_jdbcurl");
			context.DB_StagingI2B2_Password = (java.lang.String) context
					.getProperty("DB_StagingI2B2_Password");
			context.DB_StagingI2B2_Port = (String) context
					.getProperty("DB_StagingI2B2_Port");
			context.DB_StagingI2B2_Schema = (String) context
					.getProperty("DB_StagingI2B2_Schema");
			context.DB_StagingI2B2_sqlclassname = (String) context
					.getProperty("DB_StagingI2B2_sqlclassname");
			context.DB_StagingI2B2_Username = (String) context
					.getProperty("DB_StagingI2B2_Username");
			context.DB_TargetI2B2_Host = (String) context
					.getProperty("DB_TargetI2B2_Host");
			context.DB_TargetI2B2_Instance = (String) context
					.getProperty("DB_TargetI2B2_Instance");
			context.DB_TargetI2B2_jdbcurl = (String) context
					.getProperty("DB_TargetI2B2_jdbcurl");
			context.DB_TargetI2B2_Password = (java.lang.String) context
					.getProperty("DB_TargetI2B2_Password");
			context.DB_TargetI2B2_Port = (String) context
					.getProperty("DB_TargetI2B2_Port");
			context.DB_TargetI2B2_Schema = (String) context
					.getProperty("DB_TargetI2B2_Schema");
			context.DB_TargetI2B2_sqlclassname = (String) context
					.getProperty("DB_TargetI2B2_sqlclassname");
			context.DB_TargetI2B2_Username = (String) context
					.getProperty("DB_TargetI2B2_Username");
			context.DataFile = (String) context.getProperty("DataFile");
			context.ErrorMessage = (String) context.getProperty("ErrorMessage");
			try {
				context.IfValue = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("IfValue"));
			} catch (NumberFormatException e) {
				context.IfValue = null;
			}
			context.JDBC_URL = (String) context.getProperty("JDBC_URL");
			context.JDBCDriver = (String) context.getProperty("JDBCDriver");
			context.Job = (String) context.getProperty("Job");
			context.OracleDB = (String) context.getProperty("OracleDB");
			context.OracleHost = (String) context.getProperty("OracleHost");
			context.OraclePassword = (String) context
					.getProperty("OraclePassword");
			context.OraclePort = (String) context.getProperty("OraclePort");
			context.OracleSchema = (String) context.getProperty("OracleSchema");
			context.OracleUsername = (String) context
					.getProperty("OracleUsername");
			context.SQLCommand = (String) context.getProperty("SQLCommand");
			context.SQLCommand2 = (String) context.getProperty("SQLCommand2");
			context.SQLTable = (String) context.getProperty("SQLTable");
			context.SQLTable2 = (String) context.getProperty("SQLTable2");
			context.StatusMessage = (String) context
					.getProperty("StatusMessage");
			context.TableIEOTarget = (String) context
					.getProperty("TableIEOTarget");
			context.TableIEOTargetOntology = (String) context
					.getProperty("TableIEOTargetOntology");
			context.TableIEOTargetProject = (String) context
					.getProperty("TableIEOTargetProject");
			try {
				context.TargetID = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("TargetID"));
			} catch (NumberFormatException e) {
				context.TargetID = null;
			}
			context.TOSHandler = (Object) context.getProperty("TOSHandler");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("currentTargetProjectID")) {
				context.currentTargetProjectID = (Integer) parentContextMap
						.get("currentTargetProjectID");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Host")) {
				context.DB_StagingI2B2_Host = (String) parentContextMap
						.get("DB_StagingI2B2_Host");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Instance")) {
				context.DB_StagingI2B2_Instance = (String) parentContextMap
						.get("DB_StagingI2B2_Instance");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_jdbcurl")) {
				context.DB_StagingI2B2_jdbcurl = (String) parentContextMap
						.get("DB_StagingI2B2_jdbcurl");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Password")) {
				context.DB_StagingI2B2_Password = (java.lang.String) parentContextMap
						.get("DB_StagingI2B2_Password");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Port")) {
				context.DB_StagingI2B2_Port = (String) parentContextMap
						.get("DB_StagingI2B2_Port");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Schema")) {
				context.DB_StagingI2B2_Schema = (String) parentContextMap
						.get("DB_StagingI2B2_Schema");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_sqlclassname")) {
				context.DB_StagingI2B2_sqlclassname = (String) parentContextMap
						.get("DB_StagingI2B2_sqlclassname");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Username")) {
				context.DB_StagingI2B2_Username = (String) parentContextMap
						.get("DB_StagingI2B2_Username");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Host")) {
				context.DB_TargetI2B2_Host = (String) parentContextMap
						.get("DB_TargetI2B2_Host");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Instance")) {
				context.DB_TargetI2B2_Instance = (String) parentContextMap
						.get("DB_TargetI2B2_Instance");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_jdbcurl")) {
				context.DB_TargetI2B2_jdbcurl = (String) parentContextMap
						.get("DB_TargetI2B2_jdbcurl");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Password")) {
				context.DB_TargetI2B2_Password = (java.lang.String) parentContextMap
						.get("DB_TargetI2B2_Password");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Port")) {
				context.DB_TargetI2B2_Port = (String) parentContextMap
						.get("DB_TargetI2B2_Port");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Schema")) {
				context.DB_TargetI2B2_Schema = (String) parentContextMap
						.get("DB_TargetI2B2_Schema");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_sqlclassname")) {
				context.DB_TargetI2B2_sqlclassname = (String) parentContextMap
						.get("DB_TargetI2B2_sqlclassname");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Username")) {
				context.DB_TargetI2B2_Username = (String) parentContextMap
						.get("DB_TargetI2B2_Username");
			}
			if (parentContextMap.containsKey("DataFile")) {
				context.DataFile = (String) parentContextMap.get("DataFile");
			}
			if (parentContextMap.containsKey("ErrorMessage")) {
				context.ErrorMessage = (String) parentContextMap
						.get("ErrorMessage");
			}
			if (parentContextMap.containsKey("IfValue")) {
				context.IfValue = (Boolean) parentContextMap.get("IfValue");
			}
			if (parentContextMap.containsKey("JDBC_URL")) {
				context.JDBC_URL = (String) parentContextMap.get("JDBC_URL");
			}
			if (parentContextMap.containsKey("JDBCDriver")) {
				context.JDBCDriver = (String) parentContextMap
						.get("JDBCDriver");
			}
			if (parentContextMap.containsKey("Job")) {
				context.Job = (String) parentContextMap.get("Job");
			}
			if (parentContextMap.containsKey("OracleDB")) {
				context.OracleDB = (String) parentContextMap.get("OracleDB");
			}
			if (parentContextMap.containsKey("OracleHost")) {
				context.OracleHost = (String) parentContextMap
						.get("OracleHost");
			}
			if (parentContextMap.containsKey("OraclePassword")) {
				context.OraclePassword = (String) parentContextMap
						.get("OraclePassword");
			}
			if (parentContextMap.containsKey("OraclePort")) {
				context.OraclePort = (String) parentContextMap
						.get("OraclePort");
			}
			if (parentContextMap.containsKey("OracleSchema")) {
				context.OracleSchema = (String) parentContextMap
						.get("OracleSchema");
			}
			if (parentContextMap.containsKey("OracleUsername")) {
				context.OracleUsername = (String) parentContextMap
						.get("OracleUsername");
			}
			if (parentContextMap.containsKey("SQLCommand")) {
				context.SQLCommand = (String) parentContextMap
						.get("SQLCommand");
			}
			if (parentContextMap.containsKey("SQLCommand2")) {
				context.SQLCommand2 = (String) parentContextMap
						.get("SQLCommand2");
			}
			if (parentContextMap.containsKey("SQLTable")) {
				context.SQLTable = (String) parentContextMap.get("SQLTable");
			}
			if (parentContextMap.containsKey("SQLTable2")) {
				context.SQLTable2 = (String) parentContextMap.get("SQLTable2");
			}
			if (parentContextMap.containsKey("StatusMessage")) {
				context.StatusMessage = (String) parentContextMap
						.get("StatusMessage");
			}
			if (parentContextMap.containsKey("TableIEOTarget")) {
				context.TableIEOTarget = (String) parentContextMap
						.get("TableIEOTarget");
			}
			if (parentContextMap.containsKey("TableIEOTargetOntology")) {
				context.TableIEOTargetOntology = (String) parentContextMap
						.get("TableIEOTargetOntology");
			}
			if (parentContextMap.containsKey("TableIEOTargetProject")) {
				context.TableIEOTargetProject = (String) parentContextMap
						.get("TableIEOTargetProject");
			}
			if (parentContextMap.containsKey("TargetID")) {
				context.TargetID = (Integer) parentContextMap.get("TargetID");
			}
			if (parentContextMap.containsKey("TOSHandler")) {
				context.TOSHandler = (Object) parentContextMap
						.get("TOSHandler");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {

			e_tPrejob_1.printStackTrace();
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tJDBCConnection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJDBCConnection_1) {

			e_tJDBCConnection_1.printStackTrace();
			globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : TOSIDRTCommand_LoadTargetProjects");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 77715 characters generated by Talend Open Studio for Data Integration on the
 * 7. November 2013 19:05:10 MEZ
 ************************************************************************************************/
