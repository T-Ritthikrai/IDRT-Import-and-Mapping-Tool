// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package tos.idrt_jdbc_upload_1_0;

import routines.IIT;
import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_2
//import java.util.List;

//the import part of tJava_10
//import java.util.List;

//the import part of tJavaRow_2
//import java.util.List;

//the import part of tJava_1
//import java.util.List;

//the import part of tJava_5
//import java.util.List;

//the import part of tJava_12
//import java.util.List;

//the import part of tJava_7
//import java.util.List;

//the import part of tJava_8
//import java.util.List;

//the import part of tJava_9
//import java.util.List;

//the import part of tJava_14
//import java.util.List;

//the import part of tJava_15
//import java.util.List;

//the import part of tJava_11
//import java.util.List;

//the import part of tJava_3

//the import part of tLibraryLoad_1
import de.goettingen.i2b2.importtool.idrt.StatusListener.StatusListener;

@SuppressWarnings("unused")
/**
 * Job: IDRT_JDBC_Upload Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.3.1.r104014
 * @status 
 */
public class IDRT_JDBC_Upload implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (coding != null) {

				this.setProperty("coding", coding.toString());

			}

			if (DBInstance != null) {

				this.setProperty("DBInstance", DBInstance.toString());

			}

			if (DBHost != null) {

				this.setProperty("DBHost", DBHost.toString());

			}

			if (patientDataFolder != null) {

				this.setProperty("patientDataFolder",
						patientDataFolder.toString());

			}

			if (DBPort != null) {

				this.setProperty("DBPort", DBPort.toString());

			}

			if (DBPassword != null) {

				this.setProperty("DBPassword", DBPassword.toString());

			}

			if (DBSchema != null) {

				this.setProperty("DBSchema", DBSchema.toString());

			}

			if (truncateProject != null) {

				this.setProperty("truncateProject", truncateProject.toString());

			}

			if (DBUsername != null) {

				this.setProperty("DBUsername", DBUsername.toString());

			}

			if (concept_cd != null) {

				this.setProperty("concept_cd", concept_cd.toString());

			}

			if (concept_path != null) {

				this.setProperty("concept_path", concept_path.toString());

			}

			if (currentFile != null) {

				this.setProperty("currentFile", currentFile.toString());

			}

			if (folderMain != null) {

				this.setProperty("folderMain", folderMain.toString());

			}

			if (folderOutput != null) {

				this.setProperty("folderOutput", folderOutput.toString());

			}

			if (folderTmp != null) {

				this.setProperty("folderTmp", folderTmp.toString());

			}

			if (i2b2HeadNode != null) {

				this.setProperty("i2b2HeadNode", i2b2HeadNode.toString());

			}

			if (i2b2HeadNodeName != null) {

				this.setProperty("i2b2HeadNodeName",
						i2b2HeadNodeName.toString());

			}

			if (includePids != null) {

				this.setProperty("includePids", includePids.toString());

			}

			if (ItemDataAny != null) {

				this.setProperty("ItemDataAny", ItemDataAny.toString());

			}

			if (ItemDataBase64Binary != null) {

				this.setProperty("ItemDataBase64Binary",
						ItemDataBase64Binary.toString());

			}

			if (ItemDataBase64Float != null) {

				this.setProperty("ItemDataBase64Float",
						ItemDataBase64Float.toString());

			}

			if (ItemDataBoolean != null) {

				this.setProperty("ItemDataBoolean", ItemDataBoolean.toString());

			}

			if (ItemDataDate != null) {

				this.setProperty("ItemDataDate", ItemDataDate.toString());

			}

			if (ItemDataDatetime != null) {

				this.setProperty("ItemDataDatetime",
						ItemDataDatetime.toString());

			}

			if (ItemDataDouble != null) {

				this.setProperty("ItemDataDouble", ItemDataDouble.toString());

			}

			if (ItemDataDurationDatetime != null) {

				this.setProperty("ItemDataDurationDatetime",
						ItemDataDurationDatetime.toString());

			}

			if (ItemDataFloat != null) {

				this.setProperty("ItemDataFloat", ItemDataFloat.toString());

			}

			if (ItemDataHexBinary != null) {

				this.setProperty("ItemDataHexBinary",
						ItemDataHexBinary.toString());

			}

			if (ItemDataHexFloat != null) {

				this.setProperty("ItemDataHexFloat",
						ItemDataHexFloat.toString());

			}

			if (ItemDataIncompleteDatetime != null) {

				this.setProperty("ItemDataIncompleteDatetime",
						ItemDataIncompleteDatetime.toString());

			}

			if (ItemDataInteger != null) {

				this.setProperty("ItemDataInteger", ItemDataInteger.toString());

			}

			if (ItemDataIntervalDatetime != null) {

				this.setProperty("ItemDataIntervalDatetime",
						ItemDataIntervalDatetime.toString());

			}

			if (ItemDataPartialDate != null) {

				this.setProperty("ItemDataPartialDate",
						ItemDataPartialDate.toString());

			}

			if (ItemDataPartialDatetime != null) {

				this.setProperty("ItemDataPartialDatetime",
						ItemDataPartialDatetime.toString());

			}

			if (ItemDataPartialTime != null) {

				this.setProperty("ItemDataPartialTime",
						ItemDataPartialTime.toString());

			}

			if (ItemDataString != null) {

				this.setProperty("ItemDataString", ItemDataString.toString());

			}

			if (ItemDataTime != null) {

				this.setProperty("ItemDataTime", ItemDataTime.toString());

			}

			if (ItemDataURI != null) {

				this.setProperty("ItemDataURI", ItemDataURI.toString());

			}

			if (MDPD != null) {

				this.setProperty("MDPD", MDPD.toString());

			}

			if (MDPDName != null) {

				this.setProperty("MDPDName", MDPDName.toString());

			}

			if (counter != null) {

				this.setProperty("counter", counter.toString());

			}

		}

		public String coding;

		public String getCoding() {
			return this.coding;
		}

		public String DBInstance;

		public String getDBInstance() {
			return this.DBInstance;
		}

		public String DBHost;

		public String getDBHost() {
			return this.DBHost;
		}

		public String patientDataFolder;

		public String getPatientDataFolder() {
			return this.patientDataFolder;
		}

		public String DBPort;

		public String getDBPort() {
			return this.DBPort;
		}

		public java.lang.String DBPassword;

		public java.lang.String getDBPassword() {
			return this.DBPassword;
		}

		public String DBSchema;

		public String getDBSchema() {
			return this.DBSchema;
		}

		public Boolean truncateProject;

		public Boolean getTruncateProject() {
			return this.truncateProject;
		}

		public String DBUsername;

		public String getDBUsername() {
			return this.DBUsername;
		}

		public String concept_cd;

		public String getConcept_cd() {
			return this.concept_cd;
		}

		public String concept_path;

		public String getConcept_path() {
			return this.concept_path;
		}

		public String currentFile;

		public String getCurrentFile() {
			return this.currentFile;
		}

		public String folderMain;

		public String getFolderMain() {
			return this.folderMain;
		}

		public String folderOutput;

		public String getFolderOutput() {
			return this.folderOutput;
		}

		public String folderTmp;

		public String getFolderTmp() {
			return this.folderTmp;
		}

		public String i2b2HeadNode;

		public String getI2b2HeadNode() {
			return this.i2b2HeadNode;
		}

		public String i2b2HeadNodeName;

		public String getI2b2HeadNodeName() {
			return this.i2b2HeadNodeName;
		}

		public Boolean includePids;

		public Boolean getIncludePids() {
			return this.includePids;
		}

		public String ItemDataAny;

		public String getItemDataAny() {
			return this.ItemDataAny;
		}

		public String ItemDataBase64Binary;

		public String getItemDataBase64Binary() {
			return this.ItemDataBase64Binary;
		}

		public String ItemDataBase64Float;

		public String getItemDataBase64Float() {
			return this.ItemDataBase64Float;
		}

		public String ItemDataBoolean;

		public String getItemDataBoolean() {
			return this.ItemDataBoolean;
		}

		public String ItemDataDate;

		public String getItemDataDate() {
			return this.ItemDataDate;
		}

		public String ItemDataDatetime;

		public String getItemDataDatetime() {
			return this.ItemDataDatetime;
		}

		public String ItemDataDouble;

		public String getItemDataDouble() {
			return this.ItemDataDouble;
		}

		public String ItemDataDurationDatetime;

		public String getItemDataDurationDatetime() {
			return this.ItemDataDurationDatetime;
		}

		public String ItemDataFloat;

		public String getItemDataFloat() {
			return this.ItemDataFloat;
		}

		public String ItemDataHexBinary;

		public String getItemDataHexBinary() {
			return this.ItemDataHexBinary;
		}

		public String ItemDataHexFloat;

		public String getItemDataHexFloat() {
			return this.ItemDataHexFloat;
		}

		public String ItemDataIncompleteDatetime;

		public String getItemDataIncompleteDatetime() {
			return this.ItemDataIncompleteDatetime;
		}

		public String ItemDataInteger;

		public String getItemDataInteger() {
			return this.ItemDataInteger;
		}

		public String ItemDataIntervalDatetime;

		public String getItemDataIntervalDatetime() {
			return this.ItemDataIntervalDatetime;
		}

		public String ItemDataPartialDate;

		public String getItemDataPartialDate() {
			return this.ItemDataPartialDate;
		}

		public String ItemDataPartialDatetime;

		public String getItemDataPartialDatetime() {
			return this.ItemDataPartialDatetime;
		}

		public String ItemDataPartialTime;

		public String getItemDataPartialTime() {
			return this.ItemDataPartialTime;
		}

		public String ItemDataString;

		public String getItemDataString() {
			return this.ItemDataString;
		}

		public String ItemDataTime;

		public String getItemDataTime() {
			return this.ItemDataTime;
		}

		public String ItemDataURI;

		public String getItemDataURI() {
			return this.ItemDataURI;
		}

		public String MDPD;

		public String getMDPD() {
			return this.MDPD;
		}

		public String MDPDName;

		public String getMDPDName() {
			return this.MDPDName;
		}

		public Integer counter;

		public Integer getCounter() {
			return this.counter;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "1.0";
	private final String jobName = "IDRT_JDBC_Upload";
	private final String projectName = "TOS";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					IDRT_JDBC_Upload.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(IDRT_JDBC_Upload.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tOracleCommit_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleCommit_1", System.currentTimeMillis());

		status = "failure";

		tOracleCommit_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tForeach_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tForeach_1", System.currentTimeMillis());

		status = "failure";

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleRow_1", System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_2", System.currentTimeMillis());

		status = "failure";

		tJava_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleCommit_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleCommit_2", System.currentTimeMillis());

		status = "failure";

		tOracleCommit_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_10", System.currentTimeMillis());

		status = "failure";

		tJava_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tOracleOutput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleOutput_2", System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_1", System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_5", System.currentTimeMillis());

		status = "failure";

		tJava_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_10", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_6", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tOracleOutput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleOutput_1", System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_12", System.currentTimeMillis());

		status = "failure";

		tJava_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_12", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_12_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_12_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tOracleOutput_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleOutput_8", System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_12_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_7", System.currentTimeMillis());

		status = "failure";

		tJava_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tOracleOutput_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleOutput_5", System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_8", System.currentTimeMillis());

		status = "failure";

		tJava_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tOracleOutput_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleOutput_4", System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_9", System.currentTimeMillis());

		status = "failure";

		tJava_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tOracleOutput_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleOutput_3", System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_14", System.currentTimeMillis());

		status = "failure";

		tJava_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_14", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_14_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_14_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tOracleOutput_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleOutput_9", System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_14_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_15", System.currentTimeMillis());

		status = "failure";

		tJava_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_16", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tOracleOutput_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleOutput_10", System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_11", System.currentTimeMillis());

		status = "failure";

		tJava_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleConnection_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleConnection_1", System.currentTimeMillis());

		status = "failure";

		tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_3", System.currentTimeMillis());

		status = "failure";

		tJava_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLibraryLoad_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

		status = "failure";

		tLibraryLoad_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleCommit_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tForeach_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleCommit_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_10_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_9_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_10_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_12_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_12_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_7_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_6_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_8_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_7_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_9_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_8_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_14_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_14_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_15_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_16_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_11_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleConnection_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLibraryLoad_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleCommit_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleCommit_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tOracleCommit_1 begin ] start
				 */

				ok_Hash.put("tOracleCommit_1", false);
				start_Hash.put("tOracleCommit_1", System.currentTimeMillis());
				currentComponent = "tOracleCommit_1";

				int tos_count_tOracleCommit_1 = 0;

				/**
				 * [tOracleCommit_1 begin ] stop
				 */
				/**
				 * [tOracleCommit_1 main ] start
				 */

				currentComponent = "tOracleCommit_1";

				java.sql.Connection conn_tOracleCommit_1 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");

				if (null == conn_tOracleCommit_1) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleCommit_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					if (dataSources_tOracleCommit_1 != null) {
						if (dataSources_tOracleCommit_1.get("") != null) {
							conn_tOracleCommit_1 = dataSources_tOracleCommit_1
									.get("").getConnection();
						}
					}
				}

				if (conn_tOracleCommit_1 != null
						&& !conn_tOracleCommit_1.isClosed()) {
					conn_tOracleCommit_1.commit();
				}

				tos_count_tOracleCommit_1++;

				/**
				 * [tOracleCommit_1 main ] stop
				 */
				/**
				 * [tOracleCommit_1 end ] start
				 */

				currentComponent = "tOracleCommit_1";

				ok_Hash.put("tOracleCommit_1", true);
				end_Hash.put("tOracleCommit_1", System.currentTimeMillis());

				/**
				 * [tOracleCommit_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tOracleCommit_1_SUBPROCESS_STATE", 1);
	}

	public void tForeach_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tForeach_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tForeach_1 begin ] start
				 */

				int NB_ITERATE_tOracleRow_1 = 0; // for statistics

				ok_Hash.put("tForeach_1", false);
				start_Hash.put("tForeach_1", System.currentTimeMillis());
				currentComponent = "tForeach_1";

				int tos_count_tForeach_1 = 0;

				Object[] values_tForeach_1 = new Object[] {
						"ALTER TABLE "
								+ context.DBSchema
								+ ".I2B2 MODIFY  C_FULLNAME  VARCHAR2(3500 BYTE)",
						"ALTER TABLE "
								+ context.DBSchema
								+ ".I2B2 MODIFY  C_BASECODE  VARCHAR2(3500 BYTE)",
						"ALTER TABLE "
								+ context.DBSchema
								+ ".I2B2 MODIFY  C_DIMCODE  VARCHAR2(3500 BYTE)",
						"ALTER TABLE "
								+ context.DBSchema
								+ ".CONCEPT_DIMENSION MODIFY  CONCEPT_PATH  VARCHAR2(3500 BYTE)",
						"ALTER TABLE "
								+ context.DBSchema
								+ ".CONCEPT_DIMENSION MODIFY  CONCEPT_CD  VARCHAR2(3500 BYTE)",
						"ALTER TABLE "
								+ context.DBSchema
								+ ".MODIFIER_DIMENSION MODIFY  MODIFIER_PATH  VARCHAR2(3500 BYTE)",
						"ALTER TABLE "
								+ context.DBSchema
								+ ".MODIFIER_DIMENSION MODIFY  MODIFIER_CD  VARCHAR2(3500 BYTE)",
						"ALTER TABLE "
								+ context.DBSchema
								+ ".OBSERVATION_FACT MODIFY  MODIFIER_CD  VARCHAR2(2000 BYTE)",
						"ALTER TABLE "
								+ context.DBSchema
								+ ".patient_mapping MODIFY  PATIENT_NUM  NUMBER(38)",
						"ALTER TABLE "
								+ context.DBSchema
								+ ".patient_dimension MODIFY  PATIENT_NUM  NUMBER(38)",
						"ALTER TABLE "
								+ context.DBSchema
								+ ".OBSERVATION_FACT MODIFY  CONCEPT_CD  VARCHAR2(3500 BYTE)",
						"ALTER TABLE "
								+ context.DBSchema
								+ ".observation_fact MODIFY  PATIENT_NUM  NUMBER(38)",
						"ALTER TABLE "
								+ context.DBSchema
								+ ".qt_patient_enc_collection MODIFY  PATIENT_NUM  NUMBER(38)",
						"ALTER TABLE "
								+ context.DBSchema
								+ ".qt_patient_set_collection MODIFY  PATIENT_NUM  NUMBER(38)",
						"ALTER TABLE "
								+ context.DBSchema
								+ ".qt_patient_set_collection MODIFY  PATIENT_NUM NUMBER(38)",
						"ALTER TABLE " + context.DBSchema
								+ ".DX MODIFY ENCOUNTER_NUM  NUMBER(38)",
						"ALTER TABLE " + context.DBSchema
								+ ".DX MODIFY PATIENT_NUM  NUMBER(38)",
						"ALTER TABLE "
								+ context.DBSchema
								+ ".QUERY_GLOBAL_TEMP MODIFY CONCEPT_CD VARCHAR2(3500 BYTE)",
						"ALTER TABLE "
								+ context.DBSchema
								+ ".QUERY_GLOBAL_TEMP MODIFY  PATIENT_NUM  NUMBER(38)",
						"ALTER TABLE "
								+ context.DBSchema
								+ ".QUERY_GLOBAL_TEMP MODIFY ENCOUNTER_NUM  NUMBER(38)", };

				for (Object tmp_tForeach_1 : values_tForeach_1) {
					globalMap.put("tForeach_1_CURRENT_VALUE", tmp_tForeach_1);

					/**
					 * [tForeach_1 begin ] stop
					 */
					/**
					 * [tForeach_1 main ] start
					 */

					currentComponent = "tForeach_1";

					tos_count_tForeach_1++;

					/**
					 * [tForeach_1 main ] stop
					 */
					NB_ITERATE_tOracleRow_1++;
					iterateLoop++;

					/**
					 * [tOracleRow_1 begin ] start
					 */

					ok_Hash.put("tOracleRow_1", false);
					start_Hash.put("tOracleRow_1", System.currentTimeMillis());
					currentComponent = "tOracleRow_1";

					int tos_count_tOracleRow_1 = 0;

					java.sql.Connection conn_tOracleRow_1 = null;
					conn_tOracleRow_1 = (java.sql.Connection) globalMap
							.get("conn_tOracleConnection_1");
					if (null == conn_tOracleRow_1) {
						java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleRow_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
								.get(KEY_DB_DATASOURCES);
						conn_tOracleRow_1 = dataSources_tOracleRow_1.get("")
								.getConnection();
					}

					java.sql.Statement stmt_tOracleRow_1 = conn_tOracleRow_1
							.createStatement();
					String query_tOracleRow_1 = "";
					boolean whetherReject_tOracleRow_1 = false;

					/**
					 * [tOracleRow_1 begin ] stop
					 */
					/**
					 * [tOracleRow_1 main ] start
					 */

					currentComponent = "tOracleRow_1";

					query_tOracleRow_1 = ((String) globalMap
							.get("tForeach_1_CURRENT_VALUE"));
					whetherReject_tOracleRow_1 = false;

					globalMap.put("tOracleRow_1_QUERY", query_tOracleRow_1);
					try {
						stmt_tOracleRow_1.execute(query_tOracleRow_1);

					} catch (java.lang.Exception e) {
						whetherReject_tOracleRow_1 = true;
						System.err.print(e.getMessage());
					}

					if (!whetherReject_tOracleRow_1) {
					}

					tos_count_tOracleRow_1++;

					/**
					 * [tOracleRow_1 main ] stop
					 */
					/**
					 * [tOracleRow_1 end ] start
					 */

					currentComponent = "tOracleRow_1";

					stmt_tOracleRow_1.close();

					ok_Hash.put("tOracleRow_1", true);
					end_Hash.put("tOracleRow_1", System.currentTimeMillis());

					/**
					 * [tOracleRow_1 end ] stop
					 */

					/**
					 * [tForeach_1 end ] start
					 */

					currentComponent = "tForeach_1";

				}

				ok_Hash.put("tForeach_1", true);
				end_Hash.put("tForeach_1", System.currentTimeMillis());

				/**
				 * [tForeach_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tForeach_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tOracleCommit_2Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tForeach_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());
				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				System.out.println("ERROR: "
						+ ((String) globalMap.get("tOracleRow_1_QUERY")));

				/**
				 * [tJava_2 begin ] stop
				 */
				/**
				 * [tJava_2 main ] start
				 */

				currentComponent = "tJava_2";

				tos_count_tJava_2++;

				/**
				 * [tJava_2 main ] stop
				 */
				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				/**
				 * [tJava_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}

	public void tOracleCommit_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleCommit_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tOracleCommit_2 begin ] start
				 */

				ok_Hash.put("tOracleCommit_2", false);
				start_Hash.put("tOracleCommit_2", System.currentTimeMillis());
				currentComponent = "tOracleCommit_2";

				int tos_count_tOracleCommit_2 = 0;

				/**
				 * [tOracleCommit_2 begin ] stop
				 */
				/**
				 * [tOracleCommit_2 main ] start
				 */

				currentComponent = "tOracleCommit_2";

				java.sql.Connection conn_tOracleCommit_2 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");

				if (null == conn_tOracleCommit_2) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleCommit_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					if (dataSources_tOracleCommit_2 != null) {
						if (dataSources_tOracleCommit_2.get("") != null) {
							conn_tOracleCommit_2 = dataSources_tOracleCommit_2
									.get("").getConnection();
						}
					}
				}

				if (conn_tOracleCommit_2 != null
						&& !conn_tOracleCommit_2.isClosed()) {
					conn_tOracleCommit_2.commit();
					conn_tOracleCommit_2.close();
				}

				tos_count_tOracleCommit_2++;

				/**
				 * [tOracleCommit_2 main ] stop
				 */
				/**
				 * [tOracleCommit_2 end ] start
				 */

				currentComponent = "tOracleCommit_2";

				ok_Hash.put("tOracleCommit_2", true);
				end_Hash.put("tOracleCommit_2", System.currentTimeMillis());

				/**
				 * [tOracleCommit_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tOracleCommit_2:OnSubjobOk1",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_10Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tOracleCommit_2:OnSubjobOk2",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_5Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tOracleCommit_2:OnSubjobOk3",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_12Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tOracleCommit_2:OnSubjobOk4",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_7Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tOracleCommit_2:OnSubjobOk5",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_8Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tOracleCommit_2:OnSubjobOk6",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_9Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tOracleCommit_2:OnSubjobOk7",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_14Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tOracleCommit_2:OnSubjobOk8",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_15Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tOracleCommit_2:OnSubjobOk9",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_11Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tOracleCommit_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_10Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_10 begin ] start
				 */

				ok_Hash.put("tJava_10", false);
				start_Hash.put("tJava_10", System.currentTimeMillis());
				currentComponent = "tJava_10";

				int tos_count_tJava_10 = 0;

				System.out.println("Patient Data: ");
				StatusListener.setSubStatus(0.0f, (int) (float) (0.0f) + "%");

				/**
				 * [tJava_10 begin ] stop
				 */
				/**
				 * [tJava_10 main ] start
				 */

				currentComponent = "tJava_10";

				tos_count_tJava_10++;

				/**
				 * [tJava_10 main ] stop
				 */
				/**
				 * [tJava_10 end ] start
				 */

				currentComponent = "tJava_10";

				ok_Hash.put("tJava_10", true);
				end_Hash.put("tJava_10", System.currentTimeMillis());

				/**
				 * [tJava_10 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_10:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_9Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_10_SUBPROCESS_STATE", 1);
	}

	public static class row23Struct implements
			routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_JDBC_Upload = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_JDBC_Upload, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readDate(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readDate(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_JDBC_Upload = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_JDBC_Upload, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readDate(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readDate(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_9Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row10Struct row10 = new row10Struct();
				row23Struct row23 = new row23Struct();

				/**
				 * [tOracleOutput_2 begin ] start
				 */

				ok_Hash.put("tOracleOutput_2", false);
				start_Hash.put("tOracleOutput_2", System.currentTimeMillis());
				currentComponent = "tOracleOutput_2";

				int tos_count_tOracleOutput_2 = 0;

				int nb_line_tOracleOutput_2 = 0;
				int nb_line_update_tOracleOutput_2 = 0;
				int nb_line_inserted_tOracleOutput_2 = 0;
				int nb_line_deleted_tOracleOutput_2 = 0;
				int nb_line_rejected_tOracleOutput_2 = 0;

				int tmp_batchUpdateCount_tOracleOutput_2 = 0;

				int deletedCount_tOracleOutput_2 = 0;
				int updatedCount_tOracleOutput_2 = 0;
				int insertedCount_tOracleOutput_2 = 0;
				int rejectedCount_tOracleOutput_2 = 0;

				boolean whetherReject_tOracleOutput_2 = false;

				java.sql.Connection conn_tOracleOutput_2 = null;

				// optional table
				String dbschema_tOracleOutput_2 = null;
				String tableName_tOracleOutput_2 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleOutput_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tOracleOutput_2) {
					conn_tOracleOutput_2 = dataSources_tOracleOutput_2.get("")
							.getConnection();
				} else {

					java.lang.Class.forName("oracle.jdbc.OracleDriver");

					String url_tOracleOutput_2 = null;
					url_tOracleOutput_2 = "jdbc:oracle:thin:@" + context.DBHost
							+ ":" + context.DBPort + ":" + context.DBInstance;
					String dbUser_tOracleOutput_2 = context.DBUsername;
					String dbPwd_tOracleOutput_2 = context.DBPassword;
					dbschema_tOracleOutput_2 = context.DBSchema;

					conn_tOracleOutput_2 = java.sql.DriverManager
							.getConnection(url_tOracleOutput_2,
									dbUser_tOracleOutput_2,
									dbPwd_tOracleOutput_2);
				}
				conn_tOracleOutput_2.setAutoCommit(false);
				int commitEvery_tOracleOutput_2 = 100000;
				int commitCounter_tOracleOutput_2 = 0;
				int batchSize_tOracleOutput_2 = 100000;
				int batchSizeCounter_tOracleOutput_2 = 0;

				int count_tOracleOutput_2 = 0;

				if (dbschema_tOracleOutput_2 == null
						|| dbschema_tOracleOutput_2.trim().length() == 0) {
					tableName_tOracleOutput_2 = "observation_fact";
				} else {
					tableName_tOracleOutput_2 = dbschema_tOracleOutput_2 + "."
							+ "observation_fact";
				}
				String insert_tOracleOutput_2 = "INSERT INTO "
						+ tableName_tOracleOutput_2
						+ " (ENCOUNTER_NUM,PATIENT_NUM,CONCEPT_CD,PROVIDER_ID,START_DATE,MODIFIER_CD,INSTANCE_NUM,VALTYPE_CD,TVAL_CHAR,NVAL_NUM,VALUEFLAG_CD,QUANTITY_NUM,UNITS_CD,END_DATE,LOCATION_CD,OBSERVATION_BLOB,CONFIDENCE_NUM,UPDATE_DATE,DOWNLOAD_DATE,IMPORT_DATE,SOURCESYSTEM_CD,UPLOAD_ID) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tOracleOutput_2 = conn_tOracleOutput_2
						.prepareStatement(insert_tOracleOutput_2);

				/**
				 * [tOracleOutput_2 begin ] stop
				 */

				/**
				 * [tJavaRow_2 begin ] start
				 */

				ok_Hash.put("tJavaRow_2", false);
				start_Hash.put("tJavaRow_2", System.currentTimeMillis());
				currentComponent = "tJavaRow_2";

				int tos_count_tJavaRow_2 = 0;

				int nb_line_tJavaRow_2 = 0;

				/**
				 * [tJavaRow_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_9 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_9", false);
				start_Hash.put("tFileInputDelimited_9",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_9";

				int tos_count_tFileInputDelimited_9 = 0;

				int nb_line_tFileInputDelimited_9 = 0;
				int footer_tFileInputDelimited_9 = 0;
				int totalLinetFileInputDelimited_9 = 0;
				int limittFileInputDelimited_9 = -1;
				int lastLinetFileInputDelimited_9 = -1;

				char fieldSeparator_tFileInputDelimited_9[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_9 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_9[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_9 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_9 = /**
				 * Start field
				 * tFileInputDelimited_9:FILENAME
				 */
				context.folderMain + context.folderOutput + "patient_data.csv"/**
				 * 
				 * End field tFileInputDelimited_9:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_9 = null;

				try {

					String[] rowtFileInputDelimited_9 = null;
					int currentLinetFileInputDelimited_9 = 0;
					int outputLinetFileInputDelimited_9 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_9 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_9 = 0;
							if (footer_value_tFileInputDelimited_9 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_9,
									fieldSeparator_tFileInputDelimited_9[0],
									context.coding);
						} else {
							csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_9)),
													context.coding)),
									fieldSeparator_tFileInputDelimited_9[0]);
						}

						csvReadertFileInputDelimited_9.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_9[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_9[0] != '\r'))
							csvReadertFileInputDelimited_9.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_9[0]);

						csvReadertFileInputDelimited_9.setQuoteChar('"');

						csvReadertFileInputDelimited_9
								.setEscapeChar(csvReadertFileInputDelimited_9
										.getQuoteChar());

						if (footer_tFileInputDelimited_9 > 0) {
							for (totalLinetFileInputDelimited_9 = 0; totalLinetFileInputDelimited_9 < 1; totalLinetFileInputDelimited_9++) {
								csvReadertFileInputDelimited_9.readNext();
							}
							csvReadertFileInputDelimited_9
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_9.readNext()) {

								rowtFileInputDelimited_9 = csvReadertFileInputDelimited_9
										.getValues();
								if (!(rowtFileInputDelimited_9.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_9[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_9++;

								}

							}
							int lastLineTemptFileInputDelimited_9 = totalLinetFileInputDelimited_9
									- footer_tFileInputDelimited_9 < 0 ? 0
									: totalLinetFileInputDelimited_9
											- footer_tFileInputDelimited_9;
							if (lastLinetFileInputDelimited_9 > 0) {
								lastLinetFileInputDelimited_9 = lastLinetFileInputDelimited_9 < lastLineTemptFileInputDelimited_9 ? lastLinetFileInputDelimited_9
										: lastLineTemptFileInputDelimited_9;
							} else {
								lastLinetFileInputDelimited_9 = lastLineTemptFileInputDelimited_9;
							}

							csvReadertFileInputDelimited_9.close();
							if (filename_tFileInputDelimited_9 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_9,
										fieldSeparator_tFileInputDelimited_9[0],
										context.coding);
							} else {
								csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_9)),
														context.coding)),
										fieldSeparator_tFileInputDelimited_9[0]);
							}
							csvReadertFileInputDelimited_9
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_9[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_9[0] != '\r'))
								csvReadertFileInputDelimited_9
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_9[0]);

							csvReadertFileInputDelimited_9.setQuoteChar('"');

							csvReadertFileInputDelimited_9
									.setEscapeChar(csvReadertFileInputDelimited_9
											.getQuoteChar());

						}

						if (limittFileInputDelimited_9 != 0) {
							for (currentLinetFileInputDelimited_9 = 0; currentLinetFileInputDelimited_9 < 1; currentLinetFileInputDelimited_9++) {
								csvReadertFileInputDelimited_9.readNext();
							}
						}
						csvReadertFileInputDelimited_9
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_9 != 0
							&& csvReadertFileInputDelimited_9 != null
							&& csvReadertFileInputDelimited_9.readNext()) {

						rowtFileInputDelimited_9 = csvReadertFileInputDelimited_9
								.getValues();

						if (rowtFileInputDelimited_9.length == 1
								&& ("\015").equals(rowtFileInputDelimited_9[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_9++;

						if (lastLinetFileInputDelimited_9 > -1
								&& currentLinetFileInputDelimited_9 > lastLinetFileInputDelimited_9) {
							break;
						}
						outputLinetFileInputDelimited_9++;
						if (limittFileInputDelimited_9 > 0
								&& outputLinetFileInputDelimited_9 > limittFileInputDelimited_9) {
							break;
						}

						row10 = null;

						boolean whetherReject_tFileInputDelimited_9 = false;
						row10 = new row10Struct();
						try {

							if (rowtFileInputDelimited_9.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_9[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row10.ENCOUNTER_NUM = null;

								row10.PATIENT_NUM = null;

								row10.CONCEPT_CD = null;

								row10.PROVIDER_ID = null;

								row10.START_DATE = null;

								row10.MODIFIER_CD = null;

								row10.INSTANCE_NUM = null;

								row10.VALTYPE_CD = null;

								row10.TVAL_CHAR = null;

								row10.NVAL_NUM = null;

								row10.VALUEFLAG_CD = null;

								row10.QUANTITY_NUM = null;

								row10.UNITS_CD = null;

								row10.END_DATE = null;

								row10.LOCATION_CD = null;

								row10.OBSERVATION_BLOB = null;

								row10.CONFIDENCE_NUM = null;

								row10.UPDATE_DATE = null;

								row10.DOWNLOAD_DATE = null;

								row10.IMPORT_DATE = null;

								row10.SOURCESYSTEM_CD = null;

								row10.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_9 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_9 = 0;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row10.ENCOUNTER_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]);

									} else {
										row10.ENCOUNTER_NUM = null;
									}

								} else {
									row10.ENCOUNTER_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 1;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row10.PATIENT_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]);

									} else {
										row10.PATIENT_NUM = null;
									}

								} else {
									row10.PATIENT_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 2;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row10.CONCEPT_CD = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row10.CONCEPT_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 3;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row10.PROVIDER_ID = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row10.PROVIDER_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 4;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row10.START_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9],
														"yyyy-MM-dd");

									} else {
										row10.START_DATE = null;
									}

								} else {
									row10.START_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 5;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row10.MODIFIER_CD = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row10.MODIFIER_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 6;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row10.INSTANCE_NUM = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row10.INSTANCE_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 7;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row10.VALTYPE_CD = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row10.VALTYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 8;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row10.TVAL_CHAR = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row10.TVAL_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 9;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row10.NVAL_NUM = ParserUtils
												.parseTo_Float(rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]);

									} else {
										row10.NVAL_NUM = null;
									}

								} else {
									row10.NVAL_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 10;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row10.VALUEFLAG_CD = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row10.VALUEFLAG_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 11;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row10.QUANTITY_NUM = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row10.QUANTITY_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 12;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row10.UNITS_CD = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row10.UNITS_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 13;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row10.END_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9],
														"yyyy-MM-dd");

									} else {
										row10.END_DATE = null;
									}

								} else {
									row10.END_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 14;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row10.LOCATION_CD = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row10.LOCATION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 15;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row10.OBSERVATION_BLOB = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row10.OBSERVATION_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 16;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row10.CONFIDENCE_NUM = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row10.CONFIDENCE_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 17;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row10.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9],
														"yyyy-MM-dd");

									} else {
										row10.UPDATE_DATE = null;
									}

								} else {
									row10.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 18;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row10.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9],
														"yyyy-MM-dd");

									} else {
										row10.DOWNLOAD_DATE = null;
									}

								} else {
									row10.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 19;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row10.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9],
														"yyyy-MM-dd");

									} else {
										row10.IMPORT_DATE = null;
									}

								} else {
									row10.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 20;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row10.SOURCESYSTEM_CD = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row10.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 21;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row10.UPLOAD_ID = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row10.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_9 = true;

							System.err.println(e.getMessage());
							row10 = null;

						}

						/**
						 * [tFileInputDelimited_9 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_9 main ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						tos_count_tFileInputDelimited_9++;

						/**
						 * [tFileInputDelimited_9 main ] stop
						 */
						// Start of branch "row10"
						if (row10 != null) {

							/**
							 * [tJavaRow_2 main ] start
							 */

							currentComponent = "tJavaRow_2";

							// Code generated according to input schema and
							// output schema
							context.counter++;
							if (context.counter % 100000 == 0) {
								System.out.println("Next: " + context.counter
										+ " Observations");
							}
							row23.ENCOUNTER_NUM = row10.ENCOUNTER_NUM;
							row23.PATIENT_NUM = row10.PATIENT_NUM;
							row23.CONCEPT_CD = row10.CONCEPT_CD;
							row23.PROVIDER_ID = row10.PROVIDER_ID;
							row23.START_DATE = row10.START_DATE;
							row23.MODIFIER_CD = row10.MODIFIER_CD;
							row23.INSTANCE_NUM = row10.INSTANCE_NUM;
							row23.VALTYPE_CD = row10.VALTYPE_CD;
							row23.TVAL_CHAR = row10.TVAL_CHAR;
							row23.NVAL_NUM = row10.NVAL_NUM;
							row23.VALUEFLAG_CD = row10.VALUEFLAG_CD;
							row23.QUANTITY_NUM = row10.QUANTITY_NUM;
							row23.UNITS_CD = row10.UNITS_CD;
							row23.END_DATE = row10.END_DATE;
							row23.LOCATION_CD = row10.LOCATION_CD;
							row23.OBSERVATION_BLOB = row10.OBSERVATION_BLOB;
							row23.CONFIDENCE_NUM = row10.CONFIDENCE_NUM;
							row23.UPDATE_DATE = row10.UPDATE_DATE;
							row23.DOWNLOAD_DATE = row10.DOWNLOAD_DATE;
							row23.IMPORT_DATE = row10.IMPORT_DATE;
							row23.SOURCESYSTEM_CD = row10.SOURCESYSTEM_CD;
							row23.UPLOAD_ID = row10.UPLOAD_ID;

							nb_line_tJavaRow_2++;

							tos_count_tJavaRow_2++;

							/**
							 * [tJavaRow_2 main ] stop
							 */

							/**
							 * [tOracleOutput_2 main ] start
							 */

							currentComponent = "tOracleOutput_2";

							whetherReject_tOracleOutput_2 = false;
							pstmt_tOracleOutput_2.setBigDecimal(1,
									row23.ENCOUNTER_NUM);

							pstmt_tOracleOutput_2.setBigDecimal(2,
									row23.PATIENT_NUM);

							if (row23.CONCEPT_CD == null) {
								pstmt_tOracleOutput_2.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_2.setString(3,
										row23.CONCEPT_CD);
							}

							if (row23.PROVIDER_ID == null) {
								pstmt_tOracleOutput_2.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_2.setString(4,
										row23.PROVIDER_ID);
							}

							if (row23.START_DATE != null) {
								pstmt_tOracleOutput_2.setDate(
										5,
										new java.sql.Date(row23.START_DATE
												.getTime()));
							} else {
								pstmt_tOracleOutput_2.setNull(5,
										java.sql.Types.DATE);
							}

							if (row23.MODIFIER_CD == null) {
								pstmt_tOracleOutput_2.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_2.setString(6,
										row23.MODIFIER_CD);
							}

							if (row23.INSTANCE_NUM == null) {
								pstmt_tOracleOutput_2.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_2.setString(7,
										row23.INSTANCE_NUM);
							}

							if (row23.VALTYPE_CD == null) {
								pstmt_tOracleOutput_2.setNull(8,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_2.setString(8,
										row23.VALTYPE_CD);
							}

							if (row23.TVAL_CHAR == null) {
								pstmt_tOracleOutput_2.setNull(9,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_2.setString(9,
										row23.TVAL_CHAR);
							}

							if (row23.NVAL_NUM == null) {
								pstmt_tOracleOutput_2.setNull(10,
										java.sql.Types.FLOAT);
							} else {
								pstmt_tOracleOutput_2.setFloat(10,
										row23.NVAL_NUM);
							}

							if (row23.VALUEFLAG_CD == null) {
								pstmt_tOracleOutput_2.setNull(11,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_2.setString(11,
										row23.VALUEFLAG_CD);
							}

							if (row23.QUANTITY_NUM == null) {
								pstmt_tOracleOutput_2.setNull(12,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_2.setString(12,
										row23.QUANTITY_NUM);
							}

							if (row23.UNITS_CD == null) {
								pstmt_tOracleOutput_2.setNull(13,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_2.setString(13,
										row23.UNITS_CD);
							}

							if (row23.END_DATE != null) {
								pstmt_tOracleOutput_2.setDate(
										14,
										new java.sql.Date(row23.END_DATE
												.getTime()));
							} else {
								pstmt_tOracleOutput_2.setNull(14,
										java.sql.Types.DATE);
							}

							if (row23.LOCATION_CD == null) {
								pstmt_tOracleOutput_2.setNull(15,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_2.setString(15,
										row23.LOCATION_CD);
							}

							if (row23.OBSERVATION_BLOB == null) {
								pstmt_tOracleOutput_2.setNull(16,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_2.setString(16,
										row23.OBSERVATION_BLOB);
							}

							if (row23.CONFIDENCE_NUM == null) {
								pstmt_tOracleOutput_2.setNull(17,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_2.setString(17,
										row23.CONFIDENCE_NUM);
							}

							if (row23.UPDATE_DATE != null) {
								pstmt_tOracleOutput_2.setDate(
										18,
										new java.sql.Date(row23.UPDATE_DATE
												.getTime()));
							} else {
								pstmt_tOracleOutput_2.setNull(18,
										java.sql.Types.DATE);
							}

							if (row23.DOWNLOAD_DATE != null) {
								pstmt_tOracleOutput_2.setDate(
										19,
										new java.sql.Date(row23.DOWNLOAD_DATE
												.getTime()));
							} else {
								pstmt_tOracleOutput_2.setNull(19,
										java.sql.Types.DATE);
							}

							if (row23.IMPORT_DATE != null) {
								pstmt_tOracleOutput_2.setDate(
										20,
										new java.sql.Date(row23.IMPORT_DATE
												.getTime()));
							} else {
								pstmt_tOracleOutput_2.setNull(20,
										java.sql.Types.DATE);
							}

							if (row23.SOURCESYSTEM_CD == null) {
								pstmt_tOracleOutput_2.setNull(21,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_2.setString(21,
										row23.SOURCESYSTEM_CD);
							}

							if (row23.UPLOAD_ID == null) {
								pstmt_tOracleOutput_2.setNull(22,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_2.setString(22,
										row23.UPLOAD_ID);
							}

							pstmt_tOracleOutput_2.addBatch();
							nb_line_tOracleOutput_2++;

							batchSizeCounter_tOracleOutput_2++;

							if (!whetherReject_tOracleOutput_2) {
							}
							if (batchSize_tOracleOutput_2 <= batchSizeCounter_tOracleOutput_2) {
								try {
									pstmt_tOracleOutput_2.executeBatch();
								} catch (java.sql.BatchUpdateException e_tOracleOutput_2) {

									throw (e_tOracleOutput_2);

								}
								tmp_batchUpdateCount_tOracleOutput_2 = pstmt_tOracleOutput_2
										.getUpdateCount();

								insertedCount_tOracleOutput_2

								+= (tmp_batchUpdateCount_tOracleOutput_2 != -1 ? tmp_batchUpdateCount_tOracleOutput_2
										: 0);
								batchSizeCounter_tOracleOutput_2 = 0;
							}

							commitCounter_tOracleOutput_2++;
							if (commitEvery_tOracleOutput_2 <= commitCounter_tOracleOutput_2) {

								try {
									pstmt_tOracleOutput_2.executeBatch();
								} catch (java.sql.BatchUpdateException e_tOracleOutput_2) {

									throw (e_tOracleOutput_2);

								}
								tmp_batchUpdateCount_tOracleOutput_2 = pstmt_tOracleOutput_2
										.getUpdateCount();

								insertedCount_tOracleOutput_2

								+= (tmp_batchUpdateCount_tOracleOutput_2 != -1 ? tmp_batchUpdateCount_tOracleOutput_2
										: 0);

								conn_tOracleOutput_2.commit();
								commitCounter_tOracleOutput_2 = 0;
							}

							tos_count_tOracleOutput_2++;

							/**
							 * [tOracleOutput_2 main ] stop
							 */

						} // End of branch "row10"

						/**
						 * [tFileInputDelimited_9 end ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						nb_line_tFileInputDelimited_9++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_9 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_9 != null) {
							csvReadertFileInputDelimited_9.close();
						}
					}
					if (csvReadertFileInputDelimited_9 != null) {
						globalMap.put("tFileInputDelimited_9_NB_LINE",
								nb_line_tFileInputDelimited_9);
					}
				}

				ok_Hash.put("tFileInputDelimited_9", true);
				end_Hash.put("tFileInputDelimited_9",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_9 end ] stop
				 */

				/**
				 * [tJavaRow_2 end ] start
				 */

				currentComponent = "tJavaRow_2";

				globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);

				ok_Hash.put("tJavaRow_2", true);
				end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				/**
				 * [tJavaRow_2 end ] stop
				 */

				/**
				 * [tOracleOutput_2 end ] start
				 */

				currentComponent = "tOracleOutput_2";

				try {
					if (pstmt_tOracleOutput_2 != null) {
						pstmt_tOracleOutput_2.executeBatch();
					}
				} catch (java.sql.BatchUpdateException e_tOracleOutput_2) {

					throw (e_tOracleOutput_2);

				}
				if (pstmt_tOracleOutput_2 != null) {
					tmp_batchUpdateCount_tOracleOutput_2 = pstmt_tOracleOutput_2
							.getUpdateCount();

					insertedCount_tOracleOutput_2

					+= (tmp_batchUpdateCount_tOracleOutput_2 != -1 ? tmp_batchUpdateCount_tOracleOutput_2
							: 0);
				}
				if (pstmt_tOracleOutput_2 != null) {

					pstmt_tOracleOutput_2.close();

				}

				conn_tOracleOutput_2.commit();

				conn_tOracleOutput_2.close();

				nb_line_deleted_tOracleOutput_2 = nb_line_deleted_tOracleOutput_2
						+ deletedCount_tOracleOutput_2;
				nb_line_update_tOracleOutput_2 = nb_line_update_tOracleOutput_2
						+ updatedCount_tOracleOutput_2;
				nb_line_inserted_tOracleOutput_2 = nb_line_inserted_tOracleOutput_2
						+ insertedCount_tOracleOutput_2;
				nb_line_rejected_tOracleOutput_2 = nb_line_rejected_tOracleOutput_2
						+ rejectedCount_tOracleOutput_2;

				globalMap.put("tOracleOutput_2_NB_LINE",
						nb_line_tOracleOutput_2);
				globalMap.put("tOracleOutput_2_NB_LINE_UPDATED",
						nb_line_update_tOracleOutput_2);
				globalMap.put("tOracleOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tOracleOutput_2);
				globalMap.put("tOracleOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tOracleOutput_2);
				globalMap.put("tOracleOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tOracleOutput_2);

				ok_Hash.put("tOracleOutput_2", true);
				end_Hash.put("tOracleOutput_2", System.currentTimeMillis());

				tOracleCommit_1Process(globalMap);

				/**
				 * [tOracleOutput_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());
				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				System.out.println(((String) globalMap
						.get("tOracleOutput_1_QUERY")));
				System.out.println(((String) globalMap
						.get("tOracleOutput_2_QUERY")));
				System.out.println(((String) globalMap
						.get("tOracleOutput_3_QUERY")));
				System.out.println(((String) globalMap
						.get("tOracleOutput_4_QUERY")));
				System.out.println(((String) globalMap
						.get("tOracleOutput_5_QUERY")));
				System.out.println(((String) globalMap
						.get("tOracleOutput_8_QUERY")));
				System.out.println(((String) globalMap
						.get("tOracleOutput_9_QUERY")));
				System.out.println(((String) globalMap
						.get("tOracleOutput_10_QUERY")));

				/**
				 * [tJava_1 begin ] stop
				 */
				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */
				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_5 begin ] start
				 */

				ok_Hash.put("tJava_5", false);
				start_Hash.put("tJava_5", System.currentTimeMillis());
				currentComponent = "tJava_5";

				int tos_count_tJava_5 = 0;

				System.out.println("Ontology: ");
				StatusListener.setSubStatus(20.0f, (int) (float) (20.0f) + "%");

				/**
				 * [tJava_5 begin ] stop
				 */
				/**
				 * [tJava_5 main ] start
				 */

				currentComponent = "tJava_5";

				tos_count_tJava_5++;

				/**
				 * [tJava_5 main ] stop
				 */
				/**
				 * [tJava_5 end ] start
				 */

				currentComponent = "tJava_5";

				ok_Hash.put("tJava_5", true);
				end_Hash.put("tJava_5", System.currentTimeMillis());

				/**
				 * [tJava_5 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_5:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_10Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}

	public static class row24Struct implements
			routines.system.IPersistableRow<row24Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_JDBC_Upload = new byte[0];

		public BigDecimal C_HLEVEL;

		public BigDecimal getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String C_SYNONYM_CD;

		public String getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public BigDecimal C_TOTALNUM;

		public BigDecimal getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public String C_COLUMNDATATYPE;

		public String getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_JDBC_Upload, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.C_HLEVEL = (BigDecimal) dis.readObject();

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					this.C_SYNONYM_CD = readString(dis);

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = (BigDecimal) dis.readObject();

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					this.C_COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.C_HLEVEL);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.C_SYNONYM_CD, dos);

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// BigDecimal

				dos.writeObject(this.C_TOTALNUM);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// String

				writeString(this.C_COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + C_SYNONYM_CD);
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + String.valueOf(C_TOTALNUM));
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + C_COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class outtStruct implements
			routines.system.IPersistableRow<outtStruct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_JDBC_Upload = new byte[0];

		public BigDecimal C_HLEVEL;

		public BigDecimal getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String C_SYNONYM_CD;

		public String getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public BigDecimal C_TOTALNUM;

		public BigDecimal getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public String C_COLUMNDATATYPE;

		public String getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_JDBC_Upload, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.C_HLEVEL = (BigDecimal) dis.readObject();

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					this.C_SYNONYM_CD = readString(dis);

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = (BigDecimal) dis.readObject();

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					this.C_COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.C_HLEVEL);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.C_SYNONYM_CD, dos);

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// BigDecimal

				dos.writeObject(this.C_TOTALNUM);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// String

				writeString(this.C_COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + C_SYNONYM_CD);
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + String.valueOf(C_TOTALNUM));
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + C_COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(outtStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_JDBC_Upload = new byte[0];

		public BigDecimal C_HLEVEL;

		public BigDecimal getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String C_SYNONYM_CD;

		public String getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public BigDecimal C_TOTALNUM;

		public BigDecimal getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public String C_COLUMNDATATYPE;

		public String getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_JDBC_Upload, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.C_HLEVEL = (BigDecimal) dis.readObject();

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					this.C_SYNONYM_CD = readString(dis);

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = (BigDecimal) dis.readObject();

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					this.C_COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.C_HLEVEL);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.C_SYNONYM_CD, dos);

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// BigDecimal

				dos.writeObject(this.C_TOTALNUM);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// String

				writeString(this.C_COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + C_SYNONYM_CD);
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + String.valueOf(C_TOTALNUM));
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + C_COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_10Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();
				outtStruct outt = new outtStruct();
				row24Struct row24 = new row24Struct();

				/**
				 * [tOracleOutput_1 begin ] start
				 */

				ok_Hash.put("tOracleOutput_1", false);
				start_Hash.put("tOracleOutput_1", System.currentTimeMillis());
				currentComponent = "tOracleOutput_1";

				int tos_count_tOracleOutput_1 = 0;

				int nb_line_tOracleOutput_1 = 0;
				int nb_line_update_tOracleOutput_1 = 0;
				int nb_line_inserted_tOracleOutput_1 = 0;
				int nb_line_deleted_tOracleOutput_1 = 0;
				int nb_line_rejected_tOracleOutput_1 = 0;

				int tmp_batchUpdateCount_tOracleOutput_1 = 0;

				int deletedCount_tOracleOutput_1 = 0;
				int updatedCount_tOracleOutput_1 = 0;
				int insertedCount_tOracleOutput_1 = 0;
				int rejectedCount_tOracleOutput_1 = 0;

				boolean whetherReject_tOracleOutput_1 = false;

				java.sql.Connection conn_tOracleOutput_1 = null;

				// optional table
				String dbschema_tOracleOutput_1 = null;
				String tableName_tOracleOutput_1 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleOutput_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tOracleOutput_1) {
					conn_tOracleOutput_1 = dataSources_tOracleOutput_1.get("")
							.getConnection();
				} else {

					java.lang.Class.forName("oracle.jdbc.OracleDriver");

					String url_tOracleOutput_1 = null;
					url_tOracleOutput_1 = "jdbc:oracle:thin:@" + context.DBHost
							+ ":" + context.DBPort + ":" + context.DBInstance;
					String dbUser_tOracleOutput_1 = context.DBUsername;
					String dbPwd_tOracleOutput_1 = context.DBPassword;
					dbschema_tOracleOutput_1 = context.DBSchema;

					conn_tOracleOutput_1 = java.sql.DriverManager
							.getConnection(url_tOracleOutput_1,
									dbUser_tOracleOutput_1,
									dbPwd_tOracleOutput_1);
				}
				conn_tOracleOutput_1.setAutoCommit(false);
				int commitEvery_tOracleOutput_1 = 50000;
				int commitCounter_tOracleOutput_1 = 0;

				int count_tOracleOutput_1 = 0;

				if (dbschema_tOracleOutput_1 == null
						|| dbschema_tOracleOutput_1.trim().length() == 0) {
					tableName_tOracleOutput_1 = "i2b2";
				} else {
					tableName_tOracleOutput_1 = dbschema_tOracleOutput_1 + "."
							+ "i2b2";
				}
				String insert_tOracleOutput_1 = "INSERT INTO "
						+ tableName_tOracleOutput_1
						+ " (C_HLEVEL,C_FULLNAME,C_NAME,C_SYNONYM_CD,C_VISUALATTRIBUTES,C_TOTALNUM,C_BASECODE,C_METADATAXML,C_FACTTABLECOLUMN,C_TABLENAME,C_COLUMNNAME,C_COLUMNDATATYPE,C_OPERATOR,C_DIMCODE,C_COMMENT,C_TOOLTIP,M_APPLIED_PATH,UPDATE_DATE,DOWNLOAD_DATE,IMPORT_DATE,SOURCESYSTEM_CD,VALUETYPE_CD,M_EXCLUSION_CD,C_PATH,C_SYMBOL) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tOracleOutput_1 = conn_tOracleOutput_1
						.prepareStatement(insert_tOracleOutput_1);

				StringBuffer query_tOracleOutput_1 = null;

				String[] insertSQLSplits_tOracleOutput_1 = insert_tOracleOutput_1
						.split("\\?");

				/**
				 * [tOracleOutput_1 begin ] stop
				 */

				/**
				 * [tUniqRow_6 begin ] start
				 */

				ok_Hash.put("tUniqRow_6", false);
				start_Hash.put("tUniqRow_6", System.currentTimeMillis());
				currentComponent = "tUniqRow_6";

				int tos_count_tUniqRow_6 = 0;

				class KeyStruct_tUniqRow_6 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					BigDecimal C_HLEVEL;
					String C_FULLNAME;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.C_HLEVEL == null) ? 0
											: this.C_HLEVEL.hashCode());

							result = prime
									* result
									+ ((this.C_FULLNAME == null) ? 0
											: this.C_FULLNAME.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_6 other = (KeyStruct_tUniqRow_6) obj;

						if (this.C_HLEVEL == null) {
							if (other.C_HLEVEL != null)
								return false;
						} else if (!this.C_HLEVEL.equals(other.C_HLEVEL))
							return false;

						if (this.C_FULLNAME == null) {
							if (other.C_FULLNAME != null)
								return false;
						} else if (!this.C_FULLNAME.equals(other.C_FULLNAME))
							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_6 = 0;
				int nb_duplicates_tUniqRow_6 = 0;
				KeyStruct_tUniqRow_6 finder_tUniqRow_6 = new KeyStruct_tUniqRow_6();
				java.util.Set<KeyStruct_tUniqRow_6> keystUniqRow_6 = new java.util.HashSet<KeyStruct_tUniqRow_6>();

				/**
				 * [tUniqRow_6 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());
				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				outtStruct outt_tmp = new outtStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_10 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_10", false);
				start_Hash.put("tFileInputDelimited_10",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_10";

				int tos_count_tFileInputDelimited_10 = 0;

				int nb_line_tFileInputDelimited_10 = 0;
				int footer_tFileInputDelimited_10 = 0;
				int totalLinetFileInputDelimited_10 = 0;
				int limittFileInputDelimited_10 = -1;
				int lastLinetFileInputDelimited_10 = -1;

				char fieldSeparator_tFileInputDelimited_10[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_10 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_10[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_10 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_10 = /**
				 * Start field
				 * tFileInputDelimited_10:FILENAME
				 */
				context.folderMain + context.folderOutput + "ontology.csv"/**
				 * End
				 * field tFileInputDelimited_10:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_10 = null;

				try {

					String[] rowtFileInputDelimited_10 = null;
					int currentLinetFileInputDelimited_10 = 0;
					int outputLinetFileInputDelimited_10 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_10 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_10 = 0;
							if (footer_value_tFileInputDelimited_10 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_10 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_10,
									fieldSeparator_tFileInputDelimited_10[0],
									context.coding);
						} else {
							csvReadertFileInputDelimited_10 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_10)),
													context.coding)),
									fieldSeparator_tFileInputDelimited_10[0]);
						}

						csvReadertFileInputDelimited_10
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_10[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_10[0] != '\r'))
							csvReadertFileInputDelimited_10.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_10[0]);

						csvReadertFileInputDelimited_10.setQuoteChar('"');

						csvReadertFileInputDelimited_10
								.setEscapeChar(csvReadertFileInputDelimited_10
										.getQuoteChar());

						if (footer_tFileInputDelimited_10 > 0) {
							for (totalLinetFileInputDelimited_10 = 0; totalLinetFileInputDelimited_10 < 1; totalLinetFileInputDelimited_10++) {
								csvReadertFileInputDelimited_10.readNext();
							}
							csvReadertFileInputDelimited_10
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_10.readNext()) {

								rowtFileInputDelimited_10 = csvReadertFileInputDelimited_10
										.getValues();
								if (!(rowtFileInputDelimited_10.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_10[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_10++;

								}

							}
							int lastLineTemptFileInputDelimited_10 = totalLinetFileInputDelimited_10
									- footer_tFileInputDelimited_10 < 0 ? 0
									: totalLinetFileInputDelimited_10
											- footer_tFileInputDelimited_10;
							if (lastLinetFileInputDelimited_10 > 0) {
								lastLinetFileInputDelimited_10 = lastLinetFileInputDelimited_10 < lastLineTemptFileInputDelimited_10 ? lastLinetFileInputDelimited_10
										: lastLineTemptFileInputDelimited_10;
							} else {
								lastLinetFileInputDelimited_10 = lastLineTemptFileInputDelimited_10;
							}

							csvReadertFileInputDelimited_10.close();
							if (filename_tFileInputDelimited_10 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_10 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_10,
										fieldSeparator_tFileInputDelimited_10[0],
										context.coding);
							} else {
								csvReadertFileInputDelimited_10 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_10)),
														context.coding)),
										fieldSeparator_tFileInputDelimited_10[0]);
							}
							csvReadertFileInputDelimited_10
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_10[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_10[0] != '\r'))
								csvReadertFileInputDelimited_10
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_10[0]);

							csvReadertFileInputDelimited_10.setQuoteChar('"');

							csvReadertFileInputDelimited_10
									.setEscapeChar(csvReadertFileInputDelimited_10
											.getQuoteChar());

						}

						if (limittFileInputDelimited_10 != 0) {
							for (currentLinetFileInputDelimited_10 = 0; currentLinetFileInputDelimited_10 < 1; currentLinetFileInputDelimited_10++) {
								csvReadertFileInputDelimited_10.readNext();
							}
						}
						csvReadertFileInputDelimited_10
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_10 != 0
							&& csvReadertFileInputDelimited_10 != null
							&& csvReadertFileInputDelimited_10.readNext()) {

						rowtFileInputDelimited_10 = csvReadertFileInputDelimited_10
								.getValues();

						if (rowtFileInputDelimited_10.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_10[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_10++;

						if (lastLinetFileInputDelimited_10 > -1
								&& currentLinetFileInputDelimited_10 > lastLinetFileInputDelimited_10) {
							break;
						}
						outputLinetFileInputDelimited_10++;
						if (limittFileInputDelimited_10 > 0
								&& outputLinetFileInputDelimited_10 > limittFileInputDelimited_10) {
							break;
						}

						row9 = null;

						boolean whetherReject_tFileInputDelimited_10 = false;
						row9 = new row9Struct();
						try {

							if (rowtFileInputDelimited_10.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_10[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row9.C_HLEVEL = null;

								row9.C_FULLNAME = null;

								row9.C_NAME = null;

								row9.C_SYNONYM_CD = null;

								row9.C_VISUALATTRIBUTES = null;

								row9.C_TOTALNUM = null;

								row9.C_BASECODE = null;

								row9.C_METADATAXML = null;

								row9.C_FACTTABLECOLUMN = null;

								row9.C_TABLENAME = null;

								row9.C_COLUMNNAME = null;

								row9.C_COLUMNDATATYPE = null;

								row9.C_OPERATOR = null;

								row9.C_DIMCODE = null;

								row9.C_COMMENT = null;

								row9.C_TOOLTIP = null;

								row9.M_APPLIED_PATH = null;

								row9.UPDATE_DATE = null;

								row9.DOWNLOAD_DATE = null;

								row9.IMPORT_DATE = null;

								row9.SOURCESYSTEM_CD = null;

								row9.VALUETYPE_CD = null;

								row9.M_EXCLUSION_CD = null;

								row9.C_PATH = null;

								row9.C_SYMBOL = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_10 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_10 = 0;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									if (rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10]
											.length() > 0) {

										row9.C_HLEVEL = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10]);

									} else {
										row9.C_HLEVEL = null;
									}

								} else {
									row9.C_HLEVEL = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 1;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_FULLNAME = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_FULLNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 2;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_NAME = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_NAME = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 3;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_SYNONYM_CD = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_SYNONYM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 4;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_VISUALATTRIBUTES = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_VISUALATTRIBUTES = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 5;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									if (rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10]
											.length() > 0) {

										row9.C_TOTALNUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10]);

									} else {
										row9.C_TOTALNUM = null;
									}

								} else {
									row9.C_TOTALNUM = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 6;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_BASECODE = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_BASECODE = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 7;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_METADATAXML = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_METADATAXML = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 8;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_FACTTABLECOLUMN = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_FACTTABLECOLUMN = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 9;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_TABLENAME = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_TABLENAME = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 10;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_COLUMNNAME = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_COLUMNNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 11;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_COLUMNDATATYPE = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_COLUMNDATATYPE = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 12;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_OPERATOR = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_OPERATOR = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 13;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_DIMCODE = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_DIMCODE = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 14;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_COMMENT = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_COMMENT = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 15;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_TOOLTIP = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_TOOLTIP = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 16;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.M_APPLIED_PATH = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.M_APPLIED_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 17;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									if (rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10]
											.length() > 0) {

										row9.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10],
														"dd-MM-yyyy");

									} else {
										row9.UPDATE_DATE = null;
									}

								} else {
									row9.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 18;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									if (rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10]
											.length() > 0) {

										row9.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10],
														"dd-MM-yyyy");

									} else {
										row9.DOWNLOAD_DATE = null;
									}

								} else {
									row9.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 19;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									if (rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10]
											.length() > 0) {

										row9.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10],
														"dd-MM-yyyy");

									} else {
										row9.IMPORT_DATE = null;
									}

								} else {
									row9.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 20;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.SOURCESYSTEM_CD = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 21;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.VALUETYPE_CD = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.VALUETYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 22;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.M_EXCLUSION_CD = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.M_EXCLUSION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 23;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_PATH = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 24;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_SYMBOL = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_SYMBOL = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_10 = true;

							System.err.println(e.getMessage());
							row9 = null;

						}

						/**
						 * [tFileInputDelimited_10 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_10 main ] start
						 */

						currentComponent = "tFileInputDelimited_10";

						tos_count_tFileInputDelimited_10++;

						/**
						 * [tFileInputDelimited_10 main ] stop
						 */
						// Start of branch "row9"
						if (row9 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								outt = null;

								// # Output table : 'outt'
								// # Filter conditions
								if (

								row9.C_NAME.length() > 0

								) {
									outt_tmp.C_HLEVEL = row9.C_HLEVEL;
									outt_tmp.C_FULLNAME = row9.C_FULLNAME;
									outt_tmp.C_NAME = row9.C_NAME;
									outt_tmp.C_SYNONYM_CD = row9.C_SYNONYM_CD;
									outt_tmp.C_VISUALATTRIBUTES = row9.C_VISUALATTRIBUTES;
									outt_tmp.C_TOTALNUM = row9.C_TOTALNUM;
									outt_tmp.C_BASECODE = row9.C_BASECODE;
									outt_tmp.C_METADATAXML = row9.C_METADATAXML;
									outt_tmp.C_FACTTABLECOLUMN = row9.C_FACTTABLECOLUMN;
									outt_tmp.C_TABLENAME = row9.C_TABLENAME;
									outt_tmp.C_COLUMNNAME = row9.C_COLUMNNAME;
									outt_tmp.C_COLUMNDATATYPE = row9.C_COLUMNDATATYPE;
									outt_tmp.C_OPERATOR = row9.C_OPERATOR;
									outt_tmp.C_DIMCODE = row9.C_DIMCODE;
									outt_tmp.C_COMMENT = row9.C_COMMENT;
									outt_tmp.C_TOOLTIP = row9.C_TOOLTIP;
									outt_tmp.M_APPLIED_PATH = row9.M_APPLIED_PATH;
									outt_tmp.UPDATE_DATE = row9.UPDATE_DATE;
									outt_tmp.DOWNLOAD_DATE = row9.DOWNLOAD_DATE;
									outt_tmp.IMPORT_DATE = row9.IMPORT_DATE;
									outt_tmp.SOURCESYSTEM_CD = row9.SOURCESYSTEM_CD;
									outt_tmp.VALUETYPE_CD = row9.VALUETYPE_CD;
									outt_tmp.M_EXCLUSION_CD = row9.M_EXCLUSION_CD;
									outt_tmp.C_PATH = row9.C_PATH;
									outt_tmp.C_SYMBOL = row9.C_SYMBOL;
									outt = outt_tmp;
								} // closing filter/reject
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */
							// Start of branch "outt"
							if (outt != null) {

								/**
								 * [tUniqRow_6 main ] start
								 */

								currentComponent = "tUniqRow_6";

								row24 = null;
								finder_tUniqRow_6.C_HLEVEL = outt.C_HLEVEL;
								if (outt.C_FULLNAME == null) {
									finder_tUniqRow_6.C_FULLNAME = null;
								} else {
									finder_tUniqRow_6.C_FULLNAME = outt.C_FULLNAME
											.toLowerCase();
								}
								finder_tUniqRow_6.hashCodeDirty = true;
								if (!keystUniqRow_6.contains(finder_tUniqRow_6)) {
									KeyStruct_tUniqRow_6 new_tUniqRow_6 = new KeyStruct_tUniqRow_6();

									new_tUniqRow_6.C_HLEVEL = outt.C_HLEVEL;
									if (outt.C_FULLNAME == null) {
										new_tUniqRow_6.C_FULLNAME = null;
									} else {
										new_tUniqRow_6.C_FULLNAME = outt.C_FULLNAME
												.toLowerCase();
									}

									keystUniqRow_6.add(new_tUniqRow_6);
									if (row24 == null) {
										row24 = new row24Struct();
									}
									row24.C_HLEVEL = outt.C_HLEVEL;
									row24.C_FULLNAME = outt.C_FULLNAME;
									row24.C_NAME = outt.C_NAME;
									row24.C_SYNONYM_CD = outt.C_SYNONYM_CD;
									row24.C_VISUALATTRIBUTES = outt.C_VISUALATTRIBUTES;
									row24.C_TOTALNUM = outt.C_TOTALNUM;
									row24.C_BASECODE = outt.C_BASECODE;
									row24.C_METADATAXML = outt.C_METADATAXML;
									row24.C_FACTTABLECOLUMN = outt.C_FACTTABLECOLUMN;
									row24.C_TABLENAME = outt.C_TABLENAME;
									row24.C_COLUMNNAME = outt.C_COLUMNNAME;
									row24.C_COLUMNDATATYPE = outt.C_COLUMNDATATYPE;
									row24.C_OPERATOR = outt.C_OPERATOR;
									row24.C_DIMCODE = outt.C_DIMCODE;
									row24.C_COMMENT = outt.C_COMMENT;
									row24.C_TOOLTIP = outt.C_TOOLTIP;
									row24.M_APPLIED_PATH = outt.M_APPLIED_PATH;
									row24.UPDATE_DATE = outt.UPDATE_DATE;
									row24.DOWNLOAD_DATE = outt.DOWNLOAD_DATE;
									row24.IMPORT_DATE = outt.IMPORT_DATE;
									row24.SOURCESYSTEM_CD = outt.SOURCESYSTEM_CD;
									row24.VALUETYPE_CD = outt.VALUETYPE_CD;
									row24.M_EXCLUSION_CD = outt.M_EXCLUSION_CD;
									row24.C_PATH = outt.C_PATH;
									row24.C_SYMBOL = outt.C_SYMBOL;
									nb_uniques_tUniqRow_6++;
								} else {
									nb_duplicates_tUniqRow_6++;
								}

								tos_count_tUniqRow_6++;

								/**
								 * [tUniqRow_6 main ] stop
								 */
								// Start of branch "row24"
								if (row24 != null) {

									/**
									 * [tOracleOutput_1 main ] start
									 */

									currentComponent = "tOracleOutput_1";

									query_tOracleOutput_1 = new StringBuffer("");
									whetherReject_tOracleOutput_1 = false;
									pstmt_tOracleOutput_1.setBigDecimal(1,
											row24.C_HLEVEL);

									query_tOracleOutput_1 = query_tOracleOutput_1
											.append(insertSQLSplits_tOracleOutput_1[0])
											.append(row24.C_HLEVEL == null ? "null"
													: String.valueOf(row24.C_HLEVEL))
											.append(insertSQLSplits_tOracleOutput_1[1]);
									if (row24.C_FULLNAME == null) {
										pstmt_tOracleOutput_1.setNull(2,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tOracleOutput_1.setString(2,
												row24.C_FULLNAME);
									}

									query_tOracleOutput_1 = query_tOracleOutput_1
											.append(row24.C_FULLNAME == null ? "null"
													: "'" + row24.C_FULLNAME
															+ "'")
											.append(insertSQLSplits_tOracleOutput_1[2]);
									if (row24.C_NAME == null) {
										pstmt_tOracleOutput_1.setNull(3,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tOracleOutput_1.setString(3,
												row24.C_NAME);
									}

									query_tOracleOutput_1 = query_tOracleOutput_1
											.append(row24.C_NAME == null ? "null"
													: "'" + row24.C_NAME + "'")
											.append(insertSQLSplits_tOracleOutput_1[3]);
									if (row24.C_SYNONYM_CD == null) {
										pstmt_tOracleOutput_1.setNull(4,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tOracleOutput_1.setString(4,
												row24.C_SYNONYM_CD);
									}

									query_tOracleOutput_1 = query_tOracleOutput_1
											.append(row24.C_SYNONYM_CD == null ? "null"
													: "'" + row24.C_SYNONYM_CD
															+ "'")
											.append(insertSQLSplits_tOracleOutput_1[4]);
									if (row24.C_VISUALATTRIBUTES == null) {
										pstmt_tOracleOutput_1.setNull(5,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tOracleOutput_1.setString(5,
												row24.C_VISUALATTRIBUTES);
									}

									query_tOracleOutput_1 = query_tOracleOutput_1
											.append(row24.C_VISUALATTRIBUTES == null ? "null"
													: "'"
															+ row24.C_VISUALATTRIBUTES
															+ "'")
											.append(insertSQLSplits_tOracleOutput_1[5]);
									pstmt_tOracleOutput_1.setBigDecimal(6,
											row24.C_TOTALNUM);

									query_tOracleOutput_1 = query_tOracleOutput_1
											.append(row24.C_TOTALNUM == null ? "null"
													: String.valueOf(row24.C_TOTALNUM))
											.append(insertSQLSplits_tOracleOutput_1[6]);
									if (row24.C_BASECODE == null) {
										pstmt_tOracleOutput_1.setNull(7,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tOracleOutput_1.setString(7,
												row24.C_BASECODE);
									}

									query_tOracleOutput_1 = query_tOracleOutput_1
											.append(row24.C_BASECODE == null ? "null"
													: "'" + row24.C_BASECODE
															+ "'")
											.append(insertSQLSplits_tOracleOutput_1[7]);
									if (row24.C_METADATAXML == null) {
										pstmt_tOracleOutput_1.setNull(8,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tOracleOutput_1.setString(8,
												row24.C_METADATAXML);
									}

									query_tOracleOutput_1 = query_tOracleOutput_1
											.append(row24.C_METADATAXML == null ? "null"
													: "'" + row24.C_METADATAXML
															+ "'")
											.append(insertSQLSplits_tOracleOutput_1[8]);
									if (row24.C_FACTTABLECOLUMN == null) {
										pstmt_tOracleOutput_1.setNull(9,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tOracleOutput_1.setString(9,
												row24.C_FACTTABLECOLUMN);
									}

									query_tOracleOutput_1 = query_tOracleOutput_1
											.append(row24.C_FACTTABLECOLUMN == null ? "null"
													: "'"
															+ row24.C_FACTTABLECOLUMN
															+ "'")
											.append(insertSQLSplits_tOracleOutput_1[9]);
									if (row24.C_TABLENAME == null) {
										pstmt_tOracleOutput_1.setNull(10,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tOracleOutput_1.setString(10,
												row24.C_TABLENAME);
									}

									query_tOracleOutput_1 = query_tOracleOutput_1
											.append(row24.C_TABLENAME == null ? "null"
													: "'" + row24.C_TABLENAME
															+ "'")
											.append(insertSQLSplits_tOracleOutput_1[10]);
									if (row24.C_COLUMNNAME == null) {
										pstmt_tOracleOutput_1.setNull(11,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tOracleOutput_1.setString(11,
												row24.C_COLUMNNAME);
									}

									query_tOracleOutput_1 = query_tOracleOutput_1
											.append(row24.C_COLUMNNAME == null ? "null"
													: "'" + row24.C_COLUMNNAME
															+ "'")
											.append(insertSQLSplits_tOracleOutput_1[11]);
									if (row24.C_COLUMNDATATYPE == null) {
										pstmt_tOracleOutput_1.setNull(12,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tOracleOutput_1.setString(12,
												row24.C_COLUMNDATATYPE);
									}

									query_tOracleOutput_1 = query_tOracleOutput_1
											.append(row24.C_COLUMNDATATYPE == null ? "null"
													: "'"
															+ row24.C_COLUMNDATATYPE
															+ "'")
											.append(insertSQLSplits_tOracleOutput_1[12]);
									if (row24.C_OPERATOR == null) {
										pstmt_tOracleOutput_1.setNull(13,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tOracleOutput_1.setString(13,
												row24.C_OPERATOR);
									}

									query_tOracleOutput_1 = query_tOracleOutput_1
											.append(row24.C_OPERATOR == null ? "null"
													: "'" + row24.C_OPERATOR
															+ "'")
											.append(insertSQLSplits_tOracleOutput_1[13]);
									if (row24.C_DIMCODE == null) {
										pstmt_tOracleOutput_1.setNull(14,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tOracleOutput_1.setString(14,
												row24.C_DIMCODE);
									}

									query_tOracleOutput_1 = query_tOracleOutput_1
											.append(row24.C_DIMCODE == null ? "null"
													: "'" + row24.C_DIMCODE
															+ "'")
											.append(insertSQLSplits_tOracleOutput_1[14]);
									if (row24.C_COMMENT == null) {
										pstmt_tOracleOutput_1.setNull(15,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tOracleOutput_1.setString(15,
												row24.C_COMMENT);
									}

									query_tOracleOutput_1 = query_tOracleOutput_1
											.append(row24.C_COMMENT == null ? "null"
													: "'" + row24.C_COMMENT
															+ "'")
											.append(insertSQLSplits_tOracleOutput_1[15]);
									if (row24.C_TOOLTIP == null) {
										pstmt_tOracleOutput_1.setNull(16,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tOracleOutput_1.setString(16,
												row24.C_TOOLTIP);
									}

									query_tOracleOutput_1 = query_tOracleOutput_1
											.append(row24.C_TOOLTIP == null ? "null"
													: "'" + row24.C_TOOLTIP
															+ "'")
											.append(insertSQLSplits_tOracleOutput_1[16]);
									if (row24.M_APPLIED_PATH == null) {
										pstmt_tOracleOutput_1.setNull(17,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tOracleOutput_1.setString(17,
												row24.M_APPLIED_PATH);
									}

									query_tOracleOutput_1 = query_tOracleOutput_1
											.append(row24.M_APPLIED_PATH == null ? "null"
													: "'"
															+ row24.M_APPLIED_PATH
															+ "'")
											.append(insertSQLSplits_tOracleOutput_1[17]);
									if (row24.UPDATE_DATE != null) {
										pstmt_tOracleOutput_1.setObject(
												18,
												new java.sql.Timestamp(
														row24.UPDATE_DATE
																.getTime()),
												java.sql.Types.DATE);
									} else {
										pstmt_tOracleOutput_1.setNull(18,
												java.sql.Types.DATE);
									}

									query_tOracleOutput_1 = query_tOracleOutput_1
											.append(row24.UPDATE_DATE == null ? "null"
													: "'"
															+ new java.text.SimpleDateFormat(
																	"dd-MM-yyyy")
																	.format(row24.UPDATE_DATE)
															+ "'")
											.append(insertSQLSplits_tOracleOutput_1[18]);
									if (row24.DOWNLOAD_DATE != null) {
										pstmt_tOracleOutput_1.setObject(
												19,
												new java.sql.Timestamp(
														row24.DOWNLOAD_DATE
																.getTime()),
												java.sql.Types.DATE);
									} else {
										pstmt_tOracleOutput_1.setNull(19,
												java.sql.Types.DATE);
									}

									query_tOracleOutput_1 = query_tOracleOutput_1
											.append(row24.DOWNLOAD_DATE == null ? "null"
													: "'"
															+ new java.text.SimpleDateFormat(
																	"dd-MM-yyyy")
																	.format(row24.DOWNLOAD_DATE)
															+ "'")
											.append(insertSQLSplits_tOracleOutput_1[19]);
									if (row24.IMPORT_DATE != null) {
										pstmt_tOracleOutput_1.setObject(
												20,
												new java.sql.Timestamp(
														row24.IMPORT_DATE
																.getTime()),
												java.sql.Types.DATE);
									} else {
										pstmt_tOracleOutput_1.setNull(20,
												java.sql.Types.DATE);
									}

									query_tOracleOutput_1 = query_tOracleOutput_1
											.append(row24.IMPORT_DATE == null ? "null"
													: "'"
															+ new java.text.SimpleDateFormat(
																	"dd-MM-yyyy")
																	.format(row24.IMPORT_DATE)
															+ "'")
											.append(insertSQLSplits_tOracleOutput_1[20]);
									if (row24.SOURCESYSTEM_CD == null) {
										pstmt_tOracleOutput_1.setNull(21,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tOracleOutput_1.setString(21,
												row24.SOURCESYSTEM_CD);
									}

									query_tOracleOutput_1 = query_tOracleOutput_1
											.append(row24.SOURCESYSTEM_CD == null ? "null"
													: "'"
															+ row24.SOURCESYSTEM_CD
															+ "'")
											.append(insertSQLSplits_tOracleOutput_1[21]);
									if (row24.VALUETYPE_CD == null) {
										pstmt_tOracleOutput_1.setNull(22,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tOracleOutput_1.setString(22,
												row24.VALUETYPE_CD);
									}

									query_tOracleOutput_1 = query_tOracleOutput_1
											.append(row24.VALUETYPE_CD == null ? "null"
													: "'" + row24.VALUETYPE_CD
															+ "'")
											.append(insertSQLSplits_tOracleOutput_1[22]);
									if (row24.M_EXCLUSION_CD == null) {
										pstmt_tOracleOutput_1.setNull(23,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tOracleOutput_1.setString(23,
												row24.M_EXCLUSION_CD);
									}

									query_tOracleOutput_1 = query_tOracleOutput_1
											.append(row24.M_EXCLUSION_CD == null ? "null"
													: "'"
															+ row24.M_EXCLUSION_CD
															+ "'")
											.append(insertSQLSplits_tOracleOutput_1[23]);
									if (row24.C_PATH == null) {
										pstmt_tOracleOutput_1.setNull(24,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tOracleOutput_1.setString(24,
												row24.C_PATH);
									}

									query_tOracleOutput_1 = query_tOracleOutput_1
											.append(row24.C_PATH == null ? "null"
													: "'" + row24.C_PATH + "'")
											.append(insertSQLSplits_tOracleOutput_1[24]);
									if (row24.C_SYMBOL == null) {
										pstmt_tOracleOutput_1.setNull(25,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tOracleOutput_1.setString(25,
												row24.C_SYMBOL);
									}

									query_tOracleOutput_1 = query_tOracleOutput_1
											.append(row24.C_SYMBOL == null ? "null"
													: "'" + row24.C_SYMBOL
															+ "'")
											.append(insertSQLSplits_tOracleOutput_1[25]);
									globalMap.put("tOracleOutput_1_QUERY",
											query_tOracleOutput_1.toString()
													.trim());

									pstmt_tOracleOutput_1.addBatch();
									nb_line_tOracleOutput_1++;

									if (!whetherReject_tOracleOutput_1) {
									}
									commitCounter_tOracleOutput_1++;
									if (commitEvery_tOracleOutput_1 <= commitCounter_tOracleOutput_1) {

										try {
											pstmt_tOracleOutput_1
													.executeBatch();
										} catch (java.sql.BatchUpdateException e_tOracleOutput_1) {

											throw (e_tOracleOutput_1);

										}
										tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1
												.getUpdateCount();

										insertedCount_tOracleOutput_1

										+= (tmp_batchUpdateCount_tOracleOutput_1 != -1 ? tmp_batchUpdateCount_tOracleOutput_1
												: 0);

										conn_tOracleOutput_1.commit();
										commitCounter_tOracleOutput_1 = 0;
									}

									tos_count_tOracleOutput_1++;

									/**
									 * [tOracleOutput_1 main ] stop
									 */

								} // End of branch "row24"

							} // End of branch "outt"

						} // End of branch "row9"

						/**
						 * [tFileInputDelimited_10 end ] start
						 */

						currentComponent = "tFileInputDelimited_10";

						nb_line_tFileInputDelimited_10++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_10 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_10 != null) {
							csvReadertFileInputDelimited_10.close();
						}
					}
					if (csvReadertFileInputDelimited_10 != null) {
						globalMap.put("tFileInputDelimited_10_NB_LINE",
								nb_line_tFileInputDelimited_10);
					}
				}

				ok_Hash.put("tFileInputDelimited_10", true);
				end_Hash.put("tFileInputDelimited_10",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_10 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tUniqRow_6 end ] start
				 */

				currentComponent = "tUniqRow_6";

				globalMap.put("tUniqRow_6_NB_UNIQUES", nb_uniques_tUniqRow_6);
				globalMap.put("tUniqRow_6_NB_DUPLICATES",
						nb_duplicates_tUniqRow_6);

				ok_Hash.put("tUniqRow_6", true);
				end_Hash.put("tUniqRow_6", System.currentTimeMillis());

				/**
				 * [tUniqRow_6 end ] stop
				 */

				/**
				 * [tOracleOutput_1 end ] start
				 */

				currentComponent = "tOracleOutput_1";

				try {
					if (pstmt_tOracleOutput_1 != null) {
						pstmt_tOracleOutput_1.executeBatch();
					}
				} catch (java.sql.BatchUpdateException e_tOracleOutput_1) {

					throw (e_tOracleOutput_1);

				}
				if (pstmt_tOracleOutput_1 != null) {
					tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1
							.getUpdateCount();

					insertedCount_tOracleOutput_1

					+= (tmp_batchUpdateCount_tOracleOutput_1 != -1 ? tmp_batchUpdateCount_tOracleOutput_1
							: 0);
				}
				if (pstmt_tOracleOutput_1 != null) {

					pstmt_tOracleOutput_1.close();

				}

				conn_tOracleOutput_1.commit();

				conn_tOracleOutput_1.close();

				nb_line_deleted_tOracleOutput_1 = nb_line_deleted_tOracleOutput_1
						+ deletedCount_tOracleOutput_1;
				nb_line_update_tOracleOutput_1 = nb_line_update_tOracleOutput_1
						+ updatedCount_tOracleOutput_1;
				nb_line_inserted_tOracleOutput_1 = nb_line_inserted_tOracleOutput_1
						+ insertedCount_tOracleOutput_1;
				nb_line_rejected_tOracleOutput_1 = nb_line_rejected_tOracleOutput_1
						+ rejectedCount_tOracleOutput_1;

				globalMap.put("tOracleOutput_1_NB_LINE",
						nb_line_tOracleOutput_1);
				globalMap.put("tOracleOutput_1_NB_LINE_UPDATED",
						nb_line_update_tOracleOutput_1);
				globalMap.put("tOracleOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tOracleOutput_1);
				globalMap.put("tOracleOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tOracleOutput_1);
				globalMap.put("tOracleOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tOracleOutput_1);

				ok_Hash.put("tOracleOutput_1", true);
				end_Hash.put("tOracleOutput_1", System.currentTimeMillis());

				tOracleCommit_1Process(globalMap);

				/**
				 * [tOracleOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_10_SUBPROCESS_STATE", 1);
	}

	public void tJava_12Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_12 begin ] start
				 */

				ok_Hash.put("tJava_12", false);
				start_Hash.put("tJava_12", System.currentTimeMillis());
				currentComponent = "tJava_12";

				int tos_count_tJava_12 = 0;

				System.out.println("Encounter Mapping: ");

				StatusListener.setSubStatus(30.0f, (int) (float) (30.0f) + "%");

				/**
				 * [tJava_12 begin ] stop
				 */
				/**
				 * [tJava_12 main ] start
				 */

				currentComponent = "tJava_12";

				tos_count_tJava_12++;

				/**
				 * [tJava_12 main ] stop
				 */
				/**
				 * [tJava_12 end ] start
				 */

				currentComponent = "tJava_12";

				ok_Hash.put("tJava_12", true);
				end_Hash.put("tJava_12", System.currentTimeMillis());

				/**
				 * [tJava_12 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_12:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_12Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_12_SUBPROCESS_STATE", 1);
	}

	public static class row21Struct implements
			routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_JDBC_Upload = new byte[0];

		public String ENCOUNTER_IDE;

		public String getENCOUNTER_IDE() {
			return this.ENCOUNTER_IDE;
		}

		public String ENCOUNTER_IDE_SOURCE;

		public String getENCOUNTER_IDE_SOURCE() {
			return this.ENCOUNTER_IDE_SOURCE;
		}

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public String ENCOUNTER_IDE_STATUS;

		public String getENCOUNTER_IDE_STATUS() {
			return this.ENCOUNTER_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_JDBC_Upload, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_IDE = readString(dis);

					this.ENCOUNTER_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ENCOUNTER_IDE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_IDE=" + ENCOUNTER_IDE);
			sb.append(",ENCOUNTER_IDE_SOURCE=" + ENCOUNTER_IDE_SOURCE);
			sb.append(",ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",ENCOUNTER_IDE_STATUS=" + ENCOUNTER_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_JDBC_Upload = new byte[0];

		public String ENCOUNTER_IDE;

		public String getENCOUNTER_IDE() {
			return this.ENCOUNTER_IDE;
		}

		public String ENCOUNTER_IDE_SOURCE;

		public String getENCOUNTER_IDE_SOURCE() {
			return this.ENCOUNTER_IDE_SOURCE;
		}

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public String ENCOUNTER_IDE_STATUS;

		public String getENCOUNTER_IDE_STATUS() {
			return this.ENCOUNTER_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_JDBC_Upload, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_IDE = readString(dis);

					this.ENCOUNTER_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ENCOUNTER_IDE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_IDE=" + ENCOUNTER_IDE);
			sb.append(",ENCOUNTER_IDE_SOURCE=" + ENCOUNTER_IDE_SOURCE);
			sb.append(",ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",ENCOUNTER_IDE_STATUS=" + ENCOUNTER_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_12Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row13Struct row13 = new row13Struct();
				row21Struct row21 = new row21Struct();

				/**
				 * [tOracleOutput_8 begin ] start
				 */

				ok_Hash.put("tOracleOutput_8", false);
				start_Hash.put("tOracleOutput_8", System.currentTimeMillis());
				currentComponent = "tOracleOutput_8";

				int tos_count_tOracleOutput_8 = 0;

				int nb_line_tOracleOutput_8 = 0;
				int nb_line_update_tOracleOutput_8 = 0;
				int nb_line_inserted_tOracleOutput_8 = 0;
				int nb_line_deleted_tOracleOutput_8 = 0;
				int nb_line_rejected_tOracleOutput_8 = 0;

				int tmp_batchUpdateCount_tOracleOutput_8 = 0;

				int deletedCount_tOracleOutput_8 = 0;
				int updatedCount_tOracleOutput_8 = 0;
				int insertedCount_tOracleOutput_8 = 0;
				int rejectedCount_tOracleOutput_8 = 0;

				boolean whetherReject_tOracleOutput_8 = false;

				java.sql.Connection conn_tOracleOutput_8 = null;

				// optional table
				String dbschema_tOracleOutput_8 = null;
				String tableName_tOracleOutput_8 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleOutput_8 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tOracleOutput_8) {
					conn_tOracleOutput_8 = dataSources_tOracleOutput_8.get("")
							.getConnection();
				} else {

					java.lang.Class.forName("oracle.jdbc.OracleDriver");

					String url_tOracleOutput_8 = null;
					url_tOracleOutput_8 = "jdbc:oracle:thin:@" + context.DBHost
							+ ":" + context.DBPort + ":" + context.DBInstance;
					String dbUser_tOracleOutput_8 = context.DBUsername;
					String dbPwd_tOracleOutput_8 = context.DBPassword;
					dbschema_tOracleOutput_8 = context.DBSchema;

					conn_tOracleOutput_8 = java.sql.DriverManager
							.getConnection(url_tOracleOutput_8,
									dbUser_tOracleOutput_8,
									dbPwd_tOracleOutput_8);
				}
				conn_tOracleOutput_8.setAutoCommit(false);
				int commitEvery_tOracleOutput_8 = 50000;
				int commitCounter_tOracleOutput_8 = 0;

				int count_tOracleOutput_8 = 0;

				if (dbschema_tOracleOutput_8 == null
						|| dbschema_tOracleOutput_8.trim().length() == 0) {
					tableName_tOracleOutput_8 = "encounter_mapping";
				} else {
					tableName_tOracleOutput_8 = dbschema_tOracleOutput_8 + "."
							+ "encounter_mapping";
				}
				String insert_tOracleOutput_8 = "INSERT INTO "
						+ tableName_tOracleOutput_8
						+ " (ENCOUNTER_IDE,ENCOUNTER_IDE_SOURCE,ENCOUNTER_NUM,PATIENT_IDE,PATIENT_IDE_SOURCE,ENCOUNTER_IDE_STATUS,UPLOAD_DATE,UPDATE_DATE,DOWNLOAD_DATE,IMPORT_DATE,SOURCESYSTEM_CD,UPLOAD_ID) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tOracleOutput_8 = conn_tOracleOutput_8
						.prepareStatement(insert_tOracleOutput_8);

				StringBuffer query_tOracleOutput_8 = null;

				String[] insertSQLSplits_tOracleOutput_8 = insert_tOracleOutput_8
						.split("\\?");

				/**
				 * [tOracleOutput_8 begin ] stop
				 */

				/**
				 * [tUniqRow_4 begin ] start
				 */

				ok_Hash.put("tUniqRow_4", false);
				start_Hash.put("tUniqRow_4", System.currentTimeMillis());
				currentComponent = "tUniqRow_4";

				int tos_count_tUniqRow_4 = 0;

				class KeyStruct_tUniqRow_4 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String ENCOUNTER_IDE;
					String ENCOUNTER_IDE_SOURCE;
					BigDecimal ENCOUNTER_NUM;
					String PATIENT_IDE;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.ENCOUNTER_IDE == null) ? 0
											: this.ENCOUNTER_IDE.hashCode());

							result = prime
									* result
									+ ((this.ENCOUNTER_IDE_SOURCE == null) ? 0
											: this.ENCOUNTER_IDE_SOURCE
													.hashCode());

							result = prime
									* result
									+ ((this.ENCOUNTER_NUM == null) ? 0
											: this.ENCOUNTER_NUM.hashCode());

							result = prime
									* result
									+ ((this.PATIENT_IDE == null) ? 0
											: this.PATIENT_IDE.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_4 other = (KeyStruct_tUniqRow_4) obj;

						if (this.ENCOUNTER_IDE == null) {
							if (other.ENCOUNTER_IDE != null)
								return false;
						} else if (!this.ENCOUNTER_IDE
								.equals(other.ENCOUNTER_IDE))
							return false;

						if (this.ENCOUNTER_IDE_SOURCE == null) {
							if (other.ENCOUNTER_IDE_SOURCE != null)
								return false;
						} else if (!this.ENCOUNTER_IDE_SOURCE
								.equals(other.ENCOUNTER_IDE_SOURCE))
							return false;

						if (this.ENCOUNTER_NUM == null) {
							if (other.ENCOUNTER_NUM != null)
								return false;
						} else if (!this.ENCOUNTER_NUM
								.equals(other.ENCOUNTER_NUM))
							return false;

						if (this.PATIENT_IDE == null) {
							if (other.PATIENT_IDE != null)
								return false;
						} else if (!this.PATIENT_IDE.equals(other.PATIENT_IDE))
							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_4 = 0;
				int nb_duplicates_tUniqRow_4 = 0;
				KeyStruct_tUniqRow_4 finder_tUniqRow_4 = new KeyStruct_tUniqRow_4();
				java.util.Set<KeyStruct_tUniqRow_4> keystUniqRow_4 = new java.util.HashSet<KeyStruct_tUniqRow_4>();

				/**
				 * [tUniqRow_4 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_12 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_12", false);
				start_Hash.put("tFileInputDelimited_12",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_12";

				int tos_count_tFileInputDelimited_12 = 0;

				int nb_line_tFileInputDelimited_12 = 0;
				int footer_tFileInputDelimited_12 = 0;
				int totalLinetFileInputDelimited_12 = 0;
				int limittFileInputDelimited_12 = -1;
				int lastLinetFileInputDelimited_12 = -1;

				char fieldSeparator_tFileInputDelimited_12[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_12 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_12[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_12 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_12 = /**
				 * Start field
				 * tFileInputDelimited_12:FILENAME
				 */
				context.folderMain + context.folderOutput
						+ "encounter_mapping.csv"/**
				 * End field
				 * tFileInputDelimited_12:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_12 = null;

				try {

					String[] rowtFileInputDelimited_12 = null;
					int currentLinetFileInputDelimited_12 = 0;
					int outputLinetFileInputDelimited_12 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_12 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_12 = 0;
							if (footer_value_tFileInputDelimited_12 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_12 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_12,
									fieldSeparator_tFileInputDelimited_12[0],
									context.coding);
						} else {
							csvReadertFileInputDelimited_12 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_12)),
													context.coding)),
									fieldSeparator_tFileInputDelimited_12[0]);
						}

						csvReadertFileInputDelimited_12
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_12[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_12[0] != '\r'))
							csvReadertFileInputDelimited_12.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_12[0]);

						csvReadertFileInputDelimited_12.setQuoteChar('"');

						csvReadertFileInputDelimited_12
								.setEscapeChar(csvReadertFileInputDelimited_12
										.getQuoteChar());

						if (footer_tFileInputDelimited_12 > 0) {
							for (totalLinetFileInputDelimited_12 = 0; totalLinetFileInputDelimited_12 < 1; totalLinetFileInputDelimited_12++) {
								csvReadertFileInputDelimited_12.readNext();
							}
							csvReadertFileInputDelimited_12
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_12.readNext()) {

								rowtFileInputDelimited_12 = csvReadertFileInputDelimited_12
										.getValues();
								if (!(rowtFileInputDelimited_12.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_12[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_12++;

								}

							}
							int lastLineTemptFileInputDelimited_12 = totalLinetFileInputDelimited_12
									- footer_tFileInputDelimited_12 < 0 ? 0
									: totalLinetFileInputDelimited_12
											- footer_tFileInputDelimited_12;
							if (lastLinetFileInputDelimited_12 > 0) {
								lastLinetFileInputDelimited_12 = lastLinetFileInputDelimited_12 < lastLineTemptFileInputDelimited_12 ? lastLinetFileInputDelimited_12
										: lastLineTemptFileInputDelimited_12;
							} else {
								lastLinetFileInputDelimited_12 = lastLineTemptFileInputDelimited_12;
							}

							csvReadertFileInputDelimited_12.close();
							if (filename_tFileInputDelimited_12 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_12 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_12,
										fieldSeparator_tFileInputDelimited_12[0],
										context.coding);
							} else {
								csvReadertFileInputDelimited_12 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_12)),
														context.coding)),
										fieldSeparator_tFileInputDelimited_12[0]);
							}
							csvReadertFileInputDelimited_12
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_12[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_12[0] != '\r'))
								csvReadertFileInputDelimited_12
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_12[0]);

							csvReadertFileInputDelimited_12.setQuoteChar('"');

							csvReadertFileInputDelimited_12
									.setEscapeChar(csvReadertFileInputDelimited_12
											.getQuoteChar());

						}

						if (limittFileInputDelimited_12 != 0) {
							for (currentLinetFileInputDelimited_12 = 0; currentLinetFileInputDelimited_12 < 1; currentLinetFileInputDelimited_12++) {
								csvReadertFileInputDelimited_12.readNext();
							}
						}
						csvReadertFileInputDelimited_12
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_12 != 0
							&& csvReadertFileInputDelimited_12 != null
							&& csvReadertFileInputDelimited_12.readNext()) {

						rowtFileInputDelimited_12 = csvReadertFileInputDelimited_12
								.getValues();

						if (rowtFileInputDelimited_12.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_12[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_12++;

						if (lastLinetFileInputDelimited_12 > -1
								&& currentLinetFileInputDelimited_12 > lastLinetFileInputDelimited_12) {
							break;
						}
						outputLinetFileInputDelimited_12++;
						if (limittFileInputDelimited_12 > 0
								&& outputLinetFileInputDelimited_12 > limittFileInputDelimited_12) {
							break;
						}

						row13 = null;

						boolean whetherReject_tFileInputDelimited_12 = false;
						row13 = new row13Struct();
						try {

							if (rowtFileInputDelimited_12.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_12[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row13.ENCOUNTER_IDE = null;

								row13.ENCOUNTER_IDE_SOURCE = null;

								row13.ENCOUNTER_NUM = null;

								row13.PATIENT_IDE = null;

								row13.PATIENT_IDE_SOURCE = null;

								row13.ENCOUNTER_IDE_STATUS = null;

								row13.UPLOAD_DATE = null;

								row13.UPDATE_DATE = null;

								row13.DOWNLOAD_DATE = null;

								row13.IMPORT_DATE = null;

								row13.SOURCESYSTEM_CD = null;

								row13.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_12 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_12 = 0;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row13.ENCOUNTER_IDE = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row13.ENCOUNTER_IDE = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 1;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row13.ENCOUNTER_IDE_SOURCE = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row13.ENCOUNTER_IDE_SOURCE = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 2;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									if (rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]
											.length() > 0) {

										row13.ENCOUNTER_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]);

									} else {
										row13.ENCOUNTER_NUM = null;
									}

								} else {
									row13.ENCOUNTER_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 3;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row13.PATIENT_IDE = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row13.PATIENT_IDE = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 4;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row13.PATIENT_IDE_SOURCE = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row13.PATIENT_IDE_SOURCE = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 5;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row13.ENCOUNTER_IDE_STATUS = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row13.ENCOUNTER_IDE_STATUS = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 6;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									if (rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]
											.length() > 0) {

										row13.UPLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12],
														"dd-MM-yyyy");

									} else {
										row13.UPLOAD_DATE = null;
									}

								} else {
									row13.UPLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 7;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									if (rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]
											.length() > 0) {

										row13.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12],
														"dd-MM-yyyy");

									} else {
										row13.UPDATE_DATE = null;
									}

								} else {
									row13.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 8;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									if (rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]
											.length() > 0) {

										row13.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12],
														"dd-MM-yyyy");

									} else {
										row13.DOWNLOAD_DATE = null;
									}

								} else {
									row13.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 9;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									if (rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]
											.length() > 0) {

										row13.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12],
														"dd-MM-yyyy");

									} else {
										row13.IMPORT_DATE = null;
									}

								} else {
									row13.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 10;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row13.SOURCESYSTEM_CD = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row13.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 11;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row13.UPLOAD_ID = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row13.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_12 = true;

							System.err.println(e.getMessage());
							row13 = null;

						}

						/**
						 * [tFileInputDelimited_12 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_12 main ] start
						 */

						currentComponent = "tFileInputDelimited_12";

						tos_count_tFileInputDelimited_12++;

						/**
						 * [tFileInputDelimited_12 main ] stop
						 */
						// Start of branch "row13"
						if (row13 != null) {

							/**
							 * [tUniqRow_4 main ] start
							 */

							currentComponent = "tUniqRow_4";

							row21 = null;
							if (row13.ENCOUNTER_IDE == null) {
								finder_tUniqRow_4.ENCOUNTER_IDE = null;
							} else {
								finder_tUniqRow_4.ENCOUNTER_IDE = row13.ENCOUNTER_IDE
										.toLowerCase();
							}
							if (row13.ENCOUNTER_IDE_SOURCE == null) {
								finder_tUniqRow_4.ENCOUNTER_IDE_SOURCE = null;
							} else {
								finder_tUniqRow_4.ENCOUNTER_IDE_SOURCE = row13.ENCOUNTER_IDE_SOURCE
										.toLowerCase();
							}
							finder_tUniqRow_4.ENCOUNTER_NUM = row13.ENCOUNTER_NUM;
							if (row13.PATIENT_IDE == null) {
								finder_tUniqRow_4.PATIENT_IDE = null;
							} else {
								finder_tUniqRow_4.PATIENT_IDE = row13.PATIENT_IDE
										.toLowerCase();
							}
							finder_tUniqRow_4.hashCodeDirty = true;
							if (!keystUniqRow_4.contains(finder_tUniqRow_4)) {
								KeyStruct_tUniqRow_4 new_tUniqRow_4 = new KeyStruct_tUniqRow_4();

								if (row13.ENCOUNTER_IDE == null) {
									new_tUniqRow_4.ENCOUNTER_IDE = null;
								} else {
									new_tUniqRow_4.ENCOUNTER_IDE = row13.ENCOUNTER_IDE
											.toLowerCase();
								}
								if (row13.ENCOUNTER_IDE_SOURCE == null) {
									new_tUniqRow_4.ENCOUNTER_IDE_SOURCE = null;
								} else {
									new_tUniqRow_4.ENCOUNTER_IDE_SOURCE = row13.ENCOUNTER_IDE_SOURCE
											.toLowerCase();
								}
								new_tUniqRow_4.ENCOUNTER_NUM = row13.ENCOUNTER_NUM;
								if (row13.PATIENT_IDE == null) {
									new_tUniqRow_4.PATIENT_IDE = null;
								} else {
									new_tUniqRow_4.PATIENT_IDE = row13.PATIENT_IDE
											.toLowerCase();
								}

								keystUniqRow_4.add(new_tUniqRow_4);
								if (row21 == null) {
									row21 = new row21Struct();
								}
								row21.ENCOUNTER_IDE = row13.ENCOUNTER_IDE;
								row21.ENCOUNTER_IDE_SOURCE = row13.ENCOUNTER_IDE_SOURCE;
								row21.ENCOUNTER_NUM = row13.ENCOUNTER_NUM;
								row21.PATIENT_IDE = row13.PATIENT_IDE;
								row21.PATIENT_IDE_SOURCE = row13.PATIENT_IDE_SOURCE;
								row21.ENCOUNTER_IDE_STATUS = row13.ENCOUNTER_IDE_STATUS;
								row21.UPLOAD_DATE = row13.UPLOAD_DATE;
								row21.UPDATE_DATE = row13.UPDATE_DATE;
								row21.DOWNLOAD_DATE = row13.DOWNLOAD_DATE;
								row21.IMPORT_DATE = row13.IMPORT_DATE;
								row21.SOURCESYSTEM_CD = row13.SOURCESYSTEM_CD;
								row21.UPLOAD_ID = row13.UPLOAD_ID;
								nb_uniques_tUniqRow_4++;
							} else {
								nb_duplicates_tUniqRow_4++;
							}

							tos_count_tUniqRow_4++;

							/**
							 * [tUniqRow_4 main ] stop
							 */
							// Start of branch "row21"
							if (row21 != null) {

								/**
								 * [tOracleOutput_8 main ] start
								 */

								currentComponent = "tOracleOutput_8";

								query_tOracleOutput_8 = new StringBuffer("");
								whetherReject_tOracleOutput_8 = false;
								if (row21.ENCOUNTER_IDE == null) {
									pstmt_tOracleOutput_8.setNull(1,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_8.setString(1,
											row21.ENCOUNTER_IDE);
								}

								query_tOracleOutput_8 = query_tOracleOutput_8
										.append(insertSQLSplits_tOracleOutput_8[0])
										.append(row21.ENCOUNTER_IDE == null ? "null"
												: "'" + row21.ENCOUNTER_IDE
														+ "'")
										.append(insertSQLSplits_tOracleOutput_8[1]);
								if (row21.ENCOUNTER_IDE_SOURCE == null) {
									pstmt_tOracleOutput_8.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_8.setString(2,
											row21.ENCOUNTER_IDE_SOURCE);
								}

								query_tOracleOutput_8 = query_tOracleOutput_8
										.append(row21.ENCOUNTER_IDE_SOURCE == null ? "null"
												: "'"
														+ row21.ENCOUNTER_IDE_SOURCE
														+ "'")
										.append(insertSQLSplits_tOracleOutput_8[2]);
								pstmt_tOracleOutput_8.setBigDecimal(3,
										row21.ENCOUNTER_NUM);

								query_tOracleOutput_8 = query_tOracleOutput_8
										.append(row21.ENCOUNTER_NUM == null ? "null"
												: String.valueOf(row21.ENCOUNTER_NUM))
										.append(insertSQLSplits_tOracleOutput_8[3]);
								if (row21.PATIENT_IDE == null) {
									pstmt_tOracleOutput_8.setNull(4,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_8.setString(4,
											row21.PATIENT_IDE);
								}

								query_tOracleOutput_8 = query_tOracleOutput_8
										.append(row21.PATIENT_IDE == null ? "null"
												: "'" + row21.PATIENT_IDE + "'")
										.append(insertSQLSplits_tOracleOutput_8[4]);
								if (row21.PATIENT_IDE_SOURCE == null) {
									pstmt_tOracleOutput_8.setNull(5,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_8.setString(5,
											row21.PATIENT_IDE_SOURCE);
								}

								query_tOracleOutput_8 = query_tOracleOutput_8
										.append(row21.PATIENT_IDE_SOURCE == null ? "null"
												: "'"
														+ row21.PATIENT_IDE_SOURCE
														+ "'")
										.append(insertSQLSplits_tOracleOutput_8[5]);
								if (row21.ENCOUNTER_IDE_STATUS == null) {
									pstmt_tOracleOutput_8.setNull(6,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_8.setString(6,
											row21.ENCOUNTER_IDE_STATUS);
								}

								query_tOracleOutput_8 = query_tOracleOutput_8
										.append(row21.ENCOUNTER_IDE_STATUS == null ? "null"
												: "'"
														+ row21.ENCOUNTER_IDE_STATUS
														+ "'")
										.append(insertSQLSplits_tOracleOutput_8[6]);
								if (row21.UPLOAD_DATE != null) {
									pstmt_tOracleOutput_8
											.setObject(
													7,
													new java.sql.Timestamp(
															row21.UPLOAD_DATE
																	.getTime()),
													java.sql.Types.DATE);
								} else {
									pstmt_tOracleOutput_8.setNull(7,
											java.sql.Types.DATE);
								}

								query_tOracleOutput_8 = query_tOracleOutput_8
										.append(row21.UPLOAD_DATE == null ? "null"
												: "'"
														+ new java.text.SimpleDateFormat(
																"dd-MM-yyyy")
																.format(row21.UPLOAD_DATE)
														+ "'")
										.append(insertSQLSplits_tOracleOutput_8[7]);
								if (row21.UPDATE_DATE != null) {
									pstmt_tOracleOutput_8
											.setObject(
													8,
													new java.sql.Timestamp(
															row21.UPDATE_DATE
																	.getTime()),
													java.sql.Types.DATE);
								} else {
									pstmt_tOracleOutput_8.setNull(8,
											java.sql.Types.DATE);
								}

								query_tOracleOutput_8 = query_tOracleOutput_8
										.append(row21.UPDATE_DATE == null ? "null"
												: "'"
														+ new java.text.SimpleDateFormat(
																"dd-MM-yyyy")
																.format(row21.UPDATE_DATE)
														+ "'")
										.append(insertSQLSplits_tOracleOutput_8[8]);
								if (row21.DOWNLOAD_DATE != null) {
									pstmt_tOracleOutput_8.setObject(
											9,
											new java.sql.Timestamp(
													row21.DOWNLOAD_DATE
															.getTime()),
											java.sql.Types.DATE);
								} else {
									pstmt_tOracleOutput_8.setNull(9,
											java.sql.Types.DATE);
								}

								query_tOracleOutput_8 = query_tOracleOutput_8
										.append(row21.DOWNLOAD_DATE == null ? "null"
												: "'"
														+ new java.text.SimpleDateFormat(
																"dd-MM-yyyy")
																.format(row21.DOWNLOAD_DATE)
														+ "'")
										.append(insertSQLSplits_tOracleOutput_8[9]);
								if (row21.IMPORT_DATE != null) {
									pstmt_tOracleOutput_8
											.setObject(
													10,
													new java.sql.Timestamp(
															row21.IMPORT_DATE
																	.getTime()),
													java.sql.Types.DATE);
								} else {
									pstmt_tOracleOutput_8.setNull(10,
											java.sql.Types.DATE);
								}

								query_tOracleOutput_8 = query_tOracleOutput_8
										.append(row21.IMPORT_DATE == null ? "null"
												: "'"
														+ new java.text.SimpleDateFormat(
																"dd-MM-yyyy")
																.format(row21.IMPORT_DATE)
														+ "'")
										.append(insertSQLSplits_tOracleOutput_8[10]);
								if (row21.SOURCESYSTEM_CD == null) {
									pstmt_tOracleOutput_8.setNull(11,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_8.setString(11,
											row21.SOURCESYSTEM_CD);
								}

								query_tOracleOutput_8 = query_tOracleOutput_8
										.append(row21.SOURCESYSTEM_CD == null ? "null"
												: "'" + row21.SOURCESYSTEM_CD
														+ "'")
										.append(insertSQLSplits_tOracleOutput_8[11]);
								if (row21.UPLOAD_ID == null) {
									pstmt_tOracleOutput_8.setNull(12,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_8.setString(12,
											row21.UPLOAD_ID);
								}

								query_tOracleOutput_8 = query_tOracleOutput_8
										.append(row21.UPLOAD_ID == null ? "null"
												: "'" + row21.UPLOAD_ID + "'")
										.append(insertSQLSplits_tOracleOutput_8[12]);
								globalMap
										.put("tOracleOutput_8_QUERY",
												query_tOracleOutput_8
														.toString().trim());

								pstmt_tOracleOutput_8.addBatch();
								nb_line_tOracleOutput_8++;

								if (!whetherReject_tOracleOutput_8) {
								}
								commitCounter_tOracleOutput_8++;
								if (commitEvery_tOracleOutput_8 <= commitCounter_tOracleOutput_8) {

									try {
										pstmt_tOracleOutput_8.executeBatch();
									} catch (java.sql.BatchUpdateException e_tOracleOutput_8) {

										System.out.println(e_tOracleOutput_8
												.getMessage());

									}
									tmp_batchUpdateCount_tOracleOutput_8 = pstmt_tOracleOutput_8
											.getUpdateCount();

									insertedCount_tOracleOutput_8

									+= (tmp_batchUpdateCount_tOracleOutput_8 != -1 ? tmp_batchUpdateCount_tOracleOutput_8
											: 0);

									conn_tOracleOutput_8.commit();
									commitCounter_tOracleOutput_8 = 0;
								}

								tos_count_tOracleOutput_8++;

								/**
								 * [tOracleOutput_8 main ] stop
								 */

							} // End of branch "row21"

						} // End of branch "row13"

						/**
						 * [tFileInputDelimited_12 end ] start
						 */

						currentComponent = "tFileInputDelimited_12";

						nb_line_tFileInputDelimited_12++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_12 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_12 != null) {
							csvReadertFileInputDelimited_12.close();
						}
					}
					if (csvReadertFileInputDelimited_12 != null) {
						globalMap.put("tFileInputDelimited_12_NB_LINE",
								nb_line_tFileInputDelimited_12);
					}
				}

				ok_Hash.put("tFileInputDelimited_12", true);
				end_Hash.put("tFileInputDelimited_12",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_12 end ] stop
				 */

				/**
				 * [tUniqRow_4 end ] start
				 */

				currentComponent = "tUniqRow_4";

				globalMap.put("tUniqRow_4_NB_UNIQUES", nb_uniques_tUniqRow_4);
				globalMap.put("tUniqRow_4_NB_DUPLICATES",
						nb_duplicates_tUniqRow_4);

				ok_Hash.put("tUniqRow_4", true);
				end_Hash.put("tUniqRow_4", System.currentTimeMillis());

				/**
				 * [tUniqRow_4 end ] stop
				 */

				/**
				 * [tOracleOutput_8 end ] start
				 */

				currentComponent = "tOracleOutput_8";

				try {
					if (pstmt_tOracleOutput_8 != null) {
						pstmt_tOracleOutput_8.executeBatch();
					}
				} catch (java.sql.BatchUpdateException e_tOracleOutput_8) {

					System.out.println(e_tOracleOutput_8.getMessage());

				}
				if (pstmt_tOracleOutput_8 != null) {
					tmp_batchUpdateCount_tOracleOutput_8 = pstmt_tOracleOutput_8
							.getUpdateCount();

					insertedCount_tOracleOutput_8

					+= (tmp_batchUpdateCount_tOracleOutput_8 != -1 ? tmp_batchUpdateCount_tOracleOutput_8
							: 0);
				}
				if (pstmt_tOracleOutput_8 != null) {

					pstmt_tOracleOutput_8.close();

				}

				conn_tOracleOutput_8.commit();

				conn_tOracleOutput_8.close();

				nb_line_deleted_tOracleOutput_8 = nb_line_deleted_tOracleOutput_8
						+ deletedCount_tOracleOutput_8;
				nb_line_update_tOracleOutput_8 = nb_line_update_tOracleOutput_8
						+ updatedCount_tOracleOutput_8;
				nb_line_inserted_tOracleOutput_8 = nb_line_inserted_tOracleOutput_8
						+ insertedCount_tOracleOutput_8;
				nb_line_rejected_tOracleOutput_8 = nb_line_rejected_tOracleOutput_8
						+ rejectedCount_tOracleOutput_8;

				globalMap.put("tOracleOutput_8_NB_LINE",
						nb_line_tOracleOutput_8);
				globalMap.put("tOracleOutput_8_NB_LINE_UPDATED",
						nb_line_update_tOracleOutput_8);
				globalMap.put("tOracleOutput_8_NB_LINE_INSERTED",
						nb_line_inserted_tOracleOutput_8);
				globalMap.put("tOracleOutput_8_NB_LINE_DELETED",
						nb_line_deleted_tOracleOutput_8);
				globalMap.put("tOracleOutput_8_NB_LINE_REJECTED",
						nb_line_rejected_tOracleOutput_8);

				ok_Hash.put("tOracleOutput_8", true);
				end_Hash.put("tOracleOutput_8", System.currentTimeMillis());

				tOracleCommit_1Process(globalMap);

				/**
				 * [tOracleOutput_8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_12_SUBPROCESS_STATE", 1);
	}

	public void tJava_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_7 begin ] start
				 */

				ok_Hash.put("tJava_7", false);
				start_Hash.put("tJava_7", System.currentTimeMillis());
				currentComponent = "tJava_7";

				int tos_count_tJava_7 = 0;

				System.out.println("Patient Mapping: ");

				StatusListener.setSubStatus(45.0f, (int) (float) (45.0f) + "%");

				/**
				 * [tJava_7 begin ] stop
				 */
				/**
				 * [tJava_7 main ] start
				 */

				currentComponent = "tJava_7";

				tos_count_tJava_7++;

				/**
				 * [tJava_7 main ] stop
				 */
				/**
				 * [tJava_7 end ] start
				 */

				currentComponent = "tJava_7";

				ok_Hash.put("tJava_7", true);
				end_Hash.put("tJava_7", System.currentTimeMillis());

				/**
				 * [tJava_7 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_7:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_6Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_7_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_JDBC_Upload = new byte[0];

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_JDBC_Upload, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.PATIENT_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tOracleOutput_5 begin ] start
				 */

				ok_Hash.put("tOracleOutput_5", false);
				start_Hash.put("tOracleOutput_5", System.currentTimeMillis());
				currentComponent = "tOracleOutput_5";

				int tos_count_tOracleOutput_5 = 0;

				int nb_line_tOracleOutput_5 = 0;
				int nb_line_update_tOracleOutput_5 = 0;
				int nb_line_inserted_tOracleOutput_5 = 0;
				int nb_line_deleted_tOracleOutput_5 = 0;
				int nb_line_rejected_tOracleOutput_5 = 0;

				int tmp_batchUpdateCount_tOracleOutput_5 = 0;

				int deletedCount_tOracleOutput_5 = 0;
				int updatedCount_tOracleOutput_5 = 0;
				int insertedCount_tOracleOutput_5 = 0;
				int rejectedCount_tOracleOutput_5 = 0;

				boolean whetherReject_tOracleOutput_5 = false;

				java.sql.Connection conn_tOracleOutput_5 = null;

				// optional table
				String dbschema_tOracleOutput_5 = null;
				String tableName_tOracleOutput_5 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleOutput_5 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tOracleOutput_5) {
					conn_tOracleOutput_5 = dataSources_tOracleOutput_5.get("")
							.getConnection();
				} else {

					java.lang.Class.forName("oracle.jdbc.OracleDriver");

					String url_tOracleOutput_5 = null;
					url_tOracleOutput_5 = "jdbc:oracle:thin:@" + context.DBHost
							+ ":" + context.DBPort + ":" + context.DBInstance;
					String dbUser_tOracleOutput_5 = context.DBUsername;
					String dbPwd_tOracleOutput_5 = context.DBPassword;
					dbschema_tOracleOutput_5 = context.DBSchema;

					conn_tOracleOutput_5 = java.sql.DriverManager
							.getConnection(url_tOracleOutput_5,
									dbUser_tOracleOutput_5,
									dbPwd_tOracleOutput_5);
				}
				conn_tOracleOutput_5.setAutoCommit(false);
				int commitEvery_tOracleOutput_5 = 50000;
				int commitCounter_tOracleOutput_5 = 0;

				int count_tOracleOutput_5 = 0;

				if (dbschema_tOracleOutput_5 == null
						|| dbschema_tOracleOutput_5.trim().length() == 0) {
					tableName_tOracleOutput_5 = "patient_mapping";
				} else {
					tableName_tOracleOutput_5 = dbschema_tOracleOutput_5 + "."
							+ "patient_mapping";
				}
				String insert_tOracleOutput_5 = "INSERT INTO "
						+ tableName_tOracleOutput_5
						+ " (PATIENT_IDE,PATIENT_IDE_SOURCE,PATIENT_NUM,PATIENT_IDE_STATUS,UPLOAD_DATE,UPDATE_DATE,DOWNLOAD_DATE,IMPORT_DATE,SOURCESYSTEM_CD,UPLOAD_ID) VALUES (?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tOracleOutput_5 = conn_tOracleOutput_5
						.prepareStatement(insert_tOracleOutput_5);

				StringBuffer query_tOracleOutput_5 = null;

				String[] insertSQLSplits_tOracleOutput_5 = insert_tOracleOutput_5
						.split("\\?");

				/**
				 * [tOracleOutput_5 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_6", false);
				start_Hash.put("tFileInputDelimited_6",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_6";

				int tos_count_tFileInputDelimited_6 = 0;

				int nb_line_tFileInputDelimited_6 = 0;
				int footer_tFileInputDelimited_6 = 0;
				int totalLinetFileInputDelimited_6 = 0;
				int limittFileInputDelimited_6 = -1;
				int lastLinetFileInputDelimited_6 = -1;

				char fieldSeparator_tFileInputDelimited_6[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_6 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_6[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_6 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_6 = /**
				 * Start field
				 * tFileInputDelimited_6:FILENAME
				 */
				context.folderMain + context.folderOutput
						+ "patient_mapping.csv"/**
				 * End field
				 * tFileInputDelimited_6:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_6 = null;

				try {

					String[] rowtFileInputDelimited_6 = null;
					int currentLinetFileInputDelimited_6 = 0;
					int outputLinetFileInputDelimited_6 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_6 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_6 = 0;
							if (footer_value_tFileInputDelimited_6 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_6,
									fieldSeparator_tFileInputDelimited_6[0],
									context.coding);
						} else {
							csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_6)),
													context.coding)),
									fieldSeparator_tFileInputDelimited_6[0]);
						}

						csvReadertFileInputDelimited_6.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_6[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_6[0] != '\r'))
							csvReadertFileInputDelimited_6.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_6[0]);

						csvReadertFileInputDelimited_6.setQuoteChar('"');

						csvReadertFileInputDelimited_6
								.setEscapeChar(csvReadertFileInputDelimited_6
										.getQuoteChar());

						if (footer_tFileInputDelimited_6 > 0) {
							for (totalLinetFileInputDelimited_6 = 0; totalLinetFileInputDelimited_6 < 1; totalLinetFileInputDelimited_6++) {
								csvReadertFileInputDelimited_6.readNext();
							}
							csvReadertFileInputDelimited_6
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_6.readNext()) {

								rowtFileInputDelimited_6 = csvReadertFileInputDelimited_6
										.getValues();
								if (!(rowtFileInputDelimited_6.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_6[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_6++;

								}

							}
							int lastLineTemptFileInputDelimited_6 = totalLinetFileInputDelimited_6
									- footer_tFileInputDelimited_6 < 0 ? 0
									: totalLinetFileInputDelimited_6
											- footer_tFileInputDelimited_6;
							if (lastLinetFileInputDelimited_6 > 0) {
								lastLinetFileInputDelimited_6 = lastLinetFileInputDelimited_6 < lastLineTemptFileInputDelimited_6 ? lastLinetFileInputDelimited_6
										: lastLineTemptFileInputDelimited_6;
							} else {
								lastLinetFileInputDelimited_6 = lastLineTemptFileInputDelimited_6;
							}

							csvReadertFileInputDelimited_6.close();
							if (filename_tFileInputDelimited_6 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_6,
										fieldSeparator_tFileInputDelimited_6[0],
										context.coding);
							} else {
								csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_6)),
														context.coding)),
										fieldSeparator_tFileInputDelimited_6[0]);
							}
							csvReadertFileInputDelimited_6
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_6[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_6[0] != '\r'))
								csvReadertFileInputDelimited_6
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_6[0]);

							csvReadertFileInputDelimited_6.setQuoteChar('"');

							csvReadertFileInputDelimited_6
									.setEscapeChar(csvReadertFileInputDelimited_6
											.getQuoteChar());

						}

						if (limittFileInputDelimited_6 != 0) {
							for (currentLinetFileInputDelimited_6 = 0; currentLinetFileInputDelimited_6 < 1; currentLinetFileInputDelimited_6++) {
								csvReadertFileInputDelimited_6.readNext();
							}
						}
						csvReadertFileInputDelimited_6
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_6 != 0
							&& csvReadertFileInputDelimited_6 != null
							&& csvReadertFileInputDelimited_6.readNext()) {

						rowtFileInputDelimited_6 = csvReadertFileInputDelimited_6
								.getValues();

						if (rowtFileInputDelimited_6.length == 1
								&& ("\015").equals(rowtFileInputDelimited_6[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_6++;

						if (lastLinetFileInputDelimited_6 > -1
								&& currentLinetFileInputDelimited_6 > lastLinetFileInputDelimited_6) {
							break;
						}
						outputLinetFileInputDelimited_6++;
						if (limittFileInputDelimited_6 > 0
								&& outputLinetFileInputDelimited_6 > limittFileInputDelimited_6) {
							break;
						}

						row6 = null;

						boolean whetherReject_tFileInputDelimited_6 = false;
						row6 = new row6Struct();
						try {

							if (rowtFileInputDelimited_6.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_6[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row6.PATIENT_IDE = null;

								row6.PATIENT_IDE_SOURCE = null;

								row6.PATIENT_NUM = null;

								row6.PATIENT_IDE_STATUS = null;

								row6.UPLOAD_DATE = null;

								row6.UPDATE_DATE = null;

								row6.DOWNLOAD_DATE = null;

								row6.IMPORT_DATE = null;

								row6.SOURCESYSTEM_CD = null;

								row6.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_6 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_6 = 0;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row6.PATIENT_IDE = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row6.PATIENT_IDE = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 1;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row6.PATIENT_IDE_SOURCE = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row6.PATIENT_IDE_SOURCE = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 2;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									if (rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]
											.length() > 0) {

										row6.PATIENT_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]);

									} else {
										row6.PATIENT_NUM = null;
									}

								} else {
									row6.PATIENT_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 3;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row6.PATIENT_IDE_STATUS = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row6.PATIENT_IDE_STATUS = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 4;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									if (rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]
											.length() > 0) {

										row6.UPLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6],
														"dd-MM-yyyy");

									} else {
										row6.UPLOAD_DATE = null;
									}

								} else {
									row6.UPLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 5;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									if (rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]
											.length() > 0) {

										row6.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6],
														"dd-MM-yyyy");

									} else {
										row6.UPDATE_DATE = null;
									}

								} else {
									row6.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 6;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									if (rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]
											.length() > 0) {

										row6.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6],
														"dd-MM-yyyy");

									} else {
										row6.DOWNLOAD_DATE = null;
									}

								} else {
									row6.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 7;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									if (rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]
											.length() > 0) {

										row6.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6],
														"dd-MM-yyyy");

									} else {
										row6.IMPORT_DATE = null;
									}

								} else {
									row6.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 8;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row6.SOURCESYSTEM_CD = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row6.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 9;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row6.UPLOAD_ID = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row6.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_6 = true;

							System.err.println(e.getMessage());
							row6 = null;

						}

						/**
						 * [tFileInputDelimited_6 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_6 main ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						tos_count_tFileInputDelimited_6++;

						/**
						 * [tFileInputDelimited_6 main ] stop
						 */
						// Start of branch "row6"
						if (row6 != null) {

							/**
							 * [tOracleOutput_5 main ] start
							 */

							currentComponent = "tOracleOutput_5";

							query_tOracleOutput_5 = new StringBuffer("");
							whetherReject_tOracleOutput_5 = false;
							if (row6.PATIENT_IDE == null) {
								pstmt_tOracleOutput_5.setNull(1,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_5.setString(1,
										row6.PATIENT_IDE);
							}

							query_tOracleOutput_5 = query_tOracleOutput_5
									.append(insertSQLSplits_tOracleOutput_5[0])
									.append(row6.PATIENT_IDE == null ? "null"
											: "'" + row6.PATIENT_IDE + "'")
									.append(insertSQLSplits_tOracleOutput_5[1]);
							if (row6.PATIENT_IDE_SOURCE == null) {
								pstmt_tOracleOutput_5.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_5.setString(2,
										row6.PATIENT_IDE_SOURCE);
							}

							query_tOracleOutput_5 = query_tOracleOutput_5
									.append(row6.PATIENT_IDE_SOURCE == null ? "null"
											: "'" + row6.PATIENT_IDE_SOURCE
													+ "'").append(
											insertSQLSplits_tOracleOutput_5[2]);
							pstmt_tOracleOutput_5.setBigDecimal(3,
									row6.PATIENT_NUM);

							query_tOracleOutput_5 = query_tOracleOutput_5
									.append(row6.PATIENT_NUM == null ? "null"
											: String.valueOf(row6.PATIENT_NUM))
									.append(insertSQLSplits_tOracleOutput_5[3]);
							if (row6.PATIENT_IDE_STATUS == null) {
								pstmt_tOracleOutput_5.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_5.setString(4,
										row6.PATIENT_IDE_STATUS);
							}

							query_tOracleOutput_5 = query_tOracleOutput_5
									.append(row6.PATIENT_IDE_STATUS == null ? "null"
											: "'" + row6.PATIENT_IDE_STATUS
													+ "'").append(
											insertSQLSplits_tOracleOutput_5[4]);
							if (row6.UPLOAD_DATE != null) {
								pstmt_tOracleOutput_5.setObject(
										5,
										new java.sql.Timestamp(row6.UPLOAD_DATE
												.getTime()),
										java.sql.Types.DATE);
							} else {
								pstmt_tOracleOutput_5.setNull(5,
										java.sql.Types.DATE);
							}

							query_tOracleOutput_5 = query_tOracleOutput_5
									.append(row6.UPLOAD_DATE == null ? "null"
											: "'"
													+ new java.text.SimpleDateFormat(
															"dd-MM-yyyy")
															.format(row6.UPLOAD_DATE)
													+ "'").append(
											insertSQLSplits_tOracleOutput_5[5]);
							if (row6.UPDATE_DATE != null) {
								pstmt_tOracleOutput_5.setObject(
										6,
										new java.sql.Timestamp(row6.UPDATE_DATE
												.getTime()),
										java.sql.Types.DATE);
							} else {
								pstmt_tOracleOutput_5.setNull(6,
										java.sql.Types.DATE);
							}

							query_tOracleOutput_5 = query_tOracleOutput_5
									.append(row6.UPDATE_DATE == null ? "null"
											: "'"
													+ new java.text.SimpleDateFormat(
															"dd-MM-yyyy")
															.format(row6.UPDATE_DATE)
													+ "'").append(
											insertSQLSplits_tOracleOutput_5[6]);
							if (row6.DOWNLOAD_DATE != null) {
								pstmt_tOracleOutput_5.setObject(7,
										new java.sql.Timestamp(
												row6.DOWNLOAD_DATE.getTime()),
										java.sql.Types.DATE);
							} else {
								pstmt_tOracleOutput_5.setNull(7,
										java.sql.Types.DATE);
							}

							query_tOracleOutput_5 = query_tOracleOutput_5
									.append(row6.DOWNLOAD_DATE == null ? "null"
											: "'"
													+ new java.text.SimpleDateFormat(
															"dd-MM-yyyy")
															.format(row6.DOWNLOAD_DATE)
													+ "'").append(
											insertSQLSplits_tOracleOutput_5[7]);
							if (row6.IMPORT_DATE != null) {
								pstmt_tOracleOutput_5.setObject(
										8,
										new java.sql.Timestamp(row6.IMPORT_DATE
												.getTime()),
										java.sql.Types.DATE);
							} else {
								pstmt_tOracleOutput_5.setNull(8,
										java.sql.Types.DATE);
							}

							query_tOracleOutput_5 = query_tOracleOutput_5
									.append(row6.IMPORT_DATE == null ? "null"
											: "'"
													+ new java.text.SimpleDateFormat(
															"dd-MM-yyyy")
															.format(row6.IMPORT_DATE)
													+ "'").append(
											insertSQLSplits_tOracleOutput_5[8]);
							if (row6.SOURCESYSTEM_CD == null) {
								pstmt_tOracleOutput_5.setNull(9,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_5.setString(9,
										row6.SOURCESYSTEM_CD);
							}

							query_tOracleOutput_5 = query_tOracleOutput_5
									.append(row6.SOURCESYSTEM_CD == null ? "null"
											: "'" + row6.SOURCESYSTEM_CD + "'")
									.append(insertSQLSplits_tOracleOutput_5[9]);
							if (row6.UPLOAD_ID == null) {
								pstmt_tOracleOutput_5.setNull(10,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_5.setString(10,
										row6.UPLOAD_ID);
							}

							query_tOracleOutput_5 = query_tOracleOutput_5
									.append(row6.UPLOAD_ID == null ? "null"
											: "'" + row6.UPLOAD_ID + "'")
									.append(insertSQLSplits_tOracleOutput_5[10]);
							globalMap.put("tOracleOutput_5_QUERY",
									query_tOracleOutput_5.toString().trim());

							pstmt_tOracleOutput_5.addBatch();
							nb_line_tOracleOutput_5++;

							if (!whetherReject_tOracleOutput_5) {
							}
							commitCounter_tOracleOutput_5++;
							if (commitEvery_tOracleOutput_5 <= commitCounter_tOracleOutput_5) {

								try {
									pstmt_tOracleOutput_5.executeBatch();
								} catch (java.sql.BatchUpdateException e_tOracleOutput_5) {

									throw (e_tOracleOutput_5);

								}
								tmp_batchUpdateCount_tOracleOutput_5 = pstmt_tOracleOutput_5
										.getUpdateCount();

								insertedCount_tOracleOutput_5

								+= (tmp_batchUpdateCount_tOracleOutput_5 != -1 ? tmp_batchUpdateCount_tOracleOutput_5
										: 0);

								conn_tOracleOutput_5.commit();
								commitCounter_tOracleOutput_5 = 0;
							}

							tos_count_tOracleOutput_5++;

							/**
							 * [tOracleOutput_5 main ] stop
							 */

						} // End of branch "row6"

						/**
						 * [tFileInputDelimited_6 end ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						nb_line_tFileInputDelimited_6++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_6 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_6 != null) {
							csvReadertFileInputDelimited_6.close();
						}
					}
					if (csvReadertFileInputDelimited_6 != null) {
						globalMap.put("tFileInputDelimited_6_NB_LINE",
								nb_line_tFileInputDelimited_6);
					}
				}

				ok_Hash.put("tFileInputDelimited_6", true);
				end_Hash.put("tFileInputDelimited_6",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_6 end ] stop
				 */

				/**
				 * [tOracleOutput_5 end ] start
				 */

				currentComponent = "tOracleOutput_5";

				try {
					if (pstmt_tOracleOutput_5 != null) {
						pstmt_tOracleOutput_5.executeBatch();
					}
				} catch (java.sql.BatchUpdateException e_tOracleOutput_5) {

					throw (e_tOracleOutput_5);

				}
				if (pstmt_tOracleOutput_5 != null) {
					tmp_batchUpdateCount_tOracleOutput_5 = pstmt_tOracleOutput_5
							.getUpdateCount();

					insertedCount_tOracleOutput_5

					+= (tmp_batchUpdateCount_tOracleOutput_5 != -1 ? tmp_batchUpdateCount_tOracleOutput_5
							: 0);
				}
				if (pstmt_tOracleOutput_5 != null) {

					pstmt_tOracleOutput_5.close();

				}

				conn_tOracleOutput_5.commit();

				conn_tOracleOutput_5.close();

				nb_line_deleted_tOracleOutput_5 = nb_line_deleted_tOracleOutput_5
						+ deletedCount_tOracleOutput_5;
				nb_line_update_tOracleOutput_5 = nb_line_update_tOracleOutput_5
						+ updatedCount_tOracleOutput_5;
				nb_line_inserted_tOracleOutput_5 = nb_line_inserted_tOracleOutput_5
						+ insertedCount_tOracleOutput_5;
				nb_line_rejected_tOracleOutput_5 = nb_line_rejected_tOracleOutput_5
						+ rejectedCount_tOracleOutput_5;

				globalMap.put("tOracleOutput_5_NB_LINE",
						nb_line_tOracleOutput_5);
				globalMap.put("tOracleOutput_5_NB_LINE_UPDATED",
						nb_line_update_tOracleOutput_5);
				globalMap.put("tOracleOutput_5_NB_LINE_INSERTED",
						nb_line_inserted_tOracleOutput_5);
				globalMap.put("tOracleOutput_5_NB_LINE_DELETED",
						nb_line_deleted_tOracleOutput_5);
				globalMap.put("tOracleOutput_5_NB_LINE_REJECTED",
						nb_line_rejected_tOracleOutput_5);

				ok_Hash.put("tOracleOutput_5", true);
				end_Hash.put("tOracleOutput_5", System.currentTimeMillis());

				tOracleCommit_1Process(globalMap);

				/**
				 * [tOracleOutput_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 1);
	}

	public void tJava_8Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_8 begin ] start
				 */

				ok_Hash.put("tJava_8", false);
				start_Hash.put("tJava_8", System.currentTimeMillis());
				currentComponent = "tJava_8";

				int tos_count_tJava_8 = 0;

				System.out.println("Patient Dimension: ");
				StatusListener.setSubStatus(50.0f, (int) (float) (50.0f) + "%");

				/**
				 * [tJava_8 begin ] stop
				 */
				/**
				 * [tJava_8 main ] start
				 */

				currentComponent = "tJava_8";

				tos_count_tJava_8++;

				/**
				 * [tJava_8 main ] stop
				 */
				/**
				 * [tJava_8 end ] start
				 */

				currentComponent = "tJava_8";

				ok_Hash.put("tJava_8", true);
				end_Hash.put("tJava_8", System.currentTimeMillis());

				/**
				 * [tJava_8 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_8:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_7Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_8_SUBPROCESS_STATE", 1);
	}

	public static class row22Struct implements
			routines.system.IPersistableRow<row22Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_JDBC_Upload = new byte[0];

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String VITAL_STATUS_CD;

		public String getVITAL_STATUS_CD() {
			return this.VITAL_STATUS_CD;
		}

		public String BIRTH_DATE;

		public String getBIRTH_DATE() {
			return this.BIRTH_DATE;
		}

		public String DEATH_DATE;

		public String getDEATH_DATE() {
			return this.DEATH_DATE;
		}

		public String SEX_CD;

		public String getSEX_CD() {
			return this.SEX_CD;
		}

		public String AGE_IN_YEARS_NUM;

		public String getAGE_IN_YEARS_NUM() {
			return this.AGE_IN_YEARS_NUM;
		}

		public String LANGUAGE_CD;

		public String getLANGUAGE_CD() {
			return this.LANGUAGE_CD;
		}

		public String RACE_CD;

		public String getRACE_CD() {
			return this.RACE_CD;
		}

		public String MARITAL_STATUS_CD;

		public String getMARITAL_STATUS_CD() {
			return this.MARITAL_STATUS_CD;
		}

		public String RELIGION_CD;

		public String getRELIGION_CD() {
			return this.RELIGION_CD;
		}

		public String ZIP_CD;

		public String getZIP_CD() {
			return this.ZIP_CD;
		}

		public String STATECITYZIP_PATH;

		public String getSTATECITYZIP_PATH() {
			return this.STATECITYZIP_PATH;
		}

		public String INCOME_CD;

		public String getINCOME_CD() {
			return this.INCOME_CD;
		}

		public String PATIENT_BLOB;

		public String getPATIENT_BLOB() {
			return this.PATIENT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_JDBC_Upload, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.VITAL_STATUS_CD = readString(dis);

					this.BIRTH_DATE = readString(dis);

					this.DEATH_DATE = readString(dis);

					this.SEX_CD = readString(dis);

					this.AGE_IN_YEARS_NUM = readString(dis);

					this.LANGUAGE_CD = readString(dis);

					this.RACE_CD = readString(dis);

					this.MARITAL_STATUS_CD = readString(dis);

					this.RELIGION_CD = readString(dis);

					this.ZIP_CD = readString(dis);

					this.STATECITYZIP_PATH = readString(dis);

					this.INCOME_CD = readString(dis);

					this.PATIENT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.VITAL_STATUS_CD, dos);

				// String

				writeString(this.BIRTH_DATE, dos);

				// String

				writeString(this.DEATH_DATE, dos);

				// String

				writeString(this.SEX_CD, dos);

				// String

				writeString(this.AGE_IN_YEARS_NUM, dos);

				// String

				writeString(this.LANGUAGE_CD, dos);

				// String

				writeString(this.RACE_CD, dos);

				// String

				writeString(this.MARITAL_STATUS_CD, dos);

				// String

				writeString(this.RELIGION_CD, dos);

				// String

				writeString(this.ZIP_CD, dos);

				// String

				writeString(this.STATECITYZIP_PATH, dos);

				// String

				writeString(this.INCOME_CD, dos);

				// String

				writeString(this.PATIENT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",VITAL_STATUS_CD=" + VITAL_STATUS_CD);
			sb.append(",BIRTH_DATE=" + BIRTH_DATE);
			sb.append(",DEATH_DATE=" + DEATH_DATE);
			sb.append(",SEX_CD=" + SEX_CD);
			sb.append(",AGE_IN_YEARS_NUM=" + AGE_IN_YEARS_NUM);
			sb.append(",LANGUAGE_CD=" + LANGUAGE_CD);
			sb.append(",RACE_CD=" + RACE_CD);
			sb.append(",MARITAL_STATUS_CD=" + MARITAL_STATUS_CD);
			sb.append(",RELIGION_CD=" + RELIGION_CD);
			sb.append(",ZIP_CD=" + ZIP_CD);
			sb.append(",STATECITYZIP_PATH=" + STATECITYZIP_PATH);
			sb.append(",INCOME_CD=" + INCOME_CD);
			sb.append(",PATIENT_BLOB=" + PATIENT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_JDBC_Upload = new byte[0];

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String VITAL_STATUS_CD;

		public String getVITAL_STATUS_CD() {
			return this.VITAL_STATUS_CD;
		}

		public String BIRTH_DATE;

		public String getBIRTH_DATE() {
			return this.BIRTH_DATE;
		}

		public String DEATH_DATE;

		public String getDEATH_DATE() {
			return this.DEATH_DATE;
		}

		public String SEX_CD;

		public String getSEX_CD() {
			return this.SEX_CD;
		}

		public String AGE_IN_YEARS_NUM;

		public String getAGE_IN_YEARS_NUM() {
			return this.AGE_IN_YEARS_NUM;
		}

		public String LANGUAGE_CD;

		public String getLANGUAGE_CD() {
			return this.LANGUAGE_CD;
		}

		public String RACE_CD;

		public String getRACE_CD() {
			return this.RACE_CD;
		}

		public String MARITAL_STATUS_CD;

		public String getMARITAL_STATUS_CD() {
			return this.MARITAL_STATUS_CD;
		}

		public String RELIGION_CD;

		public String getRELIGION_CD() {
			return this.RELIGION_CD;
		}

		public String ZIP_CD;

		public String getZIP_CD() {
			return this.ZIP_CD;
		}

		public String STATECITYZIP_PATH;

		public String getSTATECITYZIP_PATH() {
			return this.STATECITYZIP_PATH;
		}

		public String INCOME_CD;

		public String getINCOME_CD() {
			return this.INCOME_CD;
		}

		public String PATIENT_BLOB;

		public String getPATIENT_BLOB() {
			return this.PATIENT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_JDBC_Upload, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.VITAL_STATUS_CD = readString(dis);

					this.BIRTH_DATE = readString(dis);

					this.DEATH_DATE = readString(dis);

					this.SEX_CD = readString(dis);

					this.AGE_IN_YEARS_NUM = readString(dis);

					this.LANGUAGE_CD = readString(dis);

					this.RACE_CD = readString(dis);

					this.MARITAL_STATUS_CD = readString(dis);

					this.RELIGION_CD = readString(dis);

					this.ZIP_CD = readString(dis);

					this.STATECITYZIP_PATH = readString(dis);

					this.INCOME_CD = readString(dis);

					this.PATIENT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.VITAL_STATUS_CD, dos);

				// String

				writeString(this.BIRTH_DATE, dos);

				// String

				writeString(this.DEATH_DATE, dos);

				// String

				writeString(this.SEX_CD, dos);

				// String

				writeString(this.AGE_IN_YEARS_NUM, dos);

				// String

				writeString(this.LANGUAGE_CD, dos);

				// String

				writeString(this.RACE_CD, dos);

				// String

				writeString(this.MARITAL_STATUS_CD, dos);

				// String

				writeString(this.RELIGION_CD, dos);

				// String

				writeString(this.ZIP_CD, dos);

				// String

				writeString(this.STATECITYZIP_PATH, dos);

				// String

				writeString(this.INCOME_CD, dos);

				// String

				writeString(this.PATIENT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",VITAL_STATUS_CD=" + VITAL_STATUS_CD);
			sb.append(",BIRTH_DATE=" + BIRTH_DATE);
			sb.append(",DEATH_DATE=" + DEATH_DATE);
			sb.append(",SEX_CD=" + SEX_CD);
			sb.append(",AGE_IN_YEARS_NUM=" + AGE_IN_YEARS_NUM);
			sb.append(",LANGUAGE_CD=" + LANGUAGE_CD);
			sb.append(",RACE_CD=" + RACE_CD);
			sb.append(",MARITAL_STATUS_CD=" + MARITAL_STATUS_CD);
			sb.append(",RELIGION_CD=" + RELIGION_CD);
			sb.append(",ZIP_CD=" + ZIP_CD);
			sb.append(",STATECITYZIP_PATH=" + STATECITYZIP_PATH);
			sb.append(",INCOME_CD=" + INCOME_CD);
			sb.append(",PATIENT_BLOB=" + PATIENT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();
				row22Struct row22 = new row22Struct();

				/**
				 * [tOracleOutput_4 begin ] start
				 */

				ok_Hash.put("tOracleOutput_4", false);
				start_Hash.put("tOracleOutput_4", System.currentTimeMillis());
				currentComponent = "tOracleOutput_4";

				int tos_count_tOracleOutput_4 = 0;

				int nb_line_tOracleOutput_4 = 0;
				int nb_line_update_tOracleOutput_4 = 0;
				int nb_line_inserted_tOracleOutput_4 = 0;
				int nb_line_deleted_tOracleOutput_4 = 0;
				int nb_line_rejected_tOracleOutput_4 = 0;

				int tmp_batchUpdateCount_tOracleOutput_4 = 0;

				int deletedCount_tOracleOutput_4 = 0;
				int updatedCount_tOracleOutput_4 = 0;
				int insertedCount_tOracleOutput_4 = 0;
				int rejectedCount_tOracleOutput_4 = 0;

				boolean whetherReject_tOracleOutput_4 = false;

				java.sql.Connection conn_tOracleOutput_4 = null;

				// optional table
				String dbschema_tOracleOutput_4 = null;
				String tableName_tOracleOutput_4 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleOutput_4 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tOracleOutput_4) {
					conn_tOracleOutput_4 = dataSources_tOracleOutput_4.get("")
							.getConnection();
				} else {

					java.lang.Class.forName("oracle.jdbc.OracleDriver");

					String url_tOracleOutput_4 = null;
					url_tOracleOutput_4 = "jdbc:oracle:thin:@" + context.DBHost
							+ ":" + context.DBPort + ":" + context.DBInstance;
					String dbUser_tOracleOutput_4 = context.DBUsername;
					String dbPwd_tOracleOutput_4 = context.DBPassword;
					dbschema_tOracleOutput_4 = context.DBSchema;

					conn_tOracleOutput_4 = java.sql.DriverManager
							.getConnection(url_tOracleOutput_4,
									dbUser_tOracleOutput_4,
									dbPwd_tOracleOutput_4);
				}
				conn_tOracleOutput_4.setAutoCommit(false);
				int commitEvery_tOracleOutput_4 = 50000;
				int commitCounter_tOracleOutput_4 = 0;

				int count_tOracleOutput_4 = 0;

				if (dbschema_tOracleOutput_4 == null
						|| dbschema_tOracleOutput_4.trim().length() == 0) {
					tableName_tOracleOutput_4 = "patient_dimension";
				} else {
					tableName_tOracleOutput_4 = dbschema_tOracleOutput_4 + "."
							+ "patient_dimension";
				}
				String insert_tOracleOutput_4 = "INSERT INTO "
						+ tableName_tOracleOutput_4
						+ " (PATIENT_NUM,VITAL_STATUS_CD,BIRTH_DATE,DEATH_DATE,SEX_CD,AGE_IN_YEARS_NUM,LANGUAGE_CD,RACE_CD,MARITAL_STATUS_CD,RELIGION_CD,ZIP_CD,STATECITYZIP_PATH,INCOME_CD,PATIENT_BLOB,UPDATE_DATE,DOWNLOAD_DATE,IMPORT_DATE,SOURCESYSTEM_CD,UPLOAD_ID) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tOracleOutput_4 = conn_tOracleOutput_4
						.prepareStatement(insert_tOracleOutput_4);

				StringBuffer query_tOracleOutput_4 = null;

				String[] insertSQLSplits_tOracleOutput_4 = insert_tOracleOutput_4
						.split("\\?");

				/**
				 * [tOracleOutput_4 begin ] stop
				 */

				/**
				 * [tUniqRow_3 begin ] start
				 */

				ok_Hash.put("tUniqRow_3", false);
				start_Hash.put("tUniqRow_3", System.currentTimeMillis());
				currentComponent = "tUniqRow_3";

				int tos_count_tUniqRow_3 = 0;

				class KeyStruct_tUniqRow_3 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					BigDecimal PATIENT_NUM;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.PATIENT_NUM == null) ? 0
											: this.PATIENT_NUM.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_3 other = (KeyStruct_tUniqRow_3) obj;

						if (this.PATIENT_NUM == null) {
							if (other.PATIENT_NUM != null)
								return false;
						} else if (!this.PATIENT_NUM.equals(other.PATIENT_NUM))
							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_3 = 0;
				int nb_duplicates_tUniqRow_3 = 0;
				KeyStruct_tUniqRow_3 finder_tUniqRow_3 = new KeyStruct_tUniqRow_3();
				java.util.Set<KeyStruct_tUniqRow_3> keystUniqRow_3 = new java.util.HashSet<KeyStruct_tUniqRow_3>();

				/**
				 * [tUniqRow_3 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_7", false);
				start_Hash.put("tFileInputDelimited_7",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_7";

				int tos_count_tFileInputDelimited_7 = 0;

				int nb_line_tFileInputDelimited_7 = 0;
				int footer_tFileInputDelimited_7 = 0;
				int totalLinetFileInputDelimited_7 = 0;
				int limittFileInputDelimited_7 = -1;
				int lastLinetFileInputDelimited_7 = -1;

				char fieldSeparator_tFileInputDelimited_7[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_7 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_7[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_7 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_7 = /**
				 * Start field
				 * tFileInputDelimited_7:FILENAME
				 */
				context.folderMain + context.folderOutput
						+ "patient_dimension.csv"/**
				 * End field
				 * tFileInputDelimited_7:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_7 = null;

				try {

					String[] rowtFileInputDelimited_7 = null;
					int currentLinetFileInputDelimited_7 = 0;
					int outputLinetFileInputDelimited_7 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_7 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_7 = 0;
							if (footer_value_tFileInputDelimited_7 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_7,
									fieldSeparator_tFileInputDelimited_7[0],
									context.coding);
						} else {
							csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_7)),
													context.coding)),
									fieldSeparator_tFileInputDelimited_7[0]);
						}

						csvReadertFileInputDelimited_7.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_7[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_7[0] != '\r'))
							csvReadertFileInputDelimited_7.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_7[0]);

						csvReadertFileInputDelimited_7.setQuoteChar('"');

						csvReadertFileInputDelimited_7
								.setEscapeChar(csvReadertFileInputDelimited_7
										.getQuoteChar());

						if (footer_tFileInputDelimited_7 > 0) {
							for (totalLinetFileInputDelimited_7 = 0; totalLinetFileInputDelimited_7 < 1; totalLinetFileInputDelimited_7++) {
								csvReadertFileInputDelimited_7.readNext();
							}
							csvReadertFileInputDelimited_7
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_7.readNext()) {

								rowtFileInputDelimited_7 = csvReadertFileInputDelimited_7
										.getValues();
								if (!(rowtFileInputDelimited_7.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_7[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_7++;

								}

							}
							int lastLineTemptFileInputDelimited_7 = totalLinetFileInputDelimited_7
									- footer_tFileInputDelimited_7 < 0 ? 0
									: totalLinetFileInputDelimited_7
											- footer_tFileInputDelimited_7;
							if (lastLinetFileInputDelimited_7 > 0) {
								lastLinetFileInputDelimited_7 = lastLinetFileInputDelimited_7 < lastLineTemptFileInputDelimited_7 ? lastLinetFileInputDelimited_7
										: lastLineTemptFileInputDelimited_7;
							} else {
								lastLinetFileInputDelimited_7 = lastLineTemptFileInputDelimited_7;
							}

							csvReadertFileInputDelimited_7.close();
							if (filename_tFileInputDelimited_7 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_7,
										fieldSeparator_tFileInputDelimited_7[0],
										context.coding);
							} else {
								csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_7)),
														context.coding)),
										fieldSeparator_tFileInputDelimited_7[0]);
							}
							csvReadertFileInputDelimited_7
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_7[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_7[0] != '\r'))
								csvReadertFileInputDelimited_7
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_7[0]);

							csvReadertFileInputDelimited_7.setQuoteChar('"');

							csvReadertFileInputDelimited_7
									.setEscapeChar(csvReadertFileInputDelimited_7
											.getQuoteChar());

						}

						if (limittFileInputDelimited_7 != 0) {
							for (currentLinetFileInputDelimited_7 = 0; currentLinetFileInputDelimited_7 < 1; currentLinetFileInputDelimited_7++) {
								csvReadertFileInputDelimited_7.readNext();
							}
						}
						csvReadertFileInputDelimited_7
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_7 != 0
							&& csvReadertFileInputDelimited_7 != null
							&& csvReadertFileInputDelimited_7.readNext()) {

						rowtFileInputDelimited_7 = csvReadertFileInputDelimited_7
								.getValues();

						if (rowtFileInputDelimited_7.length == 1
								&& ("\015").equals(rowtFileInputDelimited_7[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_7++;

						if (lastLinetFileInputDelimited_7 > -1
								&& currentLinetFileInputDelimited_7 > lastLinetFileInputDelimited_7) {
							break;
						}
						outputLinetFileInputDelimited_7++;
						if (limittFileInputDelimited_7 > 0
								&& outputLinetFileInputDelimited_7 > limittFileInputDelimited_7) {
							break;
						}

						row7 = null;

						boolean whetherReject_tFileInputDelimited_7 = false;
						row7 = new row7Struct();
						try {

							if (rowtFileInputDelimited_7.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_7[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row7.PATIENT_NUM = null;

								row7.VITAL_STATUS_CD = null;

								row7.BIRTH_DATE = null;

								row7.DEATH_DATE = null;

								row7.SEX_CD = null;

								row7.AGE_IN_YEARS_NUM = null;

								row7.LANGUAGE_CD = null;

								row7.RACE_CD = null;

								row7.MARITAL_STATUS_CD = null;

								row7.RELIGION_CD = null;

								row7.ZIP_CD = null;

								row7.STATECITYZIP_PATH = null;

								row7.INCOME_CD = null;

								row7.PATIENT_BLOB = null;

								row7.UPDATE_DATE = null;

								row7.DOWNLOAD_DATE = null;

								row7.IMPORT_DATE = null;

								row7.SOURCESYSTEM_CD = null;

								row7.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_7 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_7 = 0;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									if (rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]
											.length() > 0) {

										row7.PATIENT_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]);

									} else {
										row7.PATIENT_NUM = null;
									}

								} else {
									row7.PATIENT_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 1;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.VITAL_STATUS_CD = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.VITAL_STATUS_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 2;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.BIRTH_DATE = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.BIRTH_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 3;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.DEATH_DATE = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.DEATH_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 4;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.SEX_CD = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.SEX_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 5;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.AGE_IN_YEARS_NUM = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.AGE_IN_YEARS_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 6;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.LANGUAGE_CD = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.LANGUAGE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 7;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.RACE_CD = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.RACE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 8;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.MARITAL_STATUS_CD = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.MARITAL_STATUS_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 9;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.RELIGION_CD = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.RELIGION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 10;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.ZIP_CD = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.ZIP_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 11;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.STATECITYZIP_PATH = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.STATECITYZIP_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 12;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.INCOME_CD = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.INCOME_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 13;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.PATIENT_BLOB = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.PATIENT_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 14;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									if (rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]
											.length() > 0) {

										row7.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7],
														"dd-MM-yyyy");

									} else {
										row7.UPDATE_DATE = null;
									}

								} else {
									row7.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 15;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									if (rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]
											.length() > 0) {

										row7.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7],
														"dd-MM-yyyy");

									} else {
										row7.DOWNLOAD_DATE = null;
									}

								} else {
									row7.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 16;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									if (rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]
											.length() > 0) {

										row7.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7],
														"dd-MM-yyyy");

									} else {
										row7.IMPORT_DATE = null;
									}

								} else {
									row7.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 17;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.SOURCESYSTEM_CD = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 18;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.UPLOAD_ID = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_7 = true;

							System.err.println(e.getMessage());
							row7 = null;

						}

						/**
						 * [tFileInputDelimited_7 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_7 main ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						tos_count_tFileInputDelimited_7++;

						/**
						 * [tFileInputDelimited_7 main ] stop
						 */
						// Start of branch "row7"
						if (row7 != null) {

							/**
							 * [tUniqRow_3 main ] start
							 */

							currentComponent = "tUniqRow_3";

							row22 = null;
							finder_tUniqRow_3.PATIENT_NUM = row7.PATIENT_NUM;
							finder_tUniqRow_3.hashCodeDirty = true;
							if (!keystUniqRow_3.contains(finder_tUniqRow_3)) {
								KeyStruct_tUniqRow_3 new_tUniqRow_3 = new KeyStruct_tUniqRow_3();

								new_tUniqRow_3.PATIENT_NUM = row7.PATIENT_NUM;

								keystUniqRow_3.add(new_tUniqRow_3);
								if (row22 == null) {
									row22 = new row22Struct();
								}
								row22.PATIENT_NUM = row7.PATIENT_NUM;
								row22.VITAL_STATUS_CD = row7.VITAL_STATUS_CD;
								row22.BIRTH_DATE = row7.BIRTH_DATE;
								row22.DEATH_DATE = row7.DEATH_DATE;
								row22.SEX_CD = row7.SEX_CD;
								row22.AGE_IN_YEARS_NUM = row7.AGE_IN_YEARS_NUM;
								row22.LANGUAGE_CD = row7.LANGUAGE_CD;
								row22.RACE_CD = row7.RACE_CD;
								row22.MARITAL_STATUS_CD = row7.MARITAL_STATUS_CD;
								row22.RELIGION_CD = row7.RELIGION_CD;
								row22.ZIP_CD = row7.ZIP_CD;
								row22.STATECITYZIP_PATH = row7.STATECITYZIP_PATH;
								row22.INCOME_CD = row7.INCOME_CD;
								row22.PATIENT_BLOB = row7.PATIENT_BLOB;
								row22.UPDATE_DATE = row7.UPDATE_DATE;
								row22.DOWNLOAD_DATE = row7.DOWNLOAD_DATE;
								row22.IMPORT_DATE = row7.IMPORT_DATE;
								row22.SOURCESYSTEM_CD = row7.SOURCESYSTEM_CD;
								row22.UPLOAD_ID = row7.UPLOAD_ID;
								nb_uniques_tUniqRow_3++;
							} else {
								nb_duplicates_tUniqRow_3++;
							}

							tos_count_tUniqRow_3++;

							/**
							 * [tUniqRow_3 main ] stop
							 */
							// Start of branch "row22"
							if (row22 != null) {

								/**
								 * [tOracleOutput_4 main ] start
								 */

								currentComponent = "tOracleOutput_4";

								query_tOracleOutput_4 = new StringBuffer("");
								whetherReject_tOracleOutput_4 = false;
								pstmt_tOracleOutput_4.setBigDecimal(1,
										row22.PATIENT_NUM);

								query_tOracleOutput_4 = query_tOracleOutput_4
										.append(insertSQLSplits_tOracleOutput_4[0])
										.append(row22.PATIENT_NUM == null ? "null"
												: String.valueOf(row22.PATIENT_NUM))
										.append(insertSQLSplits_tOracleOutput_4[1]);
								if (row22.VITAL_STATUS_CD == null) {
									pstmt_tOracleOutput_4.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_4.setString(2,
											row22.VITAL_STATUS_CD);
								}

								query_tOracleOutput_4 = query_tOracleOutput_4
										.append(row22.VITAL_STATUS_CD == null ? "null"
												: "'" + row22.VITAL_STATUS_CD
														+ "'")
										.append(insertSQLSplits_tOracleOutput_4[2]);
								if (row22.BIRTH_DATE == null) {
									pstmt_tOracleOutput_4.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_4.setString(3,
											row22.BIRTH_DATE);
								}

								query_tOracleOutput_4 = query_tOracleOutput_4
										.append(row22.BIRTH_DATE == null ? "null"
												: "'" + row22.BIRTH_DATE + "'")
										.append(insertSQLSplits_tOracleOutput_4[3]);
								if (row22.DEATH_DATE == null) {
									pstmt_tOracleOutput_4.setNull(4,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_4.setString(4,
											row22.DEATH_DATE);
								}

								query_tOracleOutput_4 = query_tOracleOutput_4
										.append(row22.DEATH_DATE == null ? "null"
												: "'" + row22.DEATH_DATE + "'")
										.append(insertSQLSplits_tOracleOutput_4[4]);
								if (row22.SEX_CD == null) {
									pstmt_tOracleOutput_4.setNull(5,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_4.setString(5,
											row22.SEX_CD);
								}

								query_tOracleOutput_4 = query_tOracleOutput_4
										.append(row22.SEX_CD == null ? "null"
												: "'" + row22.SEX_CD + "'")
										.append(insertSQLSplits_tOracleOutput_4[5]);
								if (row22.AGE_IN_YEARS_NUM == null) {
									pstmt_tOracleOutput_4.setNull(6,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_4.setString(6,
											row22.AGE_IN_YEARS_NUM);
								}

								query_tOracleOutput_4 = query_tOracleOutput_4
										.append(row22.AGE_IN_YEARS_NUM == null ? "null"
												: "'" + row22.AGE_IN_YEARS_NUM
														+ "'")
										.append(insertSQLSplits_tOracleOutput_4[6]);
								if (row22.LANGUAGE_CD == null) {
									pstmt_tOracleOutput_4.setNull(7,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_4.setString(7,
											row22.LANGUAGE_CD);
								}

								query_tOracleOutput_4 = query_tOracleOutput_4
										.append(row22.LANGUAGE_CD == null ? "null"
												: "'" + row22.LANGUAGE_CD + "'")
										.append(insertSQLSplits_tOracleOutput_4[7]);
								if (row22.RACE_CD == null) {
									pstmt_tOracleOutput_4.setNull(8,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_4.setString(8,
											row22.RACE_CD);
								}

								query_tOracleOutput_4 = query_tOracleOutput_4
										.append(row22.RACE_CD == null ? "null"
												: "'" + row22.RACE_CD + "'")
										.append(insertSQLSplits_tOracleOutput_4[8]);
								if (row22.MARITAL_STATUS_CD == null) {
									pstmt_tOracleOutput_4.setNull(9,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_4.setString(9,
											row22.MARITAL_STATUS_CD);
								}

								query_tOracleOutput_4 = query_tOracleOutput_4
										.append(row22.MARITAL_STATUS_CD == null ? "null"
												: "'" + row22.MARITAL_STATUS_CD
														+ "'")
										.append(insertSQLSplits_tOracleOutput_4[9]);
								if (row22.RELIGION_CD == null) {
									pstmt_tOracleOutput_4.setNull(10,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_4.setString(10,
											row22.RELIGION_CD);
								}

								query_tOracleOutput_4 = query_tOracleOutput_4
										.append(row22.RELIGION_CD == null ? "null"
												: "'" + row22.RELIGION_CD + "'")
										.append(insertSQLSplits_tOracleOutput_4[10]);
								if (row22.ZIP_CD == null) {
									pstmt_tOracleOutput_4.setNull(11,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_4.setString(11,
											row22.ZIP_CD);
								}

								query_tOracleOutput_4 = query_tOracleOutput_4
										.append(row22.ZIP_CD == null ? "null"
												: "'" + row22.ZIP_CD + "'")
										.append(insertSQLSplits_tOracleOutput_4[11]);
								if (row22.STATECITYZIP_PATH == null) {
									pstmt_tOracleOutput_4.setNull(12,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_4.setString(12,
											row22.STATECITYZIP_PATH);
								}

								query_tOracleOutput_4 = query_tOracleOutput_4
										.append(row22.STATECITYZIP_PATH == null ? "null"
												: "'" + row22.STATECITYZIP_PATH
														+ "'")
										.append(insertSQLSplits_tOracleOutput_4[12]);
								if (row22.INCOME_CD == null) {
									pstmt_tOracleOutput_4.setNull(13,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_4.setString(13,
											row22.INCOME_CD);
								}

								query_tOracleOutput_4 = query_tOracleOutput_4
										.append(row22.INCOME_CD == null ? "null"
												: "'" + row22.INCOME_CD + "'")
										.append(insertSQLSplits_tOracleOutput_4[13]);
								if (row22.PATIENT_BLOB == null) {
									pstmt_tOracleOutput_4.setNull(14,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_4.setString(14,
											row22.PATIENT_BLOB);
								}

								query_tOracleOutput_4 = query_tOracleOutput_4
										.append(row22.PATIENT_BLOB == null ? "null"
												: "'" + row22.PATIENT_BLOB
														+ "'")
										.append(insertSQLSplits_tOracleOutput_4[14]);
								if (row22.UPDATE_DATE != null) {
									pstmt_tOracleOutput_4
											.setObject(
													15,
													new java.sql.Timestamp(
															row22.UPDATE_DATE
																	.getTime()),
													java.sql.Types.DATE);
								} else {
									pstmt_tOracleOutput_4.setNull(15,
											java.sql.Types.DATE);
								}

								query_tOracleOutput_4 = query_tOracleOutput_4
										.append(row22.UPDATE_DATE == null ? "null"
												: "'"
														+ new java.text.SimpleDateFormat(
																"dd-MM-yyyy")
																.format(row22.UPDATE_DATE)
														+ "'")
										.append(insertSQLSplits_tOracleOutput_4[15]);
								if (row22.DOWNLOAD_DATE != null) {
									pstmt_tOracleOutput_4.setObject(
											16,
											new java.sql.Timestamp(
													row22.DOWNLOAD_DATE
															.getTime()),
											java.sql.Types.DATE);
								} else {
									pstmt_tOracleOutput_4.setNull(16,
											java.sql.Types.DATE);
								}

								query_tOracleOutput_4 = query_tOracleOutput_4
										.append(row22.DOWNLOAD_DATE == null ? "null"
												: "'"
														+ new java.text.SimpleDateFormat(
																"dd-MM-yyyy")
																.format(row22.DOWNLOAD_DATE)
														+ "'")
										.append(insertSQLSplits_tOracleOutput_4[16]);
								if (row22.IMPORT_DATE != null) {
									pstmt_tOracleOutput_4
											.setObject(
													17,
													new java.sql.Timestamp(
															row22.IMPORT_DATE
																	.getTime()),
													java.sql.Types.DATE);
								} else {
									pstmt_tOracleOutput_4.setNull(17,
											java.sql.Types.DATE);
								}

								query_tOracleOutput_4 = query_tOracleOutput_4
										.append(row22.IMPORT_DATE == null ? "null"
												: "'"
														+ new java.text.SimpleDateFormat(
																"dd-MM-yyyy")
																.format(row22.IMPORT_DATE)
														+ "'")
										.append(insertSQLSplits_tOracleOutput_4[17]);
								if (row22.SOURCESYSTEM_CD == null) {
									pstmt_tOracleOutput_4.setNull(18,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_4.setString(18,
											row22.SOURCESYSTEM_CD);
								}

								query_tOracleOutput_4 = query_tOracleOutput_4
										.append(row22.SOURCESYSTEM_CD == null ? "null"
												: "'" + row22.SOURCESYSTEM_CD
														+ "'")
										.append(insertSQLSplits_tOracleOutput_4[18]);
								if (row22.UPLOAD_ID == null) {
									pstmt_tOracleOutput_4.setNull(19,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_4.setString(19,
											row22.UPLOAD_ID);
								}

								query_tOracleOutput_4 = query_tOracleOutput_4
										.append(row22.UPLOAD_ID == null ? "null"
												: "'" + row22.UPLOAD_ID + "'")
										.append(insertSQLSplits_tOracleOutput_4[19]);
								globalMap
										.put("tOracleOutput_4_QUERY",
												query_tOracleOutput_4
														.toString().trim());

								pstmt_tOracleOutput_4.addBatch();
								nb_line_tOracleOutput_4++;

								if (!whetherReject_tOracleOutput_4) {
								}
								commitCounter_tOracleOutput_4++;
								if (commitEvery_tOracleOutput_4 <= commitCounter_tOracleOutput_4) {

									try {
										pstmt_tOracleOutput_4.executeBatch();
									} catch (java.sql.BatchUpdateException e_tOracleOutput_4) {

										throw (e_tOracleOutput_4);

									}
									tmp_batchUpdateCount_tOracleOutput_4 = pstmt_tOracleOutput_4
											.getUpdateCount();

									insertedCount_tOracleOutput_4

									+= (tmp_batchUpdateCount_tOracleOutput_4 != -1 ? tmp_batchUpdateCount_tOracleOutput_4
											: 0);

									conn_tOracleOutput_4.commit();
									commitCounter_tOracleOutput_4 = 0;
								}

								tos_count_tOracleOutput_4++;

								/**
								 * [tOracleOutput_4 main ] stop
								 */

							} // End of branch "row22"

						} // End of branch "row7"

						/**
						 * [tFileInputDelimited_7 end ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						nb_line_tFileInputDelimited_7++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_7 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_7 != null) {
							csvReadertFileInputDelimited_7.close();
						}
					}
					if (csvReadertFileInputDelimited_7 != null) {
						globalMap.put("tFileInputDelimited_7_NB_LINE",
								nb_line_tFileInputDelimited_7);
					}
				}

				ok_Hash.put("tFileInputDelimited_7", true);
				end_Hash.put("tFileInputDelimited_7",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_7 end ] stop
				 */

				/**
				 * [tUniqRow_3 end ] start
				 */

				currentComponent = "tUniqRow_3";

				globalMap.put("tUniqRow_3_NB_UNIQUES", nb_uniques_tUniqRow_3);
				globalMap.put("tUniqRow_3_NB_DUPLICATES",
						nb_duplicates_tUniqRow_3);

				ok_Hash.put("tUniqRow_3", true);
				end_Hash.put("tUniqRow_3", System.currentTimeMillis());

				/**
				 * [tUniqRow_3 end ] stop
				 */

				/**
				 * [tOracleOutput_4 end ] start
				 */

				currentComponent = "tOracleOutput_4";

				try {
					if (pstmt_tOracleOutput_4 != null) {
						pstmt_tOracleOutput_4.executeBatch();
					}
				} catch (java.sql.BatchUpdateException e_tOracleOutput_4) {

					throw (e_tOracleOutput_4);

				}
				if (pstmt_tOracleOutput_4 != null) {
					tmp_batchUpdateCount_tOracleOutput_4 = pstmt_tOracleOutput_4
							.getUpdateCount();

					insertedCount_tOracleOutput_4

					+= (tmp_batchUpdateCount_tOracleOutput_4 != -1 ? tmp_batchUpdateCount_tOracleOutput_4
							: 0);
				}
				if (pstmt_tOracleOutput_4 != null) {

					pstmt_tOracleOutput_4.close();

				}

				conn_tOracleOutput_4.commit();

				conn_tOracleOutput_4.close();

				nb_line_deleted_tOracleOutput_4 = nb_line_deleted_tOracleOutput_4
						+ deletedCount_tOracleOutput_4;
				nb_line_update_tOracleOutput_4 = nb_line_update_tOracleOutput_4
						+ updatedCount_tOracleOutput_4;
				nb_line_inserted_tOracleOutput_4 = nb_line_inserted_tOracleOutput_4
						+ insertedCount_tOracleOutput_4;
				nb_line_rejected_tOracleOutput_4 = nb_line_rejected_tOracleOutput_4
						+ rejectedCount_tOracleOutput_4;

				globalMap.put("tOracleOutput_4_NB_LINE",
						nb_line_tOracleOutput_4);
				globalMap.put("tOracleOutput_4_NB_LINE_UPDATED",
						nb_line_update_tOracleOutput_4);
				globalMap.put("tOracleOutput_4_NB_LINE_INSERTED",
						nb_line_inserted_tOracleOutput_4);
				globalMap.put("tOracleOutput_4_NB_LINE_DELETED",
						nb_line_deleted_tOracleOutput_4);
				globalMap.put("tOracleOutput_4_NB_LINE_REJECTED",
						nb_line_rejected_tOracleOutput_4);

				ok_Hash.put("tOracleOutput_4", true);
				end_Hash.put("tOracleOutput_4", System.currentTimeMillis());

				tOracleCommit_1Process(globalMap);

				/**
				 * [tOracleOutput_4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 1);
	}

	public void tJava_9Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_9 begin ] start
				 */

				ok_Hash.put("tJava_9", false);
				start_Hash.put("tJava_9", System.currentTimeMillis());
				currentComponent = "tJava_9";

				int tos_count_tJava_9 = 0;

				System.out.println("Concept Dimension: ");
				StatusListener.setSubStatus(70.0f, (int) (float) (70.0f) + "%");

				/**
				 * [tJava_9 begin ] stop
				 */
				/**
				 * [tJava_9 main ] start
				 */

				currentComponent = "tJava_9";

				tos_count_tJava_9++;

				/**
				 * [tJava_9 main ] stop
				 */
				/**
				 * [tJava_9 end ] start
				 */

				currentComponent = "tJava_9";

				ok_Hash.put("tJava_9", true);
				end_Hash.put("tJava_9", System.currentTimeMillis());

				/**
				 * [tJava_9 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_9:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_8Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_9_SUBPROCESS_STATE", 1);
	}

	public static class row19Struct implements
			routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_JDBC_Upload = new byte[0];

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_JDBC_Upload, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.CONCEPT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.CONCEPT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_JDBC_Upload = new byte[0];

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_JDBC_Upload, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.CONCEPT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.CONCEPT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_8Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();
				row19Struct row19 = new row19Struct();

				/**
				 * [tOracleOutput_3 begin ] start
				 */

				ok_Hash.put("tOracleOutput_3", false);
				start_Hash.put("tOracleOutput_3", System.currentTimeMillis());
				currentComponent = "tOracleOutput_3";

				int tos_count_tOracleOutput_3 = 0;

				int nb_line_tOracleOutput_3 = 0;
				int nb_line_update_tOracleOutput_3 = 0;
				int nb_line_inserted_tOracleOutput_3 = 0;
				int nb_line_deleted_tOracleOutput_3 = 0;
				int nb_line_rejected_tOracleOutput_3 = 0;

				int tmp_batchUpdateCount_tOracleOutput_3 = 0;

				int deletedCount_tOracleOutput_3 = 0;
				int updatedCount_tOracleOutput_3 = 0;
				int insertedCount_tOracleOutput_3 = 0;
				int rejectedCount_tOracleOutput_3 = 0;

				boolean whetherReject_tOracleOutput_3 = false;

				java.sql.Connection conn_tOracleOutput_3 = null;

				// optional table
				String dbschema_tOracleOutput_3 = null;
				String tableName_tOracleOutput_3 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleOutput_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tOracleOutput_3) {
					conn_tOracleOutput_3 = dataSources_tOracleOutput_3.get("")
							.getConnection();
				} else {

					java.lang.Class.forName("oracle.jdbc.OracleDriver");

					String url_tOracleOutput_3 = null;
					url_tOracleOutput_3 = "jdbc:oracle:thin:@" + context.DBHost
							+ ":" + context.DBPort + ":" + context.DBInstance;
					String dbUser_tOracleOutput_3 = context.DBUsername;
					String dbPwd_tOracleOutput_3 = context.DBPassword;
					dbschema_tOracleOutput_3 = context.DBSchema;

					conn_tOracleOutput_3 = java.sql.DriverManager
							.getConnection(url_tOracleOutput_3,
									dbUser_tOracleOutput_3,
									dbPwd_tOracleOutput_3);
				}
				conn_tOracleOutput_3.setAutoCommit(false);
				int commitEvery_tOracleOutput_3 = 50000;
				int commitCounter_tOracleOutput_3 = 0;

				int count_tOracleOutput_3 = 0;

				if (dbschema_tOracleOutput_3 == null
						|| dbschema_tOracleOutput_3.trim().length() == 0) {
					tableName_tOracleOutput_3 = "concept_dimension";
				} else {
					tableName_tOracleOutput_3 = dbschema_tOracleOutput_3 + "."
							+ "concept_dimension";
				}
				String insert_tOracleOutput_3 = "INSERT INTO "
						+ tableName_tOracleOutput_3
						+ " (CONCEPT_PATH,CONCEPT_CD,NAME_CHAR,CONCEPT_BLOB,UPDATE_DATE,DOWNLOAD_DATE,IMPORT_DATE,SOURCESYSTEM_CD,UPLOAD_ID) VALUES (?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tOracleOutput_3 = conn_tOracleOutput_3
						.prepareStatement(insert_tOracleOutput_3);

				StringBuffer query_tOracleOutput_3 = null;

				String[] insertSQLSplits_tOracleOutput_3 = insert_tOracleOutput_3
						.split("\\?");

				/**
				 * [tOracleOutput_3 begin ] stop
				 */

				/**
				 * [tUniqRow_1 begin ] start
				 */

				ok_Hash.put("tUniqRow_1", false);
				start_Hash.put("tUniqRow_1", System.currentTimeMillis());
				currentComponent = "tUniqRow_1";

				int tos_count_tUniqRow_1 = 0;

				class KeyStruct_tUniqRow_1 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String CONCEPT_PATH;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.CONCEPT_PATH == null) ? 0
											: this.CONCEPT_PATH.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;

						if (this.CONCEPT_PATH == null) {
							if (other.CONCEPT_PATH != null)
								return false;
						} else if (!this.CONCEPT_PATH
								.equals(other.CONCEPT_PATH))
							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_1 = 0;
				int nb_duplicates_tUniqRow_1 = 0;
				KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
				java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>();

				/**
				 * [tUniqRow_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_8 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_8", false);
				start_Hash.put("tFileInputDelimited_8",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_8";

				int tos_count_tFileInputDelimited_8 = 0;

				int nb_line_tFileInputDelimited_8 = 0;
				int footer_tFileInputDelimited_8 = 0;
				int totalLinetFileInputDelimited_8 = 0;
				int limittFileInputDelimited_8 = -1;
				int lastLinetFileInputDelimited_8 = -1;

				char fieldSeparator_tFileInputDelimited_8[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_8 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_8[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_8 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_8 = /**
				 * Start field
				 * tFileInputDelimited_8:FILENAME
				 */
				context.folderMain + context.folderOutput
						+ "concept_dimension.csv"/**
				 * End field
				 * tFileInputDelimited_8:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_8 = null;

				try {

					String[] rowtFileInputDelimited_8 = null;
					int currentLinetFileInputDelimited_8 = 0;
					int outputLinetFileInputDelimited_8 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_8 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_8 = 0;
							if (footer_value_tFileInputDelimited_8 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_8,
									fieldSeparator_tFileInputDelimited_8[0],
									context.coding);
						} else {
							csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_8)),
													context.coding)),
									fieldSeparator_tFileInputDelimited_8[0]);
						}

						csvReadertFileInputDelimited_8.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_8[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_8[0] != '\r'))
							csvReadertFileInputDelimited_8.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_8[0]);

						csvReadertFileInputDelimited_8.setQuoteChar('"');

						csvReadertFileInputDelimited_8
								.setEscapeChar(csvReadertFileInputDelimited_8
										.getQuoteChar());

						if (footer_tFileInputDelimited_8 > 0) {
							for (totalLinetFileInputDelimited_8 = 0; totalLinetFileInputDelimited_8 < 1; totalLinetFileInputDelimited_8++) {
								csvReadertFileInputDelimited_8.readNext();
							}
							csvReadertFileInputDelimited_8
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_8.readNext()) {

								rowtFileInputDelimited_8 = csvReadertFileInputDelimited_8
										.getValues();
								if (!(rowtFileInputDelimited_8.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_8[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_8++;

								}

							}
							int lastLineTemptFileInputDelimited_8 = totalLinetFileInputDelimited_8
									- footer_tFileInputDelimited_8 < 0 ? 0
									: totalLinetFileInputDelimited_8
											- footer_tFileInputDelimited_8;
							if (lastLinetFileInputDelimited_8 > 0) {
								lastLinetFileInputDelimited_8 = lastLinetFileInputDelimited_8 < lastLineTemptFileInputDelimited_8 ? lastLinetFileInputDelimited_8
										: lastLineTemptFileInputDelimited_8;
							} else {
								lastLinetFileInputDelimited_8 = lastLineTemptFileInputDelimited_8;
							}

							csvReadertFileInputDelimited_8.close();
							if (filename_tFileInputDelimited_8 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_8,
										fieldSeparator_tFileInputDelimited_8[0],
										context.coding);
							} else {
								csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_8)),
														context.coding)),
										fieldSeparator_tFileInputDelimited_8[0]);
							}
							csvReadertFileInputDelimited_8
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_8[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_8[0] != '\r'))
								csvReadertFileInputDelimited_8
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_8[0]);

							csvReadertFileInputDelimited_8.setQuoteChar('"');

							csvReadertFileInputDelimited_8
									.setEscapeChar(csvReadertFileInputDelimited_8
											.getQuoteChar());

						}

						if (limittFileInputDelimited_8 != 0) {
							for (currentLinetFileInputDelimited_8 = 0; currentLinetFileInputDelimited_8 < 1; currentLinetFileInputDelimited_8++) {
								csvReadertFileInputDelimited_8.readNext();
							}
						}
						csvReadertFileInputDelimited_8
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_8 != 0
							&& csvReadertFileInputDelimited_8 != null
							&& csvReadertFileInputDelimited_8.readNext()) {

						rowtFileInputDelimited_8 = csvReadertFileInputDelimited_8
								.getValues();

						if (rowtFileInputDelimited_8.length == 1
								&& ("\015").equals(rowtFileInputDelimited_8[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_8++;

						if (lastLinetFileInputDelimited_8 > -1
								&& currentLinetFileInputDelimited_8 > lastLinetFileInputDelimited_8) {
							break;
						}
						outputLinetFileInputDelimited_8++;
						if (limittFileInputDelimited_8 > 0
								&& outputLinetFileInputDelimited_8 > limittFileInputDelimited_8) {
							break;
						}

						row8 = null;

						boolean whetherReject_tFileInputDelimited_8 = false;
						row8 = new row8Struct();
						try {

							if (rowtFileInputDelimited_8.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_8[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row8.CONCEPT_PATH = null;

								row8.CONCEPT_CD = null;

								row8.NAME_CHAR = null;

								row8.CONCEPT_BLOB = null;

								row8.UPDATE_DATE = null;

								row8.DOWNLOAD_DATE = null;

								row8.IMPORT_DATE = null;

								row8.SOURCESYSTEM_CD = null;

								row8.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_8 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_8 = 0;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row8.CONCEPT_PATH = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row8.CONCEPT_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 1;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row8.CONCEPT_CD = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row8.CONCEPT_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 2;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row8.NAME_CHAR = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row8.NAME_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 3;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row8.CONCEPT_BLOB = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row8.CONCEPT_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 4;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									if (rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8]
											.length() > 0) {

										row8.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8],
														"dd-MM-yyyy");

									} else {
										row8.UPDATE_DATE = null;
									}

								} else {
									row8.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 5;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									if (rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8]
											.length() > 0) {

										row8.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8],
														"dd-MM-yyyy");

									} else {
										row8.DOWNLOAD_DATE = null;
									}

								} else {
									row8.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 6;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									if (rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8]
											.length() > 0) {

										row8.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8],
														"dd-MM-yyyy");

									} else {
										row8.IMPORT_DATE = null;
									}

								} else {
									row8.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 7;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row8.SOURCESYSTEM_CD = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row8.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 8;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row8.UPLOAD_ID = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row8.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_8 = true;

							System.err.println(e.getMessage());
							row8 = null;

						}

						/**
						 * [tFileInputDelimited_8 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_8 main ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						tos_count_tFileInputDelimited_8++;

						/**
						 * [tFileInputDelimited_8 main ] stop
						 */
						// Start of branch "row8"
						if (row8 != null) {

							/**
							 * [tUniqRow_1 main ] start
							 */

							currentComponent = "tUniqRow_1";

							row19 = null;
							if (row8.CONCEPT_PATH == null) {
								finder_tUniqRow_1.CONCEPT_PATH = null;
							} else {
								finder_tUniqRow_1.CONCEPT_PATH = row8.CONCEPT_PATH
										.toLowerCase();
							}
							finder_tUniqRow_1.hashCodeDirty = true;
							if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
								KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

								if (row8.CONCEPT_PATH == null) {
									new_tUniqRow_1.CONCEPT_PATH = null;
								} else {
									new_tUniqRow_1.CONCEPT_PATH = row8.CONCEPT_PATH
											.toLowerCase();
								}

								keystUniqRow_1.add(new_tUniqRow_1);
								if (row19 == null) {
									row19 = new row19Struct();
								}
								row19.CONCEPT_PATH = row8.CONCEPT_PATH;
								row19.CONCEPT_CD = row8.CONCEPT_CD;
								row19.NAME_CHAR = row8.NAME_CHAR;
								row19.CONCEPT_BLOB = row8.CONCEPT_BLOB;
								row19.UPDATE_DATE = row8.UPDATE_DATE;
								row19.DOWNLOAD_DATE = row8.DOWNLOAD_DATE;
								row19.IMPORT_DATE = row8.IMPORT_DATE;
								row19.SOURCESYSTEM_CD = row8.SOURCESYSTEM_CD;
								row19.UPLOAD_ID = row8.UPLOAD_ID;
								nb_uniques_tUniqRow_1++;
							} else {
								nb_duplicates_tUniqRow_1++;
							}

							tos_count_tUniqRow_1++;

							/**
							 * [tUniqRow_1 main ] stop
							 */
							// Start of branch "row19"
							if (row19 != null) {

								/**
								 * [tOracleOutput_3 main ] start
								 */

								currentComponent = "tOracleOutput_3";

								query_tOracleOutput_3 = new StringBuffer("");
								whetherReject_tOracleOutput_3 = false;
								if (row19.CONCEPT_PATH == null) {
									pstmt_tOracleOutput_3.setNull(1,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_3.setString(1,
											row19.CONCEPT_PATH);
								}

								query_tOracleOutput_3 = query_tOracleOutput_3
										.append(insertSQLSplits_tOracleOutput_3[0])
										.append(row19.CONCEPT_PATH == null ? "null"
												: "'" + row19.CONCEPT_PATH
														+ "'")
										.append(insertSQLSplits_tOracleOutput_3[1]);
								if (row19.CONCEPT_CD == null) {
									pstmt_tOracleOutput_3.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_3.setString(2,
											row19.CONCEPT_CD);
								}

								query_tOracleOutput_3 = query_tOracleOutput_3
										.append(row19.CONCEPT_CD == null ? "null"
												: "'" + row19.CONCEPT_CD + "'")
										.append(insertSQLSplits_tOracleOutput_3[2]);
								if (row19.NAME_CHAR == null) {
									pstmt_tOracleOutput_3.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_3.setString(3,
											row19.NAME_CHAR);
								}

								query_tOracleOutput_3 = query_tOracleOutput_3
										.append(row19.NAME_CHAR == null ? "null"
												: "'" + row19.NAME_CHAR + "'")
										.append(insertSQLSplits_tOracleOutput_3[3]);
								if (row19.CONCEPT_BLOB == null) {
									pstmt_tOracleOutput_3.setNull(4,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_3.setString(4,
											row19.CONCEPT_BLOB);
								}

								query_tOracleOutput_3 = query_tOracleOutput_3
										.append(row19.CONCEPT_BLOB == null ? "null"
												: "'" + row19.CONCEPT_BLOB
														+ "'")
										.append(insertSQLSplits_tOracleOutput_3[4]);
								if (row19.UPDATE_DATE != null) {
									pstmt_tOracleOutput_3
											.setObject(
													5,
													new java.sql.Timestamp(
															row19.UPDATE_DATE
																	.getTime()),
													java.sql.Types.DATE);
								} else {
									pstmt_tOracleOutput_3.setNull(5,
											java.sql.Types.DATE);
								}

								query_tOracleOutput_3 = query_tOracleOutput_3
										.append(row19.UPDATE_DATE == null ? "null"
												: "'"
														+ new java.text.SimpleDateFormat(
																"dd-MM-yyyy")
																.format(row19.UPDATE_DATE)
														+ "'")
										.append(insertSQLSplits_tOracleOutput_3[5]);
								if (row19.DOWNLOAD_DATE != null) {
									pstmt_tOracleOutput_3.setObject(
											6,
											new java.sql.Timestamp(
													row19.DOWNLOAD_DATE
															.getTime()),
											java.sql.Types.DATE);
								} else {
									pstmt_tOracleOutput_3.setNull(6,
											java.sql.Types.DATE);
								}

								query_tOracleOutput_3 = query_tOracleOutput_3
										.append(row19.DOWNLOAD_DATE == null ? "null"
												: "'"
														+ new java.text.SimpleDateFormat(
																"dd-MM-yyyy")
																.format(row19.DOWNLOAD_DATE)
														+ "'")
										.append(insertSQLSplits_tOracleOutput_3[6]);
								if (row19.IMPORT_DATE != null) {
									pstmt_tOracleOutput_3
											.setObject(
													7,
													new java.sql.Timestamp(
															row19.IMPORT_DATE
																	.getTime()),
													java.sql.Types.DATE);
								} else {
									pstmt_tOracleOutput_3.setNull(7,
											java.sql.Types.DATE);
								}

								query_tOracleOutput_3 = query_tOracleOutput_3
										.append(row19.IMPORT_DATE == null ? "null"
												: "'"
														+ new java.text.SimpleDateFormat(
																"dd-MM-yyyy")
																.format(row19.IMPORT_DATE)
														+ "'")
										.append(insertSQLSplits_tOracleOutput_3[7]);
								if (row19.SOURCESYSTEM_CD == null) {
									pstmt_tOracleOutput_3.setNull(8,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_3.setString(8,
											row19.SOURCESYSTEM_CD);
								}

								query_tOracleOutput_3 = query_tOracleOutput_3
										.append(row19.SOURCESYSTEM_CD == null ? "null"
												: "'" + row19.SOURCESYSTEM_CD
														+ "'")
										.append(insertSQLSplits_tOracleOutput_3[8]);
								if (row19.UPLOAD_ID == null) {
									pstmt_tOracleOutput_3.setNull(9,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_3.setString(9,
											row19.UPLOAD_ID);
								}

								query_tOracleOutput_3 = query_tOracleOutput_3
										.append(row19.UPLOAD_ID == null ? "null"
												: "'" + row19.UPLOAD_ID + "'")
										.append(insertSQLSplits_tOracleOutput_3[9]);
								globalMap
										.put("tOracleOutput_3_QUERY",
												query_tOracleOutput_3
														.toString().trim());

								pstmt_tOracleOutput_3.addBatch();
								nb_line_tOracleOutput_3++;

								if (!whetherReject_tOracleOutput_3) {
								}
								commitCounter_tOracleOutput_3++;
								if (commitEvery_tOracleOutput_3 <= commitCounter_tOracleOutput_3) {

									try {
										pstmt_tOracleOutput_3.executeBatch();
									} catch (java.sql.BatchUpdateException e_tOracleOutput_3) {

										throw (e_tOracleOutput_3);

									}
									tmp_batchUpdateCount_tOracleOutput_3 = pstmt_tOracleOutput_3
											.getUpdateCount();

									insertedCount_tOracleOutput_3

									+= (tmp_batchUpdateCount_tOracleOutput_3 != -1 ? tmp_batchUpdateCount_tOracleOutput_3
											: 0);

									conn_tOracleOutput_3.commit();
									commitCounter_tOracleOutput_3 = 0;
								}

								tos_count_tOracleOutput_3++;

								/**
								 * [tOracleOutput_3 main ] stop
								 */

							} // End of branch "row19"

						} // End of branch "row8"

						/**
						 * [tFileInputDelimited_8 end ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						nb_line_tFileInputDelimited_8++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_8 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_8 != null) {
							csvReadertFileInputDelimited_8.close();
						}
					}
					if (csvReadertFileInputDelimited_8 != null) {
						globalMap.put("tFileInputDelimited_8_NB_LINE",
								nb_line_tFileInputDelimited_8);
					}
				}

				ok_Hash.put("tFileInputDelimited_8", true);
				end_Hash.put("tFileInputDelimited_8",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_8 end ] stop
				 */

				/**
				 * [tUniqRow_1 end ] start
				 */

				currentComponent = "tUniqRow_1";

				globalMap.put("tUniqRow_1_NB_UNIQUES", nb_uniques_tUniqRow_1);
				globalMap.put("tUniqRow_1_NB_DUPLICATES",
						nb_duplicates_tUniqRow_1);

				ok_Hash.put("tUniqRow_1", true);
				end_Hash.put("tUniqRow_1", System.currentTimeMillis());

				/**
				 * [tUniqRow_1 end ] stop
				 */

				/**
				 * [tOracleOutput_3 end ] start
				 */

				currentComponent = "tOracleOutput_3";

				try {
					if (pstmt_tOracleOutput_3 != null) {
						pstmt_tOracleOutput_3.executeBatch();
					}
				} catch (java.sql.BatchUpdateException e_tOracleOutput_3) {

					throw (e_tOracleOutput_3);

				}
				if (pstmt_tOracleOutput_3 != null) {
					tmp_batchUpdateCount_tOracleOutput_3 = pstmt_tOracleOutput_3
							.getUpdateCount();

					insertedCount_tOracleOutput_3

					+= (tmp_batchUpdateCount_tOracleOutput_3 != -1 ? tmp_batchUpdateCount_tOracleOutput_3
							: 0);
				}
				if (pstmt_tOracleOutput_3 != null) {

					pstmt_tOracleOutput_3.close();

				}

				conn_tOracleOutput_3.commit();

				conn_tOracleOutput_3.close();

				nb_line_deleted_tOracleOutput_3 = nb_line_deleted_tOracleOutput_3
						+ deletedCount_tOracleOutput_3;
				nb_line_update_tOracleOutput_3 = nb_line_update_tOracleOutput_3
						+ updatedCount_tOracleOutput_3;
				nb_line_inserted_tOracleOutput_3 = nb_line_inserted_tOracleOutput_3
						+ insertedCount_tOracleOutput_3;
				nb_line_rejected_tOracleOutput_3 = nb_line_rejected_tOracleOutput_3
						+ rejectedCount_tOracleOutput_3;

				globalMap.put("tOracleOutput_3_NB_LINE",
						nb_line_tOracleOutput_3);
				globalMap.put("tOracleOutput_3_NB_LINE_UPDATED",
						nb_line_update_tOracleOutput_3);
				globalMap.put("tOracleOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tOracleOutput_3);
				globalMap.put("tOracleOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tOracleOutput_3);
				globalMap.put("tOracleOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tOracleOutput_3);

				ok_Hash.put("tOracleOutput_3", true);
				end_Hash.put("tOracleOutput_3", System.currentTimeMillis());

				tOracleCommit_1Process(globalMap);

				/**
				 * [tOracleOutput_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 1);
	}

	public void tJava_14Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_14 begin ] start
				 */

				ok_Hash.put("tJava_14", false);
				start_Hash.put("tJava_14", System.currentTimeMillis());
				currentComponent = "tJava_14";

				int tos_count_tJava_14 = 0;

				System.out.println("Modifier Dimension: ");
				StatusListener.setSubStatus(80.0f, (int) (float) (80.0f) + "%");

				/**
				 * [tJava_14 begin ] stop
				 */
				/**
				 * [tJava_14 main ] start
				 */

				currentComponent = "tJava_14";

				tos_count_tJava_14++;

				/**
				 * [tJava_14 main ] stop
				 */
				/**
				 * [tJava_14 end ] start
				 */

				currentComponent = "tJava_14";

				ok_Hash.put("tJava_14", true);
				end_Hash.put("tJava_14", System.currentTimeMillis());

				/**
				 * [tJava_14 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_14:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_14Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_14_SUBPROCESS_STATE", 1);
	}

	public static class row20Struct implements
			routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_JDBC_Upload = new byte[0];

		public String MODIFIER_PATH;

		public String getMODIFIER_PATH() {
			return this.MODIFIER_PATH;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String MODIFIER_BLOB;

		public String getMODIFIER_BLOB() {
			return this.MODIFIER_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_JDBC_Upload, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.MODIFIER_PATH = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.MODIFIER_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MODIFIER_PATH, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.MODIFIER_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MODIFIER_PATH=" + MODIFIER_PATH);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",MODIFIER_BLOB=" + MODIFIER_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row17Struct implements
			routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_JDBC_Upload = new byte[0];

		public String MODIFIER_PATH;

		public String getMODIFIER_PATH() {
			return this.MODIFIER_PATH;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String MODIFIER_BLOB;

		public String getMODIFIER_BLOB() {
			return this.MODIFIER_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_JDBC_Upload, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.MODIFIER_PATH = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.MODIFIER_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MODIFIER_PATH, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.MODIFIER_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MODIFIER_PATH=" + MODIFIER_PATH);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",MODIFIER_BLOB=" + MODIFIER_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_14Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row17Struct row17 = new row17Struct();
				row20Struct row20 = new row20Struct();

				/**
				 * [tOracleOutput_9 begin ] start
				 */

				ok_Hash.put("tOracleOutput_9", false);
				start_Hash.put("tOracleOutput_9", System.currentTimeMillis());
				currentComponent = "tOracleOutput_9";

				int tos_count_tOracleOutput_9 = 0;

				int nb_line_tOracleOutput_9 = 0;
				int nb_line_update_tOracleOutput_9 = 0;
				int nb_line_inserted_tOracleOutput_9 = 0;
				int nb_line_deleted_tOracleOutput_9 = 0;
				int nb_line_rejected_tOracleOutput_9 = 0;

				int tmp_batchUpdateCount_tOracleOutput_9 = 0;

				int deletedCount_tOracleOutput_9 = 0;
				int updatedCount_tOracleOutput_9 = 0;
				int insertedCount_tOracleOutput_9 = 0;
				int rejectedCount_tOracleOutput_9 = 0;

				boolean whetherReject_tOracleOutput_9 = false;

				java.sql.Connection conn_tOracleOutput_9 = null;

				// optional table
				String dbschema_tOracleOutput_9 = null;
				String tableName_tOracleOutput_9 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleOutput_9 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tOracleOutput_9) {
					conn_tOracleOutput_9 = dataSources_tOracleOutput_9.get("")
							.getConnection();
				} else {

					java.lang.Class.forName("oracle.jdbc.OracleDriver");

					String url_tOracleOutput_9 = null;
					url_tOracleOutput_9 = "jdbc:oracle:thin:@" + context.DBHost
							+ ":" + context.DBPort + ":" + context.DBInstance;
					String dbUser_tOracleOutput_9 = context.DBUsername;
					String dbPwd_tOracleOutput_9 = context.DBPassword;
					dbschema_tOracleOutput_9 = context.DBSchema;

					conn_tOracleOutput_9 = java.sql.DriverManager
							.getConnection(url_tOracleOutput_9,
									dbUser_tOracleOutput_9,
									dbPwd_tOracleOutput_9);
				}
				conn_tOracleOutput_9.setAutoCommit(false);
				int commitEvery_tOracleOutput_9 = 50000;
				int commitCounter_tOracleOutput_9 = 0;

				int count_tOracleOutput_9 = 0;

				if (dbschema_tOracleOutput_9 == null
						|| dbschema_tOracleOutput_9.trim().length() == 0) {
					tableName_tOracleOutput_9 = "modifier_dimension";
				} else {
					tableName_tOracleOutput_9 = dbschema_tOracleOutput_9 + "."
							+ "modifier_dimension";
				}
				String insert_tOracleOutput_9 = "INSERT INTO "
						+ tableName_tOracleOutput_9
						+ " (MODIFIER_PATH,MODIFIER_CD,NAME_CHAR,MODIFIER_BLOB,UPDATE_DATE,DOWNLOAD_DATE,IMPORT_DATE,SOURCESYSTEM_CD,UPLOAD_ID) VALUES (?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tOracleOutput_9 = conn_tOracleOutput_9
						.prepareStatement(insert_tOracleOutput_9);

				StringBuffer query_tOracleOutput_9 = null;

				String[] insertSQLSplits_tOracleOutput_9 = insert_tOracleOutput_9
						.split("\\?");

				/**
				 * [tOracleOutput_9 begin ] stop
				 */

				/**
				 * [tUniqRow_2 begin ] start
				 */

				ok_Hash.put("tUniqRow_2", false);
				start_Hash.put("tUniqRow_2", System.currentTimeMillis());
				currentComponent = "tUniqRow_2";

				int tos_count_tUniqRow_2 = 0;

				class KeyStruct_tUniqRow_2 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String MODIFIER_PATH;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.MODIFIER_PATH == null) ? 0
											: this.MODIFIER_PATH.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;

						if (this.MODIFIER_PATH == null) {
							if (other.MODIFIER_PATH != null)
								return false;
						} else if (!this.MODIFIER_PATH
								.equals(other.MODIFIER_PATH))
							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_2 = 0;
				int nb_duplicates_tUniqRow_2 = 0;
				KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
				java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>();

				/**
				 * [tUniqRow_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_14 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_14", false);
				start_Hash.put("tFileInputDelimited_14",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_14";

				int tos_count_tFileInputDelimited_14 = 0;

				int nb_line_tFileInputDelimited_14 = 0;
				int footer_tFileInputDelimited_14 = 0;
				int totalLinetFileInputDelimited_14 = 0;
				int limittFileInputDelimited_14 = -1;
				int lastLinetFileInputDelimited_14 = -1;

				char fieldSeparator_tFileInputDelimited_14[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_14 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_14[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_14 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_14 = /**
				 * Start field
				 * tFileInputDelimited_14:FILENAME
				 */
				context.folderMain + context.folderOutput
						+ "modifier_dimension.csv"/**
				 * End field
				 * tFileInputDelimited_14:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_14 = null;

				try {

					String[] rowtFileInputDelimited_14 = null;
					int currentLinetFileInputDelimited_14 = 0;
					int outputLinetFileInputDelimited_14 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_14 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_14 = 0;
							if (footer_value_tFileInputDelimited_14 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_14 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_14,
									fieldSeparator_tFileInputDelimited_14[0],
									context.coding);
						} else {
							csvReadertFileInputDelimited_14 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_14)),
													context.coding)),
									fieldSeparator_tFileInputDelimited_14[0]);
						}

						csvReadertFileInputDelimited_14
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_14[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_14[0] != '\r'))
							csvReadertFileInputDelimited_14.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_14[0]);

						csvReadertFileInputDelimited_14.setQuoteChar('"');

						csvReadertFileInputDelimited_14
								.setEscapeChar(csvReadertFileInputDelimited_14
										.getQuoteChar());

						if (footer_tFileInputDelimited_14 > 0) {
							for (totalLinetFileInputDelimited_14 = 0; totalLinetFileInputDelimited_14 < 1; totalLinetFileInputDelimited_14++) {
								csvReadertFileInputDelimited_14.readNext();
							}
							csvReadertFileInputDelimited_14
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_14.readNext()) {

								rowtFileInputDelimited_14 = csvReadertFileInputDelimited_14
										.getValues();
								if (!(rowtFileInputDelimited_14.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_14[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_14++;

								}

							}
							int lastLineTemptFileInputDelimited_14 = totalLinetFileInputDelimited_14
									- footer_tFileInputDelimited_14 < 0 ? 0
									: totalLinetFileInputDelimited_14
											- footer_tFileInputDelimited_14;
							if (lastLinetFileInputDelimited_14 > 0) {
								lastLinetFileInputDelimited_14 = lastLinetFileInputDelimited_14 < lastLineTemptFileInputDelimited_14 ? lastLinetFileInputDelimited_14
										: lastLineTemptFileInputDelimited_14;
							} else {
								lastLinetFileInputDelimited_14 = lastLineTemptFileInputDelimited_14;
							}

							csvReadertFileInputDelimited_14.close();
							if (filename_tFileInputDelimited_14 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_14 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_14,
										fieldSeparator_tFileInputDelimited_14[0],
										context.coding);
							} else {
								csvReadertFileInputDelimited_14 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_14)),
														context.coding)),
										fieldSeparator_tFileInputDelimited_14[0]);
							}
							csvReadertFileInputDelimited_14
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_14[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_14[0] != '\r'))
								csvReadertFileInputDelimited_14
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_14[0]);

							csvReadertFileInputDelimited_14.setQuoteChar('"');

							csvReadertFileInputDelimited_14
									.setEscapeChar(csvReadertFileInputDelimited_14
											.getQuoteChar());

						}

						if (limittFileInputDelimited_14 != 0) {
							for (currentLinetFileInputDelimited_14 = 0; currentLinetFileInputDelimited_14 < 1; currentLinetFileInputDelimited_14++) {
								csvReadertFileInputDelimited_14.readNext();
							}
						}
						csvReadertFileInputDelimited_14
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_14 != 0
							&& csvReadertFileInputDelimited_14 != null
							&& csvReadertFileInputDelimited_14.readNext()) {

						rowtFileInputDelimited_14 = csvReadertFileInputDelimited_14
								.getValues();

						if (rowtFileInputDelimited_14.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_14[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_14++;

						if (lastLinetFileInputDelimited_14 > -1
								&& currentLinetFileInputDelimited_14 > lastLinetFileInputDelimited_14) {
							break;
						}
						outputLinetFileInputDelimited_14++;
						if (limittFileInputDelimited_14 > 0
								&& outputLinetFileInputDelimited_14 > limittFileInputDelimited_14) {
							break;
						}

						row17 = null;

						boolean whetherReject_tFileInputDelimited_14 = false;
						row17 = new row17Struct();
						try {

							if (rowtFileInputDelimited_14.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_14[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row17.MODIFIER_PATH = null;

								row17.MODIFIER_CD = null;

								row17.NAME_CHAR = null;

								row17.MODIFIER_BLOB = null;

								row17.UPDATE_DATE = null;

								row17.DOWNLOAD_DATE = null;

								row17.IMPORT_DATE = null;

								row17.SOURCESYSTEM_CD = null;

								row17.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_14 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_14 = 0;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									row17.MODIFIER_PATH = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									row17.MODIFIER_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 1;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									row17.MODIFIER_CD = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									row17.MODIFIER_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 2;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									row17.NAME_CHAR = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									row17.NAME_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 3;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									row17.MODIFIER_BLOB = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									row17.MODIFIER_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 4;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									if (rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14]
											.length() > 0) {

										row17.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14],
														"yyyy-MM-dd");

									} else {
										row17.UPDATE_DATE = null;
									}

								} else {
									row17.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 5;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									if (rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14]
											.length() > 0) {

										row17.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14],
														"yyyy-MM-dd");

									} else {
										row17.DOWNLOAD_DATE = null;
									}

								} else {
									row17.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 6;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									if (rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14]
											.length() > 0) {

										row17.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14],
														"yyyy-MM-dd");

									} else {
										row17.IMPORT_DATE = null;
									}

								} else {
									row17.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 7;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									row17.SOURCESYSTEM_CD = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									row17.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 8;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									row17.UPLOAD_ID = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									row17.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_14 = true;

							System.err.println(e.getMessage());
							row17 = null;

						}

						/**
						 * [tFileInputDelimited_14 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_14 main ] start
						 */

						currentComponent = "tFileInputDelimited_14";

						tos_count_tFileInputDelimited_14++;

						/**
						 * [tFileInputDelimited_14 main ] stop
						 */
						// Start of branch "row17"
						if (row17 != null) {

							/**
							 * [tUniqRow_2 main ] start
							 */

							currentComponent = "tUniqRow_2";

							row20 = null;
							if (row17.MODIFIER_PATH == null) {
								finder_tUniqRow_2.MODIFIER_PATH = null;
							} else {
								finder_tUniqRow_2.MODIFIER_PATH = row17.MODIFIER_PATH
										.toLowerCase();
							}
							finder_tUniqRow_2.hashCodeDirty = true;
							if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
								KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

								if (row17.MODIFIER_PATH == null) {
									new_tUniqRow_2.MODIFIER_PATH = null;
								} else {
									new_tUniqRow_2.MODIFIER_PATH = row17.MODIFIER_PATH
											.toLowerCase();
								}

								keystUniqRow_2.add(new_tUniqRow_2);
								if (row20 == null) {
									row20 = new row20Struct();
								}
								row20.MODIFIER_PATH = row17.MODIFIER_PATH;
								row20.MODIFIER_CD = row17.MODIFIER_CD;
								row20.NAME_CHAR = row17.NAME_CHAR;
								row20.MODIFIER_BLOB = row17.MODIFIER_BLOB;
								row20.UPDATE_DATE = row17.UPDATE_DATE;
								row20.DOWNLOAD_DATE = row17.DOWNLOAD_DATE;
								row20.IMPORT_DATE = row17.IMPORT_DATE;
								row20.SOURCESYSTEM_CD = row17.SOURCESYSTEM_CD;
								row20.UPLOAD_ID = row17.UPLOAD_ID;
								nb_uniques_tUniqRow_2++;
							} else {
								nb_duplicates_tUniqRow_2++;
							}

							tos_count_tUniqRow_2++;

							/**
							 * [tUniqRow_2 main ] stop
							 */
							// Start of branch "row20"
							if (row20 != null) {

								/**
								 * [tOracleOutput_9 main ] start
								 */

								currentComponent = "tOracleOutput_9";

								query_tOracleOutput_9 = new StringBuffer("");
								whetherReject_tOracleOutput_9 = false;
								if (row20.MODIFIER_PATH == null) {
									pstmt_tOracleOutput_9.setNull(1,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_9.setString(1,
											row20.MODIFIER_PATH);
								}

								query_tOracleOutput_9 = query_tOracleOutput_9
										.append(insertSQLSplits_tOracleOutput_9[0])
										.append(row20.MODIFIER_PATH == null ? "null"
												: "'" + row20.MODIFIER_PATH
														+ "'")
										.append(insertSQLSplits_tOracleOutput_9[1]);
								if (row20.MODIFIER_CD == null) {
									pstmt_tOracleOutput_9.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_9.setString(2,
											row20.MODIFIER_CD);
								}

								query_tOracleOutput_9 = query_tOracleOutput_9
										.append(row20.MODIFIER_CD == null ? "null"
												: "'" + row20.MODIFIER_CD + "'")
										.append(insertSQLSplits_tOracleOutput_9[2]);
								if (row20.NAME_CHAR == null) {
									pstmt_tOracleOutput_9.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_9.setString(3,
											row20.NAME_CHAR);
								}

								query_tOracleOutput_9 = query_tOracleOutput_9
										.append(row20.NAME_CHAR == null ? "null"
												: "'" + row20.NAME_CHAR + "'")
										.append(insertSQLSplits_tOracleOutput_9[3]);
								if (row20.MODIFIER_BLOB == null) {
									pstmt_tOracleOutput_9.setNull(4,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_9.setString(4,
											row20.MODIFIER_BLOB);
								}

								query_tOracleOutput_9 = query_tOracleOutput_9
										.append(row20.MODIFIER_BLOB == null ? "null"
												: "'" + row20.MODIFIER_BLOB
														+ "'")
										.append(insertSQLSplits_tOracleOutput_9[4]);
								if (row20.UPDATE_DATE != null) {
									pstmt_tOracleOutput_9
											.setObject(
													5,
													new java.sql.Timestamp(
															row20.UPDATE_DATE
																	.getTime()),
													java.sql.Types.DATE);
								} else {
									pstmt_tOracleOutput_9.setNull(5,
											java.sql.Types.DATE);
								}

								query_tOracleOutput_9 = query_tOracleOutput_9
										.append(row20.UPDATE_DATE == null ? "null"
												: "'"
														+ new java.text.SimpleDateFormat(
																"yyyy-MM-dd")
																.format(row20.UPDATE_DATE)
														+ "'")
										.append(insertSQLSplits_tOracleOutput_9[5]);
								if (row20.DOWNLOAD_DATE != null) {
									pstmt_tOracleOutput_9.setObject(
											6,
											new java.sql.Timestamp(
													row20.DOWNLOAD_DATE
															.getTime()),
											java.sql.Types.DATE);
								} else {
									pstmt_tOracleOutput_9.setNull(6,
											java.sql.Types.DATE);
								}

								query_tOracleOutput_9 = query_tOracleOutput_9
										.append(row20.DOWNLOAD_DATE == null ? "null"
												: "'"
														+ new java.text.SimpleDateFormat(
																"yyyy-MM-dd")
																.format(row20.DOWNLOAD_DATE)
														+ "'")
										.append(insertSQLSplits_tOracleOutput_9[6]);
								if (row20.IMPORT_DATE != null) {
									pstmt_tOracleOutput_9
											.setObject(
													7,
													new java.sql.Timestamp(
															row20.IMPORT_DATE
																	.getTime()),
													java.sql.Types.DATE);
								} else {
									pstmt_tOracleOutput_9.setNull(7,
											java.sql.Types.DATE);
								}

								query_tOracleOutput_9 = query_tOracleOutput_9
										.append(row20.IMPORT_DATE == null ? "null"
												: "'"
														+ new java.text.SimpleDateFormat(
																"yyyy-MM-dd")
																.format(row20.IMPORT_DATE)
														+ "'")
										.append(insertSQLSplits_tOracleOutput_9[7]);
								if (row20.SOURCESYSTEM_CD == null) {
									pstmt_tOracleOutput_9.setNull(8,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_9.setString(8,
											row20.SOURCESYSTEM_CD);
								}

								query_tOracleOutput_9 = query_tOracleOutput_9
										.append(row20.SOURCESYSTEM_CD == null ? "null"
												: "'" + row20.SOURCESYSTEM_CD
														+ "'")
										.append(insertSQLSplits_tOracleOutput_9[8]);
								if (row20.UPLOAD_ID == null) {
									pstmt_tOracleOutput_9.setNull(9,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tOracleOutput_9.setString(9,
											row20.UPLOAD_ID);
								}

								query_tOracleOutput_9 = query_tOracleOutput_9
										.append(row20.UPLOAD_ID == null ? "null"
												: "'" + row20.UPLOAD_ID + "'")
										.append(insertSQLSplits_tOracleOutput_9[9]);
								globalMap
										.put("tOracleOutput_9_QUERY",
												query_tOracleOutput_9
														.toString().trim());

								pstmt_tOracleOutput_9.addBatch();
								nb_line_tOracleOutput_9++;

								if (!whetherReject_tOracleOutput_9) {
								}
								commitCounter_tOracleOutput_9++;
								if (commitEvery_tOracleOutput_9 <= commitCounter_tOracleOutput_9) {

									try {
										pstmt_tOracleOutput_9.executeBatch();
									} catch (java.sql.BatchUpdateException e_tOracleOutput_9) {

										throw (e_tOracleOutput_9);

									}
									tmp_batchUpdateCount_tOracleOutput_9 = pstmt_tOracleOutput_9
											.getUpdateCount();

									insertedCount_tOracleOutput_9

									+= (tmp_batchUpdateCount_tOracleOutput_9 != -1 ? tmp_batchUpdateCount_tOracleOutput_9
											: 0);

									conn_tOracleOutput_9.commit();
									commitCounter_tOracleOutput_9 = 0;
								}

								tos_count_tOracleOutput_9++;

								/**
								 * [tOracleOutput_9 main ] stop
								 */

							} // End of branch "row20"

						} // End of branch "row17"

						/**
						 * [tFileInputDelimited_14 end ] start
						 */

						currentComponent = "tFileInputDelimited_14";

						nb_line_tFileInputDelimited_14++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_14 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_14 != null) {
							csvReadertFileInputDelimited_14.close();
						}
					}
					if (csvReadertFileInputDelimited_14 != null) {
						globalMap.put("tFileInputDelimited_14_NB_LINE",
								nb_line_tFileInputDelimited_14);
					}
				}

				ok_Hash.put("tFileInputDelimited_14", true);
				end_Hash.put("tFileInputDelimited_14",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_14 end ] stop
				 */

				/**
				 * [tUniqRow_2 end ] start
				 */

				currentComponent = "tUniqRow_2";

				globalMap.put("tUniqRow_2_NB_UNIQUES", nb_uniques_tUniqRow_2);
				globalMap.put("tUniqRow_2_NB_DUPLICATES",
						nb_duplicates_tUniqRow_2);

				ok_Hash.put("tUniqRow_2", true);
				end_Hash.put("tUniqRow_2", System.currentTimeMillis());

				/**
				 * [tUniqRow_2 end ] stop
				 */

				/**
				 * [tOracleOutput_9 end ] start
				 */

				currentComponent = "tOracleOutput_9";

				try {
					if (pstmt_tOracleOutput_9 != null) {
						pstmt_tOracleOutput_9.executeBatch();
					}
				} catch (java.sql.BatchUpdateException e_tOracleOutput_9) {

					throw (e_tOracleOutput_9);

				}
				if (pstmt_tOracleOutput_9 != null) {
					tmp_batchUpdateCount_tOracleOutput_9 = pstmt_tOracleOutput_9
							.getUpdateCount();

					insertedCount_tOracleOutput_9

					+= (tmp_batchUpdateCount_tOracleOutput_9 != -1 ? tmp_batchUpdateCount_tOracleOutput_9
							: 0);
				}
				if (pstmt_tOracleOutput_9 != null) {

					pstmt_tOracleOutput_9.close();

				}

				conn_tOracleOutput_9.commit();

				conn_tOracleOutput_9.close();

				nb_line_deleted_tOracleOutput_9 = nb_line_deleted_tOracleOutput_9
						+ deletedCount_tOracleOutput_9;
				nb_line_update_tOracleOutput_9 = nb_line_update_tOracleOutput_9
						+ updatedCount_tOracleOutput_9;
				nb_line_inserted_tOracleOutput_9 = nb_line_inserted_tOracleOutput_9
						+ insertedCount_tOracleOutput_9;
				nb_line_rejected_tOracleOutput_9 = nb_line_rejected_tOracleOutput_9
						+ rejectedCount_tOracleOutput_9;

				globalMap.put("tOracleOutput_9_NB_LINE",
						nb_line_tOracleOutput_9);
				globalMap.put("tOracleOutput_9_NB_LINE_UPDATED",
						nb_line_update_tOracleOutput_9);
				globalMap.put("tOracleOutput_9_NB_LINE_INSERTED",
						nb_line_inserted_tOracleOutput_9);
				globalMap.put("tOracleOutput_9_NB_LINE_DELETED",
						nb_line_deleted_tOracleOutput_9);
				globalMap.put("tOracleOutput_9_NB_LINE_REJECTED",
						nb_line_rejected_tOracleOutput_9);

				ok_Hash.put("tOracleOutput_9", true);
				end_Hash.put("tOracleOutput_9", System.currentTimeMillis());

				tOracleCommit_1Process(globalMap);

				/**
				 * [tOracleOutput_9 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_14_SUBPROCESS_STATE", 1);
	}

	public void tJava_15Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_15 begin ] start
				 */

				ok_Hash.put("tJava_15", false);
				start_Hash.put("tJava_15", System.currentTimeMillis());
				currentComponent = "tJava_15";

				int tos_count_tJava_15 = 0;

				System.out.println("Visit Dimension: ");
				StatusListener.setSubStatus(90.0f, (int) (float) (90.0f) + "%");

				/**
				 * [tJava_15 begin ] stop
				 */
				/**
				 * [tJava_15 main ] start
				 */

				currentComponent = "tJava_15";

				tos_count_tJava_15++;

				/**
				 * [tJava_15 main ] stop
				 */
				/**
				 * [tJava_15 end ] start
				 */

				currentComponent = "tJava_15";

				ok_Hash.put("tJava_15", true);
				end_Hash.put("tJava_15", System.currentTimeMillis());

				/**
				 * [tJava_15 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_15:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_16Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_15_SUBPROCESS_STATE", 1);
	}

	public static class row18Struct implements
			routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_TOS_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_IDRT_JDBC_Upload = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String ACTIVE_STATUS_CD;

		public String getACTIVE_STATUS_CD() {
			return this.ACTIVE_STATUS_CD;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String INOUT_CD;

		public String getINOUT_CD() {
			return this.INOUT_CD;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String LOCATION_PATH;

		public String getLOCATION_PATH() {
			return this.LOCATION_PATH;
		}

		public Integer LENGTH_OF_STAY;

		public Integer getLENGTH_OF_STAY() {
			return this.LENGTH_OF_STAY;
		}

		public String VISIT_BLOB;

		public String getVISIT_BLOB() {
			return this.VISIT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_IDRT_JDBC_Upload, 0, length);
				strReturn = new String(commonByteArray_TOS_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.ACTIVE_STATUS_CD = readString(dis);

					this.START_DATE = readDate(dis);

					this.END_DATE = readDate(dis);

					this.INOUT_CD = readString(dis);

					this.LOCATION_CD = readString(dis);

					this.LOCATION_PATH = readString(dis);

					this.LENGTH_OF_STAY = readInteger(dis);

					this.VISIT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.ACTIVE_STATUS_CD, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.INOUT_CD, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.LOCATION_PATH, dos);

				// Integer

				writeInteger(this.LENGTH_OF_STAY, dos);

				// String

				writeString(this.VISIT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",ACTIVE_STATUS_CD=" + ACTIVE_STATUS_CD);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",INOUT_CD=" + INOUT_CD);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",LOCATION_PATH=" + LOCATION_PATH);
			sb.append(",LENGTH_OF_STAY=" + String.valueOf(LENGTH_OF_STAY));
			sb.append(",VISIT_BLOB=" + VISIT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_16Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row18Struct row18 = new row18Struct();

				/**
				 * [tOracleOutput_10 begin ] start
				 */

				ok_Hash.put("tOracleOutput_10", false);
				start_Hash.put("tOracleOutput_10", System.currentTimeMillis());
				currentComponent = "tOracleOutput_10";

				int tos_count_tOracleOutput_10 = 0;

				int nb_line_tOracleOutput_10 = 0;
				int nb_line_update_tOracleOutput_10 = 0;
				int nb_line_inserted_tOracleOutput_10 = 0;
				int nb_line_deleted_tOracleOutput_10 = 0;
				int nb_line_rejected_tOracleOutput_10 = 0;

				int tmp_batchUpdateCount_tOracleOutput_10 = 0;

				int deletedCount_tOracleOutput_10 = 0;
				int updatedCount_tOracleOutput_10 = 0;
				int insertedCount_tOracleOutput_10 = 0;
				int rejectedCount_tOracleOutput_10 = 0;

				boolean whetherReject_tOracleOutput_10 = false;

				java.sql.Connection conn_tOracleOutput_10 = null;

				// optional table
				String dbschema_tOracleOutput_10 = null;
				String tableName_tOracleOutput_10 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleOutput_10 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tOracleOutput_10) {
					conn_tOracleOutput_10 = dataSources_tOracleOutput_10
							.get("").getConnection();
				} else {

					java.lang.Class.forName("oracle.jdbc.OracleDriver");

					String url_tOracleOutput_10 = null;
					url_tOracleOutput_10 = "jdbc:oracle:thin:@"
							+ context.DBHost + ":" + context.DBPort + ":"
							+ context.DBInstance;
					String dbUser_tOracleOutput_10 = context.DBUsername;
					String dbPwd_tOracleOutput_10 = context.DBPassword;
					dbschema_tOracleOutput_10 = context.DBSchema;

					conn_tOracleOutput_10 = java.sql.DriverManager
							.getConnection(url_tOracleOutput_10,
									dbUser_tOracleOutput_10,
									dbPwd_tOracleOutput_10);
				}
				conn_tOracleOutput_10.setAutoCommit(false);
				int commitEvery_tOracleOutput_10 = 50000;
				int commitCounter_tOracleOutput_10 = 0;

				int count_tOracleOutput_10 = 0;

				if (dbschema_tOracleOutput_10 == null
						|| dbschema_tOracleOutput_10.trim().length() == 0) {
					tableName_tOracleOutput_10 = "visit_dimension";
				} else {
					tableName_tOracleOutput_10 = dbschema_tOracleOutput_10
							+ "." + "visit_dimension";
				}
				String insert_tOracleOutput_10 = "INSERT INTO "
						+ tableName_tOracleOutput_10
						+ " (ENCOUNTER_NUM,PATIENT_NUM,ACTIVE_STATUS_CD,START_DATE,END_DATE,INOUT_CD,LOCATION_CD,LOCATION_PATH,LENGTH_OF_STAY,VISIT_BLOB,UPDATE_DATE,DOWNLOAD_DATE,IMPORT_DATE,SOURCESYSTEM_CD,UPLOAD_ID) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tOracleOutput_10 = conn_tOracleOutput_10
						.prepareStatement(insert_tOracleOutput_10);

				StringBuffer query_tOracleOutput_10 = null;

				String[] insertSQLSplits_tOracleOutput_10 = insert_tOracleOutput_10
						.split("\\?");

				/**
				 * [tOracleOutput_10 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_16 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_16", false);
				start_Hash.put("tFileInputDelimited_16",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_16";

				int tos_count_tFileInputDelimited_16 = 0;

				int nb_line_tFileInputDelimited_16 = 0;
				int footer_tFileInputDelimited_16 = 0;
				int totalLinetFileInputDelimited_16 = 0;
				int limittFileInputDelimited_16 = -1;
				int lastLinetFileInputDelimited_16 = -1;

				char fieldSeparator_tFileInputDelimited_16[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_16 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_16[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_16 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_16 = /**
				 * Start field
				 * tFileInputDelimited_16:FILENAME
				 */
				context.folderMain + context.folderOutput
						+ "visit_dimension.csv"/**
				 * End field
				 * tFileInputDelimited_16:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_16 = null;

				try {

					String[] rowtFileInputDelimited_16 = null;
					int currentLinetFileInputDelimited_16 = 0;
					int outputLinetFileInputDelimited_16 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_16 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_16 = 0;
							if (footer_value_tFileInputDelimited_16 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_16 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_16,
									fieldSeparator_tFileInputDelimited_16[0],
									context.coding);
						} else {
							csvReadertFileInputDelimited_16 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_16)),
													context.coding)),
									fieldSeparator_tFileInputDelimited_16[0]);
						}

						csvReadertFileInputDelimited_16
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_16[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_16[0] != '\r'))
							csvReadertFileInputDelimited_16.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_16[0]);

						csvReadertFileInputDelimited_16.setQuoteChar('"');

						csvReadertFileInputDelimited_16
								.setEscapeChar(csvReadertFileInputDelimited_16
										.getQuoteChar());

						if (footer_tFileInputDelimited_16 > 0) {
							for (totalLinetFileInputDelimited_16 = 0; totalLinetFileInputDelimited_16 < 1; totalLinetFileInputDelimited_16++) {
								csvReadertFileInputDelimited_16.readNext();
							}
							csvReadertFileInputDelimited_16
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_16.readNext()) {

								rowtFileInputDelimited_16 = csvReadertFileInputDelimited_16
										.getValues();
								if (!(rowtFileInputDelimited_16.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_16[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_16++;

								}

							}
							int lastLineTemptFileInputDelimited_16 = totalLinetFileInputDelimited_16
									- footer_tFileInputDelimited_16 < 0 ? 0
									: totalLinetFileInputDelimited_16
											- footer_tFileInputDelimited_16;
							if (lastLinetFileInputDelimited_16 > 0) {
								lastLinetFileInputDelimited_16 = lastLinetFileInputDelimited_16 < lastLineTemptFileInputDelimited_16 ? lastLinetFileInputDelimited_16
										: lastLineTemptFileInputDelimited_16;
							} else {
								lastLinetFileInputDelimited_16 = lastLineTemptFileInputDelimited_16;
							}

							csvReadertFileInputDelimited_16.close();
							if (filename_tFileInputDelimited_16 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_16 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_16,
										fieldSeparator_tFileInputDelimited_16[0],
										context.coding);
							} else {
								csvReadertFileInputDelimited_16 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_16)),
														context.coding)),
										fieldSeparator_tFileInputDelimited_16[0]);
							}
							csvReadertFileInputDelimited_16
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_16[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_16[0] != '\r'))
								csvReadertFileInputDelimited_16
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_16[0]);

							csvReadertFileInputDelimited_16.setQuoteChar('"');

							csvReadertFileInputDelimited_16
									.setEscapeChar(csvReadertFileInputDelimited_16
											.getQuoteChar());

						}

						if (limittFileInputDelimited_16 != 0) {
							for (currentLinetFileInputDelimited_16 = 0; currentLinetFileInputDelimited_16 < 1; currentLinetFileInputDelimited_16++) {
								csvReadertFileInputDelimited_16.readNext();
							}
						}
						csvReadertFileInputDelimited_16
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_16 != 0
							&& csvReadertFileInputDelimited_16 != null
							&& csvReadertFileInputDelimited_16.readNext()) {

						rowtFileInputDelimited_16 = csvReadertFileInputDelimited_16
								.getValues();

						if (rowtFileInputDelimited_16.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_16[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_16++;

						if (lastLinetFileInputDelimited_16 > -1
								&& currentLinetFileInputDelimited_16 > lastLinetFileInputDelimited_16) {
							break;
						}
						outputLinetFileInputDelimited_16++;
						if (limittFileInputDelimited_16 > 0
								&& outputLinetFileInputDelimited_16 > limittFileInputDelimited_16) {
							break;
						}

						row18 = null;

						boolean whetherReject_tFileInputDelimited_16 = false;
						row18 = new row18Struct();
						try {

							if (rowtFileInputDelimited_16.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_16[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row18.ENCOUNTER_NUM = null;

								row18.PATIENT_NUM = null;

								row18.ACTIVE_STATUS_CD = null;

								row18.START_DATE = null;

								row18.END_DATE = null;

								row18.INOUT_CD = null;

								row18.LOCATION_CD = null;

								row18.LOCATION_PATH = null;

								row18.LENGTH_OF_STAY = null;

								row18.VISIT_BLOB = null;

								row18.UPDATE_DATE = null;

								row18.DOWNLOAD_DATE = null;

								row18.IMPORT_DATE = null;

								row18.SOURCESYSTEM_CD = null;

								row18.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_16 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_16 = 0;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row18.ENCOUNTER_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]);

									} else {
										row18.ENCOUNTER_NUM = null;
									}

								} else {
									row18.ENCOUNTER_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 1;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row18.PATIENT_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]);

									} else {
										row18.PATIENT_NUM = null;
									}

								} else {
									row18.PATIENT_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 2;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row18.ACTIVE_STATUS_CD = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row18.ACTIVE_STATUS_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 3;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row18.START_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16],
														"dd-MM-yyyy");

									} else {
										row18.START_DATE = null;
									}

								} else {
									row18.START_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 4;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row18.END_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16],
														"dd-MM-yyyy");

									} else {
										row18.END_DATE = null;
									}

								} else {
									row18.END_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 5;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row18.INOUT_CD = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row18.INOUT_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 6;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row18.LOCATION_CD = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row18.LOCATION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 7;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row18.LOCATION_PATH = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row18.LOCATION_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 8;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row18.LENGTH_OF_STAY = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]);

									} else {
										row18.LENGTH_OF_STAY = null;
									}

								} else {
									row18.LENGTH_OF_STAY = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 9;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row18.VISIT_BLOB = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row18.VISIT_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 10;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row18.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16],
														"dd-MM-yyyy");

									} else {
										row18.UPDATE_DATE = null;
									}

								} else {
									row18.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 11;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row18.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16],
														"dd-MM-yyyy");

									} else {
										row18.DOWNLOAD_DATE = null;
									}

								} else {
									row18.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 12;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row18.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16],
														"dd-MM-yyyy");

									} else {
										row18.IMPORT_DATE = null;
									}

								} else {
									row18.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 13;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row18.SOURCESYSTEM_CD = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row18.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 14;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row18.UPLOAD_ID = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row18.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_16 = true;

							System.err.println(e.getMessage());
							row18 = null;

						}

						/**
						 * [tFileInputDelimited_16 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_16 main ] start
						 */

						currentComponent = "tFileInputDelimited_16";

						tos_count_tFileInputDelimited_16++;

						/**
						 * [tFileInputDelimited_16 main ] stop
						 */
						// Start of branch "row18"
						if (row18 != null) {

							/**
							 * [tOracleOutput_10 main ] start
							 */

							currentComponent = "tOracleOutput_10";

							query_tOracleOutput_10 = new StringBuffer("");
							whetherReject_tOracleOutput_10 = false;
							pstmt_tOracleOutput_10.setBigDecimal(1,
									row18.ENCOUNTER_NUM);

							query_tOracleOutput_10 = query_tOracleOutput_10
									.append(insertSQLSplits_tOracleOutput_10[0])
									.append(row18.ENCOUNTER_NUM == null ? "null"
											: String.valueOf(row18.ENCOUNTER_NUM))
									.append(insertSQLSplits_tOracleOutput_10[1]);
							pstmt_tOracleOutput_10.setBigDecimal(2,
									row18.PATIENT_NUM);

							query_tOracleOutput_10 = query_tOracleOutput_10
									.append(row18.PATIENT_NUM == null ? "null"
											: String.valueOf(row18.PATIENT_NUM))
									.append(insertSQLSplits_tOracleOutput_10[2]);
							if (row18.ACTIVE_STATUS_CD == null) {
								pstmt_tOracleOutput_10.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_10.setString(3,
										row18.ACTIVE_STATUS_CD);
							}

							query_tOracleOutput_10 = query_tOracleOutput_10
									.append(row18.ACTIVE_STATUS_CD == null ? "null"
											: "'" + row18.ACTIVE_STATUS_CD
													+ "'")
									.append(insertSQLSplits_tOracleOutput_10[3]);
							if (row18.START_DATE != null) {
								pstmt_tOracleOutput_10.setObject(
										4,
										new java.sql.Timestamp(row18.START_DATE
												.getTime()),
										java.sql.Types.DATE);
							} else {
								pstmt_tOracleOutput_10.setNull(4,
										java.sql.Types.DATE);
							}

							query_tOracleOutput_10 = query_tOracleOutput_10
									.append(row18.START_DATE == null ? "null"
											: "'"
													+ new java.text.SimpleDateFormat(
															"dd-MM-yyyy")
															.format(row18.START_DATE)
													+ "'")
									.append(insertSQLSplits_tOracleOutput_10[4]);
							if (row18.END_DATE != null) {
								pstmt_tOracleOutput_10.setObject(
										5,
										new java.sql.Timestamp(row18.END_DATE
												.getTime()),
										java.sql.Types.DATE);
							} else {
								pstmt_tOracleOutput_10.setNull(5,
										java.sql.Types.DATE);
							}

							query_tOracleOutput_10 = query_tOracleOutput_10
									.append(row18.END_DATE == null ? "null"
											: "'"
													+ new java.text.SimpleDateFormat(
															"dd-MM-yyyy")
															.format(row18.END_DATE)
													+ "'")
									.append(insertSQLSplits_tOracleOutput_10[5]);
							if (row18.INOUT_CD == null) {
								pstmt_tOracleOutput_10.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_10.setString(6,
										row18.INOUT_CD);
							}

							query_tOracleOutput_10 = query_tOracleOutput_10
									.append(row18.INOUT_CD == null ? "null"
											: "'" + row18.INOUT_CD + "'")
									.append(insertSQLSplits_tOracleOutput_10[6]);
							if (row18.LOCATION_CD == null) {
								pstmt_tOracleOutput_10.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_10.setString(7,
										row18.LOCATION_CD);
							}

							query_tOracleOutput_10 = query_tOracleOutput_10
									.append(row18.LOCATION_CD == null ? "null"
											: "'" + row18.LOCATION_CD + "'")
									.append(insertSQLSplits_tOracleOutput_10[7]);
							if (row18.LOCATION_PATH == null) {
								pstmt_tOracleOutput_10.setNull(8,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_10.setString(8,
										row18.LOCATION_PATH);
							}

							query_tOracleOutput_10 = query_tOracleOutput_10
									.append(row18.LOCATION_PATH == null ? "null"
											: "'" + row18.LOCATION_PATH + "'")
									.append(insertSQLSplits_tOracleOutput_10[8]);
							if (row18.LENGTH_OF_STAY == null) {
								pstmt_tOracleOutput_10.setNull(9,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tOracleOutput_10.setInt(9,
										row18.LENGTH_OF_STAY);
							}

							query_tOracleOutput_10 = query_tOracleOutput_10
									.append(row18.LENGTH_OF_STAY == null ? "null"
											: String.valueOf(row18.LENGTH_OF_STAY))
									.append(insertSQLSplits_tOracleOutput_10[9]);
							if (row18.VISIT_BLOB == null) {
								pstmt_tOracleOutput_10.setNull(10,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_10.setString(10,
										row18.VISIT_BLOB);
							}

							query_tOracleOutput_10 = query_tOracleOutput_10
									.append(row18.VISIT_BLOB == null ? "null"
											: "'" + row18.VISIT_BLOB + "'")
									.append(insertSQLSplits_tOracleOutput_10[10]);
							if (row18.UPDATE_DATE != null) {
								pstmt_tOracleOutput_10.setObject(11,
										new java.sql.Timestamp(
												row18.UPDATE_DATE.getTime()),
										java.sql.Types.DATE);
							} else {
								pstmt_tOracleOutput_10.setNull(11,
										java.sql.Types.DATE);
							}

							query_tOracleOutput_10 = query_tOracleOutput_10
									.append(row18.UPDATE_DATE == null ? "null"
											: "'"
													+ new java.text.SimpleDateFormat(
															"dd-MM-yyyy")
															.format(row18.UPDATE_DATE)
													+ "'")
									.append(insertSQLSplits_tOracleOutput_10[11]);
							if (row18.DOWNLOAD_DATE != null) {
								pstmt_tOracleOutput_10.setObject(12,
										new java.sql.Timestamp(
												row18.DOWNLOAD_DATE.getTime()),
										java.sql.Types.DATE);
							} else {
								pstmt_tOracleOutput_10.setNull(12,
										java.sql.Types.DATE);
							}

							query_tOracleOutput_10 = query_tOracleOutput_10
									.append(row18.DOWNLOAD_DATE == null ? "null"
											: "'"
													+ new java.text.SimpleDateFormat(
															"dd-MM-yyyy")
															.format(row18.DOWNLOAD_DATE)
													+ "'")
									.append(insertSQLSplits_tOracleOutput_10[12]);
							if (row18.IMPORT_DATE != null) {
								pstmt_tOracleOutput_10.setObject(13,
										new java.sql.Timestamp(
												row18.IMPORT_DATE.getTime()),
										java.sql.Types.DATE);
							} else {
								pstmt_tOracleOutput_10.setNull(13,
										java.sql.Types.DATE);
							}

							query_tOracleOutput_10 = query_tOracleOutput_10
									.append(row18.IMPORT_DATE == null ? "null"
											: "'"
													+ new java.text.SimpleDateFormat(
															"dd-MM-yyyy")
															.format(row18.IMPORT_DATE)
													+ "'")
									.append(insertSQLSplits_tOracleOutput_10[13]);
							if (row18.SOURCESYSTEM_CD == null) {
								pstmt_tOracleOutput_10.setNull(14,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_10.setString(14,
										row18.SOURCESYSTEM_CD);
							}

							query_tOracleOutput_10 = query_tOracleOutput_10
									.append(row18.SOURCESYSTEM_CD == null ? "null"
											: "'" + row18.SOURCESYSTEM_CD + "'")
									.append(insertSQLSplits_tOracleOutput_10[14]);
							if (row18.UPLOAD_ID == null) {
								pstmt_tOracleOutput_10.setNull(15,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_10.setString(15,
										row18.UPLOAD_ID);
							}

							query_tOracleOutput_10 = query_tOracleOutput_10
									.append(row18.UPLOAD_ID == null ? "null"
											: "'" + row18.UPLOAD_ID + "'")
									.append(insertSQLSplits_tOracleOutput_10[15]);
							globalMap.put("tOracleOutput_10_QUERY",
									query_tOracleOutput_10.toString().trim());

							pstmt_tOracleOutput_10.addBatch();
							nb_line_tOracleOutput_10++;

							if (!whetherReject_tOracleOutput_10) {
							}
							commitCounter_tOracleOutput_10++;
							if (commitEvery_tOracleOutput_10 <= commitCounter_tOracleOutput_10) {

								try {
									pstmt_tOracleOutput_10.executeBatch();
								} catch (java.sql.BatchUpdateException e_tOracleOutput_10) {

									throw (e_tOracleOutput_10);

								}
								tmp_batchUpdateCount_tOracleOutput_10 = pstmt_tOracleOutput_10
										.getUpdateCount();

								insertedCount_tOracleOutput_10

								+= (tmp_batchUpdateCount_tOracleOutput_10 != -1 ? tmp_batchUpdateCount_tOracleOutput_10
										: 0);

								conn_tOracleOutput_10.commit();
								commitCounter_tOracleOutput_10 = 0;
							}

							tos_count_tOracleOutput_10++;

							/**
							 * [tOracleOutput_10 main ] stop
							 */

						} // End of branch "row18"

						/**
						 * [tFileInputDelimited_16 end ] start
						 */

						currentComponent = "tFileInputDelimited_16";

						nb_line_tFileInputDelimited_16++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_16 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_16 != null) {
							csvReadertFileInputDelimited_16.close();
						}
					}
					if (csvReadertFileInputDelimited_16 != null) {
						globalMap.put("tFileInputDelimited_16_NB_LINE",
								nb_line_tFileInputDelimited_16);
					}
				}

				ok_Hash.put("tFileInputDelimited_16", true);
				end_Hash.put("tFileInputDelimited_16",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_16 end ] stop
				 */

				/**
				 * [tOracleOutput_10 end ] start
				 */

				currentComponent = "tOracleOutput_10";

				try {
					if (pstmt_tOracleOutput_10 != null) {
						pstmt_tOracleOutput_10.executeBatch();
					}
				} catch (java.sql.BatchUpdateException e_tOracleOutput_10) {

					throw (e_tOracleOutput_10);

				}
				if (pstmt_tOracleOutput_10 != null) {
					tmp_batchUpdateCount_tOracleOutput_10 = pstmt_tOracleOutput_10
							.getUpdateCount();

					insertedCount_tOracleOutput_10

					+= (tmp_batchUpdateCount_tOracleOutput_10 != -1 ? tmp_batchUpdateCount_tOracleOutput_10
							: 0);
				}
				if (pstmt_tOracleOutput_10 != null) {

					pstmt_tOracleOutput_10.close();

				}

				conn_tOracleOutput_10.commit();

				conn_tOracleOutput_10.close();

				nb_line_deleted_tOracleOutput_10 = nb_line_deleted_tOracleOutput_10
						+ deletedCount_tOracleOutput_10;
				nb_line_update_tOracleOutput_10 = nb_line_update_tOracleOutput_10
						+ updatedCount_tOracleOutput_10;
				nb_line_inserted_tOracleOutput_10 = nb_line_inserted_tOracleOutput_10
						+ insertedCount_tOracleOutput_10;
				nb_line_rejected_tOracleOutput_10 = nb_line_rejected_tOracleOutput_10
						+ rejectedCount_tOracleOutput_10;

				globalMap.put("tOracleOutput_10_NB_LINE",
						nb_line_tOracleOutput_10);
				globalMap.put("tOracleOutput_10_NB_LINE_UPDATED",
						nb_line_update_tOracleOutput_10);
				globalMap.put("tOracleOutput_10_NB_LINE_INSERTED",
						nb_line_inserted_tOracleOutput_10);
				globalMap.put("tOracleOutput_10_NB_LINE_DELETED",
						nb_line_deleted_tOracleOutput_10);
				globalMap.put("tOracleOutput_10_NB_LINE_REJECTED",
						nb_line_rejected_tOracleOutput_10);

				ok_Hash.put("tOracleOutput_10", true);
				end_Hash.put("tOracleOutput_10", System.currentTimeMillis());

				tOracleCommit_1Process(globalMap);

				/**
				 * [tOracleOutput_10 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_16_SUBPROCESS_STATE", 1);
	}

	public void tJava_11Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_11 begin ] start
				 */

				ok_Hash.put("tJava_11", false);
				start_Hash.put("tJava_11", System.currentTimeMillis());
				currentComponent = "tJava_11";

				int tos_count_tJava_11 = 0;

				System.out.println("Upload complete!");
				StatusListener.setSubStatus(100.0f, (int) (float) (100.0f)
						+ "%");

				/**
				 * [tJava_11 begin ] stop
				 */
				/**
				 * [tJava_11 main ] start
				 */

				currentComponent = "tJava_11";

				tos_count_tJava_11++;

				/**
				 * [tJava_11 main ] stop
				 */
				/**
				 * [tJava_11 end ] start
				 */

				currentComponent = "tJava_11";

				ok_Hash.put("tJava_11", true);
				end_Hash.put("tJava_11", System.currentTimeMillis());

				/**
				 * [tJava_11 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_11_SUBPROCESS_STATE", 1);
	}

	public void tOracleConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tOracleConnection_1 begin ] start
				 */

				ok_Hash.put("tOracleConnection_1", false);
				start_Hash.put("tOracleConnection_1",
						System.currentTimeMillis());
				currentComponent = "tOracleConnection_1";

				int tos_count_tOracleConnection_1 = 0;

				String url_tOracleConnection_1 = "jdbc:oracle:thin:@"
						+ context.DBHost + ":" + context.DBPort + ":"
						+ context.DBInstance;
				globalMap.put("connectionType_" + "tOracleConnection_1",
						"ORACLE_SID");

				String userName_tOracleConnection_1 = context.DBUsername;
				String password_tOracleConnection_1 = context.DBPassword;

				java.sql.Connection conn_tOracleConnection_1 = null;

				if ((null == globalMap.get(KEY_DB_DATASOURCES))
						|| "".equals("")) {

					java.lang.Class.forName("oracle.jdbc.driver.OracleDriver");

					conn_tOracleConnection_1 = java.sql.DriverManager
							.getConnection(url_tOracleConnection_1,
									userName_tOracleConnection_1,
									password_tOracleConnection_1);
					globalMap.put("conn_tOracleConnection_1",
							conn_tOracleConnection_1);
				}
				if (null != conn_tOracleConnection_1) {

					conn_tOracleConnection_1.setAutoCommit(false);
				}
				globalMap.put("host_" + "tOracleConnection_1", context.DBHost);
				globalMap.put("port_" + "tOracleConnection_1", context.DBPort);
				globalMap.put("dbname_" + "tOracleConnection_1",
						context.DBInstance);

				globalMap.put("conn_" + "tOracleConnection_1",
						conn_tOracleConnection_1);
				globalMap.put("dbschema_" + "tOracleConnection_1",
						context.DBSchema);
				globalMap.put("username_" + "tOracleConnection_1",
						context.DBUsername);
				globalMap.put("password_" + "tOracleConnection_1",
						context.DBPassword);

				/**
				 * [tOracleConnection_1 begin ] stop
				 */
				/**
				 * [tOracleConnection_1 main ] start
				 */

				currentComponent = "tOracleConnection_1";

				tos_count_tOracleConnection_1++;

				/**
				 * [tOracleConnection_1 main ] stop
				 */
				/**
				 * [tOracleConnection_1 end ] start
				 */

				currentComponent = "tOracleConnection_1";

				ok_Hash.put("tOracleConnection_1", true);
				end_Hash.put("tOracleConnection_1", System.currentTimeMillis());

				/**
				 * [tOracleConnection_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tOracleConnection_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tForeach_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_3 begin ] start
				 */

				ok_Hash.put("tJava_3", false);
				start_Hash.put("tJava_3", System.currentTimeMillis());
				currentComponent = "tJava_3";

				int tos_count_tJava_3 = 0;

				System.out.println("Uploading...");
				System.out.println("Host: " + context.DBHost);
				System.out.println("Schema: " + context.DBSchema);
				System.out.println(context.coding);
				StatusListener.setSubStatus(0.0f, (int) (float) (0.0f) + "%");
				context.counter = 0;
				// "ALTER TABLE " + context.DBSchema +
				// ".OBSERVATION_FACT MODIFY CONSTRAINT OBSERVATION_FACT_PK DISABLE"

				/**
				 * [tJava_3 begin ] stop
				 */
				/**
				 * [tJava_3 main ] start
				 */

				currentComponent = "tJava_3";

				tos_count_tJava_3++;

				/**
				 * [tJava_3 main ] stop
				 */
				/**
				 * [tJava_3 end ] start
				 */

				currentComponent = "tJava_3";

				ok_Hash.put("tJava_3", true);
				end_Hash.put("tJava_3", System.currentTimeMillis());

				/**
				 * [tJava_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_3:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tOracleConnection_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}

	public void tLibraryLoad_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLibraryLoad_1 begin ] start
				 */

				ok_Hash.put("tLibraryLoad_1", false);
				start_Hash.put("tLibraryLoad_1", System.currentTimeMillis());
				currentComponent = "tLibraryLoad_1";

				int tos_count_tLibraryLoad_1 = 0;

				/**
				 * [tLibraryLoad_1 begin ] stop
				 */
				/**
				 * [tLibraryLoad_1 main ] start
				 */

				currentComponent = "tLibraryLoad_1";

				tos_count_tLibraryLoad_1++;

				/**
				 * [tLibraryLoad_1 main ] stop
				 */
				/**
				 * [tLibraryLoad_1 end ] start
				 */

				currentComponent = "tLibraryLoad_1";

				ok_Hash.put("tLibraryLoad_1", true);
				end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				/**
				 * [tLibraryLoad_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tLibraryLoad_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_3Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final IDRT_JDBC_Upload IDRT_JDBC_UploadClass = new IDRT_JDBC_Upload();

		int exitCode = IDRT_JDBC_UploadClass.runJobInTOS(args);
		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = IDRT_JDBC_Upload.class
					.getClassLoader().getResourceAsStream(
							"tos/idrt_jdbc_upload_1_0/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.coding = (String) context.getProperty("coding");
			context.DBInstance = (String) context.getProperty("DBInstance");
			context.DBHost = (String) context.getProperty("DBHost");
			context.patientDataFolder = (String) context
					.getProperty("patientDataFolder");
			context.DBPort = (String) context.getProperty("DBPort");
			context.DBPassword = (java.lang.String) context
					.getProperty("DBPassword");
			context.DBSchema = (String) context.getProperty("DBSchema");
			try {
				context.truncateProject = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("truncateProject"));
			} catch (NumberFormatException e) {
				context.truncateProject = null;
			}
			context.DBUsername = (String) context.getProperty("DBUsername");
			context.concept_cd = (String) context.getProperty("concept_cd");
			context.concept_path = (String) context.getProperty("concept_path");
			context.currentFile = (String) context.getProperty("currentFile");
			context.folderMain = (String) context.getProperty("folderMain");
			context.folderOutput = (String) context.getProperty("folderOutput");
			context.folderTmp = (String) context.getProperty("folderTmp");
			context.i2b2HeadNode = (String) context.getProperty("i2b2HeadNode");
			context.i2b2HeadNodeName = (String) context
					.getProperty("i2b2HeadNodeName");
			try {
				context.includePids = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("includePids"));
			} catch (NumberFormatException e) {
				context.includePids = null;
			}
			context.ItemDataAny = (String) context.getProperty("ItemDataAny");
			context.ItemDataBase64Binary = (String) context
					.getProperty("ItemDataBase64Binary");
			context.ItemDataBase64Float = (String) context
					.getProperty("ItemDataBase64Float");
			context.ItemDataBoolean = (String) context
					.getProperty("ItemDataBoolean");
			context.ItemDataDate = (String) context.getProperty("ItemDataDate");
			context.ItemDataDatetime = (String) context
					.getProperty("ItemDataDatetime");
			context.ItemDataDouble = (String) context
					.getProperty("ItemDataDouble");
			context.ItemDataDurationDatetime = (String) context
					.getProperty("ItemDataDurationDatetime");
			context.ItemDataFloat = (String) context
					.getProperty("ItemDataFloat");
			context.ItemDataHexBinary = (String) context
					.getProperty("ItemDataHexBinary");
			context.ItemDataHexFloat = (String) context
					.getProperty("ItemDataHexFloat");
			context.ItemDataIncompleteDatetime = (String) context
					.getProperty("ItemDataIncompleteDatetime");
			context.ItemDataInteger = (String) context
					.getProperty("ItemDataInteger");
			context.ItemDataIntervalDatetime = (String) context
					.getProperty("ItemDataIntervalDatetime");
			context.ItemDataPartialDate = (String) context
					.getProperty("ItemDataPartialDate");
			context.ItemDataPartialDatetime = (String) context
					.getProperty("ItemDataPartialDatetime");
			context.ItemDataPartialTime = (String) context
					.getProperty("ItemDataPartialTime");
			context.ItemDataString = (String) context
					.getProperty("ItemDataString");
			context.ItemDataTime = (String) context.getProperty("ItemDataTime");
			context.ItemDataURI = (String) context.getProperty("ItemDataURI");
			context.MDPD = (String) context.getProperty("MDPD");
			context.MDPDName = (String) context.getProperty("MDPDName");
			try {
				context.counter = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("counter"));
			} catch (NumberFormatException e) {
				context.counter = null;
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("coding")) {
				context.coding = (String) parentContextMap.get("coding");
			}
			if (parentContextMap.containsKey("DBInstance")) {
				context.DBInstance = (String) parentContextMap
						.get("DBInstance");
			}
			if (parentContextMap.containsKey("DBHost")) {
				context.DBHost = (String) parentContextMap.get("DBHost");
			}
			if (parentContextMap.containsKey("patientDataFolder")) {
				context.patientDataFolder = (String) parentContextMap
						.get("patientDataFolder");
			}
			if (parentContextMap.containsKey("DBPort")) {
				context.DBPort = (String) parentContextMap.get("DBPort");
			}
			if (parentContextMap.containsKey("DBPassword")) {
				context.DBPassword = (java.lang.String) parentContextMap
						.get("DBPassword");
			}
			if (parentContextMap.containsKey("DBSchema")) {
				context.DBSchema = (String) parentContextMap.get("DBSchema");
			}
			if (parentContextMap.containsKey("truncateProject")) {
				context.truncateProject = (Boolean) parentContextMap
						.get("truncateProject");
			}
			if (parentContextMap.containsKey("DBUsername")) {
				context.DBUsername = (String) parentContextMap
						.get("DBUsername");
			}
			if (parentContextMap.containsKey("concept_cd")) {
				context.concept_cd = (String) parentContextMap
						.get("concept_cd");
			}
			if (parentContextMap.containsKey("concept_path")) {
				context.concept_path = (String) parentContextMap
						.get("concept_path");
			}
			if (parentContextMap.containsKey("currentFile")) {
				context.currentFile = (String) parentContextMap
						.get("currentFile");
			}
			if (parentContextMap.containsKey("folderMain")) {
				context.folderMain = (String) parentContextMap
						.get("folderMain");
			}
			if (parentContextMap.containsKey("folderOutput")) {
				context.folderOutput = (String) parentContextMap
						.get("folderOutput");
			}
			if (parentContextMap.containsKey("folderTmp")) {
				context.folderTmp = (String) parentContextMap.get("folderTmp");
			}
			if (parentContextMap.containsKey("i2b2HeadNode")) {
				context.i2b2HeadNode = (String) parentContextMap
						.get("i2b2HeadNode");
			}
			if (parentContextMap.containsKey("i2b2HeadNodeName")) {
				context.i2b2HeadNodeName = (String) parentContextMap
						.get("i2b2HeadNodeName");
			}
			if (parentContextMap.containsKey("includePids")) {
				context.includePids = (Boolean) parentContextMap
						.get("includePids");
			}
			if (parentContextMap.containsKey("ItemDataAny")) {
				context.ItemDataAny = (String) parentContextMap
						.get("ItemDataAny");
			}
			if (parentContextMap.containsKey("ItemDataBase64Binary")) {
				context.ItemDataBase64Binary = (String) parentContextMap
						.get("ItemDataBase64Binary");
			}
			if (parentContextMap.containsKey("ItemDataBase64Float")) {
				context.ItemDataBase64Float = (String) parentContextMap
						.get("ItemDataBase64Float");
			}
			if (parentContextMap.containsKey("ItemDataBoolean")) {
				context.ItemDataBoolean = (String) parentContextMap
						.get("ItemDataBoolean");
			}
			if (parentContextMap.containsKey("ItemDataDate")) {
				context.ItemDataDate = (String) parentContextMap
						.get("ItemDataDate");
			}
			if (parentContextMap.containsKey("ItemDataDatetime")) {
				context.ItemDataDatetime = (String) parentContextMap
						.get("ItemDataDatetime");
			}
			if (parentContextMap.containsKey("ItemDataDouble")) {
				context.ItemDataDouble = (String) parentContextMap
						.get("ItemDataDouble");
			}
			if (parentContextMap.containsKey("ItemDataDurationDatetime")) {
				context.ItemDataDurationDatetime = (String) parentContextMap
						.get("ItemDataDurationDatetime");
			}
			if (parentContextMap.containsKey("ItemDataFloat")) {
				context.ItemDataFloat = (String) parentContextMap
						.get("ItemDataFloat");
			}
			if (parentContextMap.containsKey("ItemDataHexBinary")) {
				context.ItemDataHexBinary = (String) parentContextMap
						.get("ItemDataHexBinary");
			}
			if (parentContextMap.containsKey("ItemDataHexFloat")) {
				context.ItemDataHexFloat = (String) parentContextMap
						.get("ItemDataHexFloat");
			}
			if (parentContextMap.containsKey("ItemDataIncompleteDatetime")) {
				context.ItemDataIncompleteDatetime = (String) parentContextMap
						.get("ItemDataIncompleteDatetime");
			}
			if (parentContextMap.containsKey("ItemDataInteger")) {
				context.ItemDataInteger = (String) parentContextMap
						.get("ItemDataInteger");
			}
			if (parentContextMap.containsKey("ItemDataIntervalDatetime")) {
				context.ItemDataIntervalDatetime = (String) parentContextMap
						.get("ItemDataIntervalDatetime");
			}
			if (parentContextMap.containsKey("ItemDataPartialDate")) {
				context.ItemDataPartialDate = (String) parentContextMap
						.get("ItemDataPartialDate");
			}
			if (parentContextMap.containsKey("ItemDataPartialDatetime")) {
				context.ItemDataPartialDatetime = (String) parentContextMap
						.get("ItemDataPartialDatetime");
			}
			if (parentContextMap.containsKey("ItemDataPartialTime")) {
				context.ItemDataPartialTime = (String) parentContextMap
						.get("ItemDataPartialTime");
			}
			if (parentContextMap.containsKey("ItemDataString")) {
				context.ItemDataString = (String) parentContextMap
						.get("ItemDataString");
			}
			if (parentContextMap.containsKey("ItemDataTime")) {
				context.ItemDataTime = (String) parentContextMap
						.get("ItemDataTime");
			}
			if (parentContextMap.containsKey("ItemDataURI")) {
				context.ItemDataURI = (String) parentContextMap
						.get("ItemDataURI");
			}
			if (parentContextMap.containsKey("MDPD")) {
				context.MDPD = (String) parentContextMap.get("MDPD");
			}
			if (parentContextMap.containsKey("MDPDName")) {
				context.MDPDName = (String) parentContextMap.get("MDPDName");
			}
			if (parentContextMap.containsKey("counter")) {
				context.counter = (Integer) parentContextMap.get("counter");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tLibraryLoad_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tLibraryLoad_1) {

			e_tLibraryLoad_1.printStackTrace();
			globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : IDRT_JDBC_Upload");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 482053 characters generated by Talend Open Studio for Data Integration on the
 * March 31, 2014 10:55:35 AM CEST
 ************************************************************************************************/
