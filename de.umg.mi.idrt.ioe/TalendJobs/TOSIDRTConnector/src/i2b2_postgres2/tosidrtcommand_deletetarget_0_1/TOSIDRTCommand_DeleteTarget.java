// ============================================================================
//
// Copyright (c) 2006-2014, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package i2b2_postgres2.tosidrtcommand_deletetarget_0_1;

import routines.IIT;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.ExportDB;
import routines.enc_num_routine;
import routines.Mathematical;
import routines.Relational;
import routines.TalendDate;
import routines.IDRTHelper;
import routines.PIDGen;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tLibraryLoad_1
import de.umg.mi.idrt.ioe.tos.TOSHandler;

//the import part of tJava_1
//import java.util.List;

//the import part of tJava_2
//import java.util.List;

//the import part of tJava_3
//import java.util.List;

//the import part of tJava_4
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: TOSIDRTCommand_DeleteTarget Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.6.1.20141207_1530
 * @status 
 */
public class TOSIDRTCommand_DeleteTarget implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (currentTargetProjectID != null) {

				this.setProperty("currentTargetProjectID",
						currentTargetProjectID.toString());

			}

			if (DB_StagingI2B2_sqlclassname != null) {

				this.setProperty("DB_StagingI2B2_sqlclassname",
						DB_StagingI2B2_sqlclassname.toString());

			}

			if (DB_TargetI2B2_sqlclassname != null) {

				this.setProperty("DB_TargetI2B2_sqlclassname",
						DB_TargetI2B2_sqlclassname.toString());

			}

			if (currentQuery != null) {

				this.setProperty("currentQuery", currentQuery.toString());

			}

			if (DB_StagingI2B2_DatabaseType != null) {

				this.setProperty("DB_StagingI2B2_DatabaseType",
						DB_StagingI2B2_DatabaseType.toString());

			}

			if (DB_StagingI2B2_DriverClass != null) {

				this.setProperty("DB_StagingI2B2_DriverClass",
						DB_StagingI2B2_DriverClass.toString());

			}

			if (DB_StagingI2B2_Host != null) {

				this.setProperty("DB_StagingI2B2_Host",
						DB_StagingI2B2_Host.toString());

			}

			if (DB_StagingI2B2_Instance != null) {

				this.setProperty("DB_StagingI2B2_Instance",
						DB_StagingI2B2_Instance.toString());

			}

			if (DB_StagingI2B2_jdbcurl != null) {

				this.setProperty("DB_StagingI2B2_jdbcurl",
						DB_StagingI2B2_jdbcurl.toString());

			}

			if (DB_StagingI2B2_Password != null) {

				this.setProperty("DB_StagingI2B2_Password",
						DB_StagingI2B2_Password.toString());

			}

			if (DB_StagingI2B2_Port != null) {

				this.setProperty("DB_StagingI2B2_Port",
						DB_StagingI2B2_Port.toString());

			}

			if (DB_StagingI2B2_Schema != null) {

				this.setProperty("DB_StagingI2B2_Schema",
						DB_StagingI2B2_Schema.toString());

			}

			if (DB_StagingI2B2_Username != null) {

				this.setProperty("DB_StagingI2B2_Username",
						DB_StagingI2B2_Username.toString());

			}

			if (DB_StagingI2B2_WHType != null) {

				this.setProperty("DB_StagingI2B2_WHType",
						DB_StagingI2B2_WHType.toString());

			}

			if (DB_TargetI2B2_DatabaseType != null) {

				this.setProperty("DB_TargetI2B2_DatabaseType",
						DB_TargetI2B2_DatabaseType.toString());

			}

			if (DB_TargetI2B2_DriverClass != null) {

				this.setProperty("DB_TargetI2B2_DriverClass",
						DB_TargetI2B2_DriverClass.toString());

			}

			if (DB_TargetI2B2_Host != null) {

				this.setProperty("DB_TargetI2B2_Host",
						DB_TargetI2B2_Host.toString());

			}

			if (DB_TargetI2B2_Instance != null) {

				this.setProperty("DB_TargetI2B2_Instance",
						DB_TargetI2B2_Instance.toString());

			}

			if (DB_TargetI2B2_jdbcurl != null) {

				this.setProperty("DB_TargetI2B2_jdbcurl",
						DB_TargetI2B2_jdbcurl.toString());

			}

			if (DB_TargetI2B2_Password != null) {

				this.setProperty("DB_TargetI2B2_Password",
						DB_TargetI2B2_Password.toString());

			}

			if (DB_TargetI2B2_Port != null) {

				this.setProperty("DB_TargetI2B2_Port",
						DB_TargetI2B2_Port.toString());

			}

			if (DB_TargetI2B2_Schema != null) {

				this.setProperty("DB_TargetI2B2_Schema",
						DB_TargetI2B2_Schema.toString());

			}

			if (DB_TargetI2B2_Username != null) {

				this.setProperty("DB_TargetI2B2_Username",
						DB_TargetI2B2_Username.toString());

			}

			if (DB_TargetI2B2_WHType != null) {

				this.setProperty("DB_TargetI2B2_WHType",
						DB_TargetI2B2_WHType.toString());

			}

			if (DataFile != null) {

				this.setProperty("DataFile", DataFile.toString());

			}

			if (ErrorMessage != null) {

				this.setProperty("ErrorMessage", ErrorMessage.toString());

			}

			if (IfValue != null) {

				this.setProperty("IfValue", IfValue.toString());

			}

			if (JDBC_URL != null) {

				this.setProperty("JDBC_URL", JDBC_URL.toString());

			}

			if (JDBCDriver != null) {

				this.setProperty("JDBCDriver", JDBCDriver.toString());

			}

			if (Job != null) {

				this.setProperty("Job", Job.toString());

			}

			if (OracleDB != null) {

				this.setProperty("OracleDB", OracleDB.toString());

			}

			if (OracleHost != null) {

				this.setProperty("OracleHost", OracleHost.toString());

			}

			if (OraclePassword != null) {

				this.setProperty("OraclePassword", OraclePassword.toString());

			}

			if (OraclePort != null) {

				this.setProperty("OraclePort", OraclePort.toString());

			}

			if (OracleSchema != null) {

				this.setProperty("OracleSchema", OracleSchema.toString());

			}

			if (OracleUsername != null) {

				this.setProperty("OracleUsername", OracleUsername.toString());

			}

			if (SQLCommand != null) {

				this.setProperty("SQLCommand", SQLCommand.toString());

			}

			if (SQLCommand2 != null) {

				this.setProperty("SQLCommand2", SQLCommand2.toString());

			}

			if (SQLTable != null) {

				this.setProperty("SQLTable", SQLTable.toString());

			}

			if (SQLTable2 != null) {

				this.setProperty("SQLTable2", SQLTable2.toString());

			}

			if (StatusMessage != null) {

				this.setProperty("StatusMessage", StatusMessage.toString());

			}

			if (TableIEOTarget != null) {

				this.setProperty("TableIEOTarget", TableIEOTarget.toString());

			}

			if (TableIEOTargetOntology != null) {

				this.setProperty("TableIEOTargetOntology",
						TableIEOTargetOntology.toString());

			}

			if (TableIEOTargetProject != null) {

				this.setProperty("TableIEOTargetProject",
						TableIEOTargetProject.toString());

			}

			if (TargetID != null) {

				this.setProperty("TargetID", TargetID.toString());

			}

			if (TOSHandler != null) {

				this.setProperty("TOSHandler", TOSHandler.toString());

			}

		}

		public Integer currentTargetProjectID;

		public Integer getCurrentTargetProjectID() {
			return this.currentTargetProjectID;
		}

		public String DB_StagingI2B2_sqlclassname;

		public String getDB_StagingI2B2_sqlclassname() {
			return this.DB_StagingI2B2_sqlclassname;
		}

		public String DB_TargetI2B2_sqlclassname;

		public String getDB_TargetI2B2_sqlclassname() {
			return this.DB_TargetI2B2_sqlclassname;
		}

		public String currentQuery;

		public String getCurrentQuery() {
			return this.currentQuery;
		}

		public String DB_StagingI2B2_DatabaseType;

		public String getDB_StagingI2B2_DatabaseType() {
			return this.DB_StagingI2B2_DatabaseType;
		}

		public String DB_StagingI2B2_DriverClass;

		public String getDB_StagingI2B2_DriverClass() {
			return this.DB_StagingI2B2_DriverClass;
		}

		public String DB_StagingI2B2_Host;

		public String getDB_StagingI2B2_Host() {
			return this.DB_StagingI2B2_Host;
		}

		public String DB_StagingI2B2_Instance;

		public String getDB_StagingI2B2_Instance() {
			return this.DB_StagingI2B2_Instance;
		}

		public String DB_StagingI2B2_jdbcurl;

		public String getDB_StagingI2B2_jdbcurl() {
			return this.DB_StagingI2B2_jdbcurl;
		}

		public java.lang.String DB_StagingI2B2_Password;

		public java.lang.String getDB_StagingI2B2_Password() {
			return this.DB_StagingI2B2_Password;
		}

		public String DB_StagingI2B2_Port;

		public String getDB_StagingI2B2_Port() {
			return this.DB_StagingI2B2_Port;
		}

		public String DB_StagingI2B2_Schema;

		public String getDB_StagingI2B2_Schema() {
			return this.DB_StagingI2B2_Schema;
		}

		public String DB_StagingI2B2_Username;

		public String getDB_StagingI2B2_Username() {
			return this.DB_StagingI2B2_Username;
		}

		public String DB_StagingI2B2_WHType;

		public String getDB_StagingI2B2_WHType() {
			return this.DB_StagingI2B2_WHType;
		}

		public String DB_TargetI2B2_DatabaseType;

		public String getDB_TargetI2B2_DatabaseType() {
			return this.DB_TargetI2B2_DatabaseType;
		}

		public String DB_TargetI2B2_DriverClass;

		public String getDB_TargetI2B2_DriverClass() {
			return this.DB_TargetI2B2_DriverClass;
		}

		public String DB_TargetI2B2_Host;

		public String getDB_TargetI2B2_Host() {
			return this.DB_TargetI2B2_Host;
		}

		public String DB_TargetI2B2_Instance;

		public String getDB_TargetI2B2_Instance() {
			return this.DB_TargetI2B2_Instance;
		}

		public String DB_TargetI2B2_jdbcurl;

		public String getDB_TargetI2B2_jdbcurl() {
			return this.DB_TargetI2B2_jdbcurl;
		}

		public java.lang.String DB_TargetI2B2_Password;

		public java.lang.String getDB_TargetI2B2_Password() {
			return this.DB_TargetI2B2_Password;
		}

		public String DB_TargetI2B2_Port;

		public String getDB_TargetI2B2_Port() {
			return this.DB_TargetI2B2_Port;
		}

		public String DB_TargetI2B2_Schema;

		public String getDB_TargetI2B2_Schema() {
			return this.DB_TargetI2B2_Schema;
		}

		public String DB_TargetI2B2_Username;

		public String getDB_TargetI2B2_Username() {
			return this.DB_TargetI2B2_Username;
		}

		public String DB_TargetI2B2_WHType;

		public String getDB_TargetI2B2_WHType() {
			return this.DB_TargetI2B2_WHType;
		}

		public String DataFile;

		public String getDataFile() {
			return this.DataFile;
		}

		public String ErrorMessage;

		public String getErrorMessage() {
			return this.ErrorMessage;
		}

		public Boolean IfValue;

		public Boolean getIfValue() {
			return this.IfValue;
		}

		public String JDBC_URL;

		public String getJDBC_URL() {
			return this.JDBC_URL;
		}

		public String JDBCDriver;

		public String getJDBCDriver() {
			return this.JDBCDriver;
		}

		public String Job;

		public String getJob() {
			return this.Job;
		}

		public String OracleDB;

		public String getOracleDB() {
			return this.OracleDB;
		}

		public String OracleHost;

		public String getOracleHost() {
			return this.OracleHost;
		}

		public String OraclePassword;

		public String getOraclePassword() {
			return this.OraclePassword;
		}

		public String OraclePort;

		public String getOraclePort() {
			return this.OraclePort;
		}

		public String OracleSchema;

		public String getOracleSchema() {
			return this.OracleSchema;
		}

		public String OracleUsername;

		public String getOracleUsername() {
			return this.OracleUsername;
		}

		public String SQLCommand;

		public String getSQLCommand() {
			return this.SQLCommand;
		}

		public String SQLCommand2;

		public String getSQLCommand2() {
			return this.SQLCommand2;
		}

		public String SQLTable;

		public String getSQLTable() {
			return this.SQLTable;
		}

		public String SQLTable2;

		public String getSQLTable2() {
			return this.SQLTable2;
		}

		public String StatusMessage;

		public String getStatusMessage() {
			return this.StatusMessage;
		}

		public String TableIEOTarget;

		public String getTableIEOTarget() {
			return this.TableIEOTarget;
		}

		public String TableIEOTargetOntology;

		public String getTableIEOTargetOntology() {
			return this.TableIEOTargetOntology;
		}

		public String TableIEOTargetProject;

		public String getTableIEOTargetProject() {
			return this.TableIEOTargetProject;
		}

		public Integer TargetID;

		public Integer getTargetID() {
			return this.TargetID;
		}

		public Object TOSHandler;

		public Object getTOSHandler() {
			return this.TOSHandler;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "TOSIDRTCommand_DeleteTarget";
	private final String projectName = "I2B2_POSTGRES2";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					TOSIDRTCommand_DeleteTarget.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(TOSIDRTCommand_DeleteTarget.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tPrejob_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLibraryLoad_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLibraryLoad_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCRow_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLibraryLoad_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCRow_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCRow_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				tLibraryLoad_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tLibraryLoad_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLibraryLoad_1 begin ] start
				 */

				ok_Hash.put("tLibraryLoad_1", false);
				start_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				currentComponent = "tLibraryLoad_1";

				int tos_count_tLibraryLoad_1 = 0;

				/**
				 * [tLibraryLoad_1 begin ] stop
				 */

				/**
				 * [tLibraryLoad_1 main ] start
				 */

				currentComponent = "tLibraryLoad_1";

				tos_count_tLibraryLoad_1++;

				/**
				 * [tLibraryLoad_1 main ] stop
				 */

				/**
				 * [tLibraryLoad_1 end ] start
				 */

				currentComponent = "tLibraryLoad_1";

				ok_Hash.put("tLibraryLoad_1", true);
				end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				/**
				 * [tLibraryLoad_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tLibraryLoad_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLibraryLoad_1 finally ] start
				 */

				currentComponent = "tLibraryLoad_1";

				/**
				 * [tLibraryLoad_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				TOSHandler.status("Doing TOS-Job \"DeleteTarget\"...");

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());

				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				// context.TargetProjectID = input_row.TARGETPROJECT_ID != null
				// ? input_row.TARGETPROJECT_ID : -1;
				context.TargetID = context.TargetID != null ? context.TargetID
						: -1;
				// context.Version = input_row.VERSION != null ?
				// input_row.VERSION : -1;

				/**
				 * [tJava_2 begin ] stop
				 */

				/**
				 * [tJava_2 main ] start
				 */

				currentComponent = "tJava_2";

				tos_count_tJava_2++;

				/**
				 * [tJava_2 main ] stop
				 */

				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				if (context.TargetID == -1) {

					tDie_1Process(globalMap);
				}

				/**
				 * [tJava_2 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_2 finally ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}

	public void tDie_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_1 begin ] start
				 */

				ok_Hash.put("tDie_1", false);
				start_Hash.put("tDie_1", System.currentTimeMillis());

				currentComponent = "tDie_1";

				int tos_count_tDie_1 = 0;

				/**
				 * [tDie_1 begin ] stop
				 */

				/**
				 * [tDie_1 main ] start
				 */

				currentComponent = "tDie_1";

				globalMap.put("tDie_1_DIE_PRIORITY", 3);
				System.err
						.println("Checking the i2b2 database for an existing ontology ... no ontology found.");

				globalMap
						.put("tDie_1_DIE_MESSAGE",
								"Checking the i2b2 database for an existing ontology ... no ontology found.");
				globalMap
						.put("tDie_1_DIE_MESSAGES",
								"Checking the i2b2 database for an existing ontology ... no ontology found.");
				currentComponent = "tDie_1";
				status = "failure";
				errorCode = new Integer(10);
				globalMap.put("tDie_1_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_1++;

				/**
				 * [tDie_1 main ] stop
				 */

				/**
				 * [tDie_1 end ] start
				 */

				currentComponent = "tDie_1";

				ok_Hash.put("tDie_1", true);
				end_Hash.put("tDie_1", System.currentTimeMillis());

				/**
				 * [tDie_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_1 finally ] start
				 */

				currentComponent = "tDie_1";

				/**
				 * [tDie_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_3 begin ] start
				 */

				ok_Hash.put("tJava_3", false);
				start_Hash.put("tJava_3", System.currentTimeMillis());

				currentComponent = "tJava_3";

				int tos_count_tJava_3 = 0;

				if (context.DB_StagingI2B2_WHType.equalsIgnoreCase("i2b2"))
					context.currentQuery = "DELETE FROM "
							+ context.DB_StagingI2B2_Schema + "."
							+ context.TableIEOTargetOntology
							+ "  WHERE target_id = '" + context.TargetID + "'";
				else {
					context.currentQuery = "DELETE FROM i2b2metadata."
							+ context.TableIEOTargetOntology
							+ "  WHERE target_id = '" + context.TargetID + "'";

				}

				/**
				 * [tJava_3 begin ] stop
				 */

				/**
				 * [tJava_3 main ] start
				 */

				currentComponent = "tJava_3";

				tos_count_tJava_3++;

				/**
				 * [tJava_3 main ] stop
				 */

				/**
				 * [tJava_3 end ] start
				 */

				currentComponent = "tJava_3";

				ok_Hash.put("tJava_3", true);
				end_Hash.put("tJava_3", System.currentTimeMillis());

				/**
				 * [tJava_3 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_3:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCRow_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_3 finally ] start
				 */

				currentComponent = "tJava_3";

				/**
				 * [tJava_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}

	public void tJDBCRow_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCRow_1 begin ] start
				 */

				ok_Hash.put("tJDBCRow_1", false);
				start_Hash.put("tJDBCRow_1", System.currentTimeMillis());

				currentComponent = "tJDBCRow_1";

				int tos_count_tJDBCRow_1 = 0;

				java.sql.Connection conn_tJDBCRow_1 = null;
				String query_tJDBCRow_1 = "";
				boolean whetherReject_tJDBCRow_1 = false;
				String driverClass_tJDBCRow_1 = context.DB_StagingI2B2_DriverClass;
				java.lang.Class.forName(driverClass_tJDBCRow_1);

				String url_tJDBCRow_1 = context.DB_StagingI2B2_jdbcurl;

				String dbUser_tJDBCRow_1 = context.DB_StagingI2B2_Username;

				final String decryptedPassword_tJDBCRow_1 = context.DB_StagingI2B2_Password;

				String dbPwd_tJDBCRow_1 = decryptedPassword_tJDBCRow_1;

				conn_tJDBCRow_1 = java.sql.DriverManager.getConnection(
						url_tJDBCRow_1, dbUser_tJDBCRow_1, dbPwd_tJDBCRow_1);

				if (conn_tJDBCRow_1.getAutoCommit()) {

					conn_tJDBCRow_1.setAutoCommit(false);

				}
				int commitEvery_tJDBCRow_1 = 10000;
				int commitCounter_tJDBCRow_1 = 0;

				java.sql.Statement stmt_tJDBCRow_1 = conn_tJDBCRow_1
						.createStatement();

				/**
				 * [tJDBCRow_1 begin ] stop
				 */

				/**
				 * [tJDBCRow_1 main ] start
				 */

				currentComponent = "tJDBCRow_1";

				query_tJDBCRow_1 = context.currentQuery;
				whetherReject_tJDBCRow_1 = false;
				globalMap.put("tJDBCRow_1_QUERY", query_tJDBCRow_1);
				try {
					stmt_tJDBCRow_1.execute(query_tJDBCRow_1);

				} catch (java.lang.Exception e) {
					whetherReject_tJDBCRow_1 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tJDBCRow_1) {

				}

				commitCounter_tJDBCRow_1++;
				if (commitEvery_tJDBCRow_1 <= commitCounter_tJDBCRow_1) {

					conn_tJDBCRow_1.commit();

					commitCounter_tJDBCRow_1 = 0;
				}

				tos_count_tJDBCRow_1++;

				/**
				 * [tJDBCRow_1 main ] stop
				 */

				/**
				 * [tJDBCRow_1 end ] start
				 */

				currentComponent = "tJDBCRow_1";

				stmt_tJDBCRow_1.close();
				if (commitEvery_tJDBCRow_1 > commitCounter_tJDBCRow_1) {

					conn_tJDBCRow_1.commit();

					commitCounter_tJDBCRow_1 = 0;

				}
				conn_tJDBCRow_1.close();

				ok_Hash.put("tJDBCRow_1", true);
				end_Hash.put("tJDBCRow_1", System.currentTimeMillis());

				/**
				 * [tJDBCRow_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCRow_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCRow_1 finally ] start
				 */

				currentComponent = "tJDBCRow_1";

				/**
				 * [tJDBCRow_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCRow_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_4 begin ] start
				 */

				ok_Hash.put("tJava_4", false);
				start_Hash.put("tJava_4", System.currentTimeMillis());

				currentComponent = "tJava_4";

				int tos_count_tJava_4 = 0;

				if (context.DB_StagingI2B2_WHType.equalsIgnoreCase("i2b2"))
					context.currentQuery = "DELETE FROM "
							+ context.DB_StagingI2B2_Schema + "."
							+ context.TableIEOTarget + "  WHERE target_id = '"
							+ context.TargetID + "'";
				else {
					context.currentQuery = "DELETE FROM i2b2metadata."
							+ context.TableIEOTarget + "  WHERE target_id = '"
							+ context.TargetID + "'";

				}

				/**
				 * [tJava_4 begin ] stop
				 */

				/**
				 * [tJava_4 main ] start
				 */

				currentComponent = "tJava_4";

				tos_count_tJava_4++;

				/**
				 * [tJava_4 main ] stop
				 */

				/**
				 * [tJava_4 end ] start
				 */

				currentComponent = "tJava_4";

				ok_Hash.put("tJava_4", true);
				end_Hash.put("tJava_4", System.currentTimeMillis());

				/**
				 * [tJava_4 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_4:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCRow_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_4 finally ] start
				 */

				currentComponent = "tJava_4";

				/**
				 * [tJava_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}

	public void tJDBCRow_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCRow_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCRow_2 begin ] start
				 */

				ok_Hash.put("tJDBCRow_2", false);
				start_Hash.put("tJDBCRow_2", System.currentTimeMillis());

				currentComponent = "tJDBCRow_2";

				int tos_count_tJDBCRow_2 = 0;

				java.sql.Connection conn_tJDBCRow_2 = null;
				String query_tJDBCRow_2 = "";
				boolean whetherReject_tJDBCRow_2 = false;
				String driverClass_tJDBCRow_2 = context.DB_StagingI2B2_DriverClass;
				java.lang.Class.forName(driverClass_tJDBCRow_2);

				String url_tJDBCRow_2 = context.DB_StagingI2B2_jdbcurl;

				String dbUser_tJDBCRow_2 = context.DB_StagingI2B2_Username;

				final String decryptedPassword_tJDBCRow_2 = context.DB_StagingI2B2_Password;

				String dbPwd_tJDBCRow_2 = decryptedPassword_tJDBCRow_2;

				conn_tJDBCRow_2 = java.sql.DriverManager.getConnection(
						url_tJDBCRow_2, dbUser_tJDBCRow_2, dbPwd_tJDBCRow_2);

				if (conn_tJDBCRow_2.getAutoCommit()) {

					conn_tJDBCRow_2.setAutoCommit(false);

				}
				int commitEvery_tJDBCRow_2 = 10000;
				int commitCounter_tJDBCRow_2 = 0;

				java.sql.Statement stmt_tJDBCRow_2 = conn_tJDBCRow_2
						.createStatement();

				/**
				 * [tJDBCRow_2 begin ] stop
				 */

				/**
				 * [tJDBCRow_2 main ] start
				 */

				currentComponent = "tJDBCRow_2";

				query_tJDBCRow_2 = context.currentQuery;
				whetherReject_tJDBCRow_2 = false;
				globalMap.put("tJDBCRow_2_QUERY", query_tJDBCRow_2);
				try {
					stmt_tJDBCRow_2.execute(query_tJDBCRow_2);

				} catch (java.lang.Exception e) {
					whetherReject_tJDBCRow_2 = true;

					System.err.print(e.getMessage());

				}

				commitCounter_tJDBCRow_2++;
				if (commitEvery_tJDBCRow_2 <= commitCounter_tJDBCRow_2) {

					conn_tJDBCRow_2.commit();

					commitCounter_tJDBCRow_2 = 0;
				}

				tos_count_tJDBCRow_2++;

				/**
				 * [tJDBCRow_2 main ] stop
				 */

				/**
				 * [tJDBCRow_2 end ] start
				 */

				currentComponent = "tJDBCRow_2";

				stmt_tJDBCRow_2.close();
				if (commitEvery_tJDBCRow_2 > commitCounter_tJDBCRow_2) {

					conn_tJDBCRow_2.commit();

					commitCounter_tJDBCRow_2 = 0;

				}
				conn_tJDBCRow_2.close();

				ok_Hash.put("tJDBCRow_2", true);
				end_Hash.put("tJDBCRow_2", System.currentTimeMillis());

				/**
				 * [tJDBCRow_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCRow_2 finally ] start
				 */

				currentComponent = "tJDBCRow_2";

				/**
				 * [tJDBCRow_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCRow_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final TOSIDRTCommand_DeleteTarget TOSIDRTCommand_DeleteTargetClass = new TOSIDRTCommand_DeleteTarget();

		int exitCode = TOSIDRTCommand_DeleteTargetClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = TOSIDRTCommand_DeleteTarget.class
					.getClassLoader().getResourceAsStream(
							"i2b2_postgres2/tosidrtcommand_deletetarget_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			try {
				context.currentTargetProjectID = routines.system.ParserUtils
						.parseTo_Integer(context
								.getProperty("currentTargetProjectID"));
			} catch (NumberFormatException e) {
				context.currentTargetProjectID = null;
			}
			context.DB_StagingI2B2_sqlclassname = (String) context
					.getProperty("DB_StagingI2B2_sqlclassname");
			context.DB_TargetI2B2_sqlclassname = (String) context
					.getProperty("DB_TargetI2B2_sqlclassname");
			context.currentQuery = (String) context.getProperty("currentQuery");
			context.DB_StagingI2B2_DatabaseType = (String) context
					.getProperty("DB_StagingI2B2_DatabaseType");
			context.DB_StagingI2B2_DriverClass = (String) context
					.getProperty("DB_StagingI2B2_DriverClass");
			context.DB_StagingI2B2_Host = (String) context
					.getProperty("DB_StagingI2B2_Host");
			context.DB_StagingI2B2_Instance = (String) context
					.getProperty("DB_StagingI2B2_Instance");
			context.DB_StagingI2B2_jdbcurl = (String) context
					.getProperty("DB_StagingI2B2_jdbcurl");
			String pwd_DB_StagingI2B2_Password_value = context
					.getProperty("DB_StagingI2B2_Password");
			context.DB_StagingI2B2_Password = null;
			if (pwd_DB_StagingI2B2_Password_value != null) {
				if (context_param.containsKey("DB_StagingI2B2_Password")) {// no
																			// need
																			// to
																			// decrypt
																			// if
																			// it
																			// come
																			// from
																			// program
																			// argument
																			// or
																			// parent
																			// job
																			// runtime
					context.DB_StagingI2B2_Password = pwd_DB_StagingI2B2_Password_value;
				} else if (!pwd_DB_StagingI2B2_Password_value.isEmpty()) {
					try {
						context.DB_StagingI2B2_Password = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_DB_StagingI2B2_Password_value);
						context.put("DB_StagingI2B2_Password",
								context.DB_StagingI2B2_Password);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.DB_StagingI2B2_Port = (String) context
					.getProperty("DB_StagingI2B2_Port");
			context.DB_StagingI2B2_Schema = (String) context
					.getProperty("DB_StagingI2B2_Schema");
			context.DB_StagingI2B2_Username = (String) context
					.getProperty("DB_StagingI2B2_Username");
			context.DB_StagingI2B2_WHType = (String) context
					.getProperty("DB_StagingI2B2_WHType");
			context.DB_TargetI2B2_DatabaseType = (String) context
					.getProperty("DB_TargetI2B2_DatabaseType");
			context.DB_TargetI2B2_DriverClass = (String) context
					.getProperty("DB_TargetI2B2_DriverClass");
			context.DB_TargetI2B2_Host = (String) context
					.getProperty("DB_TargetI2B2_Host");
			context.DB_TargetI2B2_Instance = (String) context
					.getProperty("DB_TargetI2B2_Instance");
			context.DB_TargetI2B2_jdbcurl = (String) context
					.getProperty("DB_TargetI2B2_jdbcurl");
			String pwd_DB_TargetI2B2_Password_value = context
					.getProperty("DB_TargetI2B2_Password");
			context.DB_TargetI2B2_Password = null;
			if (pwd_DB_TargetI2B2_Password_value != null) {
				if (context_param.containsKey("DB_TargetI2B2_Password")) {// no
																			// need
																			// to
																			// decrypt
																			// if
																			// it
																			// come
																			// from
																			// program
																			// argument
																			// or
																			// parent
																			// job
																			// runtime
					context.DB_TargetI2B2_Password = pwd_DB_TargetI2B2_Password_value;
				} else if (!pwd_DB_TargetI2B2_Password_value.isEmpty()) {
					try {
						context.DB_TargetI2B2_Password = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_DB_TargetI2B2_Password_value);
						context.put("DB_TargetI2B2_Password",
								context.DB_TargetI2B2_Password);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.DB_TargetI2B2_Port = (String) context
					.getProperty("DB_TargetI2B2_Port");
			context.DB_TargetI2B2_Schema = (String) context
					.getProperty("DB_TargetI2B2_Schema");
			context.DB_TargetI2B2_Username = (String) context
					.getProperty("DB_TargetI2B2_Username");
			context.DB_TargetI2B2_WHType = (String) context
					.getProperty("DB_TargetI2B2_WHType");
			context.DataFile = (String) context.getProperty("DataFile");
			context.ErrorMessage = (String) context.getProperty("ErrorMessage");
			try {
				context.IfValue = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("IfValue"));
			} catch (NumberFormatException e) {
				context.IfValue = null;
			}
			context.JDBC_URL = (String) context.getProperty("JDBC_URL");
			context.JDBCDriver = (String) context.getProperty("JDBCDriver");
			context.Job = (String) context.getProperty("Job");
			context.OracleDB = (String) context.getProperty("OracleDB");
			context.OracleHost = (String) context.getProperty("OracleHost");
			context.OraclePassword = (String) context
					.getProperty("OraclePassword");
			context.OraclePort = (String) context.getProperty("OraclePort");
			context.OracleSchema = (String) context.getProperty("OracleSchema");
			context.OracleUsername = (String) context
					.getProperty("OracleUsername");
			context.SQLCommand = (String) context.getProperty("SQLCommand");
			context.SQLCommand2 = (String) context.getProperty("SQLCommand2");
			context.SQLTable = (String) context.getProperty("SQLTable");
			context.SQLTable2 = (String) context.getProperty("SQLTable2");
			context.StatusMessage = (String) context
					.getProperty("StatusMessage");
			context.TableIEOTarget = (String) context
					.getProperty("TableIEOTarget");
			context.TableIEOTargetOntology = (String) context
					.getProperty("TableIEOTargetOntology");
			context.TableIEOTargetProject = (String) context
					.getProperty("TableIEOTargetProject");
			try {
				context.TargetID = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("TargetID"));
			} catch (NumberFormatException e) {
				context.TargetID = null;
			}
			context.TOSHandler = (Object) context.getProperty("TOSHandler");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("currentTargetProjectID")) {
				context.currentTargetProjectID = (Integer) parentContextMap
						.get("currentTargetProjectID");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_sqlclassname")) {
				context.DB_StagingI2B2_sqlclassname = (String) parentContextMap
						.get("DB_StagingI2B2_sqlclassname");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_sqlclassname")) {
				context.DB_TargetI2B2_sqlclassname = (String) parentContextMap
						.get("DB_TargetI2B2_sqlclassname");
			}
			if (parentContextMap.containsKey("currentQuery")) {
				context.currentQuery = (String) parentContextMap
						.get("currentQuery");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_DatabaseType")) {
				context.DB_StagingI2B2_DatabaseType = (String) parentContextMap
						.get("DB_StagingI2B2_DatabaseType");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_DriverClass")) {
				context.DB_StagingI2B2_DriverClass = (String) parentContextMap
						.get("DB_StagingI2B2_DriverClass");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Host")) {
				context.DB_StagingI2B2_Host = (String) parentContextMap
						.get("DB_StagingI2B2_Host");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Instance")) {
				context.DB_StagingI2B2_Instance = (String) parentContextMap
						.get("DB_StagingI2B2_Instance");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_jdbcurl")) {
				context.DB_StagingI2B2_jdbcurl = (String) parentContextMap
						.get("DB_StagingI2B2_jdbcurl");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Password")) {
				context.DB_StagingI2B2_Password = (java.lang.String) parentContextMap
						.get("DB_StagingI2B2_Password");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Port")) {
				context.DB_StagingI2B2_Port = (String) parentContextMap
						.get("DB_StagingI2B2_Port");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Schema")) {
				context.DB_StagingI2B2_Schema = (String) parentContextMap
						.get("DB_StagingI2B2_Schema");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Username")) {
				context.DB_StagingI2B2_Username = (String) parentContextMap
						.get("DB_StagingI2B2_Username");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_WHType")) {
				context.DB_StagingI2B2_WHType = (String) parentContextMap
						.get("DB_StagingI2B2_WHType");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_DatabaseType")) {
				context.DB_TargetI2B2_DatabaseType = (String) parentContextMap
						.get("DB_TargetI2B2_DatabaseType");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_DriverClass")) {
				context.DB_TargetI2B2_DriverClass = (String) parentContextMap
						.get("DB_TargetI2B2_DriverClass");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Host")) {
				context.DB_TargetI2B2_Host = (String) parentContextMap
						.get("DB_TargetI2B2_Host");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Instance")) {
				context.DB_TargetI2B2_Instance = (String) parentContextMap
						.get("DB_TargetI2B2_Instance");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_jdbcurl")) {
				context.DB_TargetI2B2_jdbcurl = (String) parentContextMap
						.get("DB_TargetI2B2_jdbcurl");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Password")) {
				context.DB_TargetI2B2_Password = (java.lang.String) parentContextMap
						.get("DB_TargetI2B2_Password");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Port")) {
				context.DB_TargetI2B2_Port = (String) parentContextMap
						.get("DB_TargetI2B2_Port");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Schema")) {
				context.DB_TargetI2B2_Schema = (String) parentContextMap
						.get("DB_TargetI2B2_Schema");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Username")) {
				context.DB_TargetI2B2_Username = (String) parentContextMap
						.get("DB_TargetI2B2_Username");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_WHType")) {
				context.DB_TargetI2B2_WHType = (String) parentContextMap
						.get("DB_TargetI2B2_WHType");
			}
			if (parentContextMap.containsKey("DataFile")) {
				context.DataFile = (String) parentContextMap.get("DataFile");
			}
			if (parentContextMap.containsKey("ErrorMessage")) {
				context.ErrorMessage = (String) parentContextMap
						.get("ErrorMessage");
			}
			if (parentContextMap.containsKey("IfValue")) {
				context.IfValue = (Boolean) parentContextMap.get("IfValue");
			}
			if (parentContextMap.containsKey("JDBC_URL")) {
				context.JDBC_URL = (String) parentContextMap.get("JDBC_URL");
			}
			if (parentContextMap.containsKey("JDBCDriver")) {
				context.JDBCDriver = (String) parentContextMap
						.get("JDBCDriver");
			}
			if (parentContextMap.containsKey("Job")) {
				context.Job = (String) parentContextMap.get("Job");
			}
			if (parentContextMap.containsKey("OracleDB")) {
				context.OracleDB = (String) parentContextMap.get("OracleDB");
			}
			if (parentContextMap.containsKey("OracleHost")) {
				context.OracleHost = (String) parentContextMap
						.get("OracleHost");
			}
			if (parentContextMap.containsKey("OraclePassword")) {
				context.OraclePassword = (String) parentContextMap
						.get("OraclePassword");
			}
			if (parentContextMap.containsKey("OraclePort")) {
				context.OraclePort = (String) parentContextMap
						.get("OraclePort");
			}
			if (parentContextMap.containsKey("OracleSchema")) {
				context.OracleSchema = (String) parentContextMap
						.get("OracleSchema");
			}
			if (parentContextMap.containsKey("OracleUsername")) {
				context.OracleUsername = (String) parentContextMap
						.get("OracleUsername");
			}
			if (parentContextMap.containsKey("SQLCommand")) {
				context.SQLCommand = (String) parentContextMap
						.get("SQLCommand");
			}
			if (parentContextMap.containsKey("SQLCommand2")) {
				context.SQLCommand2 = (String) parentContextMap
						.get("SQLCommand2");
			}
			if (parentContextMap.containsKey("SQLTable")) {
				context.SQLTable = (String) parentContextMap.get("SQLTable");
			}
			if (parentContextMap.containsKey("SQLTable2")) {
				context.SQLTable2 = (String) parentContextMap.get("SQLTable2");
			}
			if (parentContextMap.containsKey("StatusMessage")) {
				context.StatusMessage = (String) parentContextMap
						.get("StatusMessage");
			}
			if (parentContextMap.containsKey("TableIEOTarget")) {
				context.TableIEOTarget = (String) parentContextMap
						.get("TableIEOTarget");
			}
			if (parentContextMap.containsKey("TableIEOTargetOntology")) {
				context.TableIEOTargetOntology = (String) parentContextMap
						.get("TableIEOTargetOntology");
			}
			if (parentContextMap.containsKey("TableIEOTargetProject")) {
				context.TableIEOTargetProject = (String) parentContextMap
						.get("TableIEOTargetProject");
			}
			if (parentContextMap.containsKey("TargetID")) {
				context.TargetID = (Integer) parentContextMap.get("TargetID");
			}
			if (parentContextMap.containsKey("TOSHandler")) {
				context.TOSHandler = (Object) parentContextMap
						.get("TOSHandler");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("DB_StagingI2B2_Password");
		parametersToEncrypt.add("DB_TargetI2B2_Password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tJava_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_2) {
			globalMap.put("tJava_2_SUBPROCESS_STATE", -1);

			e_tJava_2.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : TOSIDRTCommand_DeleteTarget");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 74980 characters generated by Talend Open Studio for Data Integration on the
 * March 16, 2015 2:59:01 PM CET
 ************************************************************************************************/
