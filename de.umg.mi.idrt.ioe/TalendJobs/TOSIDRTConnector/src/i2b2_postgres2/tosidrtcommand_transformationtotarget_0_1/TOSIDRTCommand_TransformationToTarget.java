// ============================================================================
//
// Copyright (c) 2006-2014, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package i2b2_postgres2.tosidrtcommand_transformationtotarget_0_1;

import routines.IIT;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.ExportDB;
import routines.Visit;
import routines.enc_num_routine;
import routines.Mathematical;
import routines.Relational;
import routines.TalendDate;
import routines.IDRTHelper;
import routines.PIDGen;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_2
//import java.util.List;

//the import part of tJava_4
//import java.util.List;

//the import part of tJava_5
//import java.util.List;

//the import part of tJava_6
//import java.util.List;

//the import part of tJava_7
//import java.util.List;

//the import part of tJava_3
//import java.util.List;

//the import part of tJava_24
//import java.util.List;

//the import part of tJava_20
//import java.util.List;

//the import part of tJava_25
//import java.util.List;

//the import part of tJava_21
//import java.util.List;

//the import part of tJava_26
//import java.util.List;

//the import part of tJava_22
//import java.util.List;

//the import part of tJava_23
//import java.util.List;

//the import part of tJava_13
//import java.util.List;

//the import part of tJavaRow_4
//import java.util.List;

//the import part of tJava_14
//import java.util.List;

//the import part of tJavaRow_2
//import java.util.List;

//the import part of tJava_15
//import java.util.List;

//the import part of tJavaRow_3
//import java.util.List;

//the import part of tJava_16
//import java.util.List;

//the import part of tJava_17
//import java.util.List;

//the import part of tJava_18
//import java.util.List;

//the import part of tJava_1
//import java.util.List;

//the import part of tLibraryLoad_1
import de.goettingen.i2b2.importtool.idrt.StatusListener.StatusListener;

@SuppressWarnings("unused")
/**
 * Job: TOSIDRTCommand_TransformationToTarget Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.6.1.20141207_1530
 * @status 
 */
public class TOSIDRTCommand_TransformationToTarget implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (folderOutput != null) {

				this.setProperty("folderOutput", folderOutput.toString());

			}

			if (folderMain != null) {

				this.setProperty("folderMain", folderMain.toString());

			}

			if (DB_StagingI2B2_sqlclassname != null) {

				this.setProperty("DB_StagingI2B2_sqlclassname",
						DB_StagingI2B2_sqlclassname.toString());

			}

			if (TargetID != null) {

				this.setProperty("TargetID", TargetID.toString());

			}

			if (sql != null) {

				this.setProperty("sql", sql.toString());

			}

			if (DB_TargetI2B2_sqlclassname != null) {

				this.setProperty("DB_TargetI2B2_sqlclassname",
						DB_TargetI2B2_sqlclassname.toString());

			}

			if (currentQuery != null) {

				this.setProperty("currentQuery", currentQuery.toString());

			}

			if (truncateProject != null) {

				this.setProperty("truncateProject", truncateProject.toString());

			}

			if (truncateQueries != null) {

				this.setProperty("truncateQueries", truncateQueries.toString());

			}

			if (DB_StagingI2B2_DatabaseType != null) {

				this.setProperty("DB_StagingI2B2_DatabaseType",
						DB_StagingI2B2_DatabaseType.toString());

			}

			if (DB_StagingI2B2_DriverClass != null) {

				this.setProperty("DB_StagingI2B2_DriverClass",
						DB_StagingI2B2_DriverClass.toString());

			}

			if (DB_StagingI2B2_Host != null) {

				this.setProperty("DB_StagingI2B2_Host",
						DB_StagingI2B2_Host.toString());

			}

			if (DB_StagingI2B2_Instance != null) {

				this.setProperty("DB_StagingI2B2_Instance",
						DB_StagingI2B2_Instance.toString());

			}

			if (DB_StagingI2B2_jdbcurl != null) {

				this.setProperty("DB_StagingI2B2_jdbcurl",
						DB_StagingI2B2_jdbcurl.toString());

			}

			if (DB_StagingI2B2_Password != null) {

				this.setProperty("DB_StagingI2B2_Password",
						DB_StagingI2B2_Password.toString());

			}

			if (DB_StagingI2B2_Port != null) {

				this.setProperty("DB_StagingI2B2_Port",
						DB_StagingI2B2_Port.toString());

			}

			if (DB_StagingI2B2_Schema != null) {

				this.setProperty("DB_StagingI2B2_Schema",
						DB_StagingI2B2_Schema.toString());

			}

			if (DB_StagingI2B2_Username != null) {

				this.setProperty("DB_StagingI2B2_Username",
						DB_StagingI2B2_Username.toString());

			}

			if (DB_StagingI2B2_WHType != null) {

				this.setProperty("DB_StagingI2B2_WHType",
						DB_StagingI2B2_WHType.toString());

			}

			if (DB_TargetI2B2_DatabaseType != null) {

				this.setProperty("DB_TargetI2B2_DatabaseType",
						DB_TargetI2B2_DatabaseType.toString());

			}

			if (DB_TargetI2B2_DriverClass != null) {

				this.setProperty("DB_TargetI2B2_DriverClass",
						DB_TargetI2B2_DriverClass.toString());

			}

			if (DB_TargetI2B2_Host != null) {

				this.setProperty("DB_TargetI2B2_Host",
						DB_TargetI2B2_Host.toString());

			}

			if (DB_TargetI2B2_Instance != null) {

				this.setProperty("DB_TargetI2B2_Instance",
						DB_TargetI2B2_Instance.toString());

			}

			if (DB_TargetI2B2_jdbcurl != null) {

				this.setProperty("DB_TargetI2B2_jdbcurl",
						DB_TargetI2B2_jdbcurl.toString());

			}

			if (DB_TargetI2B2_Password != null) {

				this.setProperty("DB_TargetI2B2_Password",
						DB_TargetI2B2_Password.toString());

			}

			if (DB_TargetI2B2_Port != null) {

				this.setProperty("DB_TargetI2B2_Port",
						DB_TargetI2B2_Port.toString());

			}

			if (DB_TargetI2B2_Schema != null) {

				this.setProperty("DB_TargetI2B2_Schema",
						DB_TargetI2B2_Schema.toString());

			}

			if (DB_TargetI2B2_Username != null) {

				this.setProperty("DB_TargetI2B2_Username",
						DB_TargetI2B2_Username.toString());

			}

			if (DB_TargetI2B2_WHType != null) {

				this.setProperty("DB_TargetI2B2_WHType",
						DB_TargetI2B2_WHType.toString());

			}

		}

		public String folderOutput;

		public String getFolderOutput() {
			return this.folderOutput;
		}

		public String folderMain;

		public String getFolderMain() {
			return this.folderMain;
		}

		public String DB_StagingI2B2_sqlclassname;

		public String getDB_StagingI2B2_sqlclassname() {
			return this.DB_StagingI2B2_sqlclassname;
		}

		public Integer TargetID;

		public Integer getTargetID() {
			return this.TargetID;
		}

		public String sql;

		public String getSql() {
			return this.sql;
		}

		public String DB_TargetI2B2_sqlclassname;

		public String getDB_TargetI2B2_sqlclassname() {
			return this.DB_TargetI2B2_sqlclassname;
		}

		public String currentQuery;

		public String getCurrentQuery() {
			return this.currentQuery;
		}

		public Boolean truncateProject;

		public Boolean getTruncateProject() {
			return this.truncateProject;
		}

		public Boolean truncateQueries;

		public Boolean getTruncateQueries() {
			return this.truncateQueries;
		}

		public String DB_StagingI2B2_DatabaseType;

		public String getDB_StagingI2B2_DatabaseType() {
			return this.DB_StagingI2B2_DatabaseType;
		}

		public String DB_StagingI2B2_DriverClass;

		public String getDB_StagingI2B2_DriverClass() {
			return this.DB_StagingI2B2_DriverClass;
		}

		public String DB_StagingI2B2_Host;

		public String getDB_StagingI2B2_Host() {
			return this.DB_StagingI2B2_Host;
		}

		public String DB_StagingI2B2_Instance;

		public String getDB_StagingI2B2_Instance() {
			return this.DB_StagingI2B2_Instance;
		}

		public String DB_StagingI2B2_jdbcurl;

		public String getDB_StagingI2B2_jdbcurl() {
			return this.DB_StagingI2B2_jdbcurl;
		}

		public java.lang.String DB_StagingI2B2_Password;

		public java.lang.String getDB_StagingI2B2_Password() {
			return this.DB_StagingI2B2_Password;
		}

		public String DB_StagingI2B2_Port;

		public String getDB_StagingI2B2_Port() {
			return this.DB_StagingI2B2_Port;
		}

		public String DB_StagingI2B2_Schema;

		public String getDB_StagingI2B2_Schema() {
			return this.DB_StagingI2B2_Schema;
		}

		public String DB_StagingI2B2_Username;

		public String getDB_StagingI2B2_Username() {
			return this.DB_StagingI2B2_Username;
		}

		public String DB_StagingI2B2_WHType;

		public String getDB_StagingI2B2_WHType() {
			return this.DB_StagingI2B2_WHType;
		}

		public String DB_TargetI2B2_DatabaseType;

		public String getDB_TargetI2B2_DatabaseType() {
			return this.DB_TargetI2B2_DatabaseType;
		}

		public String DB_TargetI2B2_DriverClass;

		public String getDB_TargetI2B2_DriverClass() {
			return this.DB_TargetI2B2_DriverClass;
		}

		public String DB_TargetI2B2_Host;

		public String getDB_TargetI2B2_Host() {
			return this.DB_TargetI2B2_Host;
		}

		public String DB_TargetI2B2_Instance;

		public String getDB_TargetI2B2_Instance() {
			return this.DB_TargetI2B2_Instance;
		}

		public String DB_TargetI2B2_jdbcurl;

		public String getDB_TargetI2B2_jdbcurl() {
			return this.DB_TargetI2B2_jdbcurl;
		}

		public java.lang.String DB_TargetI2B2_Password;

		public java.lang.String getDB_TargetI2B2_Password() {
			return this.DB_TargetI2B2_Password;
		}

		public String DB_TargetI2B2_Port;

		public String getDB_TargetI2B2_Port() {
			return this.DB_TargetI2B2_Port;
		}

		public String DB_TargetI2B2_Schema;

		public String getDB_TargetI2B2_Schema() {
			return this.DB_TargetI2B2_Schema;
		}

		public String DB_TargetI2B2_Username;

		public String getDB_TargetI2B2_Username() {
			return this.DB_TargetI2B2_Username;
		}

		public String DB_TargetI2B2_WHType;

		public String getDB_TargetI2B2_WHType() {
			return this.DB_TargetI2B2_WHType;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "TOSIDRTCommand_TransformationToTarget";
	private final String projectName = "I2B2_POSTGRES2";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					TOSIDRTCommand_TransformationToTarget.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(
									TOSIDRTCommand_TransformationToTarget.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tJDBCConnection_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_23_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_24_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_24_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_20_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_25_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_25_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_21_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_21_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_26_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_26_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_18_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_22_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_22_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_23_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_23_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_19_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_29_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_21_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUnite_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_32_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_17_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_17_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_17_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_24_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_17_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tCreateTemporaryFile_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_13_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_29_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_29_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_29_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_34_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_29_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJDBCClose_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_18_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tCreateTemporaryFile_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLibraryLoad_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLibraryLoad_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tCreateTemporaryFile_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_31_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_31_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_33_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_33_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_13_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_11_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_12_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_11_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_12_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_14_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_15_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_19_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_19_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_20_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_20_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_21_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_21_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_25_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_25_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_from_src_ont_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row47_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_31_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row49_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_33_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row51_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_13_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_to_tmap_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_from_src_conc_dim_error(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_11_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_12_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_copyOfto_tmap_error(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row27_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_15_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row31_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_19_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row32_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_20_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row33_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_21_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row30_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_25_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_4_TMAP_OUT_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tMap_4_TMAP_IN_error(exception, errorComponent, globalMap);

	}

	public void tMap_4_TMAP_IN_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_9_TMAP_OUT_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tMap_9_TMAP_IN_error(exception, errorComponent, globalMap);

	}

	public void tMap_9_TMAP_IN_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_8_TMAP_OUT_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tMap_8_TMAP_IN_error(exception, errorComponent, globalMap);

	}

	public void tMap_8_TMAP_IN_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_15_TMAP_OUT_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tMap_15_TMAP_IN_error(exception, errorComponent, globalMap);

	}

	public void tMap_15_TMAP_IN_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_17_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_14_TMAP_OUT_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tMap_14_TMAP_IN_error(exception, errorComponent, globalMap);

	}

	public void tMap_14_TMAP_IN_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_17_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_3_TMAP_OUT_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tMap_3_TMAP_IN_error(exception, errorComponent, globalMap);

	}

	public void tMap_3_TMAP_IN_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_12_TMAP_OUT_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tMap_12_TMAP_IN_error(exception, errorComponent, globalMap);

	}

	public void tMap_12_TMAP_IN_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJDBCConnection_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_6_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_9_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_7_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_16_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_8_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_24_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_12_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_20_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_25_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_13_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_21_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_26_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_14_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_22_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_10_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_23_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_11_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_13_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_14_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_15_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_17_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_16_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_13_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_29_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCClose_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_17_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "ERROR", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

		try {

			errorCode = null;
			tDie_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}
	}

	public void tJava_18_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLibraryLoad_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_2_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_3_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_31_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_33_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_13_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_4_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_5_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_6_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_7_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_8_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_9_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_10_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_11_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_12_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_5_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_4_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_11_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_10_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_9_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_12_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_14_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_16_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_15_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_19_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_20_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_21_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_25_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCConnection_1 begin ] start
				 */

				ok_Hash.put("tJDBCConnection_1", false);
				start_Hash.put("tJDBCConnection_1", System.currentTimeMillis());

				currentComponent = "tJDBCConnection_1";

				int tos_count_tJDBCConnection_1 = 0;

				String url_tJDBCConnection_1 = context.DB_StagingI2B2_jdbcurl;

				String dbUser_tJDBCConnection_1 = context.DB_StagingI2B2_Username;

				final String decryptedPassword_tJDBCConnection_1 = context.DB_StagingI2B2_Password;
				String dbPwd_tJDBCConnection_1 = decryptedPassword_tJDBCConnection_1;

				java.sql.Connection conn_tJDBCConnection_1 = null;

				String driverClass_tJDBCConnection_1 = context.DB_StagingI2B2_DriverClass;
				java.lang.Class.forName(driverClass_tJDBCConnection_1);

				conn_tJDBCConnection_1 = java.sql.DriverManager.getConnection(
						url_tJDBCConnection_1, dbUser_tJDBCConnection_1,
						dbPwd_tJDBCConnection_1);

				globalMap.put("conn_tJDBCConnection_1", conn_tJDBCConnection_1);
				if (null != conn_tJDBCConnection_1) {

				}

				globalMap.put("conn_tJDBCConnection_1", conn_tJDBCConnection_1);
				globalMap.put("url_tJDBCConnection_1", url_tJDBCConnection_1);
				// globalMap.put("user_tJDBCConnection_1",
				// dbUser_tJDBCConnection_1);
				// globalMap.put("pass_tJDBCConnection_1",
				// dbPwd_tJDBCConnection_1);

				/**
				 * [tJDBCConnection_1 begin ] stop
				 */

				/**
				 * [tJDBCConnection_1 main ] start
				 */

				currentComponent = "tJDBCConnection_1";

				tos_count_tJDBCConnection_1++;

				/**
				 * [tJDBCConnection_1 main ] stop
				 */

				/**
				 * [tJDBCConnection_1 end ] start
				 */

				currentComponent = "tJDBCConnection_1";

				ok_Hash.put("tJDBCConnection_1", true);
				end_Hash.put("tJDBCConnection_1", System.currentTimeMillis());

				/**
				 * [tJDBCConnection_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJDBCConnection_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tJava_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCConnection_1 finally ] start
				 */

				currentComponent = "tJDBCConnection_1";

				/**
				 * [tJDBCConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());

				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				System.out.println("Extracting Staging Data...");
				StatusListener.setStatus(10, "Extracting Staging Data...", "");

				/**
				 * [tJava_2 begin ] stop
				 */

				/**
				 * [tJava_2 main ] start
				 */

				currentComponent = "tJava_2";

				tos_count_tJava_2++;

				/**
				 * [tJava_2 main ] stop
				 */

				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				/**
				 * [tJava_2 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk1", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_4Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk2", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_5Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk3", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_6Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk4", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_7Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk5", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_3Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk6", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_24Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk7", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_20Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk8", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_21Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk9", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_26Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk10", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_22Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk11", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_23Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk12", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_13Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_2 finally ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_4 begin ] start
				 */

				ok_Hash.put("tJava_4", false);
				start_Hash.put("tJava_4", System.currentTimeMillis());

				currentComponent = "tJava_4";

				int tos_count_tJava_4 = 0;

				StatusListener.setSubStatus(0, "Getting Target Ontology...");
				if (context.DB_StagingI2B2_WHType.equalsIgnoreCase("i2b2"))
					context.currentQuery = "select * from "
							+ context.DB_StagingI2B2_Schema
							+ ".IOE_TARGET_ONTOLOGY where target_id = "
							+ context.TargetID;
				else {
					context.currentQuery = "select * from i2b2metadata.IOE_TARGET_ONTOLOGY where target_id = "
							+ context.TargetID;

				}

				/**
				 * [tJava_4 begin ] stop
				 */

				/**
				 * [tJava_4 main ] start
				 */

				currentComponent = "tJava_4";

				tos_count_tJava_4++;

				/**
				 * [tJava_4 main ] stop
				 */

				/**
				 * [tJava_4 end ] start
				 */

				currentComponent = "tJava_4";

				ok_Hash.put("tJava_4", true);
				end_Hash.put("tJava_4", System.currentTimeMillis());

				/**
				 * [tJava_4 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_4:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_4 finally ] start
				 */

				currentComponent = "tJava_4";

				/**
				 * [tJava_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public Integer TARGET_ID;

		public Integer getTARGET_ID() {
			return this.TARGET_ID;
		}

		public Integer TREE_LEVEL;

		public Integer getTREE_LEVEL() {
			return this.TREE_LEVEL;
		}

		public String TREE_PATH;

		public String getTREE_PATH() {
			return this.TREE_PATH;
		}

		public String STAGING_PATH;

		public String getSTAGING_PATH() {
			return this.STAGING_PATH;
		}

		public String STAGING_DIMENSION;

		public String getSTAGING_DIMENSION() {
			return this.STAGING_DIMENSION;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String STARTDATE_STAGING_PATH;

		public String getSTARTDATE_STAGING_PATH() {
			return this.STARTDATE_STAGING_PATH;
		}

		public String ENDDATE_STAGING_PATH;

		public String getENDDATE_STAGING_PATH() {
			return this.ENDDATE_STAGING_PATH;
		}

		public String VISUALATTRIBUTES;

		public String getVISUALATTRIBUTES() {
			return this.VISUALATTRIBUTES;
		}

		public String BASECODE;

		public String getBASECODE() {
			return this.BASECODE;
		}

		public String METADATAXML;

		public String getMETADATAXML() {
			return this.METADATAXML;
		}

		public String COLUMNDATATYPE;

		public String getCOLUMNDATATYPE() {
			return this.COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String TOOLTIP;

		public String getTOOLTIP() {
			return this.TOOLTIP;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public String STAGING_M_APPLIED_PATH;

		public String getSTAGING_M_APPLIED_PATH() {
			return this.STAGING_M_APPLIED_PATH;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.TARGET_ID = readInteger(dis);

					this.TREE_LEVEL = readInteger(dis);

					this.TREE_PATH = readString(dis);

					this.STAGING_PATH = readString(dis);

					this.STAGING_DIMENSION = readString(dis);

					this.C_NAME = readString(dis);

					this.STARTDATE_STAGING_PATH = readString(dis);

					this.ENDDATE_STAGING_PATH = readString(dis);

					this.VISUALATTRIBUTES = readString(dis);

					this.BASECODE = readString(dis);

					this.METADATAXML = readString(dis);

					this.COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_COMMENT = readString(dis);

					this.TOOLTIP = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.STAGING_M_APPLIED_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.TARGET_ID, dos);

				// Integer

				writeInteger(this.TREE_LEVEL, dos);

				// String

				writeString(this.TREE_PATH, dos);

				// String

				writeString(this.STAGING_PATH, dos);

				// String

				writeString(this.STAGING_DIMENSION, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.STARTDATE_STAGING_PATH, dos);

				// String

				writeString(this.ENDDATE_STAGING_PATH, dos);

				// String

				writeString(this.VISUALATTRIBUTES, dos);

				// String

				writeString(this.BASECODE, dos);

				// String

				writeString(this.METADATAXML, dos);

				// String

				writeString(this.COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.TOOLTIP, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// String

				writeString(this.STAGING_M_APPLIED_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TARGET_ID=" + String.valueOf(TARGET_ID));
			sb.append(",TREE_LEVEL=" + String.valueOf(TREE_LEVEL));
			sb.append(",TREE_PATH=" + TREE_PATH);
			sb.append(",STAGING_PATH=" + STAGING_PATH);
			sb.append(",STAGING_DIMENSION=" + STAGING_DIMENSION);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",STARTDATE_STAGING_PATH=" + STARTDATE_STAGING_PATH);
			sb.append(",ENDDATE_STAGING_PATH=" + ENDDATE_STAGING_PATH);
			sb.append(",VISUALATTRIBUTES=" + VISUALATTRIBUTES);
			sb.append(",BASECODE=" + BASECODE);
			sb.append(",METADATAXML=" + METADATAXML);
			sb.append(",COLUMNDATATYPE=" + COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",TOOLTIP=" + TOOLTIP);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",STAGING_M_APPLIED_PATH=" + STAGING_M_APPLIED_PATH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						((String) globalMap
								.get("tCreateTemporaryFile_1_FILEPATH"))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);

				String[] headColutFileOutputDelimited_1 = new String[22];
				class CSVBasicSet_tFileOutputDelimited_1 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_1[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_1 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_1[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_1[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_1 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_1[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_1[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_1 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_1[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_1 = 0;
				int splitEvery_tFileOutputDelimited_1 = 1000;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				CSVBasicSet_tFileOutputDelimited_1 csvSettings_tFileOutputDelimited_1 = new CSVBasicSet_tFileOutputDelimited_1();
				csvSettings_tFileOutputDelimited_1.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_1.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_1.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {

						dir_tFileOutputDelimited_1.mkdirs();

					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}

				CsvWritertFileOutputDelimited_1 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_1,
												false), "UTF-8")));
				CsvWritertFileOutputDelimited_1
						.setSeparator(csvSettings_tFileOutputDelimited_1
								.getFieldDelim());

				if (!csvSettings_tFileOutputDelimited_1
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_1.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_1.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_1.setLineEnd(""
							+ csvSettings_tFileOutputDelimited_1.getRowDelim());
				}

				if (filetFileOutputDelimited_1.length() == 0) {

					headColutFileOutputDelimited_1[0] = "TARGET_ID";

					headColutFileOutputDelimited_1[1] = "TREE_LEVEL";

					headColutFileOutputDelimited_1[2] = "TREE_PATH";

					headColutFileOutputDelimited_1[3] = "STAGING_PATH";

					headColutFileOutputDelimited_1[4] = "STAGING_DIMENSION";

					headColutFileOutputDelimited_1[5] = "C_NAME";

					headColutFileOutputDelimited_1[6] = "STARTDATE_STAGING_PATH";

					headColutFileOutputDelimited_1[7] = "ENDDATE_STAGING_PATH";

					headColutFileOutputDelimited_1[8] = "VISUALATTRIBUTES";

					headColutFileOutputDelimited_1[9] = "BASECODE";

					headColutFileOutputDelimited_1[10] = "METADATAXML";

					headColutFileOutputDelimited_1[11] = "COLUMNDATATYPE";

					headColutFileOutputDelimited_1[12] = "C_OPERATOR";

					headColutFileOutputDelimited_1[13] = "C_COMMENT";

					headColutFileOutputDelimited_1[14] = "TOOLTIP";

					headColutFileOutputDelimited_1[15] = "UPDATE_DATE";

					headColutFileOutputDelimited_1[16] = "DOWNLOAD_DATE";

					headColutFileOutputDelimited_1[17] = "IMPORT_DATE";

					headColutFileOutputDelimited_1[18] = "SOURCESYSTEM_CD";

					headColutFileOutputDelimited_1[19] = "VALUETYPE_CD";

					headColutFileOutputDelimited_1[20] = "M_APPLIED_PATH";

					headColutFileOutputDelimited_1[21] = "STAGING_M_APPLIED_PATH";

					CsvWritertFileOutputDelimited_1
							.writeNext(headColutFileOutputDelimited_1);
					CsvWritertFileOutputDelimited_1.flush();

				}

				CsvWritertFileOutputDelimited_1
						.setEscapeChar(csvSettings_tFileOutputDelimited_1
								.getEscapeChar());
				CsvWritertFileOutputDelimited_1
						.setQuoteChar(csvSettings_tFileOutputDelimited_1
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_1
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_1",
						CsvWritertFileOutputDelimited_1);

				resourceMap.put("nb_line_tFileOutputDelimited_1",
						nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tJDBCInput_1 begin ] start
				 */

				ok_Hash.put("tJDBCInput_1", false);
				start_Hash.put("tJDBCInput_1", System.currentTimeMillis());

				currentComponent = "tJDBCInput_1";

				int tos_count_tJDBCInput_1 = 0;

				int nb_line_tJDBCInput_1 = 0;
				java.sql.Connection conn_tJDBCInput_1 = null;
				conn_tJDBCInput_1 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_1 = conn_tJDBCInput_1
						.createStatement();

				String dbquery_tJDBCInput_1 = context.currentQuery;

				globalMap.put("tJDBCInput_1_QUERY", dbquery_tJDBCInput_1);
				java.sql.ResultSet rs_tJDBCInput_1 = null;
				try {
					rs_tJDBCInput_1 = stmt_tJDBCInput_1
							.executeQuery(dbquery_tJDBCInput_1);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_1 = rs_tJDBCInput_1
							.getMetaData();
					int colQtyInRs_tJDBCInput_1 = rsmd_tJDBCInput_1
							.getColumnCount();

					String tmpContent_tJDBCInput_1 = null;

					while (rs_tJDBCInput_1.next()) {
						nb_line_tJDBCInput_1++;

						if (colQtyInRs_tJDBCInput_1 < 1) {
							row1.TARGET_ID = null;
						} else {

							if (rs_tJDBCInput_1.getObject(1) != null) {
								row1.TARGET_ID = rs_tJDBCInput_1.getInt(1);
							} else {
								row1.TARGET_ID = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 2) {
							row1.TREE_LEVEL = null;
						} else {

							if (rs_tJDBCInput_1.getObject(2) != null) {
								row1.TREE_LEVEL = rs_tJDBCInput_1.getInt(2);
							} else {
								row1.TREE_LEVEL = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 3) {
							row1.TREE_PATH = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(3);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.TREE_PATH = tmpContent_tJDBCInput_1;
							} else {
								row1.TREE_PATH = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 4) {
							row1.STAGING_PATH = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(4);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.STAGING_PATH = tmpContent_tJDBCInput_1;
							} else {
								row1.STAGING_PATH = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 5) {
							row1.STAGING_DIMENSION = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(5);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.STAGING_DIMENSION = tmpContent_tJDBCInput_1;
							} else {
								row1.STAGING_DIMENSION = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 6) {
							row1.C_NAME = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(6);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.C_NAME = tmpContent_tJDBCInput_1;
							} else {
								row1.C_NAME = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 7) {
							row1.STARTDATE_STAGING_PATH = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(7);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.STARTDATE_STAGING_PATH = tmpContent_tJDBCInput_1;
							} else {
								row1.STARTDATE_STAGING_PATH = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 8) {
							row1.ENDDATE_STAGING_PATH = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(8);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.ENDDATE_STAGING_PATH = tmpContent_tJDBCInput_1;
							} else {
								row1.ENDDATE_STAGING_PATH = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 9) {
							row1.VISUALATTRIBUTES = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(9);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.VISUALATTRIBUTES = tmpContent_tJDBCInput_1;
							} else {
								row1.VISUALATTRIBUTES = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 10) {
							row1.BASECODE = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(10);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.BASECODE = tmpContent_tJDBCInput_1;
							} else {
								row1.BASECODE = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 11) {
							row1.METADATAXML = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(11);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.METADATAXML = tmpContent_tJDBCInput_1;
							} else {
								row1.METADATAXML = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 12) {
							row1.COLUMNDATATYPE = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(12);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.COLUMNDATATYPE = tmpContent_tJDBCInput_1;
							} else {
								row1.COLUMNDATATYPE = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 13) {
							row1.C_OPERATOR = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(13);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.C_OPERATOR = tmpContent_tJDBCInput_1;
							} else {
								row1.C_OPERATOR = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 14) {
							row1.C_COMMENT = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(14);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.C_COMMENT = tmpContent_tJDBCInput_1;
							} else {
								row1.C_COMMENT = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 15) {
							row1.TOOLTIP = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(15);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.TOOLTIP = tmpContent_tJDBCInput_1;
							} else {
								row1.TOOLTIP = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 16) {
							row1.UPDATE_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_1 = null;
							try {
								date_tJDBCInput_1 = rs_tJDBCInput_1
										.getTimestamp(16);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_1 = rs_tJDBCInput_1.getDate(16);
							}
							row1.UPDATE_DATE = date_tJDBCInput_1;
						}
						if (colQtyInRs_tJDBCInput_1 < 17) {
							row1.DOWNLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_1 = null;
							try {
								date_tJDBCInput_1 = rs_tJDBCInput_1
										.getTimestamp(17);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_1 = rs_tJDBCInput_1.getDate(17);
							}
							row1.DOWNLOAD_DATE = date_tJDBCInput_1;
						}
						if (colQtyInRs_tJDBCInput_1 < 18) {
							row1.IMPORT_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_1 = null;
							try {
								date_tJDBCInput_1 = rs_tJDBCInput_1
										.getTimestamp(18);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_1 = rs_tJDBCInput_1.getDate(18);
							}
							row1.IMPORT_DATE = date_tJDBCInput_1;
						}
						if (colQtyInRs_tJDBCInput_1 < 19) {
							row1.SOURCESYSTEM_CD = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(19);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.SOURCESYSTEM_CD = tmpContent_tJDBCInput_1;
							} else {
								row1.SOURCESYSTEM_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 20) {
							row1.VALUETYPE_CD = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(20);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.VALUETYPE_CD = tmpContent_tJDBCInput_1;
							} else {
								row1.VALUETYPE_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 21) {
							row1.M_APPLIED_PATH = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(21);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.M_APPLIED_PATH = tmpContent_tJDBCInput_1;
							} else {
								row1.M_APPLIED_PATH = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 22) {
							row1.STAGING_M_APPLIED_PATH = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(22);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.STAGING_M_APPLIED_PATH = tmpContent_tJDBCInput_1;
							} else {
								row1.STAGING_M_APPLIED_PATH = null;
							}
						}

						/**
						 * [tJDBCInput_1 begin ] stop
						 */

						/**
						 * [tJDBCInput_1 main ] start
						 */

						currentComponent = "tJDBCInput_1";

						tos_count_tJDBCInput_1++;

						/**
						 * [tJDBCInput_1 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 main ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						String[] rowtFileOutputDelimited_1 = new String[22];

						rowtFileOutputDelimited_1[0] = row1.TARGET_ID == null ? ""
								: String.valueOf(row1.TARGET_ID);

						rowtFileOutputDelimited_1[1] = row1.TREE_LEVEL == null ? ""
								: String.valueOf(row1.TREE_LEVEL);

						rowtFileOutputDelimited_1[2] = row1.TREE_PATH == null ? ""
								: row1.TREE_PATH;

						rowtFileOutputDelimited_1[3] = row1.STAGING_PATH == null ? ""
								: row1.STAGING_PATH;

						rowtFileOutputDelimited_1[4] = row1.STAGING_DIMENSION == null ? ""
								: row1.STAGING_DIMENSION;

						rowtFileOutputDelimited_1[5] = row1.C_NAME == null ? ""
								: row1.C_NAME;

						rowtFileOutputDelimited_1[6] = row1.STARTDATE_STAGING_PATH == null ? ""
								: row1.STARTDATE_STAGING_PATH;

						rowtFileOutputDelimited_1[7] = row1.ENDDATE_STAGING_PATH == null ? ""
								: row1.ENDDATE_STAGING_PATH;

						rowtFileOutputDelimited_1[8] = row1.VISUALATTRIBUTES == null ? ""
								: row1.VISUALATTRIBUTES;

						rowtFileOutputDelimited_1[9] = row1.BASECODE == null ? ""
								: row1.BASECODE;

						rowtFileOutputDelimited_1[10] = row1.METADATAXML == null ? ""
								: row1.METADATAXML;

						rowtFileOutputDelimited_1[11] = row1.COLUMNDATATYPE == null ? ""
								: row1.COLUMNDATATYPE;

						rowtFileOutputDelimited_1[12] = row1.C_OPERATOR == null ? ""
								: row1.C_OPERATOR;

						rowtFileOutputDelimited_1[13] = row1.C_COMMENT == null ? ""
								: row1.C_COMMENT;

						rowtFileOutputDelimited_1[14] = row1.TOOLTIP == null ? ""
								: row1.TOOLTIP;

						rowtFileOutputDelimited_1[15] = row1.UPDATE_DATE == null ? ""
								: FormatterUtils.format_Date(row1.UPDATE_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_1[16] = row1.DOWNLOAD_DATE == null ? ""
								: FormatterUtils.format_Date(
										row1.DOWNLOAD_DATE, "dd-MM-yyyy");

						rowtFileOutputDelimited_1[17] = row1.IMPORT_DATE == null ? ""
								: FormatterUtils.format_Date(row1.IMPORT_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_1[18] = row1.SOURCESYSTEM_CD == null ? ""
								: row1.SOURCESYSTEM_CD;

						rowtFileOutputDelimited_1[19] = row1.VALUETYPE_CD == null ? ""
								: row1.VALUETYPE_CD;

						rowtFileOutputDelimited_1[20] = row1.M_APPLIED_PATH == null ? ""
								: row1.M_APPLIED_PATH;

						rowtFileOutputDelimited_1[21] = row1.STAGING_M_APPLIED_PATH == null ? ""
								: row1.STAGING_M_APPLIED_PATH;

						nb_line_tFileOutputDelimited_1++;
						resourceMap.put("nb_line_tFileOutputDelimited_1",
								nb_line_tFileOutputDelimited_1);
						CsvWritertFileOutputDelimited_1
								.writeNext(rowtFileOutputDelimited_1);

						tos_count_tFileOutputDelimited_1++;

						/**
						 * [tFileOutputDelimited_1 main ] stop
						 */

						/**
						 * [tJDBCInput_1 end ] start
						 */

						currentComponent = "tJDBCInput_1";

					}
				} finally {
					if (rs_tJDBCInput_1 != null) {
						rs_tJDBCInput_1.close();
					}
					stmt_tJDBCInput_1.close();

				}
				globalMap.put("tJDBCInput_1_NB_LINE", nb_line_tJDBCInput_1);

				ok_Hash.put("tJDBCInput_1", true);
				end_Hash.put("tJDBCInput_1", System.currentTimeMillis());

				/**
				 * [tJDBCInput_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (CsvWritertFileOutputDelimited_1 != null) {
					CsvWritertFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE",
						nb_line_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_1 finally ] start
				 */

				currentComponent = "tJDBCInput_1";

				/**
				 * [tJDBCInput_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_1");

					if (CsvWritertFileOutputDelimited_1 != null) {
						CsvWritertFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_5 begin ] start
				 */

				ok_Hash.put("tJava_5", false);
				start_Hash.put("tJava_5", System.currentTimeMillis());

				currentComponent = "tJava_5";

				int tos_count_tJava_5 = 0;

				StatusListener.setSubStatus(10, "Getting Staging Ontology...");
				if (context.DB_StagingI2B2_WHType.equalsIgnoreCase("i2b2"))
					context.currentQuery = "select * from "
							+ context.DB_StagingI2B2_Schema
							+ ".i2b2 INNER JOIN "
							+ context.DB_StagingI2B2_Schema
							+ ".ioe_target_ontology ON "
							+ context.DB_StagingI2B2_Schema
							+ ".i2b2.c_fullname = "
							+ context.DB_StagingI2B2_Schema
							+ ".ioe_target_ontology.staging_path where "
							+ context.DB_StagingI2B2_Schema
							+ ".ioe_target_ontology.target_id = "
							+ context.TargetID;
				else {
					context.currentQuery = "select * from i2b2metadata.i2b2_secure INNER JOIN i2b2metadata.ioe_target_ontology ON i2b2metadata.i2b2_secure.c_fullname = i2b2metadata.ioe_target_ontology.staging_path where i2b2metadata.ioe_target_ontology.target_id = "
							+ context.TargetID;

				}

				/**
				 * [tJava_5 begin ] stop
				 */

				/**
				 * [tJava_5 main ] start
				 */

				currentComponent = "tJava_5";

				tos_count_tJava_5++;

				/**
				 * [tJava_5 main ] stop
				 */

				/**
				 * [tJava_5 end ] start
				 */

				currentComponent = "tJava_5";

				ok_Hash.put("tJava_5", true);
				end_Hash.put("tJava_5", System.currentTimeMillis());

				/**
				 * [tJava_5 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_5:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCInput_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_5 finally ] start
				 */

				currentComponent = "tJava_5";

				/**
				 * [tJava_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal C_HLEVEL;

		public BigDecimal getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String C_SYNONYM_CD;

		public String getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public BigDecimal C_TOTALNUM;

		public BigDecimal getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public String C_COLUMNDATATYPE;

		public String getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public Object C_COMMENT;

		public Object getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.C_HLEVEL = (BigDecimal) dis.readObject();

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					this.C_SYNONYM_CD = readString(dis);

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = (BigDecimal) dis.readObject();

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					this.C_COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = (Object) dis.readObject();

					this.C_TOOLTIP = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.C_HLEVEL);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.C_SYNONYM_CD, dos);

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// BigDecimal

				dos.writeObject(this.C_TOTALNUM);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// String

				writeString(this.C_COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// Object

				dos.writeObject(this.C_COMMENT);

				// String

				writeString(this.C_TOOLTIP, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + C_SYNONYM_CD);
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + String.valueOf(C_TOTALNUM));
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + C_COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + String.valueOf(C_COMMENT));
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_2";

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						((String) globalMap
								.get("tCreateTemporaryFile_2_FILEPATH"))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(0, fileName_tFileOutputDelimited_2
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);

				String[] headColutFileOutputDelimited_2 = new String[25];
				class CSVBasicSet_tFileOutputDelimited_2 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_2[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_2 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_2[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_2[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_2 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_2[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_2[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_2 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_2[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_2 = 0;
				int splitEvery_tFileOutputDelimited_2 = 1000;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				CSVBasicSet_tFileOutputDelimited_2 csvSettings_tFileOutputDelimited_2 = new CSVBasicSet_tFileOutputDelimited_2();
				csvSettings_tFileOutputDelimited_2.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_2.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_2.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null
						&& directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
							directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {

						dir_tFileOutputDelimited_2.mkdirs();

					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_2 = null;

				java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				if (fileToDelete_tFileOutputDelimited_2.exists()) {
					fileToDelete_tFileOutputDelimited_2.delete();
				}

				CsvWritertFileOutputDelimited_2 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_2,
												false), "UTF-8")));
				CsvWritertFileOutputDelimited_2
						.setSeparator(csvSettings_tFileOutputDelimited_2
								.getFieldDelim());

				if (!csvSettings_tFileOutputDelimited_2
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_2.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_2.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_2.setLineEnd(""
							+ csvSettings_tFileOutputDelimited_2.getRowDelim());
				}

				if (filetFileOutputDelimited_2.length() == 0) {

					headColutFileOutputDelimited_2[0] = "C_HLEVEL";

					headColutFileOutputDelimited_2[1] = "C_FULLNAME";

					headColutFileOutputDelimited_2[2] = "C_NAME";

					headColutFileOutputDelimited_2[3] = "C_SYNONYM_CD";

					headColutFileOutputDelimited_2[4] = "C_VISUALATTRIBUTES";

					headColutFileOutputDelimited_2[5] = "C_TOTALNUM";

					headColutFileOutputDelimited_2[6] = "C_BASECODE";

					headColutFileOutputDelimited_2[7] = "C_METADATAXML";

					headColutFileOutputDelimited_2[8] = "C_FACTTABLECOLUMN";

					headColutFileOutputDelimited_2[9] = "C_TABLENAME";

					headColutFileOutputDelimited_2[10] = "C_COLUMNNAME";

					headColutFileOutputDelimited_2[11] = "C_COLUMNDATATYPE";

					headColutFileOutputDelimited_2[12] = "C_OPERATOR";

					headColutFileOutputDelimited_2[13] = "C_DIMCODE";

					headColutFileOutputDelimited_2[14] = "C_COMMENT";

					headColutFileOutputDelimited_2[15] = "C_TOOLTIP";

					headColutFileOutputDelimited_2[16] = "M_APPLIED_PATH";

					headColutFileOutputDelimited_2[17] = "UPDATE_DATE";

					headColutFileOutputDelimited_2[18] = "DOWNLOAD_DATE";

					headColutFileOutputDelimited_2[19] = "IMPORT_DATE";

					headColutFileOutputDelimited_2[20] = "SOURCESYSTEM_CD";

					headColutFileOutputDelimited_2[21] = "VALUETYPE_CD";

					headColutFileOutputDelimited_2[22] = "M_EXCLUSION_CD";

					headColutFileOutputDelimited_2[23] = "C_PATH";

					headColutFileOutputDelimited_2[24] = "C_SYMBOL";

					CsvWritertFileOutputDelimited_2
							.writeNext(headColutFileOutputDelimited_2);
					CsvWritertFileOutputDelimited_2.flush();

				}

				CsvWritertFileOutputDelimited_2
						.setEscapeChar(csvSettings_tFileOutputDelimited_2
								.getEscapeChar());
				CsvWritertFileOutputDelimited_2
						.setQuoteChar(csvSettings_tFileOutputDelimited_2
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_2
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_2",
						CsvWritertFileOutputDelimited_2);

				resourceMap.put("nb_line_tFileOutputDelimited_2",
						nb_line_tFileOutputDelimited_2);

				/**
				 * [tFileOutputDelimited_2 begin ] stop
				 */

				/**
				 * [tJDBCInput_2 begin ] start
				 */

				ok_Hash.put("tJDBCInput_2", false);
				start_Hash.put("tJDBCInput_2", System.currentTimeMillis());

				currentComponent = "tJDBCInput_2";

				int tos_count_tJDBCInput_2 = 0;

				int nb_line_tJDBCInput_2 = 0;
				java.sql.Connection conn_tJDBCInput_2 = null;
				conn_tJDBCInput_2 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_2 = conn_tJDBCInput_2
						.createStatement();

				String dbquery_tJDBCInput_2 = context.currentQuery;

				globalMap.put("tJDBCInput_2_QUERY", dbquery_tJDBCInput_2);
				java.sql.ResultSet rs_tJDBCInput_2 = null;
				try {
					rs_tJDBCInput_2 = stmt_tJDBCInput_2
							.executeQuery(dbquery_tJDBCInput_2);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_2 = rs_tJDBCInput_2
							.getMetaData();
					int colQtyInRs_tJDBCInput_2 = rsmd_tJDBCInput_2
							.getColumnCount();

					String tmpContent_tJDBCInput_2 = null;

					while (rs_tJDBCInput_2.next()) {
						nb_line_tJDBCInput_2++;

						if (colQtyInRs_tJDBCInput_2 < 1) {
							row2.C_HLEVEL = null;
						} else {

							if (rs_tJDBCInput_2.getObject(1) != null) {
								row2.C_HLEVEL = rs_tJDBCInput_2
										.getBigDecimal(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tJDBCInput_2 < 2) {
							row2.C_FULLNAME = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(2);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_FULLNAME = tmpContent_tJDBCInput_2;
							} else {
								row2.C_FULLNAME = null;
							}
						}
						if (colQtyInRs_tJDBCInput_2 < 3) {
							row2.C_NAME = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(3);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_NAME = tmpContent_tJDBCInput_2;
							} else {
								row2.C_NAME = null;
							}
						}
						if (colQtyInRs_tJDBCInput_2 < 4) {
							row2.C_SYNONYM_CD = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(4);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_SYNONYM_CD = tmpContent_tJDBCInput_2;
							} else {
								row2.C_SYNONYM_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_2 < 5) {
							row2.C_VISUALATTRIBUTES = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(5);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_VISUALATTRIBUTES = tmpContent_tJDBCInput_2;
							} else {
								row2.C_VISUALATTRIBUTES = null;
							}
						}
						if (colQtyInRs_tJDBCInput_2 < 6) {
							row2.C_TOTALNUM = null;
						} else {

							if (rs_tJDBCInput_2.getObject(6) != null) {
								row2.C_TOTALNUM = rs_tJDBCInput_2
										.getBigDecimal(6);
							} else {
								row2.C_TOTALNUM = null;
							}
						}
						if (colQtyInRs_tJDBCInput_2 < 7) {
							row2.C_BASECODE = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(7);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_BASECODE = tmpContent_tJDBCInput_2;
							} else {
								row2.C_BASECODE = null;
							}
						}
						if (colQtyInRs_tJDBCInput_2 < 8) {
							row2.C_METADATAXML = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(8);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_METADATAXML = tmpContent_tJDBCInput_2;
							} else {
								row2.C_METADATAXML = null;
							}
						}
						if (colQtyInRs_tJDBCInput_2 < 9) {
							row2.C_FACTTABLECOLUMN = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(9);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_FACTTABLECOLUMN = tmpContent_tJDBCInput_2;
							} else {
								row2.C_FACTTABLECOLUMN = null;
							}
						}
						if (colQtyInRs_tJDBCInput_2 < 10) {
							row2.C_TABLENAME = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(10);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_TABLENAME = tmpContent_tJDBCInput_2;
							} else {
								row2.C_TABLENAME = null;
							}
						}
						if (colQtyInRs_tJDBCInput_2 < 11) {
							row2.C_COLUMNNAME = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(11);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_COLUMNNAME = tmpContent_tJDBCInput_2;
							} else {
								row2.C_COLUMNNAME = null;
							}
						}
						if (colQtyInRs_tJDBCInput_2 < 12) {
							row2.C_COLUMNDATATYPE = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(12);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_COLUMNDATATYPE = tmpContent_tJDBCInput_2;
							} else {
								row2.C_COLUMNDATATYPE = null;
							}
						}
						if (colQtyInRs_tJDBCInput_2 < 13) {
							row2.C_OPERATOR = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(13);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_OPERATOR = tmpContent_tJDBCInput_2;
							} else {
								row2.C_OPERATOR = null;
							}
						}
						if (colQtyInRs_tJDBCInput_2 < 14) {
							row2.C_DIMCODE = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(14);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_DIMCODE = tmpContent_tJDBCInput_2;
							} else {
								row2.C_DIMCODE = null;
							}
						}
						if (colQtyInRs_tJDBCInput_2 < 15) {
							row2.C_COMMENT = null;
						} else {

							if (rs_tJDBCInput_2.getObject(15) != null) {
								row2.C_COMMENT = rs_tJDBCInput_2.getObject(15);
							} else {
								row2.C_COMMENT = null;
							}
						}
						if (colQtyInRs_tJDBCInput_2 < 16) {
							row2.C_TOOLTIP = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(16);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_TOOLTIP = tmpContent_tJDBCInput_2;
							} else {
								row2.C_TOOLTIP = null;
							}
						}
						if (colQtyInRs_tJDBCInput_2 < 17) {
							row2.M_APPLIED_PATH = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(17);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.M_APPLIED_PATH = tmpContent_tJDBCInput_2;
							} else {
								row2.M_APPLIED_PATH = null;
							}
						}
						if (colQtyInRs_tJDBCInput_2 < 18) {
							row2.UPDATE_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_2 = null;
							try {
								date_tJDBCInput_2 = rs_tJDBCInput_2
										.getTimestamp(18);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_2 = rs_tJDBCInput_2.getDate(18);
							}
							row2.UPDATE_DATE = date_tJDBCInput_2;
						}
						if (colQtyInRs_tJDBCInput_2 < 19) {
							row2.DOWNLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_2 = null;
							try {
								date_tJDBCInput_2 = rs_tJDBCInput_2
										.getTimestamp(19);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_2 = rs_tJDBCInput_2.getDate(19);
							}
							row2.DOWNLOAD_DATE = date_tJDBCInput_2;
						}
						if (colQtyInRs_tJDBCInput_2 < 20) {
							row2.IMPORT_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_2 = null;
							try {
								date_tJDBCInput_2 = rs_tJDBCInput_2
										.getTimestamp(20);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_2 = rs_tJDBCInput_2.getDate(20);
							}
							row2.IMPORT_DATE = date_tJDBCInput_2;
						}
						if (colQtyInRs_tJDBCInput_2 < 21) {
							row2.SOURCESYSTEM_CD = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(21);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.SOURCESYSTEM_CD = tmpContent_tJDBCInput_2;
							} else {
								row2.SOURCESYSTEM_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_2 < 22) {
							row2.VALUETYPE_CD = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(22);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.VALUETYPE_CD = tmpContent_tJDBCInput_2;
							} else {
								row2.VALUETYPE_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_2 < 23) {
							row2.M_EXCLUSION_CD = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(23);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.M_EXCLUSION_CD = tmpContent_tJDBCInput_2;
							} else {
								row2.M_EXCLUSION_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_2 < 24) {
							row2.C_PATH = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(24);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_PATH = tmpContent_tJDBCInput_2;
							} else {
								row2.C_PATH = null;
							}
						}
						if (colQtyInRs_tJDBCInput_2 < 25) {
							row2.C_SYMBOL = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(25);
							if (tmpContent_tJDBCInput_2 != null) {
								row2.C_SYMBOL = tmpContent_tJDBCInput_2;
							} else {
								row2.C_SYMBOL = null;
							}
						}

						/**
						 * [tJDBCInput_2 begin ] stop
						 */

						/**
						 * [tJDBCInput_2 main ] start
						 */

						currentComponent = "tJDBCInput_2";

						tos_count_tJDBCInput_2++;

						/**
						 * [tJDBCInput_2 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_2 main ] start
						 */

						currentComponent = "tFileOutputDelimited_2";

						String[] rowtFileOutputDelimited_2 = new String[25];

						rowtFileOutputDelimited_2[0] = row2.C_HLEVEL == null ? ""
								: row2.C_HLEVEL.setScale(0,
										java.math.RoundingMode.HALF_UP)
										.toPlainString();

						rowtFileOutputDelimited_2[1] = row2.C_FULLNAME == null ? ""
								: row2.C_FULLNAME;

						rowtFileOutputDelimited_2[2] = row2.C_NAME == null ? ""
								: row2.C_NAME;

						rowtFileOutputDelimited_2[3] = row2.C_SYNONYM_CD == null ? ""
								: row2.C_SYNONYM_CD;

						rowtFileOutputDelimited_2[4] = row2.C_VISUALATTRIBUTES == null ? ""
								: row2.C_VISUALATTRIBUTES;

						rowtFileOutputDelimited_2[5] = row2.C_TOTALNUM == null ? ""
								: row2.C_TOTALNUM.setScale(0,
										java.math.RoundingMode.HALF_UP)
										.toPlainString();

						rowtFileOutputDelimited_2[6] = row2.C_BASECODE == null ? ""
								: row2.C_BASECODE;

						rowtFileOutputDelimited_2[7] = row2.C_METADATAXML == null ? ""
								: row2.C_METADATAXML;

						rowtFileOutputDelimited_2[8] = row2.C_FACTTABLECOLUMN == null ? ""
								: row2.C_FACTTABLECOLUMN;

						rowtFileOutputDelimited_2[9] = row2.C_TABLENAME == null ? ""
								: row2.C_TABLENAME;

						rowtFileOutputDelimited_2[10] = row2.C_COLUMNNAME == null ? ""
								: row2.C_COLUMNNAME;

						rowtFileOutputDelimited_2[11] = row2.C_COLUMNDATATYPE == null ? ""
								: row2.C_COLUMNDATATYPE;

						rowtFileOutputDelimited_2[12] = row2.C_OPERATOR == null ? ""
								: row2.C_OPERATOR;

						rowtFileOutputDelimited_2[13] = row2.C_DIMCODE == null ? ""
								: row2.C_DIMCODE;

						rowtFileOutputDelimited_2[14] = row2.C_COMMENT == null ? ""
								: String.valueOf(row2.C_COMMENT);

						rowtFileOutputDelimited_2[15] = row2.C_TOOLTIP == null ? ""
								: row2.C_TOOLTIP;

						rowtFileOutputDelimited_2[16] = row2.M_APPLIED_PATH == null ? ""
								: row2.M_APPLIED_PATH;

						rowtFileOutputDelimited_2[17] = row2.UPDATE_DATE == null ? ""
								: FormatterUtils.format_Date(row2.UPDATE_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_2[18] = row2.DOWNLOAD_DATE == null ? ""
								: FormatterUtils.format_Date(
										row2.DOWNLOAD_DATE, "dd-MM-yyyy");

						rowtFileOutputDelimited_2[19] = row2.IMPORT_DATE == null ? ""
								: FormatterUtils.format_Date(row2.IMPORT_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_2[20] = row2.SOURCESYSTEM_CD == null ? ""
								: row2.SOURCESYSTEM_CD;

						rowtFileOutputDelimited_2[21] = row2.VALUETYPE_CD == null ? ""
								: row2.VALUETYPE_CD;

						rowtFileOutputDelimited_2[22] = row2.M_EXCLUSION_CD == null ? ""
								: row2.M_EXCLUSION_CD;

						rowtFileOutputDelimited_2[23] = row2.C_PATH == null ? ""
								: row2.C_PATH;

						rowtFileOutputDelimited_2[24] = row2.C_SYMBOL == null ? ""
								: row2.C_SYMBOL;

						nb_line_tFileOutputDelimited_2++;
						resourceMap.put("nb_line_tFileOutputDelimited_2",
								nb_line_tFileOutputDelimited_2);
						CsvWritertFileOutputDelimited_2
								.writeNext(rowtFileOutputDelimited_2);

						tos_count_tFileOutputDelimited_2++;

						/**
						 * [tFileOutputDelimited_2 main ] stop
						 */

						/**
						 * [tJDBCInput_2 end ] start
						 */

						currentComponent = "tJDBCInput_2";

					}
				} finally {
					if (rs_tJDBCInput_2 != null) {
						rs_tJDBCInput_2.close();
					}
					stmt_tJDBCInput_2.close();

				}
				globalMap.put("tJDBCInput_2_NB_LINE", nb_line_tJDBCInput_2);

				ok_Hash.put("tJDBCInput_2", true);
				end_Hash.put("tJDBCInput_2", System.currentTimeMillis());

				/**
				 * [tJDBCInput_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 end ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (CsvWritertFileOutputDelimited_2 != null) {
					CsvWritertFileOutputDelimited_2.close();
				}

				globalMap.put("tFileOutputDelimited_2_NB_LINE",
						nb_line_tFileOutputDelimited_2);

				resourceMap.put("finish_tFileOutputDelimited_2", true);

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_2 finally ] start
				 */

				currentComponent = "tJDBCInput_2";

				/**
				 * [tJDBCInput_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_2 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_2");

					if (CsvWritertFileOutputDelimited_2 != null) {
						CsvWritertFileOutputDelimited_2.close();
					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_6 begin ] start
				 */

				ok_Hash.put("tJava_6", false);
				start_Hash.put("tJava_6", System.currentTimeMillis());

				currentComponent = "tJava_6";

				int tos_count_tJava_6 = 0;

				StatusListener.setSubStatus(20,
						"Getting Staging Concept_Dimension...");
				if (context.DB_StagingI2B2_WHType.equalsIgnoreCase("i2b2"))
					context.currentQuery = "SELECT * FROM "
							+ context.DB_StagingI2B2_Schema
							+ ".concept_dimension";
				else {
					context.currentQuery = "SELECT * FROM i2b2demodata.concept_dimension";

				}

				/**
				 * [tJava_6 begin ] stop
				 */

				/**
				 * [tJava_6 main ] start
				 */

				currentComponent = "tJava_6";

				tos_count_tJava_6++;

				/**
				 * [tJava_6 main ] stop
				 */

				/**
				 * [tJava_6 end ] start
				 */

				currentComponent = "tJava_6";

				ok_Hash.put("tJava_6", true);
				end_Hash.put("tJava_6", System.currentTimeMillis());

				/**
				 * [tJava_6 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_6:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCInput_9Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_6 finally ] start
				 */

				currentComponent = "tJava_6";

				/**
				 * [tJava_6 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_6_SUBPROCESS_STATE", 1);
	}

	public static class row24Struct implements
			routines.system.IPersistableRow<row24Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.CONCEPT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.CONCEPT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_9Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row24Struct row24 = new row24Struct();

				/**
				 * [tFileOutputDelimited_16 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_16", false);
				start_Hash.put("tFileOutputDelimited_16",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_16";

				int tos_count_tFileOutputDelimited_16 = 0;

				String fileName_tFileOutputDelimited_16 = "";
				fileName_tFileOutputDelimited_16 = (new java.io.File(
						((String) globalMap
								.get("tCreateTemporaryFile_4_FILEPATH"))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_16 = null;
				String extension_tFileOutputDelimited_16 = null;
				String directory_tFileOutputDelimited_16 = null;
				if ((fileName_tFileOutputDelimited_16.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_16.lastIndexOf(".") < fileName_tFileOutputDelimited_16
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16;
						extension_tFileOutputDelimited_16 = "";
					} else {
						fullName_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16
								.substring(0, fileName_tFileOutputDelimited_16
										.lastIndexOf("."));
						extension_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16
								.substring(fileName_tFileOutputDelimited_16
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16
							.substring(0, fileName_tFileOutputDelimited_16
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_16.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16
								.substring(0, fileName_tFileOutputDelimited_16
										.lastIndexOf("."));
						extension_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16
								.substring(fileName_tFileOutputDelimited_16
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16;
						extension_tFileOutputDelimited_16 = "";
					}
					directory_tFileOutputDelimited_16 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_16 = true;
				java.io.File filetFileOutputDelimited_16 = new java.io.File(
						fileName_tFileOutputDelimited_16);
				globalMap.put("tFileOutputDelimited_16_FILE_NAME",
						fileName_tFileOutputDelimited_16);

				String[] headColutFileOutputDelimited_16 = new String[9];
				class CSVBasicSet_tFileOutputDelimited_16 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_16[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_16 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_16[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_16[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_16 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_16[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_16[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_16 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_16[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_16 = 0;
				int splitEvery_tFileOutputDelimited_16 = 1000;
				int splitedFileNo_tFileOutputDelimited_16 = 0;
				int currentRow_tFileOutputDelimited_16 = 0;

				CSVBasicSet_tFileOutputDelimited_16 csvSettings_tFileOutputDelimited_16 = new CSVBasicSet_tFileOutputDelimited_16();
				csvSettings_tFileOutputDelimited_16.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_16.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_16.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_16 != null
						&& directory_tFileOutputDelimited_16.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_16 = new java.io.File(
							directory_tFileOutputDelimited_16);
					if (!dir_tFileOutputDelimited_16.exists()) {

						dir_tFileOutputDelimited_16.mkdirs();

					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_16 = null;

				java.io.File fileToDelete_tFileOutputDelimited_16 = new java.io.File(
						fileName_tFileOutputDelimited_16);
				if (fileToDelete_tFileOutputDelimited_16.exists()) {
					fileToDelete_tFileOutputDelimited_16.delete();
				}

				CsvWritertFileOutputDelimited_16 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_16,
												false), "UTF-8")));
				CsvWritertFileOutputDelimited_16
						.setSeparator(csvSettings_tFileOutputDelimited_16
								.getFieldDelim());

				if (!csvSettings_tFileOutputDelimited_16
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_16.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_16.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_16
							.setLineEnd(""
									+ csvSettings_tFileOutputDelimited_16
											.getRowDelim());
				}

				if (filetFileOutputDelimited_16.length() == 0) {

					headColutFileOutputDelimited_16[0] = "CONCEPT_PATH";

					headColutFileOutputDelimited_16[1] = "CONCEPT_CD";

					headColutFileOutputDelimited_16[2] = "NAME_CHAR";

					headColutFileOutputDelimited_16[3] = "CONCEPT_BLOB";

					headColutFileOutputDelimited_16[4] = "UPDATE_DATE";

					headColutFileOutputDelimited_16[5] = "DOWNLOAD_DATE";

					headColutFileOutputDelimited_16[6] = "IMPORT_DATE";

					headColutFileOutputDelimited_16[7] = "SOURCESYSTEM_CD";

					headColutFileOutputDelimited_16[8] = "UPLOAD_ID";

					CsvWritertFileOutputDelimited_16
							.writeNext(headColutFileOutputDelimited_16);
					CsvWritertFileOutputDelimited_16.flush();

				}

				CsvWritertFileOutputDelimited_16
						.setEscapeChar(csvSettings_tFileOutputDelimited_16
								.getEscapeChar());
				CsvWritertFileOutputDelimited_16
						.setQuoteChar(csvSettings_tFileOutputDelimited_16
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_16
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_16",
						CsvWritertFileOutputDelimited_16);

				resourceMap.put("nb_line_tFileOutputDelimited_16",
						nb_line_tFileOutputDelimited_16);

				/**
				 * [tFileOutputDelimited_16 begin ] stop
				 */

				/**
				 * [tJDBCInput_9 begin ] start
				 */

				ok_Hash.put("tJDBCInput_9", false);
				start_Hash.put("tJDBCInput_9", System.currentTimeMillis());

				currentComponent = "tJDBCInput_9";

				int tos_count_tJDBCInput_9 = 0;

				int nb_line_tJDBCInput_9 = 0;
				java.sql.Connection conn_tJDBCInput_9 = null;
				conn_tJDBCInput_9 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_9 = conn_tJDBCInput_9
						.createStatement();

				String dbquery_tJDBCInput_9 = context.currentQuery;

				globalMap.put("tJDBCInput_9_QUERY", dbquery_tJDBCInput_9);
				java.sql.ResultSet rs_tJDBCInput_9 = null;
				try {
					rs_tJDBCInput_9 = stmt_tJDBCInput_9
							.executeQuery(dbquery_tJDBCInput_9);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_9 = rs_tJDBCInput_9
							.getMetaData();
					int colQtyInRs_tJDBCInput_9 = rsmd_tJDBCInput_9
							.getColumnCount();

					String tmpContent_tJDBCInput_9 = null;

					while (rs_tJDBCInput_9.next()) {
						nb_line_tJDBCInput_9++;

						if (colQtyInRs_tJDBCInput_9 < 1) {
							row24.CONCEPT_PATH = null;
						} else {

							tmpContent_tJDBCInput_9 = rs_tJDBCInput_9
									.getString(1);
							if (tmpContent_tJDBCInput_9 != null) {
								row24.CONCEPT_PATH = tmpContent_tJDBCInput_9;
							} else {
								row24.CONCEPT_PATH = null;
							}
						}
						if (colQtyInRs_tJDBCInput_9 < 2) {
							row24.CONCEPT_CD = null;
						} else {

							tmpContent_tJDBCInput_9 = rs_tJDBCInput_9
									.getString(2);
							if (tmpContent_tJDBCInput_9 != null) {
								row24.CONCEPT_CD = tmpContent_tJDBCInput_9;
							} else {
								row24.CONCEPT_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_9 < 3) {
							row24.NAME_CHAR = null;
						} else {

							tmpContent_tJDBCInput_9 = rs_tJDBCInput_9
									.getString(3);
							if (tmpContent_tJDBCInput_9 != null) {
								row24.NAME_CHAR = tmpContent_tJDBCInput_9;
							} else {
								row24.NAME_CHAR = null;
							}
						}
						if (colQtyInRs_tJDBCInput_9 < 4) {
							row24.CONCEPT_BLOB = null;
						} else {

							tmpContent_tJDBCInput_9 = rs_tJDBCInput_9
									.getString(4);
							if (tmpContent_tJDBCInput_9 != null) {
								row24.CONCEPT_BLOB = tmpContent_tJDBCInput_9;
							} else {
								row24.CONCEPT_BLOB = null;
							}
						}
						if (colQtyInRs_tJDBCInput_9 < 5) {
							row24.UPDATE_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_9 = null;
							try {
								date_tJDBCInput_9 = rs_tJDBCInput_9
										.getTimestamp(5);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_9 = rs_tJDBCInput_9.getDate(5);
							}
							row24.UPDATE_DATE = date_tJDBCInput_9;
						}
						if (colQtyInRs_tJDBCInput_9 < 6) {
							row24.DOWNLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_9 = null;
							try {
								date_tJDBCInput_9 = rs_tJDBCInput_9
										.getTimestamp(6);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_9 = rs_tJDBCInput_9.getDate(6);
							}
							row24.DOWNLOAD_DATE = date_tJDBCInput_9;
						}
						if (colQtyInRs_tJDBCInput_9 < 7) {
							row24.IMPORT_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_9 = null;
							try {
								date_tJDBCInput_9 = rs_tJDBCInput_9
										.getTimestamp(7);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_9 = rs_tJDBCInput_9.getDate(7);
							}
							row24.IMPORT_DATE = date_tJDBCInput_9;
						}
						if (colQtyInRs_tJDBCInput_9 < 8) {
							row24.SOURCESYSTEM_CD = null;
						} else {

							tmpContent_tJDBCInput_9 = rs_tJDBCInput_9
									.getString(8);
							if (tmpContent_tJDBCInput_9 != null) {
								row24.SOURCESYSTEM_CD = tmpContent_tJDBCInput_9;
							} else {
								row24.SOURCESYSTEM_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_9 < 9) {
							row24.UPLOAD_ID = null;
						} else {

							tmpContent_tJDBCInput_9 = rs_tJDBCInput_9
									.getString(9);
							if (tmpContent_tJDBCInput_9 != null) {
								row24.UPLOAD_ID = tmpContent_tJDBCInput_9;
							} else {
								row24.UPLOAD_ID = null;
							}
						}

						/**
						 * [tJDBCInput_9 begin ] stop
						 */

						/**
						 * [tJDBCInput_9 main ] start
						 */

						currentComponent = "tJDBCInput_9";

						tos_count_tJDBCInput_9++;

						/**
						 * [tJDBCInput_9 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_16 main ] start
						 */

						currentComponent = "tFileOutputDelimited_16";

						String[] rowtFileOutputDelimited_16 = new String[9];

						rowtFileOutputDelimited_16[0] = row24.CONCEPT_PATH == null ? ""
								: row24.CONCEPT_PATH;

						rowtFileOutputDelimited_16[1] = row24.CONCEPT_CD == null ? ""
								: row24.CONCEPT_CD;

						rowtFileOutputDelimited_16[2] = row24.NAME_CHAR == null ? ""
								: row24.NAME_CHAR;

						rowtFileOutputDelimited_16[3] = row24.CONCEPT_BLOB == null ? ""
								: row24.CONCEPT_BLOB;

						rowtFileOutputDelimited_16[4] = row24.UPDATE_DATE == null ? ""
								: FormatterUtils.format_Date(row24.UPDATE_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_16[5] = row24.DOWNLOAD_DATE == null ? ""
								: FormatterUtils.format_Date(
										row24.DOWNLOAD_DATE, "dd-MM-yyyy");

						rowtFileOutputDelimited_16[6] = row24.IMPORT_DATE == null ? ""
								: FormatterUtils.format_Date(row24.IMPORT_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_16[7] = row24.SOURCESYSTEM_CD == null ? ""
								: row24.SOURCESYSTEM_CD;

						rowtFileOutputDelimited_16[8] = row24.UPLOAD_ID == null ? ""
								: row24.UPLOAD_ID;

						nb_line_tFileOutputDelimited_16++;
						resourceMap.put("nb_line_tFileOutputDelimited_16",
								nb_line_tFileOutputDelimited_16);
						CsvWritertFileOutputDelimited_16
								.writeNext(rowtFileOutputDelimited_16);

						tos_count_tFileOutputDelimited_16++;

						/**
						 * [tFileOutputDelimited_16 main ] stop
						 */

						/**
						 * [tJDBCInput_9 end ] start
						 */

						currentComponent = "tJDBCInput_9";

					}
				} finally {
					if (rs_tJDBCInput_9 != null) {
						rs_tJDBCInput_9.close();
					}
					stmt_tJDBCInput_9.close();

				}
				globalMap.put("tJDBCInput_9_NB_LINE", nb_line_tJDBCInput_9);

				ok_Hash.put("tJDBCInput_9", true);
				end_Hash.put("tJDBCInput_9", System.currentTimeMillis());

				/**
				 * [tJDBCInput_9 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_16 end ] start
				 */

				currentComponent = "tFileOutputDelimited_16";

				if (CsvWritertFileOutputDelimited_16 != null) {
					CsvWritertFileOutputDelimited_16.close();
				}

				globalMap.put("tFileOutputDelimited_16_NB_LINE",
						nb_line_tFileOutputDelimited_16);

				resourceMap.put("finish_tFileOutputDelimited_16", true);

				ok_Hash.put("tFileOutputDelimited_16", true);
				end_Hash.put("tFileOutputDelimited_16",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_16 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_9 finally ] start
				 */

				currentComponent = "tJDBCInput_9";

				/**
				 * [tJDBCInput_9 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_16 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_16";

				if (resourceMap.get("finish_tFileOutputDelimited_16") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_16 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_16");

					if (CsvWritertFileOutputDelimited_16 != null) {
						CsvWritertFileOutputDelimited_16.close();
					}

				}

				/**
				 * [tFileOutputDelimited_16 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_9_SUBPROCESS_STATE", 1);
	}

	public void tJava_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_7 begin ] start
				 */

				ok_Hash.put("tJava_7", false);
				start_Hash.put("tJava_7", System.currentTimeMillis());

				currentComponent = "tJava_7";

				int tos_count_tJava_7 = 0;

				StatusListener.setSubStatus(30,
						"Getting Staging Modifier_Dimension...");
				if (context.DB_StagingI2B2_WHType.equalsIgnoreCase("i2b2"))
					context.currentQuery = "SELECT * FROM "
							+ context.DB_StagingI2B2_Schema
							+ ".modifier_dimension";
				else {
					context.currentQuery = "SELECT * FROM i2b2demodata.modifier_dimension";

				}

				/**
				 * [tJava_7 begin ] stop
				 */

				/**
				 * [tJava_7 main ] start
				 */

				currentComponent = "tJava_7";

				tos_count_tJava_7++;

				/**
				 * [tJava_7 main ] stop
				 */

				/**
				 * [tJava_7 end ] start
				 */

				currentComponent = "tJava_7";

				ok_Hash.put("tJava_7", true);
				end_Hash.put("tJava_7", System.currentTimeMillis());

				/**
				 * [tJava_7 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_7:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCInput_16Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_7 finally ] start
				 */

				currentComponent = "tJava_7";

				/**
				 * [tJava_7 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_7_SUBPROCESS_STATE", 1);
	}

	public static class row26Struct implements
			routines.system.IPersistableRow<row26Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String MODIFIER_PATH;

		public String getMODIFIER_PATH() {
			return this.MODIFIER_PATH;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String MODIFIER_BLOB;

		public String getMODIFIER_BLOB() {
			return this.MODIFIER_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.MODIFIER_PATH = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.MODIFIER_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MODIFIER_PATH, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.MODIFIER_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MODIFIER_PATH=" + MODIFIER_PATH);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",MODIFIER_BLOB=" + MODIFIER_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row26Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_16Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row26Struct row26 = new row26Struct();

				/**
				 * [tFileOutputDelimited_23 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_23", false);
				start_Hash.put("tFileOutputDelimited_23",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_23";

				int tos_count_tFileOutputDelimited_23 = 0;

				String fileName_tFileOutputDelimited_23 = "";
				fileName_tFileOutputDelimited_23 = (new java.io.File(
						((String) globalMap
								.get("tCreateTemporaryFile_10_FILEPATH"))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_23 = null;
				String extension_tFileOutputDelimited_23 = null;
				String directory_tFileOutputDelimited_23 = null;
				if ((fileName_tFileOutputDelimited_23.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_23.lastIndexOf(".") < fileName_tFileOutputDelimited_23
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_23 = fileName_tFileOutputDelimited_23;
						extension_tFileOutputDelimited_23 = "";
					} else {
						fullName_tFileOutputDelimited_23 = fileName_tFileOutputDelimited_23
								.substring(0, fileName_tFileOutputDelimited_23
										.lastIndexOf("."));
						extension_tFileOutputDelimited_23 = fileName_tFileOutputDelimited_23
								.substring(fileName_tFileOutputDelimited_23
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_23 = fileName_tFileOutputDelimited_23
							.substring(0, fileName_tFileOutputDelimited_23
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_23.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_23 = fileName_tFileOutputDelimited_23
								.substring(0, fileName_tFileOutputDelimited_23
										.lastIndexOf("."));
						extension_tFileOutputDelimited_23 = fileName_tFileOutputDelimited_23
								.substring(fileName_tFileOutputDelimited_23
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_23 = fileName_tFileOutputDelimited_23;
						extension_tFileOutputDelimited_23 = "";
					}
					directory_tFileOutputDelimited_23 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_23 = true;
				java.io.File filetFileOutputDelimited_23 = new java.io.File(
						fileName_tFileOutputDelimited_23);
				globalMap.put("tFileOutputDelimited_23_FILE_NAME",
						fileName_tFileOutputDelimited_23);

				String[] headColutFileOutputDelimited_23 = new String[9];
				class CSVBasicSet_tFileOutputDelimited_23 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_23[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_23 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_23[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_23[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_23 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_23[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_23[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_23 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_23[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_23 = 0;
				int splitEvery_tFileOutputDelimited_23 = 1000;
				int splitedFileNo_tFileOutputDelimited_23 = 0;
				int currentRow_tFileOutputDelimited_23 = 0;

				CSVBasicSet_tFileOutputDelimited_23 csvSettings_tFileOutputDelimited_23 = new CSVBasicSet_tFileOutputDelimited_23();
				csvSettings_tFileOutputDelimited_23.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_23.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_23.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_23 != null
						&& directory_tFileOutputDelimited_23.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_23 = new java.io.File(
							directory_tFileOutputDelimited_23);
					if (!dir_tFileOutputDelimited_23.exists()) {

						dir_tFileOutputDelimited_23.mkdirs();

					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_23 = null;

				java.io.File fileToDelete_tFileOutputDelimited_23 = new java.io.File(
						fileName_tFileOutputDelimited_23);
				if (fileToDelete_tFileOutputDelimited_23.exists()) {
					fileToDelete_tFileOutputDelimited_23.delete();
				}

				CsvWritertFileOutputDelimited_23 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_23,
												false), "UTF-8")));
				CsvWritertFileOutputDelimited_23
						.setSeparator(csvSettings_tFileOutputDelimited_23
								.getFieldDelim());

				if (!csvSettings_tFileOutputDelimited_23
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_23.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_23.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_23
							.setLineEnd(""
									+ csvSettings_tFileOutputDelimited_23
											.getRowDelim());
				}

				if (filetFileOutputDelimited_23.length() == 0) {

					headColutFileOutputDelimited_23[0] = "MODIFIER_PATH";

					headColutFileOutputDelimited_23[1] = "MODIFIER_CD";

					headColutFileOutputDelimited_23[2] = "NAME_CHAR";

					headColutFileOutputDelimited_23[3] = "MODIFIER_BLOB";

					headColutFileOutputDelimited_23[4] = "UPDATE_DATE";

					headColutFileOutputDelimited_23[5] = "DOWNLOAD_DATE";

					headColutFileOutputDelimited_23[6] = "IMPORT_DATE";

					headColutFileOutputDelimited_23[7] = "SOURCESYSTEM_CD";

					headColutFileOutputDelimited_23[8] = "UPLOAD_ID";

					CsvWritertFileOutputDelimited_23
							.writeNext(headColutFileOutputDelimited_23);
					CsvWritertFileOutputDelimited_23.flush();

				}

				CsvWritertFileOutputDelimited_23
						.setEscapeChar(csvSettings_tFileOutputDelimited_23
								.getEscapeChar());
				CsvWritertFileOutputDelimited_23
						.setQuoteChar(csvSettings_tFileOutputDelimited_23
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_23
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_23",
						CsvWritertFileOutputDelimited_23);

				resourceMap.put("nb_line_tFileOutputDelimited_23",
						nb_line_tFileOutputDelimited_23);

				/**
				 * [tFileOutputDelimited_23 begin ] stop
				 */

				/**
				 * [tJDBCInput_16 begin ] start
				 */

				ok_Hash.put("tJDBCInput_16", false);
				start_Hash.put("tJDBCInput_16", System.currentTimeMillis());

				currentComponent = "tJDBCInput_16";

				int tos_count_tJDBCInput_16 = 0;

				int nb_line_tJDBCInput_16 = 0;
				java.sql.Connection conn_tJDBCInput_16 = null;
				conn_tJDBCInput_16 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_16 = conn_tJDBCInput_16
						.createStatement();

				String dbquery_tJDBCInput_16 = context.currentQuery;

				globalMap.put("tJDBCInput_16_QUERY", dbquery_tJDBCInput_16);
				java.sql.ResultSet rs_tJDBCInput_16 = null;
				try {
					rs_tJDBCInput_16 = stmt_tJDBCInput_16
							.executeQuery(dbquery_tJDBCInput_16);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_16 = rs_tJDBCInput_16
							.getMetaData();
					int colQtyInRs_tJDBCInput_16 = rsmd_tJDBCInput_16
							.getColumnCount();

					String tmpContent_tJDBCInput_16 = null;

					while (rs_tJDBCInput_16.next()) {
						nb_line_tJDBCInput_16++;

						if (colQtyInRs_tJDBCInput_16 < 1) {
							row26.MODIFIER_PATH = null;
						} else {

							tmpContent_tJDBCInput_16 = rs_tJDBCInput_16
									.getString(1);
							if (tmpContent_tJDBCInput_16 != null) {
								row26.MODIFIER_PATH = tmpContent_tJDBCInput_16;
							} else {
								row26.MODIFIER_PATH = null;
							}
						}
						if (colQtyInRs_tJDBCInput_16 < 2) {
							row26.MODIFIER_CD = null;
						} else {

							tmpContent_tJDBCInput_16 = rs_tJDBCInput_16
									.getString(2);
							if (tmpContent_tJDBCInput_16 != null) {
								row26.MODIFIER_CD = tmpContent_tJDBCInput_16;
							} else {
								row26.MODIFIER_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_16 < 3) {
							row26.NAME_CHAR = null;
						} else {

							tmpContent_tJDBCInput_16 = rs_tJDBCInput_16
									.getString(3);
							if (tmpContent_tJDBCInput_16 != null) {
								row26.NAME_CHAR = tmpContent_tJDBCInput_16;
							} else {
								row26.NAME_CHAR = null;
							}
						}
						if (colQtyInRs_tJDBCInput_16 < 4) {
							row26.MODIFIER_BLOB = null;
						} else {

							tmpContent_tJDBCInput_16 = rs_tJDBCInput_16
									.getString(4);
							if (tmpContent_tJDBCInput_16 != null) {
								row26.MODIFIER_BLOB = tmpContent_tJDBCInput_16;
							} else {
								row26.MODIFIER_BLOB = null;
							}
						}
						if (colQtyInRs_tJDBCInput_16 < 5) {
							row26.UPDATE_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_16 = null;
							try {
								date_tJDBCInput_16 = rs_tJDBCInput_16
										.getTimestamp(5);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_16 = rs_tJDBCInput_16
										.getDate(5);
							}
							row26.UPDATE_DATE = date_tJDBCInput_16;
						}
						if (colQtyInRs_tJDBCInput_16 < 6) {
							row26.DOWNLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_16 = null;
							try {
								date_tJDBCInput_16 = rs_tJDBCInput_16
										.getTimestamp(6);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_16 = rs_tJDBCInput_16
										.getDate(6);
							}
							row26.DOWNLOAD_DATE = date_tJDBCInput_16;
						}
						if (colQtyInRs_tJDBCInput_16 < 7) {
							row26.IMPORT_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_16 = null;
							try {
								date_tJDBCInput_16 = rs_tJDBCInput_16
										.getTimestamp(7);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_16 = rs_tJDBCInput_16
										.getDate(7);
							}
							row26.IMPORT_DATE = date_tJDBCInput_16;
						}
						if (colQtyInRs_tJDBCInput_16 < 8) {
							row26.SOURCESYSTEM_CD = null;
						} else {

							tmpContent_tJDBCInput_16 = rs_tJDBCInput_16
									.getString(8);
							if (tmpContent_tJDBCInput_16 != null) {
								row26.SOURCESYSTEM_CD = tmpContent_tJDBCInput_16;
							} else {
								row26.SOURCESYSTEM_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_16 < 9) {
							row26.UPLOAD_ID = null;
						} else {

							tmpContent_tJDBCInput_16 = rs_tJDBCInput_16
									.getString(9);
							if (tmpContent_tJDBCInput_16 != null) {
								row26.UPLOAD_ID = tmpContent_tJDBCInput_16;
							} else {
								row26.UPLOAD_ID = null;
							}
						}

						/**
						 * [tJDBCInput_16 begin ] stop
						 */

						/**
						 * [tJDBCInput_16 main ] start
						 */

						currentComponent = "tJDBCInput_16";

						tos_count_tJDBCInput_16++;

						/**
						 * [tJDBCInput_16 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_23 main ] start
						 */

						currentComponent = "tFileOutputDelimited_23";

						String[] rowtFileOutputDelimited_23 = new String[9];

						rowtFileOutputDelimited_23[0] = row26.MODIFIER_PATH == null ? ""
								: row26.MODIFIER_PATH;

						rowtFileOutputDelimited_23[1] = row26.MODIFIER_CD == null ? ""
								: row26.MODIFIER_CD;

						rowtFileOutputDelimited_23[2] = row26.NAME_CHAR == null ? ""
								: row26.NAME_CHAR;

						rowtFileOutputDelimited_23[3] = row26.MODIFIER_BLOB == null ? ""
								: row26.MODIFIER_BLOB;

						rowtFileOutputDelimited_23[4] = row26.UPDATE_DATE == null ? ""
								: FormatterUtils.format_Date(row26.UPDATE_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_23[5] = row26.DOWNLOAD_DATE == null ? ""
								: FormatterUtils.format_Date(
										row26.DOWNLOAD_DATE, "dd-MM-yyyy");

						rowtFileOutputDelimited_23[6] = row26.IMPORT_DATE == null ? ""
								: FormatterUtils.format_Date(row26.IMPORT_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_23[7] = row26.SOURCESYSTEM_CD == null ? ""
								: row26.SOURCESYSTEM_CD;

						rowtFileOutputDelimited_23[8] = row26.UPLOAD_ID == null ? ""
								: row26.UPLOAD_ID;

						nb_line_tFileOutputDelimited_23++;
						resourceMap.put("nb_line_tFileOutputDelimited_23",
								nb_line_tFileOutputDelimited_23);
						CsvWritertFileOutputDelimited_23
								.writeNext(rowtFileOutputDelimited_23);

						tos_count_tFileOutputDelimited_23++;

						/**
						 * [tFileOutputDelimited_23 main ] stop
						 */

						/**
						 * [tJDBCInput_16 end ] start
						 */

						currentComponent = "tJDBCInput_16";

					}
				} finally {
					if (rs_tJDBCInput_16 != null) {
						rs_tJDBCInput_16.close();
					}
					stmt_tJDBCInput_16.close();

				}
				globalMap.put("tJDBCInput_16_NB_LINE", nb_line_tJDBCInput_16);

				ok_Hash.put("tJDBCInput_16", true);
				end_Hash.put("tJDBCInput_16", System.currentTimeMillis());

				/**
				 * [tJDBCInput_16 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_23 end ] start
				 */

				currentComponent = "tFileOutputDelimited_23";

				if (CsvWritertFileOutputDelimited_23 != null) {
					CsvWritertFileOutputDelimited_23.close();
				}

				globalMap.put("tFileOutputDelimited_23_NB_LINE",
						nb_line_tFileOutputDelimited_23);

				resourceMap.put("finish_tFileOutputDelimited_23", true);

				ok_Hash.put("tFileOutputDelimited_23", true);
				end_Hash.put("tFileOutputDelimited_23",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_23 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_16 finally ] start
				 */

				currentComponent = "tJDBCInput_16";

				/**
				 * [tJDBCInput_16 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_23 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_23";

				if (resourceMap.get("finish_tFileOutputDelimited_23") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_23 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_23");

					if (CsvWritertFileOutputDelimited_23 != null) {
						CsvWritertFileOutputDelimited_23.close();
					}

				}

				/**
				 * [tFileOutputDelimited_23 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_16_SUBPROCESS_STATE", 1);
	}

	public void tJava_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_3 begin ] start
				 */

				ok_Hash.put("tJava_3", false);
				start_Hash.put("tJava_3", System.currentTimeMillis());

				currentComponent = "tJava_3";

				int tos_count_tJava_3 = 0;

				StatusListener.setSubStatus(40,
						"Getting Staging Observation_Fact...");
				if (context.DB_StagingI2B2_WHType.equalsIgnoreCase("i2b2")) {
					// context.currentQuery = "Select * from " +
					// context.DB_StagingI2B2_Schema+".observation_fact";

					context.currentQuery = "select * from "
							+ context.DB_StagingI2B2_Schema
							+ ".OBSERVATION_FACT where concept_cd in (  select concept_cd from "
							+ context.DB_StagingI2B2_Schema
							+ ".CONCEPT_DIMENSION where CONCEPT_PATH in     (     select staging_path from "
							+ context.DB_StagingI2B2_Schema
							+ ".IOE_TARGET_ONTOLOGY where target_id = "
							+ context.TargetID + ")) and modifier_cd like '@'";
				} else {
					context.currentQuery = "Select * from i2b2demodata.observation_fact";

				}

				/**
				 * [tJava_3 begin ] stop
				 */

				/**
				 * [tJava_3 main ] start
				 */

				currentComponent = "tJava_3";

				tos_count_tJava_3++;

				/**
				 * [tJava_3 main ] stop
				 */

				/**
				 * [tJava_3 end ] start
				 */

				currentComponent = "tJava_3";

				ok_Hash.put("tJava_3", true);
				end_Hash.put("tJava_3", System.currentTimeMillis());

				/**
				 * [tJava_3 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_3:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCInput_8Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_3 finally ] start
				 */

				currentComponent = "tJava_3";

				/**
				 * [tJava_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}

	public static class row20Struct implements
			routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readDate(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readDate(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_8Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row20Struct row20 = new row20Struct();

				/**
				 * [tFileOutputDelimited_15 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_15", false);
				start_Hash.put("tFileOutputDelimited_15",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_15";

				int tos_count_tFileOutputDelimited_15 = 0;

				String fileName_tFileOutputDelimited_15 = "";
				fileName_tFileOutputDelimited_15 = (new java.io.File(
						((String) globalMap
								.get("tCreateTemporaryFile_3_FILEPATH"))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_15 = null;
				String extension_tFileOutputDelimited_15 = null;
				String directory_tFileOutputDelimited_15 = null;
				if ((fileName_tFileOutputDelimited_15.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_15.lastIndexOf(".") < fileName_tFileOutputDelimited_15
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15;
						extension_tFileOutputDelimited_15 = "";
					} else {
						fullName_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15
								.substring(0, fileName_tFileOutputDelimited_15
										.lastIndexOf("."));
						extension_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15
								.substring(fileName_tFileOutputDelimited_15
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15
							.substring(0, fileName_tFileOutputDelimited_15
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_15.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15
								.substring(0, fileName_tFileOutputDelimited_15
										.lastIndexOf("."));
						extension_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15
								.substring(fileName_tFileOutputDelimited_15
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15;
						extension_tFileOutputDelimited_15 = "";
					}
					directory_tFileOutputDelimited_15 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_15 = true;
				java.io.File filetFileOutputDelimited_15 = new java.io.File(
						fileName_tFileOutputDelimited_15);
				globalMap.put("tFileOutputDelimited_15_FILE_NAME",
						fileName_tFileOutputDelimited_15);

				String[] headColutFileOutputDelimited_15 = new String[22];
				class CSVBasicSet_tFileOutputDelimited_15 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_15[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_15 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_15[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_15[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_15 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_15[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_15[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_15 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_15[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_15 = 0;
				int splitEvery_tFileOutputDelimited_15 = 1000;
				int splitedFileNo_tFileOutputDelimited_15 = 0;
				int currentRow_tFileOutputDelimited_15 = 0;

				CSVBasicSet_tFileOutputDelimited_15 csvSettings_tFileOutputDelimited_15 = new CSVBasicSet_tFileOutputDelimited_15();
				csvSettings_tFileOutputDelimited_15.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_15.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_15.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_15 != null
						&& directory_tFileOutputDelimited_15.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_15 = new java.io.File(
							directory_tFileOutputDelimited_15);
					if (!dir_tFileOutputDelimited_15.exists()) {

						dir_tFileOutputDelimited_15.mkdirs();

					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_15 = null;

				java.io.File fileToDelete_tFileOutputDelimited_15 = new java.io.File(
						fileName_tFileOutputDelimited_15);
				if (fileToDelete_tFileOutputDelimited_15.exists()) {
					fileToDelete_tFileOutputDelimited_15.delete();
				}

				CsvWritertFileOutputDelimited_15 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_15,
												false), "UTF-8")));
				CsvWritertFileOutputDelimited_15
						.setSeparator(csvSettings_tFileOutputDelimited_15
								.getFieldDelim());

				if (!csvSettings_tFileOutputDelimited_15
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_15.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_15.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_15
							.setLineEnd(""
									+ csvSettings_tFileOutputDelimited_15
											.getRowDelim());
				}

				CsvWritertFileOutputDelimited_15
						.setEscapeChar(csvSettings_tFileOutputDelimited_15
								.getEscapeChar());
				CsvWritertFileOutputDelimited_15
						.setQuoteChar(csvSettings_tFileOutputDelimited_15
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_15
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_15",
						CsvWritertFileOutputDelimited_15);

				resourceMap.put("nb_line_tFileOutputDelimited_15",
						nb_line_tFileOutputDelimited_15);

				/**
				 * [tFileOutputDelimited_15 begin ] stop
				 */

				/**
				 * [tJDBCInput_8 begin ] start
				 */

				ok_Hash.put("tJDBCInput_8", false);
				start_Hash.put("tJDBCInput_8", System.currentTimeMillis());

				currentComponent = "tJDBCInput_8";

				int tos_count_tJDBCInput_8 = 0;

				int nb_line_tJDBCInput_8 = 0;
				java.sql.Connection conn_tJDBCInput_8 = null;
				conn_tJDBCInput_8 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_8 = conn_tJDBCInput_8
						.createStatement();

				String dbquery_tJDBCInput_8 = context.currentQuery;

				globalMap.put("tJDBCInput_8_QUERY", dbquery_tJDBCInput_8);
				java.sql.ResultSet rs_tJDBCInput_8 = null;
				try {
					rs_tJDBCInput_8 = stmt_tJDBCInput_8
							.executeQuery(dbquery_tJDBCInput_8);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_8 = rs_tJDBCInput_8
							.getMetaData();
					int colQtyInRs_tJDBCInput_8 = rsmd_tJDBCInput_8
							.getColumnCount();

					String tmpContent_tJDBCInput_8 = null;

					while (rs_tJDBCInput_8.next()) {
						nb_line_tJDBCInput_8++;

						if (colQtyInRs_tJDBCInput_8 < 1) {
							row20.ENCOUNTER_NUM = null;
						} else {

							if (rs_tJDBCInput_8.getObject(1) != null) {
								row20.ENCOUNTER_NUM = rs_tJDBCInput_8
										.getBigDecimal(1);
							} else {
								row20.ENCOUNTER_NUM = null;
							}
						}
						if (colQtyInRs_tJDBCInput_8 < 2) {
							row20.PATIENT_NUM = null;
						} else {

							if (rs_tJDBCInput_8.getObject(2) != null) {
								row20.PATIENT_NUM = rs_tJDBCInput_8
										.getBigDecimal(2);
							} else {
								row20.PATIENT_NUM = null;
							}
						}
						if (colQtyInRs_tJDBCInput_8 < 3) {
							row20.CONCEPT_CD = null;
						} else {

							tmpContent_tJDBCInput_8 = rs_tJDBCInput_8
									.getString(3);
							if (tmpContent_tJDBCInput_8 != null) {
								row20.CONCEPT_CD = tmpContent_tJDBCInput_8;
							} else {
								row20.CONCEPT_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_8 < 4) {
							row20.PROVIDER_ID = null;
						} else {

							tmpContent_tJDBCInput_8 = rs_tJDBCInput_8
									.getString(4);
							if (tmpContent_tJDBCInput_8 != null) {
								row20.PROVIDER_ID = tmpContent_tJDBCInput_8;
							} else {
								row20.PROVIDER_ID = null;
							}
						}
						if (colQtyInRs_tJDBCInput_8 < 5) {
							row20.START_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_8 = null;
							try {
								date_tJDBCInput_8 = rs_tJDBCInput_8
										.getTimestamp(5);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_8 = rs_tJDBCInput_8.getDate(5);
							}
							row20.START_DATE = date_tJDBCInput_8;
						}
						if (colQtyInRs_tJDBCInput_8 < 6) {
							row20.MODIFIER_CD = null;
						} else {

							tmpContent_tJDBCInput_8 = rs_tJDBCInput_8
									.getString(6);
							if (tmpContent_tJDBCInput_8 != null) {
								row20.MODIFIER_CD = tmpContent_tJDBCInput_8;
							} else {
								row20.MODIFIER_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_8 < 7) {
							row20.INSTANCE_NUM = null;
						} else {

							tmpContent_tJDBCInput_8 = rs_tJDBCInput_8
									.getString(7);
							if (tmpContent_tJDBCInput_8 != null) {
								row20.INSTANCE_NUM = tmpContent_tJDBCInput_8;
							} else {
								row20.INSTANCE_NUM = null;
							}
						}
						if (colQtyInRs_tJDBCInput_8 < 8) {
							row20.VALTYPE_CD = null;
						} else {

							tmpContent_tJDBCInput_8 = rs_tJDBCInput_8
									.getString(8);
							if (tmpContent_tJDBCInput_8 != null) {
								row20.VALTYPE_CD = tmpContent_tJDBCInput_8;
							} else {
								row20.VALTYPE_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_8 < 9) {
							row20.TVAL_CHAR = null;
						} else {

							tmpContent_tJDBCInput_8 = rs_tJDBCInput_8
									.getString(9);
							if (tmpContent_tJDBCInput_8 != null) {
								row20.TVAL_CHAR = tmpContent_tJDBCInput_8;
							} else {
								row20.TVAL_CHAR = null;
							}
						}
						if (colQtyInRs_tJDBCInput_8 < 10) {
							row20.NVAL_NUM = null;
						} else {

							if (rs_tJDBCInput_8.getObject(10) != null) {
								row20.NVAL_NUM = rs_tJDBCInput_8.getFloat(10);
							} else {
								row20.NVAL_NUM = null;
							}
						}
						if (colQtyInRs_tJDBCInput_8 < 11) {
							row20.VALUEFLAG_CD = null;
						} else {

							tmpContent_tJDBCInput_8 = rs_tJDBCInput_8
									.getString(11);
							if (tmpContent_tJDBCInput_8 != null) {
								row20.VALUEFLAG_CD = tmpContent_tJDBCInput_8;
							} else {
								row20.VALUEFLAG_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_8 < 12) {
							row20.QUANTITY_NUM = null;
						} else {

							tmpContent_tJDBCInput_8 = rs_tJDBCInput_8
									.getString(12);
							if (tmpContent_tJDBCInput_8 != null) {
								row20.QUANTITY_NUM = tmpContent_tJDBCInput_8;
							} else {
								row20.QUANTITY_NUM = null;
							}
						}
						if (colQtyInRs_tJDBCInput_8 < 13) {
							row20.UNITS_CD = null;
						} else {

							tmpContent_tJDBCInput_8 = rs_tJDBCInput_8
									.getString(13);
							if (tmpContent_tJDBCInput_8 != null) {
								row20.UNITS_CD = tmpContent_tJDBCInput_8;
							} else {
								row20.UNITS_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_8 < 14) {
							row20.END_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_8 = null;
							try {
								date_tJDBCInput_8 = rs_tJDBCInput_8
										.getTimestamp(14);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_8 = rs_tJDBCInput_8.getDate(14);
							}
							row20.END_DATE = date_tJDBCInput_8;
						}
						if (colQtyInRs_tJDBCInput_8 < 15) {
							row20.LOCATION_CD = null;
						} else {

							tmpContent_tJDBCInput_8 = rs_tJDBCInput_8
									.getString(15);
							if (tmpContent_tJDBCInput_8 != null) {
								row20.LOCATION_CD = tmpContent_tJDBCInput_8;
							} else {
								row20.LOCATION_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_8 < 16) {
							row20.OBSERVATION_BLOB = null;
						} else {

							tmpContent_tJDBCInput_8 = rs_tJDBCInput_8
									.getString(16);
							if (tmpContent_tJDBCInput_8 != null) {
								row20.OBSERVATION_BLOB = tmpContent_tJDBCInput_8;
							} else {
								row20.OBSERVATION_BLOB = null;
							}
						}
						if (colQtyInRs_tJDBCInput_8 < 17) {
							row20.CONFIDENCE_NUM = null;
						} else {

							tmpContent_tJDBCInput_8 = rs_tJDBCInput_8
									.getString(17);
							if (tmpContent_tJDBCInput_8 != null) {
								row20.CONFIDENCE_NUM = tmpContent_tJDBCInput_8;
							} else {
								row20.CONFIDENCE_NUM = null;
							}
						}
						if (colQtyInRs_tJDBCInput_8 < 18) {
							row20.UPDATE_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_8 = null;
							try {
								date_tJDBCInput_8 = rs_tJDBCInput_8
										.getTimestamp(18);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_8 = rs_tJDBCInput_8.getDate(18);
							}
							row20.UPDATE_DATE = date_tJDBCInput_8;
						}
						if (colQtyInRs_tJDBCInput_8 < 19) {
							row20.DOWNLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_8 = null;
							try {
								date_tJDBCInput_8 = rs_tJDBCInput_8
										.getTimestamp(19);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_8 = rs_tJDBCInput_8.getDate(19);
							}
							row20.DOWNLOAD_DATE = date_tJDBCInput_8;
						}
						if (colQtyInRs_tJDBCInput_8 < 20) {
							row20.IMPORT_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_8 = null;
							try {
								date_tJDBCInput_8 = rs_tJDBCInput_8
										.getTimestamp(20);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_8 = rs_tJDBCInput_8.getDate(20);
							}
							row20.IMPORT_DATE = date_tJDBCInput_8;
						}
						if (colQtyInRs_tJDBCInput_8 < 21) {
							row20.SOURCESYSTEM_CD = null;
						} else {

							tmpContent_tJDBCInput_8 = rs_tJDBCInput_8
									.getString(21);
							if (tmpContent_tJDBCInput_8 != null) {
								row20.SOURCESYSTEM_CD = tmpContent_tJDBCInput_8;
							} else {
								row20.SOURCESYSTEM_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_8 < 22) {
							row20.UPLOAD_ID = null;
						} else {

							tmpContent_tJDBCInput_8 = rs_tJDBCInput_8
									.getString(22);
							if (tmpContent_tJDBCInput_8 != null) {
								row20.UPLOAD_ID = tmpContent_tJDBCInput_8;
							} else {
								row20.UPLOAD_ID = null;
							}
						}

						/**
						 * [tJDBCInput_8 begin ] stop
						 */

						/**
						 * [tJDBCInput_8 main ] start
						 */

						currentComponent = "tJDBCInput_8";

						tos_count_tJDBCInput_8++;

						/**
						 * [tJDBCInput_8 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_15 main ] start
						 */

						currentComponent = "tFileOutputDelimited_15";

						String[] rowtFileOutputDelimited_15 = new String[22];

						rowtFileOutputDelimited_15[0] = row20.ENCOUNTER_NUM == null ? ""
								: row20.ENCOUNTER_NUM.toPlainString();

						rowtFileOutputDelimited_15[1] = row20.PATIENT_NUM == null ? ""
								: row20.PATIENT_NUM.toPlainString();

						rowtFileOutputDelimited_15[2] = row20.CONCEPT_CD == null ? ""
								: row20.CONCEPT_CD;

						rowtFileOutputDelimited_15[3] = row20.PROVIDER_ID == null ? ""
								: row20.PROVIDER_ID;

						rowtFileOutputDelimited_15[4] = row20.START_DATE == null ? ""
								: FormatterUtils.format_Date(row20.START_DATE,
										"yyyy-MM-dd");

						rowtFileOutputDelimited_15[5] = row20.MODIFIER_CD == null ? ""
								: row20.MODIFIER_CD;

						rowtFileOutputDelimited_15[6] = row20.INSTANCE_NUM == null ? ""
								: row20.INSTANCE_NUM;

						rowtFileOutputDelimited_15[7] = row20.VALTYPE_CD == null ? ""
								: row20.VALTYPE_CD;

						rowtFileOutputDelimited_15[8] = row20.TVAL_CHAR == null ? ""
								: row20.TVAL_CHAR;

						rowtFileOutputDelimited_15[9] = row20.NVAL_NUM == null ? ""
								: String.valueOf(row20.NVAL_NUM);

						rowtFileOutputDelimited_15[10] = row20.VALUEFLAG_CD == null ? ""
								: row20.VALUEFLAG_CD;

						rowtFileOutputDelimited_15[11] = row20.QUANTITY_NUM == null ? ""
								: row20.QUANTITY_NUM;

						rowtFileOutputDelimited_15[12] = row20.UNITS_CD == null ? ""
								: row20.UNITS_CD;

						rowtFileOutputDelimited_15[13] = row20.END_DATE == null ? ""
								: FormatterUtils.format_Date(row20.END_DATE,
										"yyyy-MM-dd");

						rowtFileOutputDelimited_15[14] = row20.LOCATION_CD == null ? ""
								: row20.LOCATION_CD;

						rowtFileOutputDelimited_15[15] = row20.OBSERVATION_BLOB == null ? ""
								: row20.OBSERVATION_BLOB;

						rowtFileOutputDelimited_15[16] = row20.CONFIDENCE_NUM == null ? ""
								: row20.CONFIDENCE_NUM;

						rowtFileOutputDelimited_15[17] = row20.UPDATE_DATE == null ? ""
								: FormatterUtils.format_Date(row20.UPDATE_DATE,
										"yyyy-MM-dd");

						rowtFileOutputDelimited_15[18] = row20.DOWNLOAD_DATE == null ? ""
								: FormatterUtils.format_Date(
										row20.DOWNLOAD_DATE, "yyyy-MM-dd");

						rowtFileOutputDelimited_15[19] = row20.IMPORT_DATE == null ? ""
								: FormatterUtils.format_Date(row20.IMPORT_DATE,
										"yyyy-MM-dd");

						rowtFileOutputDelimited_15[20] = row20.SOURCESYSTEM_CD == null ? ""
								: row20.SOURCESYSTEM_CD;

						rowtFileOutputDelimited_15[21] = row20.UPLOAD_ID == null ? ""
								: row20.UPLOAD_ID;

						nb_line_tFileOutputDelimited_15++;
						resourceMap.put("nb_line_tFileOutputDelimited_15",
								nb_line_tFileOutputDelimited_15);
						CsvWritertFileOutputDelimited_15
								.writeNext(rowtFileOutputDelimited_15);

						tos_count_tFileOutputDelimited_15++;

						/**
						 * [tFileOutputDelimited_15 main ] stop
						 */

						/**
						 * [tJDBCInput_8 end ] start
						 */

						currentComponent = "tJDBCInput_8";

					}
				} finally {
					if (rs_tJDBCInput_8 != null) {
						rs_tJDBCInput_8.close();
					}
					stmt_tJDBCInput_8.close();

				}
				globalMap.put("tJDBCInput_8_NB_LINE", nb_line_tJDBCInput_8);

				ok_Hash.put("tJDBCInput_8", true);
				end_Hash.put("tJDBCInput_8", System.currentTimeMillis());

				/**
				 * [tJDBCInput_8 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_15 end ] start
				 */

				currentComponent = "tFileOutputDelimited_15";

				if (CsvWritertFileOutputDelimited_15 != null) {
					CsvWritertFileOutputDelimited_15.close();
				}

				globalMap.put("tFileOutputDelimited_15_NB_LINE",
						nb_line_tFileOutputDelimited_15);

				resourceMap.put("finish_tFileOutputDelimited_15", true);

				ok_Hash.put("tFileOutputDelimited_15", true);
				end_Hash.put("tFileOutputDelimited_15",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_15 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_8 finally ] start
				 */

				currentComponent = "tJDBCInput_8";

				/**
				 * [tJDBCInput_8 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_15 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_15";

				if (resourceMap.get("finish_tFileOutputDelimited_15") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_15 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_15");

					if (CsvWritertFileOutputDelimited_15 != null) {
						CsvWritertFileOutputDelimited_15.close();
					}

				}

				/**
				 * [tFileOutputDelimited_15 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_8_SUBPROCESS_STATE", 1);
	}

	public void tJava_24Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_24_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_24 begin ] start
				 */

				ok_Hash.put("tJava_24", false);
				start_Hash.put("tJava_24", System.currentTimeMillis());

				currentComponent = "tJava_24";

				int tos_count_tJava_24 = 0;

				StatusListener.setSubStatus(40,
						"Getting Staging Observation_Fact...");
				if (context.DB_StagingI2B2_WHType.equalsIgnoreCase("i2b2")) {
					// context.currentQuery = "Select * from " +
					// context.DB_StagingI2B2_Schema+".observation_fact";

					context.currentQuery = "select * from "
							+ context.DB_StagingI2B2_Schema
							+ ".OBSERVATION_FACT where modifier_cd in (select modifier_cd from "
							+ context.DB_StagingI2B2_Schema
							+ ".MODIFIER_DIMENSION where modifier_path in (select staging_path from "
							+ context.DB_StagingI2B2_Schema
							+ ".IOE_TARGET_ONTOLOGY where TARGET_ID="
							+ context.TargetID
							+ ")) and modifier_cd not like '@'";
				} else {
					context.currentQuery = "Select * from i2b2demodata.observation_fact";

				}

				/**
				 * [tJava_24 begin ] stop
				 */

				/**
				 * [tJava_24 main ] start
				 */

				currentComponent = "tJava_24";

				tos_count_tJava_24++;

				/**
				 * [tJava_24 main ] stop
				 */

				/**
				 * [tJava_24 end ] start
				 */

				currentComponent = "tJava_24";

				ok_Hash.put("tJava_24", true);
				end_Hash.put("tJava_24", System.currentTimeMillis());

				/**
				 * [tJava_24 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_24:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCInput_12Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_24 finally ] start
				 */

				currentComponent = "tJava_24";

				/**
				 * [tJava_24 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_24_SUBPROCESS_STATE", 1);
	}

	public static class row38Struct implements
			routines.system.IPersistableRow<row38Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readDate(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readDate(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row38Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_12Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row38Struct row38 = new row38Struct();

				/**
				 * [tFileOutputDelimited_13 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_13", false);
				start_Hash.put("tFileOutputDelimited_13",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_13";

				int tos_count_tFileOutputDelimited_13 = 0;

				String fileName_tFileOutputDelimited_13 = "";
				fileName_tFileOutputDelimited_13 = (new java.io.File(
						((String) globalMap
								.get("tCreateTemporaryFile_12_FILEPATH"))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_13 = null;
				String extension_tFileOutputDelimited_13 = null;
				String directory_tFileOutputDelimited_13 = null;
				if ((fileName_tFileOutputDelimited_13.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_13.lastIndexOf(".") < fileName_tFileOutputDelimited_13
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13;
						extension_tFileOutputDelimited_13 = "";
					} else {
						fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13
								.substring(0, fileName_tFileOutputDelimited_13
										.lastIndexOf("."));
						extension_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13
								.substring(fileName_tFileOutputDelimited_13
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13
							.substring(0, fileName_tFileOutputDelimited_13
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_13.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13
								.substring(0, fileName_tFileOutputDelimited_13
										.lastIndexOf("."));
						extension_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13
								.substring(fileName_tFileOutputDelimited_13
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13;
						extension_tFileOutputDelimited_13 = "";
					}
					directory_tFileOutputDelimited_13 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_13 = true;
				java.io.File filetFileOutputDelimited_13 = new java.io.File(
						fileName_tFileOutputDelimited_13);
				globalMap.put("tFileOutputDelimited_13_FILE_NAME",
						fileName_tFileOutputDelimited_13);

				String[] headColutFileOutputDelimited_13 = new String[22];
				class CSVBasicSet_tFileOutputDelimited_13 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_13[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_13 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_13[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_13[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_13 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_13[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_13[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_13 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_13[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_13 = 0;
				int splitEvery_tFileOutputDelimited_13 = 1000;
				int splitedFileNo_tFileOutputDelimited_13 = 0;
				int currentRow_tFileOutputDelimited_13 = 0;

				CSVBasicSet_tFileOutputDelimited_13 csvSettings_tFileOutputDelimited_13 = new CSVBasicSet_tFileOutputDelimited_13();
				csvSettings_tFileOutputDelimited_13.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_13.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_13.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_13 != null
						&& directory_tFileOutputDelimited_13.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_13 = new java.io.File(
							directory_tFileOutputDelimited_13);
					if (!dir_tFileOutputDelimited_13.exists()) {

						dir_tFileOutputDelimited_13.mkdirs();

					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_13 = null;

				java.io.File fileToDelete_tFileOutputDelimited_13 = new java.io.File(
						fileName_tFileOutputDelimited_13);
				if (fileToDelete_tFileOutputDelimited_13.exists()) {
					fileToDelete_tFileOutputDelimited_13.delete();
				}

				CsvWritertFileOutputDelimited_13 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_13,
												false), "UTF-8")));
				CsvWritertFileOutputDelimited_13
						.setSeparator(csvSettings_tFileOutputDelimited_13
								.getFieldDelim());

				if (!csvSettings_tFileOutputDelimited_13
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_13.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_13.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_13
							.setLineEnd(""
									+ csvSettings_tFileOutputDelimited_13
											.getRowDelim());
				}

				CsvWritertFileOutputDelimited_13
						.setEscapeChar(csvSettings_tFileOutputDelimited_13
								.getEscapeChar());
				CsvWritertFileOutputDelimited_13
						.setQuoteChar(csvSettings_tFileOutputDelimited_13
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_13
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_13",
						CsvWritertFileOutputDelimited_13);

				resourceMap.put("nb_line_tFileOutputDelimited_13",
						nb_line_tFileOutputDelimited_13);

				/**
				 * [tFileOutputDelimited_13 begin ] stop
				 */

				/**
				 * [tJDBCInput_12 begin ] start
				 */

				ok_Hash.put("tJDBCInput_12", false);
				start_Hash.put("tJDBCInput_12", System.currentTimeMillis());

				currentComponent = "tJDBCInput_12";

				int tos_count_tJDBCInput_12 = 0;

				int nb_line_tJDBCInput_12 = 0;
				java.sql.Connection conn_tJDBCInput_12 = null;
				conn_tJDBCInput_12 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_12 = conn_tJDBCInput_12
						.createStatement();

				String dbquery_tJDBCInput_12 = context.currentQuery;

				globalMap.put("tJDBCInput_12_QUERY", dbquery_tJDBCInput_12);
				java.sql.ResultSet rs_tJDBCInput_12 = null;
				try {
					rs_tJDBCInput_12 = stmt_tJDBCInput_12
							.executeQuery(dbquery_tJDBCInput_12);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_12 = rs_tJDBCInput_12
							.getMetaData();
					int colQtyInRs_tJDBCInput_12 = rsmd_tJDBCInput_12
							.getColumnCount();

					String tmpContent_tJDBCInput_12 = null;

					while (rs_tJDBCInput_12.next()) {
						nb_line_tJDBCInput_12++;

						if (colQtyInRs_tJDBCInput_12 < 1) {
							row38.ENCOUNTER_NUM = null;
						} else {

							if (rs_tJDBCInput_12.getObject(1) != null) {
								row38.ENCOUNTER_NUM = rs_tJDBCInput_12
										.getBigDecimal(1);
							} else {
								row38.ENCOUNTER_NUM = null;
							}
						}
						if (colQtyInRs_tJDBCInput_12 < 2) {
							row38.PATIENT_NUM = null;
						} else {

							if (rs_tJDBCInput_12.getObject(2) != null) {
								row38.PATIENT_NUM = rs_tJDBCInput_12
										.getBigDecimal(2);
							} else {
								row38.PATIENT_NUM = null;
							}
						}
						if (colQtyInRs_tJDBCInput_12 < 3) {
							row38.CONCEPT_CD = null;
						} else {

							tmpContent_tJDBCInput_12 = rs_tJDBCInput_12
									.getString(3);
							if (tmpContent_tJDBCInput_12 != null) {
								row38.CONCEPT_CD = tmpContent_tJDBCInput_12;
							} else {
								row38.CONCEPT_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_12 < 4) {
							row38.PROVIDER_ID = null;
						} else {

							tmpContent_tJDBCInput_12 = rs_tJDBCInput_12
									.getString(4);
							if (tmpContent_tJDBCInput_12 != null) {
								row38.PROVIDER_ID = tmpContent_tJDBCInput_12;
							} else {
								row38.PROVIDER_ID = null;
							}
						}
						if (colQtyInRs_tJDBCInput_12 < 5) {
							row38.START_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_12 = null;
							try {
								date_tJDBCInput_12 = rs_tJDBCInput_12
										.getTimestamp(5);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_12 = rs_tJDBCInput_12
										.getDate(5);
							}
							row38.START_DATE = date_tJDBCInput_12;
						}
						if (colQtyInRs_tJDBCInput_12 < 6) {
							row38.MODIFIER_CD = null;
						} else {

							tmpContent_tJDBCInput_12 = rs_tJDBCInput_12
									.getString(6);
							if (tmpContent_tJDBCInput_12 != null) {
								row38.MODIFIER_CD = tmpContent_tJDBCInput_12;
							} else {
								row38.MODIFIER_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_12 < 7) {
							row38.INSTANCE_NUM = null;
						} else {

							tmpContent_tJDBCInput_12 = rs_tJDBCInput_12
									.getString(7);
							if (tmpContent_tJDBCInput_12 != null) {
								row38.INSTANCE_NUM = tmpContent_tJDBCInput_12;
							} else {
								row38.INSTANCE_NUM = null;
							}
						}
						if (colQtyInRs_tJDBCInput_12 < 8) {
							row38.VALTYPE_CD = null;
						} else {

							tmpContent_tJDBCInput_12 = rs_tJDBCInput_12
									.getString(8);
							if (tmpContent_tJDBCInput_12 != null) {
								row38.VALTYPE_CD = tmpContent_tJDBCInput_12;
							} else {
								row38.VALTYPE_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_12 < 9) {
							row38.TVAL_CHAR = null;
						} else {

							tmpContent_tJDBCInput_12 = rs_tJDBCInput_12
									.getString(9);
							if (tmpContent_tJDBCInput_12 != null) {
								row38.TVAL_CHAR = tmpContent_tJDBCInput_12;
							} else {
								row38.TVAL_CHAR = null;
							}
						}
						if (colQtyInRs_tJDBCInput_12 < 10) {
							row38.NVAL_NUM = null;
						} else {

							if (rs_tJDBCInput_12.getObject(10) != null) {
								row38.NVAL_NUM = rs_tJDBCInput_12.getFloat(10);
							} else {
								row38.NVAL_NUM = null;
							}
						}
						if (colQtyInRs_tJDBCInput_12 < 11) {
							row38.VALUEFLAG_CD = null;
						} else {

							tmpContent_tJDBCInput_12 = rs_tJDBCInput_12
									.getString(11);
							if (tmpContent_tJDBCInput_12 != null) {
								row38.VALUEFLAG_CD = tmpContent_tJDBCInput_12;
							} else {
								row38.VALUEFLAG_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_12 < 12) {
							row38.QUANTITY_NUM = null;
						} else {

							tmpContent_tJDBCInput_12 = rs_tJDBCInput_12
									.getString(12);
							if (tmpContent_tJDBCInput_12 != null) {
								row38.QUANTITY_NUM = tmpContent_tJDBCInput_12;
							} else {
								row38.QUANTITY_NUM = null;
							}
						}
						if (colQtyInRs_tJDBCInput_12 < 13) {
							row38.UNITS_CD = null;
						} else {

							tmpContent_tJDBCInput_12 = rs_tJDBCInput_12
									.getString(13);
							if (tmpContent_tJDBCInput_12 != null) {
								row38.UNITS_CD = tmpContent_tJDBCInput_12;
							} else {
								row38.UNITS_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_12 < 14) {
							row38.END_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_12 = null;
							try {
								date_tJDBCInput_12 = rs_tJDBCInput_12
										.getTimestamp(14);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_12 = rs_tJDBCInput_12
										.getDate(14);
							}
							row38.END_DATE = date_tJDBCInput_12;
						}
						if (colQtyInRs_tJDBCInput_12 < 15) {
							row38.LOCATION_CD = null;
						} else {

							tmpContent_tJDBCInput_12 = rs_tJDBCInput_12
									.getString(15);
							if (tmpContent_tJDBCInput_12 != null) {
								row38.LOCATION_CD = tmpContent_tJDBCInput_12;
							} else {
								row38.LOCATION_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_12 < 16) {
							row38.OBSERVATION_BLOB = null;
						} else {

							tmpContent_tJDBCInput_12 = rs_tJDBCInput_12
									.getString(16);
							if (tmpContent_tJDBCInput_12 != null) {
								row38.OBSERVATION_BLOB = tmpContent_tJDBCInput_12;
							} else {
								row38.OBSERVATION_BLOB = null;
							}
						}
						if (colQtyInRs_tJDBCInput_12 < 17) {
							row38.CONFIDENCE_NUM = null;
						} else {

							tmpContent_tJDBCInput_12 = rs_tJDBCInput_12
									.getString(17);
							if (tmpContent_tJDBCInput_12 != null) {
								row38.CONFIDENCE_NUM = tmpContent_tJDBCInput_12;
							} else {
								row38.CONFIDENCE_NUM = null;
							}
						}
						if (colQtyInRs_tJDBCInput_12 < 18) {
							row38.UPDATE_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_12 = null;
							try {
								date_tJDBCInput_12 = rs_tJDBCInput_12
										.getTimestamp(18);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_12 = rs_tJDBCInput_12
										.getDate(18);
							}
							row38.UPDATE_DATE = date_tJDBCInput_12;
						}
						if (colQtyInRs_tJDBCInput_12 < 19) {
							row38.DOWNLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_12 = null;
							try {
								date_tJDBCInput_12 = rs_tJDBCInput_12
										.getTimestamp(19);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_12 = rs_tJDBCInput_12
										.getDate(19);
							}
							row38.DOWNLOAD_DATE = date_tJDBCInput_12;
						}
						if (colQtyInRs_tJDBCInput_12 < 20) {
							row38.IMPORT_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_12 = null;
							try {
								date_tJDBCInput_12 = rs_tJDBCInput_12
										.getTimestamp(20);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_12 = rs_tJDBCInput_12
										.getDate(20);
							}
							row38.IMPORT_DATE = date_tJDBCInput_12;
						}
						if (colQtyInRs_tJDBCInput_12 < 21) {
							row38.SOURCESYSTEM_CD = null;
						} else {

							tmpContent_tJDBCInput_12 = rs_tJDBCInput_12
									.getString(21);
							if (tmpContent_tJDBCInput_12 != null) {
								row38.SOURCESYSTEM_CD = tmpContent_tJDBCInput_12;
							} else {
								row38.SOURCESYSTEM_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_12 < 22) {
							row38.UPLOAD_ID = null;
						} else {

							tmpContent_tJDBCInput_12 = rs_tJDBCInput_12
									.getString(22);
							if (tmpContent_tJDBCInput_12 != null) {
								row38.UPLOAD_ID = tmpContent_tJDBCInput_12;
							} else {
								row38.UPLOAD_ID = null;
							}
						}

						/**
						 * [tJDBCInput_12 begin ] stop
						 */

						/**
						 * [tJDBCInput_12 main ] start
						 */

						currentComponent = "tJDBCInput_12";

						tos_count_tJDBCInput_12++;

						/**
						 * [tJDBCInput_12 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_13 main ] start
						 */

						currentComponent = "tFileOutputDelimited_13";

						String[] rowtFileOutputDelimited_13 = new String[22];

						rowtFileOutputDelimited_13[0] = row38.ENCOUNTER_NUM == null ? ""
								: row38.ENCOUNTER_NUM.toPlainString();

						rowtFileOutputDelimited_13[1] = row38.PATIENT_NUM == null ? ""
								: row38.PATIENT_NUM.toPlainString();

						rowtFileOutputDelimited_13[2] = row38.CONCEPT_CD == null ? ""
								: row38.CONCEPT_CD;

						rowtFileOutputDelimited_13[3] = row38.PROVIDER_ID == null ? ""
								: row38.PROVIDER_ID;

						rowtFileOutputDelimited_13[4] = row38.START_DATE == null ? ""
								: FormatterUtils.format_Date(row38.START_DATE,
										"yyyy-MM-dd");

						rowtFileOutputDelimited_13[5] = row38.MODIFIER_CD == null ? ""
								: row38.MODIFIER_CD;

						rowtFileOutputDelimited_13[6] = row38.INSTANCE_NUM == null ? ""
								: row38.INSTANCE_NUM;

						rowtFileOutputDelimited_13[7] = row38.VALTYPE_CD == null ? ""
								: row38.VALTYPE_CD;

						rowtFileOutputDelimited_13[8] = row38.TVAL_CHAR == null ? ""
								: row38.TVAL_CHAR;

						rowtFileOutputDelimited_13[9] = row38.NVAL_NUM == null ? ""
								: String.valueOf(row38.NVAL_NUM);

						rowtFileOutputDelimited_13[10] = row38.VALUEFLAG_CD == null ? ""
								: row38.VALUEFLAG_CD;

						rowtFileOutputDelimited_13[11] = row38.QUANTITY_NUM == null ? ""
								: row38.QUANTITY_NUM;

						rowtFileOutputDelimited_13[12] = row38.UNITS_CD == null ? ""
								: row38.UNITS_CD;

						rowtFileOutputDelimited_13[13] = row38.END_DATE == null ? ""
								: FormatterUtils.format_Date(row38.END_DATE,
										"yyyy-MM-dd");

						rowtFileOutputDelimited_13[14] = row38.LOCATION_CD == null ? ""
								: row38.LOCATION_CD;

						rowtFileOutputDelimited_13[15] = row38.OBSERVATION_BLOB == null ? ""
								: row38.OBSERVATION_BLOB;

						rowtFileOutputDelimited_13[16] = row38.CONFIDENCE_NUM == null ? ""
								: row38.CONFIDENCE_NUM;

						rowtFileOutputDelimited_13[17] = row38.UPDATE_DATE == null ? ""
								: FormatterUtils.format_Date(row38.UPDATE_DATE,
										"yyyy-MM-dd");

						rowtFileOutputDelimited_13[18] = row38.DOWNLOAD_DATE == null ? ""
								: FormatterUtils.format_Date(
										row38.DOWNLOAD_DATE, "yyyy-MM-dd");

						rowtFileOutputDelimited_13[19] = row38.IMPORT_DATE == null ? ""
								: FormatterUtils.format_Date(row38.IMPORT_DATE,
										"yyyy-MM-dd");

						rowtFileOutputDelimited_13[20] = row38.SOURCESYSTEM_CD == null ? ""
								: row38.SOURCESYSTEM_CD;

						rowtFileOutputDelimited_13[21] = row38.UPLOAD_ID == null ? ""
								: row38.UPLOAD_ID;

						nb_line_tFileOutputDelimited_13++;
						resourceMap.put("nb_line_tFileOutputDelimited_13",
								nb_line_tFileOutputDelimited_13);
						CsvWritertFileOutputDelimited_13
								.writeNext(rowtFileOutputDelimited_13);

						tos_count_tFileOutputDelimited_13++;

						/**
						 * [tFileOutputDelimited_13 main ] stop
						 */

						/**
						 * [tJDBCInput_12 end ] start
						 */

						currentComponent = "tJDBCInput_12";

					}
				} finally {
					if (rs_tJDBCInput_12 != null) {
						rs_tJDBCInput_12.close();
					}
					stmt_tJDBCInput_12.close();

				}
				globalMap.put("tJDBCInput_12_NB_LINE", nb_line_tJDBCInput_12);

				ok_Hash.put("tJDBCInput_12", true);
				end_Hash.put("tJDBCInput_12", System.currentTimeMillis());

				/**
				 * [tJDBCInput_12 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_13 end ] start
				 */

				currentComponent = "tFileOutputDelimited_13";

				if (CsvWritertFileOutputDelimited_13 != null) {
					CsvWritertFileOutputDelimited_13.close();
				}

				globalMap.put("tFileOutputDelimited_13_NB_LINE",
						nb_line_tFileOutputDelimited_13);

				resourceMap.put("finish_tFileOutputDelimited_13", true);

				ok_Hash.put("tFileOutputDelimited_13", true);
				end_Hash.put("tFileOutputDelimited_13",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_13 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_12 finally ] start
				 */

				currentComponent = "tJDBCInput_12";

				/**
				 * [tJDBCInput_12 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_13 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_13";

				if (resourceMap.get("finish_tFileOutputDelimited_13") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_13 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_13");

					if (CsvWritertFileOutputDelimited_13 != null) {
						CsvWritertFileOutputDelimited_13.close();
					}

				}

				/**
				 * [tFileOutputDelimited_13 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_12_SUBPROCESS_STATE", 1);
	}

	public void tJava_20Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_20_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_20 begin ] start
				 */

				ok_Hash.put("tJava_20", false);
				start_Hash.put("tJava_20", System.currentTimeMillis());

				currentComponent = "tJava_20";

				int tos_count_tJava_20 = 0;

				StatusListener.setSubStatus(60,
						"Getting Staging Patient_Mapping...");
				if (context.DB_StagingI2B2_WHType.equalsIgnoreCase("i2b2"))
					// context.currentQuery = "SELECT * FROM  "+
					// context.DB_StagingI2B2_Schema+".patient_mapping ";
					context.currentQuery = "select DISTINCT * from "
							+ context.DB_StagingI2B2_Schema
							+ ".PATIENT_MAPPING where PATIENT_NUM in(select patient_num from "
							+ context.DB_StagingI2B2_Schema
							+ ".OBSERVATION_FACT where concept_cd in (  select concept_cd from "
							+ context.DB_StagingI2B2_Schema
							+ ".CONCEPT_DIMENSION where CONCEPT_PATH in     (     select staging_path from "
							+ context.DB_StagingI2B2_Schema
							+ ".IOE_TARGET_ONTOLOGY where TARGET_ID="
							+ context.TargetID + ")))";

				else {
					context.currentQuery = "SELECT * FROM  i2b2demodata.patient_mapping ";

				}

				/**
				 * [tJava_20 begin ] stop
				 */

				/**
				 * [tJava_20 main ] start
				 */

				currentComponent = "tJava_20";

				tos_count_tJava_20++;

				/**
				 * [tJava_20 main ] stop
				 */

				/**
				 * [tJava_20 end ] start
				 */

				currentComponent = "tJava_20";

				ok_Hash.put("tJava_20", true);
				end_Hash.put("tJava_20", System.currentTimeMillis());

				/**
				 * [tJava_20 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_20:OnSubjobOk1", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCInput_3Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_20:OnSubjobOk2", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_25Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_20 finally ] start
				 */

				currentComponent = "tJava_20";

				/**
				 * [tJava_20 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_20_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.PATIENT_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_3";

				int tos_count_tFileOutputDelimited_3 = 0;

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(
						context.folderMain + context.folderOutput
								+ "/patient_mapping.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
							.substring(0, fileName_tFileOutputDelimited_3
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(
						fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",
						fileName_tFileOutputDelimited_3);

				String[] headColutFileOutputDelimited_3 = new String[10];
				class CSVBasicSet_tFileOutputDelimited_3 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_3[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_3 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_3[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_3[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_3 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_3[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_3[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_3 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_3[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_3 = 0;
				int splitEvery_tFileOutputDelimited_3 = 1000;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				CSVBasicSet_tFileOutputDelimited_3 csvSettings_tFileOutputDelimited_3 = new CSVBasicSet_tFileOutputDelimited_3();
				csvSettings_tFileOutputDelimited_3.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_3.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_3.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null
						&& directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(
							directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {

						dir_tFileOutputDelimited_3.mkdirs();

					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_3 = null;

				java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(
						fileName_tFileOutputDelimited_3);
				if (fileToDelete_tFileOutputDelimited_3.exists()) {
					fileToDelete_tFileOutputDelimited_3.delete();
				}

				CsvWritertFileOutputDelimited_3 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_3,
												false), "UTF-8")));
				CsvWritertFileOutputDelimited_3
						.setSeparator(csvSettings_tFileOutputDelimited_3
								.getFieldDelim());

				if (!csvSettings_tFileOutputDelimited_3
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_3.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_3.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_3.setLineEnd(""
							+ csvSettings_tFileOutputDelimited_3.getRowDelim());
				}

				if (filetFileOutputDelimited_3.length() == 0) {

					headColutFileOutputDelimited_3[0] = "PATIENT_IDE";

					headColutFileOutputDelimited_3[1] = "PATIENT_IDE_SOURCE";

					headColutFileOutputDelimited_3[2] = "PATIENT_NUM";

					headColutFileOutputDelimited_3[3] = "PATIENT_IDE_STATUS";

					headColutFileOutputDelimited_3[4] = "UPLOAD_DATE";

					headColutFileOutputDelimited_3[5] = "UPDATE_DATE";

					headColutFileOutputDelimited_3[6] = "DOWNLOAD_DATE";

					headColutFileOutputDelimited_3[7] = "IMPORT_DATE";

					headColutFileOutputDelimited_3[8] = "SOURCESYSTEM_CD";

					headColutFileOutputDelimited_3[9] = "UPLOAD_ID";

					CsvWritertFileOutputDelimited_3
							.writeNext(headColutFileOutputDelimited_3);
					CsvWritertFileOutputDelimited_3.flush();

				}

				CsvWritertFileOutputDelimited_3
						.setEscapeChar(csvSettings_tFileOutputDelimited_3
								.getEscapeChar());
				CsvWritertFileOutputDelimited_3
						.setQuoteChar(csvSettings_tFileOutputDelimited_3
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_3
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_3",
						CsvWritertFileOutputDelimited_3);

				resourceMap.put("nb_line_tFileOutputDelimited_3",
						nb_line_tFileOutputDelimited_3);

				/**
				 * [tFileOutputDelimited_3 begin ] stop
				 */

				/**
				 * [tJDBCInput_3 begin ] start
				 */

				ok_Hash.put("tJDBCInput_3", false);
				start_Hash.put("tJDBCInput_3", System.currentTimeMillis());

				currentComponent = "tJDBCInput_3";

				int tos_count_tJDBCInput_3 = 0;

				int nb_line_tJDBCInput_3 = 0;
				java.sql.Connection conn_tJDBCInput_3 = null;
				conn_tJDBCInput_3 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_3 = conn_tJDBCInput_3
						.createStatement();

				String dbquery_tJDBCInput_3 = context.currentQuery;

				globalMap.put("tJDBCInput_3_QUERY", dbquery_tJDBCInput_3);
				java.sql.ResultSet rs_tJDBCInput_3 = null;
				try {
					rs_tJDBCInput_3 = stmt_tJDBCInput_3
							.executeQuery(dbquery_tJDBCInput_3);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_3 = rs_tJDBCInput_3
							.getMetaData();
					int colQtyInRs_tJDBCInput_3 = rsmd_tJDBCInput_3
							.getColumnCount();

					String tmpContent_tJDBCInput_3 = null;

					while (rs_tJDBCInput_3.next()) {
						nb_line_tJDBCInput_3++;

						if (colQtyInRs_tJDBCInput_3 < 1) {
							row4.PATIENT_IDE = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(1);
							if (tmpContent_tJDBCInput_3 != null) {
								row4.PATIENT_IDE = tmpContent_tJDBCInput_3;
							} else {
								row4.PATIENT_IDE = null;
							}
						}
						if (colQtyInRs_tJDBCInput_3 < 2) {
							row4.PATIENT_IDE_SOURCE = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(2);
							if (tmpContent_tJDBCInput_3 != null) {
								row4.PATIENT_IDE_SOURCE = tmpContent_tJDBCInput_3;
							} else {
								row4.PATIENT_IDE_SOURCE = null;
							}
						}
						if (colQtyInRs_tJDBCInput_3 < 3) {
							row4.PATIENT_NUM = null;
						} else {

							if (rs_tJDBCInput_3.getObject(3) != null) {
								row4.PATIENT_NUM = rs_tJDBCInput_3
										.getBigDecimal(3);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tJDBCInput_3 < 4) {
							row4.PATIENT_IDE_STATUS = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(4);
							if (tmpContent_tJDBCInput_3 != null) {
								row4.PATIENT_IDE_STATUS = tmpContent_tJDBCInput_3;
							} else {
								row4.PATIENT_IDE_STATUS = null;
							}
						}
						if (colQtyInRs_tJDBCInput_3 < 5) {
							row4.UPLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_3 = null;
							try {
								date_tJDBCInput_3 = rs_tJDBCInput_3
										.getTimestamp(5);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_3 = rs_tJDBCInput_3.getDate(5);
							}
							row4.UPLOAD_DATE = date_tJDBCInput_3;
						}
						if (colQtyInRs_tJDBCInput_3 < 6) {
							row4.UPDATE_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_3 = null;
							try {
								date_tJDBCInput_3 = rs_tJDBCInput_3
										.getTimestamp(6);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_3 = rs_tJDBCInput_3.getDate(6);
							}
							row4.UPDATE_DATE = date_tJDBCInput_3;
						}
						if (colQtyInRs_tJDBCInput_3 < 7) {
							row4.DOWNLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_3 = null;
							try {
								date_tJDBCInput_3 = rs_tJDBCInput_3
										.getTimestamp(7);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_3 = rs_tJDBCInput_3.getDate(7);
							}
							row4.DOWNLOAD_DATE = date_tJDBCInput_3;
						}
						if (colQtyInRs_tJDBCInput_3 < 8) {
							row4.IMPORT_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_3 = null;
							try {
								date_tJDBCInput_3 = rs_tJDBCInput_3
										.getTimestamp(8);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_3 = rs_tJDBCInput_3.getDate(8);
							}
							row4.IMPORT_DATE = date_tJDBCInput_3;
						}
						if (colQtyInRs_tJDBCInput_3 < 9) {
							row4.SOURCESYSTEM_CD = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(9);
							if (tmpContent_tJDBCInput_3 != null) {
								row4.SOURCESYSTEM_CD = tmpContent_tJDBCInput_3;
							} else {
								row4.SOURCESYSTEM_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_3 < 10) {
							row4.UPLOAD_ID = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(10);
							if (tmpContent_tJDBCInput_3 != null) {
								row4.UPLOAD_ID = tmpContent_tJDBCInput_3;
							} else {
								row4.UPLOAD_ID = null;
							}
						}

						/**
						 * [tJDBCInput_3 begin ] stop
						 */

						/**
						 * [tJDBCInput_3 main ] start
						 */

						currentComponent = "tJDBCInput_3";

						tos_count_tJDBCInput_3++;

						/**
						 * [tJDBCInput_3 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_3 main ] start
						 */

						currentComponent = "tFileOutputDelimited_3";

						String[] rowtFileOutputDelimited_3 = new String[10];

						rowtFileOutputDelimited_3[0] = row4.PATIENT_IDE == null ? ""
								: row4.PATIENT_IDE;

						rowtFileOutputDelimited_3[1] = row4.PATIENT_IDE_SOURCE == null ? ""
								: row4.PATIENT_IDE_SOURCE;

						rowtFileOutputDelimited_3[2] = row4.PATIENT_NUM == null ? ""
								: row4.PATIENT_NUM.toPlainString();

						rowtFileOutputDelimited_3[3] = row4.PATIENT_IDE_STATUS == null ? ""
								: row4.PATIENT_IDE_STATUS;

						rowtFileOutputDelimited_3[4] = row4.UPLOAD_DATE == null ? ""
								: FormatterUtils.format_Date(row4.UPLOAD_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_3[5] = row4.UPDATE_DATE == null ? ""
								: FormatterUtils.format_Date(row4.UPDATE_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_3[6] = row4.DOWNLOAD_DATE == null ? ""
								: FormatterUtils.format_Date(
										row4.DOWNLOAD_DATE, "dd-MM-yyyy");

						rowtFileOutputDelimited_3[7] = row4.IMPORT_DATE == null ? ""
								: FormatterUtils.format_Date(row4.IMPORT_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_3[8] = row4.SOURCESYSTEM_CD == null ? ""
								: row4.SOURCESYSTEM_CD;

						rowtFileOutputDelimited_3[9] = row4.UPLOAD_ID == null ? ""
								: row4.UPLOAD_ID;

						nb_line_tFileOutputDelimited_3++;
						resourceMap.put("nb_line_tFileOutputDelimited_3",
								nb_line_tFileOutputDelimited_3);
						CsvWritertFileOutputDelimited_3
								.writeNext(rowtFileOutputDelimited_3);

						tos_count_tFileOutputDelimited_3++;

						/**
						 * [tFileOutputDelimited_3 main ] stop
						 */

						/**
						 * [tJDBCInput_3 end ] start
						 */

						currentComponent = "tJDBCInput_3";

					}
				} finally {
					if (rs_tJDBCInput_3 != null) {
						rs_tJDBCInput_3.close();
					}
					stmt_tJDBCInput_3.close();

				}
				globalMap.put("tJDBCInput_3_NB_LINE", nb_line_tJDBCInput_3);

				ok_Hash.put("tJDBCInput_3", true);
				end_Hash.put("tJDBCInput_3", System.currentTimeMillis());

				/**
				 * [tJDBCInput_3 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 end ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (CsvWritertFileOutputDelimited_3 != null) {
					CsvWritertFileOutputDelimited_3.close();
				}

				globalMap.put("tFileOutputDelimited_3_NB_LINE",
						nb_line_tFileOutputDelimited_3);

				resourceMap.put("finish_tFileOutputDelimited_3", true);

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_3 finally ] start
				 */

				currentComponent = "tJDBCInput_3";

				/**
				 * [tJDBCInput_3 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (resourceMap.get("finish_tFileOutputDelimited_3") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_3 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_3");

					if (CsvWritertFileOutputDelimited_3 != null) {
						CsvWritertFileOutputDelimited_3.close();
					}

				}

				/**
				 * [tFileOutputDelimited_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_3_SUBPROCESS_STATE", 1);
	}

	public void tJava_25Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_25_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_25 begin ] start
				 */

				ok_Hash.put("tJava_25", false);
				start_Hash.put("tJava_25", System.currentTimeMillis());

				currentComponent = "tJava_25";

				int tos_count_tJava_25 = 0;

				StatusListener.setSubStatus(60,
						"Getting Staging Patient_Mapping...");
				if (context.DB_StagingI2B2_WHType.equalsIgnoreCase("i2b2"))
					// context.currentQuery = "SELECT * FROM  "+
					// context.DB_StagingI2B2_Schema+".patient_mapping ";
					context.currentQuery = "select DISTINCT * from "
							+ context.DB_StagingI2B2_Schema
							+ ".PATIENT_MAPPING where PATIENT_NUM in(select patient_num from "
							+ context.DB_StagingI2B2_Schema
							+ ".OBSERVATION_FACT where modifier_cd in (  select modifier_cd from "
							+ context.DB_StagingI2B2_Schema
							+ ".MODIFIER_DIMENSION where MODIFIER_PATH in     (     select staging_path from "
							+ context.DB_StagingI2B2_Schema
							+ ".IOE_TARGET_ONTOLOGY where TARGET_ID="
							+ context.TargetID + "    )))";

				else {
					context.currentQuery = "SELECT * FROM  i2b2demodata.patient_mapping ";

				}

				/**
				 * [tJava_25 begin ] stop
				 */

				/**
				 * [tJava_25 main ] start
				 */

				currentComponent = "tJava_25";

				tos_count_tJava_25++;

				/**
				 * [tJava_25 main ] stop
				 */

				/**
				 * [tJava_25 end ] start
				 */

				currentComponent = "tJava_25";

				ok_Hash.put("tJava_25", true);
				end_Hash.put("tJava_25", System.currentTimeMillis());

				/**
				 * [tJava_25 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_25:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCInput_13Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_25 finally ] start
				 */

				currentComponent = "tJava_25";

				/**
				 * [tJava_25 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_25_SUBPROCESS_STATE", 1);
	}

	public static class row43Struct implements
			routines.system.IPersistableRow<row43Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.PATIENT_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row43Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_13Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row43Struct row43 = new row43Struct();

				/**
				 * [tFileOutputDelimited_17 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_17", false);
				start_Hash.put("tFileOutputDelimited_17",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_17";

				int tos_count_tFileOutputDelimited_17 = 0;

				String fileName_tFileOutputDelimited_17 = "";
				fileName_tFileOutputDelimited_17 = (new java.io.File(
						context.folderMain + context.folderOutput
								+ "/patient_mapping.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_17 = null;
				String extension_tFileOutputDelimited_17 = null;
				String directory_tFileOutputDelimited_17 = null;
				if ((fileName_tFileOutputDelimited_17.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_17.lastIndexOf(".") < fileName_tFileOutputDelimited_17
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17;
						extension_tFileOutputDelimited_17 = "";
					} else {
						fullName_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17
								.substring(0, fileName_tFileOutputDelimited_17
										.lastIndexOf("."));
						extension_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17
								.substring(fileName_tFileOutputDelimited_17
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17
							.substring(0, fileName_tFileOutputDelimited_17
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_17.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17
								.substring(0, fileName_tFileOutputDelimited_17
										.lastIndexOf("."));
						extension_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17
								.substring(fileName_tFileOutputDelimited_17
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17;
						extension_tFileOutputDelimited_17 = "";
					}
					directory_tFileOutputDelimited_17 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_17 = true;
				java.io.File filetFileOutputDelimited_17 = new java.io.File(
						fileName_tFileOutputDelimited_17);
				globalMap.put("tFileOutputDelimited_17_FILE_NAME",
						fileName_tFileOutputDelimited_17);

				if (filetFileOutputDelimited_17.exists()) {
					isFileGenerated_tFileOutputDelimited_17 = false;
				}

				String[] headColutFileOutputDelimited_17 = new String[10];
				class CSVBasicSet_tFileOutputDelimited_17 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_17[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_17 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_17[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_17[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_17 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_17[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_17[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_17 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_17[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_17 = 0;
				int splitEvery_tFileOutputDelimited_17 = 1000;
				int splitedFileNo_tFileOutputDelimited_17 = 0;
				int currentRow_tFileOutputDelimited_17 = 0;

				CSVBasicSet_tFileOutputDelimited_17 csvSettings_tFileOutputDelimited_17 = new CSVBasicSet_tFileOutputDelimited_17();
				csvSettings_tFileOutputDelimited_17.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_17.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_17.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_17 != null
						&& directory_tFileOutputDelimited_17.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_17 = new java.io.File(
							directory_tFileOutputDelimited_17);
					if (!dir_tFileOutputDelimited_17.exists()) {

						dir_tFileOutputDelimited_17.mkdirs();

					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_17 = null;

				CsvWritertFileOutputDelimited_17 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_17,
												true), "UTF-8")));
				CsvWritertFileOutputDelimited_17
						.setSeparator(csvSettings_tFileOutputDelimited_17
								.getFieldDelim());

				if (!csvSettings_tFileOutputDelimited_17
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_17.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_17.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_17
							.setLineEnd(""
									+ csvSettings_tFileOutputDelimited_17
											.getRowDelim());
				}

				if (filetFileOutputDelimited_17.length() == 0) {

					headColutFileOutputDelimited_17[0] = "PATIENT_IDE";

					headColutFileOutputDelimited_17[1] = "PATIENT_IDE_SOURCE";

					headColutFileOutputDelimited_17[2] = "PATIENT_NUM";

					headColutFileOutputDelimited_17[3] = "PATIENT_IDE_STATUS";

					headColutFileOutputDelimited_17[4] = "UPLOAD_DATE";

					headColutFileOutputDelimited_17[5] = "UPDATE_DATE";

					headColutFileOutputDelimited_17[6] = "DOWNLOAD_DATE";

					headColutFileOutputDelimited_17[7] = "IMPORT_DATE";

					headColutFileOutputDelimited_17[8] = "SOURCESYSTEM_CD";

					headColutFileOutputDelimited_17[9] = "UPLOAD_ID";

					CsvWritertFileOutputDelimited_17
							.writeNext(headColutFileOutputDelimited_17);
					CsvWritertFileOutputDelimited_17.flush();

				}

				CsvWritertFileOutputDelimited_17
						.setEscapeChar(csvSettings_tFileOutputDelimited_17
								.getEscapeChar());
				CsvWritertFileOutputDelimited_17
						.setQuoteChar(csvSettings_tFileOutputDelimited_17
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_17
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_17",
						CsvWritertFileOutputDelimited_17);

				resourceMap.put("nb_line_tFileOutputDelimited_17",
						nb_line_tFileOutputDelimited_17);

				/**
				 * [tFileOutputDelimited_17 begin ] stop
				 */

				/**
				 * [tJDBCInput_13 begin ] start
				 */

				ok_Hash.put("tJDBCInput_13", false);
				start_Hash.put("tJDBCInput_13", System.currentTimeMillis());

				currentComponent = "tJDBCInput_13";

				int tos_count_tJDBCInput_13 = 0;

				int nb_line_tJDBCInput_13 = 0;
				java.sql.Connection conn_tJDBCInput_13 = null;
				conn_tJDBCInput_13 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_13 = conn_tJDBCInput_13
						.createStatement();

				String dbquery_tJDBCInput_13 = context.currentQuery;

				globalMap.put("tJDBCInput_13_QUERY", dbquery_tJDBCInput_13);
				java.sql.ResultSet rs_tJDBCInput_13 = null;
				try {
					rs_tJDBCInput_13 = stmt_tJDBCInput_13
							.executeQuery(dbquery_tJDBCInput_13);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_13 = rs_tJDBCInput_13
							.getMetaData();
					int colQtyInRs_tJDBCInput_13 = rsmd_tJDBCInput_13
							.getColumnCount();

					String tmpContent_tJDBCInput_13 = null;

					while (rs_tJDBCInput_13.next()) {
						nb_line_tJDBCInput_13++;

						if (colQtyInRs_tJDBCInput_13 < 1) {
							row43.PATIENT_IDE = null;
						} else {

							tmpContent_tJDBCInput_13 = rs_tJDBCInput_13
									.getString(1);
							if (tmpContent_tJDBCInput_13 != null) {
								row43.PATIENT_IDE = tmpContent_tJDBCInput_13;
							} else {
								row43.PATIENT_IDE = null;
							}
						}
						if (colQtyInRs_tJDBCInput_13 < 2) {
							row43.PATIENT_IDE_SOURCE = null;
						} else {

							tmpContent_tJDBCInput_13 = rs_tJDBCInput_13
									.getString(2);
							if (tmpContent_tJDBCInput_13 != null) {
								row43.PATIENT_IDE_SOURCE = tmpContent_tJDBCInput_13;
							} else {
								row43.PATIENT_IDE_SOURCE = null;
							}
						}
						if (colQtyInRs_tJDBCInput_13 < 3) {
							row43.PATIENT_NUM = null;
						} else {

							if (rs_tJDBCInput_13.getObject(3) != null) {
								row43.PATIENT_NUM = rs_tJDBCInput_13
										.getBigDecimal(3);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tJDBCInput_13 < 4) {
							row43.PATIENT_IDE_STATUS = null;
						} else {

							tmpContent_tJDBCInput_13 = rs_tJDBCInput_13
									.getString(4);
							if (tmpContent_tJDBCInput_13 != null) {
								row43.PATIENT_IDE_STATUS = tmpContent_tJDBCInput_13;
							} else {
								row43.PATIENT_IDE_STATUS = null;
							}
						}
						if (colQtyInRs_tJDBCInput_13 < 5) {
							row43.UPLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_13 = null;
							try {
								date_tJDBCInput_13 = rs_tJDBCInput_13
										.getTimestamp(5);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_13 = rs_tJDBCInput_13
										.getDate(5);
							}
							row43.UPLOAD_DATE = date_tJDBCInput_13;
						}
						if (colQtyInRs_tJDBCInput_13 < 6) {
							row43.UPDATE_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_13 = null;
							try {
								date_tJDBCInput_13 = rs_tJDBCInput_13
										.getTimestamp(6);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_13 = rs_tJDBCInput_13
										.getDate(6);
							}
							row43.UPDATE_DATE = date_tJDBCInput_13;
						}
						if (colQtyInRs_tJDBCInput_13 < 7) {
							row43.DOWNLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_13 = null;
							try {
								date_tJDBCInput_13 = rs_tJDBCInput_13
										.getTimestamp(7);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_13 = rs_tJDBCInput_13
										.getDate(7);
							}
							row43.DOWNLOAD_DATE = date_tJDBCInput_13;
						}
						if (colQtyInRs_tJDBCInput_13 < 8) {
							row43.IMPORT_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_13 = null;
							try {
								date_tJDBCInput_13 = rs_tJDBCInput_13
										.getTimestamp(8);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_13 = rs_tJDBCInput_13
										.getDate(8);
							}
							row43.IMPORT_DATE = date_tJDBCInput_13;
						}
						if (colQtyInRs_tJDBCInput_13 < 9) {
							row43.SOURCESYSTEM_CD = null;
						} else {

							tmpContent_tJDBCInput_13 = rs_tJDBCInput_13
									.getString(9);
							if (tmpContent_tJDBCInput_13 != null) {
								row43.SOURCESYSTEM_CD = tmpContent_tJDBCInput_13;
							} else {
								row43.SOURCESYSTEM_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_13 < 10) {
							row43.UPLOAD_ID = null;
						} else {

							tmpContent_tJDBCInput_13 = rs_tJDBCInput_13
									.getString(10);
							if (tmpContent_tJDBCInput_13 != null) {
								row43.UPLOAD_ID = tmpContent_tJDBCInput_13;
							} else {
								row43.UPLOAD_ID = null;
							}
						}

						/**
						 * [tJDBCInput_13 begin ] stop
						 */

						/**
						 * [tJDBCInput_13 main ] start
						 */

						currentComponent = "tJDBCInput_13";

						tos_count_tJDBCInput_13++;

						/**
						 * [tJDBCInput_13 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_17 main ] start
						 */

						currentComponent = "tFileOutputDelimited_17";

						String[] rowtFileOutputDelimited_17 = new String[10];

						rowtFileOutputDelimited_17[0] = row43.PATIENT_IDE == null ? ""
								: row43.PATIENT_IDE;

						rowtFileOutputDelimited_17[1] = row43.PATIENT_IDE_SOURCE == null ? ""
								: row43.PATIENT_IDE_SOURCE;

						rowtFileOutputDelimited_17[2] = row43.PATIENT_NUM == null ? ""
								: row43.PATIENT_NUM.toPlainString();

						rowtFileOutputDelimited_17[3] = row43.PATIENT_IDE_STATUS == null ? ""
								: row43.PATIENT_IDE_STATUS;

						rowtFileOutputDelimited_17[4] = row43.UPLOAD_DATE == null ? ""
								: FormatterUtils.format_Date(row43.UPLOAD_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_17[5] = row43.UPDATE_DATE == null ? ""
								: FormatterUtils.format_Date(row43.UPDATE_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_17[6] = row43.DOWNLOAD_DATE == null ? ""
								: FormatterUtils.format_Date(
										row43.DOWNLOAD_DATE, "dd-MM-yyyy");

						rowtFileOutputDelimited_17[7] = row43.IMPORT_DATE == null ? ""
								: FormatterUtils.format_Date(row43.IMPORT_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_17[8] = row43.SOURCESYSTEM_CD == null ? ""
								: row43.SOURCESYSTEM_CD;

						rowtFileOutputDelimited_17[9] = row43.UPLOAD_ID == null ? ""
								: row43.UPLOAD_ID;

						nb_line_tFileOutputDelimited_17++;
						resourceMap.put("nb_line_tFileOutputDelimited_17",
								nb_line_tFileOutputDelimited_17);
						CsvWritertFileOutputDelimited_17
								.writeNext(rowtFileOutputDelimited_17);

						tos_count_tFileOutputDelimited_17++;

						/**
						 * [tFileOutputDelimited_17 main ] stop
						 */

						/**
						 * [tJDBCInput_13 end ] start
						 */

						currentComponent = "tJDBCInput_13";

					}
				} finally {
					if (rs_tJDBCInput_13 != null) {
						rs_tJDBCInput_13.close();
					}
					stmt_tJDBCInput_13.close();

				}
				globalMap.put("tJDBCInput_13_NB_LINE", nb_line_tJDBCInput_13);

				ok_Hash.put("tJDBCInput_13", true);
				end_Hash.put("tJDBCInput_13", System.currentTimeMillis());

				/**
				 * [tJDBCInput_13 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_17 end ] start
				 */

				currentComponent = "tFileOutputDelimited_17";

				if (CsvWritertFileOutputDelimited_17 != null) {
					CsvWritertFileOutputDelimited_17.close();
				}

				globalMap.put("tFileOutputDelimited_17_NB_LINE",
						nb_line_tFileOutputDelimited_17);

				resourceMap.put("finish_tFileOutputDelimited_17", true);

				ok_Hash.put("tFileOutputDelimited_17", true);
				end_Hash.put("tFileOutputDelimited_17",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_17 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_13 finally ] start
				 */

				currentComponent = "tJDBCInput_13";

				/**
				 * [tJDBCInput_13 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_17 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_17";

				if (resourceMap.get("finish_tFileOutputDelimited_17") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_17 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_17");

					if (CsvWritertFileOutputDelimited_17 != null) {
						CsvWritertFileOutputDelimited_17.close();
					}

				}

				/**
				 * [tFileOutputDelimited_17 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_13_SUBPROCESS_STATE", 1);
	}

	public void tJava_21Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_21_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_21 begin ] start
				 */

				ok_Hash.put("tJava_21", false);
				start_Hash.put("tJava_21", System.currentTimeMillis());

				currentComponent = "tJava_21";

				int tos_count_tJava_21 = 0;

				StatusListener.setSubStatus(70,
						"Getting Staging Patient_Dimension...");
				if (context.DB_StagingI2B2_WHType.equalsIgnoreCase("i2b2"))
					// context.currentQuery = "SELECT * FROM  "+
					// context.DB_StagingI2B2_Schema+".patient_dimension";
					context.currentQuery = "select DISTINCT * from "
							+ context.DB_StagingI2B2_Schema
							+ ".PATIENT_DIMENSION where PATIENT_NUM in(select patient_num from "
							+ context.DB_StagingI2B2_Schema
							+ ".OBSERVATION_FACT where concept_cd in (  select concept_cd from "
							+ context.DB_StagingI2B2_Schema
							+ ".CONCEPT_DIMENSION where CONCEPT_PATH in     (     select staging_path from "
							+ context.DB_StagingI2B2_Schema
							+ ".IOE_TARGET_ONTOLOGY where TARGET_ID="
							+ context.TargetID + "  )))";
				else {
					context.currentQuery = "SELECT * FROM  i2b2demodata.patient_dimension";

				}

				/**
				 * [tJava_21 begin ] stop
				 */

				/**
				 * [tJava_21 main ] start
				 */

				currentComponent = "tJava_21";

				tos_count_tJava_21++;

				/**
				 * [tJava_21 main ] stop
				 */

				/**
				 * [tJava_21 end ] start
				 */

				currentComponent = "tJava_21";

				ok_Hash.put("tJava_21", true);
				end_Hash.put("tJava_21", System.currentTimeMillis());

				/**
				 * [tJava_21 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_21:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCInput_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_21 finally ] start
				 */

				currentComponent = "tJava_21";

				/**
				 * [tJava_21 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_21_SUBPROCESS_STATE", 1);
	}

	public static class row18Struct implements
			routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String VITAL_STATUS_CD;

		public String getVITAL_STATUS_CD() {
			return this.VITAL_STATUS_CD;
		}

		public String BIRTH_DATE;

		public String getBIRTH_DATE() {
			return this.BIRTH_DATE;
		}

		public String DEATH_DATE;

		public String getDEATH_DATE() {
			return this.DEATH_DATE;
		}

		public String SEX_CD;

		public String getSEX_CD() {
			return this.SEX_CD;
		}

		public String AGE_IN_YEARS_NUM;

		public String getAGE_IN_YEARS_NUM() {
			return this.AGE_IN_YEARS_NUM;
		}

		public String LANGUAGE_CD;

		public String getLANGUAGE_CD() {
			return this.LANGUAGE_CD;
		}

		public String RACE_CD;

		public String getRACE_CD() {
			return this.RACE_CD;
		}

		public String MARITAL_STATUS_CD;

		public String getMARITAL_STATUS_CD() {
			return this.MARITAL_STATUS_CD;
		}

		public String RELIGION_CD;

		public String getRELIGION_CD() {
			return this.RELIGION_CD;
		}

		public String ZIP_CD;

		public String getZIP_CD() {
			return this.ZIP_CD;
		}

		public String STATECITYZIP_PATH;

		public String getSTATECITYZIP_PATH() {
			return this.STATECITYZIP_PATH;
		}

		public String INCOME_CD;

		public String getINCOME_CD() {
			return this.INCOME_CD;
		}

		public Object PATIENT_BLOB;

		public Object getPATIENT_BLOB() {
			return this.PATIENT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.VITAL_STATUS_CD = readString(dis);

					this.BIRTH_DATE = readString(dis);

					this.DEATH_DATE = readString(dis);

					this.SEX_CD = readString(dis);

					this.AGE_IN_YEARS_NUM = readString(dis);

					this.LANGUAGE_CD = readString(dis);

					this.RACE_CD = readString(dis);

					this.MARITAL_STATUS_CD = readString(dis);

					this.RELIGION_CD = readString(dis);

					this.ZIP_CD = readString(dis);

					this.STATECITYZIP_PATH = readString(dis);

					this.INCOME_CD = readString(dis);

					this.PATIENT_BLOB = (Object) dis.readObject();

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.VITAL_STATUS_CD, dos);

				// String

				writeString(this.BIRTH_DATE, dos);

				// String

				writeString(this.DEATH_DATE, dos);

				// String

				writeString(this.SEX_CD, dos);

				// String

				writeString(this.AGE_IN_YEARS_NUM, dos);

				// String

				writeString(this.LANGUAGE_CD, dos);

				// String

				writeString(this.RACE_CD, dos);

				// String

				writeString(this.MARITAL_STATUS_CD, dos);

				// String

				writeString(this.RELIGION_CD, dos);

				// String

				writeString(this.ZIP_CD, dos);

				// String

				writeString(this.STATECITYZIP_PATH, dos);

				// String

				writeString(this.INCOME_CD, dos);

				// Object

				dos.writeObject(this.PATIENT_BLOB);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",VITAL_STATUS_CD=" + VITAL_STATUS_CD);
			sb.append(",BIRTH_DATE=" + BIRTH_DATE);
			sb.append(",DEATH_DATE=" + DEATH_DATE);
			sb.append(",SEX_CD=" + SEX_CD);
			sb.append(",AGE_IN_YEARS_NUM=" + AGE_IN_YEARS_NUM);
			sb.append(",LANGUAGE_CD=" + LANGUAGE_CD);
			sb.append(",RACE_CD=" + RACE_CD);
			sb.append(",MARITAL_STATUS_CD=" + MARITAL_STATUS_CD);
			sb.append(",RELIGION_CD=" + RELIGION_CD);
			sb.append(",ZIP_CD=" + ZIP_CD);
			sb.append(",STATECITYZIP_PATH=" + STATECITYZIP_PATH);
			sb.append(",INCOME_CD=" + INCOME_CD);
			sb.append(",PATIENT_BLOB=" + String.valueOf(PATIENT_BLOB));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row18Struct row18 = new row18Struct();

				/**
				 * [tFileOutputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_5", false);
				start_Hash.put("tFileOutputDelimited_5",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_5";

				int tos_count_tFileOutputDelimited_5 = 0;

				String fileName_tFileOutputDelimited_5 = "";
				fileName_tFileOutputDelimited_5 = (new java.io.File(
						context.folderMain + context.folderOutput
								+ "/patient_dimension.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_5 = null;
				String extension_tFileOutputDelimited_5 = null;
				String directory_tFileOutputDelimited_5 = null;
				if ((fileName_tFileOutputDelimited_5.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") < fileName_tFileOutputDelimited_5
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(0, fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
							.substring(0, fileName_tFileOutputDelimited_5
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(0, fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					}
					directory_tFileOutputDelimited_5 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_5 = true;
				java.io.File filetFileOutputDelimited_5 = new java.io.File(
						fileName_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME",
						fileName_tFileOutputDelimited_5);

				String[] headColutFileOutputDelimited_5 = new String[19];
				class CSVBasicSet_tFileOutputDelimited_5 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_5[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_5 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_5[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_5[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_5 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_5[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_5[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_5 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_5[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_5 = 0;
				int splitEvery_tFileOutputDelimited_5 = 1000;
				int splitedFileNo_tFileOutputDelimited_5 = 0;
				int currentRow_tFileOutputDelimited_5 = 0;

				CSVBasicSet_tFileOutputDelimited_5 csvSettings_tFileOutputDelimited_5 = new CSVBasicSet_tFileOutputDelimited_5();
				csvSettings_tFileOutputDelimited_5.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_5.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_5.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_5 != null
						&& directory_tFileOutputDelimited_5.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_5 = new java.io.File(
							directory_tFileOutputDelimited_5);
					if (!dir_tFileOutputDelimited_5.exists()) {

						dir_tFileOutputDelimited_5.mkdirs();

					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_5 = null;

				java.io.File fileToDelete_tFileOutputDelimited_5 = new java.io.File(
						fileName_tFileOutputDelimited_5);
				if (fileToDelete_tFileOutputDelimited_5.exists()) {
					fileToDelete_tFileOutputDelimited_5.delete();
				}

				CsvWritertFileOutputDelimited_5 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_5,
												false), "UTF-8")));
				CsvWritertFileOutputDelimited_5
						.setSeparator(csvSettings_tFileOutputDelimited_5
								.getFieldDelim());

				if (!csvSettings_tFileOutputDelimited_5
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_5.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_5.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_5.setLineEnd(""
							+ csvSettings_tFileOutputDelimited_5.getRowDelim());
				}

				if (filetFileOutputDelimited_5.length() == 0) {

					headColutFileOutputDelimited_5[0] = "PATIENT_NUM";

					headColutFileOutputDelimited_5[1] = "VITAL_STATUS_CD";

					headColutFileOutputDelimited_5[2] = "BIRTH_DATE";

					headColutFileOutputDelimited_5[3] = "DEATH_DATE";

					headColutFileOutputDelimited_5[4] = "SEX_CD";

					headColutFileOutputDelimited_5[5] = "AGE_IN_YEARS_NUM";

					headColutFileOutputDelimited_5[6] = "LANGUAGE_CD";

					headColutFileOutputDelimited_5[7] = "RACE_CD";

					headColutFileOutputDelimited_5[8] = "MARITAL_STATUS_CD";

					headColutFileOutputDelimited_5[9] = "RELIGION_CD";

					headColutFileOutputDelimited_5[10] = "ZIP_CD";

					headColutFileOutputDelimited_5[11] = "STATECITYZIP_PATH";

					headColutFileOutputDelimited_5[12] = "INCOME_CD";

					headColutFileOutputDelimited_5[13] = "PATIENT_BLOB";

					headColutFileOutputDelimited_5[14] = "UPDATE_DATE";

					headColutFileOutputDelimited_5[15] = "DOWNLOAD_DATE";

					headColutFileOutputDelimited_5[16] = "IMPORT_DATE";

					headColutFileOutputDelimited_5[17] = "SOURCESYSTEM_CD";

					headColutFileOutputDelimited_5[18] = "UPLOAD_ID";

					CsvWritertFileOutputDelimited_5
							.writeNext(headColutFileOutputDelimited_5);
					CsvWritertFileOutputDelimited_5.flush();

				}

				CsvWritertFileOutputDelimited_5
						.setEscapeChar(csvSettings_tFileOutputDelimited_5
								.getEscapeChar());
				CsvWritertFileOutputDelimited_5
						.setQuoteChar(csvSettings_tFileOutputDelimited_5
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_5
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_5",
						CsvWritertFileOutputDelimited_5);

				resourceMap.put("nb_line_tFileOutputDelimited_5",
						nb_line_tFileOutputDelimited_5);

				/**
				 * [tFileOutputDelimited_5 begin ] stop
				 */

				/**
				 * [tJDBCInput_4 begin ] start
				 */

				ok_Hash.put("tJDBCInput_4", false);
				start_Hash.put("tJDBCInput_4", System.currentTimeMillis());

				currentComponent = "tJDBCInput_4";

				int tos_count_tJDBCInput_4 = 0;

				int nb_line_tJDBCInput_4 = 0;
				java.sql.Connection conn_tJDBCInput_4 = null;
				conn_tJDBCInput_4 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_4 = conn_tJDBCInput_4
						.createStatement();

				String dbquery_tJDBCInput_4 = context.currentQuery

				;

				globalMap.put("tJDBCInput_4_QUERY", dbquery_tJDBCInput_4);
				java.sql.ResultSet rs_tJDBCInput_4 = null;
				try {
					rs_tJDBCInput_4 = stmt_tJDBCInput_4
							.executeQuery(dbquery_tJDBCInput_4);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_4 = rs_tJDBCInput_4
							.getMetaData();
					int colQtyInRs_tJDBCInput_4 = rsmd_tJDBCInput_4
							.getColumnCount();

					String tmpContent_tJDBCInput_4 = null;

					while (rs_tJDBCInput_4.next()) {
						nb_line_tJDBCInput_4++;

						if (colQtyInRs_tJDBCInput_4 < 1) {
							row18.PATIENT_NUM = null;
						} else {

							if (rs_tJDBCInput_4.getObject(1) != null) {
								row18.PATIENT_NUM = rs_tJDBCInput_4
										.getBigDecimal(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tJDBCInput_4 < 2) {
							row18.VITAL_STATUS_CD = null;
						} else {

							tmpContent_tJDBCInput_4 = rs_tJDBCInput_4
									.getString(2);
							if (tmpContent_tJDBCInput_4 != null) {
								row18.VITAL_STATUS_CD = tmpContent_tJDBCInput_4;
							} else {
								row18.VITAL_STATUS_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_4 < 3) {
							row18.BIRTH_DATE = null;
						} else {

							tmpContent_tJDBCInput_4 = rs_tJDBCInput_4
									.getString(3);
							if (tmpContent_tJDBCInput_4 != null) {
								row18.BIRTH_DATE = tmpContent_tJDBCInput_4;
							} else {
								row18.BIRTH_DATE = null;
							}
						}
						if (colQtyInRs_tJDBCInput_4 < 4) {
							row18.DEATH_DATE = null;
						} else {

							tmpContent_tJDBCInput_4 = rs_tJDBCInput_4
									.getString(4);
							if (tmpContent_tJDBCInput_4 != null) {
								row18.DEATH_DATE = tmpContent_tJDBCInput_4;
							} else {
								row18.DEATH_DATE = null;
							}
						}
						if (colQtyInRs_tJDBCInput_4 < 5) {
							row18.SEX_CD = null;
						} else {

							tmpContent_tJDBCInput_4 = rs_tJDBCInput_4
									.getString(5);
							if (tmpContent_tJDBCInput_4 != null) {
								row18.SEX_CD = tmpContent_tJDBCInput_4;
							} else {
								row18.SEX_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_4 < 6) {
							row18.AGE_IN_YEARS_NUM = null;
						} else {

							tmpContent_tJDBCInput_4 = rs_tJDBCInput_4
									.getString(6);
							if (tmpContent_tJDBCInput_4 != null) {
								row18.AGE_IN_YEARS_NUM = tmpContent_tJDBCInput_4;
							} else {
								row18.AGE_IN_YEARS_NUM = null;
							}
						}
						if (colQtyInRs_tJDBCInput_4 < 7) {
							row18.LANGUAGE_CD = null;
						} else {

							tmpContent_tJDBCInput_4 = rs_tJDBCInput_4
									.getString(7);
							if (tmpContent_tJDBCInput_4 != null) {
								row18.LANGUAGE_CD = tmpContent_tJDBCInput_4;
							} else {
								row18.LANGUAGE_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_4 < 8) {
							row18.RACE_CD = null;
						} else {

							tmpContent_tJDBCInput_4 = rs_tJDBCInput_4
									.getString(8);
							if (tmpContent_tJDBCInput_4 != null) {
								row18.RACE_CD = tmpContent_tJDBCInput_4;
							} else {
								row18.RACE_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_4 < 9) {
							row18.MARITAL_STATUS_CD = null;
						} else {

							tmpContent_tJDBCInput_4 = rs_tJDBCInput_4
									.getString(9);
							if (tmpContent_tJDBCInput_4 != null) {
								row18.MARITAL_STATUS_CD = tmpContent_tJDBCInput_4;
							} else {
								row18.MARITAL_STATUS_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_4 < 10) {
							row18.RELIGION_CD = null;
						} else {

							tmpContent_tJDBCInput_4 = rs_tJDBCInput_4
									.getString(10);
							if (tmpContent_tJDBCInput_4 != null) {
								row18.RELIGION_CD = tmpContent_tJDBCInput_4;
							} else {
								row18.RELIGION_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_4 < 11) {
							row18.ZIP_CD = null;
						} else {

							tmpContent_tJDBCInput_4 = rs_tJDBCInput_4
									.getString(11);
							if (tmpContent_tJDBCInput_4 != null) {
								row18.ZIP_CD = tmpContent_tJDBCInput_4;
							} else {
								row18.ZIP_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_4 < 12) {
							row18.STATECITYZIP_PATH = null;
						} else {

							tmpContent_tJDBCInput_4 = rs_tJDBCInput_4
									.getString(12);
							if (tmpContent_tJDBCInput_4 != null) {
								row18.STATECITYZIP_PATH = tmpContent_tJDBCInput_4;
							} else {
								row18.STATECITYZIP_PATH = null;
							}
						}
						if (colQtyInRs_tJDBCInput_4 < 13) {
							row18.INCOME_CD = null;
						} else {

							tmpContent_tJDBCInput_4 = rs_tJDBCInput_4
									.getString(13);
							if (tmpContent_tJDBCInput_4 != null) {
								row18.INCOME_CD = tmpContent_tJDBCInput_4;
							} else {
								row18.INCOME_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_4 < 14) {
							row18.PATIENT_BLOB = null;
						} else {

							if (rs_tJDBCInput_4.getObject(14) != null) {
								row18.PATIENT_BLOB = rs_tJDBCInput_4
										.getObject(14);
							} else {
								row18.PATIENT_BLOB = null;
							}
						}
						if (colQtyInRs_tJDBCInput_4 < 15) {
							row18.UPDATE_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_4 = null;
							try {
								date_tJDBCInput_4 = rs_tJDBCInput_4
										.getTimestamp(15);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_4 = rs_tJDBCInput_4.getDate(15);
							}
							row18.UPDATE_DATE = date_tJDBCInput_4;
						}
						if (colQtyInRs_tJDBCInput_4 < 16) {
							row18.DOWNLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_4 = null;
							try {
								date_tJDBCInput_4 = rs_tJDBCInput_4
										.getTimestamp(16);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_4 = rs_tJDBCInput_4.getDate(16);
							}
							row18.DOWNLOAD_DATE = date_tJDBCInput_4;
						}
						if (colQtyInRs_tJDBCInput_4 < 17) {
							row18.IMPORT_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_4 = null;
							try {
								date_tJDBCInput_4 = rs_tJDBCInput_4
										.getTimestamp(17);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_4 = rs_tJDBCInput_4.getDate(17);
							}
							row18.IMPORT_DATE = date_tJDBCInput_4;
						}
						if (colQtyInRs_tJDBCInput_4 < 18) {
							row18.SOURCESYSTEM_CD = null;
						} else {

							tmpContent_tJDBCInput_4 = rs_tJDBCInput_4
									.getString(18);
							if (tmpContent_tJDBCInput_4 != null) {
								row18.SOURCESYSTEM_CD = tmpContent_tJDBCInput_4;
							} else {
								row18.SOURCESYSTEM_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_4 < 19) {
							row18.UPLOAD_ID = null;
						} else {

							tmpContent_tJDBCInput_4 = rs_tJDBCInput_4
									.getString(19);
							if (tmpContent_tJDBCInput_4 != null) {
								row18.UPLOAD_ID = tmpContent_tJDBCInput_4;
							} else {
								row18.UPLOAD_ID = null;
							}
						}

						/**
						 * [tJDBCInput_4 begin ] stop
						 */

						/**
						 * [tJDBCInput_4 main ] start
						 */

						currentComponent = "tJDBCInput_4";

						tos_count_tJDBCInput_4++;

						/**
						 * [tJDBCInput_4 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_5 main ] start
						 */

						currentComponent = "tFileOutputDelimited_5";

						String[] rowtFileOutputDelimited_5 = new String[19];

						rowtFileOutputDelimited_5[0] = row18.PATIENT_NUM == null ? ""
								: row18.PATIENT_NUM.toPlainString();

						rowtFileOutputDelimited_5[1] = row18.VITAL_STATUS_CD == null ? ""
								: row18.VITAL_STATUS_CD;

						rowtFileOutputDelimited_5[2] = row18.BIRTH_DATE == null ? ""
								: row18.BIRTH_DATE;

						rowtFileOutputDelimited_5[3] = row18.DEATH_DATE == null ? ""
								: row18.DEATH_DATE;

						rowtFileOutputDelimited_5[4] = row18.SEX_CD == null ? ""
								: row18.SEX_CD;

						rowtFileOutputDelimited_5[5] = row18.AGE_IN_YEARS_NUM == null ? ""
								: row18.AGE_IN_YEARS_NUM;

						rowtFileOutputDelimited_5[6] = row18.LANGUAGE_CD == null ? ""
								: row18.LANGUAGE_CD;

						rowtFileOutputDelimited_5[7] = row18.RACE_CD == null ? ""
								: row18.RACE_CD;

						rowtFileOutputDelimited_5[8] = row18.MARITAL_STATUS_CD == null ? ""
								: row18.MARITAL_STATUS_CD;

						rowtFileOutputDelimited_5[9] = row18.RELIGION_CD == null ? ""
								: row18.RELIGION_CD;

						rowtFileOutputDelimited_5[10] = row18.ZIP_CD == null ? ""
								: row18.ZIP_CD;

						rowtFileOutputDelimited_5[11] = row18.STATECITYZIP_PATH == null ? ""
								: row18.STATECITYZIP_PATH;

						rowtFileOutputDelimited_5[12] = row18.INCOME_CD == null ? ""
								: row18.INCOME_CD;

						rowtFileOutputDelimited_5[13] = row18.PATIENT_BLOB == null ? ""
								: String.valueOf(row18.PATIENT_BLOB);

						rowtFileOutputDelimited_5[14] = row18.UPDATE_DATE == null ? ""
								: FormatterUtils.format_Date(row18.UPDATE_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_5[15] = row18.DOWNLOAD_DATE == null ? ""
								: FormatterUtils.format_Date(
										row18.DOWNLOAD_DATE, "dd-MM-yyyy");

						rowtFileOutputDelimited_5[16] = row18.IMPORT_DATE == null ? ""
								: FormatterUtils.format_Date(row18.IMPORT_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_5[17] = row18.SOURCESYSTEM_CD == null ? ""
								: row18.SOURCESYSTEM_CD;

						rowtFileOutputDelimited_5[18] = row18.UPLOAD_ID == null ? ""
								: row18.UPLOAD_ID;

						nb_line_tFileOutputDelimited_5++;
						resourceMap.put("nb_line_tFileOutputDelimited_5",
								nb_line_tFileOutputDelimited_5);
						CsvWritertFileOutputDelimited_5
								.writeNext(rowtFileOutputDelimited_5);

						tos_count_tFileOutputDelimited_5++;

						/**
						 * [tFileOutputDelimited_5 main ] stop
						 */

						/**
						 * [tJDBCInput_4 end ] start
						 */

						currentComponent = "tJDBCInput_4";

					}
				} finally {
					if (rs_tJDBCInput_4 != null) {
						rs_tJDBCInput_4.close();
					}
					stmt_tJDBCInput_4.close();

				}
				globalMap.put("tJDBCInput_4_NB_LINE", nb_line_tJDBCInput_4);

				ok_Hash.put("tJDBCInput_4", true);
				end_Hash.put("tJDBCInput_4", System.currentTimeMillis());

				/**
				 * [tJDBCInput_4 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 end ] start
				 */

				currentComponent = "tFileOutputDelimited_5";

				if (CsvWritertFileOutputDelimited_5 != null) {
					CsvWritertFileOutputDelimited_5.close();
				}

				globalMap.put("tFileOutputDelimited_5_NB_LINE",
						nb_line_tFileOutputDelimited_5);

				resourceMap.put("finish_tFileOutputDelimited_5", true);

				ok_Hash.put("tFileOutputDelimited_5", true);
				end_Hash.put("tFileOutputDelimited_5",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_4 finally ] start
				 */

				currentComponent = "tJDBCInput_4";

				/**
				 * [tJDBCInput_4 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_5";

				if (resourceMap.get("finish_tFileOutputDelimited_5") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_5 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_5");

					if (CsvWritertFileOutputDelimited_5 != null) {
						CsvWritertFileOutputDelimited_5.close();
					}

				}

				/**
				 * [tFileOutputDelimited_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_4_SUBPROCESS_STATE", 1);
	}

	public void tJava_26Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_26_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_26 begin ] start
				 */

				ok_Hash.put("tJava_26", false);
				start_Hash.put("tJava_26", System.currentTimeMillis());

				currentComponent = "tJava_26";

				int tos_count_tJava_26 = 0;

				StatusListener.setSubStatus(70,
						"Getting Staging Patient_Dimension...");
				if (context.DB_StagingI2B2_WHType.equalsIgnoreCase("i2b2"))
					// context.currentQuery = "SELECT * FROM  "+
					// context.DB_StagingI2B2_Schema+".patient_dimension";
					context.currentQuery = "select DISTINCT * from "
							+ context.DB_StagingI2B2_Schema
							+ ".PATIENT_DIMENSION where PATIENT_NUM in(select patient_num from "
							+ context.DB_StagingI2B2_Schema
							+ ".OBSERVATION_FACT where modifier_cd in (  select modifier_cd from "
							+ context.DB_StagingI2B2_Schema
							+ ".MODIFIER_DIMENSION where MODIFIER_PATH in     (     select staging_path from "
							+ context.DB_StagingI2B2_Schema
							+ ".IOE_TARGET_ONTOLOGY where TARGET_ID="
							+ context.TargetID + "    )))";
				else {
					context.currentQuery = "SELECT * FROM  i2b2demodata.patient_dimension";

				}

				/**
				 * [tJava_26 begin ] stop
				 */

				/**
				 * [tJava_26 main ] start
				 */

				currentComponent = "tJava_26";

				tos_count_tJava_26++;

				/**
				 * [tJava_26 main ] stop
				 */

				/**
				 * [tJava_26 end ] start
				 */

				currentComponent = "tJava_26";

				ok_Hash.put("tJava_26", true);
				end_Hash.put("tJava_26", System.currentTimeMillis());

				/**
				 * [tJava_26 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_26:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCInput_14Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_26 finally ] start
				 */

				currentComponent = "tJava_26";

				/**
				 * [tJava_26 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_26_SUBPROCESS_STATE", 1);
	}

	public static class row46Struct implements
			routines.system.IPersistableRow<row46Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String VITAL_STATUS_CD;

		public String getVITAL_STATUS_CD() {
			return this.VITAL_STATUS_CD;
		}

		public String BIRTH_DATE;

		public String getBIRTH_DATE() {
			return this.BIRTH_DATE;
		}

		public String DEATH_DATE;

		public String getDEATH_DATE() {
			return this.DEATH_DATE;
		}

		public String SEX_CD;

		public String getSEX_CD() {
			return this.SEX_CD;
		}

		public String AGE_IN_YEARS_NUM;

		public String getAGE_IN_YEARS_NUM() {
			return this.AGE_IN_YEARS_NUM;
		}

		public String LANGUAGE_CD;

		public String getLANGUAGE_CD() {
			return this.LANGUAGE_CD;
		}

		public String RACE_CD;

		public String getRACE_CD() {
			return this.RACE_CD;
		}

		public String MARITAL_STATUS_CD;

		public String getMARITAL_STATUS_CD() {
			return this.MARITAL_STATUS_CD;
		}

		public String RELIGION_CD;

		public String getRELIGION_CD() {
			return this.RELIGION_CD;
		}

		public String ZIP_CD;

		public String getZIP_CD() {
			return this.ZIP_CD;
		}

		public String STATECITYZIP_PATH;

		public String getSTATECITYZIP_PATH() {
			return this.STATECITYZIP_PATH;
		}

		public String INCOME_CD;

		public String getINCOME_CD() {
			return this.INCOME_CD;
		}

		public Object PATIENT_BLOB;

		public Object getPATIENT_BLOB() {
			return this.PATIENT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.VITAL_STATUS_CD = readString(dis);

					this.BIRTH_DATE = readString(dis);

					this.DEATH_DATE = readString(dis);

					this.SEX_CD = readString(dis);

					this.AGE_IN_YEARS_NUM = readString(dis);

					this.LANGUAGE_CD = readString(dis);

					this.RACE_CD = readString(dis);

					this.MARITAL_STATUS_CD = readString(dis);

					this.RELIGION_CD = readString(dis);

					this.ZIP_CD = readString(dis);

					this.STATECITYZIP_PATH = readString(dis);

					this.INCOME_CD = readString(dis);

					this.PATIENT_BLOB = (Object) dis.readObject();

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.VITAL_STATUS_CD, dos);

				// String

				writeString(this.BIRTH_DATE, dos);

				// String

				writeString(this.DEATH_DATE, dos);

				// String

				writeString(this.SEX_CD, dos);

				// String

				writeString(this.AGE_IN_YEARS_NUM, dos);

				// String

				writeString(this.LANGUAGE_CD, dos);

				// String

				writeString(this.RACE_CD, dos);

				// String

				writeString(this.MARITAL_STATUS_CD, dos);

				// String

				writeString(this.RELIGION_CD, dos);

				// String

				writeString(this.ZIP_CD, dos);

				// String

				writeString(this.STATECITYZIP_PATH, dos);

				// String

				writeString(this.INCOME_CD, dos);

				// Object

				dos.writeObject(this.PATIENT_BLOB);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",VITAL_STATUS_CD=" + VITAL_STATUS_CD);
			sb.append(",BIRTH_DATE=" + BIRTH_DATE);
			sb.append(",DEATH_DATE=" + DEATH_DATE);
			sb.append(",SEX_CD=" + SEX_CD);
			sb.append(",AGE_IN_YEARS_NUM=" + AGE_IN_YEARS_NUM);
			sb.append(",LANGUAGE_CD=" + LANGUAGE_CD);
			sb.append(",RACE_CD=" + RACE_CD);
			sb.append(",MARITAL_STATUS_CD=" + MARITAL_STATUS_CD);
			sb.append(",RELIGION_CD=" + RELIGION_CD);
			sb.append(",ZIP_CD=" + ZIP_CD);
			sb.append(",STATECITYZIP_PATH=" + STATECITYZIP_PATH);
			sb.append(",INCOME_CD=" + INCOME_CD);
			sb.append(",PATIENT_BLOB=" + String.valueOf(PATIENT_BLOB));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row46Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_14Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row46Struct row46 = new row46Struct();

				/**
				 * [tFileOutputDelimited_18 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_18", false);
				start_Hash.put("tFileOutputDelimited_18",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_18";

				int tos_count_tFileOutputDelimited_18 = 0;

				String fileName_tFileOutputDelimited_18 = "";
				fileName_tFileOutputDelimited_18 = (new java.io.File(
						context.folderMain + context.folderOutput
								+ "/patient_dimension.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_18 = null;
				String extension_tFileOutputDelimited_18 = null;
				String directory_tFileOutputDelimited_18 = null;
				if ((fileName_tFileOutputDelimited_18.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_18.lastIndexOf(".") < fileName_tFileOutputDelimited_18
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18;
						extension_tFileOutputDelimited_18 = "";
					} else {
						fullName_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18
								.substring(0, fileName_tFileOutputDelimited_18
										.lastIndexOf("."));
						extension_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18
								.substring(fileName_tFileOutputDelimited_18
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18
							.substring(0, fileName_tFileOutputDelimited_18
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_18.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18
								.substring(0, fileName_tFileOutputDelimited_18
										.lastIndexOf("."));
						extension_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18
								.substring(fileName_tFileOutputDelimited_18
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18;
						extension_tFileOutputDelimited_18 = "";
					}
					directory_tFileOutputDelimited_18 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_18 = true;
				java.io.File filetFileOutputDelimited_18 = new java.io.File(
						fileName_tFileOutputDelimited_18);
				globalMap.put("tFileOutputDelimited_18_FILE_NAME",
						fileName_tFileOutputDelimited_18);

				if (filetFileOutputDelimited_18.exists()) {
					isFileGenerated_tFileOutputDelimited_18 = false;
				}

				String[] headColutFileOutputDelimited_18 = new String[19];
				class CSVBasicSet_tFileOutputDelimited_18 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_18[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_18 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_18[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_18[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_18 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_18[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_18[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_18 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_18[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_18 = 0;
				int splitEvery_tFileOutputDelimited_18 = 1000;
				int splitedFileNo_tFileOutputDelimited_18 = 0;
				int currentRow_tFileOutputDelimited_18 = 0;

				CSVBasicSet_tFileOutputDelimited_18 csvSettings_tFileOutputDelimited_18 = new CSVBasicSet_tFileOutputDelimited_18();
				csvSettings_tFileOutputDelimited_18.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_18.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_18.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_18 != null
						&& directory_tFileOutputDelimited_18.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_18 = new java.io.File(
							directory_tFileOutputDelimited_18);
					if (!dir_tFileOutputDelimited_18.exists()) {

						dir_tFileOutputDelimited_18.mkdirs();

					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_18 = null;

				CsvWritertFileOutputDelimited_18 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_18,
												true), "UTF-8")));
				CsvWritertFileOutputDelimited_18
						.setSeparator(csvSettings_tFileOutputDelimited_18
								.getFieldDelim());

				if (!csvSettings_tFileOutputDelimited_18
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_18.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_18.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_18
							.setLineEnd(""
									+ csvSettings_tFileOutputDelimited_18
											.getRowDelim());
				}

				if (filetFileOutputDelimited_18.length() == 0) {

					headColutFileOutputDelimited_18[0] = "PATIENT_NUM";

					headColutFileOutputDelimited_18[1] = "VITAL_STATUS_CD";

					headColutFileOutputDelimited_18[2] = "BIRTH_DATE";

					headColutFileOutputDelimited_18[3] = "DEATH_DATE";

					headColutFileOutputDelimited_18[4] = "SEX_CD";

					headColutFileOutputDelimited_18[5] = "AGE_IN_YEARS_NUM";

					headColutFileOutputDelimited_18[6] = "LANGUAGE_CD";

					headColutFileOutputDelimited_18[7] = "RACE_CD";

					headColutFileOutputDelimited_18[8] = "MARITAL_STATUS_CD";

					headColutFileOutputDelimited_18[9] = "RELIGION_CD";

					headColutFileOutputDelimited_18[10] = "ZIP_CD";

					headColutFileOutputDelimited_18[11] = "STATECITYZIP_PATH";

					headColutFileOutputDelimited_18[12] = "INCOME_CD";

					headColutFileOutputDelimited_18[13] = "PATIENT_BLOB";

					headColutFileOutputDelimited_18[14] = "UPDATE_DATE";

					headColutFileOutputDelimited_18[15] = "DOWNLOAD_DATE";

					headColutFileOutputDelimited_18[16] = "IMPORT_DATE";

					headColutFileOutputDelimited_18[17] = "SOURCESYSTEM_CD";

					headColutFileOutputDelimited_18[18] = "UPLOAD_ID";

					CsvWritertFileOutputDelimited_18
							.writeNext(headColutFileOutputDelimited_18);
					CsvWritertFileOutputDelimited_18.flush();

				}

				CsvWritertFileOutputDelimited_18
						.setEscapeChar(csvSettings_tFileOutputDelimited_18
								.getEscapeChar());
				CsvWritertFileOutputDelimited_18
						.setQuoteChar(csvSettings_tFileOutputDelimited_18
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_18
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_18",
						CsvWritertFileOutputDelimited_18);

				resourceMap.put("nb_line_tFileOutputDelimited_18",
						nb_line_tFileOutputDelimited_18);

				/**
				 * [tFileOutputDelimited_18 begin ] stop
				 */

				/**
				 * [tJDBCInput_14 begin ] start
				 */

				ok_Hash.put("tJDBCInput_14", false);
				start_Hash.put("tJDBCInput_14", System.currentTimeMillis());

				currentComponent = "tJDBCInput_14";

				int tos_count_tJDBCInput_14 = 0;

				int nb_line_tJDBCInput_14 = 0;
				java.sql.Connection conn_tJDBCInput_14 = null;
				conn_tJDBCInput_14 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_14 = conn_tJDBCInput_14
						.createStatement();

				String dbquery_tJDBCInput_14 = context.currentQuery

				;

				globalMap.put("tJDBCInput_14_QUERY", dbquery_tJDBCInput_14);
				java.sql.ResultSet rs_tJDBCInput_14 = null;
				try {
					rs_tJDBCInput_14 = stmt_tJDBCInput_14
							.executeQuery(dbquery_tJDBCInput_14);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_14 = rs_tJDBCInput_14
							.getMetaData();
					int colQtyInRs_tJDBCInput_14 = rsmd_tJDBCInput_14
							.getColumnCount();

					String tmpContent_tJDBCInput_14 = null;

					while (rs_tJDBCInput_14.next()) {
						nb_line_tJDBCInput_14++;

						if (colQtyInRs_tJDBCInput_14 < 1) {
							row46.PATIENT_NUM = null;
						} else {

							if (rs_tJDBCInput_14.getObject(1) != null) {
								row46.PATIENT_NUM = rs_tJDBCInput_14
										.getBigDecimal(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tJDBCInput_14 < 2) {
							row46.VITAL_STATUS_CD = null;
						} else {

							tmpContent_tJDBCInput_14 = rs_tJDBCInput_14
									.getString(2);
							if (tmpContent_tJDBCInput_14 != null) {
								row46.VITAL_STATUS_CD = tmpContent_tJDBCInput_14;
							} else {
								row46.VITAL_STATUS_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_14 < 3) {
							row46.BIRTH_DATE = null;
						} else {

							tmpContent_tJDBCInput_14 = rs_tJDBCInput_14
									.getString(3);
							if (tmpContent_tJDBCInput_14 != null) {
								row46.BIRTH_DATE = tmpContent_tJDBCInput_14;
							} else {
								row46.BIRTH_DATE = null;
							}
						}
						if (colQtyInRs_tJDBCInput_14 < 4) {
							row46.DEATH_DATE = null;
						} else {

							tmpContent_tJDBCInput_14 = rs_tJDBCInput_14
									.getString(4);
							if (tmpContent_tJDBCInput_14 != null) {
								row46.DEATH_DATE = tmpContent_tJDBCInput_14;
							} else {
								row46.DEATH_DATE = null;
							}
						}
						if (colQtyInRs_tJDBCInput_14 < 5) {
							row46.SEX_CD = null;
						} else {

							tmpContent_tJDBCInput_14 = rs_tJDBCInput_14
									.getString(5);
							if (tmpContent_tJDBCInput_14 != null) {
								row46.SEX_CD = tmpContent_tJDBCInput_14;
							} else {
								row46.SEX_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_14 < 6) {
							row46.AGE_IN_YEARS_NUM = null;
						} else {

							tmpContent_tJDBCInput_14 = rs_tJDBCInput_14
									.getString(6);
							if (tmpContent_tJDBCInput_14 != null) {
								row46.AGE_IN_YEARS_NUM = tmpContent_tJDBCInput_14;
							} else {
								row46.AGE_IN_YEARS_NUM = null;
							}
						}
						if (colQtyInRs_tJDBCInput_14 < 7) {
							row46.LANGUAGE_CD = null;
						} else {

							tmpContent_tJDBCInput_14 = rs_tJDBCInput_14
									.getString(7);
							if (tmpContent_tJDBCInput_14 != null) {
								row46.LANGUAGE_CD = tmpContent_tJDBCInput_14;
							} else {
								row46.LANGUAGE_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_14 < 8) {
							row46.RACE_CD = null;
						} else {

							tmpContent_tJDBCInput_14 = rs_tJDBCInput_14
									.getString(8);
							if (tmpContent_tJDBCInput_14 != null) {
								row46.RACE_CD = tmpContent_tJDBCInput_14;
							} else {
								row46.RACE_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_14 < 9) {
							row46.MARITAL_STATUS_CD = null;
						} else {

							tmpContent_tJDBCInput_14 = rs_tJDBCInput_14
									.getString(9);
							if (tmpContent_tJDBCInput_14 != null) {
								row46.MARITAL_STATUS_CD = tmpContent_tJDBCInput_14;
							} else {
								row46.MARITAL_STATUS_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_14 < 10) {
							row46.RELIGION_CD = null;
						} else {

							tmpContent_tJDBCInput_14 = rs_tJDBCInput_14
									.getString(10);
							if (tmpContent_tJDBCInput_14 != null) {
								row46.RELIGION_CD = tmpContent_tJDBCInput_14;
							} else {
								row46.RELIGION_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_14 < 11) {
							row46.ZIP_CD = null;
						} else {

							tmpContent_tJDBCInput_14 = rs_tJDBCInput_14
									.getString(11);
							if (tmpContent_tJDBCInput_14 != null) {
								row46.ZIP_CD = tmpContent_tJDBCInput_14;
							} else {
								row46.ZIP_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_14 < 12) {
							row46.STATECITYZIP_PATH = null;
						} else {

							tmpContent_tJDBCInput_14 = rs_tJDBCInput_14
									.getString(12);
							if (tmpContent_tJDBCInput_14 != null) {
								row46.STATECITYZIP_PATH = tmpContent_tJDBCInput_14;
							} else {
								row46.STATECITYZIP_PATH = null;
							}
						}
						if (colQtyInRs_tJDBCInput_14 < 13) {
							row46.INCOME_CD = null;
						} else {

							tmpContent_tJDBCInput_14 = rs_tJDBCInput_14
									.getString(13);
							if (tmpContent_tJDBCInput_14 != null) {
								row46.INCOME_CD = tmpContent_tJDBCInput_14;
							} else {
								row46.INCOME_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_14 < 14) {
							row46.PATIENT_BLOB = null;
						} else {

							if (rs_tJDBCInput_14.getObject(14) != null) {
								row46.PATIENT_BLOB = rs_tJDBCInput_14
										.getObject(14);
							} else {
								row46.PATIENT_BLOB = null;
							}
						}
						if (colQtyInRs_tJDBCInput_14 < 15) {
							row46.UPDATE_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_14 = null;
							try {
								date_tJDBCInput_14 = rs_tJDBCInput_14
										.getTimestamp(15);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_14 = rs_tJDBCInput_14
										.getDate(15);
							}
							row46.UPDATE_DATE = date_tJDBCInput_14;
						}
						if (colQtyInRs_tJDBCInput_14 < 16) {
							row46.DOWNLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_14 = null;
							try {
								date_tJDBCInput_14 = rs_tJDBCInput_14
										.getTimestamp(16);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_14 = rs_tJDBCInput_14
										.getDate(16);
							}
							row46.DOWNLOAD_DATE = date_tJDBCInput_14;
						}
						if (colQtyInRs_tJDBCInput_14 < 17) {
							row46.IMPORT_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_14 = null;
							try {
								date_tJDBCInput_14 = rs_tJDBCInput_14
										.getTimestamp(17);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_14 = rs_tJDBCInput_14
										.getDate(17);
							}
							row46.IMPORT_DATE = date_tJDBCInput_14;
						}
						if (colQtyInRs_tJDBCInput_14 < 18) {
							row46.SOURCESYSTEM_CD = null;
						} else {

							tmpContent_tJDBCInput_14 = rs_tJDBCInput_14
									.getString(18);
							if (tmpContent_tJDBCInput_14 != null) {
								row46.SOURCESYSTEM_CD = tmpContent_tJDBCInput_14;
							} else {
								row46.SOURCESYSTEM_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_14 < 19) {
							row46.UPLOAD_ID = null;
						} else {

							tmpContent_tJDBCInput_14 = rs_tJDBCInput_14
									.getString(19);
							if (tmpContent_tJDBCInput_14 != null) {
								row46.UPLOAD_ID = tmpContent_tJDBCInput_14;
							} else {
								row46.UPLOAD_ID = null;
							}
						}

						/**
						 * [tJDBCInput_14 begin ] stop
						 */

						/**
						 * [tJDBCInput_14 main ] start
						 */

						currentComponent = "tJDBCInput_14";

						tos_count_tJDBCInput_14++;

						/**
						 * [tJDBCInput_14 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_18 main ] start
						 */

						currentComponent = "tFileOutputDelimited_18";

						String[] rowtFileOutputDelimited_18 = new String[19];

						rowtFileOutputDelimited_18[0] = row46.PATIENT_NUM == null ? ""
								: row46.PATIENT_NUM.toPlainString();

						rowtFileOutputDelimited_18[1] = row46.VITAL_STATUS_CD == null ? ""
								: row46.VITAL_STATUS_CD;

						rowtFileOutputDelimited_18[2] = row46.BIRTH_DATE == null ? ""
								: row46.BIRTH_DATE;

						rowtFileOutputDelimited_18[3] = row46.DEATH_DATE == null ? ""
								: row46.DEATH_DATE;

						rowtFileOutputDelimited_18[4] = row46.SEX_CD == null ? ""
								: row46.SEX_CD;

						rowtFileOutputDelimited_18[5] = row46.AGE_IN_YEARS_NUM == null ? ""
								: row46.AGE_IN_YEARS_NUM;

						rowtFileOutputDelimited_18[6] = row46.LANGUAGE_CD == null ? ""
								: row46.LANGUAGE_CD;

						rowtFileOutputDelimited_18[7] = row46.RACE_CD == null ? ""
								: row46.RACE_CD;

						rowtFileOutputDelimited_18[8] = row46.MARITAL_STATUS_CD == null ? ""
								: row46.MARITAL_STATUS_CD;

						rowtFileOutputDelimited_18[9] = row46.RELIGION_CD == null ? ""
								: row46.RELIGION_CD;

						rowtFileOutputDelimited_18[10] = row46.ZIP_CD == null ? ""
								: row46.ZIP_CD;

						rowtFileOutputDelimited_18[11] = row46.STATECITYZIP_PATH == null ? ""
								: row46.STATECITYZIP_PATH;

						rowtFileOutputDelimited_18[12] = row46.INCOME_CD == null ? ""
								: row46.INCOME_CD;

						rowtFileOutputDelimited_18[13] = row46.PATIENT_BLOB == null ? ""
								: String.valueOf(row46.PATIENT_BLOB);

						rowtFileOutputDelimited_18[14] = row46.UPDATE_DATE == null ? ""
								: FormatterUtils.format_Date(row46.UPDATE_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_18[15] = row46.DOWNLOAD_DATE == null ? ""
								: FormatterUtils.format_Date(
										row46.DOWNLOAD_DATE, "dd-MM-yyyy");

						rowtFileOutputDelimited_18[16] = row46.IMPORT_DATE == null ? ""
								: FormatterUtils.format_Date(row46.IMPORT_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_18[17] = row46.SOURCESYSTEM_CD == null ? ""
								: row46.SOURCESYSTEM_CD;

						rowtFileOutputDelimited_18[18] = row46.UPLOAD_ID == null ? ""
								: row46.UPLOAD_ID;

						nb_line_tFileOutputDelimited_18++;
						resourceMap.put("nb_line_tFileOutputDelimited_18",
								nb_line_tFileOutputDelimited_18);
						CsvWritertFileOutputDelimited_18
								.writeNext(rowtFileOutputDelimited_18);

						tos_count_tFileOutputDelimited_18++;

						/**
						 * [tFileOutputDelimited_18 main ] stop
						 */

						/**
						 * [tJDBCInput_14 end ] start
						 */

						currentComponent = "tJDBCInput_14";

					}
				} finally {
					if (rs_tJDBCInput_14 != null) {
						rs_tJDBCInput_14.close();
					}
					stmt_tJDBCInput_14.close();

				}
				globalMap.put("tJDBCInput_14_NB_LINE", nb_line_tJDBCInput_14);

				ok_Hash.put("tJDBCInput_14", true);
				end_Hash.put("tJDBCInput_14", System.currentTimeMillis());

				/**
				 * [tJDBCInput_14 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_18 end ] start
				 */

				currentComponent = "tFileOutputDelimited_18";

				if (CsvWritertFileOutputDelimited_18 != null) {
					CsvWritertFileOutputDelimited_18.close();
				}

				globalMap.put("tFileOutputDelimited_18_NB_LINE",
						nb_line_tFileOutputDelimited_18);

				resourceMap.put("finish_tFileOutputDelimited_18", true);

				ok_Hash.put("tFileOutputDelimited_18", true);
				end_Hash.put("tFileOutputDelimited_18",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_18 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_14 finally ] start
				 */

				currentComponent = "tJDBCInput_14";

				/**
				 * [tJDBCInput_14 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_18 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_18";

				if (resourceMap.get("finish_tFileOutputDelimited_18") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_18 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_18");

					if (CsvWritertFileOutputDelimited_18 != null) {
						CsvWritertFileOutputDelimited_18.close();
					}

				}

				/**
				 * [tFileOutputDelimited_18 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_14_SUBPROCESS_STATE", 1);
	}

	public void tJava_22Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_22_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_22 begin ] start
				 */

				ok_Hash.put("tJava_22", false);
				start_Hash.put("tJava_22", System.currentTimeMillis());

				currentComponent = "tJava_22";

				int tos_count_tJava_22 = 0;

				StatusListener.setSubStatus(80,
						"Getting Staging Encounter_Mapping...");
				if (context.DB_StagingI2B2_WHType.equalsIgnoreCase("i2b2"))
					context.currentQuery = "SELECT * FROM "
							+ context.DB_StagingI2B2_Schema
							+ ".encounter_mapping";
				else {
					context.currentQuery = "SELECT * FROM i2b2demodata.encounter_mapping";

				}

				/**
				 * [tJava_22 begin ] stop
				 */

				/**
				 * [tJava_22 main ] start
				 */

				currentComponent = "tJava_22";

				tos_count_tJava_22++;

				/**
				 * [tJava_22 main ] stop
				 */

				/**
				 * [tJava_22 end ] start
				 */

				currentComponent = "tJava_22";

				ok_Hash.put("tJava_22", true);
				end_Hash.put("tJava_22", System.currentTimeMillis());

				/**
				 * [tJava_22 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_22:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCInput_10Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_22 finally ] start
				 */

				currentComponent = "tJava_22";

				/**
				 * [tJava_22 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_22_SUBPROCESS_STATE", 1);
	}

	public static class row22Struct implements
			routines.system.IPersistableRow<row22Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String ENCOUNTER_IDE;

		public String getENCOUNTER_IDE() {
			return this.ENCOUNTER_IDE;
		}

		public String ENCOUNTER_IDE_SOURCE;

		public String getENCOUNTER_IDE_SOURCE() {
			return this.ENCOUNTER_IDE_SOURCE;
		}

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public String ENCOUNTER_IDE_STATUS;

		public String getENCOUNTER_IDE_STATUS() {
			return this.ENCOUNTER_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_IDE = readString(dis);

					this.ENCOUNTER_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ENCOUNTER_IDE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_IDE=" + ENCOUNTER_IDE);
			sb.append(",ENCOUNTER_IDE_SOURCE=" + ENCOUNTER_IDE_SOURCE);
			sb.append(",ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",ENCOUNTER_IDE_STATUS=" + ENCOUNTER_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_10Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row22Struct row22 = new row22Struct();

				/**
				 * [tFileOutputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_7", false);
				start_Hash.put("tFileOutputDelimited_7",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_7";

				int tos_count_tFileOutputDelimited_7 = 0;

				String fileName_tFileOutputDelimited_7 = "";
				fileName_tFileOutputDelimited_7 = (new java.io.File(
						context.folderMain + context.folderOutput
								+ "/encounter_mapping.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_7 = null;
				String extension_tFileOutputDelimited_7 = null;
				String directory_tFileOutputDelimited_7 = null;
				if ((fileName_tFileOutputDelimited_7.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_7.lastIndexOf(".") < fileName_tFileOutputDelimited_7
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
						extension_tFileOutputDelimited_7 = "";
					} else {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(0, fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
						extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
							.substring(0, fileName_tFileOutputDelimited_7
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_7.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(0, fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
						extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
						extension_tFileOutputDelimited_7 = "";
					}
					directory_tFileOutputDelimited_7 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_7 = true;
				java.io.File filetFileOutputDelimited_7 = new java.io.File(
						fileName_tFileOutputDelimited_7);
				globalMap.put("tFileOutputDelimited_7_FILE_NAME",
						fileName_tFileOutputDelimited_7);

				String[] headColutFileOutputDelimited_7 = new String[12];
				class CSVBasicSet_tFileOutputDelimited_7 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_7[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_7 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_7[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_7[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_7 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_7[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_7[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_7 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_7[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_7 = 0;
				int splitEvery_tFileOutputDelimited_7 = 1000;
				int splitedFileNo_tFileOutputDelimited_7 = 0;
				int currentRow_tFileOutputDelimited_7 = 0;

				CSVBasicSet_tFileOutputDelimited_7 csvSettings_tFileOutputDelimited_7 = new CSVBasicSet_tFileOutputDelimited_7();
				csvSettings_tFileOutputDelimited_7.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_7.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_7.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_7 != null
						&& directory_tFileOutputDelimited_7.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_7 = new java.io.File(
							directory_tFileOutputDelimited_7);
					if (!dir_tFileOutputDelimited_7.exists()) {

						dir_tFileOutputDelimited_7.mkdirs();

					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_7 = null;

				java.io.File fileToDelete_tFileOutputDelimited_7 = new java.io.File(
						fileName_tFileOutputDelimited_7);
				if (fileToDelete_tFileOutputDelimited_7.exists()) {
					fileToDelete_tFileOutputDelimited_7.delete();
				}

				CsvWritertFileOutputDelimited_7 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_7,
												false), "UTF-8")));
				CsvWritertFileOutputDelimited_7
						.setSeparator(csvSettings_tFileOutputDelimited_7
								.getFieldDelim());

				if (!csvSettings_tFileOutputDelimited_7
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_7.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_7.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_7.setLineEnd(""
							+ csvSettings_tFileOutputDelimited_7.getRowDelim());
				}

				if (filetFileOutputDelimited_7.length() == 0) {

					headColutFileOutputDelimited_7[0] = "ENCOUNTER_IDE";

					headColutFileOutputDelimited_7[1] = "ENCOUNTER_IDE_SOURCE";

					headColutFileOutputDelimited_7[2] = "ENCOUNTER_NUM";

					headColutFileOutputDelimited_7[3] = "PATIENT_IDE";

					headColutFileOutputDelimited_7[4] = "PATIENT_IDE_SOURCE";

					headColutFileOutputDelimited_7[5] = "ENCOUNTER_IDE_STATUS";

					headColutFileOutputDelimited_7[6] = "UPLOAD_DATE";

					headColutFileOutputDelimited_7[7] = "UPDATE_DATE";

					headColutFileOutputDelimited_7[8] = "DOWNLOAD_DATE";

					headColutFileOutputDelimited_7[9] = "IMPORT_DATE";

					headColutFileOutputDelimited_7[10] = "SOURCESYSTEM_CD";

					headColutFileOutputDelimited_7[11] = "UPLOAD_ID";

					CsvWritertFileOutputDelimited_7
							.writeNext(headColutFileOutputDelimited_7);
					CsvWritertFileOutputDelimited_7.flush();

				}

				CsvWritertFileOutputDelimited_7
						.setEscapeChar(csvSettings_tFileOutputDelimited_7
								.getEscapeChar());
				CsvWritertFileOutputDelimited_7
						.setQuoteChar(csvSettings_tFileOutputDelimited_7
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_7
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_7",
						CsvWritertFileOutputDelimited_7);

				resourceMap.put("nb_line_tFileOutputDelimited_7",
						nb_line_tFileOutputDelimited_7);

				/**
				 * [tFileOutputDelimited_7 begin ] stop
				 */

				/**
				 * [tJDBCInput_10 begin ] start
				 */

				ok_Hash.put("tJDBCInput_10", false);
				start_Hash.put("tJDBCInput_10", System.currentTimeMillis());

				currentComponent = "tJDBCInput_10";

				int tos_count_tJDBCInput_10 = 0;

				int nb_line_tJDBCInput_10 = 0;
				java.sql.Connection conn_tJDBCInput_10 = null;
				conn_tJDBCInput_10 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_10 = conn_tJDBCInput_10
						.createStatement();

				String dbquery_tJDBCInput_10 = context.currentQuery;

				globalMap.put("tJDBCInput_10_QUERY", dbquery_tJDBCInput_10);
				java.sql.ResultSet rs_tJDBCInput_10 = null;
				try {
					rs_tJDBCInput_10 = stmt_tJDBCInput_10
							.executeQuery(dbquery_tJDBCInput_10);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_10 = rs_tJDBCInput_10
							.getMetaData();
					int colQtyInRs_tJDBCInput_10 = rsmd_tJDBCInput_10
							.getColumnCount();

					String tmpContent_tJDBCInput_10 = null;

					while (rs_tJDBCInput_10.next()) {
						nb_line_tJDBCInput_10++;

						if (colQtyInRs_tJDBCInput_10 < 1) {
							row22.ENCOUNTER_IDE = null;
						} else {

							tmpContent_tJDBCInput_10 = rs_tJDBCInput_10
									.getString(1);
							if (tmpContent_tJDBCInput_10 != null) {
								row22.ENCOUNTER_IDE = tmpContent_tJDBCInput_10;
							} else {
								row22.ENCOUNTER_IDE = null;
							}
						}
						if (colQtyInRs_tJDBCInput_10 < 2) {
							row22.ENCOUNTER_IDE_SOURCE = null;
						} else {

							tmpContent_tJDBCInput_10 = rs_tJDBCInput_10
									.getString(2);
							if (tmpContent_tJDBCInput_10 != null) {
								row22.ENCOUNTER_IDE_SOURCE = tmpContent_tJDBCInput_10;
							} else {
								row22.ENCOUNTER_IDE_SOURCE = null;
							}
						}
						if (colQtyInRs_tJDBCInput_10 < 3) {
							row22.ENCOUNTER_NUM = null;
						} else {

							if (rs_tJDBCInput_10.getObject(3) != null) {
								row22.ENCOUNTER_NUM = rs_tJDBCInput_10
										.getBigDecimal(3);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tJDBCInput_10 < 4) {
							row22.PATIENT_IDE = null;
						} else {

							tmpContent_tJDBCInput_10 = rs_tJDBCInput_10
									.getString(4);
							if (tmpContent_tJDBCInput_10 != null) {
								row22.PATIENT_IDE = tmpContent_tJDBCInput_10;
							} else {
								row22.PATIENT_IDE = null;
							}
						}
						if (colQtyInRs_tJDBCInput_10 < 5) {
							row22.PATIENT_IDE_SOURCE = null;
						} else {

							tmpContent_tJDBCInput_10 = rs_tJDBCInput_10
									.getString(5);
							if (tmpContent_tJDBCInput_10 != null) {
								row22.PATIENT_IDE_SOURCE = tmpContent_tJDBCInput_10;
							} else {
								row22.PATIENT_IDE_SOURCE = null;
							}
						}
						if (colQtyInRs_tJDBCInput_10 < 6) {
							row22.ENCOUNTER_IDE_STATUS = null;
						} else {

							tmpContent_tJDBCInput_10 = rs_tJDBCInput_10
									.getString(6);
							if (tmpContent_tJDBCInput_10 != null) {
								row22.ENCOUNTER_IDE_STATUS = tmpContent_tJDBCInput_10;
							} else {
								row22.ENCOUNTER_IDE_STATUS = null;
							}
						}
						if (colQtyInRs_tJDBCInput_10 < 7) {
							row22.UPLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_10 = null;
							try {
								date_tJDBCInput_10 = rs_tJDBCInput_10
										.getTimestamp(7);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_10 = rs_tJDBCInput_10
										.getDate(7);
							}
							row22.UPLOAD_DATE = date_tJDBCInput_10;
						}
						if (colQtyInRs_tJDBCInput_10 < 8) {
							row22.UPDATE_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_10 = null;
							try {
								date_tJDBCInput_10 = rs_tJDBCInput_10
										.getTimestamp(8);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_10 = rs_tJDBCInput_10
										.getDate(8);
							}
							row22.UPDATE_DATE = date_tJDBCInput_10;
						}
						if (colQtyInRs_tJDBCInput_10 < 9) {
							row22.DOWNLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_10 = null;
							try {
								date_tJDBCInput_10 = rs_tJDBCInput_10
										.getTimestamp(9);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_10 = rs_tJDBCInput_10
										.getDate(9);
							}
							row22.DOWNLOAD_DATE = date_tJDBCInput_10;
						}
						if (colQtyInRs_tJDBCInput_10 < 10) {
							row22.IMPORT_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_10 = null;
							try {
								date_tJDBCInput_10 = rs_tJDBCInput_10
										.getTimestamp(10);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_10 = rs_tJDBCInput_10
										.getDate(10);
							}
							row22.IMPORT_DATE = date_tJDBCInput_10;
						}
						if (colQtyInRs_tJDBCInput_10 < 11) {
							row22.SOURCESYSTEM_CD = null;
						} else {

							tmpContent_tJDBCInput_10 = rs_tJDBCInput_10
									.getString(11);
							if (tmpContent_tJDBCInput_10 != null) {
								row22.SOURCESYSTEM_CD = tmpContent_tJDBCInput_10;
							} else {
								row22.SOURCESYSTEM_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_10 < 12) {
							row22.UPLOAD_ID = null;
						} else {

							tmpContent_tJDBCInput_10 = rs_tJDBCInput_10
									.getString(12);
							if (tmpContent_tJDBCInput_10 != null) {
								row22.UPLOAD_ID = tmpContent_tJDBCInput_10;
							} else {
								row22.UPLOAD_ID = null;
							}
						}

						/**
						 * [tJDBCInput_10 begin ] stop
						 */

						/**
						 * [tJDBCInput_10 main ] start
						 */

						currentComponent = "tJDBCInput_10";

						tos_count_tJDBCInput_10++;

						/**
						 * [tJDBCInput_10 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_7 main ] start
						 */

						currentComponent = "tFileOutputDelimited_7";

						String[] rowtFileOutputDelimited_7 = new String[12];

						rowtFileOutputDelimited_7[0] = row22.ENCOUNTER_IDE == null ? ""
								: row22.ENCOUNTER_IDE;

						rowtFileOutputDelimited_7[1] = row22.ENCOUNTER_IDE_SOURCE == null ? ""
								: row22.ENCOUNTER_IDE_SOURCE;

						rowtFileOutputDelimited_7[2] = row22.ENCOUNTER_NUM == null ? ""
								: row22.ENCOUNTER_NUM.toPlainString();

						rowtFileOutputDelimited_7[3] = row22.PATIENT_IDE == null ? ""
								: row22.PATIENT_IDE;

						rowtFileOutputDelimited_7[4] = row22.PATIENT_IDE_SOURCE == null ? ""
								: row22.PATIENT_IDE_SOURCE;

						rowtFileOutputDelimited_7[5] = row22.ENCOUNTER_IDE_STATUS == null ? ""
								: row22.ENCOUNTER_IDE_STATUS;

						rowtFileOutputDelimited_7[6] = row22.UPLOAD_DATE == null ? ""
								: FormatterUtils.format_Date(row22.UPLOAD_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_7[7] = row22.UPDATE_DATE == null ? ""
								: FormatterUtils.format_Date(row22.UPDATE_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_7[8] = row22.DOWNLOAD_DATE == null ? ""
								: FormatterUtils.format_Date(
										row22.DOWNLOAD_DATE, "dd-MM-yyyy");

						rowtFileOutputDelimited_7[9] = row22.IMPORT_DATE == null ? ""
								: FormatterUtils.format_Date(row22.IMPORT_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_7[10] = row22.SOURCESYSTEM_CD == null ? ""
								: row22.SOURCESYSTEM_CD;

						rowtFileOutputDelimited_7[11] = row22.UPLOAD_ID == null ? ""
								: row22.UPLOAD_ID;

						nb_line_tFileOutputDelimited_7++;
						resourceMap.put("nb_line_tFileOutputDelimited_7",
								nb_line_tFileOutputDelimited_7);
						CsvWritertFileOutputDelimited_7
								.writeNext(rowtFileOutputDelimited_7);

						tos_count_tFileOutputDelimited_7++;

						/**
						 * [tFileOutputDelimited_7 main ] stop
						 */

						/**
						 * [tJDBCInput_10 end ] start
						 */

						currentComponent = "tJDBCInput_10";

					}
				} finally {
					if (rs_tJDBCInput_10 != null) {
						rs_tJDBCInput_10.close();
					}
					stmt_tJDBCInput_10.close();

				}
				globalMap.put("tJDBCInput_10_NB_LINE", nb_line_tJDBCInput_10);

				ok_Hash.put("tJDBCInput_10", true);
				end_Hash.put("tJDBCInput_10", System.currentTimeMillis());

				/**
				 * [tJDBCInput_10 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_7 end ] start
				 */

				currentComponent = "tFileOutputDelimited_7";

				if (CsvWritertFileOutputDelimited_7 != null) {
					CsvWritertFileOutputDelimited_7.close();
				}

				globalMap.put("tFileOutputDelimited_7_NB_LINE",
						nb_line_tFileOutputDelimited_7);

				resourceMap.put("finish_tFileOutputDelimited_7", true);

				ok_Hash.put("tFileOutputDelimited_7", true);
				end_Hash.put("tFileOutputDelimited_7",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_10 finally ] start
				 */

				currentComponent = "tJDBCInput_10";

				/**
				 * [tJDBCInput_10 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_7 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_7";

				if (resourceMap.get("finish_tFileOutputDelimited_7") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_7 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_7");

					if (CsvWritertFileOutputDelimited_7 != null) {
						CsvWritertFileOutputDelimited_7.close();
					}

				}

				/**
				 * [tFileOutputDelimited_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_10_SUBPROCESS_STATE", 1);
	}

	public void tJava_23Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_23_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_23 begin ] start
				 */

				ok_Hash.put("tJava_23", false);
				start_Hash.put("tJava_23", System.currentTimeMillis());

				currentComponent = "tJava_23";

				int tos_count_tJava_23 = 0;

				StatusListener.setSubStatus(90,
						"Getting Staging Visit_Dimension...");
				if (context.DB_StagingI2B2_WHType.equalsIgnoreCase("i2b2"))
					context.currentQuery = "SELECT * FROM "
							+ context.DB_StagingI2B2_Schema
							+ ".visit_dimension";
				else {
					context.currentQuery = "SELECT * FROM i2b2demodata.visit_dimension";

				}

				/**
				 * [tJava_23 begin ] stop
				 */

				/**
				 * [tJava_23 main ] start
				 */

				currentComponent = "tJava_23";

				tos_count_tJava_23++;

				/**
				 * [tJava_23 main ] stop
				 */

				/**
				 * [tJava_23 end ] start
				 */

				currentComponent = "tJava_23";

				ok_Hash.put("tJava_23", true);
				end_Hash.put("tJava_23", System.currentTimeMillis());

				/**
				 * [tJava_23 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_23:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCInput_11Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_23 finally ] start
				 */

				currentComponent = "tJava_23";

				/**
				 * [tJava_23 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_23_SUBPROCESS_STATE", 1);
	}

	public static class row23Struct implements
			routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String ACTIVE_STATUS_CD;

		public String getACTIVE_STATUS_CD() {
			return this.ACTIVE_STATUS_CD;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String INOUT_CD;

		public String getINOUT_CD() {
			return this.INOUT_CD;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String LOCATION_PATH;

		public String getLOCATION_PATH() {
			return this.LOCATION_PATH;
		}

		public Integer LENGTH_OF_STAY;

		public Integer getLENGTH_OF_STAY() {
			return this.LENGTH_OF_STAY;
		}

		public String VISIT_BLOB;

		public String getVISIT_BLOB() {
			return this.VISIT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.ACTIVE_STATUS_CD = readString(dis);

					this.START_DATE = readDate(dis);

					this.END_DATE = readDate(dis);

					this.INOUT_CD = readString(dis);

					this.LOCATION_CD = readString(dis);

					this.LOCATION_PATH = readString(dis);

					this.LENGTH_OF_STAY = readInteger(dis);

					this.VISIT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.ACTIVE_STATUS_CD, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.INOUT_CD, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.LOCATION_PATH, dos);

				// Integer

				writeInteger(this.LENGTH_OF_STAY, dos);

				// String

				writeString(this.VISIT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",ACTIVE_STATUS_CD=" + ACTIVE_STATUS_CD);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",INOUT_CD=" + INOUT_CD);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",LOCATION_PATH=" + LOCATION_PATH);
			sb.append(",LENGTH_OF_STAY=" + String.valueOf(LENGTH_OF_STAY));
			sb.append(",VISIT_BLOB=" + VISIT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_11Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row23Struct row23 = new row23Struct();

				/**
				 * [tFileOutputDelimited_12 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_12", false);
				start_Hash.put("tFileOutputDelimited_12",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_12";

				int tos_count_tFileOutputDelimited_12 = 0;

				String fileName_tFileOutputDelimited_12 = "";
				fileName_tFileOutputDelimited_12 = (new java.io.File(
						context.folderMain + context.folderOutput
								+ "/visit_dimension.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_12 = null;
				String extension_tFileOutputDelimited_12 = null;
				String directory_tFileOutputDelimited_12 = null;
				if ((fileName_tFileOutputDelimited_12.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_12.lastIndexOf(".") < fileName_tFileOutputDelimited_12
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12;
						extension_tFileOutputDelimited_12 = "";
					} else {
						fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12
								.substring(0, fileName_tFileOutputDelimited_12
										.lastIndexOf("."));
						extension_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12
								.substring(fileName_tFileOutputDelimited_12
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12
							.substring(0, fileName_tFileOutputDelimited_12
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_12.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12
								.substring(0, fileName_tFileOutputDelimited_12
										.lastIndexOf("."));
						extension_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12
								.substring(fileName_tFileOutputDelimited_12
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12;
						extension_tFileOutputDelimited_12 = "";
					}
					directory_tFileOutputDelimited_12 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_12 = true;
				java.io.File filetFileOutputDelimited_12 = new java.io.File(
						fileName_tFileOutputDelimited_12);
				globalMap.put("tFileOutputDelimited_12_FILE_NAME",
						fileName_tFileOutputDelimited_12);

				String[] headColutFileOutputDelimited_12 = new String[15];
				class CSVBasicSet_tFileOutputDelimited_12 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_12[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_12 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_12[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_12[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_12 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_12[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_12[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_12 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_12[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_12 = 0;
				int splitEvery_tFileOutputDelimited_12 = 1000;
				int splitedFileNo_tFileOutputDelimited_12 = 0;
				int currentRow_tFileOutputDelimited_12 = 0;

				CSVBasicSet_tFileOutputDelimited_12 csvSettings_tFileOutputDelimited_12 = new CSVBasicSet_tFileOutputDelimited_12();
				csvSettings_tFileOutputDelimited_12.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_12.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_12.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_12 != null
						&& directory_tFileOutputDelimited_12.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_12 = new java.io.File(
							directory_tFileOutputDelimited_12);
					if (!dir_tFileOutputDelimited_12.exists()) {

						dir_tFileOutputDelimited_12.mkdirs();

					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_12 = null;

				java.io.File fileToDelete_tFileOutputDelimited_12 = new java.io.File(
						fileName_tFileOutputDelimited_12);
				if (fileToDelete_tFileOutputDelimited_12.exists()) {
					fileToDelete_tFileOutputDelimited_12.delete();
				}

				CsvWritertFileOutputDelimited_12 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_12,
												false), "UTF-8")));
				CsvWritertFileOutputDelimited_12
						.setSeparator(csvSettings_tFileOutputDelimited_12
								.getFieldDelim());

				if (!csvSettings_tFileOutputDelimited_12
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_12.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_12.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_12
							.setLineEnd(""
									+ csvSettings_tFileOutputDelimited_12
											.getRowDelim());
				}

				if (filetFileOutputDelimited_12.length() == 0) {

					headColutFileOutputDelimited_12[0] = "ENCOUNTER_NUM";

					headColutFileOutputDelimited_12[1] = "PATIENT_NUM";

					headColutFileOutputDelimited_12[2] = "ACTIVE_STATUS_CD";

					headColutFileOutputDelimited_12[3] = "START_DATE";

					headColutFileOutputDelimited_12[4] = "END_DATE";

					headColutFileOutputDelimited_12[5] = "INOUT_CD";

					headColutFileOutputDelimited_12[6] = "LOCATION_CD";

					headColutFileOutputDelimited_12[7] = "LOCATION_PATH";

					headColutFileOutputDelimited_12[8] = "LENGTH_OF_STAY";

					headColutFileOutputDelimited_12[9] = "VISIT_BLOB";

					headColutFileOutputDelimited_12[10] = "UPDATE_DATE";

					headColutFileOutputDelimited_12[11] = "DOWNLOAD_DATE";

					headColutFileOutputDelimited_12[12] = "IMPORT_DATE";

					headColutFileOutputDelimited_12[13] = "SOURCESYSTEM_CD";

					headColutFileOutputDelimited_12[14] = "UPLOAD_ID";

					CsvWritertFileOutputDelimited_12
							.writeNext(headColutFileOutputDelimited_12);
					CsvWritertFileOutputDelimited_12.flush();

				}

				CsvWritertFileOutputDelimited_12
						.setEscapeChar(csvSettings_tFileOutputDelimited_12
								.getEscapeChar());
				CsvWritertFileOutputDelimited_12
						.setQuoteChar(csvSettings_tFileOutputDelimited_12
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_12
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_12",
						CsvWritertFileOutputDelimited_12);

				resourceMap.put("nb_line_tFileOutputDelimited_12",
						nb_line_tFileOutputDelimited_12);

				/**
				 * [tFileOutputDelimited_12 begin ] stop
				 */

				/**
				 * [tJDBCInput_11 begin ] start
				 */

				ok_Hash.put("tJDBCInput_11", false);
				start_Hash.put("tJDBCInput_11", System.currentTimeMillis());

				currentComponent = "tJDBCInput_11";

				int tos_count_tJDBCInput_11 = 0;

				int nb_line_tJDBCInput_11 = 0;
				java.sql.Connection conn_tJDBCInput_11 = null;
				conn_tJDBCInput_11 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_11 = conn_tJDBCInput_11
						.createStatement();

				String dbquery_tJDBCInput_11 = context.currentQuery;

				globalMap.put("tJDBCInput_11_QUERY", dbquery_tJDBCInput_11);
				java.sql.ResultSet rs_tJDBCInput_11 = null;
				try {
					rs_tJDBCInput_11 = stmt_tJDBCInput_11
							.executeQuery(dbquery_tJDBCInput_11);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_11 = rs_tJDBCInput_11
							.getMetaData();
					int colQtyInRs_tJDBCInput_11 = rsmd_tJDBCInput_11
							.getColumnCount();

					String tmpContent_tJDBCInput_11 = null;

					while (rs_tJDBCInput_11.next()) {
						nb_line_tJDBCInput_11++;

						if (colQtyInRs_tJDBCInput_11 < 1) {
							row23.ENCOUNTER_NUM = null;
						} else {

							if (rs_tJDBCInput_11.getObject(1) != null) {
								row23.ENCOUNTER_NUM = rs_tJDBCInput_11
										.getBigDecimal(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tJDBCInput_11 < 2) {
							row23.PATIENT_NUM = null;
						} else {

							if (rs_tJDBCInput_11.getObject(2) != null) {
								row23.PATIENT_NUM = rs_tJDBCInput_11
										.getBigDecimal(2);
							} else {
								row23.PATIENT_NUM = null;
							}
						}
						if (colQtyInRs_tJDBCInput_11 < 3) {
							row23.ACTIVE_STATUS_CD = null;
						} else {

							tmpContent_tJDBCInput_11 = rs_tJDBCInput_11
									.getString(3);
							if (tmpContent_tJDBCInput_11 != null) {
								row23.ACTIVE_STATUS_CD = tmpContent_tJDBCInput_11;
							} else {
								row23.ACTIVE_STATUS_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_11 < 4) {
							row23.START_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_11 = null;
							try {
								date_tJDBCInput_11 = rs_tJDBCInput_11
										.getTimestamp(4);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_11 = rs_tJDBCInput_11
										.getDate(4);
							}
							row23.START_DATE = date_tJDBCInput_11;
						}
						if (colQtyInRs_tJDBCInput_11 < 5) {
							row23.END_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_11 = null;
							try {
								date_tJDBCInput_11 = rs_tJDBCInput_11
										.getTimestamp(5);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_11 = rs_tJDBCInput_11
										.getDate(5);
							}
							row23.END_DATE = date_tJDBCInput_11;
						}
						if (colQtyInRs_tJDBCInput_11 < 6) {
							row23.INOUT_CD = null;
						} else {

							tmpContent_tJDBCInput_11 = rs_tJDBCInput_11
									.getString(6);
							if (tmpContent_tJDBCInput_11 != null) {
								row23.INOUT_CD = tmpContent_tJDBCInput_11;
							} else {
								row23.INOUT_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_11 < 7) {
							row23.LOCATION_CD = null;
						} else {

							tmpContent_tJDBCInput_11 = rs_tJDBCInput_11
									.getString(7);
							if (tmpContent_tJDBCInput_11 != null) {
								row23.LOCATION_CD = tmpContent_tJDBCInput_11;
							} else {
								row23.LOCATION_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_11 < 8) {
							row23.LOCATION_PATH = null;
						} else {

							tmpContent_tJDBCInput_11 = rs_tJDBCInput_11
									.getString(8);
							if (tmpContent_tJDBCInput_11 != null) {
								row23.LOCATION_PATH = tmpContent_tJDBCInput_11;
							} else {
								row23.LOCATION_PATH = null;
							}
						}
						if (colQtyInRs_tJDBCInput_11 < 9) {
							row23.LENGTH_OF_STAY = null;
						} else {

							if (rs_tJDBCInput_11.getObject(9) != null) {
								row23.LENGTH_OF_STAY = rs_tJDBCInput_11
										.getInt(9);
							} else {
								row23.LENGTH_OF_STAY = null;
							}
						}
						if (colQtyInRs_tJDBCInput_11 < 10) {
							row23.VISIT_BLOB = null;
						} else {

							tmpContent_tJDBCInput_11 = rs_tJDBCInput_11
									.getString(10);
							if (tmpContent_tJDBCInput_11 != null) {
								row23.VISIT_BLOB = tmpContent_tJDBCInput_11;
							} else {
								row23.VISIT_BLOB = null;
							}
						}
						if (colQtyInRs_tJDBCInput_11 < 11) {
							row23.UPDATE_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_11 = null;
							try {
								date_tJDBCInput_11 = rs_tJDBCInput_11
										.getTimestamp(11);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_11 = rs_tJDBCInput_11
										.getDate(11);
							}
							row23.UPDATE_DATE = date_tJDBCInput_11;
						}
						if (colQtyInRs_tJDBCInput_11 < 12) {
							row23.DOWNLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_11 = null;
							try {
								date_tJDBCInput_11 = rs_tJDBCInput_11
										.getTimestamp(12);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_11 = rs_tJDBCInput_11
										.getDate(12);
							}
							row23.DOWNLOAD_DATE = date_tJDBCInput_11;
						}
						if (colQtyInRs_tJDBCInput_11 < 13) {
							row23.IMPORT_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_11 = null;
							try {
								date_tJDBCInput_11 = rs_tJDBCInput_11
										.getTimestamp(13);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_11 = rs_tJDBCInput_11
										.getDate(13);
							}
							row23.IMPORT_DATE = date_tJDBCInput_11;
						}
						if (colQtyInRs_tJDBCInput_11 < 14) {
							row23.SOURCESYSTEM_CD = null;
						} else {

							tmpContent_tJDBCInput_11 = rs_tJDBCInput_11
									.getString(14);
							if (tmpContent_tJDBCInput_11 != null) {
								row23.SOURCESYSTEM_CD = tmpContent_tJDBCInput_11;
							} else {
								row23.SOURCESYSTEM_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_11 < 15) {
							row23.UPLOAD_ID = null;
						} else {

							tmpContent_tJDBCInput_11 = rs_tJDBCInput_11
									.getString(15);
							if (tmpContent_tJDBCInput_11 != null) {
								row23.UPLOAD_ID = tmpContent_tJDBCInput_11;
							} else {
								row23.UPLOAD_ID = null;
							}
						}

						/**
						 * [tJDBCInput_11 begin ] stop
						 */

						/**
						 * [tJDBCInput_11 main ] start
						 */

						currentComponent = "tJDBCInput_11";

						tos_count_tJDBCInput_11++;

						/**
						 * [tJDBCInput_11 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_12 main ] start
						 */

						currentComponent = "tFileOutputDelimited_12";

						String[] rowtFileOutputDelimited_12 = new String[15];

						rowtFileOutputDelimited_12[0] = row23.ENCOUNTER_NUM == null ? ""
								: row23.ENCOUNTER_NUM.toPlainString();

						rowtFileOutputDelimited_12[1] = row23.PATIENT_NUM == null ? ""
								: row23.PATIENT_NUM.toPlainString();

						rowtFileOutputDelimited_12[2] = row23.ACTIVE_STATUS_CD == null ? ""
								: row23.ACTIVE_STATUS_CD;

						rowtFileOutputDelimited_12[3] = row23.START_DATE == null ? ""
								: FormatterUtils.format_Date(row23.START_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_12[4] = row23.END_DATE == null ? ""
								: FormatterUtils.format_Date(row23.END_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_12[5] = row23.INOUT_CD == null ? ""
								: row23.INOUT_CD;

						rowtFileOutputDelimited_12[6] = row23.LOCATION_CD == null ? ""
								: row23.LOCATION_CD;

						rowtFileOutputDelimited_12[7] = row23.LOCATION_PATH == null ? ""
								: row23.LOCATION_PATH;

						rowtFileOutputDelimited_12[8] = row23.LENGTH_OF_STAY == null ? ""
								: String.valueOf(row23.LENGTH_OF_STAY);

						rowtFileOutputDelimited_12[9] = row23.VISIT_BLOB == null ? ""
								: row23.VISIT_BLOB;

						rowtFileOutputDelimited_12[10] = row23.UPDATE_DATE == null ? ""
								: FormatterUtils.format_Date(row23.UPDATE_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_12[11] = row23.DOWNLOAD_DATE == null ? ""
								: FormatterUtils.format_Date(
										row23.DOWNLOAD_DATE, "dd-MM-yyyy");

						rowtFileOutputDelimited_12[12] = row23.IMPORT_DATE == null ? ""
								: FormatterUtils.format_Date(row23.IMPORT_DATE,
										"dd-MM-yyyy");

						rowtFileOutputDelimited_12[13] = row23.SOURCESYSTEM_CD == null ? ""
								: row23.SOURCESYSTEM_CD;

						rowtFileOutputDelimited_12[14] = row23.UPLOAD_ID == null ? ""
								: row23.UPLOAD_ID;

						nb_line_tFileOutputDelimited_12++;
						resourceMap.put("nb_line_tFileOutputDelimited_12",
								nb_line_tFileOutputDelimited_12);
						CsvWritertFileOutputDelimited_12
								.writeNext(rowtFileOutputDelimited_12);

						tos_count_tFileOutputDelimited_12++;

						/**
						 * [tFileOutputDelimited_12 main ] stop
						 */

						/**
						 * [tJDBCInput_11 end ] start
						 */

						currentComponent = "tJDBCInput_11";

					}
				} finally {
					if (rs_tJDBCInput_11 != null) {
						rs_tJDBCInput_11.close();
					}
					stmt_tJDBCInput_11.close();

				}
				globalMap.put("tJDBCInput_11_NB_LINE", nb_line_tJDBCInput_11);

				ok_Hash.put("tJDBCInput_11", true);
				end_Hash.put("tJDBCInput_11", System.currentTimeMillis());

				/**
				 * [tJDBCInput_11 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_12 end ] start
				 */

				currentComponent = "tFileOutputDelimited_12";

				if (CsvWritertFileOutputDelimited_12 != null) {
					CsvWritertFileOutputDelimited_12.close();
				}

				globalMap.put("tFileOutputDelimited_12_NB_LINE",
						nb_line_tFileOutputDelimited_12);

				resourceMap.put("finish_tFileOutputDelimited_12", true);

				ok_Hash.put("tFileOutputDelimited_12", true);
				end_Hash.put("tFileOutputDelimited_12",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_12 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_11 finally ] start
				 */

				currentComponent = "tJDBCInput_11";

				/**
				 * [tJDBCInput_11 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_12 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_12";

				if (resourceMap.get("finish_tFileOutputDelimited_12") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_12 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_12");

					if (CsvWritertFileOutputDelimited_12 != null) {
						CsvWritertFileOutputDelimited_12.close();
					}

				}

				/**
				 * [tFileOutputDelimited_12 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_11_SUBPROCESS_STATE", 1);
	}

	public void tJava_13Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_13 begin ] start
				 */

				ok_Hash.put("tJava_13", false);
				start_Hash.put("tJava_13", System.currentTimeMillis());

				currentComponent = "tJava_13";

				int tos_count_tJava_13 = 0;

				System.out.println("Extracting Source Data...");
				StatusListener.setStatus(30, "Transforming Staging to Target",
						"");
				StatusListener.setSubStatus(0, null);

				/**
				 * [tJava_13 begin ] stop
				 */

				/**
				 * [tJava_13 main ] start
				 */

				currentComponent = "tJava_13";

				tos_count_tJava_13++;

				/**
				 * [tJava_13 main ] stop
				 */

				/**
				 * [tJava_13 end ] start
				 */

				currentComponent = "tJava_13";

				ok_Hash.put("tJava_13", true);
				end_Hash.put("tJava_13", System.currentTimeMillis());

				/**
				 * [tJava_13 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_13:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_13 finally ] start
				 */

				currentComponent = "tJava_13";

				/**
				 * [tJava_13 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_13_SUBPROCESS_STATE", 1);
	}

	public static class row48Struct implements
			routines.system.IPersistableRow<row48Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.CONCEPT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.CONCEPT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row48Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row21Struct implements
			routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.CONCEPT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.CONCEPT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class toCD_ModStruct implements
			routines.system.IPersistableRow<toCD_ModStruct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.CONCEPT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.CONCEPT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(toCD_ModStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String MODIFIER_PATH;

		public String getMODIFIER_PATH() {
			return this.MODIFIER_PATH;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String MODIFIER_BLOB;

		public String getMODIFIER_BLOB() {
			return this.MODIFIER_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.MODIFIER_PATH = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.MODIFIER_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MODIFIER_PATH, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.MODIFIER_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MODIFIER_PATH=" + MODIFIER_PATH);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",MODIFIER_BLOB=" + MODIFIER_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfto_conc_dimStruct implements
			routines.system.IPersistableRow<copyOfto_conc_dimStruct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String MODIFIER_PATH;

		public String getMODIFIER_PATH() {
			return this.MODIFIER_PATH;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String MODIFIER_BLOB;

		public String getMODIFIER_BLOB() {
			return this.MODIFIER_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.MODIFIER_PATH = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.MODIFIER_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MODIFIER_PATH, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.MODIFIER_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MODIFIER_PATH=" + MODIFIER_PATH);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",MODIFIER_BLOB=" + MODIFIER_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfto_conc_dimStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String MODIFIER_PATH;

		public String getMODIFIER_PATH() {
			return this.MODIFIER_PATH;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String MODIFIER_BLOB;

		public String getMODIFIER_BLOB() {
			return this.MODIFIER_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.MODIFIER_PATH = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.MODIFIER_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MODIFIER_PATH, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.MODIFIER_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MODIFIER_PATH=" + MODIFIER_PATH);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",MODIFIER_BLOB=" + MODIFIER_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row19Struct implements
			routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public int C_HLEVEL;

		public int getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String C_SYNONYM_CD;

		public String getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public BigDecimal C_TOTALNUM;

		public BigDecimal getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public String C_COLUMNDATATYPE;

		public String getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public Object C_COMMENT;

		public Object getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.C_HLEVEL = dis.readInt();

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					this.C_SYNONYM_CD = readString(dis);

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = (BigDecimal) dis.readObject();

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					this.C_COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = (Object) dis.readObject();

					this.C_TOOLTIP = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.C_HLEVEL);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.C_SYNONYM_CD, dos);

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// BigDecimal

				dos.writeObject(this.C_TOTALNUM);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// String

				writeString(this.C_COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// Object

				dos.writeObject(this.C_COMMENT);

				// String

				writeString(this.C_TOOLTIP, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + C_SYNONYM_CD);
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + String.valueOf(C_TOTALNUM));
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + C_COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + String.valueOf(C_COMMENT));
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class target_ontStruct implements
			routines.system.IPersistableRow<target_ontStruct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public int C_HLEVEL;

		public int getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String C_SYNONYM_CD;

		public String getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public BigDecimal C_TOTALNUM;

		public BigDecimal getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public String C_COLUMNDATATYPE;

		public String getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public Object C_COMMENT;

		public Object getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.C_HLEVEL = dis.readInt();

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					this.C_SYNONYM_CD = readString(dis);

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = (BigDecimal) dis.readObject();

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					this.C_COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = (Object) dis.readObject();

					this.C_TOOLTIP = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.C_HLEVEL);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.C_SYNONYM_CD, dos);

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// BigDecimal

				dos.writeObject(this.C_TOTALNUM);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// String

				writeString(this.C_COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// Object

				dos.writeObject(this.C_COMMENT);

				// String

				writeString(this.C_TOOLTIP, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + C_SYNONYM_CD);
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + String.valueOf(C_TOTALNUM));
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + C_COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + String.valueOf(C_COMMENT));
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(target_ontStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class to_mod_dimStruct implements
			routines.system.IPersistableRow<to_mod_dimStruct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String MODIFIER_PATH;

		public String getMODIFIER_PATH() {
			return this.MODIFIER_PATH;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String MODIFIER_BLOB;

		public String getMODIFIER_BLOB() {
			return this.MODIFIER_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.MODIFIER_PATH = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.MODIFIER_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MODIFIER_PATH, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.MODIFIER_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MODIFIER_PATH=" + MODIFIER_PATH);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",MODIFIER_BLOB=" + MODIFIER_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(to_mod_dimStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out9Struct implements
			routines.system.IPersistableRow<out9Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public Integer TARGET_ID;

		public Integer getTARGET_ID() {
			return this.TARGET_ID;
		}

		public Integer TREE_LEVEL;

		public Integer getTREE_LEVEL() {
			return this.TREE_LEVEL;
		}

		public String TREE_PATH;

		public String getTREE_PATH() {
			return this.TREE_PATH;
		}

		public String STAGING_PATH;

		public String getSTAGING_PATH() {
			return this.STAGING_PATH;
		}

		public String STAGING_DIMENSION;

		public String getSTAGING_DIMENSION() {
			return this.STAGING_DIMENSION;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String STARTDATE_STAGING_PATH;

		public String getSTARTDATE_STAGING_PATH() {
			return this.STARTDATE_STAGING_PATH;
		}

		public String ENDDATE_STAGING_PATH;

		public String getENDDATE_STAGING_PATH() {
			return this.ENDDATE_STAGING_PATH;
		}

		public String VISUALATTRIBUTES;

		public String getVISUALATTRIBUTES() {
			return this.VISUALATTRIBUTES;
		}

		public String BASECODE;

		public String getBASECODE() {
			return this.BASECODE;
		}

		public String METADATAXML;

		public String getMETADATAXML() {
			return this.METADATAXML;
		}

		public String COLUMNDATATYPE;

		public String getCOLUMNDATATYPE() {
			return this.COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String TOOLTIP;

		public String getTOOLTIP() {
			return this.TOOLTIP;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.TARGET_ID = readInteger(dis);

					this.TREE_LEVEL = readInteger(dis);

					this.TREE_PATH = readString(dis);

					this.STAGING_PATH = readString(dis);

					this.STAGING_DIMENSION = readString(dis);

					this.C_NAME = readString(dis);

					this.STARTDATE_STAGING_PATH = readString(dis);

					this.ENDDATE_STAGING_PATH = readString(dis);

					this.VISUALATTRIBUTES = readString(dis);

					this.BASECODE = readString(dis);

					this.METADATAXML = readString(dis);

					this.COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_COMMENT = readString(dis);

					this.TOOLTIP = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.TARGET_ID, dos);

				// Integer

				writeInteger(this.TREE_LEVEL, dos);

				// String

				writeString(this.TREE_PATH, dos);

				// String

				writeString(this.STAGING_PATH, dos);

				// String

				writeString(this.STAGING_DIMENSION, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.STARTDATE_STAGING_PATH, dos);

				// String

				writeString(this.ENDDATE_STAGING_PATH, dos);

				// String

				writeString(this.VISUALATTRIBUTES, dos);

				// String

				writeString(this.BASECODE, dos);

				// String

				writeString(this.METADATAXML, dos);

				// String

				writeString(this.COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.TOOLTIP, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TARGET_ID=" + String.valueOf(TARGET_ID));
			sb.append(",TREE_LEVEL=" + String.valueOf(TREE_LEVEL));
			sb.append(",TREE_PATH=" + TREE_PATH);
			sb.append(",STAGING_PATH=" + STAGING_PATH);
			sb.append(",STAGING_DIMENSION=" + STAGING_DIMENSION);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",STARTDATE_STAGING_PATH=" + STARTDATE_STAGING_PATH);
			sb.append(",ENDDATE_STAGING_PATH=" + ENDDATE_STAGING_PATH);
			sb.append(",VISUALATTRIBUTES=" + VISUALATTRIBUTES);
			sb.append(",BASECODE=" + BASECODE);
			sb.append(",METADATAXML=" + METADATAXML);
			sb.append(",COLUMNDATATYPE=" + COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",TOOLTIP=" + TOOLTIP);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class from_OE_ONTStruct implements
			routines.system.IPersistableRow<from_OE_ONTStruct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public Integer TARGET_ID;

		public Integer getTARGET_ID() {
			return this.TARGET_ID;
		}

		public Integer TREE_LEVEL;

		public Integer getTREE_LEVEL() {
			return this.TREE_LEVEL;
		}

		public String TREE_PATH;

		public String getTREE_PATH() {
			return this.TREE_PATH;
		}

		public String STAGING_PATH;

		public String getSTAGING_PATH() {
			return this.STAGING_PATH;
		}

		public String STAGING_DIMENSION;

		public String getSTAGING_DIMENSION() {
			return this.STAGING_DIMENSION;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String STARTDATE_STAGING_PATH;

		public String getSTARTDATE_STAGING_PATH() {
			return this.STARTDATE_STAGING_PATH;
		}

		public String ENDDATE_STAGING_PATH;

		public String getENDDATE_STAGING_PATH() {
			return this.ENDDATE_STAGING_PATH;
		}

		public String VISUALATTRIBUTES;

		public String getVISUALATTRIBUTES() {
			return this.VISUALATTRIBUTES;
		}

		public String BASECODE;

		public String getBASECODE() {
			return this.BASECODE;
		}

		public String METADATAXML;

		public String getMETADATAXML() {
			return this.METADATAXML;
		}

		public String COLUMNDATATYPE;

		public String getCOLUMNDATATYPE() {
			return this.COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String TOOLTIP;

		public String getTOOLTIP() {
			return this.TOOLTIP;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public String STAGING_M_APPLIED_PATH;

		public String getSTAGING_M_APPLIED_PATH() {
			return this.STAGING_M_APPLIED_PATH;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.TARGET_ID = readInteger(dis);

					this.TREE_LEVEL = readInteger(dis);

					this.TREE_PATH = readString(dis);

					this.STAGING_PATH = readString(dis);

					this.STAGING_DIMENSION = readString(dis);

					this.C_NAME = readString(dis);

					this.STARTDATE_STAGING_PATH = readString(dis);

					this.ENDDATE_STAGING_PATH = readString(dis);

					this.VISUALATTRIBUTES = readString(dis);

					this.BASECODE = readString(dis);

					this.METADATAXML = readString(dis);

					this.COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_COMMENT = readString(dis);

					this.TOOLTIP = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.STAGING_M_APPLIED_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.TARGET_ID, dos);

				// Integer

				writeInteger(this.TREE_LEVEL, dos);

				// String

				writeString(this.TREE_PATH, dos);

				// String

				writeString(this.STAGING_PATH, dos);

				// String

				writeString(this.STAGING_DIMENSION, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.STARTDATE_STAGING_PATH, dos);

				// String

				writeString(this.ENDDATE_STAGING_PATH, dos);

				// String

				writeString(this.VISUALATTRIBUTES, dos);

				// String

				writeString(this.BASECODE, dos);

				// String

				writeString(this.METADATAXML, dos);

				// String

				writeString(this.COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.TOOLTIP, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// String

				writeString(this.STAGING_M_APPLIED_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TARGET_ID=" + String.valueOf(TARGET_ID));
			sb.append(",TREE_LEVEL=" + String.valueOf(TREE_LEVEL));
			sb.append(",TREE_PATH=" + TREE_PATH);
			sb.append(",STAGING_PATH=" + STAGING_PATH);
			sb.append(",STAGING_DIMENSION=" + STAGING_DIMENSION);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",STARTDATE_STAGING_PATH=" + STARTDATE_STAGING_PATH);
			sb.append(",ENDDATE_STAGING_PATH=" + ENDDATE_STAGING_PATH);
			sb.append(",VISUALATTRIBUTES=" + VISUALATTRIBUTES);
			sb.append(",BASECODE=" + BASECODE);
			sb.append(",METADATAXML=" + METADATAXML);
			sb.append(",COLUMNDATATYPE=" + COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",TOOLTIP=" + TOOLTIP);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",STAGING_M_APPLIED_PATH=" + STAGING_M_APPLIED_PATH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(from_OE_ONTStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_1Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public Integer TARGET_ID;

		public Integer getTARGET_ID() {
			return this.TARGET_ID;
		}

		public Integer TREE_LEVEL;

		public Integer getTREE_LEVEL() {
			return this.TREE_LEVEL;
		}

		public String TREE_PATH;

		public String getTREE_PATH() {
			return this.TREE_PATH;
		}

		public String STAGING_PATH;

		public String getSTAGING_PATH() {
			return this.STAGING_PATH;
		}

		public String STAGING_DIMENSION;

		public String getSTAGING_DIMENSION() {
			return this.STAGING_DIMENSION;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String STARTDATE_STAGING_PATH;

		public String getSTARTDATE_STAGING_PATH() {
			return this.STARTDATE_STAGING_PATH;
		}

		public String ENDDATE_STAGING_PATH;

		public String getENDDATE_STAGING_PATH() {
			return this.ENDDATE_STAGING_PATH;
		}

		public String VISUALATTRIBUTES;

		public String getVISUALATTRIBUTES() {
			return this.VISUALATTRIBUTES;
		}

		public String BASECODE;

		public String getBASECODE() {
			return this.BASECODE;
		}

		public String METADATAXML;

		public String getMETADATAXML() {
			return this.METADATAXML;
		}

		public String COLUMNDATATYPE;

		public String getCOLUMNDATATYPE() {
			return this.COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String TOOLTIP;

		public String getTOOLTIP() {
			return this.TOOLTIP;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public String STAGING_M_APPLIED_PATH;

		public String getSTAGING_M_APPLIED_PATH() {
			return this.STAGING_M_APPLIED_PATH;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.TARGET_ID = readInteger(dis);

					this.TREE_LEVEL = readInteger(dis);

					this.TREE_PATH = readString(dis);

					this.STAGING_PATH = readString(dis);

					this.STAGING_DIMENSION = readString(dis);

					this.C_NAME = readString(dis);

					this.STARTDATE_STAGING_PATH = readString(dis);

					this.ENDDATE_STAGING_PATH = readString(dis);

					this.VISUALATTRIBUTES = readString(dis);

					this.BASECODE = readString(dis);

					this.METADATAXML = readString(dis);

					this.COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_COMMENT = readString(dis);

					this.TOOLTIP = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.STAGING_M_APPLIED_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.TARGET_ID, dos);

				// Integer

				writeInteger(this.TREE_LEVEL, dos);

				// String

				writeString(this.TREE_PATH, dos);

				// String

				writeString(this.STAGING_PATH, dos);

				// String

				writeString(this.STAGING_DIMENSION, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.STARTDATE_STAGING_PATH, dos);

				// String

				writeString(this.ENDDATE_STAGING_PATH, dos);

				// String

				writeString(this.VISUALATTRIBUTES, dos);

				// String

				writeString(this.BASECODE, dos);

				// String

				writeString(this.METADATAXML, dos);

				// String

				writeString(this.COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.TOOLTIP, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// String

				writeString(this.STAGING_M_APPLIED_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TARGET_ID=" + String.valueOf(TARGET_ID));
			sb.append(",TREE_LEVEL=" + String.valueOf(TREE_LEVEL));
			sb.append(",TREE_PATH=" + TREE_PATH);
			sb.append(",STAGING_PATH=" + STAGING_PATH);
			sb.append(",STAGING_DIMENSION=" + STAGING_DIMENSION);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",STARTDATE_STAGING_PATH=" + STARTDATE_STAGING_PATH);
			sb.append(",ENDDATE_STAGING_PATH=" + ENDDATE_STAGING_PATH);
			sb.append(",VISUALATTRIBUTES=" + VISUALATTRIBUTES);
			sb.append(",BASECODE=" + BASECODE);
			sb.append(",METADATAXML=" + METADATAXML);
			sb.append(",COLUMNDATATYPE=" + COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",TOOLTIP=" + TOOLTIP);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",STAGING_M_APPLIED_PATH=" + STAGING_M_APPLIED_PATH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class toCD2Struct implements
			routines.system.IPersistableRow<toCD2Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.CONCEPT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.CONCEPT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(toCD2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row50Struct implements
			routines.system.IPersistableRow<row50Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public Integer TARGET_ID;

		public Integer getTARGET_ID() {
			return this.TARGET_ID;
		}

		public Integer TREE_LEVEL;

		public Integer getTREE_LEVEL() {
			return this.TREE_LEVEL;
		}

		public String TREE_PATH;

		public String getTREE_PATH() {
			return this.TREE_PATH;
		}

		public String STAGING_PATH;

		public String getSTAGING_PATH() {
			return this.STAGING_PATH;
		}

		public String STAGING_DIMENSION;

		public String getSTAGING_DIMENSION() {
			return this.STAGING_DIMENSION;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String STARTDATE_STAGING_PATH;

		public String getSTARTDATE_STAGING_PATH() {
			return this.STARTDATE_STAGING_PATH;
		}

		public String ENDDATE_STAGING_PATH;

		public String getENDDATE_STAGING_PATH() {
			return this.ENDDATE_STAGING_PATH;
		}

		public String VISUALATTRIBUTES;

		public String getVISUALATTRIBUTES() {
			return this.VISUALATTRIBUTES;
		}

		public String BASECODE;

		public String getBASECODE() {
			return this.BASECODE;
		}

		public String METADATAXML;

		public String getMETADATAXML() {
			return this.METADATAXML;
		}

		public String COLUMNDATATYPE;

		public String getCOLUMNDATATYPE() {
			return this.COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String TOOLTIP;

		public String getTOOLTIP() {
			return this.TOOLTIP;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public String STAGING_M_APPLIED_PATH;

		public String getSTAGING_M_APPLIED_PATH() {
			return this.STAGING_M_APPLIED_PATH;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.TARGET_ID = readInteger(dis);

					this.TREE_LEVEL = readInteger(dis);

					this.TREE_PATH = readString(dis);

					this.STAGING_PATH = readString(dis);

					this.STAGING_DIMENSION = readString(dis);

					this.C_NAME = readString(dis);

					this.STARTDATE_STAGING_PATH = readString(dis);

					this.ENDDATE_STAGING_PATH = readString(dis);

					this.VISUALATTRIBUTES = readString(dis);

					this.BASECODE = readString(dis);

					this.METADATAXML = readString(dis);

					this.COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_COMMENT = readString(dis);

					this.TOOLTIP = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.STAGING_M_APPLIED_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.TARGET_ID, dos);

				// Integer

				writeInteger(this.TREE_LEVEL, dos);

				// String

				writeString(this.TREE_PATH, dos);

				// String

				writeString(this.STAGING_PATH, dos);

				// String

				writeString(this.STAGING_DIMENSION, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.STARTDATE_STAGING_PATH, dos);

				// String

				writeString(this.ENDDATE_STAGING_PATH, dos);

				// String

				writeString(this.VISUALATTRIBUTES, dos);

				// String

				writeString(this.BASECODE, dos);

				// String

				writeString(this.METADATAXML, dos);

				// String

				writeString(this.COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.TOOLTIP, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// String

				writeString(this.STAGING_M_APPLIED_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TARGET_ID=" + String.valueOf(TARGET_ID));
			sb.append(",TREE_LEVEL=" + String.valueOf(TREE_LEVEL));
			sb.append(",TREE_PATH=" + TREE_PATH);
			sb.append(",STAGING_PATH=" + STAGING_PATH);
			sb.append(",STAGING_DIMENSION=" + STAGING_DIMENSION);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",STARTDATE_STAGING_PATH=" + STARTDATE_STAGING_PATH);
			sb.append(",ENDDATE_STAGING_PATH=" + ENDDATE_STAGING_PATH);
			sb.append(",VISUALATTRIBUTES=" + VISUALATTRIBUTES);
			sb.append(",BASECODE=" + BASECODE);
			sb.append(",METADATAXML=" + METADATAXML);
			sb.append(",COLUMNDATATYPE=" + COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",TOOLTIP=" + TOOLTIP);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",STAGING_M_APPLIED_PATH=" + STAGING_M_APPLIED_PATH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row50Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_8Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_8Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public Integer TARGET_ID;

		public Integer getTARGET_ID() {
			return this.TARGET_ID;
		}

		public Integer TREE_LEVEL;

		public Integer getTREE_LEVEL() {
			return this.TREE_LEVEL;
		}

		public String TREE_PATH;

		public String getTREE_PATH() {
			return this.TREE_PATH;
		}

		public String STAGING_PATH;

		public String getSTAGING_PATH() {
			return this.STAGING_PATH;
		}

		public String STAGING_DIMENSION;

		public String getSTAGING_DIMENSION() {
			return this.STAGING_DIMENSION;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String STARTDATE_STAGING_PATH;

		public String getSTARTDATE_STAGING_PATH() {
			return this.STARTDATE_STAGING_PATH;
		}

		public String ENDDATE_STAGING_PATH;

		public String getENDDATE_STAGING_PATH() {
			return this.ENDDATE_STAGING_PATH;
		}

		public String VISUALATTRIBUTES;

		public String getVISUALATTRIBUTES() {
			return this.VISUALATTRIBUTES;
		}

		public String BASECODE;

		public String getBASECODE() {
			return this.BASECODE;
		}

		public String METADATAXML;

		public String getMETADATAXML() {
			return this.METADATAXML;
		}

		public String COLUMNDATATYPE;

		public String getCOLUMNDATATYPE() {
			return this.COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String TOOLTIP;

		public String getTOOLTIP() {
			return this.TOOLTIP;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public String STAGING_M_APPLIED_PATH;

		public String getSTAGING_M_APPLIED_PATH() {
			return this.STAGING_M_APPLIED_PATH;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.TARGET_ID = readInteger(dis);

					this.TREE_LEVEL = readInteger(dis);

					this.TREE_PATH = readString(dis);

					this.STAGING_PATH = readString(dis);

					this.STAGING_DIMENSION = readString(dis);

					this.C_NAME = readString(dis);

					this.STARTDATE_STAGING_PATH = readString(dis);

					this.ENDDATE_STAGING_PATH = readString(dis);

					this.VISUALATTRIBUTES = readString(dis);

					this.BASECODE = readString(dis);

					this.METADATAXML = readString(dis);

					this.COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_COMMENT = readString(dis);

					this.TOOLTIP = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.STAGING_M_APPLIED_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.TARGET_ID, dos);

				// Integer

				writeInteger(this.TREE_LEVEL, dos);

				// String

				writeString(this.TREE_PATH, dos);

				// String

				writeString(this.STAGING_PATH, dos);

				// String

				writeString(this.STAGING_DIMENSION, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.STARTDATE_STAGING_PATH, dos);

				// String

				writeString(this.ENDDATE_STAGING_PATH, dos);

				// String

				writeString(this.VISUALATTRIBUTES, dos);

				// String

				writeString(this.BASECODE, dos);

				// String

				writeString(this.METADATAXML, dos);

				// String

				writeString(this.COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.TOOLTIP, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// String

				writeString(this.STAGING_M_APPLIED_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TARGET_ID=" + String.valueOf(TARGET_ID));
			sb.append(",TREE_LEVEL=" + String.valueOf(TREE_LEVEL));
			sb.append(",TREE_PATH=" + TREE_PATH);
			sb.append(",STAGING_PATH=" + STAGING_PATH);
			sb.append(",STAGING_DIMENSION=" + STAGING_DIMENSION);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",STARTDATE_STAGING_PATH=" + STARTDATE_STAGING_PATH);
			sb.append(",ENDDATE_STAGING_PATH=" + ENDDATE_STAGING_PATH);
			sb.append(",VISUALATTRIBUTES=" + VISUALATTRIBUTES);
			sb.append(",BASECODE=" + BASECODE);
			sb.append(",METADATAXML=" + METADATAXML);
			sb.append(",COLUMNDATATYPE=" + COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",TOOLTIP=" + TOOLTIP);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",STAGING_M_APPLIED_PATH=" + STAGING_M_APPLIED_PATH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_2Process(globalMap);
				tFileInputDelimited_31Process(globalMap);
				tFileInputDelimited_33Process(globalMap);
				tFileInputDelimited_13Process(globalMap);

				from_OE_ONTStruct from_OE_ONT = new from_OE_ONTStruct();
				target_ontStruct target_ont = new target_ontStruct();
				row19Struct row19 = new row19Struct();
				to_mod_dimStruct to_mod_dim = new to_mod_dimStruct();
				row11Struct row11 = new row11Struct();
				copyOfto_conc_dimStruct copyOfto_conc_dim = new copyOfto_conc_dimStruct();
				row12Struct row12 = new row12Struct();
				out9Struct out9 = new out9Struct();
				toCD_ModStruct toCD_Mod = new toCD_ModStruct();

				row50Struct row50 = new row50Struct();
				toCD2Struct toCD2 = new toCD2Struct();

				row21Struct row21 = new row21Struct();
				row48Struct row48 = new row48Struct();

				/**
				 * [tFileOutputDelimited_32 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_32", false);
				start_Hash.put("tFileOutputDelimited_32",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_32";

				int tos_count_tFileOutputDelimited_32 = 0;

				String fileName_tFileOutputDelimited_32 = "";
				fileName_tFileOutputDelimited_32 = (new java.io.File(
						context.folderMain + context.folderOutput
								+ "/concept_dimension.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_32 = null;
				String extension_tFileOutputDelimited_32 = null;
				String directory_tFileOutputDelimited_32 = null;
				if ((fileName_tFileOutputDelimited_32.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_32.lastIndexOf(".") < fileName_tFileOutputDelimited_32
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_32 = fileName_tFileOutputDelimited_32;
						extension_tFileOutputDelimited_32 = "";
					} else {
						fullName_tFileOutputDelimited_32 = fileName_tFileOutputDelimited_32
								.substring(0, fileName_tFileOutputDelimited_32
										.lastIndexOf("."));
						extension_tFileOutputDelimited_32 = fileName_tFileOutputDelimited_32
								.substring(fileName_tFileOutputDelimited_32
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_32 = fileName_tFileOutputDelimited_32
							.substring(0, fileName_tFileOutputDelimited_32
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_32.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_32 = fileName_tFileOutputDelimited_32
								.substring(0, fileName_tFileOutputDelimited_32
										.lastIndexOf("."));
						extension_tFileOutputDelimited_32 = fileName_tFileOutputDelimited_32
								.substring(fileName_tFileOutputDelimited_32
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_32 = fileName_tFileOutputDelimited_32;
						extension_tFileOutputDelimited_32 = "";
					}
					directory_tFileOutputDelimited_32 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_32 = true;
				java.io.File filetFileOutputDelimited_32 = new java.io.File(
						fileName_tFileOutputDelimited_32);
				globalMap.put("tFileOutputDelimited_32_FILE_NAME",
						fileName_tFileOutputDelimited_32);

				String[] headColutFileOutputDelimited_32 = new String[9];
				class CSVBasicSet_tFileOutputDelimited_32 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_32[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_32 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_32[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_32[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_32 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_32[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_32[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_32 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_32[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_32 = 0;
				int splitEvery_tFileOutputDelimited_32 = 1000;
				int splitedFileNo_tFileOutputDelimited_32 = 0;
				int currentRow_tFileOutputDelimited_32 = 0;

				CSVBasicSet_tFileOutputDelimited_32 csvSettings_tFileOutputDelimited_32 = new CSVBasicSet_tFileOutputDelimited_32();
				csvSettings_tFileOutputDelimited_32.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_32.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_32.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_32 != null
						&& directory_tFileOutputDelimited_32.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_32 = new java.io.File(
							directory_tFileOutputDelimited_32);
					if (!dir_tFileOutputDelimited_32.exists()) {

						dir_tFileOutputDelimited_32.mkdirs();

					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_32 = null;

				java.io.File fileToDelete_tFileOutputDelimited_32 = new java.io.File(
						fileName_tFileOutputDelimited_32);
				if (fileToDelete_tFileOutputDelimited_32.exists()) {
					fileToDelete_tFileOutputDelimited_32.delete();
				}

				CsvWritertFileOutputDelimited_32 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_32,
												false), "UTF-8")));
				CsvWritertFileOutputDelimited_32
						.setSeparator(csvSettings_tFileOutputDelimited_32
								.getFieldDelim());

				if (!csvSettings_tFileOutputDelimited_32
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_32.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_32.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_32
							.setLineEnd(""
									+ csvSettings_tFileOutputDelimited_32
											.getRowDelim());
				}

				if (filetFileOutputDelimited_32.length() == 0) {

					headColutFileOutputDelimited_32[0] = "CONCEPT_PATH";

					headColutFileOutputDelimited_32[1] = "CONCEPT_CD";

					headColutFileOutputDelimited_32[2] = "NAME_CHAR";

					headColutFileOutputDelimited_32[3] = "CONCEPT_BLOB";

					headColutFileOutputDelimited_32[4] = "UPDATE_DATE";

					headColutFileOutputDelimited_32[5] = "DOWNLOAD_DATE";

					headColutFileOutputDelimited_32[6] = "IMPORT_DATE";

					headColutFileOutputDelimited_32[7] = "SOURCESYSTEM_CD";

					headColutFileOutputDelimited_32[8] = "UPLOAD_ID";

					CsvWritertFileOutputDelimited_32
							.writeNext(headColutFileOutputDelimited_32);
					CsvWritertFileOutputDelimited_32.flush();

				}

				CsvWritertFileOutputDelimited_32
						.setEscapeChar(csvSettings_tFileOutputDelimited_32
								.getEscapeChar());
				CsvWritertFileOutputDelimited_32
						.setQuoteChar(csvSettings_tFileOutputDelimited_32
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_32
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_32",
						CsvWritertFileOutputDelimited_32);

				resourceMap.put("nb_line_tFileOutputDelimited_32",
						nb_line_tFileOutputDelimited_32);

				/**
				 * [tFileOutputDelimited_32 begin ] stop
				 */

				/**
				 * [tUniqRow_12 begin ] start
				 */

				ok_Hash.put("tUniqRow_12", false);
				start_Hash.put("tUniqRow_12", System.currentTimeMillis());

				currentComponent = "tUniqRow_12";

				int tos_count_tUniqRow_12 = 0;

				class KeyStruct_tUniqRow_12 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String CONCEPT_PATH;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.CONCEPT_PATH == null) ? 0
											: this.CONCEPT_PATH.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_12 other = (KeyStruct_tUniqRow_12) obj;

						if (this.CONCEPT_PATH == null) {
							if (other.CONCEPT_PATH != null)
								return false;

						} else if (!this.CONCEPT_PATH
								.equals(other.CONCEPT_PATH))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_12 = 0;
				int nb_duplicates_tUniqRow_12 = 0;
				KeyStruct_tUniqRow_12 finder_tUniqRow_12 = new KeyStruct_tUniqRow_12();
				java.util.Set<KeyStruct_tUniqRow_12> keystUniqRow_12 = new java.util.HashSet<KeyStruct_tUniqRow_12>();

				/**
				 * [tUniqRow_12 begin ] stop
				 */

				/**
				 * [tUnite_1 begin ] start
				 */

				ok_Hash.put("tUnite_1", false);
				start_Hash.put("tUnite_1", System.currentTimeMillis());

				currentComponent = "tUnite_1";

				int tos_count_tUnite_1 = 0;

				int nb_line_tUnite_1 = 0;

				/**
				 * [tUnite_1 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_4", false);
				start_Hash.put("tFileOutputDelimited_4",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_4";

				int tos_count_tFileOutputDelimited_4 = 0;

				String fileName_tFileOutputDelimited_4 = "";
				fileName_tFileOutputDelimited_4 = (new java.io.File(
						context.folderMain + context.folderOutput
								+ "/ontology.csv")).getAbsolutePath().replace(
						"\\", "/");
				String fullName_tFileOutputDelimited_4 = null;
				String extension_tFileOutputDelimited_4 = null;
				String directory_tFileOutputDelimited_4 = null;
				if ((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(0, fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
							.substring(0, fileName_tFileOutputDelimited_4
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(0, fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					}
					directory_tFileOutputDelimited_4 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_4 = true;
				java.io.File filetFileOutputDelimited_4 = new java.io.File(
						fileName_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME",
						fileName_tFileOutputDelimited_4);

				String[] headColutFileOutputDelimited_4 = new String[25];
				class CSVBasicSet_tFileOutputDelimited_4 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_4[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_4 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_4[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_4[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_4 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_4[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_4[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_4 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_4[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_4 = 0;
				int splitEvery_tFileOutputDelimited_4 = 1000;
				int splitedFileNo_tFileOutputDelimited_4 = 0;
				int currentRow_tFileOutputDelimited_4 = 0;

				CSVBasicSet_tFileOutputDelimited_4 csvSettings_tFileOutputDelimited_4 = new CSVBasicSet_tFileOutputDelimited_4();
				csvSettings_tFileOutputDelimited_4.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_4.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_4.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_4 != null
						&& directory_tFileOutputDelimited_4.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_4 = new java.io.File(
							directory_tFileOutputDelimited_4);
					if (!dir_tFileOutputDelimited_4.exists()) {

						dir_tFileOutputDelimited_4.mkdirs();

					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_4 = null;

				java.io.File fileToDelete_tFileOutputDelimited_4 = new java.io.File(
						fileName_tFileOutputDelimited_4);
				if (fileToDelete_tFileOutputDelimited_4.exists()) {
					fileToDelete_tFileOutputDelimited_4.delete();
				}

				CsvWritertFileOutputDelimited_4 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_4,
												false), "UTF-8")));
				CsvWritertFileOutputDelimited_4
						.setSeparator(csvSettings_tFileOutputDelimited_4
								.getFieldDelim());

				if (!csvSettings_tFileOutputDelimited_4
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_4.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_4.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_4.setLineEnd(""
							+ csvSettings_tFileOutputDelimited_4.getRowDelim());
				}

				if (filetFileOutputDelimited_4.length() == 0) {

					headColutFileOutputDelimited_4[0] = "C_HLEVEL";

					headColutFileOutputDelimited_4[1] = "C_FULLNAME";

					headColutFileOutputDelimited_4[2] = "C_NAME";

					headColutFileOutputDelimited_4[3] = "C_SYNONYM_CD";

					headColutFileOutputDelimited_4[4] = "C_VISUALATTRIBUTES";

					headColutFileOutputDelimited_4[5] = "C_TOTALNUM";

					headColutFileOutputDelimited_4[6] = "C_BASECODE";

					headColutFileOutputDelimited_4[7] = "C_METADATAXML";

					headColutFileOutputDelimited_4[8] = "C_FACTTABLECOLUMN";

					headColutFileOutputDelimited_4[9] = "C_TABLENAME";

					headColutFileOutputDelimited_4[10] = "C_COLUMNNAME";

					headColutFileOutputDelimited_4[11] = "C_COLUMNDATATYPE";

					headColutFileOutputDelimited_4[12] = "C_OPERATOR";

					headColutFileOutputDelimited_4[13] = "C_DIMCODE";

					headColutFileOutputDelimited_4[14] = "C_COMMENT";

					headColutFileOutputDelimited_4[15] = "C_TOOLTIP";

					headColutFileOutputDelimited_4[16] = "M_APPLIED_PATH";

					headColutFileOutputDelimited_4[17] = "UPDATE_DATE";

					headColutFileOutputDelimited_4[18] = "DOWNLOAD_DATE";

					headColutFileOutputDelimited_4[19] = "IMPORT_DATE";

					headColutFileOutputDelimited_4[20] = "SOURCESYSTEM_CD";

					headColutFileOutputDelimited_4[21] = "VALUETYPE_CD";

					headColutFileOutputDelimited_4[22] = "M_EXCLUSION_CD";

					headColutFileOutputDelimited_4[23] = "C_PATH";

					headColutFileOutputDelimited_4[24] = "C_SYMBOL";

					CsvWritertFileOutputDelimited_4
							.writeNext(headColutFileOutputDelimited_4);
					CsvWritertFileOutputDelimited_4.flush();

				}

				CsvWritertFileOutputDelimited_4
						.setEscapeChar(csvSettings_tFileOutputDelimited_4
								.getEscapeChar());
				CsvWritertFileOutputDelimited_4
						.setQuoteChar(csvSettings_tFileOutputDelimited_4
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_4
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_4",
						CsvWritertFileOutputDelimited_4);

				resourceMap.put("nb_line_tFileOutputDelimited_4",
						nb_line_tFileOutputDelimited_4);

				/**
				 * [tFileOutputDelimited_4 begin ] stop
				 */

				/**
				 * [tUniqRow_4 begin ] start
				 */

				ok_Hash.put("tUniqRow_4", false);
				start_Hash.put("tUniqRow_4", System.currentTimeMillis());

				currentComponent = "tUniqRow_4";

				int tos_count_tUniqRow_4 = 0;

				class KeyStruct_tUniqRow_4 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					int C_HLEVEL;
					String C_FULLNAME;
					String M_APPLIED_PATH;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + (int) this.C_HLEVEL;

							result = prime
									* result
									+ ((this.C_FULLNAME == null) ? 0
											: this.C_FULLNAME.hashCode());

							result = prime
									* result
									+ ((this.M_APPLIED_PATH == null) ? 0
											: this.M_APPLIED_PATH.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_4 other = (KeyStruct_tUniqRow_4) obj;

						if (this.C_HLEVEL != other.C_HLEVEL)
							return false;

						if (this.C_FULLNAME == null) {
							if (other.C_FULLNAME != null)
								return false;

						} else if (!this.C_FULLNAME.equals(other.C_FULLNAME))

							return false;

						if (this.M_APPLIED_PATH == null) {
							if (other.M_APPLIED_PATH != null)
								return false;

						} else if (!this.M_APPLIED_PATH
								.equals(other.M_APPLIED_PATH))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_4 = 0;
				int nb_duplicates_tUniqRow_4 = 0;
				KeyStruct_tUniqRow_4 finder_tUniqRow_4 = new KeyStruct_tUniqRow_4();
				java.util.Set<KeyStruct_tUniqRow_4> keystUniqRow_4 = new java.util.HashSet<KeyStruct_tUniqRow_4>();

				/**
				 * [tUniqRow_4 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_29 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_29", false);
				start_Hash.put("tFileOutputDelimited_29",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_29";

				int tos_count_tFileOutputDelimited_29 = 0;

				String fileName_tFileOutputDelimited_29 = "";
				fileName_tFileOutputDelimited_29 = (new java.io.File(
						context.folderMain + context.folderOutput
								+ "/modifier_dimension.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_29 = null;
				String extension_tFileOutputDelimited_29 = null;
				String directory_tFileOutputDelimited_29 = null;
				if ((fileName_tFileOutputDelimited_29.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_29.lastIndexOf(".") < fileName_tFileOutputDelimited_29
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_29 = fileName_tFileOutputDelimited_29;
						extension_tFileOutputDelimited_29 = "";
					} else {
						fullName_tFileOutputDelimited_29 = fileName_tFileOutputDelimited_29
								.substring(0, fileName_tFileOutputDelimited_29
										.lastIndexOf("."));
						extension_tFileOutputDelimited_29 = fileName_tFileOutputDelimited_29
								.substring(fileName_tFileOutputDelimited_29
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_29 = fileName_tFileOutputDelimited_29
							.substring(0, fileName_tFileOutputDelimited_29
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_29.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_29 = fileName_tFileOutputDelimited_29
								.substring(0, fileName_tFileOutputDelimited_29
										.lastIndexOf("."));
						extension_tFileOutputDelimited_29 = fileName_tFileOutputDelimited_29
								.substring(fileName_tFileOutputDelimited_29
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_29 = fileName_tFileOutputDelimited_29;
						extension_tFileOutputDelimited_29 = "";
					}
					directory_tFileOutputDelimited_29 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_29 = true;
				java.io.File filetFileOutputDelimited_29 = new java.io.File(
						fileName_tFileOutputDelimited_29);
				globalMap.put("tFileOutputDelimited_29_FILE_NAME",
						fileName_tFileOutputDelimited_29);

				String[] headColutFileOutputDelimited_29 = new String[9];
				class CSVBasicSet_tFileOutputDelimited_29 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_29[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_29 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_29[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_29[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_29 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_29[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_29[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_29 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_29[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_29 = 0;
				int splitEvery_tFileOutputDelimited_29 = 1000;
				int splitedFileNo_tFileOutputDelimited_29 = 0;
				int currentRow_tFileOutputDelimited_29 = 0;

				CSVBasicSet_tFileOutputDelimited_29 csvSettings_tFileOutputDelimited_29 = new CSVBasicSet_tFileOutputDelimited_29();
				csvSettings_tFileOutputDelimited_29.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_29.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_29.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_29 != null
						&& directory_tFileOutputDelimited_29.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_29 = new java.io.File(
							directory_tFileOutputDelimited_29);
					if (!dir_tFileOutputDelimited_29.exists()) {

						dir_tFileOutputDelimited_29.mkdirs();

					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_29 = null;

				java.io.File fileToDelete_tFileOutputDelimited_29 = new java.io.File(
						fileName_tFileOutputDelimited_29);
				if (fileToDelete_tFileOutputDelimited_29.exists()) {
					fileToDelete_tFileOutputDelimited_29.delete();
				}

				CsvWritertFileOutputDelimited_29 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_29,
												false), "UTF-8")));
				CsvWritertFileOutputDelimited_29
						.setSeparator(csvSettings_tFileOutputDelimited_29
								.getFieldDelim());

				if (!csvSettings_tFileOutputDelimited_29
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_29.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_29.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_29
							.setLineEnd(""
									+ csvSettings_tFileOutputDelimited_29
											.getRowDelim());
				}

				if (filetFileOutputDelimited_29.length() == 0) {

					headColutFileOutputDelimited_29[0] = "MODIFIER_PATH";

					headColutFileOutputDelimited_29[1] = "MODIFIER_CD";

					headColutFileOutputDelimited_29[2] = "NAME_CHAR";

					headColutFileOutputDelimited_29[3] = "MODIFIER_BLOB";

					headColutFileOutputDelimited_29[4] = "UPDATE_DATE";

					headColutFileOutputDelimited_29[5] = "DOWNLOAD_DATE";

					headColutFileOutputDelimited_29[6] = "IMPORT_DATE";

					headColutFileOutputDelimited_29[7] = "SOURCESYSTEM_CD";

					headColutFileOutputDelimited_29[8] = "UPLOAD_ID";

					CsvWritertFileOutputDelimited_29
							.writeNext(headColutFileOutputDelimited_29);
					CsvWritertFileOutputDelimited_29.flush();

				}

				CsvWritertFileOutputDelimited_29
						.setEscapeChar(csvSettings_tFileOutputDelimited_29
								.getEscapeChar());
				CsvWritertFileOutputDelimited_29
						.setQuoteChar(csvSettings_tFileOutputDelimited_29
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_29
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_29",
						CsvWritertFileOutputDelimited_29);

				resourceMap.put("nb_line_tFileOutputDelimited_29",
						nb_line_tFileOutputDelimited_29);

				/**
				 * [tFileOutputDelimited_29 begin ] stop
				 */

				/**
				 * [tUniqRow_1 begin ] start
				 */

				ok_Hash.put("tUniqRow_1", false);
				start_Hash.put("tUniqRow_1", System.currentTimeMillis());

				currentComponent = "tUniqRow_1";

				int tos_count_tUniqRow_1 = 0;

				int nb_uniques_tUniqRow_1 = 0;
				int nb_duplicates_tUniqRow_1 = 0;

				/**
				 * [tUniqRow_1 begin ] stop
				 */

				/**
				 * [tMap_19 begin ] start
				 */

				ok_Hash.put("tMap_19", false);
				start_Hash.put("tMap_19", System.currentTimeMillis());

				currentComponent = "tMap_19";

				int tos_count_tMap_19 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row47Struct> tHash_Lookup_row47 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row47Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row47Struct>) globalMap
						.get("tHash_Lookup_row47"));

				row47Struct row47HashKey = new row47Struct();
				row47Struct row47Default = new row47Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_19__Struct {
				}
				Var__tMap_19__Struct Var__tMap_19 = new Var__tMap_19__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfto_conc_dimStruct copyOfto_conc_dim_tmp = new copyOfto_conc_dimStruct();
				// ###############################

				/**
				 * [tMap_19 begin ] stop
				 */

				/**
				 * [tJavaRow_4 begin ] start
				 */

				ok_Hash.put("tJavaRow_4", false);
				start_Hash.put("tJavaRow_4", System.currentTimeMillis());

				currentComponent = "tJavaRow_4";

				int tos_count_tJavaRow_4 = 0;

				int nb_line_tJavaRow_4 = 0;

				/**
				 * [tJavaRow_4 begin ] stop
				 */

				/**
				 * [tMap_21 begin ] start
				 */

				ok_Hash.put("tMap_21", false);
				start_Hash.put("tMap_21", System.currentTimeMillis());

				currentComponent = "tMap_21";

				int tos_count_tMap_21 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row49Struct> tHash_Lookup_row49 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row49Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row49Struct>) globalMap
						.get("tHash_Lookup_row49"));

				row49Struct row49HashKey = new row49Struct();
				row49Struct row49Default = new row49Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_21__Struct {
				}
				Var__tMap_21__Struct Var__tMap_21 = new Var__tMap_21__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				toCD_ModStruct toCD_Mod_tmp = new toCD_ModStruct();
				// ###############################

				List<toCD_ModStruct> toCD_Mod_List = new java.util.ArrayList<toCD_ModStruct>();

				/**
				 * [tMap_21 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<from_src_ontStruct> tHash_Lookup_from_src_ont = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<from_src_ontStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<from_src_ontStruct>) globalMap
						.get("tHash_Lookup_from_src_ont"));

				from_src_ontStruct from_src_ontHashKey = new from_src_ontStruct();
				from_src_ontStruct from_src_ontDefault = new from_src_ontStruct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
					boolean var1;
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				target_ontStruct target_ont_tmp = new target_ontStruct();
				to_mod_dimStruct to_mod_dim_tmp = new to_mod_dimStruct();
				out9Struct out9_tmp = new out9Struct();
				// ###############################

				List<target_ontStruct> target_ont_List = new java.util.ArrayList<target_ontStruct>();
				List<to_mod_dimStruct> to_mod_dim_List = new java.util.ArrayList<to_mod_dimStruct>();

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;

				char fieldSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_1 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_1 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_1 = /**
				 * Start field
				 * tFileInputDelimited_1:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_1_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_1:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

				try {

					String[] rowtFileInputDelimited_1 = null;
					int currentLinetFileInputDelimited_1 = 0;
					int outputLinetFileInputDelimited_1 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0;
							if (footer_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_1,
									fieldSeparator_tFileInputDelimited_1[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_1)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_1[0]);
						}

						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
							csvReadertFileInputDelimited_1.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_1[0]);

						csvReadertFileInputDelimited_1.setQuoteChar('"');

						csvReadertFileInputDelimited_1
								.setEscapeChar(csvReadertFileInputDelimited_1
										.getQuoteChar());

						if (footer_tFileInputDelimited_1 > 0) {
							for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
							csvReadertFileInputDelimited_1
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_1.readNext()) {

								rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
										.getValues();
								if (!(rowtFileInputDelimited_1.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_1[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_1++;

								}

							}
							int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
									- footer_tFileInputDelimited_1 < 0 ? 0
									: totalLinetFileInputDelimited_1
											- footer_tFileInputDelimited_1;
							if (lastLinetFileInputDelimited_1 > 0) {
								lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1
										: lastLineTemptFileInputDelimited_1;
							} else {
								lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
							}

							csvReadertFileInputDelimited_1.close();
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_1)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_1[0]);
							}
							csvReadertFileInputDelimited_1
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('"');

							csvReadertFileInputDelimited_1
									.setEscapeChar(csvReadertFileInputDelimited_1
											.getQuoteChar());

						}

						if (limittFileInputDelimited_1 != 0) {
							for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 1; currentLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
						}
						csvReadertFileInputDelimited_1
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_1 != 0
							&& csvReadertFileInputDelimited_1 != null
							&& csvReadertFileInputDelimited_1.readNext()) {

						rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
								.getValues();

						if (rowtFileInputDelimited_1.length == 1
								&& ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_1++;

						if (lastLinetFileInputDelimited_1 > -1
								&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
							break;
						}
						outputLinetFileInputDelimited_1++;
						if (limittFileInputDelimited_1 > 0
								&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
							break;
						}

						from_OE_ONT = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						from_OE_ONT = new from_OE_ONTStruct();
						try {

							char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_1_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_1.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								from_OE_ONT.TARGET_ID = null;

								from_OE_ONT.TREE_LEVEL = null;

								from_OE_ONT.TREE_PATH = null;

								from_OE_ONT.STAGING_PATH = null;

								from_OE_ONT.STAGING_DIMENSION = null;

								from_OE_ONT.C_NAME = null;

								from_OE_ONT.STARTDATE_STAGING_PATH = null;

								from_OE_ONT.ENDDATE_STAGING_PATH = null;

								from_OE_ONT.VISUALATTRIBUTES = null;

								from_OE_ONT.BASECODE = null;

								from_OE_ONT.METADATAXML = null;

								from_OE_ONT.COLUMNDATATYPE = null;

								from_OE_ONT.C_OPERATOR = null;

								from_OE_ONT.C_COMMENT = null;

								from_OE_ONT.TOOLTIP = null;

								from_OE_ONT.UPDATE_DATE = null;

								from_OE_ONT.DOWNLOAD_DATE = null;

								from_OE_ONT.IMPORT_DATE = null;

								from_OE_ONT.SOURCESYSTEM_CD = null;

								from_OE_ONT.VALUETYPE_CD = null;

								from_OE_ONT.M_APPLIED_PATH = null;

								from_OE_ONT.STAGING_M_APPLIED_PATH = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_1 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_1 = 0;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										from_OE_ONT.TARGET_ID = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

									} else {
										from_OE_ONT.TARGET_ID = null;
									}

								} else {
									from_OE_ONT.TARGET_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 1;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										from_OE_ONT.TREE_LEVEL = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

									} else {
										from_OE_ONT.TREE_LEVEL = null;
									}

								} else {
									from_OE_ONT.TREE_LEVEL = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 2;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									from_OE_ONT.TREE_PATH = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									from_OE_ONT.TREE_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 3;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									from_OE_ONT.STAGING_PATH = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									from_OE_ONT.STAGING_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 4;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									from_OE_ONT.STAGING_DIMENSION = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									from_OE_ONT.STAGING_DIMENSION = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 5;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									from_OE_ONT.C_NAME = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									from_OE_ONT.C_NAME = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 6;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									from_OE_ONT.STARTDATE_STAGING_PATH = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									from_OE_ONT.STARTDATE_STAGING_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 7;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									from_OE_ONT.ENDDATE_STAGING_PATH = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									from_OE_ONT.ENDDATE_STAGING_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 8;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									from_OE_ONT.VISUALATTRIBUTES = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									from_OE_ONT.VISUALATTRIBUTES = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 9;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									from_OE_ONT.BASECODE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									from_OE_ONT.BASECODE = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 10;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									from_OE_ONT.METADATAXML = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									from_OE_ONT.METADATAXML = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 11;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									from_OE_ONT.COLUMNDATATYPE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									from_OE_ONT.COLUMNDATATYPE = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 12;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									from_OE_ONT.C_OPERATOR = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									from_OE_ONT.C_OPERATOR = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 13;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									from_OE_ONT.C_COMMENT = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									from_OE_ONT.C_COMMENT = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 14;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									from_OE_ONT.TOOLTIP = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									from_OE_ONT.TOOLTIP = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 15;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										from_OE_ONT.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
														"dd-MM-yyyy");

									} else {
										from_OE_ONT.UPDATE_DATE = null;
									}

								} else {
									from_OE_ONT.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 16;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										from_OE_ONT.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
														"dd-MM-yyyy");

									} else {
										from_OE_ONT.DOWNLOAD_DATE = null;
									}

								} else {
									from_OE_ONT.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 17;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										from_OE_ONT.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
														"dd-MM-yyyy");

									} else {
										from_OE_ONT.IMPORT_DATE = null;
									}

								} else {
									from_OE_ONT.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 18;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									from_OE_ONT.SOURCESYSTEM_CD = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									from_OE_ONT.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 19;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									from_OE_ONT.VALUETYPE_CD = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									from_OE_ONT.VALUETYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 20;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									from_OE_ONT.M_APPLIED_PATH = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									from_OE_ONT.M_APPLIED_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 21;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									from_OE_ONT.STAGING_M_APPLIED_PATH = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									from_OE_ONT.STAGING_M_APPLIED_PATH = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							from_OE_ONT = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "from_OE_ONT"
						if (from_OE_ONT != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "from_src_ont"
							// /////////////////////////////////////////////

							boolean forceLoopfrom_src_ont = false;

							from_src_ontStruct from_src_ontObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_1 = false;

								from_src_ontHashKey.C_FULLNAME = from_OE_ONT.STAGING_PATH;

								from_src_ontHashKey.hashCodeDirty = true;

								tHash_Lookup_from_src_ont
										.lookup(from_src_ontHashKey);

								if (!tHash_Lookup_from_src_ont.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_1 = true;

									forceLoopfrom_src_ont = true;

								} // G_TM_M_090

							} // G_TM_M_020

							else { // G 20 - G 21
								forceLoopfrom_src_ont = true;
							} // G 21

							from_src_ontStruct from_src_ont = null;

							while ((tHash_Lookup_from_src_ont != null && tHash_Lookup_from_src_ont
									.hasNext()) || forceLoopfrom_src_ont) { // G_TM_M_043

								// CALL close loop of lookup 'from_src_ont'

								from_src_ontStruct fromLookup_from_src_ont = null;
								from_src_ont = from_src_ontDefault;

								if (!forceLoopfrom_src_ont) { // G 46

									fromLookup_from_src_ont = tHash_Lookup_from_src_ont
											.next();

									if (fromLookup_from_src_ont != null) {
										from_src_ont = fromLookup_from_src_ont;
									}

								} // G 46

								forceLoopfrom_src_ont = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_1__Struct Var = Var__tMap_1;
									Var.var1 = (from_OE_ONT.BASECODE.split(":").length > 1) ? (from_OE_ONT.BASECODE
											.split(":")[1].equals("xml") ? true
											: false) : false;
									;// ###############################
									// ###############################
									// # Output tables

									target_ont = null;
									target_ont_List.clear();
									to_mod_dim = null;
									to_mod_dim_List.clear();
									out9 = null;

									if (!rejectedInnerJoin_tMap_1) {

										// # Output table : 'target_ont'
										target_ont_tmp.C_HLEVEL = from_OE_ONT.TREE_LEVEL;
										target_ont_tmp.C_FULLNAME = from_OE_ONT.TREE_PATH;
										target_ont_tmp.C_NAME = from_OE_ONT.C_NAME;
										target_ont_tmp.C_SYNONYM_CD = "N";
										target_ont_tmp.C_VISUALATTRIBUTES = from_OE_ONT.VISUALATTRIBUTES;
										target_ont_tmp.C_TOTALNUM = from_src_ont.C_TOTALNUM;
										target_ont_tmp.C_BASECODE = from_OE_ONT.BASECODE;
										target_ont_tmp.C_METADATAXML = from_OE_ONT.METADATAXML;
										target_ont_tmp.C_FACTTABLECOLUMN = from_OE_ONT.STAGING_DIMENSION
												.equalsIgnoreCase("concept_dimension") ? "concept_cd"
												: "modifier_cd";
										target_ont_tmp.C_TABLENAME = from_OE_ONT.STAGING_DIMENSION;
										target_ont_tmp.C_COLUMNNAME = from_OE_ONT.STAGING_DIMENSION
												.equalsIgnoreCase("concept_dimension") ? "concept_path"
												: "modifier_path";
										target_ont_tmp.C_COLUMNDATATYPE = from_src_ont.C_COLUMNDATATYPE;
										target_ont_tmp.C_OPERATOR = from_src_ont.C_OPERATOR;
										target_ont_tmp.C_DIMCODE = from_OE_ONT.TREE_PATH
												.length() > 0 ? from_OE_ONT.TREE_PATH
												: from_OE_ONT.TREE_PATH;
										target_ont_tmp.C_COMMENT = from_OE_ONT.C_COMMENT;
										target_ont_tmp.C_TOOLTIP = from_OE_ONT.TOOLTIP;
										target_ont_tmp.M_APPLIED_PATH = from_OE_ONT.M_APPLIED_PATH;
										target_ont_tmp.UPDATE_DATE = from_src_ont.UPDATE_DATE;
										target_ont_tmp.DOWNLOAD_DATE = from_src_ont.DOWNLOAD_DATE;
										target_ont_tmp.IMPORT_DATE = from_src_ont.IMPORT_DATE;
										target_ont_tmp.SOURCESYSTEM_CD = from_src_ont.SOURCESYSTEM_CD;
										target_ont_tmp.VALUETYPE_CD = from_src_ont.VALUETYPE_CD;
										target_ont_tmp.M_EXCLUSION_CD = from_src_ont.M_EXCLUSION_CD;
										target_ont_tmp.C_PATH = from_OE_ONT.TREE_PATH;
										target_ont_tmp.C_SYMBOL = from_src_ont.C_SYMBOL;
										target_ont_List.add(target_ont_tmp);
										target_ont = target_ont_tmp;

										// # Output table : 'to_mod_dim'
										// # Filter conditions
										if (

										from_OE_ONT.VISUALATTRIBUTES
												.toLowerCase().startsWith("r")

										) {
											to_mod_dim_tmp.MODIFIER_PATH = from_OE_ONT.STAGING_PATH;
											to_mod_dim_tmp.MODIFIER_CD = from_OE_ONT.STAGING_PATH
													.substring(
															0,
															from_OE_ONT.STAGING_PATH
																	.length() - 1)
													.replaceAll("\\\\", "|");
											to_mod_dim_tmp.NAME_CHAR = from_OE_ONT.C_NAME;
											to_mod_dim_tmp.MODIFIER_BLOB = null;
											to_mod_dim_tmp.UPDATE_DATE = from_src_ont.UPDATE_DATE;
											to_mod_dim_tmp.DOWNLOAD_DATE = from_src_ont.DOWNLOAD_DATE;
											to_mod_dim_tmp.IMPORT_DATE = from_src_ont.IMPORT_DATE;
											to_mod_dim_tmp.SOURCESYSTEM_CD = from_src_ont.SOURCESYSTEM_CD;
											to_mod_dim_tmp.UPLOAD_ID = null;
											to_mod_dim_List.add(to_mod_dim_tmp);
											to_mod_dim = to_mod_dim_tmp;
										} // closing filter/reject

										// # Output table : 'out9'
										out9_tmp.TARGET_ID = from_OE_ONT.TARGET_ID;
										out9_tmp.TREE_LEVEL = from_OE_ONT.TREE_LEVEL;
										out9_tmp.TREE_PATH = from_OE_ONT.TREE_PATH;
										out9_tmp.STAGING_PATH = from_OE_ONT.STAGING_PATH;
										out9_tmp.STAGING_DIMENSION = from_OE_ONT.STAGING_DIMENSION;
										out9_tmp.C_NAME = from_OE_ONT.C_NAME;
										out9_tmp.STARTDATE_STAGING_PATH = from_OE_ONT.STARTDATE_STAGING_PATH;
										out9_tmp.ENDDATE_STAGING_PATH = from_OE_ONT.ENDDATE_STAGING_PATH;
										out9_tmp.VISUALATTRIBUTES = from_OE_ONT.VISUALATTRIBUTES;
										out9_tmp.BASECODE = from_OE_ONT.BASECODE;
										out9_tmp.METADATAXML = from_OE_ONT.METADATAXML;
										out9_tmp.COLUMNDATATYPE = from_OE_ONT.COLUMNDATATYPE;
										out9_tmp.C_OPERATOR = from_OE_ONT.C_OPERATOR;
										out9_tmp.C_COMMENT = from_OE_ONT.C_COMMENT;
										out9_tmp.TOOLTIP = from_OE_ONT.TOOLTIP;
										out9_tmp.UPDATE_DATE = from_OE_ONT.UPDATE_DATE;
										out9_tmp.DOWNLOAD_DATE = from_OE_ONT.DOWNLOAD_DATE;
										out9_tmp.IMPORT_DATE = from_OE_ONT.IMPORT_DATE;
										out9_tmp.SOURCESYSTEM_CD = from_OE_ONT.SOURCESYSTEM_CD;
										out9_tmp.VALUETYPE_CD = from_OE_ONT.VALUETYPE_CD;
										out9_tmp.M_APPLIED_PATH = from_OE_ONT.M_APPLIED_PATH;
										out9 = out9_tmp;
									} // closing inner join bracket (1)
										// ###### START REJECTS #####

									// # Output reject table : 'out4'
									// # Filter conditions
									if (rejectedInnerJoin_tMap_1) {
										target_ont_tmp = new target_ontStruct();

										target_ont_tmp.C_HLEVEL = from_OE_ONT.TREE_LEVEL;
										target_ont_tmp.C_FULLNAME = from_OE_ONT.TREE_PATH;
										target_ont_tmp.C_NAME = from_OE_ONT.C_NAME;
										target_ont_tmp.C_SYNONYM_CD = "N";
										target_ont_tmp.C_VISUALATTRIBUTES = from_OE_ONT.VISUALATTRIBUTES;
										target_ont_tmp.C_TOTALNUM = from_src_ont.C_TOTALNUM;
										target_ont_tmp.C_BASECODE = from_OE_ONT.BASECODE;
										target_ont_tmp.C_METADATAXML = from_src_ont.C_METADATAXML;
										target_ont_tmp.C_FACTTABLECOLUMN = "concept_cd";
										target_ont_tmp.C_TABLENAME = "concept_dimension";
										target_ont_tmp.C_COLUMNNAME = "concept_path";
										target_ont_tmp.C_COLUMNDATATYPE = "T";
										target_ont_tmp.C_OPERATOR = "LIKE";
										target_ont_tmp.C_DIMCODE = from_OE_ONT.TREE_PATH
												.length() > 0 ? from_OE_ONT.TREE_PATH
												: from_OE_ONT.TREE_PATH;
										target_ont_tmp.C_COMMENT = from_src_ont.C_COMMENT;
										target_ont_tmp.C_TOOLTIP = from_src_ont.C_TOOLTIP;
										target_ont_tmp.M_APPLIED_PATH = "@";
										target_ont_tmp.UPDATE_DATE = TalendDate
												.getCurrentDate();
										target_ont_tmp.DOWNLOAD_DATE = TalendDate
												.getCurrentDate();
										target_ont_tmp.IMPORT_DATE = TalendDate
												.getCurrentDate();
										target_ont_tmp.SOURCESYSTEM_CD = from_src_ont.SOURCESYSTEM_CD;
										target_ont_tmp.VALUETYPE_CD = from_src_ont.VALUETYPE_CD;
										target_ont_tmp.M_EXCLUSION_CD = from_src_ont.M_EXCLUSION_CD;
										target_ont_tmp.C_PATH = from_OE_ONT.TREE_PATH;
										target_ont_tmp.C_SYMBOL = from_src_ont.C_SYMBOL;
										target_ont_List.add(target_ont_tmp);
										target_ont = target_ont_tmp;
									} // closing filter/reject

									// # Output reject table : 'out6'
									// # Filter conditions
									if (rejectedInnerJoin_tMap_1
											&& (

											from_OE_ONT.VISUALATTRIBUTES
													.toLowerCase()
													.startsWith("r")

											)) {
										to_mod_dim_tmp = new to_mod_dimStruct();

										to_mod_dim_tmp.MODIFIER_PATH = from_OE_ONT.STAGING_PATH;
										to_mod_dim_tmp.MODIFIER_CD = from_OE_ONT.STAGING_PATH
												.substring(
														0,
														from_OE_ONT.STAGING_PATH
																.length() - 1)
												.replaceAll("\\\\", "|");
										to_mod_dim_tmp.NAME_CHAR = from_OE_ONT.C_NAME;
										to_mod_dim_tmp.MODIFIER_BLOB = null;
										to_mod_dim_tmp.UPDATE_DATE = from_src_ont.UPDATE_DATE;
										to_mod_dim_tmp.DOWNLOAD_DATE = from_src_ont.DOWNLOAD_DATE;
										to_mod_dim_tmp.IMPORT_DATE = from_src_ont.IMPORT_DATE;
										to_mod_dim_tmp.SOURCESYSTEM_CD = from_src_ont.SOURCESYSTEM_CD;
										to_mod_dim_tmp.UPLOAD_ID = null;
										to_mod_dim_List.add(to_mod_dim_tmp);
										to_mod_dim = to_mod_dim_tmp;
									} // closing filter/reject
										// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_1 = false;

								tos_count_tMap_1++;

								/**
								 * [tMap_1 main ] stop
								 */
								// Start of branch "target_ont"
								if (target_ont != null) {
									// start of joined table loop
									for (target_ontStruct cur_target_ont : target_ont_List) {
										target_ont = cur_target_ont;

										/**
										 * [tUniqRow_4 main ] start
										 */

										currentComponent = "tUniqRow_4";

										row19 = null;
										finder_tUniqRow_4.C_HLEVEL = target_ont.C_HLEVEL;
										finder_tUniqRow_4.C_FULLNAME = target_ont.C_FULLNAME;
										finder_tUniqRow_4.M_APPLIED_PATH = target_ont.M_APPLIED_PATH;
										finder_tUniqRow_4.hashCodeDirty = true;
										if (!keystUniqRow_4
												.contains(finder_tUniqRow_4)) {
											KeyStruct_tUniqRow_4 new_tUniqRow_4 = new KeyStruct_tUniqRow_4();

											new_tUniqRow_4.C_HLEVEL = target_ont.C_HLEVEL;
											new_tUniqRow_4.C_FULLNAME = target_ont.C_FULLNAME;
											new_tUniqRow_4.M_APPLIED_PATH = target_ont.M_APPLIED_PATH;

											keystUniqRow_4.add(new_tUniqRow_4);
											if (row19 == null) {

												row19 = new row19Struct();
											}
											row19.C_HLEVEL = target_ont.C_HLEVEL;
											row19.C_FULLNAME = target_ont.C_FULLNAME;
											row19.C_NAME = target_ont.C_NAME;
											row19.C_SYNONYM_CD = target_ont.C_SYNONYM_CD;
											row19.C_VISUALATTRIBUTES = target_ont.C_VISUALATTRIBUTES;
											row19.C_TOTALNUM = target_ont.C_TOTALNUM;
											row19.C_BASECODE = target_ont.C_BASECODE;
											row19.C_METADATAXML = target_ont.C_METADATAXML;
											row19.C_FACTTABLECOLUMN = target_ont.C_FACTTABLECOLUMN;
											row19.C_TABLENAME = target_ont.C_TABLENAME;
											row19.C_COLUMNNAME = target_ont.C_COLUMNNAME;
											row19.C_COLUMNDATATYPE = target_ont.C_COLUMNDATATYPE;
											row19.C_OPERATOR = target_ont.C_OPERATOR;
											row19.C_DIMCODE = target_ont.C_DIMCODE;
											row19.C_COMMENT = target_ont.C_COMMENT;
											row19.C_TOOLTIP = target_ont.C_TOOLTIP;
											row19.M_APPLIED_PATH = target_ont.M_APPLIED_PATH;
											row19.UPDATE_DATE = target_ont.UPDATE_DATE;
											row19.DOWNLOAD_DATE = target_ont.DOWNLOAD_DATE;
											row19.IMPORT_DATE = target_ont.IMPORT_DATE;
											row19.SOURCESYSTEM_CD = target_ont.SOURCESYSTEM_CD;
											row19.VALUETYPE_CD = target_ont.VALUETYPE_CD;
											row19.M_EXCLUSION_CD = target_ont.M_EXCLUSION_CD;
											row19.C_PATH = target_ont.C_PATH;
											row19.C_SYMBOL = target_ont.C_SYMBOL;
											nb_uniques_tUniqRow_4++;
										} else {
											nb_duplicates_tUniqRow_4++;
										}

										tos_count_tUniqRow_4++;

										/**
										 * [tUniqRow_4 main ] stop
										 */
										// Start of branch "row19"
										if (row19 != null) {

											/**
											 * [tFileOutputDelimited_4 main ]
											 * start
											 */

											currentComponent = "tFileOutputDelimited_4";

											String[] rowtFileOutputDelimited_4 = new String[25];

											rowtFileOutputDelimited_4[0] = String
													.valueOf(row19.C_HLEVEL);

											rowtFileOutputDelimited_4[1] = row19.C_FULLNAME == null ? ""
													: row19.C_FULLNAME;

											rowtFileOutputDelimited_4[2] = row19.C_NAME == null ? ""
													: row19.C_NAME;

											rowtFileOutputDelimited_4[3] = row19.C_SYNONYM_CD == null ? ""
													: row19.C_SYNONYM_CD;

											rowtFileOutputDelimited_4[4] = row19.C_VISUALATTRIBUTES == null ? ""
													: row19.C_VISUALATTRIBUTES;

											rowtFileOutputDelimited_4[5] = row19.C_TOTALNUM == null ? ""
													: row19.C_TOTALNUM
															.setScale(
																	0,
																	java.math.RoundingMode.HALF_UP)
															.toPlainString();

											rowtFileOutputDelimited_4[6] = row19.C_BASECODE == null ? ""
													: row19.C_BASECODE;

											rowtFileOutputDelimited_4[7] = row19.C_METADATAXML == null ? ""
													: row19.C_METADATAXML;

											rowtFileOutputDelimited_4[8] = row19.C_FACTTABLECOLUMN == null ? ""
													: row19.C_FACTTABLECOLUMN;

											rowtFileOutputDelimited_4[9] = row19.C_TABLENAME == null ? ""
													: row19.C_TABLENAME;

											rowtFileOutputDelimited_4[10] = row19.C_COLUMNNAME == null ? ""
													: row19.C_COLUMNNAME;

											rowtFileOutputDelimited_4[11] = row19.C_COLUMNDATATYPE == null ? ""
													: row19.C_COLUMNDATATYPE;

											rowtFileOutputDelimited_4[12] = row19.C_OPERATOR == null ? ""
													: row19.C_OPERATOR;

											rowtFileOutputDelimited_4[13] = row19.C_DIMCODE == null ? ""
													: row19.C_DIMCODE;

											rowtFileOutputDelimited_4[14] = row19.C_COMMENT == null ? ""
													: String.valueOf(row19.C_COMMENT);

											rowtFileOutputDelimited_4[15] = row19.C_TOOLTIP == null ? ""
													: row19.C_TOOLTIP;

											rowtFileOutputDelimited_4[16] = row19.M_APPLIED_PATH == null ? ""
													: row19.M_APPLIED_PATH;

											rowtFileOutputDelimited_4[17] = row19.UPDATE_DATE == null ? ""
													: FormatterUtils
															.format_Date(
																	row19.UPDATE_DATE,
																	"dd-MM-yyyy");

											rowtFileOutputDelimited_4[18] = row19.DOWNLOAD_DATE == null ? ""
													: FormatterUtils
															.format_Date(
																	row19.DOWNLOAD_DATE,
																	"dd-MM-yyyy");

											rowtFileOutputDelimited_4[19] = row19.IMPORT_DATE == null ? ""
													: FormatterUtils
															.format_Date(
																	row19.IMPORT_DATE,
																	"dd-MM-yyyy");

											rowtFileOutputDelimited_4[20] = row19.SOURCESYSTEM_CD == null ? ""
													: row19.SOURCESYSTEM_CD;

											rowtFileOutputDelimited_4[21] = row19.VALUETYPE_CD == null ? ""
													: row19.VALUETYPE_CD;

											rowtFileOutputDelimited_4[22] = row19.M_EXCLUSION_CD == null ? ""
													: row19.M_EXCLUSION_CD;

											rowtFileOutputDelimited_4[23] = row19.C_PATH == null ? ""
													: row19.C_PATH;

											rowtFileOutputDelimited_4[24] = row19.C_SYMBOL == null ? ""
													: row19.C_SYMBOL;

											nb_line_tFileOutputDelimited_4++;
											resourceMap
													.put("nb_line_tFileOutputDelimited_4",
															nb_line_tFileOutputDelimited_4);
											CsvWritertFileOutputDelimited_4
													.writeNext(rowtFileOutputDelimited_4);

											tos_count_tFileOutputDelimited_4++;

											/**
											 * [tFileOutputDelimited_4 main ]
											 * stop
											 */

										} // End of branch "row19"

									} // end of joined table loop
									target_ont_List.clear();

								} // End of branch "target_ont"

								// Start of branch "to_mod_dim"
								if (to_mod_dim != null) {
									// start of joined table loop
									for (to_mod_dimStruct cur_to_mod_dim : to_mod_dim_List) {
										to_mod_dim = cur_to_mod_dim;

										/**
										 * [tJavaRow_4 main ] start
										 */

										currentComponent = "tJavaRow_4";

										// Code generated according to input
										// schema and output schema
										row11.MODIFIER_PATH = to_mod_dim.MODIFIER_PATH;

										if (to_mod_dim.MODIFIER_CD
												.lastIndexOf("|") > 0) {
											StringBuilder b = new StringBuilder(
													to_mod_dim.MODIFIER_CD);
											b.replace(
													to_mod_dim.MODIFIER_CD
															.lastIndexOf("|"),
													to_mod_dim.MODIFIER_CD
															.lastIndexOf("|") + 1,
													":");
											row11.MODIFIER_CD = b.toString();
										} else {
											row11.MODIFIER_CD = to_mod_dim.MODIFIER_CD;

										}

										row11.NAME_CHAR = to_mod_dim.NAME_CHAR;
										row11.MODIFIER_BLOB = to_mod_dim.MODIFIER_BLOB;
										row11.UPDATE_DATE = to_mod_dim.UPDATE_DATE;
										row11.DOWNLOAD_DATE = to_mod_dim.DOWNLOAD_DATE;
										row11.IMPORT_DATE = to_mod_dim.IMPORT_DATE;
										row11.SOURCESYSTEM_CD = to_mod_dim.SOURCESYSTEM_CD;
										row11.UPLOAD_ID = to_mod_dim.UPLOAD_ID;

										nb_line_tJavaRow_4++;

										tos_count_tJavaRow_4++;

										/**
										 * [tJavaRow_4 main ] stop
										 */

										/**
										 * [tMap_19 main ] start
										 */

										currentComponent = "tMap_19";

										boolean hasCasePrimitiveKeyWithNull_tMap_19 = false;

										// ###############################
										// # Input tables (lookups)
										boolean rejectedInnerJoin_tMap_19 = false;
										boolean mainRowRejected_tMap_19 = false;

										// /////////////////////////////////////////////
										// Starting Lookup Table "row47"
										// /////////////////////////////////////////////

										boolean forceLooprow47 = false;

										row47Struct row47ObjectFromLookup = null;

										if (!rejectedInnerJoin_tMap_19) { // G_TM_M_020

											hasCasePrimitiveKeyWithNull_tMap_19 = false;

											row47HashKey.MODIFIER_PATH = row11.MODIFIER_PATH;

											row47HashKey.hashCodeDirty = true;

											tHash_Lookup_row47
													.lookup(row47HashKey);

										} // G_TM_M_020

										if (tHash_Lookup_row47 != null
												&& tHash_Lookup_row47
														.getCount(row47HashKey) > 1) { // G
																						// 071

											// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row47' and it contains more one result from keys :  row47.MODIFIER_PATH = '"
											// + row47HashKey.MODIFIER_PATH +
											// "'");
										} // G 071

										row47Struct row47 = null;

										row47Struct fromLookup_row47 = null;
										row47 = row47Default;

										if (tHash_Lookup_row47 != null
												&& tHash_Lookup_row47.hasNext()) { // G
																					// 099

											fromLookup_row47 = tHash_Lookup_row47
													.next();

										} // G 099

										if (fromLookup_row47 != null) {
											row47 = fromLookup_row47;
										}

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_19__Struct Var = Var__tMap_19;// ###############################
											// ###############################
											// # Output tables

											copyOfto_conc_dim = null;

											// # Output table :
											// 'copyOfto_conc_dim'
											copyOfto_conc_dim_tmp.MODIFIER_PATH = row11.MODIFIER_PATH;
											copyOfto_conc_dim_tmp.MODIFIER_CD = row47.MODIFIER_CD;
											copyOfto_conc_dim_tmp.NAME_CHAR = row11.NAME_CHAR;
											copyOfto_conc_dim_tmp.MODIFIER_BLOB = row11.MODIFIER_BLOB;
											copyOfto_conc_dim_tmp.UPDATE_DATE = row11.UPDATE_DATE;
											copyOfto_conc_dim_tmp.DOWNLOAD_DATE = row11.DOWNLOAD_DATE;
											copyOfto_conc_dim_tmp.IMPORT_DATE = row11.IMPORT_DATE;
											copyOfto_conc_dim_tmp.SOURCESYSTEM_CD = row11.SOURCESYSTEM_CD;
											copyOfto_conc_dim_tmp.UPLOAD_ID = row11.UPLOAD_ID;
											copyOfto_conc_dim = copyOfto_conc_dim_tmp;
											// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_19 = false;

										tos_count_tMap_19++;

										/**
										 * [tMap_19 main ] stop
										 */
										// Start of branch "copyOfto_conc_dim"
										if (copyOfto_conc_dim != null) {

											/**
											 * [tUniqRow_1 main ] start
											 */

											currentComponent = "tUniqRow_1";

											row12.MODIFIER_PATH = copyOfto_conc_dim.MODIFIER_PATH;
											row12.MODIFIER_CD = copyOfto_conc_dim.MODIFIER_CD;
											row12.NAME_CHAR = copyOfto_conc_dim.NAME_CHAR;
											row12.MODIFIER_BLOB = copyOfto_conc_dim.MODIFIER_BLOB;
											row12.UPDATE_DATE = copyOfto_conc_dim.UPDATE_DATE;
											row12.DOWNLOAD_DATE = copyOfto_conc_dim.DOWNLOAD_DATE;
											row12.IMPORT_DATE = copyOfto_conc_dim.IMPORT_DATE;
											row12.SOURCESYSTEM_CD = copyOfto_conc_dim.SOURCESYSTEM_CD;
											row12.UPLOAD_ID = copyOfto_conc_dim.UPLOAD_ID;

											tos_count_tUniqRow_1++;

											/**
											 * [tUniqRow_1 main ] stop
											 */
											// Start of branch "row12"
											if (row12 != null) {

												/**
												 * [tFileOutputDelimited_29 main
												 * ] start
												 */

												currentComponent = "tFileOutputDelimited_29";

												String[] rowtFileOutputDelimited_29 = new String[9];

												rowtFileOutputDelimited_29[0] = row12.MODIFIER_PATH == null ? ""
														: row12.MODIFIER_PATH;

												rowtFileOutputDelimited_29[1] = row12.MODIFIER_CD == null ? ""
														: row12.MODIFIER_CD;

												rowtFileOutputDelimited_29[2] = row12.NAME_CHAR == null ? ""
														: row12.NAME_CHAR;

												rowtFileOutputDelimited_29[3] = row12.MODIFIER_BLOB == null ? ""
														: row12.MODIFIER_BLOB;

												rowtFileOutputDelimited_29[4] = row12.UPDATE_DATE == null ? ""
														: FormatterUtils
																.format_Date(
																		row12.UPDATE_DATE,
																		"yyyy-MM-dd");

												rowtFileOutputDelimited_29[5] = row12.DOWNLOAD_DATE == null ? ""
														: FormatterUtils
																.format_Date(
																		row12.DOWNLOAD_DATE,
																		"yyyy-MM-dd");

												rowtFileOutputDelimited_29[6] = row12.IMPORT_DATE == null ? ""
														: FormatterUtils
																.format_Date(
																		row12.IMPORT_DATE,
																		"yyyy-MM-dd");

												rowtFileOutputDelimited_29[7] = row12.SOURCESYSTEM_CD == null ? ""
														: row12.SOURCESYSTEM_CD;

												rowtFileOutputDelimited_29[8] = row12.UPLOAD_ID == null ? ""
														: row12.UPLOAD_ID;

												nb_line_tFileOutputDelimited_29++;
												resourceMap
														.put("nb_line_tFileOutputDelimited_29",
																nb_line_tFileOutputDelimited_29);
												CsvWritertFileOutputDelimited_29
														.writeNext(rowtFileOutputDelimited_29);

												tos_count_tFileOutputDelimited_29++;

												/**
												 * [tFileOutputDelimited_29 main
												 * ] stop
												 */

											} // End of branch "row12"

										} // End of branch "copyOfto_conc_dim"

									} // end of joined table loop
									to_mod_dim_List.clear();

								} // End of branch "to_mod_dim"

								// Start of branch "out9"
								if (out9 != null) {

									/**
									 * [tMap_21 main ] start
									 */

									currentComponent = "tMap_21";

									boolean hasCasePrimitiveKeyWithNull_tMap_21 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_21 = false;
									boolean mainRowRejected_tMap_21 = false;

									// /////////////////////////////////////////////
									// Starting Lookup Table "row49"
									// /////////////////////////////////////////////

									boolean forceLooprow49 = false;

									row49Struct row49ObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_21) { // G_TM_M_020

										hasCasePrimitiveKeyWithNull_tMap_21 = false;

										row49HashKey.CONCEPT_PATH = out9.STAGING_PATH;

										row49HashKey.hashCodeDirty = true;

										tHash_Lookup_row49.lookup(row49HashKey);

										if (!tHash_Lookup_row49.hasNext()) { // G_TM_M_090

											rejectedInnerJoin_tMap_21 = true;

											forceLooprow49 = true;

										} // G_TM_M_090

									} // G_TM_M_020

									else { // G 20 - G 21
										forceLooprow49 = true;
									} // G 21

									row49Struct row49 = null;

									while ((tHash_Lookup_row49 != null && tHash_Lookup_row49
											.hasNext()) || forceLooprow49) { // G_TM_M_043

										// CALL close loop of lookup 'row49'

										row49Struct fromLookup_row49 = null;
										row49 = row49Default;

										if (!forceLooprow49) { // G 46

											fromLookup_row49 = tHash_Lookup_row49
													.next();

											if (fromLookup_row49 != null) {
												row49 = fromLookup_row49;
											}

										} // G 46

										forceLooprow49 = false;

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_21__Struct Var = Var__tMap_21;// ###############################
											// ###############################
											// # Output tables

											toCD_Mod = null;
											toCD_Mod_List.clear();

											if (!rejectedInnerJoin_tMap_21) {

												// # Output table : 'toCD_Mod'
												toCD_Mod_tmp.CONCEPT_PATH = out9.TREE_PATH;
												toCD_Mod_tmp.CONCEPT_CD = row49.CONCEPT_CD;
												toCD_Mod_tmp.NAME_CHAR = out9.C_NAME;
												toCD_Mod_tmp.CONCEPT_BLOB = row49.CONCEPT_BLOB;
												toCD_Mod_tmp.UPDATE_DATE = out9.UPDATE_DATE;
												toCD_Mod_tmp.DOWNLOAD_DATE = out9.DOWNLOAD_DATE;
												toCD_Mod_tmp.IMPORT_DATE = out9.IMPORT_DATE;
												toCD_Mod_tmp.SOURCESYSTEM_CD = out9.SOURCESYSTEM_CD;
												toCD_Mod_tmp.UPLOAD_ID = row49.UPLOAD_ID;
												toCD_Mod_List.add(toCD_Mod_tmp);
												toCD_Mod = toCD_Mod_tmp;
											} // closing inner join bracket (1)
												// ###### START REJECTS #####

											// # Output reject table : 'out7'
											// # Filter conditions
											if (rejectedInnerJoin_tMap_21) {
												toCD_Mod_tmp = new toCD_ModStruct();

												toCD_Mod_tmp.CONCEPT_PATH = out9.TREE_PATH;
												toCD_Mod_tmp.CONCEPT_CD = out9.BASECODE;
												toCD_Mod_tmp.NAME_CHAR = out9.C_NAME;
												toCD_Mod_tmp.CONCEPT_BLOB = null;
												toCD_Mod_tmp.UPDATE_DATE = out9.UPDATE_DATE;
												toCD_Mod_tmp.DOWNLOAD_DATE = out9.DOWNLOAD_DATE;
												toCD_Mod_tmp.IMPORT_DATE = out9.IMPORT_DATE;
												toCD_Mod_tmp.SOURCESYSTEM_CD = out9.SOURCESYSTEM_CD;
												toCD_Mod_tmp.UPLOAD_ID = null;
												toCD_Mod_List.add(toCD_Mod_tmp);
												toCD_Mod = toCD_Mod_tmp;
											} // closing filter/reject
												// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_21 = false;

										tos_count_tMap_21++;

										/**
										 * [tMap_21 main ] stop
										 */
										// Start of branch "toCD_Mod"
										if (toCD_Mod != null) {
											// start of joined table loop
											for (toCD_ModStruct cur_toCD_Mod : toCD_Mod_List) {
												toCD_Mod = cur_toCD_Mod;

												/**
												 * [tUnite_1 main ] start
												 */

												currentComponent = "tUnite_1";

												// ////////

												// for output
												row21 = new row21Struct();

												row21.CONCEPT_PATH = toCD_Mod.CONCEPT_PATH;
												row21.CONCEPT_CD = toCD_Mod.CONCEPT_CD;
												row21.NAME_CHAR = toCD_Mod.NAME_CHAR;
												row21.CONCEPT_BLOB = toCD_Mod.CONCEPT_BLOB;
												row21.UPDATE_DATE = toCD_Mod.UPDATE_DATE;
												row21.DOWNLOAD_DATE = toCD_Mod.DOWNLOAD_DATE;
												row21.IMPORT_DATE = toCD_Mod.IMPORT_DATE;
												row21.SOURCESYSTEM_CD = toCD_Mod.SOURCESYSTEM_CD;
												row21.UPLOAD_ID = toCD_Mod.UPLOAD_ID;

												nb_line_tUnite_1++;

												// ////////

												tos_count_tUnite_1++;

												/**
												 * [tUnite_1 main ] stop
												 */

												/**
												 * [tUniqRow_12 main ] start
												 */

												currentComponent = "tUniqRow_12";

												row48 = null;
												if (row21.CONCEPT_PATH == null) {
													finder_tUniqRow_12.CONCEPT_PATH = null;
												} else {
													finder_tUniqRow_12.CONCEPT_PATH = row21.CONCEPT_PATH
															.toLowerCase();
												}
												finder_tUniqRow_12.hashCodeDirty = true;
												if (!keystUniqRow_12
														.contains(finder_tUniqRow_12)) {
													KeyStruct_tUniqRow_12 new_tUniqRow_12 = new KeyStruct_tUniqRow_12();

													if (row21.CONCEPT_PATH == null) {
														new_tUniqRow_12.CONCEPT_PATH = null;
													} else {
														new_tUniqRow_12.CONCEPT_PATH = row21.CONCEPT_PATH
																.toLowerCase();
													}

													keystUniqRow_12
															.add(new_tUniqRow_12);
													if (row48 == null) {

														row48 = new row48Struct();
													}
													row48.CONCEPT_PATH = row21.CONCEPT_PATH;
													row48.CONCEPT_CD = row21.CONCEPT_CD;
													row48.NAME_CHAR = row21.NAME_CHAR;
													row48.CONCEPT_BLOB = row21.CONCEPT_BLOB;
													row48.UPDATE_DATE = row21.UPDATE_DATE;
													row48.DOWNLOAD_DATE = row21.DOWNLOAD_DATE;
													row48.IMPORT_DATE = row21.IMPORT_DATE;
													row48.SOURCESYSTEM_CD = row21.SOURCESYSTEM_CD;
													row48.UPLOAD_ID = row21.UPLOAD_ID;
													nb_uniques_tUniqRow_12++;
												} else {
													nb_duplicates_tUniqRow_12++;
												}

												tos_count_tUniqRow_12++;

												/**
												 * [tUniqRow_12 main ] stop
												 */
												// Start of branch "row48"
												if (row48 != null) {

													/**
													 * [tFileOutputDelimited_32
													 * main ] start
													 */

													currentComponent = "tFileOutputDelimited_32";

													String[] rowtFileOutputDelimited_32 = new String[9];

													rowtFileOutputDelimited_32[0] = row48.CONCEPT_PATH == null ? ""
															: row48.CONCEPT_PATH;

													rowtFileOutputDelimited_32[1] = row48.CONCEPT_CD == null ? ""
															: row48.CONCEPT_CD;

													rowtFileOutputDelimited_32[2] = row48.NAME_CHAR == null ? ""
															: row48.NAME_CHAR;

													rowtFileOutputDelimited_32[3] = row48.CONCEPT_BLOB == null ? ""
															: row48.CONCEPT_BLOB;

													rowtFileOutputDelimited_32[4] = row48.UPDATE_DATE == null ? ""
															: FormatterUtils
																	.format_Date(
																			row48.UPDATE_DATE,
																			"yyyy-MM-dd");

													rowtFileOutputDelimited_32[5] = row48.DOWNLOAD_DATE == null ? ""
															: FormatterUtils
																	.format_Date(
																			row48.DOWNLOAD_DATE,
																			"yyyy-MM-dd");

													rowtFileOutputDelimited_32[6] = row48.IMPORT_DATE == null ? ""
															: FormatterUtils
																	.format_Date(
																			row48.IMPORT_DATE,
																			"yyyy-MM-dd");

													rowtFileOutputDelimited_32[7] = row48.SOURCESYSTEM_CD == null ? ""
															: row48.SOURCESYSTEM_CD;

													rowtFileOutputDelimited_32[8] = row48.UPLOAD_ID == null ? ""
															: row48.UPLOAD_ID;

													nb_line_tFileOutputDelimited_32++;
													resourceMap
															.put("nb_line_tFileOutputDelimited_32",
																	nb_line_tFileOutputDelimited_32);
													CsvWritertFileOutputDelimited_32
															.writeNext(rowtFileOutputDelimited_32);

													tos_count_tFileOutputDelimited_32++;

													/**
													 * [tFileOutputDelimited_32
													 * main ] stop
													 */

												} // End of branch "row48"

											} // end of joined table loop
											toCD_Mod_List.clear();

										} // End of branch "toCD_Mod"

									} // close loop of lookup 'row49' //
										// G_TM_M_043

								} // End of branch "out9"

							} // close loop of lookup 'from_src_ont' //
								// G_TM_M_043

						} // End of branch "from_OE_ONT"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						nb_line_tFileInputDelimited_1++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_1 != null) {
							csvReadertFileInputDelimited_1.close();
						}
					}
					if (csvReadertFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								nb_line_tFileInputDelimited_1);
					}

				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_from_src_ont != null) {
					tHash_Lookup_from_src_ont.endGet();
				}
				globalMap.remove("tHash_Lookup_from_src_ont");

				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tUniqRow_4 end ] start
				 */

				currentComponent = "tUniqRow_4";

				globalMap.put("tUniqRow_4_NB_UNIQUES", nb_uniques_tUniqRow_4);
				globalMap.put("tUniqRow_4_NB_DUPLICATES",
						nb_duplicates_tUniqRow_4);

				ok_Hash.put("tUniqRow_4", true);
				end_Hash.put("tUniqRow_4", System.currentTimeMillis());

				/**
				 * [tUniqRow_4 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 end ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (CsvWritertFileOutputDelimited_4 != null) {
					CsvWritertFileOutputDelimited_4.close();
				}

				globalMap.put("tFileOutputDelimited_4_NB_LINE",
						nb_line_tFileOutputDelimited_4);

				resourceMap.put("finish_tFileOutputDelimited_4", true);

				ok_Hash.put("tFileOutputDelimited_4", true);
				end_Hash.put("tFileOutputDelimited_4",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_4 end ] stop
				 */

				/**
				 * [tJavaRow_4 end ] start
				 */

				currentComponent = "tJavaRow_4";

				globalMap.put("tJavaRow_4_NB_LINE", nb_line_tJavaRow_4);

				ok_Hash.put("tJavaRow_4", true);
				end_Hash.put("tJavaRow_4", System.currentTimeMillis());

				/**
				 * [tJavaRow_4 end ] stop
				 */

				/**
				 * [tMap_19 end ] start
				 */

				currentComponent = "tMap_19";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row47 != null) {
					tHash_Lookup_row47.endGet();
				}
				globalMap.remove("tHash_Lookup_row47");

				// ###############################

				ok_Hash.put("tMap_19", true);
				end_Hash.put("tMap_19", System.currentTimeMillis());

				/**
				 * [tMap_19 end ] stop
				 */

				/**
				 * [tUniqRow_1 end ] start
				 */

				currentComponent = "tUniqRow_1";

				globalMap.put("tUniqRow_1_NB_UNIQUES", nb_uniques_tUniqRow_1);
				globalMap.put("tUniqRow_1_NB_DUPLICATES",
						nb_duplicates_tUniqRow_1);

				ok_Hash.put("tUniqRow_1", true);
				end_Hash.put("tUniqRow_1", System.currentTimeMillis());

				/**
				 * [tUniqRow_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_29 end ] start
				 */

				currentComponent = "tFileOutputDelimited_29";

				if (CsvWritertFileOutputDelimited_29 != null) {
					CsvWritertFileOutputDelimited_29.close();
				}

				globalMap.put("tFileOutputDelimited_29_NB_LINE",
						nb_line_tFileOutputDelimited_29);

				resourceMap.put("finish_tFileOutputDelimited_29", true);

				ok_Hash.put("tFileOutputDelimited_29", true);
				end_Hash.put("tFileOutputDelimited_29",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_29 end ] stop
				 */

				/**
				 * [tMap_21 end ] start
				 */

				currentComponent = "tMap_21";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row49 != null) {
					tHash_Lookup_row49.endGet();
				}
				globalMap.remove("tHash_Lookup_row49");

				// ###############################

				ok_Hash.put("tMap_21", true);
				end_Hash.put("tMap_21", System.currentTimeMillis());

				/**
				 * [tMap_21 end ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row51Struct> tHash_Lookup_row51 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row51Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row51Struct>) globalMap
						.get("tHash_Lookup_row51"));

				row51Struct row51HashKey = new row51Struct();
				row51Struct row51Default = new row51Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				toCD2Struct toCD2_tmp = new toCD2Struct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_8 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_8", false);
				start_Hash.put("tFileInputDelimited_8",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_8";

				int tos_count_tFileInputDelimited_8 = 0;

				int nb_line_tFileInputDelimited_8 = 0;
				int footer_tFileInputDelimited_8 = 0;
				int totalLinetFileInputDelimited_8 = 0;
				int limittFileInputDelimited_8 = -1;
				int lastLinetFileInputDelimited_8 = -1;

				char fieldSeparator_tFileInputDelimited_8[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_8 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_8[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_8 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_8 = /**
				 * Start field
				 * tFileInputDelimited_8:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_1_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_8:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_8 = null;

				try {

					String[] rowtFileInputDelimited_8 = null;
					int currentLinetFileInputDelimited_8 = 0;
					int outputLinetFileInputDelimited_8 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_8 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_8 = 0;
							if (footer_value_tFileInputDelimited_8 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_8,
									fieldSeparator_tFileInputDelimited_8[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_8)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_8[0]);
						}

						csvReadertFileInputDelimited_8.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_8[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_8[0] != '\r'))
							csvReadertFileInputDelimited_8.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_8[0]);

						csvReadertFileInputDelimited_8.setQuoteChar('"');

						csvReadertFileInputDelimited_8
								.setEscapeChar(csvReadertFileInputDelimited_8
										.getQuoteChar());

						if (footer_tFileInputDelimited_8 > 0) {
							for (totalLinetFileInputDelimited_8 = 0; totalLinetFileInputDelimited_8 < 1; totalLinetFileInputDelimited_8++) {
								csvReadertFileInputDelimited_8.readNext();
							}
							csvReadertFileInputDelimited_8
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_8.readNext()) {

								rowtFileInputDelimited_8 = csvReadertFileInputDelimited_8
										.getValues();
								if (!(rowtFileInputDelimited_8.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_8[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_8++;

								}

							}
							int lastLineTemptFileInputDelimited_8 = totalLinetFileInputDelimited_8
									- footer_tFileInputDelimited_8 < 0 ? 0
									: totalLinetFileInputDelimited_8
											- footer_tFileInputDelimited_8;
							if (lastLinetFileInputDelimited_8 > 0) {
								lastLinetFileInputDelimited_8 = lastLinetFileInputDelimited_8 < lastLineTemptFileInputDelimited_8 ? lastLinetFileInputDelimited_8
										: lastLineTemptFileInputDelimited_8;
							} else {
								lastLinetFileInputDelimited_8 = lastLineTemptFileInputDelimited_8;
							}

							csvReadertFileInputDelimited_8.close();
							if (filename_tFileInputDelimited_8 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_8,
										fieldSeparator_tFileInputDelimited_8[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_8)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_8[0]);
							}
							csvReadertFileInputDelimited_8
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_8[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_8[0] != '\r'))
								csvReadertFileInputDelimited_8
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_8[0]);

							csvReadertFileInputDelimited_8.setQuoteChar('"');

							csvReadertFileInputDelimited_8
									.setEscapeChar(csvReadertFileInputDelimited_8
											.getQuoteChar());

						}

						if (limittFileInputDelimited_8 != 0) {
							for (currentLinetFileInputDelimited_8 = 0; currentLinetFileInputDelimited_8 < 1; currentLinetFileInputDelimited_8++) {
								csvReadertFileInputDelimited_8.readNext();
							}
						}
						csvReadertFileInputDelimited_8
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_8 != 0
							&& csvReadertFileInputDelimited_8 != null
							&& csvReadertFileInputDelimited_8.readNext()) {

						rowtFileInputDelimited_8 = csvReadertFileInputDelimited_8
								.getValues();

						if (rowtFileInputDelimited_8.length == 1
								&& ("\015").equals(rowtFileInputDelimited_8[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_8++;

						if (lastLinetFileInputDelimited_8 > -1
								&& currentLinetFileInputDelimited_8 > lastLinetFileInputDelimited_8) {
							break;
						}
						outputLinetFileInputDelimited_8++;
						if (limittFileInputDelimited_8 > 0
								&& outputLinetFileInputDelimited_8 > limittFileInputDelimited_8) {
							break;
						}

						row50 = null;

						boolean whetherReject_tFileInputDelimited_8 = false;
						row50 = new row50Struct();
						try {

							char fieldSeparator_tFileInputDelimited_8_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_8_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_8.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_8[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row50.TARGET_ID = null;

								row50.TREE_LEVEL = null;

								row50.TREE_PATH = null;

								row50.STAGING_PATH = null;

								row50.STAGING_DIMENSION = null;

								row50.C_NAME = null;

								row50.STARTDATE_STAGING_PATH = null;

								row50.ENDDATE_STAGING_PATH = null;

								row50.VISUALATTRIBUTES = null;

								row50.BASECODE = null;

								row50.METADATAXML = null;

								row50.COLUMNDATATYPE = null;

								row50.C_OPERATOR = null;

								row50.C_COMMENT = null;

								row50.TOOLTIP = null;

								row50.UPDATE_DATE = null;

								row50.DOWNLOAD_DATE = null;

								row50.IMPORT_DATE = null;

								row50.SOURCESYSTEM_CD = null;

								row50.VALUETYPE_CD = null;

								row50.M_APPLIED_PATH = null;

								row50.STAGING_M_APPLIED_PATH = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_8 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_8 = 0;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									if (rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8]
											.length() > 0) {

										row50.TARGET_ID = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8]);

									} else {
										row50.TARGET_ID = null;
									}

								} else {
									row50.TARGET_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 1;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									if (rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8]
											.length() > 0) {

										row50.TREE_LEVEL = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8]);

									} else {
										row50.TREE_LEVEL = null;
									}

								} else {
									row50.TREE_LEVEL = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 2;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row50.TREE_PATH = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row50.TREE_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 3;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row50.STAGING_PATH = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row50.STAGING_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 4;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row50.STAGING_DIMENSION = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row50.STAGING_DIMENSION = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 5;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row50.C_NAME = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row50.C_NAME = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 6;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row50.STARTDATE_STAGING_PATH = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row50.STARTDATE_STAGING_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 7;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row50.ENDDATE_STAGING_PATH = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row50.ENDDATE_STAGING_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 8;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row50.VISUALATTRIBUTES = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row50.VISUALATTRIBUTES = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 9;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row50.BASECODE = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row50.BASECODE = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 10;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row50.METADATAXML = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row50.METADATAXML = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 11;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row50.COLUMNDATATYPE = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row50.COLUMNDATATYPE = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 12;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row50.C_OPERATOR = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row50.C_OPERATOR = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 13;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row50.C_COMMENT = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row50.C_COMMENT = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 14;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row50.TOOLTIP = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row50.TOOLTIP = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 15;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									if (rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8]
											.length() > 0) {

										row50.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8],
														"dd-MM-yyyy");

									} else {
										row50.UPDATE_DATE = null;
									}

								} else {
									row50.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 16;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									if (rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8]
											.length() > 0) {

										row50.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8],
														"dd-MM-yyyy");

									} else {
										row50.DOWNLOAD_DATE = null;
									}

								} else {
									row50.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 17;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									if (rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8]
											.length() > 0) {

										row50.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8],
														"dd-MM-yyyy");

									} else {
										row50.IMPORT_DATE = null;
									}

								} else {
									row50.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 18;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row50.SOURCESYSTEM_CD = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row50.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 19;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row50.VALUETYPE_CD = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row50.VALUETYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 20;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row50.M_APPLIED_PATH = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row50.M_APPLIED_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 21;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row50.STAGING_M_APPLIED_PATH = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row50.STAGING_M_APPLIED_PATH = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_8 = true;

							System.err.println(e.getMessage());
							row50 = null;

						}

						/**
						 * [tFileInputDelimited_8 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_8 main ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						tos_count_tFileInputDelimited_8++;

						/**
						 * [tFileInputDelimited_8 main ] stop
						 */
						// Start of branch "row50"
						if (row50 != null) {

							/**
							 * [tMap_2 main ] start
							 */

							currentComponent = "tMap_2";

							boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_2 = false;
							boolean mainRowRejected_tMap_2 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row51"
							// /////////////////////////////////////////////

							boolean forceLooprow51 = false;

							row51Struct row51ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_2 = false;

								row51HashKey.CONCEPT_PATH = row50.M_APPLIED_PATH;

								row51HashKey.hashCodeDirty = true;

								tHash_Lookup_row51.lookup(row51HashKey);

								if (!tHash_Lookup_row51.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_2 = true;

									forceLooprow51 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							else { // G 20 - G 21
								forceLooprow51 = true;
							} // G 21

							row51Struct row51 = null;

							while ((tHash_Lookup_row51 != null && tHash_Lookup_row51
									.hasNext()) || forceLooprow51) { // G_TM_M_043

								// CALL close loop of lookup 'row51'

								row51Struct fromLookup_row51 = null;
								row51 = row51Default;

								if (!forceLooprow51) { // G 46

									fromLookup_row51 = tHash_Lookup_row51
											.next();

									if (fromLookup_row51 != null) {
										row51 = fromLookup_row51;
									}

								} // G 46

								forceLooprow51 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
									// ###############################
									// # Output tables

									toCD2 = null;

									if (!rejectedInnerJoin_tMap_2) {

										// # Output table : 'toCD2'
										toCD2_tmp.CONCEPT_PATH = row51.CONCEPT_PATH;
										toCD2_tmp.CONCEPT_CD = row51.CONCEPT_CD;
										toCD2_tmp.NAME_CHAR = row51.NAME_CHAR;
										toCD2_tmp.CONCEPT_BLOB = row51.CONCEPT_BLOB;
										toCD2_tmp.UPDATE_DATE = row51.UPDATE_DATE;
										toCD2_tmp.DOWNLOAD_DATE = row51.DOWNLOAD_DATE;
										toCD2_tmp.IMPORT_DATE = row51.IMPORT_DATE;
										toCD2_tmp.SOURCESYSTEM_CD = row51.SOURCESYSTEM_CD;
										toCD2_tmp.UPLOAD_ID = row51.UPLOAD_ID;
										toCD2 = toCD2_tmp;
									} // closing inner join bracket (2)
										// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_2 = false;

								tos_count_tMap_2++;

								/**
								 * [tMap_2 main ] stop
								 */
								// Start of branch "toCD2"
								if (toCD2 != null) {

									/**
									 * [tUnite_1 main ] start
									 */

									currentComponent = "tUnite_1";

									// ////////

									// for output
									row21 = new row21Struct();

									row21.CONCEPT_PATH = toCD2.CONCEPT_PATH;
									row21.CONCEPT_CD = toCD2.CONCEPT_CD;
									row21.NAME_CHAR = toCD2.NAME_CHAR;
									row21.CONCEPT_BLOB = toCD2.CONCEPT_BLOB;
									row21.UPDATE_DATE = toCD2.UPDATE_DATE;
									row21.DOWNLOAD_DATE = toCD2.DOWNLOAD_DATE;
									row21.IMPORT_DATE = toCD2.IMPORT_DATE;
									row21.SOURCESYSTEM_CD = toCD2.SOURCESYSTEM_CD;
									row21.UPLOAD_ID = toCD2.UPLOAD_ID;

									nb_line_tUnite_1++;

									// ////////

									tos_count_tUnite_1++;

									/**
									 * [tUnite_1 main ] stop
									 */

									/**
									 * [tUniqRow_12 main ] start
									 */

									currentComponent = "tUniqRow_12";

									row48 = null;
									if (row21.CONCEPT_PATH == null) {
										finder_tUniqRow_12.CONCEPT_PATH = null;
									} else {
										finder_tUniqRow_12.CONCEPT_PATH = row21.CONCEPT_PATH
												.toLowerCase();
									}
									finder_tUniqRow_12.hashCodeDirty = true;
									if (!keystUniqRow_12
											.contains(finder_tUniqRow_12)) {
										KeyStruct_tUniqRow_12 new_tUniqRow_12 = new KeyStruct_tUniqRow_12();

										if (row21.CONCEPT_PATH == null) {
											new_tUniqRow_12.CONCEPT_PATH = null;
										} else {
											new_tUniqRow_12.CONCEPT_PATH = row21.CONCEPT_PATH
													.toLowerCase();
										}

										keystUniqRow_12.add(new_tUniqRow_12);
										if (row48 == null) {

											row48 = new row48Struct();
										}
										row48.CONCEPT_PATH = row21.CONCEPT_PATH;
										row48.CONCEPT_CD = row21.CONCEPT_CD;
										row48.NAME_CHAR = row21.NAME_CHAR;
										row48.CONCEPT_BLOB = row21.CONCEPT_BLOB;
										row48.UPDATE_DATE = row21.UPDATE_DATE;
										row48.DOWNLOAD_DATE = row21.DOWNLOAD_DATE;
										row48.IMPORT_DATE = row21.IMPORT_DATE;
										row48.SOURCESYSTEM_CD = row21.SOURCESYSTEM_CD;
										row48.UPLOAD_ID = row21.UPLOAD_ID;
										nb_uniques_tUniqRow_12++;
									} else {
										nb_duplicates_tUniqRow_12++;
									}

									tos_count_tUniqRow_12++;

									/**
									 * [tUniqRow_12 main ] stop
									 */
									// Start of branch "row48"
									if (row48 != null) {

										/**
										 * [tFileOutputDelimited_32 main ] start
										 */

										currentComponent = "tFileOutputDelimited_32";

										String[] rowtFileOutputDelimited_32 = new String[9];

										rowtFileOutputDelimited_32[0] = row48.CONCEPT_PATH == null ? ""
												: row48.CONCEPT_PATH;

										rowtFileOutputDelimited_32[1] = row48.CONCEPT_CD == null ? ""
												: row48.CONCEPT_CD;

										rowtFileOutputDelimited_32[2] = row48.NAME_CHAR == null ? ""
												: row48.NAME_CHAR;

										rowtFileOutputDelimited_32[3] = row48.CONCEPT_BLOB == null ? ""
												: row48.CONCEPT_BLOB;

										rowtFileOutputDelimited_32[4] = row48.UPDATE_DATE == null ? ""
												: FormatterUtils.format_Date(
														row48.UPDATE_DATE,
														"yyyy-MM-dd");

										rowtFileOutputDelimited_32[5] = row48.DOWNLOAD_DATE == null ? ""
												: FormatterUtils.format_Date(
														row48.DOWNLOAD_DATE,
														"yyyy-MM-dd");

										rowtFileOutputDelimited_32[6] = row48.IMPORT_DATE == null ? ""
												: FormatterUtils.format_Date(
														row48.IMPORT_DATE,
														"yyyy-MM-dd");

										rowtFileOutputDelimited_32[7] = row48.SOURCESYSTEM_CD == null ? ""
												: row48.SOURCESYSTEM_CD;

										rowtFileOutputDelimited_32[8] = row48.UPLOAD_ID == null ? ""
												: row48.UPLOAD_ID;

										nb_line_tFileOutputDelimited_32++;
										resourceMap
												.put("nb_line_tFileOutputDelimited_32",
														nb_line_tFileOutputDelimited_32);
										CsvWritertFileOutputDelimited_32
												.writeNext(rowtFileOutputDelimited_32);

										tos_count_tFileOutputDelimited_32++;

										/**
										 * [tFileOutputDelimited_32 main ] stop
										 */

									} // End of branch "row48"

								} // End of branch "toCD2"

							} // close loop of lookup 'row51' // G_TM_M_043

						} // End of branch "row50"

						/**
						 * [tFileInputDelimited_8 end ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						nb_line_tFileInputDelimited_8++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_8 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_8 != null) {
							csvReadertFileInputDelimited_8.close();
						}
					}
					if (csvReadertFileInputDelimited_8 != null) {
						globalMap.put("tFileInputDelimited_8_NB_LINE",
								nb_line_tFileInputDelimited_8);
					}

				}

				ok_Hash.put("tFileInputDelimited_8", true);
				end_Hash.put("tFileInputDelimited_8",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_8 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row51 != null) {
					tHash_Lookup_row51.endGet();
				}
				globalMap.remove("tHash_Lookup_row51");

				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tUnite_1 end ] start
				 */

				currentComponent = "tUnite_1";

				globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);

				ok_Hash.put("tUnite_1", true);
				end_Hash.put("tUnite_1", System.currentTimeMillis());

				/**
				 * [tUnite_1 end ] stop
				 */

				/**
				 * [tUniqRow_12 end ] start
				 */

				currentComponent = "tUniqRow_12";

				globalMap.put("tUniqRow_12_NB_UNIQUES", nb_uniques_tUniqRow_12);
				globalMap.put("tUniqRow_12_NB_DUPLICATES",
						nb_duplicates_tUniqRow_12);

				ok_Hash.put("tUniqRow_12", true);
				end_Hash.put("tUniqRow_12", System.currentTimeMillis());

				/**
				 * [tUniqRow_12 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_32 end ] start
				 */

				currentComponent = "tFileOutputDelimited_32";

				if (CsvWritertFileOutputDelimited_32 != null) {
					CsvWritertFileOutputDelimited_32.close();
				}

				globalMap.put("tFileOutputDelimited_32_NB_LINE",
						nb_line_tFileOutputDelimited_32);

				resourceMap.put("finish_tFileOutputDelimited_32", true);

				ok_Hash.put("tFileOutputDelimited_32", true);
				end_Hash.put("tFileOutputDelimited_32",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_32 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_14Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_21"
			globalMap.remove("tHash_Lookup_row49");

			// free memory for "tMap_19"
			globalMap.remove("tHash_Lookup_row47");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_from_src_ont");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row51");

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tUniqRow_4 finally ] start
				 */

				currentComponent = "tUniqRow_4";

				/**
				 * [tUniqRow_4 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (resourceMap.get("finish_tFileOutputDelimited_4") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_4 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_4");

					if (CsvWritertFileOutputDelimited_4 != null) {
						CsvWritertFileOutputDelimited_4.close();
					}

				}

				/**
				 * [tFileOutputDelimited_4 finally ] stop
				 */

				/**
				 * [tJavaRow_4 finally ] start
				 */

				currentComponent = "tJavaRow_4";

				/**
				 * [tJavaRow_4 finally ] stop
				 */

				/**
				 * [tMap_19 finally ] start
				 */

				currentComponent = "tMap_19";

				/**
				 * [tMap_19 finally ] stop
				 */

				/**
				 * [tUniqRow_1 finally ] start
				 */

				currentComponent = "tUniqRow_1";

				/**
				 * [tUniqRow_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_29 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_29";

				if (resourceMap.get("finish_tFileOutputDelimited_29") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_29 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_29");

					if (CsvWritertFileOutputDelimited_29 != null) {
						CsvWritertFileOutputDelimited_29.close();
					}

				}

				/**
				 * [tFileOutputDelimited_29 finally ] stop
				 */

				/**
				 * [tMap_21 finally ] start
				 */

				currentComponent = "tMap_21";

				/**
				 * [tMap_21 finally ] stop
				 */

				/**
				 * [tFileInputDelimited_8 finally ] start
				 */

				currentComponent = "tFileInputDelimited_8";

				/**
				 * [tFileInputDelimited_8 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tUnite_1 finally ] start
				 */

				currentComponent = "tUnite_1";

				/**
				 * [tUnite_1 finally ] stop
				 */

				/**
				 * [tUniqRow_12 finally ] start
				 */

				currentComponent = "tUniqRow_12";

				/**
				 * [tUniqRow_12 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_32 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_32";

				if (resourceMap.get("finish_tFileOutputDelimited_32") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_32 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_32");

					if (CsvWritertFileOutputDelimited_32 != null) {
						CsvWritertFileOutputDelimited_32.close();
					}

				}

				/**
				 * [tFileOutputDelimited_32 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_14Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_14 begin ] start
				 */

				ok_Hash.put("tJava_14", false);
				start_Hash.put("tJava_14", System.currentTimeMillis());

				currentComponent = "tJava_14";

				int tos_count_tJava_14 = 0;

				System.out.println("Extracting Concept Data...");
				StatusListener.setStatus(40, "Transforming Staging to Target",
						"");

				/**
				 * [tJava_14 begin ] stop
				 */

				/**
				 * [tJava_14 main ] start
				 */

				currentComponent = "tJava_14";

				tos_count_tJava_14++;

				/**
				 * [tJava_14 main ] stop
				 */

				/**
				 * [tJava_14 end ] start
				 */

				currentComponent = "tJava_14";

				ok_Hash.put("tJava_14", true);
				end_Hash.put("tJava_14", System.currentTimeMillis());

				/**
				 * [tJava_14 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_14:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_14 finally ] start
				 */

				currentComponent = "tJava_14";

				/**
				 * [tJava_14 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_14_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readDate(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readDate(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class asdddStruct implements
			routines.system.IPersistableRow<asdddStruct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public String START_DATE;

		public String getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public String END_DATE;

		public String getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readString(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// String

				writeString(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// String

				writeString(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + START_DATE);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + END_DATE);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(asdddStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public String START_DATE;

		public String getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public String END_DATE;

		public String getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		public String ENDDATE_SOURCE_PATH;

		public String getENDDATE_SOURCE_PATH() {
			return this.ENDDATE_SOURCE_PATH;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readString(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

					this.ENDDATE_SOURCE_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// String

				writeString(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// String

				writeString(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

				// String

				writeString(this.ENDDATE_SOURCE_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + START_DATE);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + END_DATE);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append(",ENDDATE_SOURCE_PATH=" + ENDDATE_SOURCE_PATH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public String START_DATE;

		public String getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public String END_DATE;

		public String getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		public String STARTDATE_SOURCE_PATH;

		public String getSTARTDATE_SOURCE_PATH() {
			return this.STARTDATE_SOURCE_PATH;
		}

		public String ENDDATE_SOURCE_PATH;

		public String getENDDATE_SOURCE_PATH() {
			return this.ENDDATE_SOURCE_PATH;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readString(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

					this.STARTDATE_SOURCE_PATH = readString(dis);

					this.ENDDATE_SOURCE_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// String

				writeString(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// String

				writeString(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

				// String

				writeString(this.STARTDATE_SOURCE_PATH, dos);

				// String

				writeString(this.ENDDATE_SOURCE_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + START_DATE);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + END_DATE);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append(",STARTDATE_SOURCE_PATH=" + STARTDATE_SOURCE_PATH);
			sb.append(",ENDDATE_SOURCE_PATH=" + ENDDATE_SOURCE_PATH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class to_obs_fctStruct implements
			routines.system.IPersistableRow<to_obs_fctStruct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public String START_DATE;

		public String getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public String END_DATE;

		public String getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		public String STARTDATE_SOURCE_PATH;

		public String getSTARTDATE_SOURCE_PATH() {
			return this.STARTDATE_SOURCE_PATH;
		}

		public String ENDDATE_SOURCE_PATH;

		public String getENDDATE_SOURCE_PATH() {
			return this.ENDDATE_SOURCE_PATH;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readString(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

					this.STARTDATE_SOURCE_PATH = readString(dis);

					this.ENDDATE_SOURCE_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// String

				writeString(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// String

				writeString(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

				// String

				writeString(this.STARTDATE_SOURCE_PATH, dos);

				// String

				writeString(this.ENDDATE_SOURCE_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + START_DATE);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + END_DATE);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append(",STARTDATE_SOURCE_PATH=" + STARTDATE_SOURCE_PATH);
			sb.append(",ENDDATE_SOURCE_PATH=" + ENDDATE_SOURCE_PATH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(to_obs_fctStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableComparableLookupRow<row6Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public String START_DATE;

		public String getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public String END_DATE;

		public String getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.CONCEPT_CD == null) ? 0 : this.CONCEPT_CD
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.CONCEPT_CD == null) {
				if (other.CONCEPT_CD != null)
					return false;

			} else if (!this.CONCEPT_CD.equals(other.CONCEPT_CD))

				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.ENCOUNTER_NUM = this.ENCOUNTER_NUM;
			other.PATIENT_NUM = this.PATIENT_NUM;
			other.CONCEPT_CD = this.CONCEPT_CD;
			other.PROVIDER_ID = this.PROVIDER_ID;
			other.START_DATE = this.START_DATE;
			other.MODIFIER_CD = this.MODIFIER_CD;
			other.INSTANCE_NUM = this.INSTANCE_NUM;
			other.VALTYPE_CD = this.VALTYPE_CD;
			other.TVAL_CHAR = this.TVAL_CHAR;
			other.NVAL_NUM = this.NVAL_NUM;
			other.VALUEFLAG_CD = this.VALUEFLAG_CD;
			other.QUANTITY_NUM = this.QUANTITY_NUM;
			other.UNITS_CD = this.UNITS_CD;
			other.END_DATE = this.END_DATE;
			other.LOCATION_CD = this.LOCATION_CD;
			other.OBSERVATION_BLOB = this.OBSERVATION_BLOB;
			other.CONFIDENCE_NUM = this.CONFIDENCE_NUM;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.CONCEPT_CD = this.CONCEPT_CD;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.CONCEPT_CD = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_CD, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ENCOUNTER_NUM = (BigDecimal) ois.readObject();

				this.PATIENT_NUM = (BigDecimal) ois.readObject();

				this.PROVIDER_ID = readString(dis, ois);

				this.START_DATE = readString(dis, ois);

				this.MODIFIER_CD = readString(dis, ois);

				this.INSTANCE_NUM = readString(dis, ois);

				this.VALTYPE_CD = readString(dis, ois);

				this.TVAL_CHAR = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.NVAL_NUM = null;
				} else {
					this.NVAL_NUM = dis.readFloat();
				}

				this.VALUEFLAG_CD = readString(dis, ois);

				this.QUANTITY_NUM = readString(dis, ois);

				this.UNITS_CD = readString(dis, ois);

				this.END_DATE = readString(dis, ois);

				this.LOCATION_CD = readString(dis, ois);

				this.OBSERVATION_BLOB = readString(dis, ois);

				this.CONFIDENCE_NUM = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				oos.writeObject(this.ENCOUNTER_NUM);

				oos.writeObject(this.PATIENT_NUM);

				writeString(this.PROVIDER_ID, dos, oos);

				writeString(this.START_DATE, dos, oos);

				writeString(this.MODIFIER_CD, dos, oos);

				writeString(this.INSTANCE_NUM, dos, oos);

				writeString(this.VALTYPE_CD, dos, oos);

				writeString(this.TVAL_CHAR, dos, oos);

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				writeString(this.VALUEFLAG_CD, dos, oos);

				writeString(this.QUANTITY_NUM, dos, oos);

				writeString(this.UNITS_CD, dos, oos);

				writeString(this.END_DATE, dos, oos);

				writeString(this.LOCATION_CD, dos, oos);

				writeString(this.OBSERVATION_BLOB, dos, oos);

				writeString(this.CONFIDENCE_NUM, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + START_DATE);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + END_DATE);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CONCEPT_CD,
					other.CONCEPT_CD);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_3Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_3Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public String START_DATE;

		public String getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public String END_DATE;

		public String getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readString(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// String

				writeString(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// String

				writeString(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + START_DATE);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + END_DATE);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_5Process(globalMap);
				tFileInputDelimited_11Process(globalMap);
				tFileInputDelimited_10Process(globalMap);
				tFileInputDelimited_9Process(globalMap);
				tFileInputDelimited_12Process(globalMap);

				row6Struct row6 = new row6Struct();
				to_obs_fctStruct to_obs_fct = new to_obs_fctStruct();
				to_obs_fctStruct row3 = to_obs_fct;
				out1Struct out1 = new out1Struct();
				asdddStruct asddd = new asdddStruct();
				row5Struct row5 = new row5Struct();

				/**
				 * [tMap_4_TMAP_OUT begin ] start
				 */

				ok_Hash.put("tMap_4_TMAP_OUT", false);
				start_Hash.put("tMap_4_TMAP_OUT", System.currentTimeMillis());

				currentVirtualComponent = "tMap_4";

				currentComponent = "tMap_4_TMAP_OUT";

				int tos_count_tMap_4_TMAP_OUT = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<to_tmapStruct> tHash_Lookup_to_tmap = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<to_tmapStruct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<to_tmapStruct>) globalMap
						.get("tHash_Lookup_to_tmap"));

				to_tmapStruct to_tmapHashKey = new to_tmapStruct();
				to_tmapStruct to_tmapDefault = new to_tmapStruct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_4_TMAP_OUT__Struct {
				}
				Var__tMap_4_TMAP_OUT__Struct Var__tMap_4_TMAP_OUT = new Var__tMap_4_TMAP_OUT__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				// ###############################

				class SortableRow_tMap_4_1 implements
						Comparable<SortableRow_tMap_4_1>,
						routines.system.IPersistableRow<SortableRow_tMap_4_1> { // G_TM_B_001

					boolean is__rejectedInnerJoin;

					String exprKey_to_tmap__CONCEPT_CD;

					// row6
					BigDecimal row6__ENCOUNTER_NUM;
					BigDecimal row6__PATIENT_NUM;
					String row6__CONCEPT_CD;
					String row6__PROVIDER_ID;
					String row6__START_DATE;
					String row6__MODIFIER_CD;
					String row6__INSTANCE_NUM;
					String row6__VALTYPE_CD;
					String row6__TVAL_CHAR;
					Float row6__NVAL_NUM;
					String row6__VALUEFLAG_CD;
					String row6__QUANTITY_NUM;
					String row6__UNITS_CD;
					String row6__END_DATE;
					String row6__LOCATION_CD;
					String row6__OBSERVATION_BLOB;
					String row6__CONFIDENCE_NUM;
					java.util.Date row6__UPDATE_DATE;
					java.util.Date row6__DOWNLOAD_DATE;
					java.util.Date row6__IMPORT_DATE;
					String row6__SOURCESYSTEM_CD;
					String row6__UPLOAD_ID;

					public void fillFrom(row6Struct row6,
							String exprKey_to_tmap__CONCEPT_CD) {

						this.row6__ENCOUNTER_NUM = row6.ENCOUNTER_NUM;
						this.row6__PATIENT_NUM = row6.PATIENT_NUM;
						this.row6__CONCEPT_CD = row6.CONCEPT_CD;
						this.row6__PROVIDER_ID = row6.PROVIDER_ID;
						this.row6__START_DATE = row6.START_DATE;
						this.row6__MODIFIER_CD = row6.MODIFIER_CD;
						this.row6__INSTANCE_NUM = row6.INSTANCE_NUM;
						this.row6__VALTYPE_CD = row6.VALTYPE_CD;
						this.row6__TVAL_CHAR = row6.TVAL_CHAR;
						this.row6__NVAL_NUM = row6.NVAL_NUM;
						this.row6__VALUEFLAG_CD = row6.VALUEFLAG_CD;
						this.row6__QUANTITY_NUM = row6.QUANTITY_NUM;
						this.row6__UNITS_CD = row6.UNITS_CD;
						this.row6__END_DATE = row6.END_DATE;
						this.row6__LOCATION_CD = row6.LOCATION_CD;
						this.row6__OBSERVATION_BLOB = row6.OBSERVATION_BLOB;
						this.row6__CONFIDENCE_NUM = row6.CONFIDENCE_NUM;
						this.row6__UPDATE_DATE = row6.UPDATE_DATE;
						this.row6__DOWNLOAD_DATE = row6.DOWNLOAD_DATE;
						this.row6__IMPORT_DATE = row6.IMPORT_DATE;
						this.row6__SOURCESYSTEM_CD = row6.SOURCESYSTEM_CD;
						this.row6__UPLOAD_ID = row6.UPLOAD_ID;
						this.exprKey_to_tmap__CONCEPT_CD = exprKey_to_tmap__CONCEPT_CD;

					}

					public void copyDataTo(row6Struct row6) {

						row6.ENCOUNTER_NUM = this.row6__ENCOUNTER_NUM;
						row6.PATIENT_NUM = this.row6__PATIENT_NUM;
						row6.CONCEPT_CD = this.row6__CONCEPT_CD;
						row6.PROVIDER_ID = this.row6__PROVIDER_ID;
						row6.START_DATE = this.row6__START_DATE;
						row6.MODIFIER_CD = this.row6__MODIFIER_CD;
						row6.INSTANCE_NUM = this.row6__INSTANCE_NUM;
						row6.VALTYPE_CD = this.row6__VALTYPE_CD;
						row6.TVAL_CHAR = this.row6__TVAL_CHAR;
						row6.NVAL_NUM = this.row6__NVAL_NUM;
						row6.VALUEFLAG_CD = this.row6__VALUEFLAG_CD;
						row6.QUANTITY_NUM = this.row6__QUANTITY_NUM;
						row6.UNITS_CD = this.row6__UNITS_CD;
						row6.END_DATE = this.row6__END_DATE;
						row6.LOCATION_CD = this.row6__LOCATION_CD;
						row6.OBSERVATION_BLOB = this.row6__OBSERVATION_BLOB;
						row6.CONFIDENCE_NUM = this.row6__CONFIDENCE_NUM;
						row6.UPDATE_DATE = this.row6__UPDATE_DATE;
						row6.DOWNLOAD_DATE = this.row6__DOWNLOAD_DATE;
						row6.IMPORT_DATE = this.row6__IMPORT_DATE;
						row6.SOURCESYSTEM_CD = this.row6__SOURCESYSTEM_CD;
						row6.UPLOAD_ID = this.row6__UPLOAD_ID;

					}

					public String toString() {

						StringBuilder sb = new StringBuilder();
						sb.append(super.toString());
						sb.append("[");

						sb.append("row6__ENCOUNTER_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.row6__ENCOUNTER_NUM));

						sb.append(", ");

						sb.append("row6__PATIENT_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.row6__PATIENT_NUM));

						sb.append(", ");

						sb.append("row6__CONCEPT_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row6__CONCEPT_CD));

						sb.append(", ");

						sb.append("row6__PROVIDER_ID");
						sb.append("=");
						sb.append(String.valueOf(this.row6__PROVIDER_ID));

						sb.append(", ");

						sb.append("row6__START_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row6__START_DATE));

						sb.append(", ");

						sb.append("row6__MODIFIER_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row6__MODIFIER_CD));

						sb.append(", ");

						sb.append("row6__INSTANCE_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.row6__INSTANCE_NUM));

						sb.append(", ");

						sb.append("row6__VALTYPE_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row6__VALTYPE_CD));

						sb.append(", ");

						sb.append("row6__TVAL_CHAR");
						sb.append("=");
						sb.append(String.valueOf(this.row6__TVAL_CHAR));

						sb.append(", ");

						sb.append("row6__NVAL_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.row6__NVAL_NUM));

						sb.append(", ");

						sb.append("row6__VALUEFLAG_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row6__VALUEFLAG_CD));

						sb.append(", ");

						sb.append("row6__QUANTITY_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.row6__QUANTITY_NUM));

						sb.append(", ");

						sb.append("row6__UNITS_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row6__UNITS_CD));

						sb.append(", ");

						sb.append("row6__END_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row6__END_DATE));

						sb.append(", ");

						sb.append("row6__LOCATION_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row6__LOCATION_CD));

						sb.append(", ");

						sb.append("row6__OBSERVATION_BLOB");
						sb.append("=");
						sb.append(String.valueOf(this.row6__OBSERVATION_BLOB));

						sb.append(", ");

						sb.append("row6__CONFIDENCE_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.row6__CONFIDENCE_NUM));

						sb.append(", ");

						sb.append("row6__UPDATE_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row6__UPDATE_DATE));

						sb.append(", ");

						sb.append("row6__DOWNLOAD_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row6__DOWNLOAD_DATE));

						sb.append(", ");

						sb.append("row6__IMPORT_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row6__IMPORT_DATE));

						sb.append(", ");

						sb.append("row6__SOURCESYSTEM_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row6__SOURCESYSTEM_CD));

						sb.append(", ");

						sb.append("row6__UPLOAD_ID");
						sb.append("=");
						sb.append(String.valueOf(this.row6__UPLOAD_ID));

						sb.append("]");

						return sb.toString();
					}

					public int compareTo(SortableRow_tMap_4_1 other) {

						int returnValue = 0;

						returnValue = checkNullsAndCompare(
								this.exprKey_to_tmap__CONCEPT_CD,
								other.exprKey_to_tmap__CONCEPT_CD);
						if (returnValue != 0) {
							return returnValue;
						}

						return returnValue;
					}

					private int checkNullsAndCompare(Object object1,
							Object object2) {
						int returnValue = 0;
						if (object1 instanceof Comparable
								&& object2 instanceof Comparable) {
							returnValue = ((Comparable) object1)
									.compareTo(object2);
						} else if (object1 != null && object2 != null) {
							returnValue = compareStrings(object1.toString(),
									object2.toString());
						} else if (object1 == null && object2 != null) {
							returnValue = 1;
						} else if (object1 != null && object2 == null) {
							returnValue = -1;
						} else {
							returnValue = 0;
						}

						return returnValue;
					}

					private int compareStrings(String string1, String string2) {
						return string1.compareTo(string2);
					}

					public void readData(ObjectInputStream dis) {

						synchronized (row6Struct.commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

							try {

								int length = 0;

								this.is__rejectedInnerJoin = dis.readBoolean();

								this.row6__ENCOUNTER_NUM = (BigDecimal) dis
										.readObject();

								this.row6__PATIENT_NUM = (BigDecimal) dis
										.readObject();

								length = dis.readInt();
								if (length == -1) {
									this.row6__CONCEPT_CD = null;
								} else {
									if (length > row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row6__CONCEPT_CD = new String(
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row6__PROVIDER_ID = null;
								} else {
									if (length > row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row6__PROVIDER_ID = new String(
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row6__START_DATE = null;
								} else {
									if (length > row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row6__START_DATE = new String(
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row6__MODIFIER_CD = null;
								} else {
									if (length > row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row6__MODIFIER_CD = new String(
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row6__INSTANCE_NUM = null;
								} else {
									if (length > row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row6__INSTANCE_NUM = new String(
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row6__VALTYPE_CD = null;
								} else {
									if (length > row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row6__VALTYPE_CD = new String(
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row6__TVAL_CHAR = null;
								} else {
									if (length > row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row6__TVAL_CHAR = new String(
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.row6__NVAL_NUM = null;
								} else {
									this.row6__NVAL_NUM = dis.readFloat();
								}

								length = dis.readInt();
								if (length == -1) {
									this.row6__VALUEFLAG_CD = null;
								} else {
									if (length > row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row6__VALUEFLAG_CD = new String(
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row6__QUANTITY_NUM = null;
								} else {
									if (length > row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row6__QUANTITY_NUM = new String(
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row6__UNITS_CD = null;
								} else {
									if (length > row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row6__UNITS_CD = new String(
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row6__END_DATE = null;
								} else {
									if (length > row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row6__END_DATE = new String(
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row6__LOCATION_CD = null;
								} else {
									if (length > row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row6__LOCATION_CD = new String(
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row6__OBSERVATION_BLOB = null;
								} else {
									if (length > row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row6__OBSERVATION_BLOB = new String(
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row6__CONFIDENCE_NUM = null;
								} else {
									if (length > row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row6__CONFIDENCE_NUM = new String(
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.row6__UPDATE_DATE = null;
								} else {
									this.row6__UPDATE_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.row6__DOWNLOAD_DATE = null;
								} else {
									this.row6__DOWNLOAD_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.row6__IMPORT_DATE = null;
								} else {
									this.row6__IMPORT_DATE = new Date(
											dis.readLong());
								}

								length = dis.readInt();
								if (length == -1) {
									this.row6__SOURCESYSTEM_CD = null;
								} else {
									if (length > row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row6__SOURCESYSTEM_CD = new String(
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row6__UPLOAD_ID = null;
								} else {
									if (length > row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row6__UPLOAD_ID = new String(
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_to_tmap__CONCEPT_CD = null;
								} else {
									if (length > row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.exprKey_to_tmap__CONCEPT_CD = new String(
											row6Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

							} catch (IOException e) {
								throw new RuntimeException(e);

							} catch (ClassNotFoundException eCNFE) {
								throw new RuntimeException(eCNFE);

							}

						}
					}

					public void writeData(ObjectOutputStream dos) {
						try {

							dos.writeBoolean(this.is__rejectedInnerJoin);

							dos.writeObject(this.row6__ENCOUNTER_NUM);

							dos.writeObject(this.row6__PATIENT_NUM);

							if (this.row6__CONCEPT_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row6__CONCEPT_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row6__PROVIDER_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row6__PROVIDER_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row6__START_DATE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row6__START_DATE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row6__MODIFIER_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row6__MODIFIER_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row6__INSTANCE_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row6__INSTANCE_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row6__VALTYPE_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row6__VALTYPE_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row6__TVAL_CHAR == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row6__TVAL_CHAR
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row6__NVAL_NUM == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeFloat(this.row6__NVAL_NUM);
							}

							if (this.row6__VALUEFLAG_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row6__VALUEFLAG_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row6__QUANTITY_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row6__QUANTITY_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row6__UNITS_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row6__UNITS_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row6__END_DATE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row6__END_DATE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row6__LOCATION_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row6__LOCATION_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row6__OBSERVATION_BLOB == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row6__OBSERVATION_BLOB
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row6__CONFIDENCE_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row6__CONFIDENCE_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row6__UPDATE_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row6__UPDATE_DATE.getTime());
							}

							if (this.row6__DOWNLOAD_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row6__DOWNLOAD_DATE
										.getTime());
							}

							if (this.row6__IMPORT_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row6__IMPORT_DATE.getTime());
							}

							if (this.row6__SOURCESYSTEM_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row6__SOURCESYSTEM_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row6__UPLOAD_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row6__UPLOAD_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.exprKey_to_tmap__CONCEPT_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_to_tmap__CONCEPT_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

				} // G_TM_B_001

				org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_4_1> fsi_tMap_4_1 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_4_1>(
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_"
								+ Thread.currentThread().getId() + "_" + pid
								+ "_tMap_4_1", 200000) {
					public SortableRow_tMap_4_1 createRowInstance() {
						return new SortableRow_tMap_4_1();
					}
				};

				fsi_tMap_4_1.initPut();

				/**
				 * [tMap_4_TMAP_OUT begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				int nb_line_tFileInputDelimited_3 = 0;
				int footer_tFileInputDelimited_3 = 0;
				int totalLinetFileInputDelimited_3 = 0;
				int limittFileInputDelimited_3 = -1;
				int lastLinetFileInputDelimited_3 = -1;

				char fieldSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_3 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_3 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_3 = /**
				 * Start field
				 * tFileInputDelimited_3:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_3_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_3:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_3 = null;

				try {

					String[] rowtFileInputDelimited_3 = null;
					int currentLinetFileInputDelimited_3 = 0;
					int outputLinetFileInputDelimited_3 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_3 = 0;
							if (footer_value_tFileInputDelimited_3 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_3,
									fieldSeparator_tFileInputDelimited_3[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_3)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_3[0]);
						}

						csvReadertFileInputDelimited_3.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
							csvReadertFileInputDelimited_3.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_3[0]);

						csvReadertFileInputDelimited_3.setQuoteChar('"');

						csvReadertFileInputDelimited_3
								.setEscapeChar(csvReadertFileInputDelimited_3
										.getQuoteChar());

						if (footer_tFileInputDelimited_3 > 0) {
							for (totalLinetFileInputDelimited_3 = 0; totalLinetFileInputDelimited_3 < 0; totalLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
							csvReadertFileInputDelimited_3
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_3.readNext()) {

								rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3
										.getValues();
								if (!(rowtFileInputDelimited_3.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_3[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_3++;

								}

							}
							int lastLineTemptFileInputDelimited_3 = totalLinetFileInputDelimited_3
									- footer_tFileInputDelimited_3 < 0 ? 0
									: totalLinetFileInputDelimited_3
											- footer_tFileInputDelimited_3;
							if (lastLinetFileInputDelimited_3 > 0) {
								lastLinetFileInputDelimited_3 = lastLinetFileInputDelimited_3 < lastLineTemptFileInputDelimited_3 ? lastLinetFileInputDelimited_3
										: lastLineTemptFileInputDelimited_3;
							} else {
								lastLinetFileInputDelimited_3 = lastLineTemptFileInputDelimited_3;
							}

							csvReadertFileInputDelimited_3.close();
							if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_3,
										fieldSeparator_tFileInputDelimited_3[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_3)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_3[0]);
							}
							csvReadertFileInputDelimited_3
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
								csvReadertFileInputDelimited_3
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_3[0]);

							csvReadertFileInputDelimited_3.setQuoteChar('"');

							csvReadertFileInputDelimited_3
									.setEscapeChar(csvReadertFileInputDelimited_3
											.getQuoteChar());

						}

						if (limittFileInputDelimited_3 != 0) {
							for (currentLinetFileInputDelimited_3 = 0; currentLinetFileInputDelimited_3 < 0; currentLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
						}
						csvReadertFileInputDelimited_3
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_3 != 0
							&& csvReadertFileInputDelimited_3 != null
							&& csvReadertFileInputDelimited_3.readNext()) {

						rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3
								.getValues();

						if (rowtFileInputDelimited_3.length == 1
								&& ("\015").equals(rowtFileInputDelimited_3[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_3++;

						if (lastLinetFileInputDelimited_3 > -1
								&& currentLinetFileInputDelimited_3 > lastLinetFileInputDelimited_3) {
							break;
						}
						outputLinetFileInputDelimited_3++;
						if (limittFileInputDelimited_3 > 0
								&& outputLinetFileInputDelimited_3 > limittFileInputDelimited_3) {
							break;
						}

						row6 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row6 = new row6Struct();
						try {

							char fieldSeparator_tFileInputDelimited_3_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_3_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_3.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_3[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row6.ENCOUNTER_NUM = null;

								row6.PATIENT_NUM = null;

								row6.CONCEPT_CD = null;

								row6.PROVIDER_ID = null;

								row6.START_DATE = null;

								row6.MODIFIER_CD = null;

								row6.INSTANCE_NUM = null;

								row6.VALTYPE_CD = null;

								row6.TVAL_CHAR = null;

								row6.NVAL_NUM = null;

								row6.VALUEFLAG_CD = null;

								row6.QUANTITY_NUM = null;

								row6.UNITS_CD = null;

								row6.END_DATE = null;

								row6.LOCATION_CD = null;

								row6.OBSERVATION_BLOB = null;

								row6.CONFIDENCE_NUM = null;

								row6.UPDATE_DATE = null;

								row6.DOWNLOAD_DATE = null;

								row6.IMPORT_DATE = null;

								row6.SOURCESYSTEM_CD = null;

								row6.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_3 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_3 = 0;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]
											.length() > 0) {

										row6.ENCOUNTER_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);

									} else {
										row6.ENCOUNTER_NUM = null;
									}

								} else {
									row6.ENCOUNTER_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 1;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]
											.length() > 0) {

										row6.PATIENT_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);

									} else {
										row6.PATIENT_NUM = null;
									}

								} else {
									row6.PATIENT_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 2;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.CONCEPT_CD = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.CONCEPT_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 3;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.PROVIDER_ID = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.PROVIDER_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 4;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.START_DATE = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.START_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 5;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.MODIFIER_CD = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.MODIFIER_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 6;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.INSTANCE_NUM = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.INSTANCE_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 7;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.VALTYPE_CD = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.VALTYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 8;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.TVAL_CHAR = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.TVAL_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 9;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]
											.length() > 0) {

										row6.NVAL_NUM = ParserUtils
												.parseTo_Float(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);

									} else {
										row6.NVAL_NUM = null;
									}

								} else {
									row6.NVAL_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 10;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.VALUEFLAG_CD = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.VALUEFLAG_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 11;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.QUANTITY_NUM = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.QUANTITY_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 12;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.UNITS_CD = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.UNITS_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 13;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.END_DATE = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.END_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 14;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.LOCATION_CD = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.LOCATION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 15;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.OBSERVATION_BLOB = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.OBSERVATION_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 16;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.CONFIDENCE_NUM = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.CONFIDENCE_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 17;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]
											.length() > 0) {

										row6.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3],
														"yyyy-MM-dd");

									} else {
										row6.UPDATE_DATE = null;
									}

								} else {
									row6.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 18;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]
											.length() > 0) {

										row6.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3],
														"yyyy-MM-dd");

									} else {
										row6.DOWNLOAD_DATE = null;
									}

								} else {
									row6.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 19;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]
											.length() > 0) {

										row6.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3],
														"yyyy-MM-dd");

									} else {
										row6.IMPORT_DATE = null;
									}

								} else {
									row6.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 20;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.SOURCESYSTEM_CD = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 21;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row6.UPLOAD_ID = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row6.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row6 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */
						// Start of branch "row6"
						if (row6 != null) {

							/**
							 * [tMap_4_TMAP_OUT main ] start
							 */

							currentVirtualComponent = "tMap_4";

							currentComponent = "tMap_4_TMAP_OUT";

							boolean hasCasePrimitiveKeyWithNull_tMap_4_TMAP_OUT = false;

							hasCasePrimitiveKeyWithNull_tMap_4_TMAP_OUT = false;

							String exprKey_to_tmap__CONCEPT_CD = row6.CONCEPT_CD;

							SortableRow_tMap_4_1 sortableRow_tMap_4_1 = fsi_tMap_4_1
									.getNextFreeRow();

							sortableRow_tMap_4_1.fillFrom(row6,
									exprKey_to_tmap__CONCEPT_CD);

							fsi_tMap_4_1.put(sortableRow_tMap_4_1);

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_4_TMAP_OUT = false;
							boolean mainRowRejected_tMap_4_TMAP_OUT = false;

							// ###############################

							tos_count_tMap_4_TMAP_OUT++;

							/**
							 * [tMap_4_TMAP_OUT main ] stop
							 */

						} // End of branch "row6"

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						nb_line_tFileInputDelimited_3++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_3 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_3 != null) {
							csvReadertFileInputDelimited_3.close();
						}
					}
					if (csvReadertFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE",
								nb_line_tFileInputDelimited_3);
					}

				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tMap_4_TMAP_OUT end ] start
				 */

				currentVirtualComponent = "tMap_4";

				currentComponent = "tMap_4_TMAP_OUT";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_4_TMAP_OUT", true);
				end_Hash.put("tMap_4_TMAP_OUT", System.currentTimeMillis());

				/**
				 * [tMap_4_TMAP_OUT end ] stop
				 */

				/**
				 * [tMap_9_TMAP_OUT begin ] start
				 */

				ok_Hash.put("tMap_9_TMAP_OUT", false);
				start_Hash.put("tMap_9_TMAP_OUT", System.currentTimeMillis());

				currentVirtualComponent = "tMap_9";

				currentComponent = "tMap_9_TMAP_OUT";

				int tos_count_tMap_9_TMAP_OUT = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row15Struct> tHash_Lookup_row15 = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row15Struct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row15Struct>) globalMap
						.get("tHash_Lookup_row15"));

				row15Struct row15HashKey = new row15Struct();
				row15Struct row15Default = new row15Struct();

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row14Struct> tHash_Lookup_row14 = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row14Struct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row14Struct>) globalMap
						.get("tHash_Lookup_row14"));

				row14Struct row14HashKey = new row14Struct();
				row14Struct row14Default = new row14Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_9_TMAP_OUT__Struct {
				}
				Var__tMap_9_TMAP_OUT__Struct Var__tMap_9_TMAP_OUT = new Var__tMap_9_TMAP_OUT__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				// ###############################

				class SortableRow_tMap_9_1 implements
						Comparable<SortableRow_tMap_9_1>,
						routines.system.IPersistableRow<SortableRow_tMap_9_1> { // G_TM_B_001

					boolean is__rejectedInnerJoin;

					String exprKey_row15__CONCEPT_PATH;

					// row3
					BigDecimal row3__ENCOUNTER_NUM;
					BigDecimal row3__PATIENT_NUM;
					String row3__CONCEPT_CD;
					String row3__PROVIDER_ID;
					String row3__START_DATE;
					String row3__MODIFIER_CD;
					String row3__INSTANCE_NUM;
					String row3__VALTYPE_CD;
					String row3__TVAL_CHAR;
					Float row3__NVAL_NUM;
					String row3__VALUEFLAG_CD;
					String row3__QUANTITY_NUM;
					String row3__UNITS_CD;
					String row3__END_DATE;
					String row3__LOCATION_CD;
					String row3__OBSERVATION_BLOB;
					String row3__CONFIDENCE_NUM;
					java.util.Date row3__UPDATE_DATE;
					java.util.Date row3__DOWNLOAD_DATE;
					java.util.Date row3__IMPORT_DATE;
					String row3__SOURCESYSTEM_CD;
					String row3__UPLOAD_ID;
					String row3__STARTDATE_SOURCE_PATH;
					String row3__ENDDATE_SOURCE_PATH;

					public void fillFrom(to_obs_fctStruct row3,
							String exprKey_row15__CONCEPT_PATH) {

						this.row3__ENCOUNTER_NUM = row3.ENCOUNTER_NUM;
						this.row3__PATIENT_NUM = row3.PATIENT_NUM;
						this.row3__CONCEPT_CD = row3.CONCEPT_CD;
						this.row3__PROVIDER_ID = row3.PROVIDER_ID;
						this.row3__START_DATE = row3.START_DATE;
						this.row3__MODIFIER_CD = row3.MODIFIER_CD;
						this.row3__INSTANCE_NUM = row3.INSTANCE_NUM;
						this.row3__VALTYPE_CD = row3.VALTYPE_CD;
						this.row3__TVAL_CHAR = row3.TVAL_CHAR;
						this.row3__NVAL_NUM = row3.NVAL_NUM;
						this.row3__VALUEFLAG_CD = row3.VALUEFLAG_CD;
						this.row3__QUANTITY_NUM = row3.QUANTITY_NUM;
						this.row3__UNITS_CD = row3.UNITS_CD;
						this.row3__END_DATE = row3.END_DATE;
						this.row3__LOCATION_CD = row3.LOCATION_CD;
						this.row3__OBSERVATION_BLOB = row3.OBSERVATION_BLOB;
						this.row3__CONFIDENCE_NUM = row3.CONFIDENCE_NUM;
						this.row3__UPDATE_DATE = row3.UPDATE_DATE;
						this.row3__DOWNLOAD_DATE = row3.DOWNLOAD_DATE;
						this.row3__IMPORT_DATE = row3.IMPORT_DATE;
						this.row3__SOURCESYSTEM_CD = row3.SOURCESYSTEM_CD;
						this.row3__UPLOAD_ID = row3.UPLOAD_ID;
						this.row3__STARTDATE_SOURCE_PATH = row3.STARTDATE_SOURCE_PATH;
						this.row3__ENDDATE_SOURCE_PATH = row3.ENDDATE_SOURCE_PATH;
						this.exprKey_row15__CONCEPT_PATH = exprKey_row15__CONCEPT_PATH;

					}

					public void copyDataTo(to_obs_fctStruct row3) {

						row3.ENCOUNTER_NUM = this.row3__ENCOUNTER_NUM;
						row3.PATIENT_NUM = this.row3__PATIENT_NUM;
						row3.CONCEPT_CD = this.row3__CONCEPT_CD;
						row3.PROVIDER_ID = this.row3__PROVIDER_ID;
						row3.START_DATE = this.row3__START_DATE;
						row3.MODIFIER_CD = this.row3__MODIFIER_CD;
						row3.INSTANCE_NUM = this.row3__INSTANCE_NUM;
						row3.VALTYPE_CD = this.row3__VALTYPE_CD;
						row3.TVAL_CHAR = this.row3__TVAL_CHAR;
						row3.NVAL_NUM = this.row3__NVAL_NUM;
						row3.VALUEFLAG_CD = this.row3__VALUEFLAG_CD;
						row3.QUANTITY_NUM = this.row3__QUANTITY_NUM;
						row3.UNITS_CD = this.row3__UNITS_CD;
						row3.END_DATE = this.row3__END_DATE;
						row3.LOCATION_CD = this.row3__LOCATION_CD;
						row3.OBSERVATION_BLOB = this.row3__OBSERVATION_BLOB;
						row3.CONFIDENCE_NUM = this.row3__CONFIDENCE_NUM;
						row3.UPDATE_DATE = this.row3__UPDATE_DATE;
						row3.DOWNLOAD_DATE = this.row3__DOWNLOAD_DATE;
						row3.IMPORT_DATE = this.row3__IMPORT_DATE;
						row3.SOURCESYSTEM_CD = this.row3__SOURCESYSTEM_CD;
						row3.UPLOAD_ID = this.row3__UPLOAD_ID;
						row3.STARTDATE_SOURCE_PATH = this.row3__STARTDATE_SOURCE_PATH;
						row3.ENDDATE_SOURCE_PATH = this.row3__ENDDATE_SOURCE_PATH;

					}

					public String toString() {

						StringBuilder sb = new StringBuilder();
						sb.append(super.toString());
						sb.append("[");

						sb.append("row3__ENCOUNTER_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.row3__ENCOUNTER_NUM));

						sb.append(", ");

						sb.append("row3__PATIENT_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.row3__PATIENT_NUM));

						sb.append(", ");

						sb.append("row3__CONCEPT_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row3__CONCEPT_CD));

						sb.append(", ");

						sb.append("row3__PROVIDER_ID");
						sb.append("=");
						sb.append(String.valueOf(this.row3__PROVIDER_ID));

						sb.append(", ");

						sb.append("row3__START_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row3__START_DATE));

						sb.append(", ");

						sb.append("row3__MODIFIER_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row3__MODIFIER_CD));

						sb.append(", ");

						sb.append("row3__INSTANCE_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.row3__INSTANCE_NUM));

						sb.append(", ");

						sb.append("row3__VALTYPE_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row3__VALTYPE_CD));

						sb.append(", ");

						sb.append("row3__TVAL_CHAR");
						sb.append("=");
						sb.append(String.valueOf(this.row3__TVAL_CHAR));

						sb.append(", ");

						sb.append("row3__NVAL_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.row3__NVAL_NUM));

						sb.append(", ");

						sb.append("row3__VALUEFLAG_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row3__VALUEFLAG_CD));

						sb.append(", ");

						sb.append("row3__QUANTITY_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.row3__QUANTITY_NUM));

						sb.append(", ");

						sb.append("row3__UNITS_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row3__UNITS_CD));

						sb.append(", ");

						sb.append("row3__END_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row3__END_DATE));

						sb.append(", ");

						sb.append("row3__LOCATION_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row3__LOCATION_CD));

						sb.append(", ");

						sb.append("row3__OBSERVATION_BLOB");
						sb.append("=");
						sb.append(String.valueOf(this.row3__OBSERVATION_BLOB));

						sb.append(", ");

						sb.append("row3__CONFIDENCE_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.row3__CONFIDENCE_NUM));

						sb.append(", ");

						sb.append("row3__UPDATE_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row3__UPDATE_DATE));

						sb.append(", ");

						sb.append("row3__DOWNLOAD_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row3__DOWNLOAD_DATE));

						sb.append(", ");

						sb.append("row3__IMPORT_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row3__IMPORT_DATE));

						sb.append(", ");

						sb.append("row3__SOURCESYSTEM_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row3__SOURCESYSTEM_CD));

						sb.append(", ");

						sb.append("row3__UPLOAD_ID");
						sb.append("=");
						sb.append(String.valueOf(this.row3__UPLOAD_ID));

						sb.append(", ");

						sb.append("row3__STARTDATE_SOURCE_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.row3__STARTDATE_SOURCE_PATH));

						sb.append(", ");

						sb.append("row3__ENDDATE_SOURCE_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.row3__ENDDATE_SOURCE_PATH));

						sb.append("]");

						return sb.toString();
					}

					public int compareTo(SortableRow_tMap_9_1 other) {

						int returnValue = 0;

						returnValue = checkNullsAndCompare(
								this.exprKey_row15__CONCEPT_PATH,
								other.exprKey_row15__CONCEPT_PATH);
						if (returnValue != 0) {
							return returnValue;
						}

						return returnValue;
					}

					private int checkNullsAndCompare(Object object1,
							Object object2) {
						int returnValue = 0;
						if (object1 instanceof Comparable
								&& object2 instanceof Comparable) {
							returnValue = ((Comparable) object1)
									.compareTo(object2);
						} else if (object1 != null && object2 != null) {
							returnValue = compareStrings(object1.toString(),
									object2.toString());
						} else if (object1 == null && object2 != null) {
							returnValue = 1;
						} else if (object1 != null && object2 == null) {
							returnValue = -1;
						} else {
							returnValue = 0;
						}

						return returnValue;
					}

					private int compareStrings(String string1, String string2) {
						return string1.compareTo(string2);
					}

					public void readData(ObjectInputStream dis) {

						synchronized (row3Struct.commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

							try {

								int length = 0;

								this.is__rejectedInnerJoin = dis.readBoolean();

								this.row3__ENCOUNTER_NUM = (BigDecimal) dis
										.readObject();

								this.row3__PATIENT_NUM = (BigDecimal) dis
										.readObject();

								length = dis.readInt();
								if (length == -1) {
									this.row3__CONCEPT_CD = null;
								} else {
									if (length > row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row3__CONCEPT_CD = new String(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row3__PROVIDER_ID = null;
								} else {
									if (length > row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row3__PROVIDER_ID = new String(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row3__START_DATE = null;
								} else {
									if (length > row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row3__START_DATE = new String(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row3__MODIFIER_CD = null;
								} else {
									if (length > row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row3__MODIFIER_CD = new String(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row3__INSTANCE_NUM = null;
								} else {
									if (length > row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row3__INSTANCE_NUM = new String(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row3__VALTYPE_CD = null;
								} else {
									if (length > row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row3__VALTYPE_CD = new String(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row3__TVAL_CHAR = null;
								} else {
									if (length > row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row3__TVAL_CHAR = new String(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.row3__NVAL_NUM = null;
								} else {
									this.row3__NVAL_NUM = dis.readFloat();
								}

								length = dis.readInt();
								if (length == -1) {
									this.row3__VALUEFLAG_CD = null;
								} else {
									if (length > row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row3__VALUEFLAG_CD = new String(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row3__QUANTITY_NUM = null;
								} else {
									if (length > row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row3__QUANTITY_NUM = new String(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row3__UNITS_CD = null;
								} else {
									if (length > row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row3__UNITS_CD = new String(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row3__END_DATE = null;
								} else {
									if (length > row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row3__END_DATE = new String(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row3__LOCATION_CD = null;
								} else {
									if (length > row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row3__LOCATION_CD = new String(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row3__OBSERVATION_BLOB = null;
								} else {
									if (length > row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row3__OBSERVATION_BLOB = new String(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row3__CONFIDENCE_NUM = null;
								} else {
									if (length > row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row3__CONFIDENCE_NUM = new String(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.row3__UPDATE_DATE = null;
								} else {
									this.row3__UPDATE_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.row3__DOWNLOAD_DATE = null;
								} else {
									this.row3__DOWNLOAD_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.row3__IMPORT_DATE = null;
								} else {
									this.row3__IMPORT_DATE = new Date(
											dis.readLong());
								}

								length = dis.readInt();
								if (length == -1) {
									this.row3__SOURCESYSTEM_CD = null;
								} else {
									if (length > row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row3__SOURCESYSTEM_CD = new String(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row3__UPLOAD_ID = null;
								} else {
									if (length > row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row3__UPLOAD_ID = new String(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row3__STARTDATE_SOURCE_PATH = null;
								} else {
									if (length > row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row3__STARTDATE_SOURCE_PATH = new String(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row3__ENDDATE_SOURCE_PATH = null;
								} else {
									if (length > row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row3__ENDDATE_SOURCE_PATH = new String(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row15__CONCEPT_PATH = null;
								} else {
									if (length > row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.exprKey_row15__CONCEPT_PATH = new String(
											row3Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

							} catch (IOException e) {
								throw new RuntimeException(e);

							} catch (ClassNotFoundException eCNFE) {
								throw new RuntimeException(eCNFE);

							}

						}
					}

					public void writeData(ObjectOutputStream dos) {
						try {

							dos.writeBoolean(this.is__rejectedInnerJoin);

							dos.writeObject(this.row3__ENCOUNTER_NUM);

							dos.writeObject(this.row3__PATIENT_NUM);

							if (this.row3__CONCEPT_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__CONCEPT_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row3__PROVIDER_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__PROVIDER_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row3__START_DATE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__START_DATE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row3__MODIFIER_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__MODIFIER_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row3__INSTANCE_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__INSTANCE_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row3__VALTYPE_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__VALTYPE_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row3__TVAL_CHAR == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__TVAL_CHAR
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row3__NVAL_NUM == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeFloat(this.row3__NVAL_NUM);
							}

							if (this.row3__VALUEFLAG_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__VALUEFLAG_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row3__QUANTITY_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__QUANTITY_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row3__UNITS_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__UNITS_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row3__END_DATE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__END_DATE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row3__LOCATION_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__LOCATION_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row3__OBSERVATION_BLOB == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__OBSERVATION_BLOB
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row3__CONFIDENCE_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__CONFIDENCE_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row3__UPDATE_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row3__UPDATE_DATE.getTime());
							}

							if (this.row3__DOWNLOAD_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row3__DOWNLOAD_DATE
										.getTime());
							}

							if (this.row3__IMPORT_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row3__IMPORT_DATE.getTime());
							}

							if (this.row3__SOURCESYSTEM_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__SOURCESYSTEM_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row3__UPLOAD_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__UPLOAD_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row3__STARTDATE_SOURCE_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__STARTDATE_SOURCE_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row3__ENDDATE_SOURCE_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__ENDDATE_SOURCE_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.exprKey_row15__CONCEPT_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row15__CONCEPT_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

				} // G_TM_B_001

				org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_9_1> fsi_tMap_9_1 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_9_1>(
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_"
								+ Thread.currentThread().getId() + "_" + pid
								+ "_tMap_9_1", 200000) {
					public SortableRow_tMap_9_1 createRowInstance() {
						return new SortableRow_tMap_9_1();
					}
				};

				fsi_tMap_9_1.initPut();

				class SortableRow_tMap_9_2 implements
						Comparable<SortableRow_tMap_9_2>,
						routines.system.IPersistableRow<SortableRow_tMap_9_2> { // G_TM_B_001

					boolean is__rejectedInnerJoin;

					BigDecimal exprKey_row14__PATIENT_NUM;
					String exprKey_row14__CONCEPT_CD;

					// row15
					BigDecimal row3__ENCOUNTER_NUM;
					BigDecimal row3__PATIENT_NUM;
					String row3__CONCEPT_CD;
					String row3__PROVIDER_ID;
					String row3__START_DATE;
					String row3__MODIFIER_CD;
					String row3__INSTANCE_NUM;
					String row3__VALTYPE_CD;
					String row3__TVAL_CHAR;
					Float row3__NVAL_NUM;
					String row3__VALUEFLAG_CD;
					String row3__QUANTITY_NUM;
					String row3__UNITS_CD;
					String row3__END_DATE;
					String row3__LOCATION_CD;
					String row3__OBSERVATION_BLOB;
					String row3__CONFIDENCE_NUM;
					java.util.Date row3__UPDATE_DATE;
					java.util.Date row3__DOWNLOAD_DATE;
					java.util.Date row3__IMPORT_DATE;
					String row3__SOURCESYSTEM_CD;
					String row3__UPLOAD_ID;
					String row3__STARTDATE_SOURCE_PATH;
					String row3__ENDDATE_SOURCE_PATH;
					String row15__CONCEPT_PATH;
					String row15__CONCEPT_CD;
					String row15__NAME_CHAR;
					String row15__CONCEPT_BLOB;
					java.util.Date row15__UPDATE_DATE;
					java.util.Date row15__DOWNLOAD_DATE;
					java.util.Date row15__IMPORT_DATE;
					String row15__SOURCESYSTEM_CD;
					String row15__UPLOAD_ID;

					public void fillFrom(to_obs_fctStruct row3,
							row15Struct row15,
							BigDecimal exprKey_row14__PATIENT_NUM,
							String exprKey_row14__CONCEPT_CD) {

						this.row3__ENCOUNTER_NUM = row3.ENCOUNTER_NUM;
						this.row3__PATIENT_NUM = row3.PATIENT_NUM;
						this.row3__CONCEPT_CD = row3.CONCEPT_CD;
						this.row3__PROVIDER_ID = row3.PROVIDER_ID;
						this.row3__START_DATE = row3.START_DATE;
						this.row3__MODIFIER_CD = row3.MODIFIER_CD;
						this.row3__INSTANCE_NUM = row3.INSTANCE_NUM;
						this.row3__VALTYPE_CD = row3.VALTYPE_CD;
						this.row3__TVAL_CHAR = row3.TVAL_CHAR;
						this.row3__NVAL_NUM = row3.NVAL_NUM;
						this.row3__VALUEFLAG_CD = row3.VALUEFLAG_CD;
						this.row3__QUANTITY_NUM = row3.QUANTITY_NUM;
						this.row3__UNITS_CD = row3.UNITS_CD;
						this.row3__END_DATE = row3.END_DATE;
						this.row3__LOCATION_CD = row3.LOCATION_CD;
						this.row3__OBSERVATION_BLOB = row3.OBSERVATION_BLOB;
						this.row3__CONFIDENCE_NUM = row3.CONFIDENCE_NUM;
						this.row3__UPDATE_DATE = row3.UPDATE_DATE;
						this.row3__DOWNLOAD_DATE = row3.DOWNLOAD_DATE;
						this.row3__IMPORT_DATE = row3.IMPORT_DATE;
						this.row3__SOURCESYSTEM_CD = row3.SOURCESYSTEM_CD;
						this.row3__UPLOAD_ID = row3.UPLOAD_ID;
						this.row3__STARTDATE_SOURCE_PATH = row3.STARTDATE_SOURCE_PATH;
						this.row3__ENDDATE_SOURCE_PATH = row3.ENDDATE_SOURCE_PATH;
						this.row15__CONCEPT_PATH = row15.CONCEPT_PATH;
						this.row15__CONCEPT_CD = row15.CONCEPT_CD;
						this.row15__NAME_CHAR = row15.NAME_CHAR;
						this.row15__CONCEPT_BLOB = row15.CONCEPT_BLOB;
						this.row15__UPDATE_DATE = row15.UPDATE_DATE;
						this.row15__DOWNLOAD_DATE = row15.DOWNLOAD_DATE;
						this.row15__IMPORT_DATE = row15.IMPORT_DATE;
						this.row15__SOURCESYSTEM_CD = row15.SOURCESYSTEM_CD;
						this.row15__UPLOAD_ID = row15.UPLOAD_ID;
						this.exprKey_row14__PATIENT_NUM = exprKey_row14__PATIENT_NUM;
						this.exprKey_row14__CONCEPT_CD = exprKey_row14__CONCEPT_CD;

					}

					public void copyDataTo(to_obs_fctStruct row3,
							row15Struct row15) {

						row3.ENCOUNTER_NUM = this.row3__ENCOUNTER_NUM;
						row3.PATIENT_NUM = this.row3__PATIENT_NUM;
						row3.CONCEPT_CD = this.row3__CONCEPT_CD;
						row3.PROVIDER_ID = this.row3__PROVIDER_ID;
						row3.START_DATE = this.row3__START_DATE;
						row3.MODIFIER_CD = this.row3__MODIFIER_CD;
						row3.INSTANCE_NUM = this.row3__INSTANCE_NUM;
						row3.VALTYPE_CD = this.row3__VALTYPE_CD;
						row3.TVAL_CHAR = this.row3__TVAL_CHAR;
						row3.NVAL_NUM = this.row3__NVAL_NUM;
						row3.VALUEFLAG_CD = this.row3__VALUEFLAG_CD;
						row3.QUANTITY_NUM = this.row3__QUANTITY_NUM;
						row3.UNITS_CD = this.row3__UNITS_CD;
						row3.END_DATE = this.row3__END_DATE;
						row3.LOCATION_CD = this.row3__LOCATION_CD;
						row3.OBSERVATION_BLOB = this.row3__OBSERVATION_BLOB;
						row3.CONFIDENCE_NUM = this.row3__CONFIDENCE_NUM;
						row3.UPDATE_DATE = this.row3__UPDATE_DATE;
						row3.DOWNLOAD_DATE = this.row3__DOWNLOAD_DATE;
						row3.IMPORT_DATE = this.row3__IMPORT_DATE;
						row3.SOURCESYSTEM_CD = this.row3__SOURCESYSTEM_CD;
						row3.UPLOAD_ID = this.row3__UPLOAD_ID;
						row3.STARTDATE_SOURCE_PATH = this.row3__STARTDATE_SOURCE_PATH;
						row3.ENDDATE_SOURCE_PATH = this.row3__ENDDATE_SOURCE_PATH;
						row15.CONCEPT_PATH = this.row15__CONCEPT_PATH;
						row15.CONCEPT_CD = this.row15__CONCEPT_CD;
						row15.NAME_CHAR = this.row15__NAME_CHAR;
						row15.CONCEPT_BLOB = this.row15__CONCEPT_BLOB;
						row15.UPDATE_DATE = this.row15__UPDATE_DATE;
						row15.DOWNLOAD_DATE = this.row15__DOWNLOAD_DATE;
						row15.IMPORT_DATE = this.row15__IMPORT_DATE;
						row15.SOURCESYSTEM_CD = this.row15__SOURCESYSTEM_CD;
						row15.UPLOAD_ID = this.row15__UPLOAD_ID;

					}

					public String toString() {

						StringBuilder sb = new StringBuilder();
						sb.append(super.toString());
						sb.append("[");

						sb.append("row3__ENCOUNTER_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.row3__ENCOUNTER_NUM));

						sb.append(", ");

						sb.append("row3__PATIENT_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.row3__PATIENT_NUM));

						sb.append(", ");

						sb.append("row3__CONCEPT_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row3__CONCEPT_CD));

						sb.append(", ");

						sb.append("row3__PROVIDER_ID");
						sb.append("=");
						sb.append(String.valueOf(this.row3__PROVIDER_ID));

						sb.append(", ");

						sb.append("row3__START_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row3__START_DATE));

						sb.append(", ");

						sb.append("row3__MODIFIER_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row3__MODIFIER_CD));

						sb.append(", ");

						sb.append("row3__INSTANCE_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.row3__INSTANCE_NUM));

						sb.append(", ");

						sb.append("row3__VALTYPE_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row3__VALTYPE_CD));

						sb.append(", ");

						sb.append("row3__TVAL_CHAR");
						sb.append("=");
						sb.append(String.valueOf(this.row3__TVAL_CHAR));

						sb.append(", ");

						sb.append("row3__NVAL_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.row3__NVAL_NUM));

						sb.append(", ");

						sb.append("row3__VALUEFLAG_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row3__VALUEFLAG_CD));

						sb.append(", ");

						sb.append("row3__QUANTITY_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.row3__QUANTITY_NUM));

						sb.append(", ");

						sb.append("row3__UNITS_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row3__UNITS_CD));

						sb.append(", ");

						sb.append("row3__END_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row3__END_DATE));

						sb.append(", ");

						sb.append("row3__LOCATION_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row3__LOCATION_CD));

						sb.append(", ");

						sb.append("row3__OBSERVATION_BLOB");
						sb.append("=");
						sb.append(String.valueOf(this.row3__OBSERVATION_BLOB));

						sb.append(", ");

						sb.append("row3__CONFIDENCE_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.row3__CONFIDENCE_NUM));

						sb.append(", ");

						sb.append("row3__UPDATE_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row3__UPDATE_DATE));

						sb.append(", ");

						sb.append("row3__DOWNLOAD_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row3__DOWNLOAD_DATE));

						sb.append(", ");

						sb.append("row3__IMPORT_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row3__IMPORT_DATE));

						sb.append(", ");

						sb.append("row3__SOURCESYSTEM_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row3__SOURCESYSTEM_CD));

						sb.append(", ");

						sb.append("row3__UPLOAD_ID");
						sb.append("=");
						sb.append(String.valueOf(this.row3__UPLOAD_ID));

						sb.append(", ");

						sb.append("row3__STARTDATE_SOURCE_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.row3__STARTDATE_SOURCE_PATH));

						sb.append(", ");

						sb.append("row3__ENDDATE_SOURCE_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.row3__ENDDATE_SOURCE_PATH));

						sb.append(", ");

						sb.append("row15__CONCEPT_PATH");
						sb.append("=");
						sb.append(String.valueOf(this.row15__CONCEPT_PATH));

						sb.append(", ");

						sb.append("row15__CONCEPT_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row15__CONCEPT_CD));

						sb.append(", ");

						sb.append("row15__NAME_CHAR");
						sb.append("=");
						sb.append(String.valueOf(this.row15__NAME_CHAR));

						sb.append(", ");

						sb.append("row15__CONCEPT_BLOB");
						sb.append("=");
						sb.append(String.valueOf(this.row15__CONCEPT_BLOB));

						sb.append(", ");

						sb.append("row15__UPDATE_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row15__UPDATE_DATE));

						sb.append(", ");

						sb.append("row15__DOWNLOAD_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row15__DOWNLOAD_DATE));

						sb.append(", ");

						sb.append("row15__IMPORT_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row15__IMPORT_DATE));

						sb.append(", ");

						sb.append("row15__SOURCESYSTEM_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row15__SOURCESYSTEM_CD));

						sb.append(", ");

						sb.append("row15__UPLOAD_ID");
						sb.append("=");
						sb.append(String.valueOf(this.row15__UPLOAD_ID));

						sb.append("]");

						return sb.toString();
					}

					public int compareTo(SortableRow_tMap_9_2 other) {

						int returnValue = 0;

						returnValue = checkNullsAndCompare(
								this.exprKey_row14__PATIENT_NUM,
								other.exprKey_row14__PATIENT_NUM);
						if (returnValue != 0) {
							return returnValue;
						}

						returnValue = checkNullsAndCompare(
								this.exprKey_row14__CONCEPT_CD,
								other.exprKey_row14__CONCEPT_CD);
						if (returnValue != 0) {
							return returnValue;
						}

						return returnValue;
					}

					private int checkNullsAndCompare(Object object1,
							Object object2) {
						int returnValue = 0;
						if (object1 instanceof Comparable
								&& object2 instanceof Comparable) {
							returnValue = ((Comparable) object1)
									.compareTo(object2);
						} else if (object1 != null && object2 != null) {
							returnValue = compareStrings(object1.toString(),
									object2.toString());
						} else if (object1 == null && object2 != null) {
							returnValue = 1;
						} else if (object1 != null && object2 == null) {
							returnValue = -1;
						} else {
							returnValue = 0;
						}

						return returnValue;
					}

					private int compareStrings(String string1, String string2) {
						return string1.compareTo(string2);
					}

					public void readData(ObjectInputStream dis) {

						synchronized (row15Struct.commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

							try {

								int length = 0;

								this.is__rejectedInnerJoin = dis.readBoolean();

								this.row3__ENCOUNTER_NUM = (BigDecimal) dis
										.readObject();

								this.row3__PATIENT_NUM = (BigDecimal) dis
										.readObject();

								length = dis.readInt();
								if (length == -1) {
									this.row3__CONCEPT_CD = null;
								} else {
									if (length > row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row3__CONCEPT_CD = new String(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row3__PROVIDER_ID = null;
								} else {
									if (length > row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row3__PROVIDER_ID = new String(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row3__START_DATE = null;
								} else {
									if (length > row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row3__START_DATE = new String(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row3__MODIFIER_CD = null;
								} else {
									if (length > row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row3__MODIFIER_CD = new String(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row3__INSTANCE_NUM = null;
								} else {
									if (length > row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row3__INSTANCE_NUM = new String(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row3__VALTYPE_CD = null;
								} else {
									if (length > row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row3__VALTYPE_CD = new String(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row3__TVAL_CHAR = null;
								} else {
									if (length > row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row3__TVAL_CHAR = new String(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.row3__NVAL_NUM = null;
								} else {
									this.row3__NVAL_NUM = dis.readFloat();
								}

								length = dis.readInt();
								if (length == -1) {
									this.row3__VALUEFLAG_CD = null;
								} else {
									if (length > row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row3__VALUEFLAG_CD = new String(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row3__QUANTITY_NUM = null;
								} else {
									if (length > row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row3__QUANTITY_NUM = new String(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row3__UNITS_CD = null;
								} else {
									if (length > row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row3__UNITS_CD = new String(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row3__END_DATE = null;
								} else {
									if (length > row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row3__END_DATE = new String(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row3__LOCATION_CD = null;
								} else {
									if (length > row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row3__LOCATION_CD = new String(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row3__OBSERVATION_BLOB = null;
								} else {
									if (length > row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row3__OBSERVATION_BLOB = new String(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row3__CONFIDENCE_NUM = null;
								} else {
									if (length > row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row3__CONFIDENCE_NUM = new String(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.row3__UPDATE_DATE = null;
								} else {
									this.row3__UPDATE_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.row3__DOWNLOAD_DATE = null;
								} else {
									this.row3__DOWNLOAD_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.row3__IMPORT_DATE = null;
								} else {
									this.row3__IMPORT_DATE = new Date(
											dis.readLong());
								}

								length = dis.readInt();
								if (length == -1) {
									this.row3__SOURCESYSTEM_CD = null;
								} else {
									if (length > row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row3__SOURCESYSTEM_CD = new String(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row3__UPLOAD_ID = null;
								} else {
									if (length > row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row3__UPLOAD_ID = new String(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row3__STARTDATE_SOURCE_PATH = null;
								} else {
									if (length > row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row3__STARTDATE_SOURCE_PATH = new String(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row3__ENDDATE_SOURCE_PATH = null;
								} else {
									if (length > row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row3__ENDDATE_SOURCE_PATH = new String(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row15__CONCEPT_PATH = null;
								} else {
									if (length > row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row15__CONCEPT_PATH = new String(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row15__CONCEPT_CD = null;
								} else {
									if (length > row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row15__CONCEPT_CD = new String(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row15__NAME_CHAR = null;
								} else {
									if (length > row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row15__NAME_CHAR = new String(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row15__CONCEPT_BLOB = null;
								} else {
									if (length > row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row15__CONCEPT_BLOB = new String(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.row15__UPDATE_DATE = null;
								} else {
									this.row15__UPDATE_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.row15__DOWNLOAD_DATE = null;
								} else {
									this.row15__DOWNLOAD_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.row15__IMPORT_DATE = null;
								} else {
									this.row15__IMPORT_DATE = new Date(
											dis.readLong());
								}

								length = dis.readInt();
								if (length == -1) {
									this.row15__SOURCESYSTEM_CD = null;
								} else {
									if (length > row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row15__SOURCESYSTEM_CD = new String(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row15__UPLOAD_ID = null;
								} else {
									if (length > row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row15__UPLOAD_ID = new String(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								this.exprKey_row14__PATIENT_NUM = (BigDecimal) dis
										.readObject();

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row14__CONCEPT_CD = null;
								} else {
									if (length > row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.exprKey_row14__CONCEPT_CD = new String(
											row15Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

							} catch (IOException e) {
								throw new RuntimeException(e);

							} catch (ClassNotFoundException eCNFE) {
								throw new RuntimeException(eCNFE);

							}

						}
					}

					public void writeData(ObjectOutputStream dos) {
						try {

							dos.writeBoolean(this.is__rejectedInnerJoin);

							dos.writeObject(this.row3__ENCOUNTER_NUM);

							dos.writeObject(this.row3__PATIENT_NUM);

							if (this.row3__CONCEPT_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__CONCEPT_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row3__PROVIDER_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__PROVIDER_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row3__START_DATE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__START_DATE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row3__MODIFIER_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__MODIFIER_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row3__INSTANCE_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__INSTANCE_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row3__VALTYPE_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__VALTYPE_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row3__TVAL_CHAR == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__TVAL_CHAR
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row3__NVAL_NUM == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeFloat(this.row3__NVAL_NUM);
							}

							if (this.row3__VALUEFLAG_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__VALUEFLAG_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row3__QUANTITY_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__QUANTITY_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row3__UNITS_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__UNITS_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row3__END_DATE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__END_DATE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row3__LOCATION_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__LOCATION_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row3__OBSERVATION_BLOB == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__OBSERVATION_BLOB
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row3__CONFIDENCE_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__CONFIDENCE_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row3__UPDATE_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row3__UPDATE_DATE.getTime());
							}

							if (this.row3__DOWNLOAD_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row3__DOWNLOAD_DATE
										.getTime());
							}

							if (this.row3__IMPORT_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row3__IMPORT_DATE.getTime());
							}

							if (this.row3__SOURCESYSTEM_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__SOURCESYSTEM_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row3__UPLOAD_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__UPLOAD_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row3__STARTDATE_SOURCE_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__STARTDATE_SOURCE_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row3__ENDDATE_SOURCE_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__ENDDATE_SOURCE_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row15__CONCEPT_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row15__CONCEPT_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row15__CONCEPT_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row15__CONCEPT_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row15__NAME_CHAR == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row15__NAME_CHAR
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row15__CONCEPT_BLOB == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row15__CONCEPT_BLOB
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row15__UPDATE_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row15__UPDATE_DATE.getTime());
							}

							if (this.row15__DOWNLOAD_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row15__DOWNLOAD_DATE
										.getTime());
							}

							if (this.row15__IMPORT_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row15__IMPORT_DATE.getTime());
							}

							if (this.row15__SOURCESYSTEM_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row15__SOURCESYSTEM_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row15__UPLOAD_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row15__UPLOAD_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							dos.writeObject(this.exprKey_row14__PATIENT_NUM);

							if (this.exprKey_row14__CONCEPT_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row14__CONCEPT_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

				} // G_TM_B_001

				org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_9_2> fsi_tMap_9_2 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_9_2>(
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_"
								+ Thread.currentThread().getId() + "_" + pid
								+ "_tMap_9_2", 200000) {
					public SortableRow_tMap_9_2 createRowInstance() {
						return new SortableRow_tMap_9_2();
					}
				};

				fsi_tMap_9_2.initPut();

				/**
				 * [tMap_9_TMAP_OUT begin ] stop
				 */

				/**
				 * [tJavaRow_6 begin ] start
				 */

				ok_Hash.put("tJavaRow_6", false);
				start_Hash.put("tJavaRow_6", System.currentTimeMillis());

				currentComponent = "tJavaRow_6";

				int tos_count_tJavaRow_6 = 0;

				/**
				 * [tJavaRow_6 begin ] stop
				 */

				/**
				 * [tMap_4_TMAP_IN begin ] start
				 */

				ok_Hash.put("tMap_4_TMAP_IN", false);
				start_Hash.put("tMap_4_TMAP_IN", System.currentTimeMillis());

				currentVirtualComponent = "tMap_4";

				currentComponent = "tMap_4_TMAP_IN";

				int tos_count_tMap_4_TMAP_IN = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_4_TMAP_IN__Struct {
				}
				Var__tMap_4_TMAP_IN__Struct Var__tMap_4_TMAP_IN = new Var__tMap_4_TMAP_IN__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				to_obs_fctStruct to_obs_fct_tmp = new to_obs_fctStruct();
				// ###############################

				/**
				 * [tMap_4_TMAP_IN begin ] stop
				 */

				/**
				 * [tMap_4_TMAP_IN main ] start
				 */

				currentVirtualComponent = "tMap_4";

				currentComponent = "tMap_4_TMAP_IN";

				boolean hasCasePrimitiveKeyWithNull_tMap_4_TMAP_IN = false;

				fsi_tMap_4_1.endPut();

				if (row6 == null) {
					row6 = new row6Struct();
				}

				// ###############################
				// # Input tables (lookups)
				boolean rejectedInnerJoin_tMap_4_TMAP_IN = false;
				boolean mainRowRejected_tMap_4_TMAP_IN = false;

				// /////////////////////////////////////////////
				// Starting Lookup Table "to_tmap"
				// /////////////////////////////////////////////

				SortableRow_tMap_4_1 rsc_tMap_4_1;

				tHash_Lookup_to_tmap.initGet();

				fsi_tMap_4_1.initGet();

				// TEST firstLookupIsPersistentSorted=true
				// isFirstPersistentSortedTable=true

				rejectedInnerJoin_tMap_4_TMAP_IN = false;

				while (fsi_tMap_4_1.hasNext()) { // G_TM_M_250 loop "1"

					// CALL close loop of lookup '1'

					rsc_tMap_4_1 = (SortableRow_tMap_4_1) fsi_tMap_4_1.next();
					rsc_tMap_4_1.copyDataTo(row6);

					rejectedInnerJoin_tMap_4_TMAP_IN = rsc_tMap_4_1.is__rejectedInnerJoin;

					boolean forceLoopto_tmap = false;

					to_tmapStruct to_tmapObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_4_TMAP_IN) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_4_TMAP_IN = false;

						to_tmapHashKey.CONCEPT_CD = rsc_tMap_4_1.exprKey_to_tmap__CONCEPT_CD;

						tHash_Lookup_to_tmap.lookup(to_tmapHashKey);

					} // G_TM_M_020

					to_tmapStruct to_tmap = null;

					to_tmapStruct fromLookup_to_tmap = null;
					to_tmap = to_tmapDefault;

					if (tHash_Lookup_to_tmap != null
							&& tHash_Lookup_to_tmap.hasNext()) { // G 099

						fromLookup_to_tmap = tHash_Lookup_to_tmap.next();

					} // G 099

					if (fromLookup_to_tmap != null) {
						to_tmap = fromLookup_to_tmap;
					}

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_4_TMAP_IN__Struct Var = Var__tMap_4_TMAP_IN;// ###############################
						// ###############################
						// # Output tables

						to_obs_fct = null;

						// # Output table : 'to_obs_fct'
						// # Filter conditions
						if (

						row6.MODIFIER_CD.equals("@")

						) {
							to_obs_fct_tmp.ENCOUNTER_NUM = row6.ENCOUNTER_NUM;
							to_obs_fct_tmp.PATIENT_NUM = row6.PATIENT_NUM;
							to_obs_fct_tmp.CONCEPT_CD = row6.CONCEPT_CD;
							to_obs_fct_tmp.PROVIDER_ID = row6.PROVIDER_ID;
							to_obs_fct_tmp.START_DATE = row6.START_DATE;
							to_obs_fct_tmp.MODIFIER_CD = row6.MODIFIER_CD;
							to_obs_fct_tmp.INSTANCE_NUM = row6.INSTANCE_NUM;
							to_obs_fct_tmp.VALTYPE_CD = row6.VALTYPE_CD;
							to_obs_fct_tmp.TVAL_CHAR = row6.TVAL_CHAR;
							to_obs_fct_tmp.NVAL_NUM = row6.NVAL_NUM;
							to_obs_fct_tmp.VALUEFLAG_CD = row6.VALUEFLAG_CD;
							to_obs_fct_tmp.QUANTITY_NUM = row6.QUANTITY_NUM;
							to_obs_fct_tmp.UNITS_CD = row6.UNITS_CD;
							to_obs_fct_tmp.END_DATE = row6.END_DATE;
							to_obs_fct_tmp.LOCATION_CD = row6.LOCATION_CD;
							to_obs_fct_tmp.OBSERVATION_BLOB = row6.OBSERVATION_BLOB;
							to_obs_fct_tmp.CONFIDENCE_NUM = row6.CONFIDENCE_NUM;
							to_obs_fct_tmp.UPDATE_DATE = row6.UPDATE_DATE;
							to_obs_fct_tmp.DOWNLOAD_DATE = row6.DOWNLOAD_DATE;
							to_obs_fct_tmp.IMPORT_DATE = row6.IMPORT_DATE;
							to_obs_fct_tmp.SOURCESYSTEM_CD = row6.SOURCESYSTEM_CD;
							to_obs_fct_tmp.UPLOAD_ID = row6.UPLOAD_ID;
							to_obs_fct_tmp.STARTDATE_SOURCE_PATH = to_tmap.STARTDATE_SOURCE_PATH;
							to_obs_fct_tmp.ENDDATE_SOURCE_PATH = to_tmap.ENDDATE_SOURCE_PATH;
							to_obs_fct = to_obs_fct_tmp;
						} // closing filter/reject
							// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_4_TMAP_IN = false;

					tos_count_tMap_4_TMAP_IN++;

					/**
					 * [tMap_4_TMAP_IN main ] stop
					 */
					// Start of branch "to_obs_fct"
					if (to_obs_fct != null) {

						/**
						 * [tJavaRow_6 main ] start
						 */

						currentComponent = "tJavaRow_6";

						row3 = to_obs_fct;

						tos_count_tJavaRow_6++;

						/**
						 * [tJavaRow_6 main ] stop
						 */

						/**
						 * [tMap_9_TMAP_OUT main ] start
						 */

						currentVirtualComponent = "tMap_9";

						currentComponent = "tMap_9_TMAP_OUT";

						boolean hasCasePrimitiveKeyWithNull_tMap_9_TMAP_OUT = false;

						hasCasePrimitiveKeyWithNull_tMap_9_TMAP_OUT = false;

						String exprKey_row15__CONCEPT_PATH = row3.STARTDATE_SOURCE_PATH;

						SortableRow_tMap_9_1 sortableRow_tMap_9_1 = fsi_tMap_9_1
								.getNextFreeRow();

						sortableRow_tMap_9_1.fillFrom(row3,
								exprKey_row15__CONCEPT_PATH);

						fsi_tMap_9_1.put(sortableRow_tMap_9_1);

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_9_TMAP_OUT = false;
						boolean mainRowRejected_tMap_9_TMAP_OUT = false;

						// ###############################

						tos_count_tMap_9_TMAP_OUT++;

						/**
						 * [tMap_9_TMAP_OUT main ] stop
						 */

					} // End of branch "to_obs_fct"

				} // G_TM_M_250 close loop read file data '1'

				/**
				 * [tMap_4_TMAP_IN end ] start
				 */

				currentVirtualComponent = "tMap_4";

				currentComponent = "tMap_4_TMAP_IN";

				// ###############################
				// # Lookup hashes releasing
				fsi_tMap_4_1.endGet();

				if (tHash_Lookup_to_tmap != null) {
					tHash_Lookup_to_tmap.endGet();
				}
				globalMap.remove("tHash_Lookup_to_tmap");

				// ###############################

				ok_Hash.put("tMap_4_TMAP_IN", true);
				end_Hash.put("tMap_4_TMAP_IN", System.currentTimeMillis());

				/**
				 * [tMap_4_TMAP_IN end ] stop
				 */

				/**
				 * [tJavaRow_6 end ] start
				 */

				currentComponent = "tJavaRow_6";

				ok_Hash.put("tJavaRow_6", true);
				end_Hash.put("tJavaRow_6", System.currentTimeMillis());

				/**
				 * [tJavaRow_6 end ] stop
				 */

				/**
				 * [tMap_9_TMAP_OUT end ] start
				 */

				currentVirtualComponent = "tMap_9";

				currentComponent = "tMap_9_TMAP_OUT";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_9_TMAP_OUT", true);
				end_Hash.put("tMap_9_TMAP_OUT", System.currentTimeMillis());

				/**
				 * [tMap_9_TMAP_OUT end ] stop
				 */

				/**
				 * [tMap_8_TMAP_OUT begin ] start
				 */

				ok_Hash.put("tMap_8_TMAP_OUT", false);
				start_Hash.put("tMap_8_TMAP_OUT", System.currentTimeMillis());

				currentVirtualComponent = "tMap_8";

				currentComponent = "tMap_8_TMAP_OUT";

				int tos_count_tMap_8_TMAP_OUT = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row16Struct> tHash_Lookup_row16 = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row16Struct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row16Struct>) globalMap
						.get("tHash_Lookup_row16"));

				row16Struct row16HashKey = new row16Struct();
				row16Struct row16Default = new row16Struct();

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row17Struct> tHash_Lookup_row17 = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row17Struct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row17Struct>) globalMap
						.get("tHash_Lookup_row17"));

				row17Struct row17HashKey = new row17Struct();
				row17Struct row17Default = new row17Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_8_TMAP_OUT__Struct {
				}
				Var__tMap_8_TMAP_OUT__Struct Var__tMap_8_TMAP_OUT = new Var__tMap_8_TMAP_OUT__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				// ###############################

				class SortableRow_tMap_8_1 implements
						Comparable<SortableRow_tMap_8_1>,
						routines.system.IPersistableRow<SortableRow_tMap_8_1> { // G_TM_B_001

					boolean is__rejectedInnerJoin;

					String exprKey_row16__CONCEPT_PATH;

					// out1
					BigDecimal out1__ENCOUNTER_NUM;
					BigDecimal out1__PATIENT_NUM;
					String out1__CONCEPT_CD;
					String out1__PROVIDER_ID;
					String out1__START_DATE;
					String out1__MODIFIER_CD;
					String out1__INSTANCE_NUM;
					String out1__VALTYPE_CD;
					String out1__TVAL_CHAR;
					Float out1__NVAL_NUM;
					String out1__VALUEFLAG_CD;
					String out1__QUANTITY_NUM;
					String out1__UNITS_CD;
					String out1__END_DATE;
					String out1__LOCATION_CD;
					String out1__OBSERVATION_BLOB;
					String out1__CONFIDENCE_NUM;
					java.util.Date out1__UPDATE_DATE;
					java.util.Date out1__DOWNLOAD_DATE;
					java.util.Date out1__IMPORT_DATE;
					String out1__SOURCESYSTEM_CD;
					String out1__UPLOAD_ID;
					String out1__ENDDATE_SOURCE_PATH;

					public void fillFrom(out1Struct out1,
							String exprKey_row16__CONCEPT_PATH) {

						this.out1__ENCOUNTER_NUM = out1.ENCOUNTER_NUM;
						this.out1__PATIENT_NUM = out1.PATIENT_NUM;
						this.out1__CONCEPT_CD = out1.CONCEPT_CD;
						this.out1__PROVIDER_ID = out1.PROVIDER_ID;
						this.out1__START_DATE = out1.START_DATE;
						this.out1__MODIFIER_CD = out1.MODIFIER_CD;
						this.out1__INSTANCE_NUM = out1.INSTANCE_NUM;
						this.out1__VALTYPE_CD = out1.VALTYPE_CD;
						this.out1__TVAL_CHAR = out1.TVAL_CHAR;
						this.out1__NVAL_NUM = out1.NVAL_NUM;
						this.out1__VALUEFLAG_CD = out1.VALUEFLAG_CD;
						this.out1__QUANTITY_NUM = out1.QUANTITY_NUM;
						this.out1__UNITS_CD = out1.UNITS_CD;
						this.out1__END_DATE = out1.END_DATE;
						this.out1__LOCATION_CD = out1.LOCATION_CD;
						this.out1__OBSERVATION_BLOB = out1.OBSERVATION_BLOB;
						this.out1__CONFIDENCE_NUM = out1.CONFIDENCE_NUM;
						this.out1__UPDATE_DATE = out1.UPDATE_DATE;
						this.out1__DOWNLOAD_DATE = out1.DOWNLOAD_DATE;
						this.out1__IMPORT_DATE = out1.IMPORT_DATE;
						this.out1__SOURCESYSTEM_CD = out1.SOURCESYSTEM_CD;
						this.out1__UPLOAD_ID = out1.UPLOAD_ID;
						this.out1__ENDDATE_SOURCE_PATH = out1.ENDDATE_SOURCE_PATH;
						this.exprKey_row16__CONCEPT_PATH = exprKey_row16__CONCEPT_PATH;

					}

					public void copyDataTo(out1Struct out1) {

						out1.ENCOUNTER_NUM = this.out1__ENCOUNTER_NUM;
						out1.PATIENT_NUM = this.out1__PATIENT_NUM;
						out1.CONCEPT_CD = this.out1__CONCEPT_CD;
						out1.PROVIDER_ID = this.out1__PROVIDER_ID;
						out1.START_DATE = this.out1__START_DATE;
						out1.MODIFIER_CD = this.out1__MODIFIER_CD;
						out1.INSTANCE_NUM = this.out1__INSTANCE_NUM;
						out1.VALTYPE_CD = this.out1__VALTYPE_CD;
						out1.TVAL_CHAR = this.out1__TVAL_CHAR;
						out1.NVAL_NUM = this.out1__NVAL_NUM;
						out1.VALUEFLAG_CD = this.out1__VALUEFLAG_CD;
						out1.QUANTITY_NUM = this.out1__QUANTITY_NUM;
						out1.UNITS_CD = this.out1__UNITS_CD;
						out1.END_DATE = this.out1__END_DATE;
						out1.LOCATION_CD = this.out1__LOCATION_CD;
						out1.OBSERVATION_BLOB = this.out1__OBSERVATION_BLOB;
						out1.CONFIDENCE_NUM = this.out1__CONFIDENCE_NUM;
						out1.UPDATE_DATE = this.out1__UPDATE_DATE;
						out1.DOWNLOAD_DATE = this.out1__DOWNLOAD_DATE;
						out1.IMPORT_DATE = this.out1__IMPORT_DATE;
						out1.SOURCESYSTEM_CD = this.out1__SOURCESYSTEM_CD;
						out1.UPLOAD_ID = this.out1__UPLOAD_ID;
						out1.ENDDATE_SOURCE_PATH = this.out1__ENDDATE_SOURCE_PATH;

					}

					public String toString() {

						StringBuilder sb = new StringBuilder();
						sb.append(super.toString());
						sb.append("[");

						sb.append("out1__ENCOUNTER_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.out1__ENCOUNTER_NUM));

						sb.append(", ");

						sb.append("out1__PATIENT_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.out1__PATIENT_NUM));

						sb.append(", ");

						sb.append("out1__CONCEPT_CD");
						sb.append("=");
						sb.append(String.valueOf(this.out1__CONCEPT_CD));

						sb.append(", ");

						sb.append("out1__PROVIDER_ID");
						sb.append("=");
						sb.append(String.valueOf(this.out1__PROVIDER_ID));

						sb.append(", ");

						sb.append("out1__START_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.out1__START_DATE));

						sb.append(", ");

						sb.append("out1__MODIFIER_CD");
						sb.append("=");
						sb.append(String.valueOf(this.out1__MODIFIER_CD));

						sb.append(", ");

						sb.append("out1__INSTANCE_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.out1__INSTANCE_NUM));

						sb.append(", ");

						sb.append("out1__VALTYPE_CD");
						sb.append("=");
						sb.append(String.valueOf(this.out1__VALTYPE_CD));

						sb.append(", ");

						sb.append("out1__TVAL_CHAR");
						sb.append("=");
						sb.append(String.valueOf(this.out1__TVAL_CHAR));

						sb.append(", ");

						sb.append("out1__NVAL_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.out1__NVAL_NUM));

						sb.append(", ");

						sb.append("out1__VALUEFLAG_CD");
						sb.append("=");
						sb.append(String.valueOf(this.out1__VALUEFLAG_CD));

						sb.append(", ");

						sb.append("out1__QUANTITY_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.out1__QUANTITY_NUM));

						sb.append(", ");

						sb.append("out1__UNITS_CD");
						sb.append("=");
						sb.append(String.valueOf(this.out1__UNITS_CD));

						sb.append(", ");

						sb.append("out1__END_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.out1__END_DATE));

						sb.append(", ");

						sb.append("out1__LOCATION_CD");
						sb.append("=");
						sb.append(String.valueOf(this.out1__LOCATION_CD));

						sb.append(", ");

						sb.append("out1__OBSERVATION_BLOB");
						sb.append("=");
						sb.append(String.valueOf(this.out1__OBSERVATION_BLOB));

						sb.append(", ");

						sb.append("out1__CONFIDENCE_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.out1__CONFIDENCE_NUM));

						sb.append(", ");

						sb.append("out1__UPDATE_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.out1__UPDATE_DATE));

						sb.append(", ");

						sb.append("out1__DOWNLOAD_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.out1__DOWNLOAD_DATE));

						sb.append(", ");

						sb.append("out1__IMPORT_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.out1__IMPORT_DATE));

						sb.append(", ");

						sb.append("out1__SOURCESYSTEM_CD");
						sb.append("=");
						sb.append(String.valueOf(this.out1__SOURCESYSTEM_CD));

						sb.append(", ");

						sb.append("out1__UPLOAD_ID");
						sb.append("=");
						sb.append(String.valueOf(this.out1__UPLOAD_ID));

						sb.append(", ");

						sb.append("out1__ENDDATE_SOURCE_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.out1__ENDDATE_SOURCE_PATH));

						sb.append("]");

						return sb.toString();
					}

					public int compareTo(SortableRow_tMap_8_1 other) {

						int returnValue = 0;

						returnValue = checkNullsAndCompare(
								this.exprKey_row16__CONCEPT_PATH,
								other.exprKey_row16__CONCEPT_PATH);
						if (returnValue != 0) {
							return returnValue;
						}

						return returnValue;
					}

					private int checkNullsAndCompare(Object object1,
							Object object2) {
						int returnValue = 0;
						if (object1 instanceof Comparable
								&& object2 instanceof Comparable) {
							returnValue = ((Comparable) object1)
									.compareTo(object2);
						} else if (object1 != null && object2 != null) {
							returnValue = compareStrings(object1.toString(),
									object2.toString());
						} else if (object1 == null && object2 != null) {
							returnValue = 1;
						} else if (object1 != null && object2 == null) {
							returnValue = -1;
						} else {
							returnValue = 0;
						}

						return returnValue;
					}

					private int compareStrings(String string1, String string2) {
						return string1.compareTo(string2);
					}

					public void readData(ObjectInputStream dis) {

						synchronized (out1Struct.commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

							try {

								int length = 0;

								this.is__rejectedInnerJoin = dis.readBoolean();

								this.out1__ENCOUNTER_NUM = (BigDecimal) dis
										.readObject();

								this.out1__PATIENT_NUM = (BigDecimal) dis
										.readObject();

								length = dis.readInt();
								if (length == -1) {
									this.out1__CONCEPT_CD = null;
								} else {
									if (length > out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__CONCEPT_CD = new String(
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__PROVIDER_ID = null;
								} else {
									if (length > out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__PROVIDER_ID = new String(
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__START_DATE = null;
								} else {
									if (length > out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__START_DATE = new String(
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__MODIFIER_CD = null;
								} else {
									if (length > out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__MODIFIER_CD = new String(
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__INSTANCE_NUM = null;
								} else {
									if (length > out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__INSTANCE_NUM = new String(
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__VALTYPE_CD = null;
								} else {
									if (length > out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__VALTYPE_CD = new String(
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__TVAL_CHAR = null;
								} else {
									if (length > out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__TVAL_CHAR = new String(
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.out1__NVAL_NUM = null;
								} else {
									this.out1__NVAL_NUM = dis.readFloat();
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__VALUEFLAG_CD = null;
								} else {
									if (length > out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__VALUEFLAG_CD = new String(
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__QUANTITY_NUM = null;
								} else {
									if (length > out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__QUANTITY_NUM = new String(
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__UNITS_CD = null;
								} else {
									if (length > out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__UNITS_CD = new String(
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__END_DATE = null;
								} else {
									if (length > out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__END_DATE = new String(
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__LOCATION_CD = null;
								} else {
									if (length > out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__LOCATION_CD = new String(
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__OBSERVATION_BLOB = null;
								} else {
									if (length > out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__OBSERVATION_BLOB = new String(
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__CONFIDENCE_NUM = null;
								} else {
									if (length > out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__CONFIDENCE_NUM = new String(
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.out1__UPDATE_DATE = null;
								} else {
									this.out1__UPDATE_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.out1__DOWNLOAD_DATE = null;
								} else {
									this.out1__DOWNLOAD_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.out1__IMPORT_DATE = null;
								} else {
									this.out1__IMPORT_DATE = new Date(
											dis.readLong());
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__SOURCESYSTEM_CD = null;
								} else {
									if (length > out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__SOURCESYSTEM_CD = new String(
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__UPLOAD_ID = null;
								} else {
									if (length > out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__UPLOAD_ID = new String(
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__ENDDATE_SOURCE_PATH = null;
								} else {
									if (length > out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__ENDDATE_SOURCE_PATH = new String(
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row16__CONCEPT_PATH = null;
								} else {
									if (length > out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.exprKey_row16__CONCEPT_PATH = new String(
											out1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

							} catch (IOException e) {
								throw new RuntimeException(e);

							} catch (ClassNotFoundException eCNFE) {
								throw new RuntimeException(eCNFE);

							}

						}
					}

					public void writeData(ObjectOutputStream dos) {
						try {

							dos.writeBoolean(this.is__rejectedInnerJoin);

							dos.writeObject(this.out1__ENCOUNTER_NUM);

							dos.writeObject(this.out1__PATIENT_NUM);

							if (this.out1__CONCEPT_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__CONCEPT_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__PROVIDER_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__PROVIDER_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__START_DATE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__START_DATE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__MODIFIER_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__MODIFIER_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__INSTANCE_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__INSTANCE_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__VALTYPE_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__VALTYPE_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__TVAL_CHAR == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__TVAL_CHAR
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__NVAL_NUM == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeFloat(this.out1__NVAL_NUM);
							}

							if (this.out1__VALUEFLAG_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__VALUEFLAG_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__QUANTITY_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__QUANTITY_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__UNITS_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__UNITS_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__END_DATE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__END_DATE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__LOCATION_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__LOCATION_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__OBSERVATION_BLOB == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__OBSERVATION_BLOB
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__CONFIDENCE_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__CONFIDENCE_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__UPDATE_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.out1__UPDATE_DATE.getTime());
							}

							if (this.out1__DOWNLOAD_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.out1__DOWNLOAD_DATE
										.getTime());
							}

							if (this.out1__IMPORT_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.out1__IMPORT_DATE.getTime());
							}

							if (this.out1__SOURCESYSTEM_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__SOURCESYSTEM_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__UPLOAD_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__UPLOAD_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__ENDDATE_SOURCE_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__ENDDATE_SOURCE_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.exprKey_row16__CONCEPT_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row16__CONCEPT_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

				} // G_TM_B_001

				org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_8_1> fsi_tMap_8_1 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_8_1>(
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_"
								+ Thread.currentThread().getId() + "_" + pid
								+ "_tMap_8_1", 200000) {
					public SortableRow_tMap_8_1 createRowInstance() {
						return new SortableRow_tMap_8_1();
					}
				};

				fsi_tMap_8_1.initPut();

				class SortableRow_tMap_8_2 implements
						Comparable<SortableRow_tMap_8_2>,
						routines.system.IPersistableRow<SortableRow_tMap_8_2> { // G_TM_B_001

					boolean is__rejectedInnerJoin;

					BigDecimal exprKey_row17__PATIENT_NUM;
					String exprKey_row17__CONCEPT_CD;

					// row16
					BigDecimal out1__ENCOUNTER_NUM;
					BigDecimal out1__PATIENT_NUM;
					String out1__CONCEPT_CD;
					String out1__PROVIDER_ID;
					String out1__START_DATE;
					String out1__MODIFIER_CD;
					String out1__INSTANCE_NUM;
					String out1__VALTYPE_CD;
					String out1__TVAL_CHAR;
					Float out1__NVAL_NUM;
					String out1__VALUEFLAG_CD;
					String out1__QUANTITY_NUM;
					String out1__UNITS_CD;
					String out1__END_DATE;
					String out1__LOCATION_CD;
					String out1__OBSERVATION_BLOB;
					String out1__CONFIDENCE_NUM;
					java.util.Date out1__UPDATE_DATE;
					java.util.Date out1__DOWNLOAD_DATE;
					java.util.Date out1__IMPORT_DATE;
					String out1__SOURCESYSTEM_CD;
					String out1__UPLOAD_ID;
					String out1__ENDDATE_SOURCE_PATH;
					String row16__CONCEPT_PATH;
					String row16__CONCEPT_CD;
					String row16__NAME_CHAR;
					String row16__CONCEPT_BLOB;
					java.util.Date row16__UPDATE_DATE;
					java.util.Date row16__DOWNLOAD_DATE;
					java.util.Date row16__IMPORT_DATE;
					String row16__SOURCESYSTEM_CD;
					String row16__UPLOAD_ID;

					public void fillFrom(out1Struct out1, row16Struct row16,
							BigDecimal exprKey_row17__PATIENT_NUM,
							String exprKey_row17__CONCEPT_CD) {

						this.out1__ENCOUNTER_NUM = out1.ENCOUNTER_NUM;
						this.out1__PATIENT_NUM = out1.PATIENT_NUM;
						this.out1__CONCEPT_CD = out1.CONCEPT_CD;
						this.out1__PROVIDER_ID = out1.PROVIDER_ID;
						this.out1__START_DATE = out1.START_DATE;
						this.out1__MODIFIER_CD = out1.MODIFIER_CD;
						this.out1__INSTANCE_NUM = out1.INSTANCE_NUM;
						this.out1__VALTYPE_CD = out1.VALTYPE_CD;
						this.out1__TVAL_CHAR = out1.TVAL_CHAR;
						this.out1__NVAL_NUM = out1.NVAL_NUM;
						this.out1__VALUEFLAG_CD = out1.VALUEFLAG_CD;
						this.out1__QUANTITY_NUM = out1.QUANTITY_NUM;
						this.out1__UNITS_CD = out1.UNITS_CD;
						this.out1__END_DATE = out1.END_DATE;
						this.out1__LOCATION_CD = out1.LOCATION_CD;
						this.out1__OBSERVATION_BLOB = out1.OBSERVATION_BLOB;
						this.out1__CONFIDENCE_NUM = out1.CONFIDENCE_NUM;
						this.out1__UPDATE_DATE = out1.UPDATE_DATE;
						this.out1__DOWNLOAD_DATE = out1.DOWNLOAD_DATE;
						this.out1__IMPORT_DATE = out1.IMPORT_DATE;
						this.out1__SOURCESYSTEM_CD = out1.SOURCESYSTEM_CD;
						this.out1__UPLOAD_ID = out1.UPLOAD_ID;
						this.out1__ENDDATE_SOURCE_PATH = out1.ENDDATE_SOURCE_PATH;
						this.row16__CONCEPT_PATH = row16.CONCEPT_PATH;
						this.row16__CONCEPT_CD = row16.CONCEPT_CD;
						this.row16__NAME_CHAR = row16.NAME_CHAR;
						this.row16__CONCEPT_BLOB = row16.CONCEPT_BLOB;
						this.row16__UPDATE_DATE = row16.UPDATE_DATE;
						this.row16__DOWNLOAD_DATE = row16.DOWNLOAD_DATE;
						this.row16__IMPORT_DATE = row16.IMPORT_DATE;
						this.row16__SOURCESYSTEM_CD = row16.SOURCESYSTEM_CD;
						this.row16__UPLOAD_ID = row16.UPLOAD_ID;
						this.exprKey_row17__PATIENT_NUM = exprKey_row17__PATIENT_NUM;
						this.exprKey_row17__CONCEPT_CD = exprKey_row17__CONCEPT_CD;

					}

					public void copyDataTo(out1Struct out1, row16Struct row16) {

						out1.ENCOUNTER_NUM = this.out1__ENCOUNTER_NUM;
						out1.PATIENT_NUM = this.out1__PATIENT_NUM;
						out1.CONCEPT_CD = this.out1__CONCEPT_CD;
						out1.PROVIDER_ID = this.out1__PROVIDER_ID;
						out1.START_DATE = this.out1__START_DATE;
						out1.MODIFIER_CD = this.out1__MODIFIER_CD;
						out1.INSTANCE_NUM = this.out1__INSTANCE_NUM;
						out1.VALTYPE_CD = this.out1__VALTYPE_CD;
						out1.TVAL_CHAR = this.out1__TVAL_CHAR;
						out1.NVAL_NUM = this.out1__NVAL_NUM;
						out1.VALUEFLAG_CD = this.out1__VALUEFLAG_CD;
						out1.QUANTITY_NUM = this.out1__QUANTITY_NUM;
						out1.UNITS_CD = this.out1__UNITS_CD;
						out1.END_DATE = this.out1__END_DATE;
						out1.LOCATION_CD = this.out1__LOCATION_CD;
						out1.OBSERVATION_BLOB = this.out1__OBSERVATION_BLOB;
						out1.CONFIDENCE_NUM = this.out1__CONFIDENCE_NUM;
						out1.UPDATE_DATE = this.out1__UPDATE_DATE;
						out1.DOWNLOAD_DATE = this.out1__DOWNLOAD_DATE;
						out1.IMPORT_DATE = this.out1__IMPORT_DATE;
						out1.SOURCESYSTEM_CD = this.out1__SOURCESYSTEM_CD;
						out1.UPLOAD_ID = this.out1__UPLOAD_ID;
						out1.ENDDATE_SOURCE_PATH = this.out1__ENDDATE_SOURCE_PATH;
						row16.CONCEPT_PATH = this.row16__CONCEPT_PATH;
						row16.CONCEPT_CD = this.row16__CONCEPT_CD;
						row16.NAME_CHAR = this.row16__NAME_CHAR;
						row16.CONCEPT_BLOB = this.row16__CONCEPT_BLOB;
						row16.UPDATE_DATE = this.row16__UPDATE_DATE;
						row16.DOWNLOAD_DATE = this.row16__DOWNLOAD_DATE;
						row16.IMPORT_DATE = this.row16__IMPORT_DATE;
						row16.SOURCESYSTEM_CD = this.row16__SOURCESYSTEM_CD;
						row16.UPLOAD_ID = this.row16__UPLOAD_ID;

					}

					public String toString() {

						StringBuilder sb = new StringBuilder();
						sb.append(super.toString());
						sb.append("[");

						sb.append("out1__ENCOUNTER_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.out1__ENCOUNTER_NUM));

						sb.append(", ");

						sb.append("out1__PATIENT_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.out1__PATIENT_NUM));

						sb.append(", ");

						sb.append("out1__CONCEPT_CD");
						sb.append("=");
						sb.append(String.valueOf(this.out1__CONCEPT_CD));

						sb.append(", ");

						sb.append("out1__PROVIDER_ID");
						sb.append("=");
						sb.append(String.valueOf(this.out1__PROVIDER_ID));

						sb.append(", ");

						sb.append("out1__START_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.out1__START_DATE));

						sb.append(", ");

						sb.append("out1__MODIFIER_CD");
						sb.append("=");
						sb.append(String.valueOf(this.out1__MODIFIER_CD));

						sb.append(", ");

						sb.append("out1__INSTANCE_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.out1__INSTANCE_NUM));

						sb.append(", ");

						sb.append("out1__VALTYPE_CD");
						sb.append("=");
						sb.append(String.valueOf(this.out1__VALTYPE_CD));

						sb.append(", ");

						sb.append("out1__TVAL_CHAR");
						sb.append("=");
						sb.append(String.valueOf(this.out1__TVAL_CHAR));

						sb.append(", ");

						sb.append("out1__NVAL_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.out1__NVAL_NUM));

						sb.append(", ");

						sb.append("out1__VALUEFLAG_CD");
						sb.append("=");
						sb.append(String.valueOf(this.out1__VALUEFLAG_CD));

						sb.append(", ");

						sb.append("out1__QUANTITY_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.out1__QUANTITY_NUM));

						sb.append(", ");

						sb.append("out1__UNITS_CD");
						sb.append("=");
						sb.append(String.valueOf(this.out1__UNITS_CD));

						sb.append(", ");

						sb.append("out1__END_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.out1__END_DATE));

						sb.append(", ");

						sb.append("out1__LOCATION_CD");
						sb.append("=");
						sb.append(String.valueOf(this.out1__LOCATION_CD));

						sb.append(", ");

						sb.append("out1__OBSERVATION_BLOB");
						sb.append("=");
						sb.append(String.valueOf(this.out1__OBSERVATION_BLOB));

						sb.append(", ");

						sb.append("out1__CONFIDENCE_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.out1__CONFIDENCE_NUM));

						sb.append(", ");

						sb.append("out1__UPDATE_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.out1__UPDATE_DATE));

						sb.append(", ");

						sb.append("out1__DOWNLOAD_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.out1__DOWNLOAD_DATE));

						sb.append(", ");

						sb.append("out1__IMPORT_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.out1__IMPORT_DATE));

						sb.append(", ");

						sb.append("out1__SOURCESYSTEM_CD");
						sb.append("=");
						sb.append(String.valueOf(this.out1__SOURCESYSTEM_CD));

						sb.append(", ");

						sb.append("out1__UPLOAD_ID");
						sb.append("=");
						sb.append(String.valueOf(this.out1__UPLOAD_ID));

						sb.append(", ");

						sb.append("out1__ENDDATE_SOURCE_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.out1__ENDDATE_SOURCE_PATH));

						sb.append(", ");

						sb.append("row16__CONCEPT_PATH");
						sb.append("=");
						sb.append(String.valueOf(this.row16__CONCEPT_PATH));

						sb.append(", ");

						sb.append("row16__CONCEPT_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row16__CONCEPT_CD));

						sb.append(", ");

						sb.append("row16__NAME_CHAR");
						sb.append("=");
						sb.append(String.valueOf(this.row16__NAME_CHAR));

						sb.append(", ");

						sb.append("row16__CONCEPT_BLOB");
						sb.append("=");
						sb.append(String.valueOf(this.row16__CONCEPT_BLOB));

						sb.append(", ");

						sb.append("row16__UPDATE_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row16__UPDATE_DATE));

						sb.append(", ");

						sb.append("row16__DOWNLOAD_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row16__DOWNLOAD_DATE));

						sb.append(", ");

						sb.append("row16__IMPORT_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row16__IMPORT_DATE));

						sb.append(", ");

						sb.append("row16__SOURCESYSTEM_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row16__SOURCESYSTEM_CD));

						sb.append(", ");

						sb.append("row16__UPLOAD_ID");
						sb.append("=");
						sb.append(String.valueOf(this.row16__UPLOAD_ID));

						sb.append("]");

						return sb.toString();
					}

					public int compareTo(SortableRow_tMap_8_2 other) {

						int returnValue = 0;

						returnValue = checkNullsAndCompare(
								this.exprKey_row17__PATIENT_NUM,
								other.exprKey_row17__PATIENT_NUM);
						if (returnValue != 0) {
							return returnValue;
						}

						returnValue = checkNullsAndCompare(
								this.exprKey_row17__CONCEPT_CD,
								other.exprKey_row17__CONCEPT_CD);
						if (returnValue != 0) {
							return returnValue;
						}

						return returnValue;
					}

					private int checkNullsAndCompare(Object object1,
							Object object2) {
						int returnValue = 0;
						if (object1 instanceof Comparable
								&& object2 instanceof Comparable) {
							returnValue = ((Comparable) object1)
									.compareTo(object2);
						} else if (object1 != null && object2 != null) {
							returnValue = compareStrings(object1.toString(),
									object2.toString());
						} else if (object1 == null && object2 != null) {
							returnValue = 1;
						} else if (object1 != null && object2 == null) {
							returnValue = -1;
						} else {
							returnValue = 0;
						}

						return returnValue;
					}

					private int compareStrings(String string1, String string2) {
						return string1.compareTo(string2);
					}

					public void readData(ObjectInputStream dis) {

						synchronized (row16Struct.commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

							try {

								int length = 0;

								this.is__rejectedInnerJoin = dis.readBoolean();

								this.out1__ENCOUNTER_NUM = (BigDecimal) dis
										.readObject();

								this.out1__PATIENT_NUM = (BigDecimal) dis
										.readObject();

								length = dis.readInt();
								if (length == -1) {
									this.out1__CONCEPT_CD = null;
								} else {
									if (length > row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__CONCEPT_CD = new String(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__PROVIDER_ID = null;
								} else {
									if (length > row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__PROVIDER_ID = new String(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__START_DATE = null;
								} else {
									if (length > row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__START_DATE = new String(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__MODIFIER_CD = null;
								} else {
									if (length > row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__MODIFIER_CD = new String(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__INSTANCE_NUM = null;
								} else {
									if (length > row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__INSTANCE_NUM = new String(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__VALTYPE_CD = null;
								} else {
									if (length > row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__VALTYPE_CD = new String(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__TVAL_CHAR = null;
								} else {
									if (length > row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__TVAL_CHAR = new String(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.out1__NVAL_NUM = null;
								} else {
									this.out1__NVAL_NUM = dis.readFloat();
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__VALUEFLAG_CD = null;
								} else {
									if (length > row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__VALUEFLAG_CD = new String(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__QUANTITY_NUM = null;
								} else {
									if (length > row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__QUANTITY_NUM = new String(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__UNITS_CD = null;
								} else {
									if (length > row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__UNITS_CD = new String(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__END_DATE = null;
								} else {
									if (length > row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__END_DATE = new String(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__LOCATION_CD = null;
								} else {
									if (length > row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__LOCATION_CD = new String(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__OBSERVATION_BLOB = null;
								} else {
									if (length > row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__OBSERVATION_BLOB = new String(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__CONFIDENCE_NUM = null;
								} else {
									if (length > row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__CONFIDENCE_NUM = new String(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.out1__UPDATE_DATE = null;
								} else {
									this.out1__UPDATE_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.out1__DOWNLOAD_DATE = null;
								} else {
									this.out1__DOWNLOAD_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.out1__IMPORT_DATE = null;
								} else {
									this.out1__IMPORT_DATE = new Date(
											dis.readLong());
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__SOURCESYSTEM_CD = null;
								} else {
									if (length > row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__SOURCESYSTEM_CD = new String(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__UPLOAD_ID = null;
								} else {
									if (length > row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__UPLOAD_ID = new String(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.out1__ENDDATE_SOURCE_PATH = null;
								} else {
									if (length > row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.out1__ENDDATE_SOURCE_PATH = new String(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row16__CONCEPT_PATH = null;
								} else {
									if (length > row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row16__CONCEPT_PATH = new String(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row16__CONCEPT_CD = null;
								} else {
									if (length > row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row16__CONCEPT_CD = new String(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row16__NAME_CHAR = null;
								} else {
									if (length > row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row16__NAME_CHAR = new String(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row16__CONCEPT_BLOB = null;
								} else {
									if (length > row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row16__CONCEPT_BLOB = new String(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.row16__UPDATE_DATE = null;
								} else {
									this.row16__UPDATE_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.row16__DOWNLOAD_DATE = null;
								} else {
									this.row16__DOWNLOAD_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.row16__IMPORT_DATE = null;
								} else {
									this.row16__IMPORT_DATE = new Date(
											dis.readLong());
								}

								length = dis.readInt();
								if (length == -1) {
									this.row16__SOURCESYSTEM_CD = null;
								} else {
									if (length > row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row16__SOURCESYSTEM_CD = new String(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row16__UPLOAD_ID = null;
								} else {
									if (length > row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row16__UPLOAD_ID = new String(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								this.exprKey_row17__PATIENT_NUM = (BigDecimal) dis
										.readObject();

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row17__CONCEPT_CD = null;
								} else {
									if (length > row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.exprKey_row17__CONCEPT_CD = new String(
											row16Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

							} catch (IOException e) {
								throw new RuntimeException(e);

							} catch (ClassNotFoundException eCNFE) {
								throw new RuntimeException(eCNFE);

							}

						}
					}

					public void writeData(ObjectOutputStream dos) {
						try {

							dos.writeBoolean(this.is__rejectedInnerJoin);

							dos.writeObject(this.out1__ENCOUNTER_NUM);

							dos.writeObject(this.out1__PATIENT_NUM);

							if (this.out1__CONCEPT_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__CONCEPT_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__PROVIDER_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__PROVIDER_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__START_DATE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__START_DATE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__MODIFIER_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__MODIFIER_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__INSTANCE_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__INSTANCE_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__VALTYPE_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__VALTYPE_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__TVAL_CHAR == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__TVAL_CHAR
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__NVAL_NUM == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeFloat(this.out1__NVAL_NUM);
							}

							if (this.out1__VALUEFLAG_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__VALUEFLAG_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__QUANTITY_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__QUANTITY_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__UNITS_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__UNITS_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__END_DATE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__END_DATE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__LOCATION_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__LOCATION_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__OBSERVATION_BLOB == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__OBSERVATION_BLOB
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__CONFIDENCE_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__CONFIDENCE_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__UPDATE_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.out1__UPDATE_DATE.getTime());
							}

							if (this.out1__DOWNLOAD_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.out1__DOWNLOAD_DATE
										.getTime());
							}

							if (this.out1__IMPORT_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.out1__IMPORT_DATE.getTime());
							}

							if (this.out1__SOURCESYSTEM_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__SOURCESYSTEM_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__UPLOAD_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__UPLOAD_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.out1__ENDDATE_SOURCE_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.out1__ENDDATE_SOURCE_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row16__CONCEPT_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row16__CONCEPT_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row16__CONCEPT_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row16__CONCEPT_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row16__NAME_CHAR == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row16__NAME_CHAR
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row16__CONCEPT_BLOB == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row16__CONCEPT_BLOB
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row16__UPDATE_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row16__UPDATE_DATE.getTime());
							}

							if (this.row16__DOWNLOAD_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row16__DOWNLOAD_DATE
										.getTime());
							}

							if (this.row16__IMPORT_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row16__IMPORT_DATE.getTime());
							}

							if (this.row16__SOURCESYSTEM_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row16__SOURCESYSTEM_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row16__UPLOAD_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row16__UPLOAD_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							dos.writeObject(this.exprKey_row17__PATIENT_NUM);

							if (this.exprKey_row17__CONCEPT_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row17__CONCEPT_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

				} // G_TM_B_001

				org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_8_2> fsi_tMap_8_2 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_8_2>(
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_"
								+ Thread.currentThread().getId() + "_" + pid
								+ "_tMap_8_2", 200000) {
					public SortableRow_tMap_8_2 createRowInstance() {
						return new SortableRow_tMap_8_2();
					}
				};

				fsi_tMap_8_2.initPut();

				/**
				 * [tMap_8_TMAP_OUT begin ] stop
				 */

				/**
				 * [tMap_9_TMAP_IN begin ] start
				 */

				ok_Hash.put("tMap_9_TMAP_IN", false);
				start_Hash.put("tMap_9_TMAP_IN", System.currentTimeMillis());

				currentVirtualComponent = "tMap_9";

				currentComponent = "tMap_9_TMAP_IN";

				int tos_count_tMap_9_TMAP_IN = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_9_TMAP_IN__Struct {
				}
				Var__tMap_9_TMAP_IN__Struct Var__tMap_9_TMAP_IN = new Var__tMap_9_TMAP_IN__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
				// ###############################

				List<out1Struct> out1_List = new java.util.ArrayList<out1Struct>();

				/**
				 * [tMap_9_TMAP_IN begin ] stop
				 */

				/**
				 * [tMap_9_TMAP_IN main ] start
				 */

				currentVirtualComponent = "tMap_9";

				currentComponent = "tMap_9_TMAP_IN";

				boolean hasCasePrimitiveKeyWithNull_tMap_9_TMAP_IN = false;

				fsi_tMap_9_1.endPut();

				if (row3 == null) {
					row3 = new to_obs_fctStruct();
				}

				// ###############################
				// # Input tables (lookups)
				boolean rejectedInnerJoin_tMap_9_TMAP_IN = false;
				boolean mainRowRejected_tMap_9_TMAP_IN = false;

				// /////////////////////////////////////////////
				// Starting Lookup Table "row15"
				// /////////////////////////////////////////////

				SortableRow_tMap_9_1 rsc_tMap_9_1;

				tHash_Lookup_row15.initGet();

				fsi_tMap_9_1.initGet();

				// TEST firstLookupIsPersistentSorted=true
				// isFirstPersistentSortedTable=true

				rejectedInnerJoin_tMap_9_TMAP_IN = false;

				while (fsi_tMap_9_1.hasNext()) { // G_TM_M_250 loop "1"

					rsc_tMap_9_1 = (SortableRow_tMap_9_1) fsi_tMap_9_1.next();
					rsc_tMap_9_1.copyDataTo(row3);

					rejectedInnerJoin_tMap_9_TMAP_IN = rsc_tMap_9_1.is__rejectedInnerJoin;

					boolean forceLooprow15 = false;

					row15Struct row15ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_9_TMAP_IN) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_9_TMAP_IN = false;

						row15HashKey.CONCEPT_PATH = rsc_tMap_9_1.exprKey_row15__CONCEPT_PATH;

						tHash_Lookup_row15.lookup(row15HashKey);

						if (!tHash_Lookup_row15.hasNext()) { // G_TM_M_090

							rejectedInnerJoin_tMap_9_TMAP_IN = true;

						} // G_TM_M_090

					} // G_TM_M_020

					row15Struct row15 = null;

					row15Struct fromLookup_row15 = null;
					row15 = row15Default;

					if (tHash_Lookup_row15 != null
							&& tHash_Lookup_row15.hasNext()) { // G 099

						fromLookup_row15 = tHash_Lookup_row15.next();

					} // G 099

					if (fromLookup_row15 != null) {
						row15 = fromLookup_row15;
					}

					BigDecimal exprKey_row14__PATIENT_NUM = null;

					String exprKey_row14__CONCEPT_CD = null;

					if (!rejectedInnerJoin_tMap_9_TMAP_IN) { // G_TM_M_255

						exprKey_row14__PATIENT_NUM = row3.PATIENT_NUM;

						exprKey_row14__CONCEPT_CD = row15.CONCEPT_CD;

					} // G_TM_M_255

					SortableRow_tMap_9_2 rsc_tMap_9_2 = new SortableRow_tMap_9_2();

					rsc_tMap_9_2.fillFrom(row3, row15,
							exprKey_row14__PATIENT_NUM,
							exprKey_row14__CONCEPT_CD);

					rsc_tMap_9_2.is__rejectedInnerJoin = rejectedInnerJoin_tMap_9_TMAP_IN;

					rejectedInnerJoin_tMap_9_TMAP_IN = false;

					// Sort and store in KeyFile(s) and DataFile(s)
					fsi_tMap_9_2.put(rsc_tMap_9_2);

				} // G_TM_M_250 loop "1"

				fsi_tMap_9_1.endGet();

				fsi_tMap_9_2.endPut();

				// /////////////////////////////////////////////
				// Starting Lookup Table "row14"
				// /////////////////////////////////////////////

				SortableRow_tMap_9_2 rsc_tMap_9_2;

				tHash_Lookup_row14.initGet();

				fsi_tMap_9_2.initGet();

				// row15Struct row15 = new row15Struct();

				row15Struct row15 = new row15Struct();

				// TEST firstLookupIsPersistentSorted=true
				// isFirstPersistentSortedTable=false

				rejectedInnerJoin_tMap_9_TMAP_IN = false;

				while (fsi_tMap_9_2.hasNext()) { // G_TM_M_250 loop "2"

					// CALL close loop of lookup '2'

					rsc_tMap_9_2 = (SortableRow_tMap_9_2) fsi_tMap_9_2.next();
					rsc_tMap_9_2.copyDataTo(row3, row15);

					rejectedInnerJoin_tMap_9_TMAP_IN = rsc_tMap_9_2.is__rejectedInnerJoin;

					boolean forceLooprow14 = false;

					row14Struct row14ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_9_TMAP_IN) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_9_TMAP_IN = false;

						row14HashKey.PATIENT_NUM = rsc_tMap_9_2.exprKey_row14__PATIENT_NUM;

						row14HashKey.CONCEPT_CD = rsc_tMap_9_2.exprKey_row14__CONCEPT_CD;

						tHash_Lookup_row14.lookup(row14HashKey);

						if (!tHash_Lookup_row14.hasNext()) { // G_TM_M_090

							rejectedInnerJoin_tMap_9_TMAP_IN = true;

						} // G_TM_M_090

					} // G_TM_M_020

					row14Struct row14 = null;

					row14Struct fromLookup_row14 = null;
					row14 = row14Default;

					if (tHash_Lookup_row14 != null
							&& tHash_Lookup_row14.hasNext()) { // G 099

						fromLookup_row14 = tHash_Lookup_row14.next();

					} // G 099

					if (fromLookup_row14 != null) {
						row14 = fromLookup_row14;
					}

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_9_TMAP_IN__Struct Var = Var__tMap_9_TMAP_IN;// ###############################
						// ###############################
						// # Output tables

						out1 = null;
						out1_List.clear();

						if (!rejectedInnerJoin_tMap_9_TMAP_IN) {

							// # Output table : 'out1'
							out1_tmp.ENCOUNTER_NUM = row3.ENCOUNTER_NUM;
							out1_tmp.PATIENT_NUM = row3.PATIENT_NUM;
							out1_tmp.CONCEPT_CD = row3.CONCEPT_CD;
							out1_tmp.PROVIDER_ID = row3.PROVIDER_ID;
							out1_tmp.START_DATE = row14.START_DATE;
							out1_tmp.MODIFIER_CD = row3.MODIFIER_CD;
							out1_tmp.INSTANCE_NUM = row3.INSTANCE_NUM;
							out1_tmp.VALTYPE_CD = row3.VALTYPE_CD;
							out1_tmp.TVAL_CHAR = row3.TVAL_CHAR;
							out1_tmp.NVAL_NUM = row3.NVAL_NUM;
							out1_tmp.VALUEFLAG_CD = row3.VALUEFLAG_CD;
							out1_tmp.QUANTITY_NUM = row3.QUANTITY_NUM;
							out1_tmp.UNITS_CD = row3.UNITS_CD;
							out1_tmp.END_DATE = row3.END_DATE;
							out1_tmp.LOCATION_CD = row3.LOCATION_CD;
							out1_tmp.OBSERVATION_BLOB = row3.OBSERVATION_BLOB;
							out1_tmp.CONFIDENCE_NUM = row3.CONFIDENCE_NUM;
							out1_tmp.UPDATE_DATE = row3.UPDATE_DATE;
							out1_tmp.DOWNLOAD_DATE = row3.DOWNLOAD_DATE;
							out1_tmp.IMPORT_DATE = row3.IMPORT_DATE;
							out1_tmp.SOURCESYSTEM_CD = row3.SOURCESYSTEM_CD;
							out1_tmp.UPLOAD_ID = row3.UPLOAD_ID;
							out1_tmp.ENDDATE_SOURCE_PATH = row3.ENDDATE_SOURCE_PATH;
							out1_List.add(out1_tmp);
							out1 = out1_tmp;
						} // closing inner join bracket (1)
							// ###### START REJECTS #####

						// # Output reject table : 'out3'
						// # Filter conditions
						if (rejectedInnerJoin_tMap_9_TMAP_IN) {
							out1_tmp = new out1Struct();

							out1_tmp.ENCOUNTER_NUM = row3.ENCOUNTER_NUM;
							out1_tmp.PATIENT_NUM = row3.PATIENT_NUM;
							out1_tmp.CONCEPT_CD = row3.CONCEPT_CD;
							out1_tmp.PROVIDER_ID = row3.PROVIDER_ID;
							out1_tmp.START_DATE = row3.START_DATE;
							out1_tmp.MODIFIER_CD = row3.MODIFIER_CD;
							out1_tmp.INSTANCE_NUM = row3.INSTANCE_NUM;
							out1_tmp.VALTYPE_CD = row3.VALTYPE_CD;
							out1_tmp.TVAL_CHAR = row3.TVAL_CHAR;
							out1_tmp.NVAL_NUM = row3.NVAL_NUM;
							out1_tmp.VALUEFLAG_CD = row3.VALUEFLAG_CD;
							out1_tmp.QUANTITY_NUM = row3.QUANTITY_NUM;
							out1_tmp.UNITS_CD = row3.UNITS_CD;
							out1_tmp.END_DATE = row3.END_DATE;
							out1_tmp.LOCATION_CD = row3.LOCATION_CD;
							out1_tmp.OBSERVATION_BLOB = row3.OBSERVATION_BLOB;
							out1_tmp.CONFIDENCE_NUM = row3.CONFIDENCE_NUM;
							out1_tmp.UPDATE_DATE = row3.UPDATE_DATE;
							out1_tmp.DOWNLOAD_DATE = row3.DOWNLOAD_DATE;
							out1_tmp.IMPORT_DATE = row3.IMPORT_DATE;
							out1_tmp.SOURCESYSTEM_CD = row3.SOURCESYSTEM_CD;
							out1_tmp.UPLOAD_ID = row3.UPLOAD_ID;
							out1_tmp.ENDDATE_SOURCE_PATH = row3.ENDDATE_SOURCE_PATH;
							out1_List.add(out1_tmp);
							out1 = out1_tmp;
						} // closing filter/reject
							// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_9_TMAP_IN = false;

					tos_count_tMap_9_TMAP_IN++;

					/**
					 * [tMap_9_TMAP_IN main ] stop
					 */
					// Start of branch "out1"
					if (out1 != null) {
						// start of joined table loop
						for (out1Struct cur_out1 : out1_List) {
							out1 = cur_out1;

							/**
							 * [tMap_8_TMAP_OUT main ] start
							 */

							currentVirtualComponent = "tMap_8";

							currentComponent = "tMap_8_TMAP_OUT";

							boolean hasCasePrimitiveKeyWithNull_tMap_8_TMAP_OUT = false;

							hasCasePrimitiveKeyWithNull_tMap_8_TMAP_OUT = false;

							String exprKey_row16__CONCEPT_PATH = out1.ENDDATE_SOURCE_PATH;

							SortableRow_tMap_8_1 sortableRow_tMap_8_1 = fsi_tMap_8_1
									.getNextFreeRow();

							sortableRow_tMap_8_1.fillFrom(out1,
									exprKey_row16__CONCEPT_PATH);

							fsi_tMap_8_1.put(sortableRow_tMap_8_1);

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_8_TMAP_OUT = false;
							boolean mainRowRejected_tMap_8_TMAP_OUT = false;

							// ###############################

							tos_count_tMap_8_TMAP_OUT++;

							/**
							 * [tMap_8_TMAP_OUT main ] stop
							 */
						} // end of joined table loop
						out1_List.clear();

					} // End of branch "out1"

				} // G_TM_M_250 close loop read file data '2'

				/**
				 * [tMap_9_TMAP_IN end ] start
				 */

				currentVirtualComponent = "tMap_9";

				currentComponent = "tMap_9_TMAP_IN";

				// ###############################
				// # Lookup hashes releasing
				fsi_tMap_9_2.endGet();

				if (tHash_Lookup_row15 != null) {
					tHash_Lookup_row15.endGet();
				}
				globalMap.remove("tHash_Lookup_row15");

				if (tHash_Lookup_row14 != null) {
					tHash_Lookup_row14.endGet();
				}
				globalMap.remove("tHash_Lookup_row14");

				// ###############################

				ok_Hash.put("tMap_9_TMAP_IN", true);
				end_Hash.put("tMap_9_TMAP_IN", System.currentTimeMillis());

				/**
				 * [tMap_9_TMAP_IN end ] stop
				 */

				/**
				 * [tMap_8_TMAP_OUT end ] start
				 */

				currentVirtualComponent = "tMap_8";

				currentComponent = "tMap_8_TMAP_OUT";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_8_TMAP_OUT", true);
				end_Hash.put("tMap_8_TMAP_OUT", System.currentTimeMillis());

				/**
				 * [tMap_8_TMAP_OUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_6", false);
				start_Hash.put("tFileOutputDelimited_6",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_6";

				int tos_count_tFileOutputDelimited_6 = 0;

				String fileName_tFileOutputDelimited_6 = "";
				fileName_tFileOutputDelimited_6 = (new java.io.File(
						context.folderMain + context.folderOutput
								+ "/patient_data2.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_6 = null;
				String extension_tFileOutputDelimited_6 = null;
				String directory_tFileOutputDelimited_6 = null;
				if ((fileName_tFileOutputDelimited_6.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") < fileName_tFileOutputDelimited_6
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(0, fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
							.substring(0, fileName_tFileOutputDelimited_6
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(0, fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					}
					directory_tFileOutputDelimited_6 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_6 = true;
				java.io.File filetFileOutputDelimited_6 = new java.io.File(
						fileName_tFileOutputDelimited_6);
				globalMap.put("tFileOutputDelimited_6_FILE_NAME",
						fileName_tFileOutputDelimited_6);

				String[] headColutFileOutputDelimited_6 = new String[22];
				class CSVBasicSet_tFileOutputDelimited_6 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_6[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_6 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_6[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_6[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_6 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_6[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_6[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_6 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_6[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_6 = 0;
				int splitEvery_tFileOutputDelimited_6 = 1000;
				int splitedFileNo_tFileOutputDelimited_6 = 0;
				int currentRow_tFileOutputDelimited_6 = 0;

				CSVBasicSet_tFileOutputDelimited_6 csvSettings_tFileOutputDelimited_6 = new CSVBasicSet_tFileOutputDelimited_6();
				csvSettings_tFileOutputDelimited_6.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_6.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_6.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_6 != null
						&& directory_tFileOutputDelimited_6.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_6 = new java.io.File(
							directory_tFileOutputDelimited_6);
					if (!dir_tFileOutputDelimited_6.exists()) {

						dir_tFileOutputDelimited_6.mkdirs();

					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_6 = null;

				java.io.File fileToDelete_tFileOutputDelimited_6 = new java.io.File(
						fileName_tFileOutputDelimited_6);
				if (fileToDelete_tFileOutputDelimited_6.exists()) {
					fileToDelete_tFileOutputDelimited_6.delete();
				}

				CsvWritertFileOutputDelimited_6 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_6,
												false), "UTF-8")));
				CsvWritertFileOutputDelimited_6
						.setSeparator(csvSettings_tFileOutputDelimited_6
								.getFieldDelim());

				if (!csvSettings_tFileOutputDelimited_6
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_6.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_6.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_6.setLineEnd(""
							+ csvSettings_tFileOutputDelimited_6.getRowDelim());
				}

				if (filetFileOutputDelimited_6.length() == 0) {

					headColutFileOutputDelimited_6[0] = "ENCOUNTER_NUM";

					headColutFileOutputDelimited_6[1] = "PATIENT_NUM";

					headColutFileOutputDelimited_6[2] = "CONCEPT_CD";

					headColutFileOutputDelimited_6[3] = "PROVIDER_ID";

					headColutFileOutputDelimited_6[4] = "START_DATE";

					headColutFileOutputDelimited_6[5] = "MODIFIER_CD";

					headColutFileOutputDelimited_6[6] = "INSTANCE_NUM";

					headColutFileOutputDelimited_6[7] = "VALTYPE_CD";

					headColutFileOutputDelimited_6[8] = "TVAL_CHAR";

					headColutFileOutputDelimited_6[9] = "NVAL_NUM";

					headColutFileOutputDelimited_6[10] = "VALUEFLAG_CD";

					headColutFileOutputDelimited_6[11] = "QUANTITY_NUM";

					headColutFileOutputDelimited_6[12] = "UNITS_CD";

					headColutFileOutputDelimited_6[13] = "END_DATE";

					headColutFileOutputDelimited_6[14] = "LOCATION_CD";

					headColutFileOutputDelimited_6[15] = "OBSERVATION_BLOB";

					headColutFileOutputDelimited_6[16] = "CONFIDENCE_NUM";

					headColutFileOutputDelimited_6[17] = "UPDATE_DATE";

					headColutFileOutputDelimited_6[18] = "DOWNLOAD_DATE";

					headColutFileOutputDelimited_6[19] = "IMPORT_DATE";

					headColutFileOutputDelimited_6[20] = "SOURCESYSTEM_CD";

					headColutFileOutputDelimited_6[21] = "UPLOAD_ID";

					CsvWritertFileOutputDelimited_6
							.writeNext(headColutFileOutputDelimited_6);
					CsvWritertFileOutputDelimited_6.flush();

				}

				CsvWritertFileOutputDelimited_6
						.setEscapeChar(csvSettings_tFileOutputDelimited_6
								.getEscapeChar());
				CsvWritertFileOutputDelimited_6
						.setQuoteChar(csvSettings_tFileOutputDelimited_6
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_6
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_6",
						CsvWritertFileOutputDelimited_6);

				resourceMap.put("nb_line_tFileOutputDelimited_6",
						nb_line_tFileOutputDelimited_6);

				/**
				 * [tFileOutputDelimited_6 begin ] stop
				 */

				/**
				 * [tJavaRow_2 begin ] start
				 */

				ok_Hash.put("tJavaRow_2", false);
				start_Hash.put("tJavaRow_2", System.currentTimeMillis());

				currentComponent = "tJavaRow_2";

				int tos_count_tJavaRow_2 = 0;

				int nb_line_tJavaRow_2 = 0;

				/**
				 * [tJavaRow_2 begin ] stop
				 */

				/**
				 * [tMap_8_TMAP_IN begin ] start
				 */

				ok_Hash.put("tMap_8_TMAP_IN", false);
				start_Hash.put("tMap_8_TMAP_IN", System.currentTimeMillis());

				currentVirtualComponent = "tMap_8";

				currentComponent = "tMap_8_TMAP_IN";

				int tos_count_tMap_8_TMAP_IN = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_8_TMAP_IN__Struct {
				}
				Var__tMap_8_TMAP_IN__Struct Var__tMap_8_TMAP_IN = new Var__tMap_8_TMAP_IN__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				asdddStruct asddd_tmp = new asdddStruct();
				// ###############################

				List<asdddStruct> asddd_List = new java.util.ArrayList<asdddStruct>();

				/**
				 * [tMap_8_TMAP_IN begin ] stop
				 */

				/**
				 * [tMap_8_TMAP_IN main ] start
				 */

				currentVirtualComponent = "tMap_8";

				currentComponent = "tMap_8_TMAP_IN";

				boolean hasCasePrimitiveKeyWithNull_tMap_8_TMAP_IN = false;

				fsi_tMap_8_1.endPut();

				if (out1 == null) {
					out1 = new out1Struct();
				}

				// ###############################
				// # Input tables (lookups)
				boolean rejectedInnerJoin_tMap_8_TMAP_IN = false;
				boolean mainRowRejected_tMap_8_TMAP_IN = false;

				// /////////////////////////////////////////////
				// Starting Lookup Table "row16"
				// /////////////////////////////////////////////

				SortableRow_tMap_8_1 rsc_tMap_8_1;

				tHash_Lookup_row16.initGet();

				fsi_tMap_8_1.initGet();

				// TEST firstLookupIsPersistentSorted=true
				// isFirstPersistentSortedTable=true

				rejectedInnerJoin_tMap_8_TMAP_IN = false;

				while (fsi_tMap_8_1.hasNext()) { // G_TM_M_250 loop "1"

					rsc_tMap_8_1 = (SortableRow_tMap_8_1) fsi_tMap_8_1.next();
					rsc_tMap_8_1.copyDataTo(out1);

					rejectedInnerJoin_tMap_8_TMAP_IN = rsc_tMap_8_1.is__rejectedInnerJoin;

					boolean forceLooprow16 = false;

					row16Struct row16ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_8_TMAP_IN) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_8_TMAP_IN = false;

						row16HashKey.CONCEPT_PATH = rsc_tMap_8_1.exprKey_row16__CONCEPT_PATH;

						tHash_Lookup_row16.lookup(row16HashKey);

						if (!tHash_Lookup_row16.hasNext()) { // G_TM_M_090

							rejectedInnerJoin_tMap_8_TMAP_IN = true;

						} // G_TM_M_090

					} // G_TM_M_020

					row16Struct row16 = null;

					row16Struct fromLookup_row16 = null;
					row16 = row16Default;

					if (tHash_Lookup_row16 != null
							&& tHash_Lookup_row16.hasNext()) { // G 099

						fromLookup_row16 = tHash_Lookup_row16.next();

					} // G 099

					if (fromLookup_row16 != null) {
						row16 = fromLookup_row16;
					}

					BigDecimal exprKey_row17__PATIENT_NUM = null;

					String exprKey_row17__CONCEPT_CD = null;

					if (!rejectedInnerJoin_tMap_8_TMAP_IN) { // G_TM_M_255

						exprKey_row17__PATIENT_NUM = out1.PATIENT_NUM;

						exprKey_row17__CONCEPT_CD = row16.CONCEPT_CD;

					} // G_TM_M_255

					SortableRow_tMap_8_2 rsc_tMap_8_2 = new SortableRow_tMap_8_2();

					rsc_tMap_8_2.fillFrom(out1, row16,
							exprKey_row17__PATIENT_NUM,
							exprKey_row17__CONCEPT_CD);

					rsc_tMap_8_2.is__rejectedInnerJoin = rejectedInnerJoin_tMap_8_TMAP_IN;

					rejectedInnerJoin_tMap_8_TMAP_IN = false;

					// Sort and store in KeyFile(s) and DataFile(s)
					fsi_tMap_8_2.put(rsc_tMap_8_2);

				} // G_TM_M_250 loop "1"

				fsi_tMap_8_1.endGet();

				fsi_tMap_8_2.endPut();

				// /////////////////////////////////////////////
				// Starting Lookup Table "row17"
				// /////////////////////////////////////////////

				SortableRow_tMap_8_2 rsc_tMap_8_2;

				tHash_Lookup_row17.initGet();

				fsi_tMap_8_2.initGet();

				// row16Struct row16 = new row16Struct();

				row16Struct row16 = new row16Struct();

				// TEST firstLookupIsPersistentSorted=true
				// isFirstPersistentSortedTable=false

				rejectedInnerJoin_tMap_8_TMAP_IN = false;

				while (fsi_tMap_8_2.hasNext()) { // G_TM_M_250 loop "2"

					// CALL close loop of lookup '2'

					rsc_tMap_8_2 = (SortableRow_tMap_8_2) fsi_tMap_8_2.next();
					rsc_tMap_8_2.copyDataTo(out1, row16);

					rejectedInnerJoin_tMap_8_TMAP_IN = rsc_tMap_8_2.is__rejectedInnerJoin;

					boolean forceLooprow17 = false;

					row17Struct row17ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_8_TMAP_IN) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_8_TMAP_IN = false;

						row17HashKey.PATIENT_NUM = rsc_tMap_8_2.exprKey_row17__PATIENT_NUM;

						row17HashKey.CONCEPT_CD = rsc_tMap_8_2.exprKey_row17__CONCEPT_CD;

						tHash_Lookup_row17.lookup(row17HashKey);

						if (!tHash_Lookup_row17.hasNext()) { // G_TM_M_090

							rejectedInnerJoin_tMap_8_TMAP_IN = true;

						} // G_TM_M_090

					} // G_TM_M_020

					row17Struct row17 = null;

					row17Struct fromLookup_row17 = null;
					row17 = row17Default;

					if (tHash_Lookup_row17 != null
							&& tHash_Lookup_row17.hasNext()) { // G 099

						fromLookup_row17 = tHash_Lookup_row17.next();

					} // G 099

					if (fromLookup_row17 != null) {
						row17 = fromLookup_row17;
					}

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_8_TMAP_IN__Struct Var = Var__tMap_8_TMAP_IN;// ###############################
						// ###############################
						// # Output tables

						asddd = null;
						asddd_List.clear();

						if (!rejectedInnerJoin_tMap_8_TMAP_IN) {

							// # Output table : 'asddd'
							asddd_tmp.ENCOUNTER_NUM = out1.ENCOUNTER_NUM;
							asddd_tmp.PATIENT_NUM = out1.PATIENT_NUM;
							asddd_tmp.CONCEPT_CD = out1.CONCEPT_CD;
							asddd_tmp.PROVIDER_ID = out1.PROVIDER_ID;
							asddd_tmp.START_DATE = out1.START_DATE;
							asddd_tmp.MODIFIER_CD = out1.MODIFIER_CD;
							asddd_tmp.INSTANCE_NUM = out1.INSTANCE_NUM;
							asddd_tmp.VALTYPE_CD = out1.VALTYPE_CD;
							asddd_tmp.TVAL_CHAR = out1.TVAL_CHAR;
							asddd_tmp.NVAL_NUM = out1.NVAL_NUM;
							asddd_tmp.VALUEFLAG_CD = out1.VALUEFLAG_CD;
							asddd_tmp.QUANTITY_NUM = out1.QUANTITY_NUM;
							asddd_tmp.UNITS_CD = out1.UNITS_CD;
							asddd_tmp.END_DATE = row17.END_DATE;
							asddd_tmp.LOCATION_CD = out1.LOCATION_CD;
							asddd_tmp.OBSERVATION_BLOB = out1.OBSERVATION_BLOB;
							asddd_tmp.CONFIDENCE_NUM = out1.CONFIDENCE_NUM;
							asddd_tmp.UPDATE_DATE = out1.UPDATE_DATE;
							asddd_tmp.DOWNLOAD_DATE = out1.DOWNLOAD_DATE;
							asddd_tmp.IMPORT_DATE = out1.IMPORT_DATE;
							asddd_tmp.SOURCESYSTEM_CD = out1.SOURCESYSTEM_CD;
							asddd_tmp.UPLOAD_ID = out1.UPLOAD_ID;
							asddd_List.add(asddd_tmp);
							asddd = asddd_tmp;
						} // closing inner join bracket (1)
							// ###### START REJECTS #####

						// # Output reject table : 'out2'
						// # Filter conditions
						if (rejectedInnerJoin_tMap_8_TMAP_IN) {
							asddd_tmp = new asdddStruct();

							asddd_tmp.ENCOUNTER_NUM = out1.ENCOUNTER_NUM;
							asddd_tmp.PATIENT_NUM = out1.PATIENT_NUM;
							asddd_tmp.CONCEPT_CD = out1.CONCEPT_CD;
							asddd_tmp.PROVIDER_ID = out1.PROVIDER_ID;
							asddd_tmp.START_DATE = out1.START_DATE;
							asddd_tmp.MODIFIER_CD = out1.MODIFIER_CD;
							asddd_tmp.INSTANCE_NUM = out1.INSTANCE_NUM;
							asddd_tmp.VALTYPE_CD = out1.VALTYPE_CD;
							asddd_tmp.TVAL_CHAR = out1.TVAL_CHAR;
							asddd_tmp.NVAL_NUM = out1.NVAL_NUM;
							asddd_tmp.VALUEFLAG_CD = out1.VALUEFLAG_CD;
							asddd_tmp.QUANTITY_NUM = out1.QUANTITY_NUM;
							asddd_tmp.UNITS_CD = out1.UNITS_CD;
							asddd_tmp.END_DATE = out1.END_DATE;
							asddd_tmp.LOCATION_CD = out1.LOCATION_CD;
							asddd_tmp.OBSERVATION_BLOB = out1.OBSERVATION_BLOB;
							asddd_tmp.CONFIDENCE_NUM = out1.CONFIDENCE_NUM;
							asddd_tmp.UPDATE_DATE = out1.UPDATE_DATE;
							asddd_tmp.DOWNLOAD_DATE = out1.DOWNLOAD_DATE;
							asddd_tmp.IMPORT_DATE = out1.IMPORT_DATE;
							asddd_tmp.SOURCESYSTEM_CD = out1.SOURCESYSTEM_CD;
							asddd_tmp.UPLOAD_ID = out1.UPLOAD_ID;
							asddd_List.add(asddd_tmp);
							asddd = asddd_tmp;
						} // closing filter/reject
							// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_8_TMAP_IN = false;

					tos_count_tMap_8_TMAP_IN++;

					/**
					 * [tMap_8_TMAP_IN main ] stop
					 */
					// Start of branch "asddd"
					if (asddd != null) {
						// start of joined table loop
						for (asdddStruct cur_asddd : asddd_List) {
							asddd = cur_asddd;

							/**
							 * [tJavaRow_2 main ] start
							 */

							currentComponent = "tJavaRow_2";

							// Code generated according to input schema and
							// output schema
							row5.ENCOUNTER_NUM = asddd.ENCOUNTER_NUM;
							row5.PATIENT_NUM = asddd.PATIENT_NUM;
							// row5.CONCEPT_CD = asddd.CONCEPT_CD;

							// if (asddd.CONCEPT_CD.lastIndexOf("|") >0){
							// StringBuilder b = new
							// StringBuilder(asddd.CONCEPT_CD);
							// b.replace(asddd.CONCEPT_CD.lastIndexOf("|"),
							// asddd.CONCEPT_CD.lastIndexOf("|") + 1, ":" );
							// row5.CONCEPT_CD = b.toString();
							// }
							// else{
							row5.CONCEPT_CD = asddd.CONCEPT_CD;
							// }

							row5.PROVIDER_ID = asddd.PROVIDER_ID;
							if (asddd.START_DATE == null)
								asddd.START_DATE = "";
							if (asddd.START_DATE.length() > 0)
								row5.START_DATE = TalendDate.parseDate(
										"yyyy-MM-dd", asddd.START_DATE);
							else {
								// "dd-MM-yyyy"

								row5.START_DATE = TalendDate.parseDate(
										"yyyy-MM-dd", "1900-01-01");
							}
							row5.MODIFIER_CD = asddd.MODIFIER_CD;
							row5.INSTANCE_NUM = asddd.INSTANCE_NUM;
							row5.VALTYPE_CD = asddd.VALTYPE_CD;
							row5.TVAL_CHAR = asddd.TVAL_CHAR;
							row5.NVAL_NUM = asddd.NVAL_NUM;
							row5.VALUEFLAG_CD = asddd.VALUEFLAG_CD;
							row5.QUANTITY_NUM = asddd.QUANTITY_NUM;
							row5.UNITS_CD = asddd.UNITS_CD;
							if (asddd.END_DATE == null)
								asddd.END_DATE = "";

							if (asddd.END_DATE.length() > 0)
								row5.END_DATE = TalendDate.parseDate(
										"yyyy-MM-dd", asddd.END_DATE);
							else
								row5.END_DATE = null;
							row5.LOCATION_CD = asddd.LOCATION_CD;
							row5.OBSERVATION_BLOB = asddd.OBSERVATION_BLOB;
							row5.CONFIDENCE_NUM = asddd.CONFIDENCE_NUM;
							row5.UPDATE_DATE = asddd.UPDATE_DATE;
							row5.DOWNLOAD_DATE = asddd.DOWNLOAD_DATE;
							row5.IMPORT_DATE = asddd.IMPORT_DATE;
							row5.SOURCESYSTEM_CD = asddd.SOURCESYSTEM_CD;
							row5.UPLOAD_ID = asddd.UPLOAD_ID;

							nb_line_tJavaRow_2++;

							tos_count_tJavaRow_2++;

							/**
							 * [tJavaRow_2 main ] stop
							 */

							/**
							 * [tFileOutputDelimited_6 main ] start
							 */

							currentComponent = "tFileOutputDelimited_6";

							String[] rowtFileOutputDelimited_6 = new String[22];

							rowtFileOutputDelimited_6[0] = row5.ENCOUNTER_NUM == null ? ""
									: row5.ENCOUNTER_NUM.toPlainString();

							rowtFileOutputDelimited_6[1] = row5.PATIENT_NUM == null ? ""
									: row5.PATIENT_NUM.toPlainString();

							rowtFileOutputDelimited_6[2] = row5.CONCEPT_CD == null ? ""
									: row5.CONCEPT_CD;

							rowtFileOutputDelimited_6[3] = row5.PROVIDER_ID == null ? ""
									: row5.PROVIDER_ID;

							rowtFileOutputDelimited_6[4] = row5.START_DATE == null ? ""
									: FormatterUtils.format_Date(
											row5.START_DATE, "yyyy-MM-dd");

							rowtFileOutputDelimited_6[5] = row5.MODIFIER_CD == null ? ""
									: row5.MODIFIER_CD;

							rowtFileOutputDelimited_6[6] = row5.INSTANCE_NUM == null ? ""
									: row5.INSTANCE_NUM;

							rowtFileOutputDelimited_6[7] = row5.VALTYPE_CD == null ? ""
									: row5.VALTYPE_CD;

							rowtFileOutputDelimited_6[8] = row5.TVAL_CHAR == null ? ""
									: row5.TVAL_CHAR;

							rowtFileOutputDelimited_6[9] = row5.NVAL_NUM == null ? ""
									: String.valueOf(row5.NVAL_NUM);

							rowtFileOutputDelimited_6[10] = row5.VALUEFLAG_CD == null ? ""
									: row5.VALUEFLAG_CD;

							rowtFileOutputDelimited_6[11] = row5.QUANTITY_NUM == null ? ""
									: row5.QUANTITY_NUM;

							rowtFileOutputDelimited_6[12] = row5.UNITS_CD == null ? ""
									: row5.UNITS_CD;

							rowtFileOutputDelimited_6[13] = row5.END_DATE == null ? ""
									: FormatterUtils.format_Date(row5.END_DATE,
											"yyyy-MM-dd");

							rowtFileOutputDelimited_6[14] = row5.LOCATION_CD == null ? ""
									: row5.LOCATION_CD;

							rowtFileOutputDelimited_6[15] = row5.OBSERVATION_BLOB == null ? ""
									: row5.OBSERVATION_BLOB;

							rowtFileOutputDelimited_6[16] = row5.CONFIDENCE_NUM == null ? ""
									: row5.CONFIDENCE_NUM;

							rowtFileOutputDelimited_6[17] = row5.UPDATE_DATE == null ? ""
									: FormatterUtils.format_Date(
											row5.UPDATE_DATE, "yyyy-MM-dd");

							rowtFileOutputDelimited_6[18] = row5.DOWNLOAD_DATE == null ? ""
									: FormatterUtils.format_Date(
											row5.DOWNLOAD_DATE, "yyyy-MM-dd");

							rowtFileOutputDelimited_6[19] = row5.IMPORT_DATE == null ? ""
									: FormatterUtils.format_Date(
											row5.IMPORT_DATE, "yyyy-MM-dd");

							rowtFileOutputDelimited_6[20] = row5.SOURCESYSTEM_CD == null ? ""
									: row5.SOURCESYSTEM_CD;

							rowtFileOutputDelimited_6[21] = row5.UPLOAD_ID == null ? ""
									: row5.UPLOAD_ID;

							nb_line_tFileOutputDelimited_6++;
							resourceMap.put("nb_line_tFileOutputDelimited_6",
									nb_line_tFileOutputDelimited_6);
							CsvWritertFileOutputDelimited_6
									.writeNext(rowtFileOutputDelimited_6);

							tos_count_tFileOutputDelimited_6++;

							/**
							 * [tFileOutputDelimited_6 main ] stop
							 */

						} // end of joined table loop
						asddd_List.clear();

					} // End of branch "asddd"

				} // G_TM_M_250 close loop read file data '2'

				/**
				 * [tMap_8_TMAP_IN end ] start
				 */

				currentVirtualComponent = "tMap_8";

				currentComponent = "tMap_8_TMAP_IN";

				// ###############################
				// # Lookup hashes releasing
				fsi_tMap_8_2.endGet();

				if (tHash_Lookup_row16 != null) {
					tHash_Lookup_row16.endGet();
				}
				globalMap.remove("tHash_Lookup_row16");

				if (tHash_Lookup_row17 != null) {
					tHash_Lookup_row17.endGet();
				}
				globalMap.remove("tHash_Lookup_row17");

				// ###############################

				ok_Hash.put("tMap_8_TMAP_IN", true);
				end_Hash.put("tMap_8_TMAP_IN", System.currentTimeMillis());

				/**
				 * [tMap_8_TMAP_IN end ] stop
				 */

				/**
				 * [tJavaRow_2 end ] start
				 */

				currentComponent = "tJavaRow_2";

				globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);

				ok_Hash.put("tJavaRow_2", true);
				end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				/**
				 * [tJavaRow_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 end ] start
				 */

				currentComponent = "tFileOutputDelimited_6";

				if (CsvWritertFileOutputDelimited_6 != null) {
					CsvWritertFileOutputDelimited_6.close();
				}

				globalMap.put("tFileOutputDelimited_6_NB_LINE",
						nb_line_tFileOutputDelimited_6);

				resourceMap.put("finish_tFileOutputDelimited_6", true);

				ok_Hash.put("tFileOutputDelimited_6", true);
				end_Hash.put("tFileOutputDelimited_6",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_6 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_3:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_15Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tMap_4_TMAP_OUT finally ] start
				 */

				currentVirtualComponent = "tMap_4";

				currentComponent = "tMap_4_TMAP_OUT";

				/**
				 * [tMap_4_TMAP_OUT finally ] stop
				 */

				/**
				 * [tMap_4_TMAP_IN finally ] start
				 */

				currentVirtualComponent = "tMap_4";

				currentComponent = "tMap_4_TMAP_IN";

				/**
				 * [tMap_4_TMAP_IN finally ] stop
				 */

				/**
				 * [tJavaRow_6 finally ] start
				 */

				currentComponent = "tJavaRow_6";

				/**
				 * [tJavaRow_6 finally ] stop
				 */

				/**
				 * [tMap_9_TMAP_OUT finally ] start
				 */

				currentVirtualComponent = "tMap_9";

				currentComponent = "tMap_9_TMAP_OUT";

				/**
				 * [tMap_9_TMAP_OUT finally ] stop
				 */

				/**
				 * [tMap_9_TMAP_IN finally ] start
				 */

				currentVirtualComponent = "tMap_9";

				currentComponent = "tMap_9_TMAP_IN";

				/**
				 * [tMap_9_TMAP_IN finally ] stop
				 */

				/**
				 * [tMap_8_TMAP_OUT finally ] start
				 */

				currentVirtualComponent = "tMap_8";

				currentComponent = "tMap_8_TMAP_OUT";

				/**
				 * [tMap_8_TMAP_OUT finally ] stop
				 */

				/**
				 * [tMap_8_TMAP_IN finally ] start
				 */

				currentVirtualComponent = "tMap_8";

				currentComponent = "tMap_8_TMAP_IN";

				/**
				 * [tMap_8_TMAP_IN finally ] stop
				 */

				/**
				 * [tJavaRow_2 finally ] start
				 */

				currentComponent = "tJavaRow_2";

				/**
				 * [tJavaRow_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_6";

				if (resourceMap.get("finish_tFileOutputDelimited_6") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_6 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_6");

					if (CsvWritertFileOutputDelimited_6 != null) {
						CsvWritertFileOutputDelimited_6.close();
					}

				}

				/**
				 * [tFileOutputDelimited_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public void tJava_15Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_15 begin ] start
				 */

				ok_Hash.put("tJava_15", false);
				start_Hash.put("tJava_15", System.currentTimeMillis());

				currentComponent = "tJava_15";

				int tos_count_tJava_15 = 0;

				System.out.println("Extracting Modifier Data...");
				StatusListener.setStatus(60, "Transforming Staging to Target",
						"");

				/**
				 * [tJava_15 begin ] stop
				 */

				/**
				 * [tJava_15 main ] start
				 */

				currentComponent = "tJava_15";

				tos_count_tJava_15++;

				/**
				 * [tJava_15 main ] stop
				 */

				/**
				 * [tJava_15 end ] start
				 */

				currentComponent = "tJava_15";

				ok_Hash.put("tJava_15", true);
				end_Hash.put("tJava_15", System.currentTimeMillis());

				/**
				 * [tJava_15 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_15:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_17Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_15 finally ] start
				 */

				currentComponent = "tJava_15";

				/**
				 * [tJava_15 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_15_SUBPROCESS_STATE", 1);
	}

	public static class row34Struct implements
			routines.system.IPersistableRow<row34Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readDate(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readDate(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row34Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfasdddStruct implements
			routines.system.IPersistableRow<copyOfasdddStruct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public String START_DATE;

		public String getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public String END_DATE;

		public String getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readString(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// String

				writeString(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// String

				writeString(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + START_DATE);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + END_DATE);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfasdddStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfout1Struct implements
			routines.system.IPersistableRow<copyOfout1Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public String START_DATE;

		public String getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public String END_DATE;

		public String getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		public String ENDDATE_SOURCE_PATH;

		public String getENDDATE_SOURCE_PATH() {
			return this.ENDDATE_SOURCE_PATH;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readString(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

					this.ENDDATE_SOURCE_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// String

				writeString(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// String

				writeString(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

				// String

				writeString(this.ENDDATE_SOURCE_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + START_DATE);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + END_DATE);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append(",ENDDATE_SOURCE_PATH=" + ENDDATE_SOURCE_PATH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfout1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfto_obs_fctStruct implements
			routines.system.IPersistableRow<copyOfto_obs_fctStruct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public String START_DATE;

		public String getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public String END_DATE;

		public String getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		public String STARTDATE_SOURCE_PATH;

		public String getSTARTDATE_SOURCE_PATH() {
			return this.STARTDATE_SOURCE_PATH;
		}

		public String ENDDATE_SOURCE_PATH;

		public String getENDDATE_SOURCE_PATH() {
			return this.ENDDATE_SOURCE_PATH;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readString(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

					this.STARTDATE_SOURCE_PATH = readString(dis);

					this.ENDDATE_SOURCE_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// String

				writeString(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// String

				writeString(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

				// String

				writeString(this.STARTDATE_SOURCE_PATH, dos);

				// String

				writeString(this.ENDDATE_SOURCE_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + START_DATE);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + END_DATE);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append(",STARTDATE_SOURCE_PATH=" + STARTDATE_SOURCE_PATH);
			sb.append(",ENDDATE_SOURCE_PATH=" + ENDDATE_SOURCE_PATH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfto_obs_fctStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row29Struct implements
			routines.system.IPersistableComparableLookupRow<row29Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public String START_DATE;

		public String getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public String END_DATE;

		public String getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.MODIFIER_CD == null) ? 0 : this.MODIFIER_CD
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row29Struct other = (row29Struct) obj;

			if (this.MODIFIER_CD == null) {
				if (other.MODIFIER_CD != null)
					return false;

			} else if (!this.MODIFIER_CD.equals(other.MODIFIER_CD))

				return false;

			return true;
		}

		public void copyDataTo(row29Struct other) {

			other.ENCOUNTER_NUM = this.ENCOUNTER_NUM;
			other.PATIENT_NUM = this.PATIENT_NUM;
			other.CONCEPT_CD = this.CONCEPT_CD;
			other.PROVIDER_ID = this.PROVIDER_ID;
			other.START_DATE = this.START_DATE;
			other.MODIFIER_CD = this.MODIFIER_CD;
			other.INSTANCE_NUM = this.INSTANCE_NUM;
			other.VALTYPE_CD = this.VALTYPE_CD;
			other.TVAL_CHAR = this.TVAL_CHAR;
			other.NVAL_NUM = this.NVAL_NUM;
			other.VALUEFLAG_CD = this.VALUEFLAG_CD;
			other.QUANTITY_NUM = this.QUANTITY_NUM;
			other.UNITS_CD = this.UNITS_CD;
			other.END_DATE = this.END_DATE;
			other.LOCATION_CD = this.LOCATION_CD;
			other.OBSERVATION_BLOB = this.OBSERVATION_BLOB;
			other.CONFIDENCE_NUM = this.CONFIDENCE_NUM;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row29Struct other) {

			other.MODIFIER_CD = this.MODIFIER_CD;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.MODIFIER_CD = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MODIFIER_CD, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ENCOUNTER_NUM = (BigDecimal) ois.readObject();

				this.PATIENT_NUM = (BigDecimal) ois.readObject();

				this.CONCEPT_CD = readString(dis, ois);

				this.PROVIDER_ID = readString(dis, ois);

				this.START_DATE = readString(dis, ois);

				this.INSTANCE_NUM = readString(dis, ois);

				this.VALTYPE_CD = readString(dis, ois);

				this.TVAL_CHAR = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.NVAL_NUM = null;
				} else {
					this.NVAL_NUM = dis.readFloat();
				}

				this.VALUEFLAG_CD = readString(dis, ois);

				this.QUANTITY_NUM = readString(dis, ois);

				this.UNITS_CD = readString(dis, ois);

				this.END_DATE = readString(dis, ois);

				this.LOCATION_CD = readString(dis, ois);

				this.OBSERVATION_BLOB = readString(dis, ois);

				this.CONFIDENCE_NUM = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				oos.writeObject(this.ENCOUNTER_NUM);

				oos.writeObject(this.PATIENT_NUM);

				writeString(this.CONCEPT_CD, dos, oos);

				writeString(this.PROVIDER_ID, dos, oos);

				writeString(this.START_DATE, dos, oos);

				writeString(this.INSTANCE_NUM, dos, oos);

				writeString(this.VALTYPE_CD, dos, oos);

				writeString(this.TVAL_CHAR, dos, oos);

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				writeString(this.VALUEFLAG_CD, dos, oos);

				writeString(this.QUANTITY_NUM, dos, oos);

				writeString(this.UNITS_CD, dos, oos);

				writeString(this.END_DATE, dos, oos);

				writeString(this.LOCATION_CD, dos, oos);

				writeString(this.OBSERVATION_BLOB, dos, oos);

				writeString(this.CONFIDENCE_NUM, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + START_DATE);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + END_DATE);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row29Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.MODIFIER_CD,
					other.MODIFIER_CD);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_17Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_17Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public String START_DATE;

		public String getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public String END_DATE;

		public String getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readString(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// String

				writeString(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// String

				writeString(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + START_DATE);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + END_DATE);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_17Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_17_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_16Process(globalMap);
				tFileInputDelimited_19Process(globalMap);
				tFileInputDelimited_20Process(globalMap);
				tFileInputDelimited_21Process(globalMap);
				tFileInputDelimited_25Process(globalMap);

				row29Struct row29 = new row29Struct();
				copyOfto_obs_fctStruct copyOfto_obs_fct = new copyOfto_obs_fctStruct();
				copyOfout1Struct copyOfout1 = new copyOfout1Struct();
				copyOfasdddStruct copyOfasddd = new copyOfasdddStruct();
				row34Struct row34 = new row34Struct();

				/**
				 * [tMap_15_TMAP_OUT begin ] start
				 */

				ok_Hash.put("tMap_15_TMAP_OUT", false);
				start_Hash.put("tMap_15_TMAP_OUT", System.currentTimeMillis());

				currentVirtualComponent = "tMap_15";

				currentComponent = "tMap_15_TMAP_OUT";

				int tos_count_tMap_15_TMAP_OUT = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row31Struct> tHash_Lookup_row31 = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row31Struct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row31Struct>) globalMap
						.get("tHash_Lookup_row31"));

				row31Struct row31HashKey = new row31Struct();
				row31Struct row31Default = new row31Struct();

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row32Struct> tHash_Lookup_row32 = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row32Struct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row32Struct>) globalMap
						.get("tHash_Lookup_row32"));

				row32Struct row32HashKey = new row32Struct();
				row32Struct row32Default = new row32Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_15_TMAP_OUT__Struct {
				}
				Var__tMap_15_TMAP_OUT__Struct Var__tMap_15_TMAP_OUT = new Var__tMap_15_TMAP_OUT__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				// ###############################

				class SortableRow_tMap_15_1 implements
						Comparable<SortableRow_tMap_15_1>,
						routines.system.IPersistableRow<SortableRow_tMap_15_1> { // G_TM_B_001

					boolean is__rejectedInnerJoin;

					String exprKey_row31__MODIFIER_PATH;

					// copyOfto_obs_fct
					BigDecimal copyOfto_obs_fct__ENCOUNTER_NUM;
					BigDecimal copyOfto_obs_fct__PATIENT_NUM;
					String copyOfto_obs_fct__CONCEPT_CD;
					String copyOfto_obs_fct__PROVIDER_ID;
					String copyOfto_obs_fct__START_DATE;
					String copyOfto_obs_fct__MODIFIER_CD;
					String copyOfto_obs_fct__INSTANCE_NUM;
					String copyOfto_obs_fct__VALTYPE_CD;
					String copyOfto_obs_fct__TVAL_CHAR;
					Float copyOfto_obs_fct__NVAL_NUM;
					String copyOfto_obs_fct__VALUEFLAG_CD;
					String copyOfto_obs_fct__QUANTITY_NUM;
					String copyOfto_obs_fct__UNITS_CD;
					String copyOfto_obs_fct__END_DATE;
					String copyOfto_obs_fct__LOCATION_CD;
					String copyOfto_obs_fct__OBSERVATION_BLOB;
					String copyOfto_obs_fct__CONFIDENCE_NUM;
					java.util.Date copyOfto_obs_fct__UPDATE_DATE;
					java.util.Date copyOfto_obs_fct__DOWNLOAD_DATE;
					java.util.Date copyOfto_obs_fct__IMPORT_DATE;
					String copyOfto_obs_fct__SOURCESYSTEM_CD;
					String copyOfto_obs_fct__UPLOAD_ID;
					String copyOfto_obs_fct__STARTDATE_SOURCE_PATH;
					String copyOfto_obs_fct__ENDDATE_SOURCE_PATH;

					public void fillFrom(
							copyOfto_obs_fctStruct copyOfto_obs_fct,
							String exprKey_row31__MODIFIER_PATH) {

						this.copyOfto_obs_fct__ENCOUNTER_NUM = copyOfto_obs_fct.ENCOUNTER_NUM;
						this.copyOfto_obs_fct__PATIENT_NUM = copyOfto_obs_fct.PATIENT_NUM;
						this.copyOfto_obs_fct__CONCEPT_CD = copyOfto_obs_fct.CONCEPT_CD;
						this.copyOfto_obs_fct__PROVIDER_ID = copyOfto_obs_fct.PROVIDER_ID;
						this.copyOfto_obs_fct__START_DATE = copyOfto_obs_fct.START_DATE;
						this.copyOfto_obs_fct__MODIFIER_CD = copyOfto_obs_fct.MODIFIER_CD;
						this.copyOfto_obs_fct__INSTANCE_NUM = copyOfto_obs_fct.INSTANCE_NUM;
						this.copyOfto_obs_fct__VALTYPE_CD = copyOfto_obs_fct.VALTYPE_CD;
						this.copyOfto_obs_fct__TVAL_CHAR = copyOfto_obs_fct.TVAL_CHAR;
						this.copyOfto_obs_fct__NVAL_NUM = copyOfto_obs_fct.NVAL_NUM;
						this.copyOfto_obs_fct__VALUEFLAG_CD = copyOfto_obs_fct.VALUEFLAG_CD;
						this.copyOfto_obs_fct__QUANTITY_NUM = copyOfto_obs_fct.QUANTITY_NUM;
						this.copyOfto_obs_fct__UNITS_CD = copyOfto_obs_fct.UNITS_CD;
						this.copyOfto_obs_fct__END_DATE = copyOfto_obs_fct.END_DATE;
						this.copyOfto_obs_fct__LOCATION_CD = copyOfto_obs_fct.LOCATION_CD;
						this.copyOfto_obs_fct__OBSERVATION_BLOB = copyOfto_obs_fct.OBSERVATION_BLOB;
						this.copyOfto_obs_fct__CONFIDENCE_NUM = copyOfto_obs_fct.CONFIDENCE_NUM;
						this.copyOfto_obs_fct__UPDATE_DATE = copyOfto_obs_fct.UPDATE_DATE;
						this.copyOfto_obs_fct__DOWNLOAD_DATE = copyOfto_obs_fct.DOWNLOAD_DATE;
						this.copyOfto_obs_fct__IMPORT_DATE = copyOfto_obs_fct.IMPORT_DATE;
						this.copyOfto_obs_fct__SOURCESYSTEM_CD = copyOfto_obs_fct.SOURCESYSTEM_CD;
						this.copyOfto_obs_fct__UPLOAD_ID = copyOfto_obs_fct.UPLOAD_ID;
						this.copyOfto_obs_fct__STARTDATE_SOURCE_PATH = copyOfto_obs_fct.STARTDATE_SOURCE_PATH;
						this.copyOfto_obs_fct__ENDDATE_SOURCE_PATH = copyOfto_obs_fct.ENDDATE_SOURCE_PATH;
						this.exprKey_row31__MODIFIER_PATH = exprKey_row31__MODIFIER_PATH;

					}

					public void copyDataTo(
							copyOfto_obs_fctStruct copyOfto_obs_fct) {

						copyOfto_obs_fct.ENCOUNTER_NUM = this.copyOfto_obs_fct__ENCOUNTER_NUM;
						copyOfto_obs_fct.PATIENT_NUM = this.copyOfto_obs_fct__PATIENT_NUM;
						copyOfto_obs_fct.CONCEPT_CD = this.copyOfto_obs_fct__CONCEPT_CD;
						copyOfto_obs_fct.PROVIDER_ID = this.copyOfto_obs_fct__PROVIDER_ID;
						copyOfto_obs_fct.START_DATE = this.copyOfto_obs_fct__START_DATE;
						copyOfto_obs_fct.MODIFIER_CD = this.copyOfto_obs_fct__MODIFIER_CD;
						copyOfto_obs_fct.INSTANCE_NUM = this.copyOfto_obs_fct__INSTANCE_NUM;
						copyOfto_obs_fct.VALTYPE_CD = this.copyOfto_obs_fct__VALTYPE_CD;
						copyOfto_obs_fct.TVAL_CHAR = this.copyOfto_obs_fct__TVAL_CHAR;
						copyOfto_obs_fct.NVAL_NUM = this.copyOfto_obs_fct__NVAL_NUM;
						copyOfto_obs_fct.VALUEFLAG_CD = this.copyOfto_obs_fct__VALUEFLAG_CD;
						copyOfto_obs_fct.QUANTITY_NUM = this.copyOfto_obs_fct__QUANTITY_NUM;
						copyOfto_obs_fct.UNITS_CD = this.copyOfto_obs_fct__UNITS_CD;
						copyOfto_obs_fct.END_DATE = this.copyOfto_obs_fct__END_DATE;
						copyOfto_obs_fct.LOCATION_CD = this.copyOfto_obs_fct__LOCATION_CD;
						copyOfto_obs_fct.OBSERVATION_BLOB = this.copyOfto_obs_fct__OBSERVATION_BLOB;
						copyOfto_obs_fct.CONFIDENCE_NUM = this.copyOfto_obs_fct__CONFIDENCE_NUM;
						copyOfto_obs_fct.UPDATE_DATE = this.copyOfto_obs_fct__UPDATE_DATE;
						copyOfto_obs_fct.DOWNLOAD_DATE = this.copyOfto_obs_fct__DOWNLOAD_DATE;
						copyOfto_obs_fct.IMPORT_DATE = this.copyOfto_obs_fct__IMPORT_DATE;
						copyOfto_obs_fct.SOURCESYSTEM_CD = this.copyOfto_obs_fct__SOURCESYSTEM_CD;
						copyOfto_obs_fct.UPLOAD_ID = this.copyOfto_obs_fct__UPLOAD_ID;
						copyOfto_obs_fct.STARTDATE_SOURCE_PATH = this.copyOfto_obs_fct__STARTDATE_SOURCE_PATH;
						copyOfto_obs_fct.ENDDATE_SOURCE_PATH = this.copyOfto_obs_fct__ENDDATE_SOURCE_PATH;

					}

					public String toString() {

						StringBuilder sb = new StringBuilder();
						sb.append(super.toString());
						sb.append("[");

						sb.append("copyOfto_obs_fct__ENCOUNTER_NUM");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__ENCOUNTER_NUM));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__PATIENT_NUM");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__PATIENT_NUM));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__CONCEPT_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__CONCEPT_CD));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__PROVIDER_ID");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__PROVIDER_ID));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__START_DATE");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__START_DATE));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__MODIFIER_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__MODIFIER_CD));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__INSTANCE_NUM");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__INSTANCE_NUM));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__VALTYPE_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__VALTYPE_CD));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__TVAL_CHAR");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__TVAL_CHAR));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__NVAL_NUM");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__NVAL_NUM));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__VALUEFLAG_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__VALUEFLAG_CD));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__QUANTITY_NUM");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__QUANTITY_NUM));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__UNITS_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__UNITS_CD));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__END_DATE");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__END_DATE));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__LOCATION_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__LOCATION_CD));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__OBSERVATION_BLOB");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__OBSERVATION_BLOB));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__CONFIDENCE_NUM");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__CONFIDENCE_NUM));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__UPDATE_DATE");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__UPDATE_DATE));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__DOWNLOAD_DATE");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__DOWNLOAD_DATE));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__IMPORT_DATE");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__IMPORT_DATE));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__SOURCESYSTEM_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__SOURCESYSTEM_CD));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__UPLOAD_ID");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__UPLOAD_ID));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__STARTDATE_SOURCE_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__STARTDATE_SOURCE_PATH));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__ENDDATE_SOURCE_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__ENDDATE_SOURCE_PATH));

						sb.append("]");

						return sb.toString();
					}

					public int compareTo(SortableRow_tMap_15_1 other) {

						int returnValue = 0;

						returnValue = checkNullsAndCompare(
								this.exprKey_row31__MODIFIER_PATH,
								other.exprKey_row31__MODIFIER_PATH);
						if (returnValue != 0) {
							return returnValue;
						}

						return returnValue;
					}

					private int checkNullsAndCompare(Object object1,
							Object object2) {
						int returnValue = 0;
						if (object1 instanceof Comparable
								&& object2 instanceof Comparable) {
							returnValue = ((Comparable) object1)
									.compareTo(object2);
						} else if (object1 != null && object2 != null) {
							returnValue = compareStrings(object1.toString(),
									object2.toString());
						} else if (object1 == null && object2 != null) {
							returnValue = 1;
						} else if (object1 != null && object2 == null) {
							returnValue = -1;
						} else {
							returnValue = 0;
						}

						return returnValue;
					}

					private int compareStrings(String string1, String string2) {
						return string1.compareTo(string2);
					}

					public void readData(ObjectInputStream dis) {

						synchronized (copyOfto_obs_fctStruct.commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

							try {

								int length = 0;

								this.is__rejectedInnerJoin = dis.readBoolean();

								this.copyOfto_obs_fct__ENCOUNTER_NUM = (BigDecimal) dis
										.readObject();

								this.copyOfto_obs_fct__PATIENT_NUM = (BigDecimal) dis
										.readObject();

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__CONCEPT_CD = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__CONCEPT_CD = new String(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__PROVIDER_ID = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__PROVIDER_ID = new String(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__START_DATE = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__START_DATE = new String(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__MODIFIER_CD = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__MODIFIER_CD = new String(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__INSTANCE_NUM = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__INSTANCE_NUM = new String(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__VALTYPE_CD = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__VALTYPE_CD = new String(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__TVAL_CHAR = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__TVAL_CHAR = new String(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.copyOfto_obs_fct__NVAL_NUM = null;
								} else {
									this.copyOfto_obs_fct__NVAL_NUM = dis
											.readFloat();
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__VALUEFLAG_CD = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__VALUEFLAG_CD = new String(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__QUANTITY_NUM = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__QUANTITY_NUM = new String(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__UNITS_CD = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__UNITS_CD = new String(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__END_DATE = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__END_DATE = new String(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__LOCATION_CD = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__LOCATION_CD = new String(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__OBSERVATION_BLOB = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__OBSERVATION_BLOB = new String(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__CONFIDENCE_NUM = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__CONFIDENCE_NUM = new String(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.copyOfto_obs_fct__UPDATE_DATE = null;
								} else {
									this.copyOfto_obs_fct__UPDATE_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.copyOfto_obs_fct__DOWNLOAD_DATE = null;
								} else {
									this.copyOfto_obs_fct__DOWNLOAD_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.copyOfto_obs_fct__IMPORT_DATE = null;
								} else {
									this.copyOfto_obs_fct__IMPORT_DATE = new Date(
											dis.readLong());
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__SOURCESYSTEM_CD = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__SOURCESYSTEM_CD = new String(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__UPLOAD_ID = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__UPLOAD_ID = new String(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__STARTDATE_SOURCE_PATH = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__STARTDATE_SOURCE_PATH = new String(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__ENDDATE_SOURCE_PATH = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__ENDDATE_SOURCE_PATH = new String(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row31__MODIFIER_PATH = null;
								} else {
									if (length > copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.exprKey_row31__MODIFIER_PATH = new String(
											copyOfto_obs_fctStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

							} catch (IOException e) {
								throw new RuntimeException(e);

							} catch (ClassNotFoundException eCNFE) {
								throw new RuntimeException(eCNFE);

							}

						}
					}

					public void writeData(ObjectOutputStream dos) {
						try {

							dos.writeBoolean(this.is__rejectedInnerJoin);

							dos.writeObject(this.copyOfto_obs_fct__ENCOUNTER_NUM);

							dos.writeObject(this.copyOfto_obs_fct__PATIENT_NUM);

							if (this.copyOfto_obs_fct__CONCEPT_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__CONCEPT_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__PROVIDER_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__PROVIDER_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__START_DATE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__START_DATE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__MODIFIER_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__MODIFIER_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__INSTANCE_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__INSTANCE_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__VALTYPE_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__VALTYPE_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__TVAL_CHAR == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__TVAL_CHAR
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__NVAL_NUM == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeFloat(this.copyOfto_obs_fct__NVAL_NUM);
							}

							if (this.copyOfto_obs_fct__VALUEFLAG_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__VALUEFLAG_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__QUANTITY_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__QUANTITY_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__UNITS_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__UNITS_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__END_DATE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__END_DATE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__LOCATION_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__LOCATION_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__OBSERVATION_BLOB == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__OBSERVATION_BLOB
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__CONFIDENCE_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__CONFIDENCE_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__UPDATE_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.copyOfto_obs_fct__UPDATE_DATE
										.getTime());
							}

							if (this.copyOfto_obs_fct__DOWNLOAD_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.copyOfto_obs_fct__DOWNLOAD_DATE
										.getTime());
							}

							if (this.copyOfto_obs_fct__IMPORT_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.copyOfto_obs_fct__IMPORT_DATE
										.getTime());
							}

							if (this.copyOfto_obs_fct__SOURCESYSTEM_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__SOURCESYSTEM_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__UPLOAD_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__UPLOAD_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__STARTDATE_SOURCE_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__STARTDATE_SOURCE_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__ENDDATE_SOURCE_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__ENDDATE_SOURCE_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.exprKey_row31__MODIFIER_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row31__MODIFIER_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

				} // G_TM_B_001

				org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_15_1> fsi_tMap_15_1 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_15_1>(
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_"
								+ Thread.currentThread().getId() + "_" + pid
								+ "_tMap_15_1", 200000) {
					public SortableRow_tMap_15_1 createRowInstance() {
						return new SortableRow_tMap_15_1();
					}
				};

				fsi_tMap_15_1.initPut();

				class SortableRow_tMap_15_2 implements
						Comparable<SortableRow_tMap_15_2>,
						routines.system.IPersistableRow<SortableRow_tMap_15_2> { // G_TM_B_001

					boolean is__rejectedInnerJoin;

					BigDecimal exprKey_row32__PATIENT_NUM;
					String exprKey_row32__MODIFIER_CD;

					// row31
					BigDecimal copyOfto_obs_fct__ENCOUNTER_NUM;
					BigDecimal copyOfto_obs_fct__PATIENT_NUM;
					String copyOfto_obs_fct__CONCEPT_CD;
					String copyOfto_obs_fct__PROVIDER_ID;
					String copyOfto_obs_fct__START_DATE;
					String copyOfto_obs_fct__MODIFIER_CD;
					String copyOfto_obs_fct__INSTANCE_NUM;
					String copyOfto_obs_fct__VALTYPE_CD;
					String copyOfto_obs_fct__TVAL_CHAR;
					Float copyOfto_obs_fct__NVAL_NUM;
					String copyOfto_obs_fct__VALUEFLAG_CD;
					String copyOfto_obs_fct__QUANTITY_NUM;
					String copyOfto_obs_fct__UNITS_CD;
					String copyOfto_obs_fct__END_DATE;
					String copyOfto_obs_fct__LOCATION_CD;
					String copyOfto_obs_fct__OBSERVATION_BLOB;
					String copyOfto_obs_fct__CONFIDENCE_NUM;
					java.util.Date copyOfto_obs_fct__UPDATE_DATE;
					java.util.Date copyOfto_obs_fct__DOWNLOAD_DATE;
					java.util.Date copyOfto_obs_fct__IMPORT_DATE;
					String copyOfto_obs_fct__SOURCESYSTEM_CD;
					String copyOfto_obs_fct__UPLOAD_ID;
					String copyOfto_obs_fct__STARTDATE_SOURCE_PATH;
					String copyOfto_obs_fct__ENDDATE_SOURCE_PATH;
					String row31__MODIFIER_PATH;
					String row31__MODIFIER_CD;
					String row31__NAME_CHAR;
					String row31__MODIFIER_BLOB;
					java.util.Date row31__UPDATE_DATE;
					java.util.Date row31__DOWNLOAD_DATE;
					java.util.Date row31__IMPORT_DATE;
					String row31__SOURCESYSTEM_CD;
					String row31__UPLOAD_ID;

					public void fillFrom(
							copyOfto_obs_fctStruct copyOfto_obs_fct,
							row31Struct row31,
							BigDecimal exprKey_row32__PATIENT_NUM,
							String exprKey_row32__MODIFIER_CD) {

						this.copyOfto_obs_fct__ENCOUNTER_NUM = copyOfto_obs_fct.ENCOUNTER_NUM;
						this.copyOfto_obs_fct__PATIENT_NUM = copyOfto_obs_fct.PATIENT_NUM;
						this.copyOfto_obs_fct__CONCEPT_CD = copyOfto_obs_fct.CONCEPT_CD;
						this.copyOfto_obs_fct__PROVIDER_ID = copyOfto_obs_fct.PROVIDER_ID;
						this.copyOfto_obs_fct__START_DATE = copyOfto_obs_fct.START_DATE;
						this.copyOfto_obs_fct__MODIFIER_CD = copyOfto_obs_fct.MODIFIER_CD;
						this.copyOfto_obs_fct__INSTANCE_NUM = copyOfto_obs_fct.INSTANCE_NUM;
						this.copyOfto_obs_fct__VALTYPE_CD = copyOfto_obs_fct.VALTYPE_CD;
						this.copyOfto_obs_fct__TVAL_CHAR = copyOfto_obs_fct.TVAL_CHAR;
						this.copyOfto_obs_fct__NVAL_NUM = copyOfto_obs_fct.NVAL_NUM;
						this.copyOfto_obs_fct__VALUEFLAG_CD = copyOfto_obs_fct.VALUEFLAG_CD;
						this.copyOfto_obs_fct__QUANTITY_NUM = copyOfto_obs_fct.QUANTITY_NUM;
						this.copyOfto_obs_fct__UNITS_CD = copyOfto_obs_fct.UNITS_CD;
						this.copyOfto_obs_fct__END_DATE = copyOfto_obs_fct.END_DATE;
						this.copyOfto_obs_fct__LOCATION_CD = copyOfto_obs_fct.LOCATION_CD;
						this.copyOfto_obs_fct__OBSERVATION_BLOB = copyOfto_obs_fct.OBSERVATION_BLOB;
						this.copyOfto_obs_fct__CONFIDENCE_NUM = copyOfto_obs_fct.CONFIDENCE_NUM;
						this.copyOfto_obs_fct__UPDATE_DATE = copyOfto_obs_fct.UPDATE_DATE;
						this.copyOfto_obs_fct__DOWNLOAD_DATE = copyOfto_obs_fct.DOWNLOAD_DATE;
						this.copyOfto_obs_fct__IMPORT_DATE = copyOfto_obs_fct.IMPORT_DATE;
						this.copyOfto_obs_fct__SOURCESYSTEM_CD = copyOfto_obs_fct.SOURCESYSTEM_CD;
						this.copyOfto_obs_fct__UPLOAD_ID = copyOfto_obs_fct.UPLOAD_ID;
						this.copyOfto_obs_fct__STARTDATE_SOURCE_PATH = copyOfto_obs_fct.STARTDATE_SOURCE_PATH;
						this.copyOfto_obs_fct__ENDDATE_SOURCE_PATH = copyOfto_obs_fct.ENDDATE_SOURCE_PATH;
						this.row31__MODIFIER_PATH = row31.MODIFIER_PATH;
						this.row31__MODIFIER_CD = row31.MODIFIER_CD;
						this.row31__NAME_CHAR = row31.NAME_CHAR;
						this.row31__MODIFIER_BLOB = row31.MODIFIER_BLOB;
						this.row31__UPDATE_DATE = row31.UPDATE_DATE;
						this.row31__DOWNLOAD_DATE = row31.DOWNLOAD_DATE;
						this.row31__IMPORT_DATE = row31.IMPORT_DATE;
						this.row31__SOURCESYSTEM_CD = row31.SOURCESYSTEM_CD;
						this.row31__UPLOAD_ID = row31.UPLOAD_ID;
						this.exprKey_row32__PATIENT_NUM = exprKey_row32__PATIENT_NUM;
						this.exprKey_row32__MODIFIER_CD = exprKey_row32__MODIFIER_CD;

					}

					public void copyDataTo(
							copyOfto_obs_fctStruct copyOfto_obs_fct,
							row31Struct row31) {

						copyOfto_obs_fct.ENCOUNTER_NUM = this.copyOfto_obs_fct__ENCOUNTER_NUM;
						copyOfto_obs_fct.PATIENT_NUM = this.copyOfto_obs_fct__PATIENT_NUM;
						copyOfto_obs_fct.CONCEPT_CD = this.copyOfto_obs_fct__CONCEPT_CD;
						copyOfto_obs_fct.PROVIDER_ID = this.copyOfto_obs_fct__PROVIDER_ID;
						copyOfto_obs_fct.START_DATE = this.copyOfto_obs_fct__START_DATE;
						copyOfto_obs_fct.MODIFIER_CD = this.copyOfto_obs_fct__MODIFIER_CD;
						copyOfto_obs_fct.INSTANCE_NUM = this.copyOfto_obs_fct__INSTANCE_NUM;
						copyOfto_obs_fct.VALTYPE_CD = this.copyOfto_obs_fct__VALTYPE_CD;
						copyOfto_obs_fct.TVAL_CHAR = this.copyOfto_obs_fct__TVAL_CHAR;
						copyOfto_obs_fct.NVAL_NUM = this.copyOfto_obs_fct__NVAL_NUM;
						copyOfto_obs_fct.VALUEFLAG_CD = this.copyOfto_obs_fct__VALUEFLAG_CD;
						copyOfto_obs_fct.QUANTITY_NUM = this.copyOfto_obs_fct__QUANTITY_NUM;
						copyOfto_obs_fct.UNITS_CD = this.copyOfto_obs_fct__UNITS_CD;
						copyOfto_obs_fct.END_DATE = this.copyOfto_obs_fct__END_DATE;
						copyOfto_obs_fct.LOCATION_CD = this.copyOfto_obs_fct__LOCATION_CD;
						copyOfto_obs_fct.OBSERVATION_BLOB = this.copyOfto_obs_fct__OBSERVATION_BLOB;
						copyOfto_obs_fct.CONFIDENCE_NUM = this.copyOfto_obs_fct__CONFIDENCE_NUM;
						copyOfto_obs_fct.UPDATE_DATE = this.copyOfto_obs_fct__UPDATE_DATE;
						copyOfto_obs_fct.DOWNLOAD_DATE = this.copyOfto_obs_fct__DOWNLOAD_DATE;
						copyOfto_obs_fct.IMPORT_DATE = this.copyOfto_obs_fct__IMPORT_DATE;
						copyOfto_obs_fct.SOURCESYSTEM_CD = this.copyOfto_obs_fct__SOURCESYSTEM_CD;
						copyOfto_obs_fct.UPLOAD_ID = this.copyOfto_obs_fct__UPLOAD_ID;
						copyOfto_obs_fct.STARTDATE_SOURCE_PATH = this.copyOfto_obs_fct__STARTDATE_SOURCE_PATH;
						copyOfto_obs_fct.ENDDATE_SOURCE_PATH = this.copyOfto_obs_fct__ENDDATE_SOURCE_PATH;
						row31.MODIFIER_PATH = this.row31__MODIFIER_PATH;
						row31.MODIFIER_CD = this.row31__MODIFIER_CD;
						row31.NAME_CHAR = this.row31__NAME_CHAR;
						row31.MODIFIER_BLOB = this.row31__MODIFIER_BLOB;
						row31.UPDATE_DATE = this.row31__UPDATE_DATE;
						row31.DOWNLOAD_DATE = this.row31__DOWNLOAD_DATE;
						row31.IMPORT_DATE = this.row31__IMPORT_DATE;
						row31.SOURCESYSTEM_CD = this.row31__SOURCESYSTEM_CD;
						row31.UPLOAD_ID = this.row31__UPLOAD_ID;

					}

					public String toString() {

						StringBuilder sb = new StringBuilder();
						sb.append(super.toString());
						sb.append("[");

						sb.append("copyOfto_obs_fct__ENCOUNTER_NUM");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__ENCOUNTER_NUM));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__PATIENT_NUM");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__PATIENT_NUM));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__CONCEPT_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__CONCEPT_CD));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__PROVIDER_ID");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__PROVIDER_ID));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__START_DATE");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__START_DATE));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__MODIFIER_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__MODIFIER_CD));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__INSTANCE_NUM");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__INSTANCE_NUM));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__VALTYPE_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__VALTYPE_CD));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__TVAL_CHAR");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__TVAL_CHAR));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__NVAL_NUM");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__NVAL_NUM));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__VALUEFLAG_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__VALUEFLAG_CD));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__QUANTITY_NUM");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__QUANTITY_NUM));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__UNITS_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__UNITS_CD));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__END_DATE");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__END_DATE));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__LOCATION_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__LOCATION_CD));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__OBSERVATION_BLOB");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__OBSERVATION_BLOB));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__CONFIDENCE_NUM");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__CONFIDENCE_NUM));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__UPDATE_DATE");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__UPDATE_DATE));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__DOWNLOAD_DATE");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__DOWNLOAD_DATE));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__IMPORT_DATE");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__IMPORT_DATE));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__SOURCESYSTEM_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__SOURCESYSTEM_CD));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__UPLOAD_ID");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__UPLOAD_ID));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__STARTDATE_SOURCE_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__STARTDATE_SOURCE_PATH));

						sb.append(", ");

						sb.append("copyOfto_obs_fct__ENDDATE_SOURCE_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfto_obs_fct__ENDDATE_SOURCE_PATH));

						sb.append(", ");

						sb.append("row31__MODIFIER_PATH");
						sb.append("=");
						sb.append(String.valueOf(this.row31__MODIFIER_PATH));

						sb.append(", ");

						sb.append("row31__MODIFIER_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row31__MODIFIER_CD));

						sb.append(", ");

						sb.append("row31__NAME_CHAR");
						sb.append("=");
						sb.append(String.valueOf(this.row31__NAME_CHAR));

						sb.append(", ");

						sb.append("row31__MODIFIER_BLOB");
						sb.append("=");
						sb.append(String.valueOf(this.row31__MODIFIER_BLOB));

						sb.append(", ");

						sb.append("row31__UPDATE_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row31__UPDATE_DATE));

						sb.append(", ");

						sb.append("row31__DOWNLOAD_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row31__DOWNLOAD_DATE));

						sb.append(", ");

						sb.append("row31__IMPORT_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row31__IMPORT_DATE));

						sb.append(", ");

						sb.append("row31__SOURCESYSTEM_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row31__SOURCESYSTEM_CD));

						sb.append(", ");

						sb.append("row31__UPLOAD_ID");
						sb.append("=");
						sb.append(String.valueOf(this.row31__UPLOAD_ID));

						sb.append("]");

						return sb.toString();
					}

					public int compareTo(SortableRow_tMap_15_2 other) {

						int returnValue = 0;

						returnValue = checkNullsAndCompare(
								this.exprKey_row32__PATIENT_NUM,
								other.exprKey_row32__PATIENT_NUM);
						if (returnValue != 0) {
							return returnValue;
						}

						returnValue = checkNullsAndCompare(
								this.exprKey_row32__MODIFIER_CD,
								other.exprKey_row32__MODIFIER_CD);
						if (returnValue != 0) {
							return returnValue;
						}

						return returnValue;
					}

					private int checkNullsAndCompare(Object object1,
							Object object2) {
						int returnValue = 0;
						if (object1 instanceof Comparable
								&& object2 instanceof Comparable) {
							returnValue = ((Comparable) object1)
									.compareTo(object2);
						} else if (object1 != null && object2 != null) {
							returnValue = compareStrings(object1.toString(),
									object2.toString());
						} else if (object1 == null && object2 != null) {
							returnValue = 1;
						} else if (object1 != null && object2 == null) {
							returnValue = -1;
						} else {
							returnValue = 0;
						}

						return returnValue;
					}

					private int compareStrings(String string1, String string2) {
						return string1.compareTo(string2);
					}

					public void readData(ObjectInputStream dis) {

						synchronized (row31Struct.commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

							try {

								int length = 0;

								this.is__rejectedInnerJoin = dis.readBoolean();

								this.copyOfto_obs_fct__ENCOUNTER_NUM = (BigDecimal) dis
										.readObject();

								this.copyOfto_obs_fct__PATIENT_NUM = (BigDecimal) dis
										.readObject();

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__CONCEPT_CD = null;
								} else {
									if (length > row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__CONCEPT_CD = new String(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__PROVIDER_ID = null;
								} else {
									if (length > row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__PROVIDER_ID = new String(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__START_DATE = null;
								} else {
									if (length > row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__START_DATE = new String(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__MODIFIER_CD = null;
								} else {
									if (length > row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__MODIFIER_CD = new String(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__INSTANCE_NUM = null;
								} else {
									if (length > row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__INSTANCE_NUM = new String(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__VALTYPE_CD = null;
								} else {
									if (length > row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__VALTYPE_CD = new String(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__TVAL_CHAR = null;
								} else {
									if (length > row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__TVAL_CHAR = new String(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.copyOfto_obs_fct__NVAL_NUM = null;
								} else {
									this.copyOfto_obs_fct__NVAL_NUM = dis
											.readFloat();
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__VALUEFLAG_CD = null;
								} else {
									if (length > row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__VALUEFLAG_CD = new String(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__QUANTITY_NUM = null;
								} else {
									if (length > row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__QUANTITY_NUM = new String(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__UNITS_CD = null;
								} else {
									if (length > row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__UNITS_CD = new String(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__END_DATE = null;
								} else {
									if (length > row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__END_DATE = new String(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__LOCATION_CD = null;
								} else {
									if (length > row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__LOCATION_CD = new String(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__OBSERVATION_BLOB = null;
								} else {
									if (length > row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__OBSERVATION_BLOB = new String(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__CONFIDENCE_NUM = null;
								} else {
									if (length > row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__CONFIDENCE_NUM = new String(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.copyOfto_obs_fct__UPDATE_DATE = null;
								} else {
									this.copyOfto_obs_fct__UPDATE_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.copyOfto_obs_fct__DOWNLOAD_DATE = null;
								} else {
									this.copyOfto_obs_fct__DOWNLOAD_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.copyOfto_obs_fct__IMPORT_DATE = null;
								} else {
									this.copyOfto_obs_fct__IMPORT_DATE = new Date(
											dis.readLong());
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__SOURCESYSTEM_CD = null;
								} else {
									if (length > row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__SOURCESYSTEM_CD = new String(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__UPLOAD_ID = null;
								} else {
									if (length > row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__UPLOAD_ID = new String(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__STARTDATE_SOURCE_PATH = null;
								} else {
									if (length > row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__STARTDATE_SOURCE_PATH = new String(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfto_obs_fct__ENDDATE_SOURCE_PATH = null;
								} else {
									if (length > row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfto_obs_fct__ENDDATE_SOURCE_PATH = new String(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row31__MODIFIER_PATH = null;
								} else {
									if (length > row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row31__MODIFIER_PATH = new String(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row31__MODIFIER_CD = null;
								} else {
									if (length > row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row31__MODIFIER_CD = new String(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row31__NAME_CHAR = null;
								} else {
									if (length > row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row31__NAME_CHAR = new String(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row31__MODIFIER_BLOB = null;
								} else {
									if (length > row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row31__MODIFIER_BLOB = new String(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.row31__UPDATE_DATE = null;
								} else {
									this.row31__UPDATE_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.row31__DOWNLOAD_DATE = null;
								} else {
									this.row31__DOWNLOAD_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.row31__IMPORT_DATE = null;
								} else {
									this.row31__IMPORT_DATE = new Date(
											dis.readLong());
								}

								length = dis.readInt();
								if (length == -1) {
									this.row31__SOURCESYSTEM_CD = null;
								} else {
									if (length > row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row31__SOURCESYSTEM_CD = new String(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row31__UPLOAD_ID = null;
								} else {
									if (length > row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row31__UPLOAD_ID = new String(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								this.exprKey_row32__PATIENT_NUM = (BigDecimal) dis
										.readObject();

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row32__MODIFIER_CD = null;
								} else {
									if (length > row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.exprKey_row32__MODIFIER_CD = new String(
											row31Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

							} catch (IOException e) {
								throw new RuntimeException(e);

							} catch (ClassNotFoundException eCNFE) {
								throw new RuntimeException(eCNFE);

							}

						}
					}

					public void writeData(ObjectOutputStream dos) {
						try {

							dos.writeBoolean(this.is__rejectedInnerJoin);

							dos.writeObject(this.copyOfto_obs_fct__ENCOUNTER_NUM);

							dos.writeObject(this.copyOfto_obs_fct__PATIENT_NUM);

							if (this.copyOfto_obs_fct__CONCEPT_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__CONCEPT_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__PROVIDER_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__PROVIDER_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__START_DATE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__START_DATE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__MODIFIER_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__MODIFIER_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__INSTANCE_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__INSTANCE_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__VALTYPE_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__VALTYPE_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__TVAL_CHAR == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__TVAL_CHAR
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__NVAL_NUM == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeFloat(this.copyOfto_obs_fct__NVAL_NUM);
							}

							if (this.copyOfto_obs_fct__VALUEFLAG_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__VALUEFLAG_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__QUANTITY_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__QUANTITY_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__UNITS_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__UNITS_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__END_DATE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__END_DATE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__LOCATION_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__LOCATION_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__OBSERVATION_BLOB == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__OBSERVATION_BLOB
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__CONFIDENCE_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__CONFIDENCE_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__UPDATE_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.copyOfto_obs_fct__UPDATE_DATE
										.getTime());
							}

							if (this.copyOfto_obs_fct__DOWNLOAD_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.copyOfto_obs_fct__DOWNLOAD_DATE
										.getTime());
							}

							if (this.copyOfto_obs_fct__IMPORT_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.copyOfto_obs_fct__IMPORT_DATE
										.getTime());
							}

							if (this.copyOfto_obs_fct__SOURCESYSTEM_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__SOURCESYSTEM_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__UPLOAD_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__UPLOAD_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__STARTDATE_SOURCE_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__STARTDATE_SOURCE_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfto_obs_fct__ENDDATE_SOURCE_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfto_obs_fct__ENDDATE_SOURCE_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row31__MODIFIER_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row31__MODIFIER_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row31__MODIFIER_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row31__MODIFIER_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row31__NAME_CHAR == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row31__NAME_CHAR
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row31__MODIFIER_BLOB == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row31__MODIFIER_BLOB
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row31__UPDATE_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row31__UPDATE_DATE.getTime());
							}

							if (this.row31__DOWNLOAD_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row31__DOWNLOAD_DATE
										.getTime());
							}

							if (this.row31__IMPORT_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row31__IMPORT_DATE.getTime());
							}

							if (this.row31__SOURCESYSTEM_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row31__SOURCESYSTEM_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row31__UPLOAD_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row31__UPLOAD_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							dos.writeObject(this.exprKey_row32__PATIENT_NUM);

							if (this.exprKey_row32__MODIFIER_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row32__MODIFIER_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

				} // G_TM_B_001

				org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_15_2> fsi_tMap_15_2 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_15_2>(
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_"
								+ Thread.currentThread().getId() + "_" + pid
								+ "_tMap_15_2", 200000) {
					public SortableRow_tMap_15_2 createRowInstance() {
						return new SortableRow_tMap_15_2();
					}
				};

				fsi_tMap_15_2.initPut();

				/**
				 * [tMap_15_TMAP_OUT begin ] stop
				 */

				/**
				 * [tMap_13 begin ] start
				 */

				ok_Hash.put("tMap_13", false);
				start_Hash.put("tMap_13", System.currentTimeMillis());

				currentComponent = "tMap_13";

				int tos_count_tMap_13 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<copyOfto_tmapStruct> tHash_Lookup_copyOfto_tmap = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<copyOfto_tmapStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<copyOfto_tmapStruct>) globalMap
						.get("tHash_Lookup_copyOfto_tmap"));

				copyOfto_tmapStruct copyOfto_tmapHashKey = new copyOfto_tmapStruct();
				copyOfto_tmapStruct copyOfto_tmapDefault = new copyOfto_tmapStruct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_13__Struct {
				}
				Var__tMap_13__Struct Var__tMap_13 = new Var__tMap_13__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfto_obs_fctStruct copyOfto_obs_fct_tmp = new copyOfto_obs_fctStruct();
				// ###############################

				/**
				 * [tMap_13 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_17 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_17", false);
				start_Hash.put("tFileInputDelimited_17",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_17";

				int tos_count_tFileInputDelimited_17 = 0;

				int nb_line_tFileInputDelimited_17 = 0;
				int footer_tFileInputDelimited_17 = 0;
				int totalLinetFileInputDelimited_17 = 0;
				int limittFileInputDelimited_17 = -1;
				int lastLinetFileInputDelimited_17 = -1;

				char fieldSeparator_tFileInputDelimited_17[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_17 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_17[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_17 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_17 = /**
				 * Start field
				 * tFileInputDelimited_17:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_12_FILEPATH"))/**
				 * 
				 * End field tFileInputDelimited_17:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_17 = null;

				try {

					String[] rowtFileInputDelimited_17 = null;
					int currentLinetFileInputDelimited_17 = 0;
					int outputLinetFileInputDelimited_17 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_17 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_17 = 0;
							if (footer_value_tFileInputDelimited_17 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_17 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_17,
									fieldSeparator_tFileInputDelimited_17[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_17 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_17)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_17[0]);
						}

						csvReadertFileInputDelimited_17
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_17[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_17[0] != '\r'))
							csvReadertFileInputDelimited_17.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_17[0]);

						csvReadertFileInputDelimited_17.setQuoteChar('"');

						csvReadertFileInputDelimited_17
								.setEscapeChar(csvReadertFileInputDelimited_17
										.getQuoteChar());

						if (footer_tFileInputDelimited_17 > 0) {
							for (totalLinetFileInputDelimited_17 = 0; totalLinetFileInputDelimited_17 < 0; totalLinetFileInputDelimited_17++) {
								csvReadertFileInputDelimited_17.readNext();
							}
							csvReadertFileInputDelimited_17
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_17.readNext()) {

								rowtFileInputDelimited_17 = csvReadertFileInputDelimited_17
										.getValues();
								if (!(rowtFileInputDelimited_17.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_17[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_17++;

								}

							}
							int lastLineTemptFileInputDelimited_17 = totalLinetFileInputDelimited_17
									- footer_tFileInputDelimited_17 < 0 ? 0
									: totalLinetFileInputDelimited_17
											- footer_tFileInputDelimited_17;
							if (lastLinetFileInputDelimited_17 > 0) {
								lastLinetFileInputDelimited_17 = lastLinetFileInputDelimited_17 < lastLineTemptFileInputDelimited_17 ? lastLinetFileInputDelimited_17
										: lastLineTemptFileInputDelimited_17;
							} else {
								lastLinetFileInputDelimited_17 = lastLineTemptFileInputDelimited_17;
							}

							csvReadertFileInputDelimited_17.close();
							if (filename_tFileInputDelimited_17 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_17 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_17,
										fieldSeparator_tFileInputDelimited_17[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_17 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_17)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_17[0]);
							}
							csvReadertFileInputDelimited_17
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_17[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_17[0] != '\r'))
								csvReadertFileInputDelimited_17
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_17[0]);

							csvReadertFileInputDelimited_17.setQuoteChar('"');

							csvReadertFileInputDelimited_17
									.setEscapeChar(csvReadertFileInputDelimited_17
											.getQuoteChar());

						}

						if (limittFileInputDelimited_17 != 0) {
							for (currentLinetFileInputDelimited_17 = 0; currentLinetFileInputDelimited_17 < 0; currentLinetFileInputDelimited_17++) {
								csvReadertFileInputDelimited_17.readNext();
							}
						}
						csvReadertFileInputDelimited_17
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_17 != 0
							&& csvReadertFileInputDelimited_17 != null
							&& csvReadertFileInputDelimited_17.readNext()) {

						rowtFileInputDelimited_17 = csvReadertFileInputDelimited_17
								.getValues();

						if (rowtFileInputDelimited_17.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_17[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_17++;

						if (lastLinetFileInputDelimited_17 > -1
								&& currentLinetFileInputDelimited_17 > lastLinetFileInputDelimited_17) {
							break;
						}
						outputLinetFileInputDelimited_17++;
						if (limittFileInputDelimited_17 > 0
								&& outputLinetFileInputDelimited_17 > limittFileInputDelimited_17) {
							break;
						}

						row29 = null;

						boolean whetherReject_tFileInputDelimited_17 = false;
						row29 = new row29Struct();
						try {

							char fieldSeparator_tFileInputDelimited_17_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_17_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_17.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_17[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row29.ENCOUNTER_NUM = null;

								row29.PATIENT_NUM = null;

								row29.CONCEPT_CD = null;

								row29.PROVIDER_ID = null;

								row29.START_DATE = null;

								row29.MODIFIER_CD = null;

								row29.INSTANCE_NUM = null;

								row29.VALTYPE_CD = null;

								row29.TVAL_CHAR = null;

								row29.NVAL_NUM = null;

								row29.VALUEFLAG_CD = null;

								row29.QUANTITY_NUM = null;

								row29.UNITS_CD = null;

								row29.END_DATE = null;

								row29.LOCATION_CD = null;

								row29.OBSERVATION_BLOB = null;

								row29.CONFIDENCE_NUM = null;

								row29.UPDATE_DATE = null;

								row29.DOWNLOAD_DATE = null;

								row29.IMPORT_DATE = null;

								row29.SOURCESYSTEM_CD = null;

								row29.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_17 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_17 = 0;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									if (rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17]
											.length() > 0) {

										row29.ENCOUNTER_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17]);

									} else {
										row29.ENCOUNTER_NUM = null;
									}

								} else {
									row29.ENCOUNTER_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 1;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									if (rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17]
											.length() > 0) {

										row29.PATIENT_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17]);

									} else {
										row29.PATIENT_NUM = null;
									}

								} else {
									row29.PATIENT_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 2;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row29.CONCEPT_CD = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row29.CONCEPT_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 3;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row29.PROVIDER_ID = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row29.PROVIDER_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 4;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row29.START_DATE = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row29.START_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 5;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row29.MODIFIER_CD = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row29.MODIFIER_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 6;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row29.INSTANCE_NUM = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row29.INSTANCE_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 7;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row29.VALTYPE_CD = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row29.VALTYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 8;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row29.TVAL_CHAR = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row29.TVAL_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 9;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									if (rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17]
											.length() > 0) {

										row29.NVAL_NUM = ParserUtils
												.parseTo_Float(rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17]);

									} else {
										row29.NVAL_NUM = null;
									}

								} else {
									row29.NVAL_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 10;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row29.VALUEFLAG_CD = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row29.VALUEFLAG_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 11;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row29.QUANTITY_NUM = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row29.QUANTITY_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 12;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row29.UNITS_CD = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row29.UNITS_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 13;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row29.END_DATE = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row29.END_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 14;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row29.LOCATION_CD = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row29.LOCATION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 15;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row29.OBSERVATION_BLOB = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row29.OBSERVATION_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 16;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row29.CONFIDENCE_NUM = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row29.CONFIDENCE_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 17;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									if (rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17]
											.length() > 0) {

										row29.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17],
														"yyyy-MM-dd");

									} else {
										row29.UPDATE_DATE = null;
									}

								} else {
									row29.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 18;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									if (rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17]
											.length() > 0) {

										row29.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17],
														"yyyy-MM-dd");

									} else {
										row29.DOWNLOAD_DATE = null;
									}

								} else {
									row29.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 19;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									if (rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17]
											.length() > 0) {

										row29.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17],
														"yyyy-MM-dd");

									} else {
										row29.IMPORT_DATE = null;
									}

								} else {
									row29.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 20;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row29.SOURCESYSTEM_CD = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row29.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_17 = 21;

								if (columnIndexWithD_tFileInputDelimited_17 < rowtFileInputDelimited_17.length) {

									row29.UPLOAD_ID = rowtFileInputDelimited_17[columnIndexWithD_tFileInputDelimited_17];

								} else {
									row29.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_17 = true;

							System.err.println(e.getMessage());
							row29 = null;

						}

						/**
						 * [tFileInputDelimited_17 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_17 main ] start
						 */

						currentComponent = "tFileInputDelimited_17";

						tos_count_tFileInputDelimited_17++;

						/**
						 * [tFileInputDelimited_17 main ] stop
						 */
						// Start of branch "row29"
						if (row29 != null) {

							/**
							 * [tMap_13 main ] start
							 */

							currentComponent = "tMap_13";

							boolean hasCasePrimitiveKeyWithNull_tMap_13 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_13 = false;
							boolean mainRowRejected_tMap_13 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "copyOfto_tmap"
							// /////////////////////////////////////////////

							boolean forceLoopcopyOfto_tmap = false;

							copyOfto_tmapStruct copyOfto_tmapObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_13) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_13 = false;

								copyOfto_tmapHashKey.MODIFIER_CD = row29.MODIFIER_CD;

								copyOfto_tmapHashKey.hashCodeDirty = true;

								tHash_Lookup_copyOfto_tmap
										.lookup(copyOfto_tmapHashKey);

							} // G_TM_M_020

							if (tHash_Lookup_copyOfto_tmap != null
									&& tHash_Lookup_copyOfto_tmap
											.getCount(copyOfto_tmapHashKey) > 1) { // G
																					// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'copyOfto_tmap' and it contains more one result from keys :  copyOfto_tmap.MODIFIER_CD = '"
								// + copyOfto_tmapHashKey.MODIFIER_CD + "'");
							} // G 071

							copyOfto_tmapStruct copyOfto_tmap = null;

							copyOfto_tmapStruct fromLookup_copyOfto_tmap = null;
							copyOfto_tmap = copyOfto_tmapDefault;

							if (tHash_Lookup_copyOfto_tmap != null
									&& tHash_Lookup_copyOfto_tmap.hasNext()) { // G
																				// 099

								fromLookup_copyOfto_tmap = tHash_Lookup_copyOfto_tmap
										.next();

							} // G 099

							if (fromLookup_copyOfto_tmap != null) {
								copyOfto_tmap = fromLookup_copyOfto_tmap;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_13__Struct Var = Var__tMap_13;// ###############################
								// ###############################
								// # Output tables

								copyOfto_obs_fct = null;

								// # Output table : 'copyOfto_obs_fct'
								// # Filter conditions
								if (

								!row29.MODIFIER_CD.equals("@")

								) {
									copyOfto_obs_fct_tmp.ENCOUNTER_NUM = row29.ENCOUNTER_NUM;
									copyOfto_obs_fct_tmp.PATIENT_NUM = row29.PATIENT_NUM;
									copyOfto_obs_fct_tmp.CONCEPT_CD = row29.CONCEPT_CD;
									copyOfto_obs_fct_tmp.PROVIDER_ID = row29.PROVIDER_ID;
									copyOfto_obs_fct_tmp.START_DATE = row29.START_DATE;
									copyOfto_obs_fct_tmp.MODIFIER_CD = row29.MODIFIER_CD;
									copyOfto_obs_fct_tmp.INSTANCE_NUM = row29.INSTANCE_NUM;
									copyOfto_obs_fct_tmp.VALTYPE_CD = row29.VALTYPE_CD;
									copyOfto_obs_fct_tmp.TVAL_CHAR = row29.TVAL_CHAR;
									copyOfto_obs_fct_tmp.NVAL_NUM = row29.NVAL_NUM;
									copyOfto_obs_fct_tmp.VALUEFLAG_CD = row29.VALUEFLAG_CD;
									copyOfto_obs_fct_tmp.QUANTITY_NUM = row29.QUANTITY_NUM;
									copyOfto_obs_fct_tmp.UNITS_CD = row29.UNITS_CD;
									copyOfto_obs_fct_tmp.END_DATE = row29.END_DATE;
									copyOfto_obs_fct_tmp.LOCATION_CD = row29.LOCATION_CD;
									copyOfto_obs_fct_tmp.OBSERVATION_BLOB = row29.OBSERVATION_BLOB;
									copyOfto_obs_fct_tmp.CONFIDENCE_NUM = row29.CONFIDENCE_NUM;
									copyOfto_obs_fct_tmp.UPDATE_DATE = row29.UPDATE_DATE;
									copyOfto_obs_fct_tmp.DOWNLOAD_DATE = row29.DOWNLOAD_DATE;
									copyOfto_obs_fct_tmp.IMPORT_DATE = row29.IMPORT_DATE;
									copyOfto_obs_fct_tmp.SOURCESYSTEM_CD = row29.SOURCESYSTEM_CD;
									copyOfto_obs_fct_tmp.UPLOAD_ID = row29.UPLOAD_ID;
									copyOfto_obs_fct_tmp.STARTDATE_SOURCE_PATH = copyOfto_tmap.STARTDATE_SOURCE_PATH;
									copyOfto_obs_fct_tmp.ENDDATE_SOURCE_PATH = copyOfto_tmap.ENDDATE_SOURCE_PATH;
									copyOfto_obs_fct = copyOfto_obs_fct_tmp;
								} // closing filter/reject
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_13 = false;

							tos_count_tMap_13++;

							/**
							 * [tMap_13 main ] stop
							 */
							// Start of branch "copyOfto_obs_fct"
							if (copyOfto_obs_fct != null) {

								/**
								 * [tMap_15_TMAP_OUT main ] start
								 */

								currentVirtualComponent = "tMap_15";

								currentComponent = "tMap_15_TMAP_OUT";

								boolean hasCasePrimitiveKeyWithNull_tMap_15_TMAP_OUT = false;

								hasCasePrimitiveKeyWithNull_tMap_15_TMAP_OUT = false;

								String exprKey_row31__MODIFIER_PATH = copyOfto_obs_fct.STARTDATE_SOURCE_PATH;

								SortableRow_tMap_15_1 sortableRow_tMap_15_1 = fsi_tMap_15_1
										.getNextFreeRow();

								sortableRow_tMap_15_1.fillFrom(
										copyOfto_obs_fct,
										exprKey_row31__MODIFIER_PATH);

								fsi_tMap_15_1.put(sortableRow_tMap_15_1);

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_15_TMAP_OUT = false;
								boolean mainRowRejected_tMap_15_TMAP_OUT = false;

								// ###############################

								tos_count_tMap_15_TMAP_OUT++;

								/**
								 * [tMap_15_TMAP_OUT main ] stop
								 */

							} // End of branch "copyOfto_obs_fct"

						} // End of branch "row29"

						/**
						 * [tFileInputDelimited_17 end ] start
						 */

						currentComponent = "tFileInputDelimited_17";

						nb_line_tFileInputDelimited_17++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_17 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_17 != null) {
							csvReadertFileInputDelimited_17.close();
						}
					}
					if (csvReadertFileInputDelimited_17 != null) {
						globalMap.put("tFileInputDelimited_17_NB_LINE",
								nb_line_tFileInputDelimited_17);
					}

				}

				ok_Hash.put("tFileInputDelimited_17", true);
				end_Hash.put("tFileInputDelimited_17",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_17 end ] stop
				 */

				/**
				 * [tMap_13 end ] start
				 */

				currentComponent = "tMap_13";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_copyOfto_tmap != null) {
					tHash_Lookup_copyOfto_tmap.endGet();
				}
				globalMap.remove("tHash_Lookup_copyOfto_tmap");

				// ###############################

				ok_Hash.put("tMap_13", true);
				end_Hash.put("tMap_13", System.currentTimeMillis());

				/**
				 * [tMap_13 end ] stop
				 */

				/**
				 * [tMap_15_TMAP_OUT end ] start
				 */

				currentVirtualComponent = "tMap_15";

				currentComponent = "tMap_15_TMAP_OUT";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_15_TMAP_OUT", true);
				end_Hash.put("tMap_15_TMAP_OUT", System.currentTimeMillis());

				/**
				 * [tMap_15_TMAP_OUT end ] stop
				 */

				/**
				 * [tMap_14_TMAP_OUT begin ] start
				 */

				ok_Hash.put("tMap_14_TMAP_OUT", false);
				start_Hash.put("tMap_14_TMAP_OUT", System.currentTimeMillis());

				currentVirtualComponent = "tMap_14";

				currentComponent = "tMap_14_TMAP_OUT";

				int tos_count_tMap_14_TMAP_OUT = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row30Struct> tHash_Lookup_row30 = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row30Struct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row30Struct>) globalMap
						.get("tHash_Lookup_row30"));

				row30Struct row30HashKey = new row30Struct();
				row30Struct row30Default = new row30Struct();

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row33Struct> tHash_Lookup_row33 = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row33Struct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row33Struct>) globalMap
						.get("tHash_Lookup_row33"));

				row33Struct row33HashKey = new row33Struct();
				row33Struct row33Default = new row33Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_14_TMAP_OUT__Struct {
				}
				Var__tMap_14_TMAP_OUT__Struct Var__tMap_14_TMAP_OUT = new Var__tMap_14_TMAP_OUT__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				// ###############################

				class SortableRow_tMap_14_1 implements
						Comparable<SortableRow_tMap_14_1>,
						routines.system.IPersistableRow<SortableRow_tMap_14_1> { // G_TM_B_001

					boolean is__rejectedInnerJoin;

					String exprKey_row30__MODIFIER_PATH;

					// copyOfout1
					BigDecimal copyOfout1__ENCOUNTER_NUM;
					BigDecimal copyOfout1__PATIENT_NUM;
					String copyOfout1__CONCEPT_CD;
					String copyOfout1__PROVIDER_ID;
					String copyOfout1__START_DATE;
					String copyOfout1__MODIFIER_CD;
					String copyOfout1__INSTANCE_NUM;
					String copyOfout1__VALTYPE_CD;
					String copyOfout1__TVAL_CHAR;
					Float copyOfout1__NVAL_NUM;
					String copyOfout1__VALUEFLAG_CD;
					String copyOfout1__QUANTITY_NUM;
					String copyOfout1__UNITS_CD;
					String copyOfout1__END_DATE;
					String copyOfout1__LOCATION_CD;
					String copyOfout1__OBSERVATION_BLOB;
					String copyOfout1__CONFIDENCE_NUM;
					java.util.Date copyOfout1__UPDATE_DATE;
					java.util.Date copyOfout1__DOWNLOAD_DATE;
					java.util.Date copyOfout1__IMPORT_DATE;
					String copyOfout1__SOURCESYSTEM_CD;
					String copyOfout1__UPLOAD_ID;
					String copyOfout1__ENDDATE_SOURCE_PATH;

					public void fillFrom(copyOfout1Struct copyOfout1,
							String exprKey_row30__MODIFIER_PATH) {

						this.copyOfout1__ENCOUNTER_NUM = copyOfout1.ENCOUNTER_NUM;
						this.copyOfout1__PATIENT_NUM = copyOfout1.PATIENT_NUM;
						this.copyOfout1__CONCEPT_CD = copyOfout1.CONCEPT_CD;
						this.copyOfout1__PROVIDER_ID = copyOfout1.PROVIDER_ID;
						this.copyOfout1__START_DATE = copyOfout1.START_DATE;
						this.copyOfout1__MODIFIER_CD = copyOfout1.MODIFIER_CD;
						this.copyOfout1__INSTANCE_NUM = copyOfout1.INSTANCE_NUM;
						this.copyOfout1__VALTYPE_CD = copyOfout1.VALTYPE_CD;
						this.copyOfout1__TVAL_CHAR = copyOfout1.TVAL_CHAR;
						this.copyOfout1__NVAL_NUM = copyOfout1.NVAL_NUM;
						this.copyOfout1__VALUEFLAG_CD = copyOfout1.VALUEFLAG_CD;
						this.copyOfout1__QUANTITY_NUM = copyOfout1.QUANTITY_NUM;
						this.copyOfout1__UNITS_CD = copyOfout1.UNITS_CD;
						this.copyOfout1__END_DATE = copyOfout1.END_DATE;
						this.copyOfout1__LOCATION_CD = copyOfout1.LOCATION_CD;
						this.copyOfout1__OBSERVATION_BLOB = copyOfout1.OBSERVATION_BLOB;
						this.copyOfout1__CONFIDENCE_NUM = copyOfout1.CONFIDENCE_NUM;
						this.copyOfout1__UPDATE_DATE = copyOfout1.UPDATE_DATE;
						this.copyOfout1__DOWNLOAD_DATE = copyOfout1.DOWNLOAD_DATE;
						this.copyOfout1__IMPORT_DATE = copyOfout1.IMPORT_DATE;
						this.copyOfout1__SOURCESYSTEM_CD = copyOfout1.SOURCESYSTEM_CD;
						this.copyOfout1__UPLOAD_ID = copyOfout1.UPLOAD_ID;
						this.copyOfout1__ENDDATE_SOURCE_PATH = copyOfout1.ENDDATE_SOURCE_PATH;
						this.exprKey_row30__MODIFIER_PATH = exprKey_row30__MODIFIER_PATH;

					}

					public void copyDataTo(copyOfout1Struct copyOfout1) {

						copyOfout1.ENCOUNTER_NUM = this.copyOfout1__ENCOUNTER_NUM;
						copyOfout1.PATIENT_NUM = this.copyOfout1__PATIENT_NUM;
						copyOfout1.CONCEPT_CD = this.copyOfout1__CONCEPT_CD;
						copyOfout1.PROVIDER_ID = this.copyOfout1__PROVIDER_ID;
						copyOfout1.START_DATE = this.copyOfout1__START_DATE;
						copyOfout1.MODIFIER_CD = this.copyOfout1__MODIFIER_CD;
						copyOfout1.INSTANCE_NUM = this.copyOfout1__INSTANCE_NUM;
						copyOfout1.VALTYPE_CD = this.copyOfout1__VALTYPE_CD;
						copyOfout1.TVAL_CHAR = this.copyOfout1__TVAL_CHAR;
						copyOfout1.NVAL_NUM = this.copyOfout1__NVAL_NUM;
						copyOfout1.VALUEFLAG_CD = this.copyOfout1__VALUEFLAG_CD;
						copyOfout1.QUANTITY_NUM = this.copyOfout1__QUANTITY_NUM;
						copyOfout1.UNITS_CD = this.copyOfout1__UNITS_CD;
						copyOfout1.END_DATE = this.copyOfout1__END_DATE;
						copyOfout1.LOCATION_CD = this.copyOfout1__LOCATION_CD;
						copyOfout1.OBSERVATION_BLOB = this.copyOfout1__OBSERVATION_BLOB;
						copyOfout1.CONFIDENCE_NUM = this.copyOfout1__CONFIDENCE_NUM;
						copyOfout1.UPDATE_DATE = this.copyOfout1__UPDATE_DATE;
						copyOfout1.DOWNLOAD_DATE = this.copyOfout1__DOWNLOAD_DATE;
						copyOfout1.IMPORT_DATE = this.copyOfout1__IMPORT_DATE;
						copyOfout1.SOURCESYSTEM_CD = this.copyOfout1__SOURCESYSTEM_CD;
						copyOfout1.UPLOAD_ID = this.copyOfout1__UPLOAD_ID;
						copyOfout1.ENDDATE_SOURCE_PATH = this.copyOfout1__ENDDATE_SOURCE_PATH;

					}

					public String toString() {

						StringBuilder sb = new StringBuilder();
						sb.append(super.toString());
						sb.append("[");

						sb.append("copyOfout1__ENCOUNTER_NUM");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfout1__ENCOUNTER_NUM));

						sb.append(", ");

						sb.append("copyOfout1__PATIENT_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__PATIENT_NUM));

						sb.append(", ");

						sb.append("copyOfout1__CONCEPT_CD");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__CONCEPT_CD));

						sb.append(", ");

						sb.append("copyOfout1__PROVIDER_ID");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__PROVIDER_ID));

						sb.append(", ");

						sb.append("copyOfout1__START_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__START_DATE));

						sb.append(", ");

						sb.append("copyOfout1__MODIFIER_CD");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__MODIFIER_CD));

						sb.append(", ");

						sb.append("copyOfout1__INSTANCE_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__INSTANCE_NUM));

						sb.append(", ");

						sb.append("copyOfout1__VALTYPE_CD");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__VALTYPE_CD));

						sb.append(", ");

						sb.append("copyOfout1__TVAL_CHAR");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__TVAL_CHAR));

						sb.append(", ");

						sb.append("copyOfout1__NVAL_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__NVAL_NUM));

						sb.append(", ");

						sb.append("copyOfout1__VALUEFLAG_CD");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__VALUEFLAG_CD));

						sb.append(", ");

						sb.append("copyOfout1__QUANTITY_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__QUANTITY_NUM));

						sb.append(", ");

						sb.append("copyOfout1__UNITS_CD");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__UNITS_CD));

						sb.append(", ");

						sb.append("copyOfout1__END_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__END_DATE));

						sb.append(", ");

						sb.append("copyOfout1__LOCATION_CD");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__LOCATION_CD));

						sb.append(", ");

						sb.append("copyOfout1__OBSERVATION_BLOB");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfout1__OBSERVATION_BLOB));

						sb.append(", ");

						sb.append("copyOfout1__CONFIDENCE_NUM");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfout1__CONFIDENCE_NUM));

						sb.append(", ");

						sb.append("copyOfout1__UPDATE_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__UPDATE_DATE));

						sb.append(", ");

						sb.append("copyOfout1__DOWNLOAD_DATE");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfout1__DOWNLOAD_DATE));

						sb.append(", ");

						sb.append("copyOfout1__IMPORT_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__IMPORT_DATE));

						sb.append(", ");

						sb.append("copyOfout1__SOURCESYSTEM_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfout1__SOURCESYSTEM_CD));

						sb.append(", ");

						sb.append("copyOfout1__UPLOAD_ID");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__UPLOAD_ID));

						sb.append(", ");

						sb.append("copyOfout1__ENDDATE_SOURCE_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfout1__ENDDATE_SOURCE_PATH));

						sb.append("]");

						return sb.toString();
					}

					public int compareTo(SortableRow_tMap_14_1 other) {

						int returnValue = 0;

						returnValue = checkNullsAndCompare(
								this.exprKey_row30__MODIFIER_PATH,
								other.exprKey_row30__MODIFIER_PATH);
						if (returnValue != 0) {
							return returnValue;
						}

						return returnValue;
					}

					private int checkNullsAndCompare(Object object1,
							Object object2) {
						int returnValue = 0;
						if (object1 instanceof Comparable
								&& object2 instanceof Comparable) {
							returnValue = ((Comparable) object1)
									.compareTo(object2);
						} else if (object1 != null && object2 != null) {
							returnValue = compareStrings(object1.toString(),
									object2.toString());
						} else if (object1 == null && object2 != null) {
							returnValue = 1;
						} else if (object1 != null && object2 == null) {
							returnValue = -1;
						} else {
							returnValue = 0;
						}

						return returnValue;
					}

					private int compareStrings(String string1, String string2) {
						return string1.compareTo(string2);
					}

					public void readData(ObjectInputStream dis) {

						synchronized (copyOfout1Struct.commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

							try {

								int length = 0;

								this.is__rejectedInnerJoin = dis.readBoolean();

								this.copyOfout1__ENCOUNTER_NUM = (BigDecimal) dis
										.readObject();

								this.copyOfout1__PATIENT_NUM = (BigDecimal) dis
										.readObject();

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__CONCEPT_CD = null;
								} else {
									if (length > copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__CONCEPT_CD = new String(
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__PROVIDER_ID = null;
								} else {
									if (length > copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__PROVIDER_ID = new String(
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__START_DATE = null;
								} else {
									if (length > copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__START_DATE = new String(
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__MODIFIER_CD = null;
								} else {
									if (length > copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__MODIFIER_CD = new String(
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__INSTANCE_NUM = null;
								} else {
									if (length > copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__INSTANCE_NUM = new String(
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__VALTYPE_CD = null;
								} else {
									if (length > copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__VALTYPE_CD = new String(
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__TVAL_CHAR = null;
								} else {
									if (length > copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__TVAL_CHAR = new String(
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.copyOfout1__NVAL_NUM = null;
								} else {
									this.copyOfout1__NVAL_NUM = dis.readFloat();
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__VALUEFLAG_CD = null;
								} else {
									if (length > copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__VALUEFLAG_CD = new String(
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__QUANTITY_NUM = null;
								} else {
									if (length > copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__QUANTITY_NUM = new String(
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__UNITS_CD = null;
								} else {
									if (length > copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__UNITS_CD = new String(
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__END_DATE = null;
								} else {
									if (length > copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__END_DATE = new String(
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__LOCATION_CD = null;
								} else {
									if (length > copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__LOCATION_CD = new String(
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__OBSERVATION_BLOB = null;
								} else {
									if (length > copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__OBSERVATION_BLOB = new String(
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__CONFIDENCE_NUM = null;
								} else {
									if (length > copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__CONFIDENCE_NUM = new String(
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.copyOfout1__UPDATE_DATE = null;
								} else {
									this.copyOfout1__UPDATE_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.copyOfout1__DOWNLOAD_DATE = null;
								} else {
									this.copyOfout1__DOWNLOAD_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.copyOfout1__IMPORT_DATE = null;
								} else {
									this.copyOfout1__IMPORT_DATE = new Date(
											dis.readLong());
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__SOURCESYSTEM_CD = null;
								} else {
									if (length > copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__SOURCESYSTEM_CD = new String(
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__UPLOAD_ID = null;
								} else {
									if (length > copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__UPLOAD_ID = new String(
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__ENDDATE_SOURCE_PATH = null;
								} else {
									if (length > copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__ENDDATE_SOURCE_PATH = new String(
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row30__MODIFIER_PATH = null;
								} else {
									if (length > copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.exprKey_row30__MODIFIER_PATH = new String(
											copyOfout1Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

							} catch (IOException e) {
								throw new RuntimeException(e);

							} catch (ClassNotFoundException eCNFE) {
								throw new RuntimeException(eCNFE);

							}

						}
					}

					public void writeData(ObjectOutputStream dos) {
						try {

							dos.writeBoolean(this.is__rejectedInnerJoin);

							dos.writeObject(this.copyOfout1__ENCOUNTER_NUM);

							dos.writeObject(this.copyOfout1__PATIENT_NUM);

							if (this.copyOfout1__CONCEPT_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__CONCEPT_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__PROVIDER_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__PROVIDER_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__START_DATE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__START_DATE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__MODIFIER_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__MODIFIER_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__INSTANCE_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__INSTANCE_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__VALTYPE_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__VALTYPE_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__TVAL_CHAR == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__TVAL_CHAR
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__NVAL_NUM == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeFloat(this.copyOfout1__NVAL_NUM);
							}

							if (this.copyOfout1__VALUEFLAG_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__VALUEFLAG_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__QUANTITY_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__QUANTITY_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__UNITS_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__UNITS_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__END_DATE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__END_DATE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__LOCATION_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__LOCATION_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__OBSERVATION_BLOB == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__OBSERVATION_BLOB
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__CONFIDENCE_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__CONFIDENCE_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__UPDATE_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.copyOfout1__UPDATE_DATE
										.getTime());
							}

							if (this.copyOfout1__DOWNLOAD_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.copyOfout1__DOWNLOAD_DATE
										.getTime());
							}

							if (this.copyOfout1__IMPORT_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.copyOfout1__IMPORT_DATE
										.getTime());
							}

							if (this.copyOfout1__SOURCESYSTEM_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__SOURCESYSTEM_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__UPLOAD_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__UPLOAD_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__ENDDATE_SOURCE_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__ENDDATE_SOURCE_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.exprKey_row30__MODIFIER_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row30__MODIFIER_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

				} // G_TM_B_001

				org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_14_1> fsi_tMap_14_1 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_14_1>(
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_"
								+ Thread.currentThread().getId() + "_" + pid
								+ "_tMap_14_1", 200000) {
					public SortableRow_tMap_14_1 createRowInstance() {
						return new SortableRow_tMap_14_1();
					}
				};

				fsi_tMap_14_1.initPut();

				class SortableRow_tMap_14_2 implements
						Comparable<SortableRow_tMap_14_2>,
						routines.system.IPersistableRow<SortableRow_tMap_14_2> { // G_TM_B_001

					boolean is__rejectedInnerJoin;

					BigDecimal exprKey_row33__PATIENT_NUM;
					String exprKey_row33__MODIFIER_CD;

					// row30
					BigDecimal copyOfout1__ENCOUNTER_NUM;
					BigDecimal copyOfout1__PATIENT_NUM;
					String copyOfout1__CONCEPT_CD;
					String copyOfout1__PROVIDER_ID;
					String copyOfout1__START_DATE;
					String copyOfout1__MODIFIER_CD;
					String copyOfout1__INSTANCE_NUM;
					String copyOfout1__VALTYPE_CD;
					String copyOfout1__TVAL_CHAR;
					Float copyOfout1__NVAL_NUM;
					String copyOfout1__VALUEFLAG_CD;
					String copyOfout1__QUANTITY_NUM;
					String copyOfout1__UNITS_CD;
					String copyOfout1__END_DATE;
					String copyOfout1__LOCATION_CD;
					String copyOfout1__OBSERVATION_BLOB;
					String copyOfout1__CONFIDENCE_NUM;
					java.util.Date copyOfout1__UPDATE_DATE;
					java.util.Date copyOfout1__DOWNLOAD_DATE;
					java.util.Date copyOfout1__IMPORT_DATE;
					String copyOfout1__SOURCESYSTEM_CD;
					String copyOfout1__UPLOAD_ID;
					String copyOfout1__ENDDATE_SOURCE_PATH;
					String row30__MODIFIER_PATH;
					String row30__MODIFIER_CD;
					String row30__NAME_CHAR;
					String row30__MODIFIER_BLOB;
					java.util.Date row30__UPDATE_DATE;
					java.util.Date row30__DOWNLOAD_DATE;
					java.util.Date row30__IMPORT_DATE;
					String row30__SOURCESYSTEM_CD;
					String row30__UPLOAD_ID;

					public void fillFrom(copyOfout1Struct copyOfout1,
							row30Struct row30,
							BigDecimal exprKey_row33__PATIENT_NUM,
							String exprKey_row33__MODIFIER_CD) {

						this.copyOfout1__ENCOUNTER_NUM = copyOfout1.ENCOUNTER_NUM;
						this.copyOfout1__PATIENT_NUM = copyOfout1.PATIENT_NUM;
						this.copyOfout1__CONCEPT_CD = copyOfout1.CONCEPT_CD;
						this.copyOfout1__PROVIDER_ID = copyOfout1.PROVIDER_ID;
						this.copyOfout1__START_DATE = copyOfout1.START_DATE;
						this.copyOfout1__MODIFIER_CD = copyOfout1.MODIFIER_CD;
						this.copyOfout1__INSTANCE_NUM = copyOfout1.INSTANCE_NUM;
						this.copyOfout1__VALTYPE_CD = copyOfout1.VALTYPE_CD;
						this.copyOfout1__TVAL_CHAR = copyOfout1.TVAL_CHAR;
						this.copyOfout1__NVAL_NUM = copyOfout1.NVAL_NUM;
						this.copyOfout1__VALUEFLAG_CD = copyOfout1.VALUEFLAG_CD;
						this.copyOfout1__QUANTITY_NUM = copyOfout1.QUANTITY_NUM;
						this.copyOfout1__UNITS_CD = copyOfout1.UNITS_CD;
						this.copyOfout1__END_DATE = copyOfout1.END_DATE;
						this.copyOfout1__LOCATION_CD = copyOfout1.LOCATION_CD;
						this.copyOfout1__OBSERVATION_BLOB = copyOfout1.OBSERVATION_BLOB;
						this.copyOfout1__CONFIDENCE_NUM = copyOfout1.CONFIDENCE_NUM;
						this.copyOfout1__UPDATE_DATE = copyOfout1.UPDATE_DATE;
						this.copyOfout1__DOWNLOAD_DATE = copyOfout1.DOWNLOAD_DATE;
						this.copyOfout1__IMPORT_DATE = copyOfout1.IMPORT_DATE;
						this.copyOfout1__SOURCESYSTEM_CD = copyOfout1.SOURCESYSTEM_CD;
						this.copyOfout1__UPLOAD_ID = copyOfout1.UPLOAD_ID;
						this.copyOfout1__ENDDATE_SOURCE_PATH = copyOfout1.ENDDATE_SOURCE_PATH;
						this.row30__MODIFIER_PATH = row30.MODIFIER_PATH;
						this.row30__MODIFIER_CD = row30.MODIFIER_CD;
						this.row30__NAME_CHAR = row30.NAME_CHAR;
						this.row30__MODIFIER_BLOB = row30.MODIFIER_BLOB;
						this.row30__UPDATE_DATE = row30.UPDATE_DATE;
						this.row30__DOWNLOAD_DATE = row30.DOWNLOAD_DATE;
						this.row30__IMPORT_DATE = row30.IMPORT_DATE;
						this.row30__SOURCESYSTEM_CD = row30.SOURCESYSTEM_CD;
						this.row30__UPLOAD_ID = row30.UPLOAD_ID;
						this.exprKey_row33__PATIENT_NUM = exprKey_row33__PATIENT_NUM;
						this.exprKey_row33__MODIFIER_CD = exprKey_row33__MODIFIER_CD;

					}

					public void copyDataTo(copyOfout1Struct copyOfout1,
							row30Struct row30) {

						copyOfout1.ENCOUNTER_NUM = this.copyOfout1__ENCOUNTER_NUM;
						copyOfout1.PATIENT_NUM = this.copyOfout1__PATIENT_NUM;
						copyOfout1.CONCEPT_CD = this.copyOfout1__CONCEPT_CD;
						copyOfout1.PROVIDER_ID = this.copyOfout1__PROVIDER_ID;
						copyOfout1.START_DATE = this.copyOfout1__START_DATE;
						copyOfout1.MODIFIER_CD = this.copyOfout1__MODIFIER_CD;
						copyOfout1.INSTANCE_NUM = this.copyOfout1__INSTANCE_NUM;
						copyOfout1.VALTYPE_CD = this.copyOfout1__VALTYPE_CD;
						copyOfout1.TVAL_CHAR = this.copyOfout1__TVAL_CHAR;
						copyOfout1.NVAL_NUM = this.copyOfout1__NVAL_NUM;
						copyOfout1.VALUEFLAG_CD = this.copyOfout1__VALUEFLAG_CD;
						copyOfout1.QUANTITY_NUM = this.copyOfout1__QUANTITY_NUM;
						copyOfout1.UNITS_CD = this.copyOfout1__UNITS_CD;
						copyOfout1.END_DATE = this.copyOfout1__END_DATE;
						copyOfout1.LOCATION_CD = this.copyOfout1__LOCATION_CD;
						copyOfout1.OBSERVATION_BLOB = this.copyOfout1__OBSERVATION_BLOB;
						copyOfout1.CONFIDENCE_NUM = this.copyOfout1__CONFIDENCE_NUM;
						copyOfout1.UPDATE_DATE = this.copyOfout1__UPDATE_DATE;
						copyOfout1.DOWNLOAD_DATE = this.copyOfout1__DOWNLOAD_DATE;
						copyOfout1.IMPORT_DATE = this.copyOfout1__IMPORT_DATE;
						copyOfout1.SOURCESYSTEM_CD = this.copyOfout1__SOURCESYSTEM_CD;
						copyOfout1.UPLOAD_ID = this.copyOfout1__UPLOAD_ID;
						copyOfout1.ENDDATE_SOURCE_PATH = this.copyOfout1__ENDDATE_SOURCE_PATH;
						row30.MODIFIER_PATH = this.row30__MODIFIER_PATH;
						row30.MODIFIER_CD = this.row30__MODIFIER_CD;
						row30.NAME_CHAR = this.row30__NAME_CHAR;
						row30.MODIFIER_BLOB = this.row30__MODIFIER_BLOB;
						row30.UPDATE_DATE = this.row30__UPDATE_DATE;
						row30.DOWNLOAD_DATE = this.row30__DOWNLOAD_DATE;
						row30.IMPORT_DATE = this.row30__IMPORT_DATE;
						row30.SOURCESYSTEM_CD = this.row30__SOURCESYSTEM_CD;
						row30.UPLOAD_ID = this.row30__UPLOAD_ID;

					}

					public String toString() {

						StringBuilder sb = new StringBuilder();
						sb.append(super.toString());
						sb.append("[");

						sb.append("copyOfout1__ENCOUNTER_NUM");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfout1__ENCOUNTER_NUM));

						sb.append(", ");

						sb.append("copyOfout1__PATIENT_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__PATIENT_NUM));

						sb.append(", ");

						sb.append("copyOfout1__CONCEPT_CD");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__CONCEPT_CD));

						sb.append(", ");

						sb.append("copyOfout1__PROVIDER_ID");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__PROVIDER_ID));

						sb.append(", ");

						sb.append("copyOfout1__START_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__START_DATE));

						sb.append(", ");

						sb.append("copyOfout1__MODIFIER_CD");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__MODIFIER_CD));

						sb.append(", ");

						sb.append("copyOfout1__INSTANCE_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__INSTANCE_NUM));

						sb.append(", ");

						sb.append("copyOfout1__VALTYPE_CD");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__VALTYPE_CD));

						sb.append(", ");

						sb.append("copyOfout1__TVAL_CHAR");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__TVAL_CHAR));

						sb.append(", ");

						sb.append("copyOfout1__NVAL_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__NVAL_NUM));

						sb.append(", ");

						sb.append("copyOfout1__VALUEFLAG_CD");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__VALUEFLAG_CD));

						sb.append(", ");

						sb.append("copyOfout1__QUANTITY_NUM");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__QUANTITY_NUM));

						sb.append(", ");

						sb.append("copyOfout1__UNITS_CD");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__UNITS_CD));

						sb.append(", ");

						sb.append("copyOfout1__END_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__END_DATE));

						sb.append(", ");

						sb.append("copyOfout1__LOCATION_CD");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__LOCATION_CD));

						sb.append(", ");

						sb.append("copyOfout1__OBSERVATION_BLOB");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfout1__OBSERVATION_BLOB));

						sb.append(", ");

						sb.append("copyOfout1__CONFIDENCE_NUM");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfout1__CONFIDENCE_NUM));

						sb.append(", ");

						sb.append("copyOfout1__UPDATE_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__UPDATE_DATE));

						sb.append(", ");

						sb.append("copyOfout1__DOWNLOAD_DATE");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfout1__DOWNLOAD_DATE));

						sb.append(", ");

						sb.append("copyOfout1__IMPORT_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__IMPORT_DATE));

						sb.append(", ");

						sb.append("copyOfout1__SOURCESYSTEM_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfout1__SOURCESYSTEM_CD));

						sb.append(", ");

						sb.append("copyOfout1__UPLOAD_ID");
						sb.append("=");
						sb.append(String.valueOf(this.copyOfout1__UPLOAD_ID));

						sb.append(", ");

						sb.append("copyOfout1__ENDDATE_SOURCE_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.copyOfout1__ENDDATE_SOURCE_PATH));

						sb.append(", ");

						sb.append("row30__MODIFIER_PATH");
						sb.append("=");
						sb.append(String.valueOf(this.row30__MODIFIER_PATH));

						sb.append(", ");

						sb.append("row30__MODIFIER_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row30__MODIFIER_CD));

						sb.append(", ");

						sb.append("row30__NAME_CHAR");
						sb.append("=");
						sb.append(String.valueOf(this.row30__NAME_CHAR));

						sb.append(", ");

						sb.append("row30__MODIFIER_BLOB");
						sb.append("=");
						sb.append(String.valueOf(this.row30__MODIFIER_BLOB));

						sb.append(", ");

						sb.append("row30__UPDATE_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row30__UPDATE_DATE));

						sb.append(", ");

						sb.append("row30__DOWNLOAD_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row30__DOWNLOAD_DATE));

						sb.append(", ");

						sb.append("row30__IMPORT_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row30__IMPORT_DATE));

						sb.append(", ");

						sb.append("row30__SOURCESYSTEM_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row30__SOURCESYSTEM_CD));

						sb.append(", ");

						sb.append("row30__UPLOAD_ID");
						sb.append("=");
						sb.append(String.valueOf(this.row30__UPLOAD_ID));

						sb.append("]");

						return sb.toString();
					}

					public int compareTo(SortableRow_tMap_14_2 other) {

						int returnValue = 0;

						returnValue = checkNullsAndCompare(
								this.exprKey_row33__PATIENT_NUM,
								other.exprKey_row33__PATIENT_NUM);
						if (returnValue != 0) {
							return returnValue;
						}

						returnValue = checkNullsAndCompare(
								this.exprKey_row33__MODIFIER_CD,
								other.exprKey_row33__MODIFIER_CD);
						if (returnValue != 0) {
							return returnValue;
						}

						return returnValue;
					}

					private int checkNullsAndCompare(Object object1,
							Object object2) {
						int returnValue = 0;
						if (object1 instanceof Comparable
								&& object2 instanceof Comparable) {
							returnValue = ((Comparable) object1)
									.compareTo(object2);
						} else if (object1 != null && object2 != null) {
							returnValue = compareStrings(object1.toString(),
									object2.toString());
						} else if (object1 == null && object2 != null) {
							returnValue = 1;
						} else if (object1 != null && object2 == null) {
							returnValue = -1;
						} else {
							returnValue = 0;
						}

						return returnValue;
					}

					private int compareStrings(String string1, String string2) {
						return string1.compareTo(string2);
					}

					public void readData(ObjectInputStream dis) {

						synchronized (row30Struct.commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

							try {

								int length = 0;

								this.is__rejectedInnerJoin = dis.readBoolean();

								this.copyOfout1__ENCOUNTER_NUM = (BigDecimal) dis
										.readObject();

								this.copyOfout1__PATIENT_NUM = (BigDecimal) dis
										.readObject();

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__CONCEPT_CD = null;
								} else {
									if (length > row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__CONCEPT_CD = new String(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__PROVIDER_ID = null;
								} else {
									if (length > row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__PROVIDER_ID = new String(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__START_DATE = null;
								} else {
									if (length > row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__START_DATE = new String(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__MODIFIER_CD = null;
								} else {
									if (length > row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__MODIFIER_CD = new String(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__INSTANCE_NUM = null;
								} else {
									if (length > row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__INSTANCE_NUM = new String(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__VALTYPE_CD = null;
								} else {
									if (length > row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__VALTYPE_CD = new String(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__TVAL_CHAR = null;
								} else {
									if (length > row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__TVAL_CHAR = new String(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.copyOfout1__NVAL_NUM = null;
								} else {
									this.copyOfout1__NVAL_NUM = dis.readFloat();
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__VALUEFLAG_CD = null;
								} else {
									if (length > row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__VALUEFLAG_CD = new String(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__QUANTITY_NUM = null;
								} else {
									if (length > row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__QUANTITY_NUM = new String(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__UNITS_CD = null;
								} else {
									if (length > row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__UNITS_CD = new String(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__END_DATE = null;
								} else {
									if (length > row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__END_DATE = new String(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__LOCATION_CD = null;
								} else {
									if (length > row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__LOCATION_CD = new String(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__OBSERVATION_BLOB = null;
								} else {
									if (length > row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__OBSERVATION_BLOB = new String(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__CONFIDENCE_NUM = null;
								} else {
									if (length > row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__CONFIDENCE_NUM = new String(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.copyOfout1__UPDATE_DATE = null;
								} else {
									this.copyOfout1__UPDATE_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.copyOfout1__DOWNLOAD_DATE = null;
								} else {
									this.copyOfout1__DOWNLOAD_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.copyOfout1__IMPORT_DATE = null;
								} else {
									this.copyOfout1__IMPORT_DATE = new Date(
											dis.readLong());
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__SOURCESYSTEM_CD = null;
								} else {
									if (length > row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__SOURCESYSTEM_CD = new String(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__UPLOAD_ID = null;
								} else {
									if (length > row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__UPLOAD_ID = new String(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.copyOfout1__ENDDATE_SOURCE_PATH = null;
								} else {
									if (length > row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.copyOfout1__ENDDATE_SOURCE_PATH = new String(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row30__MODIFIER_PATH = null;
								} else {
									if (length > row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row30__MODIFIER_PATH = new String(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row30__MODIFIER_CD = null;
								} else {
									if (length > row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row30__MODIFIER_CD = new String(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row30__NAME_CHAR = null;
								} else {
									if (length > row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row30__NAME_CHAR = new String(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row30__MODIFIER_BLOB = null;
								} else {
									if (length > row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row30__MODIFIER_BLOB = new String(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.row30__UPDATE_DATE = null;
								} else {
									this.row30__UPDATE_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.row30__DOWNLOAD_DATE = null;
								} else {
									this.row30__DOWNLOAD_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.row30__IMPORT_DATE = null;
								} else {
									this.row30__IMPORT_DATE = new Date(
											dis.readLong());
								}

								length = dis.readInt();
								if (length == -1) {
									this.row30__SOURCESYSTEM_CD = null;
								} else {
									if (length > row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row30__SOURCESYSTEM_CD = new String(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row30__UPLOAD_ID = null;
								} else {
									if (length > row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row30__UPLOAD_ID = new String(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								this.exprKey_row33__PATIENT_NUM = (BigDecimal) dis
										.readObject();

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row33__MODIFIER_CD = null;
								} else {
									if (length > row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.exprKey_row33__MODIFIER_CD = new String(
											row30Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

							} catch (IOException e) {
								throw new RuntimeException(e);

							} catch (ClassNotFoundException eCNFE) {
								throw new RuntimeException(eCNFE);

							}

						}
					}

					public void writeData(ObjectOutputStream dos) {
						try {

							dos.writeBoolean(this.is__rejectedInnerJoin);

							dos.writeObject(this.copyOfout1__ENCOUNTER_NUM);

							dos.writeObject(this.copyOfout1__PATIENT_NUM);

							if (this.copyOfout1__CONCEPT_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__CONCEPT_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__PROVIDER_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__PROVIDER_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__START_DATE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__START_DATE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__MODIFIER_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__MODIFIER_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__INSTANCE_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__INSTANCE_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__VALTYPE_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__VALTYPE_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__TVAL_CHAR == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__TVAL_CHAR
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__NVAL_NUM == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeFloat(this.copyOfout1__NVAL_NUM);
							}

							if (this.copyOfout1__VALUEFLAG_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__VALUEFLAG_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__QUANTITY_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__QUANTITY_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__UNITS_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__UNITS_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__END_DATE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__END_DATE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__LOCATION_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__LOCATION_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__OBSERVATION_BLOB == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__OBSERVATION_BLOB
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__CONFIDENCE_NUM == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__CONFIDENCE_NUM
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__UPDATE_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.copyOfout1__UPDATE_DATE
										.getTime());
							}

							if (this.copyOfout1__DOWNLOAD_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.copyOfout1__DOWNLOAD_DATE
										.getTime());
							}

							if (this.copyOfout1__IMPORT_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.copyOfout1__IMPORT_DATE
										.getTime());
							}

							if (this.copyOfout1__SOURCESYSTEM_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__SOURCESYSTEM_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__UPLOAD_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__UPLOAD_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.copyOfout1__ENDDATE_SOURCE_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.copyOfout1__ENDDATE_SOURCE_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row30__MODIFIER_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row30__MODIFIER_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row30__MODIFIER_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row30__MODIFIER_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row30__NAME_CHAR == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row30__NAME_CHAR
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row30__MODIFIER_BLOB == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row30__MODIFIER_BLOB
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row30__UPDATE_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row30__UPDATE_DATE.getTime());
							}

							if (this.row30__DOWNLOAD_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row30__DOWNLOAD_DATE
										.getTime());
							}

							if (this.row30__IMPORT_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row30__IMPORT_DATE.getTime());
							}

							if (this.row30__SOURCESYSTEM_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row30__SOURCESYSTEM_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row30__UPLOAD_ID == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row30__UPLOAD_ID
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							dos.writeObject(this.exprKey_row33__PATIENT_NUM);

							if (this.exprKey_row33__MODIFIER_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row33__MODIFIER_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

				} // G_TM_B_001

				org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_14_2> fsi_tMap_14_2 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_14_2>(
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_"
								+ Thread.currentThread().getId() + "_" + pid
								+ "_tMap_14_2", 200000) {
					public SortableRow_tMap_14_2 createRowInstance() {
						return new SortableRow_tMap_14_2();
					}
				};

				fsi_tMap_14_2.initPut();

				/**
				 * [tMap_14_TMAP_OUT begin ] stop
				 */

				/**
				 * [tMap_15_TMAP_IN begin ] start
				 */

				ok_Hash.put("tMap_15_TMAP_IN", false);
				start_Hash.put("tMap_15_TMAP_IN", System.currentTimeMillis());

				currentVirtualComponent = "tMap_15";

				currentComponent = "tMap_15_TMAP_IN";

				int tos_count_tMap_15_TMAP_IN = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_15_TMAP_IN__Struct {
				}
				Var__tMap_15_TMAP_IN__Struct Var__tMap_15_TMAP_IN = new Var__tMap_15_TMAP_IN__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfout1Struct copyOfout1_tmp = new copyOfout1Struct();
				// ###############################

				List<copyOfout1Struct> copyOfout1_List = new java.util.ArrayList<copyOfout1Struct>();

				/**
				 * [tMap_15_TMAP_IN begin ] stop
				 */

				/**
				 * [tMap_15_TMAP_IN main ] start
				 */

				currentVirtualComponent = "tMap_15";

				currentComponent = "tMap_15_TMAP_IN";

				boolean hasCasePrimitiveKeyWithNull_tMap_15_TMAP_IN = false;

				fsi_tMap_15_1.endPut();

				if (copyOfto_obs_fct == null) {
					copyOfto_obs_fct = new copyOfto_obs_fctStruct();
				}

				// ###############################
				// # Input tables (lookups)
				boolean rejectedInnerJoin_tMap_15_TMAP_IN = false;
				boolean mainRowRejected_tMap_15_TMAP_IN = false;

				// /////////////////////////////////////////////
				// Starting Lookup Table "row31"
				// /////////////////////////////////////////////

				SortableRow_tMap_15_1 rsc_tMap_15_1;

				tHash_Lookup_row31.initGet();

				fsi_tMap_15_1.initGet();

				// TEST firstLookupIsPersistentSorted=true
				// isFirstPersistentSortedTable=true

				rejectedInnerJoin_tMap_15_TMAP_IN = false;

				while (fsi_tMap_15_1.hasNext()) { // G_TM_M_250 loop "1"

					rsc_tMap_15_1 = (SortableRow_tMap_15_1) fsi_tMap_15_1
							.next();
					rsc_tMap_15_1.copyDataTo(copyOfto_obs_fct);

					rejectedInnerJoin_tMap_15_TMAP_IN = rsc_tMap_15_1.is__rejectedInnerJoin;

					boolean forceLooprow31 = false;

					row31Struct row31ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_15_TMAP_IN) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_15_TMAP_IN = false;

						row31HashKey.MODIFIER_PATH = rsc_tMap_15_1.exprKey_row31__MODIFIER_PATH;

						tHash_Lookup_row31.lookup(row31HashKey);

						if (!tHash_Lookup_row31.hasNext()) { // G_TM_M_090

							rejectedInnerJoin_tMap_15_TMAP_IN = true;

						} // G_TM_M_090

					} // G_TM_M_020

					row31Struct row31 = null;

					row31Struct fromLookup_row31 = null;
					row31 = row31Default;

					if (tHash_Lookup_row31 != null
							&& tHash_Lookup_row31.hasNext()) { // G 099

						fromLookup_row31 = tHash_Lookup_row31.next();

					} // G 099

					if (fromLookup_row31 != null) {
						row31 = fromLookup_row31;
					}

					BigDecimal exprKey_row32__PATIENT_NUM = null;

					String exprKey_row32__MODIFIER_CD = null;

					if (!rejectedInnerJoin_tMap_15_TMAP_IN) { // G_TM_M_255

						exprKey_row32__PATIENT_NUM = copyOfto_obs_fct.PATIENT_NUM;

						exprKey_row32__MODIFIER_CD = row31.MODIFIER_CD;

					} // G_TM_M_255

					SortableRow_tMap_15_2 rsc_tMap_15_2 = new SortableRow_tMap_15_2();

					rsc_tMap_15_2.fillFrom(copyOfto_obs_fct, row31,
							exprKey_row32__PATIENT_NUM,
							exprKey_row32__MODIFIER_CD);

					rsc_tMap_15_2.is__rejectedInnerJoin = rejectedInnerJoin_tMap_15_TMAP_IN;

					rejectedInnerJoin_tMap_15_TMAP_IN = false;

					// Sort and store in KeyFile(s) and DataFile(s)
					fsi_tMap_15_2.put(rsc_tMap_15_2);

				} // G_TM_M_250 loop "1"

				fsi_tMap_15_1.endGet();

				fsi_tMap_15_2.endPut();

				// /////////////////////////////////////////////
				// Starting Lookup Table "row32"
				// /////////////////////////////////////////////

				SortableRow_tMap_15_2 rsc_tMap_15_2;

				tHash_Lookup_row32.initGet();

				fsi_tMap_15_2.initGet();

				// row31Struct row31 = new row31Struct();

				row31Struct row31 = new row31Struct();

				// TEST firstLookupIsPersistentSorted=true
				// isFirstPersistentSortedTable=false

				rejectedInnerJoin_tMap_15_TMAP_IN = false;

				while (fsi_tMap_15_2.hasNext()) { // G_TM_M_250 loop "2"

					// CALL close loop of lookup '2'

					rsc_tMap_15_2 = (SortableRow_tMap_15_2) fsi_tMap_15_2
							.next();
					rsc_tMap_15_2.copyDataTo(copyOfto_obs_fct, row31);

					rejectedInnerJoin_tMap_15_TMAP_IN = rsc_tMap_15_2.is__rejectedInnerJoin;

					boolean forceLooprow32 = false;

					row32Struct row32ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_15_TMAP_IN) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_15_TMAP_IN = false;

						row32HashKey.PATIENT_NUM = rsc_tMap_15_2.exprKey_row32__PATIENT_NUM;

						row32HashKey.MODIFIER_CD = rsc_tMap_15_2.exprKey_row32__MODIFIER_CD;

						tHash_Lookup_row32.lookup(row32HashKey);

						if (!tHash_Lookup_row32.hasNext()) { // G_TM_M_090

							rejectedInnerJoin_tMap_15_TMAP_IN = true;

						} // G_TM_M_090

					} // G_TM_M_020

					row32Struct row32 = null;

					row32Struct fromLookup_row32 = null;
					row32 = row32Default;

					if (tHash_Lookup_row32 != null
							&& tHash_Lookup_row32.hasNext()) { // G 099

						fromLookup_row32 = tHash_Lookup_row32.next();

					} // G 099

					if (fromLookup_row32 != null) {
						row32 = fromLookup_row32;
					}

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_15_TMAP_IN__Struct Var = Var__tMap_15_TMAP_IN;// ###############################
						// ###############################
						// # Output tables

						copyOfout1 = null;
						copyOfout1_List.clear();

						if (!rejectedInnerJoin_tMap_15_TMAP_IN) {

							// # Output table : 'copyOfout1'
							copyOfout1_tmp.ENCOUNTER_NUM = copyOfto_obs_fct.ENCOUNTER_NUM;
							copyOfout1_tmp.PATIENT_NUM = copyOfto_obs_fct.PATIENT_NUM;
							copyOfout1_tmp.CONCEPT_CD = copyOfto_obs_fct.CONCEPT_CD;
							copyOfout1_tmp.PROVIDER_ID = copyOfto_obs_fct.PROVIDER_ID;
							copyOfout1_tmp.START_DATE = row32.START_DATE;
							copyOfout1_tmp.MODIFIER_CD = copyOfto_obs_fct.MODIFIER_CD;
							copyOfout1_tmp.INSTANCE_NUM = copyOfto_obs_fct.INSTANCE_NUM;
							copyOfout1_tmp.VALTYPE_CD = copyOfto_obs_fct.VALTYPE_CD;
							copyOfout1_tmp.TVAL_CHAR = copyOfto_obs_fct.TVAL_CHAR;
							copyOfout1_tmp.NVAL_NUM = copyOfto_obs_fct.NVAL_NUM;
							copyOfout1_tmp.VALUEFLAG_CD = copyOfto_obs_fct.VALUEFLAG_CD;
							copyOfout1_tmp.QUANTITY_NUM = copyOfto_obs_fct.QUANTITY_NUM;
							copyOfout1_tmp.UNITS_CD = copyOfto_obs_fct.UNITS_CD;
							copyOfout1_tmp.END_DATE = copyOfto_obs_fct.END_DATE;
							copyOfout1_tmp.LOCATION_CD = copyOfto_obs_fct.LOCATION_CD;
							copyOfout1_tmp.OBSERVATION_BLOB = copyOfto_obs_fct.OBSERVATION_BLOB;
							copyOfout1_tmp.CONFIDENCE_NUM = copyOfto_obs_fct.CONFIDENCE_NUM;
							copyOfout1_tmp.UPDATE_DATE = copyOfto_obs_fct.UPDATE_DATE;
							copyOfout1_tmp.DOWNLOAD_DATE = copyOfto_obs_fct.DOWNLOAD_DATE;
							copyOfout1_tmp.IMPORT_DATE = copyOfto_obs_fct.IMPORT_DATE;
							copyOfout1_tmp.SOURCESYSTEM_CD = copyOfto_obs_fct.SOURCESYSTEM_CD;
							copyOfout1_tmp.UPLOAD_ID = copyOfto_obs_fct.UPLOAD_ID;
							copyOfout1_tmp.ENDDATE_SOURCE_PATH = copyOfto_obs_fct.ENDDATE_SOURCE_PATH;
							copyOfout1_List.add(copyOfout1_tmp);
							copyOfout1 = copyOfout1_tmp;
						} // closing inner join bracket (1)
							// ###### START REJECTS #####

						// # Output reject table : 'copyOfout3'
						// # Filter conditions
						if (rejectedInnerJoin_tMap_15_TMAP_IN) {
							copyOfout1_tmp = new copyOfout1Struct();

							copyOfout1_tmp.ENCOUNTER_NUM = copyOfto_obs_fct.ENCOUNTER_NUM;
							copyOfout1_tmp.PATIENT_NUM = copyOfto_obs_fct.PATIENT_NUM;
							copyOfout1_tmp.CONCEPT_CD = copyOfto_obs_fct.CONCEPT_CD;
							copyOfout1_tmp.PROVIDER_ID = copyOfto_obs_fct.PROVIDER_ID;
							copyOfout1_tmp.START_DATE = copyOfto_obs_fct.START_DATE;
							copyOfout1_tmp.MODIFIER_CD = copyOfto_obs_fct.MODIFIER_CD;
							copyOfout1_tmp.INSTANCE_NUM = copyOfto_obs_fct.INSTANCE_NUM;
							copyOfout1_tmp.VALTYPE_CD = copyOfto_obs_fct.VALTYPE_CD;
							copyOfout1_tmp.TVAL_CHAR = copyOfto_obs_fct.TVAL_CHAR;
							copyOfout1_tmp.NVAL_NUM = copyOfto_obs_fct.NVAL_NUM;
							copyOfout1_tmp.VALUEFLAG_CD = copyOfto_obs_fct.VALUEFLAG_CD;
							copyOfout1_tmp.QUANTITY_NUM = copyOfto_obs_fct.QUANTITY_NUM;
							copyOfout1_tmp.UNITS_CD = copyOfto_obs_fct.UNITS_CD;
							copyOfout1_tmp.END_DATE = copyOfto_obs_fct.END_DATE;
							copyOfout1_tmp.LOCATION_CD = copyOfto_obs_fct.LOCATION_CD;
							copyOfout1_tmp.OBSERVATION_BLOB = copyOfto_obs_fct.OBSERVATION_BLOB;
							copyOfout1_tmp.CONFIDENCE_NUM = copyOfto_obs_fct.CONFIDENCE_NUM;
							copyOfout1_tmp.UPDATE_DATE = copyOfto_obs_fct.UPDATE_DATE;
							copyOfout1_tmp.DOWNLOAD_DATE = copyOfto_obs_fct.DOWNLOAD_DATE;
							copyOfout1_tmp.IMPORT_DATE = copyOfto_obs_fct.IMPORT_DATE;
							copyOfout1_tmp.SOURCESYSTEM_CD = copyOfto_obs_fct.SOURCESYSTEM_CD;
							copyOfout1_tmp.UPLOAD_ID = copyOfto_obs_fct.UPLOAD_ID;
							copyOfout1_tmp.ENDDATE_SOURCE_PATH = copyOfto_obs_fct.ENDDATE_SOURCE_PATH;
							copyOfout1_List.add(copyOfout1_tmp);
							copyOfout1 = copyOfout1_tmp;
						} // closing filter/reject
							// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_15_TMAP_IN = false;

					tos_count_tMap_15_TMAP_IN++;

					/**
					 * [tMap_15_TMAP_IN main ] stop
					 */
					// Start of branch "copyOfout1"
					if (copyOfout1 != null) {
						// start of joined table loop
						for (copyOfout1Struct cur_copyOfout1 : copyOfout1_List) {
							copyOfout1 = cur_copyOfout1;

							/**
							 * [tMap_14_TMAP_OUT main ] start
							 */

							currentVirtualComponent = "tMap_14";

							currentComponent = "tMap_14_TMAP_OUT";

							boolean hasCasePrimitiveKeyWithNull_tMap_14_TMAP_OUT = false;

							hasCasePrimitiveKeyWithNull_tMap_14_TMAP_OUT = false;

							String exprKey_row30__MODIFIER_PATH = copyOfout1.ENDDATE_SOURCE_PATH;

							SortableRow_tMap_14_1 sortableRow_tMap_14_1 = fsi_tMap_14_1
									.getNextFreeRow();

							sortableRow_tMap_14_1.fillFrom(copyOfout1,
									exprKey_row30__MODIFIER_PATH);

							fsi_tMap_14_1.put(sortableRow_tMap_14_1);

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_14_TMAP_OUT = false;
							boolean mainRowRejected_tMap_14_TMAP_OUT = false;

							// ###############################

							tos_count_tMap_14_TMAP_OUT++;

							/**
							 * [tMap_14_TMAP_OUT main ] stop
							 */
						} // end of joined table loop
						copyOfout1_List.clear();

					} // End of branch "copyOfout1"

				} // G_TM_M_250 close loop read file data '2'

				/**
				 * [tMap_15_TMAP_IN end ] start
				 */

				currentVirtualComponent = "tMap_15";

				currentComponent = "tMap_15_TMAP_IN";

				// ###############################
				// # Lookup hashes releasing
				fsi_tMap_15_2.endGet();

				if (tHash_Lookup_row31 != null) {
					tHash_Lookup_row31.endGet();
				}
				globalMap.remove("tHash_Lookup_row31");

				if (tHash_Lookup_row32 != null) {
					tHash_Lookup_row32.endGet();
				}
				globalMap.remove("tHash_Lookup_row32");

				// ###############################

				ok_Hash.put("tMap_15_TMAP_IN", true);
				end_Hash.put("tMap_15_TMAP_IN", System.currentTimeMillis());

				/**
				 * [tMap_15_TMAP_IN end ] stop
				 */

				/**
				 * [tMap_14_TMAP_OUT end ] start
				 */

				currentVirtualComponent = "tMap_14";

				currentComponent = "tMap_14_TMAP_OUT";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_14_TMAP_OUT", true);
				end_Hash.put("tMap_14_TMAP_OUT", System.currentTimeMillis());

				/**
				 * [tMap_14_TMAP_OUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_24 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_24", false);
				start_Hash.put("tFileOutputDelimited_24",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_24";

				int tos_count_tFileOutputDelimited_24 = 0;

				String fileName_tFileOutputDelimited_24 = "";
				fileName_tFileOutputDelimited_24 = (new java.io.File(
						context.folderMain + context.folderOutput
								+ "/patient_data2.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_24 = null;
				String extension_tFileOutputDelimited_24 = null;
				String directory_tFileOutputDelimited_24 = null;
				if ((fileName_tFileOutputDelimited_24.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_24.lastIndexOf(".") < fileName_tFileOutputDelimited_24
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_24 = fileName_tFileOutputDelimited_24;
						extension_tFileOutputDelimited_24 = "";
					} else {
						fullName_tFileOutputDelimited_24 = fileName_tFileOutputDelimited_24
								.substring(0, fileName_tFileOutputDelimited_24
										.lastIndexOf("."));
						extension_tFileOutputDelimited_24 = fileName_tFileOutputDelimited_24
								.substring(fileName_tFileOutputDelimited_24
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_24 = fileName_tFileOutputDelimited_24
							.substring(0, fileName_tFileOutputDelimited_24
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_24.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_24 = fileName_tFileOutputDelimited_24
								.substring(0, fileName_tFileOutputDelimited_24
										.lastIndexOf("."));
						extension_tFileOutputDelimited_24 = fileName_tFileOutputDelimited_24
								.substring(fileName_tFileOutputDelimited_24
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_24 = fileName_tFileOutputDelimited_24;
						extension_tFileOutputDelimited_24 = "";
					}
					directory_tFileOutputDelimited_24 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_24 = true;
				java.io.File filetFileOutputDelimited_24 = new java.io.File(
						fileName_tFileOutputDelimited_24);
				globalMap.put("tFileOutputDelimited_24_FILE_NAME",
						fileName_tFileOutputDelimited_24);

				if (filetFileOutputDelimited_24.exists()) {
					isFileGenerated_tFileOutputDelimited_24 = false;
				}

				String[] headColutFileOutputDelimited_24 = new String[22];
				class CSVBasicSet_tFileOutputDelimited_24 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_24[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_24 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_24[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_24[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_24 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_24[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_24[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_24 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_24[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_24 = 0;
				int splitEvery_tFileOutputDelimited_24 = 1000;
				int splitedFileNo_tFileOutputDelimited_24 = 0;
				int currentRow_tFileOutputDelimited_24 = 0;

				CSVBasicSet_tFileOutputDelimited_24 csvSettings_tFileOutputDelimited_24 = new CSVBasicSet_tFileOutputDelimited_24();
				csvSettings_tFileOutputDelimited_24.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_24.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_24.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_24 != null
						&& directory_tFileOutputDelimited_24.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_24 = new java.io.File(
							directory_tFileOutputDelimited_24);
					if (!dir_tFileOutputDelimited_24.exists()) {

						dir_tFileOutputDelimited_24.mkdirs();

					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_24 = null;

				CsvWritertFileOutputDelimited_24 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_24,
												true), "UTF-8")));
				CsvWritertFileOutputDelimited_24
						.setSeparator(csvSettings_tFileOutputDelimited_24
								.getFieldDelim());

				if (!csvSettings_tFileOutputDelimited_24
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_24.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_24.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_24
							.setLineEnd(""
									+ csvSettings_tFileOutputDelimited_24
											.getRowDelim());
				}

				if (filetFileOutputDelimited_24.length() == 0) {

					headColutFileOutputDelimited_24[0] = "ENCOUNTER_NUM";

					headColutFileOutputDelimited_24[1] = "PATIENT_NUM";

					headColutFileOutputDelimited_24[2] = "CONCEPT_CD";

					headColutFileOutputDelimited_24[3] = "PROVIDER_ID";

					headColutFileOutputDelimited_24[4] = "START_DATE";

					headColutFileOutputDelimited_24[5] = "MODIFIER_CD";

					headColutFileOutputDelimited_24[6] = "INSTANCE_NUM";

					headColutFileOutputDelimited_24[7] = "VALTYPE_CD";

					headColutFileOutputDelimited_24[8] = "TVAL_CHAR";

					headColutFileOutputDelimited_24[9] = "NVAL_NUM";

					headColutFileOutputDelimited_24[10] = "VALUEFLAG_CD";

					headColutFileOutputDelimited_24[11] = "QUANTITY_NUM";

					headColutFileOutputDelimited_24[12] = "UNITS_CD";

					headColutFileOutputDelimited_24[13] = "END_DATE";

					headColutFileOutputDelimited_24[14] = "LOCATION_CD";

					headColutFileOutputDelimited_24[15] = "OBSERVATION_BLOB";

					headColutFileOutputDelimited_24[16] = "CONFIDENCE_NUM";

					headColutFileOutputDelimited_24[17] = "UPDATE_DATE";

					headColutFileOutputDelimited_24[18] = "DOWNLOAD_DATE";

					headColutFileOutputDelimited_24[19] = "IMPORT_DATE";

					headColutFileOutputDelimited_24[20] = "SOURCESYSTEM_CD";

					headColutFileOutputDelimited_24[21] = "UPLOAD_ID";

					CsvWritertFileOutputDelimited_24
							.writeNext(headColutFileOutputDelimited_24);
					CsvWritertFileOutputDelimited_24.flush();

				}

				CsvWritertFileOutputDelimited_24
						.setEscapeChar(csvSettings_tFileOutputDelimited_24
								.getEscapeChar());
				CsvWritertFileOutputDelimited_24
						.setQuoteChar(csvSettings_tFileOutputDelimited_24
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_24
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_24",
						CsvWritertFileOutputDelimited_24);

				resourceMap.put("nb_line_tFileOutputDelimited_24",
						nb_line_tFileOutputDelimited_24);

				/**
				 * [tFileOutputDelimited_24 begin ] stop
				 */

				/**
				 * [tJavaRow_3 begin ] start
				 */

				ok_Hash.put("tJavaRow_3", false);
				start_Hash.put("tJavaRow_3", System.currentTimeMillis());

				currentComponent = "tJavaRow_3";

				int tos_count_tJavaRow_3 = 0;

				int nb_line_tJavaRow_3 = 0;

				/**
				 * [tJavaRow_3 begin ] stop
				 */

				/**
				 * [tMap_14_TMAP_IN begin ] start
				 */

				ok_Hash.put("tMap_14_TMAP_IN", false);
				start_Hash.put("tMap_14_TMAP_IN", System.currentTimeMillis());

				currentVirtualComponent = "tMap_14";

				currentComponent = "tMap_14_TMAP_IN";

				int tos_count_tMap_14_TMAP_IN = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_14_TMAP_IN__Struct {
				}
				Var__tMap_14_TMAP_IN__Struct Var__tMap_14_TMAP_IN = new Var__tMap_14_TMAP_IN__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfasdddStruct copyOfasddd_tmp = new copyOfasdddStruct();
				// ###############################

				List<copyOfasdddStruct> copyOfasddd_List = new java.util.ArrayList<copyOfasdddStruct>();

				/**
				 * [tMap_14_TMAP_IN begin ] stop
				 */

				/**
				 * [tMap_14_TMAP_IN main ] start
				 */

				currentVirtualComponent = "tMap_14";

				currentComponent = "tMap_14_TMAP_IN";

				boolean hasCasePrimitiveKeyWithNull_tMap_14_TMAP_IN = false;

				fsi_tMap_14_1.endPut();

				if (copyOfout1 == null) {
					copyOfout1 = new copyOfout1Struct();
				}

				// ###############################
				// # Input tables (lookups)
				boolean rejectedInnerJoin_tMap_14_TMAP_IN = false;
				boolean mainRowRejected_tMap_14_TMAP_IN = false;

				// /////////////////////////////////////////////
				// Starting Lookup Table "row30"
				// /////////////////////////////////////////////

				SortableRow_tMap_14_1 rsc_tMap_14_1;

				tHash_Lookup_row30.initGet();

				fsi_tMap_14_1.initGet();

				// TEST firstLookupIsPersistentSorted=true
				// isFirstPersistentSortedTable=true

				rejectedInnerJoin_tMap_14_TMAP_IN = false;

				while (fsi_tMap_14_1.hasNext()) { // G_TM_M_250 loop "1"

					rsc_tMap_14_1 = (SortableRow_tMap_14_1) fsi_tMap_14_1
							.next();
					rsc_tMap_14_1.copyDataTo(copyOfout1);

					rejectedInnerJoin_tMap_14_TMAP_IN = rsc_tMap_14_1.is__rejectedInnerJoin;

					boolean forceLooprow30 = false;

					row30Struct row30ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_14_TMAP_IN) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_14_TMAP_IN = false;

						row30HashKey.MODIFIER_PATH = rsc_tMap_14_1.exprKey_row30__MODIFIER_PATH;

						tHash_Lookup_row30.lookup(row30HashKey);

						if (!tHash_Lookup_row30.hasNext()) { // G_TM_M_090

							rejectedInnerJoin_tMap_14_TMAP_IN = true;

						} // G_TM_M_090

					} // G_TM_M_020

					row30Struct row30 = null;

					row30Struct fromLookup_row30 = null;
					row30 = row30Default;

					if (tHash_Lookup_row30 != null
							&& tHash_Lookup_row30.hasNext()) { // G 099

						fromLookup_row30 = tHash_Lookup_row30.next();

					} // G 099

					if (fromLookup_row30 != null) {
						row30 = fromLookup_row30;
					}

					BigDecimal exprKey_row33__PATIENT_NUM = null;

					String exprKey_row33__MODIFIER_CD = null;

					if (!rejectedInnerJoin_tMap_14_TMAP_IN) { // G_TM_M_255

						exprKey_row33__PATIENT_NUM = copyOfout1.PATIENT_NUM;

						exprKey_row33__MODIFIER_CD = row30.MODIFIER_CD;

					} // G_TM_M_255

					SortableRow_tMap_14_2 rsc_tMap_14_2 = new SortableRow_tMap_14_2();

					rsc_tMap_14_2.fillFrom(copyOfout1, row30,
							exprKey_row33__PATIENT_NUM,
							exprKey_row33__MODIFIER_CD);

					rsc_tMap_14_2.is__rejectedInnerJoin = rejectedInnerJoin_tMap_14_TMAP_IN;

					rejectedInnerJoin_tMap_14_TMAP_IN = false;

					// Sort and store in KeyFile(s) and DataFile(s)
					fsi_tMap_14_2.put(rsc_tMap_14_2);

				} // G_TM_M_250 loop "1"

				fsi_tMap_14_1.endGet();

				fsi_tMap_14_2.endPut();

				// /////////////////////////////////////////////
				// Starting Lookup Table "row33"
				// /////////////////////////////////////////////

				SortableRow_tMap_14_2 rsc_tMap_14_2;

				tHash_Lookup_row33.initGet();

				fsi_tMap_14_2.initGet();

				// row30Struct row30 = new row30Struct();

				row30Struct row30 = new row30Struct();

				// TEST firstLookupIsPersistentSorted=true
				// isFirstPersistentSortedTable=false

				rejectedInnerJoin_tMap_14_TMAP_IN = false;

				while (fsi_tMap_14_2.hasNext()) { // G_TM_M_250 loop "2"

					// CALL close loop of lookup '2'

					rsc_tMap_14_2 = (SortableRow_tMap_14_2) fsi_tMap_14_2
							.next();
					rsc_tMap_14_2.copyDataTo(copyOfout1, row30);

					rejectedInnerJoin_tMap_14_TMAP_IN = rsc_tMap_14_2.is__rejectedInnerJoin;

					boolean forceLooprow33 = false;

					row33Struct row33ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_14_TMAP_IN) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_14_TMAP_IN = false;

						row33HashKey.PATIENT_NUM = rsc_tMap_14_2.exprKey_row33__PATIENT_NUM;

						row33HashKey.MODIFIER_CD = rsc_tMap_14_2.exprKey_row33__MODIFIER_CD;

						tHash_Lookup_row33.lookup(row33HashKey);

						if (!tHash_Lookup_row33.hasNext()) { // G_TM_M_090

							rejectedInnerJoin_tMap_14_TMAP_IN = true;

						} // G_TM_M_090

					} // G_TM_M_020

					row33Struct row33 = null;

					row33Struct fromLookup_row33 = null;
					row33 = row33Default;

					if (tHash_Lookup_row33 != null
							&& tHash_Lookup_row33.hasNext()) { // G 099

						fromLookup_row33 = tHash_Lookup_row33.next();

					} // G 099

					if (fromLookup_row33 != null) {
						row33 = fromLookup_row33;
					}

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_14_TMAP_IN__Struct Var = Var__tMap_14_TMAP_IN;// ###############################
						// ###############################
						// # Output tables

						copyOfasddd = null;
						copyOfasddd_List.clear();

						if (!rejectedInnerJoin_tMap_14_TMAP_IN) {

							// # Output table : 'copyOfasddd'
							copyOfasddd_tmp.ENCOUNTER_NUM = copyOfout1.ENCOUNTER_NUM;
							copyOfasddd_tmp.PATIENT_NUM = copyOfout1.PATIENT_NUM;
							copyOfasddd_tmp.CONCEPT_CD = copyOfout1.CONCEPT_CD;
							copyOfasddd_tmp.PROVIDER_ID = copyOfout1.PROVIDER_ID;
							copyOfasddd_tmp.START_DATE = copyOfout1.START_DATE;
							copyOfasddd_tmp.MODIFIER_CD = copyOfout1.MODIFIER_CD;
							copyOfasddd_tmp.INSTANCE_NUM = copyOfout1.INSTANCE_NUM;
							copyOfasddd_tmp.VALTYPE_CD = copyOfout1.VALTYPE_CD;
							copyOfasddd_tmp.TVAL_CHAR = copyOfout1.TVAL_CHAR;
							copyOfasddd_tmp.NVAL_NUM = copyOfout1.NVAL_NUM;
							copyOfasddd_tmp.VALUEFLAG_CD = copyOfout1.VALUEFLAG_CD;
							copyOfasddd_tmp.QUANTITY_NUM = copyOfout1.QUANTITY_NUM;
							copyOfasddd_tmp.UNITS_CD = copyOfout1.UNITS_CD;
							copyOfasddd_tmp.END_DATE = row33.END_DATE;
							copyOfasddd_tmp.LOCATION_CD = copyOfout1.LOCATION_CD;
							copyOfasddd_tmp.OBSERVATION_BLOB = copyOfout1.OBSERVATION_BLOB;
							copyOfasddd_tmp.CONFIDENCE_NUM = copyOfout1.CONFIDENCE_NUM;
							copyOfasddd_tmp.UPDATE_DATE = copyOfout1.UPDATE_DATE;
							copyOfasddd_tmp.DOWNLOAD_DATE = copyOfout1.DOWNLOAD_DATE;
							copyOfasddd_tmp.IMPORT_DATE = copyOfout1.IMPORT_DATE;
							copyOfasddd_tmp.SOURCESYSTEM_CD = copyOfout1.SOURCESYSTEM_CD;
							copyOfasddd_tmp.UPLOAD_ID = copyOfout1.UPLOAD_ID;
							copyOfasddd_List.add(copyOfasddd_tmp);
							copyOfasddd = copyOfasddd_tmp;
						} // closing inner join bracket (1)
							// ###### START REJECTS #####

						// # Output reject table : 'copyOfout2'
						// # Filter conditions
						if (rejectedInnerJoin_tMap_14_TMAP_IN) {
							copyOfasddd_tmp = new copyOfasdddStruct();

							copyOfasddd_tmp.ENCOUNTER_NUM = copyOfout1.ENCOUNTER_NUM;
							copyOfasddd_tmp.PATIENT_NUM = copyOfout1.PATIENT_NUM;
							copyOfasddd_tmp.CONCEPT_CD = copyOfout1.CONCEPT_CD;
							copyOfasddd_tmp.PROVIDER_ID = copyOfout1.PROVIDER_ID;
							copyOfasddd_tmp.START_DATE = copyOfout1.START_DATE;
							copyOfasddd_tmp.MODIFIER_CD = copyOfout1.MODIFIER_CD;
							copyOfasddd_tmp.INSTANCE_NUM = copyOfout1.INSTANCE_NUM;
							copyOfasddd_tmp.VALTYPE_CD = copyOfout1.VALTYPE_CD;
							copyOfasddd_tmp.TVAL_CHAR = copyOfout1.TVAL_CHAR;
							copyOfasddd_tmp.NVAL_NUM = copyOfout1.NVAL_NUM;
							copyOfasddd_tmp.VALUEFLAG_CD = copyOfout1.VALUEFLAG_CD;
							copyOfasddd_tmp.QUANTITY_NUM = copyOfout1.QUANTITY_NUM;
							copyOfasddd_tmp.UNITS_CD = copyOfout1.UNITS_CD;
							copyOfasddd_tmp.END_DATE = copyOfout1.END_DATE;
							copyOfasddd_tmp.LOCATION_CD = copyOfout1.LOCATION_CD;
							copyOfasddd_tmp.OBSERVATION_BLOB = copyOfout1.OBSERVATION_BLOB;
							copyOfasddd_tmp.CONFIDENCE_NUM = copyOfout1.CONFIDENCE_NUM;
							copyOfasddd_tmp.UPDATE_DATE = copyOfout1.UPDATE_DATE;
							copyOfasddd_tmp.DOWNLOAD_DATE = copyOfout1.DOWNLOAD_DATE;
							copyOfasddd_tmp.IMPORT_DATE = copyOfout1.IMPORT_DATE;
							copyOfasddd_tmp.SOURCESYSTEM_CD = copyOfout1.SOURCESYSTEM_CD;
							copyOfasddd_tmp.UPLOAD_ID = copyOfout1.UPLOAD_ID;
							copyOfasddd_List.add(copyOfasddd_tmp);
							copyOfasddd = copyOfasddd_tmp;
						} // closing filter/reject
							// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_14_TMAP_IN = false;

					tos_count_tMap_14_TMAP_IN++;

					/**
					 * [tMap_14_TMAP_IN main ] stop
					 */
					// Start of branch "copyOfasddd"
					if (copyOfasddd != null) {
						// start of joined table loop
						for (copyOfasdddStruct cur_copyOfasddd : copyOfasddd_List) {
							copyOfasddd = cur_copyOfasddd;

							/**
							 * [tJavaRow_3 main ] start
							 */

							currentComponent = "tJavaRow_3";

							// Code generated according to input schema and
							// output schema
							row34.ENCOUNTER_NUM = copyOfasddd.ENCOUNTER_NUM;
							row34.PATIENT_NUM = copyOfasddd.PATIENT_NUM;
							// row34.CONCEPT_CD = copyOfasddd.CONCEPT_CD;

							row34.CONCEPT_CD = copyOfasddd.CONCEPT_CD;

							row34.PROVIDER_ID = copyOfasddd.PROVIDER_ID;
							if (copyOfasddd.START_DATE != null) {
								if (copyOfasddd.START_DATE.length() > 0)
									row34.START_DATE = TalendDate.parseDate(
											"yyyy-MM-dd",
											copyOfasddd.START_DATE);
								else {
									// "dd-MM-yyyy"

									row34.START_DATE = TalendDate.parseDate(
											"yyyy-MM-dd", "1900-01-01");
								}
							}

							// if (copyOfasddd.MODIFIER_CD != null){
							// if (copyOfasddd.MODIFIER_CD.lastIndexOf("|") >0){
							// StringBuilder b = new
							// StringBuilder(copyOfasddd.MODIFIER_CD);
							// b.replace(copyOfasddd.MODIFIER_CD.lastIndexOf("|"),
							// copyOfasddd.MODIFIER_CD.lastIndexOf("|") + 1, ":"
							// );
							// row34.MODIFIER_CD = b.toString();
							// }
							// else{
							row34.MODIFIER_CD = copyOfasddd.MODIFIER_CD;
							// }
							// }
							row34.INSTANCE_NUM = copyOfasddd.INSTANCE_NUM;
							row34.VALTYPE_CD = copyOfasddd.VALTYPE_CD;
							row34.TVAL_CHAR = copyOfasddd.TVAL_CHAR;
							row34.NVAL_NUM = copyOfasddd.NVAL_NUM;
							row34.VALUEFLAG_CD = copyOfasddd.VALUEFLAG_CD;
							row34.QUANTITY_NUM = copyOfasddd.QUANTITY_NUM;
							row34.UNITS_CD = copyOfasddd.UNITS_CD;
							if (copyOfasddd.END_DATE != null) {
								if (copyOfasddd.END_DATE.length() > 0)
									row34.END_DATE = TalendDate.parseDate(
											"yyyy-MM-dd", copyOfasddd.END_DATE);
								else
									row34.END_DATE = null;
							}
							row34.LOCATION_CD = copyOfasddd.LOCATION_CD;
							row34.OBSERVATION_BLOB = copyOfasddd.OBSERVATION_BLOB;
							row34.CONFIDENCE_NUM = copyOfasddd.CONFIDENCE_NUM;
							row34.UPDATE_DATE = copyOfasddd.UPDATE_DATE;
							row34.DOWNLOAD_DATE = copyOfasddd.DOWNLOAD_DATE;
							row34.IMPORT_DATE = copyOfasddd.IMPORT_DATE;
							row34.SOURCESYSTEM_CD = copyOfasddd.SOURCESYSTEM_CD;
							row34.UPLOAD_ID = copyOfasddd.UPLOAD_ID;

							nb_line_tJavaRow_3++;

							tos_count_tJavaRow_3++;

							/**
							 * [tJavaRow_3 main ] stop
							 */

							/**
							 * [tFileOutputDelimited_24 main ] start
							 */

							currentComponent = "tFileOutputDelimited_24";

							String[] rowtFileOutputDelimited_24 = new String[22];

							rowtFileOutputDelimited_24[0] = row34.ENCOUNTER_NUM == null ? ""
									: row34.ENCOUNTER_NUM.toPlainString();

							rowtFileOutputDelimited_24[1] = row34.PATIENT_NUM == null ? ""
									: row34.PATIENT_NUM.toPlainString();

							rowtFileOutputDelimited_24[2] = row34.CONCEPT_CD == null ? ""
									: row34.CONCEPT_CD;

							rowtFileOutputDelimited_24[3] = row34.PROVIDER_ID == null ? ""
									: row34.PROVIDER_ID;

							rowtFileOutputDelimited_24[4] = row34.START_DATE == null ? ""
									: FormatterUtils.format_Date(
											row34.START_DATE, "yyyy-MM-dd");

							rowtFileOutputDelimited_24[5] = row34.MODIFIER_CD == null ? ""
									: row34.MODIFIER_CD;

							rowtFileOutputDelimited_24[6] = row34.INSTANCE_NUM == null ? ""
									: row34.INSTANCE_NUM;

							rowtFileOutputDelimited_24[7] = row34.VALTYPE_CD == null ? ""
									: row34.VALTYPE_CD;

							rowtFileOutputDelimited_24[8] = row34.TVAL_CHAR == null ? ""
									: row34.TVAL_CHAR;

							rowtFileOutputDelimited_24[9] = row34.NVAL_NUM == null ? ""
									: String.valueOf(row34.NVAL_NUM);

							rowtFileOutputDelimited_24[10] = row34.VALUEFLAG_CD == null ? ""
									: row34.VALUEFLAG_CD;

							rowtFileOutputDelimited_24[11] = row34.QUANTITY_NUM == null ? ""
									: row34.QUANTITY_NUM;

							rowtFileOutputDelimited_24[12] = row34.UNITS_CD == null ? ""
									: row34.UNITS_CD;

							rowtFileOutputDelimited_24[13] = row34.END_DATE == null ? ""
									: FormatterUtils.format_Date(
											row34.END_DATE, "yyyy-MM-dd");

							rowtFileOutputDelimited_24[14] = row34.LOCATION_CD == null ? ""
									: row34.LOCATION_CD;

							rowtFileOutputDelimited_24[15] = row34.OBSERVATION_BLOB == null ? ""
									: row34.OBSERVATION_BLOB;

							rowtFileOutputDelimited_24[16] = row34.CONFIDENCE_NUM == null ? ""
									: row34.CONFIDENCE_NUM;

							rowtFileOutputDelimited_24[17] = row34.UPDATE_DATE == null ? ""
									: FormatterUtils.format_Date(
											row34.UPDATE_DATE, "yyyy-MM-dd");

							rowtFileOutputDelimited_24[18] = row34.DOWNLOAD_DATE == null ? ""
									: FormatterUtils.format_Date(
											row34.DOWNLOAD_DATE, "yyyy-MM-dd");

							rowtFileOutputDelimited_24[19] = row34.IMPORT_DATE == null ? ""
									: FormatterUtils.format_Date(
											row34.IMPORT_DATE, "yyyy-MM-dd");

							rowtFileOutputDelimited_24[20] = row34.SOURCESYSTEM_CD == null ? ""
									: row34.SOURCESYSTEM_CD;

							rowtFileOutputDelimited_24[21] = row34.UPLOAD_ID == null ? ""
									: row34.UPLOAD_ID;

							nb_line_tFileOutputDelimited_24++;
							resourceMap.put("nb_line_tFileOutputDelimited_24",
									nb_line_tFileOutputDelimited_24);
							CsvWritertFileOutputDelimited_24
									.writeNext(rowtFileOutputDelimited_24);

							tos_count_tFileOutputDelimited_24++;

							/**
							 * [tFileOutputDelimited_24 main ] stop
							 */

						} // end of joined table loop
						copyOfasddd_List.clear();

					} // End of branch "copyOfasddd"

				} // G_TM_M_250 close loop read file data '2'

				/**
				 * [tMap_14_TMAP_IN end ] start
				 */

				currentVirtualComponent = "tMap_14";

				currentComponent = "tMap_14_TMAP_IN";

				// ###############################
				// # Lookup hashes releasing
				fsi_tMap_14_2.endGet();

				if (tHash_Lookup_row30 != null) {
					tHash_Lookup_row30.endGet();
				}
				globalMap.remove("tHash_Lookup_row30");

				if (tHash_Lookup_row33 != null) {
					tHash_Lookup_row33.endGet();
				}
				globalMap.remove("tHash_Lookup_row33");

				// ###############################

				ok_Hash.put("tMap_14_TMAP_IN", true);
				end_Hash.put("tMap_14_TMAP_IN", System.currentTimeMillis());

				/**
				 * [tMap_14_TMAP_IN end ] stop
				 */

				/**
				 * [tJavaRow_3 end ] start
				 */

				currentComponent = "tJavaRow_3";

				globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);

				ok_Hash.put("tJavaRow_3", true);
				end_Hash.put("tJavaRow_3", System.currentTimeMillis());

				/**
				 * [tJavaRow_3 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_24 end ] start
				 */

				currentComponent = "tFileOutputDelimited_24";

				if (CsvWritertFileOutputDelimited_24 != null) {
					CsvWritertFileOutputDelimited_24.close();
				}

				globalMap.put("tFileOutputDelimited_24_NB_LINE",
						nb_line_tFileOutputDelimited_24);

				resourceMap.put("finish_tFileOutputDelimited_24", true);

				ok_Hash.put("tFileOutputDelimited_24", true);
				end_Hash.put("tFileOutputDelimited_24",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_24 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_17:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_16Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_13"
			globalMap.remove("tHash_Lookup_copyOfto_tmap");

			try {

				/**
				 * [tFileInputDelimited_17 finally ] start
				 */

				currentComponent = "tFileInputDelimited_17";

				/**
				 * [tFileInputDelimited_17 finally ] stop
				 */

				/**
				 * [tMap_13 finally ] start
				 */

				currentComponent = "tMap_13";

				/**
				 * [tMap_13 finally ] stop
				 */

				/**
				 * [tMap_15_TMAP_OUT finally ] start
				 */

				currentVirtualComponent = "tMap_15";

				currentComponent = "tMap_15_TMAP_OUT";

				/**
				 * [tMap_15_TMAP_OUT finally ] stop
				 */

				/**
				 * [tMap_15_TMAP_IN finally ] start
				 */

				currentVirtualComponent = "tMap_15";

				currentComponent = "tMap_15_TMAP_IN";

				/**
				 * [tMap_15_TMAP_IN finally ] stop
				 */

				/**
				 * [tMap_14_TMAP_OUT finally ] start
				 */

				currentVirtualComponent = "tMap_14";

				currentComponent = "tMap_14_TMAP_OUT";

				/**
				 * [tMap_14_TMAP_OUT finally ] stop
				 */

				/**
				 * [tMap_14_TMAP_IN finally ] start
				 */

				currentVirtualComponent = "tMap_14";

				currentComponent = "tMap_14_TMAP_IN";

				/**
				 * [tMap_14_TMAP_IN finally ] stop
				 */

				/**
				 * [tJavaRow_3 finally ] start
				 */

				currentComponent = "tJavaRow_3";

				/**
				 * [tJavaRow_3 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_24 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_24";

				if (resourceMap.get("finish_tFileOutputDelimited_24") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_24 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_24");

					if (CsvWritertFileOutputDelimited_24 != null) {
						CsvWritertFileOutputDelimited_24.close();
					}

				}

				/**
				 * [tFileOutputDelimited_24 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_17_SUBPROCESS_STATE", 1);
	}

	public void tJava_16Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_16 begin ] start
				 */

				ok_Hash.put("tJava_16", false);
				start_Hash.put("tJava_16", System.currentTimeMillis());

				currentComponent = "tJava_16";

				int tos_count_tJava_16 = 0;

				System.out.println("Extracting Source Data...");
				StatusListener.setStatus(70, "Transforming Staging to Target",
						"");

				/**
				 * [tJava_16 begin ] stop
				 */

				/**
				 * [tJava_16 main ] start
				 */

				currentComponent = "tJava_16";

				tos_count_tJava_16++;

				/**
				 * [tJava_16 main ] stop
				 */

				/**
				 * [tJava_16 end ] start
				 */

				currentComponent = "tJava_16";

				ok_Hash.put("tJava_16", true);
				end_Hash.put("tJava_16", System.currentTimeMillis());

				/**
				 * [tJava_16 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_16:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tCreateTemporaryFile_13Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_16 finally ] start
				 */

				currentComponent = "tJava_16";

				/**
				 * [tJava_16 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_16_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_13Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_13 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_13", false);
				start_Hash.put("tCreateTemporaryFile_13",
						System.currentTimeMillis());

				currentComponent = "tCreateTemporaryFile_13";

				int tos_count_tCreateTemporaryFile_13 = 0;

				java.io.File dir_tCreateTemporaryFile_13 = new java.io.File(
						"C:/ToS/WS5.3_2");
				dir_tCreateTemporaryFile_13.mkdirs();
				String name_tCreateTemporaryFile_13 = "talend_XXXX".replaceAll(
						"XXXX", routines.TalendString.getAsciiRandomString(4)
								.toUpperCase());
				String suffix_tCreateTemporaryFile_13 = ("tmp".replaceAll(
						"\\.", "").length() == 0) ? "tmp" : "tmp".replaceAll(
						"\\.", "");
				java.io.File file_tCreateTemporaryFile_13 = new java.io.File(
						dir_tCreateTemporaryFile_13,
						name_tCreateTemporaryFile_13 + "."
								+ suffix_tCreateTemporaryFile_13);
				if (file_tCreateTemporaryFile_13.createNewFile()) {
					file_tCreateTemporaryFile_13.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_13_FILEPATH",
						file_tCreateTemporaryFile_13.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_13 begin ] stop
				 */

				/**
				 * [tCreateTemporaryFile_13 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_13";

				tos_count_tCreateTemporaryFile_13++;

				/**
				 * [tCreateTemporaryFile_13 main ] stop
				 */

				/**
				 * [tCreateTemporaryFile_13 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_13";

				ok_Hash.put("tCreateTemporaryFile_13", true);
				end_Hash.put("tCreateTemporaryFile_13",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_13 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_13:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputDelimited_29Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tCreateTemporaryFile_13 finally ] start
				 */

				currentComponent = "tCreateTemporaryFile_13";

				/**
				 * [tCreateTemporaryFile_13 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tCreateTemporaryFile_13_SUBPROCESS_STATE", 1);
	}

	public static class row45Struct implements
			routines.system.IPersistableRow<row45Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readDate(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readDate(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row45Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row44Struct implements
			routines.system.IPersistableRow<row44Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readDate(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					this.QUANTITY_NUM = readString(dis);

					this.UNITS_CD = readString(dis);

					this.END_DATE = readDate(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					this.CONFIDENCE_NUM = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// String

				writeString(this.QUANTITY_NUM, dos);

				// String

				writeString(this.UNITS_CD, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// String

				writeString(this.CONFIDENCE_NUM, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row44Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_29Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_29_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row44Struct row44 = new row44Struct();
				row45Struct row45 = new row45Struct();

				/**
				 * [tFileOutputDelimited_34 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_34", false);
				start_Hash.put("tFileOutputDelimited_34",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_34";

				int tos_count_tFileOutputDelimited_34 = 0;

				String fileName_tFileOutputDelimited_34 = "";
				fileName_tFileOutputDelimited_34 = (new java.io.File(
						context.folderMain + context.folderOutput
								+ "/patient_data.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_34 = null;
				String extension_tFileOutputDelimited_34 = null;
				String directory_tFileOutputDelimited_34 = null;
				if ((fileName_tFileOutputDelimited_34.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_34.lastIndexOf(".") < fileName_tFileOutputDelimited_34
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_34 = fileName_tFileOutputDelimited_34;
						extension_tFileOutputDelimited_34 = "";
					} else {
						fullName_tFileOutputDelimited_34 = fileName_tFileOutputDelimited_34
								.substring(0, fileName_tFileOutputDelimited_34
										.lastIndexOf("."));
						extension_tFileOutputDelimited_34 = fileName_tFileOutputDelimited_34
								.substring(fileName_tFileOutputDelimited_34
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_34 = fileName_tFileOutputDelimited_34
							.substring(0, fileName_tFileOutputDelimited_34
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_34.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_34 = fileName_tFileOutputDelimited_34
								.substring(0, fileName_tFileOutputDelimited_34
										.lastIndexOf("."));
						extension_tFileOutputDelimited_34 = fileName_tFileOutputDelimited_34
								.substring(fileName_tFileOutputDelimited_34
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_34 = fileName_tFileOutputDelimited_34;
						extension_tFileOutputDelimited_34 = "";
					}
					directory_tFileOutputDelimited_34 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_34 = true;
				java.io.File filetFileOutputDelimited_34 = new java.io.File(
						fileName_tFileOutputDelimited_34);
				globalMap.put("tFileOutputDelimited_34_FILE_NAME",
						fileName_tFileOutputDelimited_34);

				String[] headColutFileOutputDelimited_34 = new String[22];
				class CSVBasicSet_tFileOutputDelimited_34 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_34[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_34 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_34[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_34[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_34 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_34[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_34[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_34 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_34[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_34 = 0;
				int splitEvery_tFileOutputDelimited_34 = 1000;
				int splitedFileNo_tFileOutputDelimited_34 = 0;
				int currentRow_tFileOutputDelimited_34 = 0;

				CSVBasicSet_tFileOutputDelimited_34 csvSettings_tFileOutputDelimited_34 = new CSVBasicSet_tFileOutputDelimited_34();
				csvSettings_tFileOutputDelimited_34.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_34.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_34.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_34 != null
						&& directory_tFileOutputDelimited_34.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_34 = new java.io.File(
							directory_tFileOutputDelimited_34);
					if (!dir_tFileOutputDelimited_34.exists()) {

						dir_tFileOutputDelimited_34.mkdirs();

					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_34 = null;

				java.io.File fileToDelete_tFileOutputDelimited_34 = new java.io.File(
						fileName_tFileOutputDelimited_34);
				if (fileToDelete_tFileOutputDelimited_34.exists()) {
					fileToDelete_tFileOutputDelimited_34.delete();
				}

				CsvWritertFileOutputDelimited_34 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_34,
												false), "UTF-8")));
				CsvWritertFileOutputDelimited_34
						.setSeparator(csvSettings_tFileOutputDelimited_34
								.getFieldDelim());

				if (!csvSettings_tFileOutputDelimited_34
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_34.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_34.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_34
							.setLineEnd(""
									+ csvSettings_tFileOutputDelimited_34
											.getRowDelim());
				}

				if (filetFileOutputDelimited_34.length() == 0) {

					headColutFileOutputDelimited_34[0] = "ENCOUNTER_NUM";

					headColutFileOutputDelimited_34[1] = "PATIENT_NUM";

					headColutFileOutputDelimited_34[2] = "CONCEPT_CD";

					headColutFileOutputDelimited_34[3] = "PROVIDER_ID";

					headColutFileOutputDelimited_34[4] = "START_DATE";

					headColutFileOutputDelimited_34[5] = "MODIFIER_CD";

					headColutFileOutputDelimited_34[6] = "INSTANCE_NUM";

					headColutFileOutputDelimited_34[7] = "VALTYPE_CD";

					headColutFileOutputDelimited_34[8] = "TVAL_CHAR";

					headColutFileOutputDelimited_34[9] = "NVAL_NUM";

					headColutFileOutputDelimited_34[10] = "VALUEFLAG_CD";

					headColutFileOutputDelimited_34[11] = "QUANTITY_NUM";

					headColutFileOutputDelimited_34[12] = "UNITS_CD";

					headColutFileOutputDelimited_34[13] = "END_DATE";

					headColutFileOutputDelimited_34[14] = "LOCATION_CD";

					headColutFileOutputDelimited_34[15] = "OBSERVATION_BLOB";

					headColutFileOutputDelimited_34[16] = "CONFIDENCE_NUM";

					headColutFileOutputDelimited_34[17] = "UPDATE_DATE";

					headColutFileOutputDelimited_34[18] = "DOWNLOAD_DATE";

					headColutFileOutputDelimited_34[19] = "IMPORT_DATE";

					headColutFileOutputDelimited_34[20] = "SOURCESYSTEM_CD";

					headColutFileOutputDelimited_34[21] = "UPLOAD_ID";

					CsvWritertFileOutputDelimited_34
							.writeNext(headColutFileOutputDelimited_34);
					CsvWritertFileOutputDelimited_34.flush();

				}

				CsvWritertFileOutputDelimited_34
						.setEscapeChar(csvSettings_tFileOutputDelimited_34
								.getEscapeChar());
				CsvWritertFileOutputDelimited_34
						.setQuoteChar(csvSettings_tFileOutputDelimited_34
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_34
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_34",
						CsvWritertFileOutputDelimited_34);

				resourceMap.put("nb_line_tFileOutputDelimited_34",
						nb_line_tFileOutputDelimited_34);

				/**
				 * [tFileOutputDelimited_34 begin ] stop
				 */

				/**
				 * [tUniqRow_11 begin ] start
				 */

				ok_Hash.put("tUniqRow_11", false);
				start_Hash.put("tUniqRow_11", System.currentTimeMillis());

				currentComponent = "tUniqRow_11";

				int tos_count_tUniqRow_11 = 0;

				class KeyStruct_tUniqRow_11 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					BigDecimal ENCOUNTER_NUM;
					String CONCEPT_CD;
					String PROVIDER_ID;
					java.util.Date START_DATE;
					String MODIFIER_CD;
					String INSTANCE_NUM;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.ENCOUNTER_NUM == null) ? 0
											: this.ENCOUNTER_NUM.hashCode());

							result = prime
									* result
									+ ((this.CONCEPT_CD == null) ? 0
											: this.CONCEPT_CD.hashCode());

							result = prime
									* result
									+ ((this.PROVIDER_ID == null) ? 0
											: this.PROVIDER_ID.hashCode());

							result = prime
									* result
									+ ((this.START_DATE == null) ? 0
											: this.START_DATE.hashCode());

							result = prime
									* result
									+ ((this.MODIFIER_CD == null) ? 0
											: this.MODIFIER_CD.hashCode());

							result = prime
									* result
									+ ((this.INSTANCE_NUM == null) ? 0
											: this.INSTANCE_NUM.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_11 other = (KeyStruct_tUniqRow_11) obj;

						if (this.ENCOUNTER_NUM == null) {
							if (other.ENCOUNTER_NUM != null)
								return false;

						} else if (!this.ENCOUNTER_NUM
								.equals(other.ENCOUNTER_NUM))

							return false;

						if (this.CONCEPT_CD == null) {
							if (other.CONCEPT_CD != null)
								return false;

						} else if (!this.CONCEPT_CD.equals(other.CONCEPT_CD))

							return false;

						if (this.PROVIDER_ID == null) {
							if (other.PROVIDER_ID != null)
								return false;

						} else if (!this.PROVIDER_ID.equals(other.PROVIDER_ID))

							return false;

						if (this.START_DATE == null) {
							if (other.START_DATE != null)
								return false;

						} else if (!this.START_DATE.equals(other.START_DATE))

							return false;

						if (this.MODIFIER_CD == null) {
							if (other.MODIFIER_CD != null)
								return false;

						} else if (!this.MODIFIER_CD.equals(other.MODIFIER_CD))

							return false;

						if (this.INSTANCE_NUM == null) {
							if (other.INSTANCE_NUM != null)
								return false;

						} else if (!this.INSTANCE_NUM
								.equals(other.INSTANCE_NUM))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_11 = 0;
				int nb_duplicates_tUniqRow_11 = 0;
				KeyStruct_tUniqRow_11 finder_tUniqRow_11 = new KeyStruct_tUniqRow_11();
				java.util.Set<KeyStruct_tUniqRow_11> keystUniqRow_11 = new java.util.HashSet<KeyStruct_tUniqRow_11>();

				/**
				 * [tUniqRow_11 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_29 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_29", false);
				start_Hash.put("tFileInputDelimited_29",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_29";

				int tos_count_tFileInputDelimited_29 = 0;

				int nb_line_tFileInputDelimited_29 = 0;
				int footer_tFileInputDelimited_29 = 0;
				int totalLinetFileInputDelimited_29 = 0;
				int limittFileInputDelimited_29 = -1;
				int lastLinetFileInputDelimited_29 = -1;

				char fieldSeparator_tFileInputDelimited_29[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_29 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_29[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_29 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_29 = /**
				 * Start field
				 * tFileInputDelimited_29:FILENAME
				 */
				context.folderMain + context.folderOutput
						+ "/patient_data2.csv"/**
				 * End field
				 * tFileInputDelimited_29:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_29 = null;

				try {

					String[] rowtFileInputDelimited_29 = null;
					int currentLinetFileInputDelimited_29 = 0;
					int outputLinetFileInputDelimited_29 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_29 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_29 = 0;
							if (footer_value_tFileInputDelimited_29 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_29 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_29,
									fieldSeparator_tFileInputDelimited_29[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_29 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_29)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_29[0]);
						}

						csvReadertFileInputDelimited_29
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_29[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_29[0] != '\r'))
							csvReadertFileInputDelimited_29.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_29[0]);

						csvReadertFileInputDelimited_29.setQuoteChar('"');

						csvReadertFileInputDelimited_29
								.setEscapeChar(csvReadertFileInputDelimited_29
										.getQuoteChar());

						if (footer_tFileInputDelimited_29 > 0) {
							for (totalLinetFileInputDelimited_29 = 0; totalLinetFileInputDelimited_29 < 1; totalLinetFileInputDelimited_29++) {
								csvReadertFileInputDelimited_29.readNext();
							}
							csvReadertFileInputDelimited_29
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_29.readNext()) {

								rowtFileInputDelimited_29 = csvReadertFileInputDelimited_29
										.getValues();
								if (!(rowtFileInputDelimited_29.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_29[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_29++;

								}

							}
							int lastLineTemptFileInputDelimited_29 = totalLinetFileInputDelimited_29
									- footer_tFileInputDelimited_29 < 0 ? 0
									: totalLinetFileInputDelimited_29
											- footer_tFileInputDelimited_29;
							if (lastLinetFileInputDelimited_29 > 0) {
								lastLinetFileInputDelimited_29 = lastLinetFileInputDelimited_29 < lastLineTemptFileInputDelimited_29 ? lastLinetFileInputDelimited_29
										: lastLineTemptFileInputDelimited_29;
							} else {
								lastLinetFileInputDelimited_29 = lastLineTemptFileInputDelimited_29;
							}

							csvReadertFileInputDelimited_29.close();
							if (filename_tFileInputDelimited_29 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_29 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_29,
										fieldSeparator_tFileInputDelimited_29[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_29 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_29)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_29[0]);
							}
							csvReadertFileInputDelimited_29
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_29[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_29[0] != '\r'))
								csvReadertFileInputDelimited_29
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_29[0]);

							csvReadertFileInputDelimited_29.setQuoteChar('"');

							csvReadertFileInputDelimited_29
									.setEscapeChar(csvReadertFileInputDelimited_29
											.getQuoteChar());

						}

						if (limittFileInputDelimited_29 != 0) {
							for (currentLinetFileInputDelimited_29 = 0; currentLinetFileInputDelimited_29 < 1; currentLinetFileInputDelimited_29++) {
								csvReadertFileInputDelimited_29.readNext();
							}
						}
						csvReadertFileInputDelimited_29
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_29 != 0
							&& csvReadertFileInputDelimited_29 != null
							&& csvReadertFileInputDelimited_29.readNext()) {

						rowtFileInputDelimited_29 = csvReadertFileInputDelimited_29
								.getValues();

						if (rowtFileInputDelimited_29.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_29[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_29++;

						if (lastLinetFileInputDelimited_29 > -1
								&& currentLinetFileInputDelimited_29 > lastLinetFileInputDelimited_29) {
							break;
						}
						outputLinetFileInputDelimited_29++;
						if (limittFileInputDelimited_29 > 0
								&& outputLinetFileInputDelimited_29 > limittFileInputDelimited_29) {
							break;
						}

						row44 = null;

						boolean whetherReject_tFileInputDelimited_29 = false;
						row44 = new row44Struct();
						try {

							char fieldSeparator_tFileInputDelimited_29_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_29_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_29.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_29[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row44.ENCOUNTER_NUM = null;

								row44.PATIENT_NUM = null;

								row44.CONCEPT_CD = null;

								row44.PROVIDER_ID = null;

								row44.START_DATE = null;

								row44.MODIFIER_CD = null;

								row44.INSTANCE_NUM = null;

								row44.VALTYPE_CD = null;

								row44.TVAL_CHAR = null;

								row44.NVAL_NUM = null;

								row44.VALUEFLAG_CD = null;

								row44.QUANTITY_NUM = null;

								row44.UNITS_CD = null;

								row44.END_DATE = null;

								row44.LOCATION_CD = null;

								row44.OBSERVATION_BLOB = null;

								row44.CONFIDENCE_NUM = null;

								row44.UPDATE_DATE = null;

								row44.DOWNLOAD_DATE = null;

								row44.IMPORT_DATE = null;

								row44.SOURCESYSTEM_CD = null;

								row44.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_29 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_29 = 0;

								if (columnIndexWithD_tFileInputDelimited_29 < rowtFileInputDelimited_29.length) {

									if (rowtFileInputDelimited_29[columnIndexWithD_tFileInputDelimited_29]
											.length() > 0) {

										row44.ENCOUNTER_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_29[columnIndexWithD_tFileInputDelimited_29]);

									} else {
										row44.ENCOUNTER_NUM = null;
									}

								} else {
									row44.ENCOUNTER_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_29 = 1;

								if (columnIndexWithD_tFileInputDelimited_29 < rowtFileInputDelimited_29.length) {

									if (rowtFileInputDelimited_29[columnIndexWithD_tFileInputDelimited_29]
											.length() > 0) {

										row44.PATIENT_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_29[columnIndexWithD_tFileInputDelimited_29]);

									} else {
										row44.PATIENT_NUM = null;
									}

								} else {
									row44.PATIENT_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_29 = 2;

								if (columnIndexWithD_tFileInputDelimited_29 < rowtFileInputDelimited_29.length) {

									row44.CONCEPT_CD = rowtFileInputDelimited_29[columnIndexWithD_tFileInputDelimited_29];

								} else {
									row44.CONCEPT_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_29 = 3;

								if (columnIndexWithD_tFileInputDelimited_29 < rowtFileInputDelimited_29.length) {

									row44.PROVIDER_ID = rowtFileInputDelimited_29[columnIndexWithD_tFileInputDelimited_29];

								} else {
									row44.PROVIDER_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_29 = 4;

								if (columnIndexWithD_tFileInputDelimited_29 < rowtFileInputDelimited_29.length) {

									if (rowtFileInputDelimited_29[columnIndexWithD_tFileInputDelimited_29]
											.length() > 0) {

										row44.START_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_29[columnIndexWithD_tFileInputDelimited_29],
														"yyyy-MM-dd");

									} else {
										row44.START_DATE = null;
									}

								} else {
									row44.START_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_29 = 5;

								if (columnIndexWithD_tFileInputDelimited_29 < rowtFileInputDelimited_29.length) {

									row44.MODIFIER_CD = rowtFileInputDelimited_29[columnIndexWithD_tFileInputDelimited_29];

								} else {
									row44.MODIFIER_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_29 = 6;

								if (columnIndexWithD_tFileInputDelimited_29 < rowtFileInputDelimited_29.length) {

									row44.INSTANCE_NUM = rowtFileInputDelimited_29[columnIndexWithD_tFileInputDelimited_29];

								} else {
									row44.INSTANCE_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_29 = 7;

								if (columnIndexWithD_tFileInputDelimited_29 < rowtFileInputDelimited_29.length) {

									row44.VALTYPE_CD = rowtFileInputDelimited_29[columnIndexWithD_tFileInputDelimited_29];

								} else {
									row44.VALTYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_29 = 8;

								if (columnIndexWithD_tFileInputDelimited_29 < rowtFileInputDelimited_29.length) {

									row44.TVAL_CHAR = rowtFileInputDelimited_29[columnIndexWithD_tFileInputDelimited_29];

								} else {
									row44.TVAL_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_29 = 9;

								if (columnIndexWithD_tFileInputDelimited_29 < rowtFileInputDelimited_29.length) {

									if (rowtFileInputDelimited_29[columnIndexWithD_tFileInputDelimited_29]
											.length() > 0) {

										row44.NVAL_NUM = ParserUtils
												.parseTo_Float(rowtFileInputDelimited_29[columnIndexWithD_tFileInputDelimited_29]);

									} else {
										row44.NVAL_NUM = null;
									}

								} else {
									row44.NVAL_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_29 = 10;

								if (columnIndexWithD_tFileInputDelimited_29 < rowtFileInputDelimited_29.length) {

									row44.VALUEFLAG_CD = rowtFileInputDelimited_29[columnIndexWithD_tFileInputDelimited_29];

								} else {
									row44.VALUEFLAG_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_29 = 11;

								if (columnIndexWithD_tFileInputDelimited_29 < rowtFileInputDelimited_29.length) {

									row44.QUANTITY_NUM = rowtFileInputDelimited_29[columnIndexWithD_tFileInputDelimited_29];

								} else {
									row44.QUANTITY_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_29 = 12;

								if (columnIndexWithD_tFileInputDelimited_29 < rowtFileInputDelimited_29.length) {

									row44.UNITS_CD = rowtFileInputDelimited_29[columnIndexWithD_tFileInputDelimited_29];

								} else {
									row44.UNITS_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_29 = 13;

								if (columnIndexWithD_tFileInputDelimited_29 < rowtFileInputDelimited_29.length) {

									if (rowtFileInputDelimited_29[columnIndexWithD_tFileInputDelimited_29]
											.length() > 0) {

										row44.END_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_29[columnIndexWithD_tFileInputDelimited_29],
														"yyyy-MM-dd");

									} else {
										row44.END_DATE = null;
									}

								} else {
									row44.END_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_29 = 14;

								if (columnIndexWithD_tFileInputDelimited_29 < rowtFileInputDelimited_29.length) {

									row44.LOCATION_CD = rowtFileInputDelimited_29[columnIndexWithD_tFileInputDelimited_29];

								} else {
									row44.LOCATION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_29 = 15;

								if (columnIndexWithD_tFileInputDelimited_29 < rowtFileInputDelimited_29.length) {

									row44.OBSERVATION_BLOB = rowtFileInputDelimited_29[columnIndexWithD_tFileInputDelimited_29];

								} else {
									row44.OBSERVATION_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_29 = 16;

								if (columnIndexWithD_tFileInputDelimited_29 < rowtFileInputDelimited_29.length) {

									row44.CONFIDENCE_NUM = rowtFileInputDelimited_29[columnIndexWithD_tFileInputDelimited_29];

								} else {
									row44.CONFIDENCE_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_29 = 17;

								if (columnIndexWithD_tFileInputDelimited_29 < rowtFileInputDelimited_29.length) {

									if (rowtFileInputDelimited_29[columnIndexWithD_tFileInputDelimited_29]
											.length() > 0) {

										row44.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_29[columnIndexWithD_tFileInputDelimited_29],
														"yyyy-MM-dd");

									} else {
										row44.UPDATE_DATE = null;
									}

								} else {
									row44.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_29 = 18;

								if (columnIndexWithD_tFileInputDelimited_29 < rowtFileInputDelimited_29.length) {

									if (rowtFileInputDelimited_29[columnIndexWithD_tFileInputDelimited_29]
											.length() > 0) {

										row44.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_29[columnIndexWithD_tFileInputDelimited_29],
														"yyyy-MM-dd");

									} else {
										row44.DOWNLOAD_DATE = null;
									}

								} else {
									row44.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_29 = 19;

								if (columnIndexWithD_tFileInputDelimited_29 < rowtFileInputDelimited_29.length) {

									if (rowtFileInputDelimited_29[columnIndexWithD_tFileInputDelimited_29]
											.length() > 0) {

										row44.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_29[columnIndexWithD_tFileInputDelimited_29],
														"yyyy-MM-dd");

									} else {
										row44.IMPORT_DATE = null;
									}

								} else {
									row44.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_29 = 20;

								if (columnIndexWithD_tFileInputDelimited_29 < rowtFileInputDelimited_29.length) {

									row44.SOURCESYSTEM_CD = rowtFileInputDelimited_29[columnIndexWithD_tFileInputDelimited_29];

								} else {
									row44.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_29 = 21;

								if (columnIndexWithD_tFileInputDelimited_29 < rowtFileInputDelimited_29.length) {

									row44.UPLOAD_ID = rowtFileInputDelimited_29[columnIndexWithD_tFileInputDelimited_29];

								} else {
									row44.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_29 = true;

							System.err.println(e.getMessage());
							row44 = null;

						}

						/**
						 * [tFileInputDelimited_29 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_29 main ] start
						 */

						currentComponent = "tFileInputDelimited_29";

						tos_count_tFileInputDelimited_29++;

						/**
						 * [tFileInputDelimited_29 main ] stop
						 */
						// Start of branch "row44"
						if (row44 != null) {

							/**
							 * [tUniqRow_11 main ] start
							 */

							currentComponent = "tUniqRow_11";

							row45 = null;
							finder_tUniqRow_11.ENCOUNTER_NUM = row44.ENCOUNTER_NUM;
							if (row44.CONCEPT_CD == null) {
								finder_tUniqRow_11.CONCEPT_CD = null;
							} else {
								finder_tUniqRow_11.CONCEPT_CD = row44.CONCEPT_CD
										.toLowerCase();
							}
							if (row44.PROVIDER_ID == null) {
								finder_tUniqRow_11.PROVIDER_ID = null;
							} else {
								finder_tUniqRow_11.PROVIDER_ID = row44.PROVIDER_ID
										.toLowerCase();
							}
							finder_tUniqRow_11.START_DATE = row44.START_DATE;
							if (row44.MODIFIER_CD == null) {
								finder_tUniqRow_11.MODIFIER_CD = null;
							} else {
								finder_tUniqRow_11.MODIFIER_CD = row44.MODIFIER_CD
										.toLowerCase();
							}
							if (row44.INSTANCE_NUM == null) {
								finder_tUniqRow_11.INSTANCE_NUM = null;
							} else {
								finder_tUniqRow_11.INSTANCE_NUM = row44.INSTANCE_NUM
										.toLowerCase();
							}
							finder_tUniqRow_11.hashCodeDirty = true;
							if (!keystUniqRow_11.contains(finder_tUniqRow_11)) {
								KeyStruct_tUniqRow_11 new_tUniqRow_11 = new KeyStruct_tUniqRow_11();

								new_tUniqRow_11.ENCOUNTER_NUM = row44.ENCOUNTER_NUM;
								if (row44.CONCEPT_CD == null) {
									new_tUniqRow_11.CONCEPT_CD = null;
								} else {
									new_tUniqRow_11.CONCEPT_CD = row44.CONCEPT_CD
											.toLowerCase();
								}
								if (row44.PROVIDER_ID == null) {
									new_tUniqRow_11.PROVIDER_ID = null;
								} else {
									new_tUniqRow_11.PROVIDER_ID = row44.PROVIDER_ID
											.toLowerCase();
								}
								new_tUniqRow_11.START_DATE = row44.START_DATE;
								if (row44.MODIFIER_CD == null) {
									new_tUniqRow_11.MODIFIER_CD = null;
								} else {
									new_tUniqRow_11.MODIFIER_CD = row44.MODIFIER_CD
											.toLowerCase();
								}
								if (row44.INSTANCE_NUM == null) {
									new_tUniqRow_11.INSTANCE_NUM = null;
								} else {
									new_tUniqRow_11.INSTANCE_NUM = row44.INSTANCE_NUM
											.toLowerCase();
								}

								keystUniqRow_11.add(new_tUniqRow_11);
								if (row45 == null) {

									row45 = new row45Struct();
								}
								row45.ENCOUNTER_NUM = row44.ENCOUNTER_NUM;
								row45.PATIENT_NUM = row44.PATIENT_NUM;
								row45.CONCEPT_CD = row44.CONCEPT_CD;
								row45.PROVIDER_ID = row44.PROVIDER_ID;
								row45.START_DATE = row44.START_DATE;
								row45.MODIFIER_CD = row44.MODIFIER_CD;
								row45.INSTANCE_NUM = row44.INSTANCE_NUM;
								row45.VALTYPE_CD = row44.VALTYPE_CD;
								row45.TVAL_CHAR = row44.TVAL_CHAR;
								row45.NVAL_NUM = row44.NVAL_NUM;
								row45.VALUEFLAG_CD = row44.VALUEFLAG_CD;
								row45.QUANTITY_NUM = row44.QUANTITY_NUM;
								row45.UNITS_CD = row44.UNITS_CD;
								row45.END_DATE = row44.END_DATE;
								row45.LOCATION_CD = row44.LOCATION_CD;
								row45.OBSERVATION_BLOB = row44.OBSERVATION_BLOB;
								row45.CONFIDENCE_NUM = row44.CONFIDENCE_NUM;
								row45.UPDATE_DATE = row44.UPDATE_DATE;
								row45.DOWNLOAD_DATE = row44.DOWNLOAD_DATE;
								row45.IMPORT_DATE = row44.IMPORT_DATE;
								row45.SOURCESYSTEM_CD = row44.SOURCESYSTEM_CD;
								row45.UPLOAD_ID = row44.UPLOAD_ID;
								nb_uniques_tUniqRow_11++;
							} else {
								nb_duplicates_tUniqRow_11++;
							}

							tos_count_tUniqRow_11++;

							/**
							 * [tUniqRow_11 main ] stop
							 */
							// Start of branch "row45"
							if (row45 != null) {

								/**
								 * [tFileOutputDelimited_34 main ] start
								 */

								currentComponent = "tFileOutputDelimited_34";

								String[] rowtFileOutputDelimited_34 = new String[22];

								rowtFileOutputDelimited_34[0] = row45.ENCOUNTER_NUM == null ? ""
										: row45.ENCOUNTER_NUM.toPlainString();

								rowtFileOutputDelimited_34[1] = row45.PATIENT_NUM == null ? ""
										: row45.PATIENT_NUM.toPlainString();

								rowtFileOutputDelimited_34[2] = row45.CONCEPT_CD == null ? ""
										: row45.CONCEPT_CD;

								rowtFileOutputDelimited_34[3] = row45.PROVIDER_ID == null ? ""
										: row45.PROVIDER_ID;

								rowtFileOutputDelimited_34[4] = row45.START_DATE == null ? ""
										: FormatterUtils.format_Date(
												row45.START_DATE, "yyyy-MM-dd");

								rowtFileOutputDelimited_34[5] = row45.MODIFIER_CD == null ? ""
										: row45.MODIFIER_CD;

								rowtFileOutputDelimited_34[6] = row45.INSTANCE_NUM == null ? ""
										: row45.INSTANCE_NUM;

								rowtFileOutputDelimited_34[7] = row45.VALTYPE_CD == null ? ""
										: row45.VALTYPE_CD;

								rowtFileOutputDelimited_34[8] = row45.TVAL_CHAR == null ? ""
										: row45.TVAL_CHAR;

								rowtFileOutputDelimited_34[9] = row45.NVAL_NUM == null ? ""
										: String.valueOf(row45.NVAL_NUM);

								rowtFileOutputDelimited_34[10] = row45.VALUEFLAG_CD == null ? ""
										: row45.VALUEFLAG_CD;

								rowtFileOutputDelimited_34[11] = row45.QUANTITY_NUM == null ? ""
										: row45.QUANTITY_NUM;

								rowtFileOutputDelimited_34[12] = row45.UNITS_CD == null ? ""
										: row45.UNITS_CD;

								rowtFileOutputDelimited_34[13] = row45.END_DATE == null ? ""
										: FormatterUtils.format_Date(
												row45.END_DATE, "yyyy-MM-dd");

								rowtFileOutputDelimited_34[14] = row45.LOCATION_CD == null ? ""
										: row45.LOCATION_CD;

								rowtFileOutputDelimited_34[15] = row45.OBSERVATION_BLOB == null ? ""
										: row45.OBSERVATION_BLOB;

								rowtFileOutputDelimited_34[16] = row45.CONFIDENCE_NUM == null ? ""
										: row45.CONFIDENCE_NUM;

								rowtFileOutputDelimited_34[17] = row45.UPDATE_DATE == null ? ""
										: FormatterUtils
												.format_Date(row45.UPDATE_DATE,
														"yyyy-MM-dd");

								rowtFileOutputDelimited_34[18] = row45.DOWNLOAD_DATE == null ? ""
										: FormatterUtils.format_Date(
												row45.DOWNLOAD_DATE,
												"yyyy-MM-dd");

								rowtFileOutputDelimited_34[19] = row45.IMPORT_DATE == null ? ""
										: FormatterUtils
												.format_Date(row45.IMPORT_DATE,
														"yyyy-MM-dd");

								rowtFileOutputDelimited_34[20] = row45.SOURCESYSTEM_CD == null ? ""
										: row45.SOURCESYSTEM_CD;

								rowtFileOutputDelimited_34[21] = row45.UPLOAD_ID == null ? ""
										: row45.UPLOAD_ID;

								nb_line_tFileOutputDelimited_34++;
								resourceMap.put(
										"nb_line_tFileOutputDelimited_34",
										nb_line_tFileOutputDelimited_34);
								CsvWritertFileOutputDelimited_34
										.writeNext(rowtFileOutputDelimited_34);

								tos_count_tFileOutputDelimited_34++;

								/**
								 * [tFileOutputDelimited_34 main ] stop
								 */

							} // End of branch "row45"

						} // End of branch "row44"

						/**
						 * [tFileInputDelimited_29 end ] start
						 */

						currentComponent = "tFileInputDelimited_29";

						nb_line_tFileInputDelimited_29++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_29 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_29 != null) {
							csvReadertFileInputDelimited_29.close();
						}
					}
					if (csvReadertFileInputDelimited_29 != null) {
						globalMap.put("tFileInputDelimited_29_NB_LINE",
								nb_line_tFileInputDelimited_29);
					}

				}

				ok_Hash.put("tFileInputDelimited_29", true);
				end_Hash.put("tFileInputDelimited_29",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_29 end ] stop
				 */

				/**
				 * [tUniqRow_11 end ] start
				 */

				currentComponent = "tUniqRow_11";

				globalMap.put("tUniqRow_11_NB_UNIQUES", nb_uniques_tUniqRow_11);
				globalMap.put("tUniqRow_11_NB_DUPLICATES",
						nb_duplicates_tUniqRow_11);

				ok_Hash.put("tUniqRow_11", true);
				end_Hash.put("tUniqRow_11", System.currentTimeMillis());

				/**
				 * [tUniqRow_11 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_34 end ] start
				 */

				currentComponent = "tFileOutputDelimited_34";

				if (CsvWritertFileOutputDelimited_34 != null) {
					CsvWritertFileOutputDelimited_34.close();
				}

				globalMap.put("tFileOutputDelimited_34_NB_LINE",
						nb_line_tFileOutputDelimited_34);

				resourceMap.put("finish_tFileOutputDelimited_34", true);

				ok_Hash.put("tFileOutputDelimited_34", true);
				end_Hash.put("tFileOutputDelimited_34",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_34 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_29:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCClose_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_29 finally ] start
				 */

				currentComponent = "tFileInputDelimited_29";

				/**
				 * [tFileInputDelimited_29 finally ] stop
				 */

				/**
				 * [tUniqRow_11 finally ] start
				 */

				currentComponent = "tUniqRow_11";

				/**
				 * [tUniqRow_11 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_34 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_34";

				if (resourceMap.get("finish_tFileOutputDelimited_34") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_34 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_34");

					if (CsvWritertFileOutputDelimited_34 != null) {
						CsvWritertFileOutputDelimited_34.close();
					}

				}

				/**
				 * [tFileOutputDelimited_34 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_29_SUBPROCESS_STATE", 1);
	}

	public void tJDBCClose_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCClose_1 begin ] start
				 */

				ok_Hash.put("tJDBCClose_1", false);
				start_Hash.put("tJDBCClose_1", System.currentTimeMillis());

				currentComponent = "tJDBCClose_1";

				int tos_count_tJDBCClose_1 = 0;

				/**
				 * [tJDBCClose_1 begin ] stop
				 */

				/**
				 * [tJDBCClose_1 main ] start
				 */

				currentComponent = "tJDBCClose_1";

				java.sql.Connection conn_tJDBCClose_1 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				if (conn_tJDBCClose_1 != null && !conn_tJDBCClose_1.isClosed()) {

					conn_tJDBCClose_1.close();

				}

				tos_count_tJDBCClose_1++;

				/**
				 * [tJDBCClose_1 main ] stop
				 */

				/**
				 * [tJDBCClose_1 end ] start
				 */

				currentComponent = "tJDBCClose_1";

				ok_Hash.put("tJDBCClose_1", true);
				end_Hash.put("tJDBCClose_1", System.currentTimeMillis());

				/**
				 * [tJDBCClose_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCClose_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_17Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCClose_1 finally ] start
				 */

				currentComponent = "tJDBCClose_1";

				/**
				 * [tJDBCClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCClose_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_17Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_17_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_17 begin ] start
				 */

				ok_Hash.put("tJava_17", false);
				start_Hash.put("tJava_17", System.currentTimeMillis());

				currentComponent = "tJava_17";

				int tos_count_tJava_17 = 0;

				System.out.println("Extracting Source Data...");
				StatusListener.setStatus(80, "Uploading new Data...", "");

				/**
				 * [tJava_17 begin ] stop
				 */

				/**
				 * [tJava_17 main ] start
				 */

				currentComponent = "tJava_17";

				tos_count_tJava_17++;

				/**
				 * [tJava_17 main ] stop
				 */

				/**
				 * [tJava_17 end ] start
				 */

				currentComponent = "tJava_17";

				ok_Hash.put("tJava_17", true);
				end_Hash.put("tJava_17", System.currentTimeMillis());

				/**
				 * [tJava_17 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_17:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tRunJob_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_17 finally ] start
				 */

				currentComponent = "tJava_17";

				/**
				 * [tJava_17 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_17_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_2 begin ] start
				 */

				ok_Hash.put("tRunJob_2", false);
				start_Hash.put("tRunJob_2", System.currentTimeMillis());

				currentComponent = "tRunJob_2";

				int tos_count_tRunJob_2 = 0;

				/**
				 * [tRunJob_2 begin ] stop
				 */

				/**
				 * [tRunJob_2 main ] start
				 */

				currentComponent = "tRunJob_2";

				java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();

				paraList_tRunJob_2.add("--father_pid=" + pid);

				paraList_tRunJob_2.add("--root_pid=" + rootPid);

				paraList_tRunJob_2.add("--father_node=tRunJob_2");

				paraList_tRunJob_2.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_2.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_2.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_2 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_2 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_2".equals(tRunJobName_tRunJob_2)
						&& childResumePath_tRunJob_2 != null) {
					paraList_tRunJob_2
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_2");

				java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_2 = null;

				obj_tRunJob_2 = context.DB_TargetI2B2_Host;
				paraList_tRunJob_2.add("--context_param DB_StagingI2B2_Host="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
				parentContextMap_tRunJob_2.put("DB_StagingI2B2_Host",
						obj_tRunJob_2);

				obj_tRunJob_2 = context.DB_TargetI2B2_Instance;
				paraList_tRunJob_2
						.add("--context_param DB_StagingI2B2_Instance="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_2));
				parentContextMap_tRunJob_2.put("DB_StagingI2B2_Instance",
						obj_tRunJob_2);

				obj_tRunJob_2 = context.DB_TargetI2B2_Port;
				paraList_tRunJob_2.add("--context_param DB_StagingI2B2_Port="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
				parentContextMap_tRunJob_2.put("DB_StagingI2B2_Port",
						obj_tRunJob_2);

				obj_tRunJob_2 = context.DB_TargetI2B2_Password;
				paraList_tRunJob_2
						.add("--context_param DB_StagingI2B2_Password="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_2));
				parentContextMap_tRunJob_2.put("DB_StagingI2B2_Password",
						obj_tRunJob_2);

				obj_tRunJob_2 = context.DB_TargetI2B2_Schema;
				paraList_tRunJob_2.add("--context_param DB_StagingI2B2_Schema="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
				parentContextMap_tRunJob_2.put("DB_StagingI2B2_Schema",
						obj_tRunJob_2);

				obj_tRunJob_2 = context.folderMain;
				paraList_tRunJob_2.add("--context_param folderMain="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
				parentContextMap_tRunJob_2.put("folderMain", obj_tRunJob_2);

				obj_tRunJob_2 = "output/";
				paraList_tRunJob_2.add("--context_param folderOutput="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
				parentContextMap_tRunJob_2.put("folderOutput", obj_tRunJob_2);

				obj_tRunJob_2 = context.DB_TargetI2B2_Username;
				paraList_tRunJob_2
						.add("--context_param DB_StagingI2B2_Username="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_2));
				parentContextMap_tRunJob_2.put("DB_StagingI2B2_Username",
						obj_tRunJob_2);

				obj_tRunJob_2 = context.DB_TargetI2B2_DatabaseType;
				paraList_tRunJob_2
						.add("--context_param DB_StagingI2B2_DatabaseType="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_2));
				parentContextMap_tRunJob_2.put("DB_StagingI2B2_DatabaseType",
						obj_tRunJob_2);

				obj_tRunJob_2 = "UTF-8";
				paraList_tRunJob_2.add("--context_param coding="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
				parentContextMap_tRunJob_2.put("coding", obj_tRunJob_2);

				obj_tRunJob_2 = context.DB_TargetI2B2_jdbcurl;
				paraList_tRunJob_2
						.add("--context_param DB_StagingI2B2_jdbcurl="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_2));
				parentContextMap_tRunJob_2.put("DB_StagingI2B2_jdbcurl",
						obj_tRunJob_2);

				obj_tRunJob_2 = context.DB_TargetI2B2_DriverClass;
				paraList_tRunJob_2
						.add("--context_param DB_StagingI2B2_DriverClass="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_2));
				parentContextMap_tRunJob_2.put("DB_StagingI2B2_DriverClass",
						obj_tRunJob_2);

				i2b2_postgres2.idrt_jdbc_upload_1_0.IDRT_JDBC_Upload childJob_tRunJob_2 = new i2b2_postgres2.idrt_jdbc_upload_1_0.IDRT_JDBC_Upload();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_2) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
							.entrySet()) {
						dataSources_tRunJob_2.put(
								talendDataSourceEntry_tRunJob_2.getKey(),
								talendDataSourceEntry_tRunJob_2.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
				}

				childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;

				String[][] childReturn_tRunJob_2 = childJob_tRunJob_2
						.runJob((String[]) paraList_tRunJob_2
								.toArray(new String[paraList_tRunJob_2.size()]));

				errorCode = childJob_tRunJob_2.getErrorCode();

				if (childJob_tRunJob_2.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_2_CHILD_RETURN_CODE",
							childJob_tRunJob_2.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_2
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_2_CHILD_RETURN_CODE",
							childJob_tRunJob_2.getErrorCode());
				}
				if (childJob_tRunJob_2.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_2.getExceptionStackTrace());
				}

				if (childJob_tRunJob_2.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_2.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_2++;

				/**
				 * [tRunJob_2 main ] stop
				 */

				/**
				 * [tRunJob_2 end ] start
				 */

				currentComponent = "tRunJob_2";

				ok_Hash.put("tRunJob_2", true);
				end_Hash.put("tRunJob_2", System.currentTimeMillis());

				/**
				 * [tRunJob_2 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tRunJob_2:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_18Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_2 finally ] start
				 */

				currentComponent = "tRunJob_2";

				/**
				 * [tRunJob_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_18Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_18_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_18 begin ] start
				 */

				ok_Hash.put("tJava_18", false);
				start_Hash.put("tJava_18", System.currentTimeMillis());

				currentComponent = "tJava_18";

				int tos_count_tJava_18 = 0;

				StatusListener.setStatus(90, "Upload Complete...", "");

				/**
				 * [tJava_18 begin ] stop
				 */

				/**
				 * [tJava_18 main ] start
				 */

				currentComponent = "tJava_18";

				tos_count_tJava_18++;

				/**
				 * [tJava_18 main ] stop
				 */

				/**
				 * [tJava_18 end ] start
				 */

				currentComponent = "tJava_18";

				ok_Hash.put("tJava_18", true);
				end_Hash.put("tJava_18", System.currentTimeMillis());

				/**
				 * [tJava_18 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_18 finally ] start
				 */

				currentComponent = "tJava_18";

				/**
				 * [tJava_18 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_18_SUBPROCESS_STATE", 1);
	}

	public void tDie_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_1 begin ] start
				 */

				ok_Hash.put("tDie_1", false);
				start_Hash.put("tDie_1", System.currentTimeMillis());

				currentComponent = "tDie_1";

				int tos_count_tDie_1 = 0;

				/**
				 * [tDie_1 begin ] stop
				 */

				/**
				 * [tDie_1 main ] start
				 */

				currentComponent = "tDie_1";

				globalMap.put("tDie_1_DIE_PRIORITY", 5);
				System.err.println(((String) globalMap
						.get("tRunJob_2_ERROR_MESSAGE")));

				globalMap.put("tDie_1_DIE_MESSAGE",
						((String) globalMap.get("tRunJob_2_ERROR_MESSAGE")));
				globalMap.put("tDie_1_DIE_MESSAGES",
						((String) globalMap.get("tRunJob_2_ERROR_MESSAGE")));
				currentComponent = "tDie_1";
				status = "failure";
				errorCode = new Integer(2);
				globalMap.put("tDie_1_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_1++;

				/**
				 * [tDie_1 main ] stop
				 */

				/**
				 * [tDie_1 end ] start
				 */

				currentComponent = "tDie_1";

				ok_Hash.put("tDie_1", true);
				end_Hash.put("tDie_1", System.currentTimeMillis());

				/**
				 * [tDie_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_1 finally ] start
				 */

				currentComponent = "tDie_1";

				/**
				 * [tDie_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				// System.out.println("***********");
				// System.out.println("Context: ");
				// System.out.println(context.DB_TargetI2B2_Host);
				// System.out.println(context.DB_TargetI2B2_Instance);
				// System.out.println(context.DB_TargetI2B2_Port);
				// System.out.println(context.DB_TargetI2B2_Password);
				// System.out.println(context.DB_TargetI2B2_Schema);
				// System.out.println(context.DB_TargetI2B2_Username);
				// System.out.println("***********");

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				if (context.truncateProject) {

					tRunJob_3Process(globalMap);
				}

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCConnection_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_3 begin ] start
				 */

				ok_Hash.put("tRunJob_3", false);
				start_Hash.put("tRunJob_3", System.currentTimeMillis());

				currentComponent = "tRunJob_3";

				int tos_count_tRunJob_3 = 0;

				/**
				 * [tRunJob_3 begin ] stop
				 */

				/**
				 * [tRunJob_3 main ] start
				 */

				currentComponent = "tRunJob_3";

				java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();

				paraList_tRunJob_3.add("--father_pid=" + pid);

				paraList_tRunJob_3.add("--root_pid=" + rootPid);

				paraList_tRunJob_3.add("--father_node=tRunJob_3");

				paraList_tRunJob_3.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_3.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_3.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_3 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_3 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_3".equals(tRunJobName_tRunJob_3)
						&& childResumePath_tRunJob_3 != null) {
					paraList_tRunJob_3
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_3.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_3");

				java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_3 = context
						.propertyNames();
				while (propertyNames_tRunJob_3.hasMoreElements()) {
					String key_tRunJob_3 = (String) propertyNames_tRunJob_3
							.nextElement();
					Object value_tRunJob_3 = (Object) context
							.get(key_tRunJob_3);
					paraList_tRunJob_3.add("--context_param " + key_tRunJob_3
							+ "=" + value_tRunJob_3);
				}

				parentContextMap_tRunJob_3.put("folderOutput",
						context.folderOutput);

				parentContextMap_tRunJob_3
						.put("folderMain", context.folderMain);

				parentContextMap_tRunJob_3.put("DB_StagingI2B2_sqlclassname",
						context.DB_StagingI2B2_sqlclassname);

				parentContextMap_tRunJob_3.put("TargetID", context.TargetID);

				parentContextMap_tRunJob_3.put("sql", context.sql);

				parentContextMap_tRunJob_3.put("DB_TargetI2B2_sqlclassname",
						context.DB_TargetI2B2_sqlclassname);

				parentContextMap_tRunJob_3.put("currentQuery",
						context.currentQuery);

				parentContextMap_tRunJob_3.put("truncateProject",
						context.truncateProject);

				parentContextMap_tRunJob_3.put("truncateQueries",
						context.truncateQueries);

				parentContextMap_tRunJob_3.put("DB_StagingI2B2_DatabaseType",
						context.DB_StagingI2B2_DatabaseType);

				parentContextMap_tRunJob_3.put("DB_StagingI2B2_DriverClass",
						context.DB_StagingI2B2_DriverClass);

				parentContextMap_tRunJob_3.put("DB_StagingI2B2_Host",
						context.DB_StagingI2B2_Host);

				parentContextMap_tRunJob_3.put("DB_StagingI2B2_Instance",
						context.DB_StagingI2B2_Instance);

				parentContextMap_tRunJob_3.put("DB_StagingI2B2_jdbcurl",
						context.DB_StagingI2B2_jdbcurl);

				parentContextMap_tRunJob_3.put("DB_StagingI2B2_Password",
						context.DB_StagingI2B2_Password);

				parentContextMap_tRunJob_3.put("DB_StagingI2B2_Port",
						context.DB_StagingI2B2_Port);

				parentContextMap_tRunJob_3.put("DB_StagingI2B2_Schema",
						context.DB_StagingI2B2_Schema);

				parentContextMap_tRunJob_3.put("DB_StagingI2B2_Username",
						context.DB_StagingI2B2_Username);

				parentContextMap_tRunJob_3.put("DB_StagingI2B2_WHType",
						context.DB_StagingI2B2_WHType);

				parentContextMap_tRunJob_3.put("DB_TargetI2B2_DatabaseType",
						context.DB_TargetI2B2_DatabaseType);

				parentContextMap_tRunJob_3.put("DB_TargetI2B2_DriverClass",
						context.DB_TargetI2B2_DriverClass);

				parentContextMap_tRunJob_3.put("DB_TargetI2B2_Host",
						context.DB_TargetI2B2_Host);

				parentContextMap_tRunJob_3.put("DB_TargetI2B2_Instance",
						context.DB_TargetI2B2_Instance);

				parentContextMap_tRunJob_3.put("DB_TargetI2B2_jdbcurl",
						context.DB_TargetI2B2_jdbcurl);

				parentContextMap_tRunJob_3.put("DB_TargetI2B2_Password",
						context.DB_TargetI2B2_Password);

				parentContextMap_tRunJob_3.put("DB_TargetI2B2_Port",
						context.DB_TargetI2B2_Port);

				parentContextMap_tRunJob_3.put("DB_TargetI2B2_Schema",
						context.DB_TargetI2B2_Schema);

				parentContextMap_tRunJob_3.put("DB_TargetI2B2_Username",
						context.DB_TargetI2B2_Username);

				parentContextMap_tRunJob_3.put("DB_TargetI2B2_WHType",
						context.DB_TargetI2B2_WHType);

				Object obj_tRunJob_3 = null;

				obj_tRunJob_3 = context.DB_TargetI2B2_Host;
				paraList_tRunJob_3.add("--context_param DB_StagingI2B2_Host="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
				parentContextMap_tRunJob_3.put("DB_StagingI2B2_Host",
						obj_tRunJob_3);

				obj_tRunJob_3 = context.DB_TargetI2B2_Instance;
				paraList_tRunJob_3
						.add("--context_param DB_StagingI2B2_Instance="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_3));
				parentContextMap_tRunJob_3.put("DB_StagingI2B2_Instance",
						obj_tRunJob_3);

				obj_tRunJob_3 = context.DB_TargetI2B2_Port;
				paraList_tRunJob_3.add("--context_param DB_StagingI2B2_Port="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
				parentContextMap_tRunJob_3.put("DB_StagingI2B2_Port",
						obj_tRunJob_3);

				obj_tRunJob_3 = context.DB_TargetI2B2_Password;
				paraList_tRunJob_3
						.add("--context_param DB_StagingI2B2_Password="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_3));
				parentContextMap_tRunJob_3.put("DB_StagingI2B2_Password",
						obj_tRunJob_3);

				obj_tRunJob_3 = context.DB_TargetI2B2_Schema;
				paraList_tRunJob_3.add("--context_param DB_StagingI2B2_Schema="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
				parentContextMap_tRunJob_3.put("DB_StagingI2B2_Schema",
						obj_tRunJob_3);

				obj_tRunJob_3 = context.DB_TargetI2B2_Username;
				paraList_tRunJob_3
						.add("--context_param DB_StagingI2B2_Username="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_3));
				parentContextMap_tRunJob_3.put("DB_StagingI2B2_Username",
						obj_tRunJob_3);

				obj_tRunJob_3 = true;
				paraList_tRunJob_3.add("--context_param truncateQueries="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
				parentContextMap_tRunJob_3
						.put("truncateQueries", obj_tRunJob_3);

				obj_tRunJob_3 = context.DB_TargetI2B2_Schema;
				paraList_tRunJob_3.add("--context_param project="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
				parentContextMap_tRunJob_3.put("project", obj_tRunJob_3);

				obj_tRunJob_3 = context.DB_TargetI2B2_DatabaseType;
				paraList_tRunJob_3
						.add("--context_param DB_StagingI2B2_DatabaseType="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_3));
				parentContextMap_tRunJob_3.put("DB_StagingI2B2_DatabaseType",
						obj_tRunJob_3);

				i2b2_postgres2.idrt_truncate_tables_0_1.IDRT_Truncate_Tables childJob_tRunJob_3 = new i2b2_postgres2.idrt_truncate_tables_0_1.IDRT_Truncate_Tables();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_3) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_3 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_3 : talendDataSources_tRunJob_3
							.entrySet()) {
						dataSources_tRunJob_3.put(
								talendDataSourceEntry_tRunJob_3.getKey(),
								talendDataSourceEntry_tRunJob_3.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_3.setDataSources(dataSources_tRunJob_3);
				}

				childJob_tRunJob_3.parentContextMap = parentContextMap_tRunJob_3;

				String[][] childReturn_tRunJob_3 = childJob_tRunJob_3
						.runJob((String[]) paraList_tRunJob_3
								.toArray(new String[paraList_tRunJob_3.size()]));

				errorCode = childJob_tRunJob_3.getErrorCode();

				if (childJob_tRunJob_3.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_3_CHILD_RETURN_CODE",
							childJob_tRunJob_3.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_3
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_3_CHILD_RETURN_CODE",
							childJob_tRunJob_3.getErrorCode());
				}
				if (childJob_tRunJob_3.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_3.getExceptionStackTrace());
				}

				tos_count_tRunJob_3++;

				/**
				 * [tRunJob_3 main ] stop
				 */

				/**
				 * [tRunJob_3 end ] start
				 */

				currentComponent = "tRunJob_3";

				ok_Hash.put("tRunJob_3", true);
				end_Hash.put("tRunJob_3", System.currentTimeMillis());

				/**
				 * [tRunJob_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_3 finally ] start
				 */

				currentComponent = "tRunJob_3";

				/**
				 * [tRunJob_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_1 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_1", false);
				start_Hash.put("tCreateTemporaryFile_1",
						System.currentTimeMillis());

				currentComponent = "tCreateTemporaryFile_1";

				int tos_count_tCreateTemporaryFile_1 = 0;

				java.io.File dir_tCreateTemporaryFile_1 = new java.io.File(
						context.folderMain + context.folderOutput);
				dir_tCreateTemporaryFile_1.mkdirs();
				String name_tCreateTemporaryFile_1 = "talend_01_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_1 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_1 = new java.io.File(
						dir_tCreateTemporaryFile_1, name_tCreateTemporaryFile_1
								+ "." + suffix_tCreateTemporaryFile_1);
				if (file_tCreateTemporaryFile_1.createNewFile()) {
					file_tCreateTemporaryFile_1.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_1_FILEPATH",
						file_tCreateTemporaryFile_1.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_1 begin ] stop
				 */

				/**
				 * [tCreateTemporaryFile_1 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_1";

				tos_count_tCreateTemporaryFile_1++;

				/**
				 * [tCreateTemporaryFile_1 main ] stop
				 */

				/**
				 * [tCreateTemporaryFile_1 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_1";

				ok_Hash.put("tCreateTemporaryFile_1", true);
				end_Hash.put("tCreateTemporaryFile_1",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tLibraryLoad_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tCreateTemporaryFile_1 finally ] start
				 */

				currentComponent = "tCreateTemporaryFile_1";

				/**
				 * [tCreateTemporaryFile_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tCreateTemporaryFile_1_SUBPROCESS_STATE", 1);
	}

	public void tLibraryLoad_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLibraryLoad_1 begin ] start
				 */

				ok_Hash.put("tLibraryLoad_1", false);
				start_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				currentComponent = "tLibraryLoad_1";

				int tos_count_tLibraryLoad_1 = 0;

				/**
				 * [tLibraryLoad_1 begin ] stop
				 */

				/**
				 * [tLibraryLoad_1 main ] start
				 */

				currentComponent = "tLibraryLoad_1";

				tos_count_tLibraryLoad_1++;

				/**
				 * [tLibraryLoad_1 main ] stop
				 */

				/**
				 * [tLibraryLoad_1 end ] start
				 */

				currentComponent = "tLibraryLoad_1";

				ok_Hash.put("tLibraryLoad_1", true);
				end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				/**
				 * [tLibraryLoad_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tLibraryLoad_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLibraryLoad_1 finally ] start
				 */

				currentComponent = "tLibraryLoad_1";

				/**
				 * [tLibraryLoad_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_2 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_2", false);
				start_Hash.put("tCreateTemporaryFile_2",
						System.currentTimeMillis());

				currentComponent = "tCreateTemporaryFile_2";

				int tos_count_tCreateTemporaryFile_2 = 0;

				java.io.File dir_tCreateTemporaryFile_2 = new java.io.File(
						context.folderMain + context.folderOutput);
				dir_tCreateTemporaryFile_2.mkdirs();
				String name_tCreateTemporaryFile_2 = "talend_02_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_2 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_2 = new java.io.File(
						dir_tCreateTemporaryFile_2, name_tCreateTemporaryFile_2
								+ "." + suffix_tCreateTemporaryFile_2);
				if (file_tCreateTemporaryFile_2.createNewFile()) {
					file_tCreateTemporaryFile_2.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_2_FILEPATH",
						file_tCreateTemporaryFile_2.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_2 begin ] stop
				 */

				/**
				 * [tCreateTemporaryFile_2 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_2";

				tos_count_tCreateTemporaryFile_2++;

				/**
				 * [tCreateTemporaryFile_2 main ] stop
				 */

				/**
				 * [tCreateTemporaryFile_2 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_2";

				ok_Hash.put("tCreateTemporaryFile_2", true);
				end_Hash.put("tCreateTemporaryFile_2",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_2 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tCreateTemporaryFile_2 finally ] start
				 */

				currentComponent = "tCreateTemporaryFile_2";

				/**
				 * [tCreateTemporaryFile_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tCreateTemporaryFile_2_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_3 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_3", false);
				start_Hash.put("tCreateTemporaryFile_3",
						System.currentTimeMillis());

				currentComponent = "tCreateTemporaryFile_3";

				int tos_count_tCreateTemporaryFile_3 = 0;

				java.io.File dir_tCreateTemporaryFile_3 = new java.io.File(
						context.folderMain + context.folderOutput);
				dir_tCreateTemporaryFile_3.mkdirs();
				String name_tCreateTemporaryFile_3 = "talend_03_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_3 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_3 = new java.io.File(
						dir_tCreateTemporaryFile_3, name_tCreateTemporaryFile_3
								+ "." + suffix_tCreateTemporaryFile_3);
				if (file_tCreateTemporaryFile_3.createNewFile()) {
					file_tCreateTemporaryFile_3.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_3_FILEPATH",
						file_tCreateTemporaryFile_3.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_3 begin ] stop
				 */

				/**
				 * [tCreateTemporaryFile_3 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_3";

				tos_count_tCreateTemporaryFile_3++;

				/**
				 * [tCreateTemporaryFile_3 main ] stop
				 */

				/**
				 * [tCreateTemporaryFile_3 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_3";

				ok_Hash.put("tCreateTemporaryFile_3", true);
				end_Hash.put("tCreateTemporaryFile_3",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_3 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_3:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tCreateTemporaryFile_3 finally ] start
				 */

				currentComponent = "tCreateTemporaryFile_3";

				/**
				 * [tCreateTemporaryFile_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tCreateTemporaryFile_3_SUBPROCESS_STATE", 1);
	}

	public static class from_src_ontStruct implements
			routines.system.IPersistableComparableLookupRow<from_src_ontStruct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal C_HLEVEL;

		public BigDecimal getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String C_SYNONYM_CD;

		public String getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public BigDecimal C_TOTALNUM;

		public BigDecimal getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public String C_COLUMNDATATYPE;

		public String getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public Object C_COMMENT;

		public Object getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.C_FULLNAME == null) ? 0 : this.C_FULLNAME
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final from_src_ontStruct other = (from_src_ontStruct) obj;

			if (this.C_FULLNAME == null) {
				if (other.C_FULLNAME != null)
					return false;

			} else if (!this.C_FULLNAME.equals(other.C_FULLNAME))

				return false;

			return true;
		}

		public void copyDataTo(from_src_ontStruct other) {

			other.C_HLEVEL = this.C_HLEVEL;
			other.C_FULLNAME = this.C_FULLNAME;
			other.C_NAME = this.C_NAME;
			other.C_SYNONYM_CD = this.C_SYNONYM_CD;
			other.C_VISUALATTRIBUTES = this.C_VISUALATTRIBUTES;
			other.C_TOTALNUM = this.C_TOTALNUM;
			other.C_BASECODE = this.C_BASECODE;
			other.C_METADATAXML = this.C_METADATAXML;
			other.C_FACTTABLECOLUMN = this.C_FACTTABLECOLUMN;
			other.C_TABLENAME = this.C_TABLENAME;
			other.C_COLUMNNAME = this.C_COLUMNNAME;
			other.C_COLUMNDATATYPE = this.C_COLUMNDATATYPE;
			other.C_OPERATOR = this.C_OPERATOR;
			other.C_DIMCODE = this.C_DIMCODE;
			other.C_COMMENT = this.C_COMMENT;
			other.C_TOOLTIP = this.C_TOOLTIP;
			other.M_APPLIED_PATH = this.M_APPLIED_PATH;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.VALUETYPE_CD = this.VALUETYPE_CD;
			other.M_EXCLUSION_CD = this.M_EXCLUSION_CD;
			other.C_PATH = this.C_PATH;
			other.C_SYMBOL = this.C_SYMBOL;

		}

		public void copyKeysDataTo(from_src_ontStruct other) {

			other.C_FULLNAME = this.C_FULLNAME;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.C_FULLNAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.C_FULLNAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.C_HLEVEL = (BigDecimal) ois.readObject();

				this.C_NAME = readString(dis, ois);

				this.C_SYNONYM_CD = readString(dis, ois);

				this.C_VISUALATTRIBUTES = readString(dis, ois);

				this.C_TOTALNUM = (BigDecimal) ois.readObject();

				this.C_BASECODE = readString(dis, ois);

				this.C_METADATAXML = readString(dis, ois);

				this.C_FACTTABLECOLUMN = readString(dis, ois);

				this.C_TABLENAME = readString(dis, ois);

				this.C_COLUMNNAME = readString(dis, ois);

				this.C_COLUMNDATATYPE = readString(dis, ois);

				this.C_OPERATOR = readString(dis, ois);

				this.C_DIMCODE = readString(dis, ois);

				this.C_COMMENT = (Object) ois.readObject();

				this.C_TOOLTIP = readString(dis, ois);

				this.M_APPLIED_PATH = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.VALUETYPE_CD = readString(dis, ois);

				this.M_EXCLUSION_CD = readString(dis, ois);

				this.C_PATH = readString(dis, ois);

				this.C_SYMBOL = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				oos.writeObject(this.C_HLEVEL);

				writeString(this.C_NAME, dos, oos);

				writeString(this.C_SYNONYM_CD, dos, oos);

				writeString(this.C_VISUALATTRIBUTES, dos, oos);

				oos.writeObject(this.C_TOTALNUM);

				writeString(this.C_BASECODE, dos, oos);

				writeString(this.C_METADATAXML, dos, oos);

				writeString(this.C_FACTTABLECOLUMN, dos, oos);

				writeString(this.C_TABLENAME, dos, oos);

				writeString(this.C_COLUMNNAME, dos, oos);

				writeString(this.C_COLUMNDATATYPE, dos, oos);

				writeString(this.C_OPERATOR, dos, oos);

				writeString(this.C_DIMCODE, dos, oos);

				oos.writeObject(this.C_COMMENT);

				writeString(this.C_TOOLTIP, dos, oos);

				writeString(this.M_APPLIED_PATH, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.VALUETYPE_CD, dos, oos);

				writeString(this.M_EXCLUSION_CD, dos, oos);

				writeString(this.C_PATH, dos, oos);

				writeString(this.C_SYMBOL, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + C_SYNONYM_CD);
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + String.valueOf(C_TOTALNUM));
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + C_COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + String.valueOf(C_COMMENT));
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(from_src_ontStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.C_FULLNAME,
					other.C_FULLNAME);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				from_src_ontStruct from_src_ont = new from_src_ontStruct();

				/**
				 * [tAdvancedHash_from_src_ont begin ] start
				 */

				ok_Hash.put("tAdvancedHash_from_src_ont", false);
				start_Hash.put("tAdvancedHash_from_src_ont",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_from_src_ont";

				int tos_count_tAdvancedHash_from_src_ont = 0;

				// connection name:from_src_ont
				// source node:tFileInputDelimited_2 -
				// inputs:(after_tFileInputDelimited_1)
				// outputs:(from_src_ont,from_src_ont) | target
				// node:tAdvancedHash_from_src_ont - inputs:(from_src_ont)
				// outputs:()
				// linked node: tMap_1 - inputs:(from_OE_ONT,from_src_ont)
				// outputs:(target_ont,to_mod_dim,out9)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_from_src_ont = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<from_src_ontStruct> tHash_Lookup_from_src_ont = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<from_src_ontStruct> getLookup(matchingModeEnum_from_src_ont);

				globalMap.put("tHash_Lookup_from_src_ont",
						tHash_Lookup_from_src_ont);

				/**
				 * [tAdvancedHash_from_src_ont begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;

				char fieldSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_2 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_2 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_2 = /**
				 * Start field
				 * tFileInputDelimited_2:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_2_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_2:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;

				try {

					String[] rowtFileInputDelimited_2 = null;
					int currentLinetFileInputDelimited_2 = 0;
					int outputLinetFileInputDelimited_2 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_2 = 0;
							if (footer_value_tFileInputDelimited_2 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_2,
									fieldSeparator_tFileInputDelimited_2[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_2)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_2[0]);
						}

						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
							csvReadertFileInputDelimited_2.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_2[0]);

						csvReadertFileInputDelimited_2.setQuoteChar('"');

						csvReadertFileInputDelimited_2
								.setEscapeChar(csvReadertFileInputDelimited_2
										.getQuoteChar());

						if (footer_tFileInputDelimited_2 > 0) {
							for (totalLinetFileInputDelimited_2 = 0; totalLinetFileInputDelimited_2 < 1; totalLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
							csvReadertFileInputDelimited_2
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_2.readNext()) {

								rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
										.getValues();
								if (!(rowtFileInputDelimited_2.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_2[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_2++;

								}

							}
							int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2
									- footer_tFileInputDelimited_2 < 0 ? 0
									: totalLinetFileInputDelimited_2
											- footer_tFileInputDelimited_2;
							if (lastLinetFileInputDelimited_2 > 0) {
								lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2
										: lastLineTemptFileInputDelimited_2;
							} else {
								lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
							}

							csvReadertFileInputDelimited_2.close();
							if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_2,
										fieldSeparator_tFileInputDelimited_2[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_2)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_2[0]);
							}
							csvReadertFileInputDelimited_2
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
								csvReadertFileInputDelimited_2
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_2[0]);

							csvReadertFileInputDelimited_2.setQuoteChar('"');

							csvReadertFileInputDelimited_2
									.setEscapeChar(csvReadertFileInputDelimited_2
											.getQuoteChar());

						}

						if (limittFileInputDelimited_2 != 0) {
							for (currentLinetFileInputDelimited_2 = 0; currentLinetFileInputDelimited_2 < 1; currentLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
						}
						csvReadertFileInputDelimited_2
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_2 != 0
							&& csvReadertFileInputDelimited_2 != null
							&& csvReadertFileInputDelimited_2.readNext()) {

						rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
								.getValues();

						if (rowtFileInputDelimited_2.length == 1
								&& ("\015").equals(rowtFileInputDelimited_2[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_2++;

						if (lastLinetFileInputDelimited_2 > -1
								&& currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
							break;
						}
						outputLinetFileInputDelimited_2++;
						if (limittFileInputDelimited_2 > 0
								&& outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
							break;
						}

						from_src_ont = null;

						from_src_ont = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						from_src_ont = new from_src_ontStruct();
						try {

							char fieldSeparator_tFileInputDelimited_2_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_2_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_2.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_2[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								from_src_ont.C_HLEVEL = null;

								from_src_ont.C_FULLNAME = null;

								from_src_ont.C_NAME = null;

								from_src_ont.C_SYNONYM_CD = null;

								from_src_ont.C_VISUALATTRIBUTES = null;

								from_src_ont.C_TOTALNUM = null;

								from_src_ont.C_BASECODE = null;

								from_src_ont.C_METADATAXML = null;

								from_src_ont.C_FACTTABLECOLUMN = null;

								from_src_ont.C_TABLENAME = null;

								from_src_ont.C_COLUMNNAME = null;

								from_src_ont.C_COLUMNDATATYPE = null;

								from_src_ont.C_OPERATOR = null;

								from_src_ont.C_DIMCODE = null;

								from_src_ont.C_COMMENT = null;

								from_src_ont.C_TOOLTIP = null;

								from_src_ont.M_APPLIED_PATH = null;

								from_src_ont.UPDATE_DATE = null;

								from_src_ont.DOWNLOAD_DATE = null;

								from_src_ont.IMPORT_DATE = null;

								from_src_ont.SOURCESYSTEM_CD = null;

								from_src_ont.VALUETYPE_CD = null;

								from_src_ont.M_EXCLUSION_CD = null;

								from_src_ont.C_PATH = null;

								from_src_ont.C_SYMBOL = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_2 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_2 = 0;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										from_src_ont.C_HLEVEL = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);

									} else {
										from_src_ont.C_HLEVEL = null;
									}

								} else {
									from_src_ont.C_HLEVEL = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 1;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.C_FULLNAME = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.C_FULLNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 2;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.C_NAME = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.C_NAME = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 3;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.C_SYNONYM_CD = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.C_SYNONYM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 4;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.C_VISUALATTRIBUTES = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.C_VISUALATTRIBUTES = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 5;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										from_src_ont.C_TOTALNUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);

									} else {
										from_src_ont.C_TOTALNUM = null;
									}

								} else {
									from_src_ont.C_TOTALNUM = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 6;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.C_BASECODE = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.C_BASECODE = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 7;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.C_METADATAXML = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.C_METADATAXML = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 8;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.C_FACTTABLECOLUMN = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.C_FACTTABLECOLUMN = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 9;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.C_TABLENAME = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.C_TABLENAME = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 10;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.C_COLUMNNAME = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.C_COLUMNNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 11;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.C_COLUMNDATATYPE = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.C_COLUMNDATATYPE = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 12;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.C_OPERATOR = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.C_OPERATOR = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 13;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.C_DIMCODE = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.C_DIMCODE = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 14;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.C_COMMENT = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.C_COMMENT = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 15;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.C_TOOLTIP = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.C_TOOLTIP = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 16;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.M_APPLIED_PATH = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.M_APPLIED_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 17;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										from_src_ont.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
														"dd-MM-yyyy");

									} else {
										from_src_ont.UPDATE_DATE = null;
									}

								} else {
									from_src_ont.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 18;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										from_src_ont.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
														"dd-MM-yyyy");

									} else {
										from_src_ont.DOWNLOAD_DATE = null;
									}

								} else {
									from_src_ont.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 19;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {

										from_src_ont.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
														"dd-MM-yyyy");

									} else {
										from_src_ont.IMPORT_DATE = null;
									}

								} else {
									from_src_ont.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 20;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.SOURCESYSTEM_CD = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 21;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.VALUETYPE_CD = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.VALUETYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 22;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.M_EXCLUSION_CD = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.M_EXCLUSION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 23;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.C_PATH = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.C_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 24;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									from_src_ont.C_SYMBOL = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									from_src_ont.C_SYMBOL = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							from_src_ont = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */
						// Start of branch "from_src_ont"
						if (from_src_ont != null) {

							/**
							 * [tAdvancedHash_from_src_ont main ] start
							 */

							currentComponent = "tAdvancedHash_from_src_ont";

							from_src_ontStruct from_src_ont_HashRow = new from_src_ontStruct();

							from_src_ont_HashRow.C_HLEVEL = from_src_ont.C_HLEVEL;

							from_src_ont_HashRow.C_FULLNAME = from_src_ont.C_FULLNAME;

							from_src_ont_HashRow.C_NAME = from_src_ont.C_NAME;

							from_src_ont_HashRow.C_SYNONYM_CD = from_src_ont.C_SYNONYM_CD;

							from_src_ont_HashRow.C_VISUALATTRIBUTES = from_src_ont.C_VISUALATTRIBUTES;

							from_src_ont_HashRow.C_TOTALNUM = from_src_ont.C_TOTALNUM;

							from_src_ont_HashRow.C_BASECODE = from_src_ont.C_BASECODE;

							from_src_ont_HashRow.C_METADATAXML = from_src_ont.C_METADATAXML;

							from_src_ont_HashRow.C_FACTTABLECOLUMN = from_src_ont.C_FACTTABLECOLUMN;

							from_src_ont_HashRow.C_TABLENAME = from_src_ont.C_TABLENAME;

							from_src_ont_HashRow.C_COLUMNNAME = from_src_ont.C_COLUMNNAME;

							from_src_ont_HashRow.C_COLUMNDATATYPE = from_src_ont.C_COLUMNDATATYPE;

							from_src_ont_HashRow.C_OPERATOR = from_src_ont.C_OPERATOR;

							from_src_ont_HashRow.C_DIMCODE = from_src_ont.C_DIMCODE;

							from_src_ont_HashRow.C_COMMENT = from_src_ont.C_COMMENT;

							from_src_ont_HashRow.C_TOOLTIP = from_src_ont.C_TOOLTIP;

							from_src_ont_HashRow.M_APPLIED_PATH = from_src_ont.M_APPLIED_PATH;

							from_src_ont_HashRow.UPDATE_DATE = from_src_ont.UPDATE_DATE;

							from_src_ont_HashRow.DOWNLOAD_DATE = from_src_ont.DOWNLOAD_DATE;

							from_src_ont_HashRow.IMPORT_DATE = from_src_ont.IMPORT_DATE;

							from_src_ont_HashRow.SOURCESYSTEM_CD = from_src_ont.SOURCESYSTEM_CD;

							from_src_ont_HashRow.VALUETYPE_CD = from_src_ont.VALUETYPE_CD;

							from_src_ont_HashRow.M_EXCLUSION_CD = from_src_ont.M_EXCLUSION_CD;

							from_src_ont_HashRow.C_PATH = from_src_ont.C_PATH;

							from_src_ont_HashRow.C_SYMBOL = from_src_ont.C_SYMBOL;

							tHash_Lookup_from_src_ont.put(from_src_ont_HashRow);

							tos_count_tAdvancedHash_from_src_ont++;

							/**
							 * [tAdvancedHash_from_src_ont main ] stop
							 */

						} // End of branch "from_src_ont"

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						nb_line_tFileInputDelimited_2++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_2 != null) {
							csvReadertFileInputDelimited_2.close();
						}
					}
					if (csvReadertFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE",
								nb_line_tFileInputDelimited_2);
					}

				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_from_src_ont end ] start
				 */

				currentComponent = "tAdvancedHash_from_src_ont";

				tHash_Lookup_from_src_ont.endPut();

				ok_Hash.put("tAdvancedHash_from_src_ont", true);
				end_Hash.put("tAdvancedHash_from_src_ont",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_from_src_ont end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_from_src_ont finally ] start
				 */

				currentComponent = "tAdvancedHash_from_src_ont";

				/**
				 * [tAdvancedHash_from_src_ont finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class row47Struct implements
			routines.system.IPersistableComparableLookupRow<row47Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String MODIFIER_PATH;

		public String getMODIFIER_PATH() {
			return this.MODIFIER_PATH;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String MODIFIER_BLOB;

		public String getMODIFIER_BLOB() {
			return this.MODIFIER_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.MODIFIER_PATH == null) ? 0
								: this.MODIFIER_PATH.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row47Struct other = (row47Struct) obj;

			if (this.MODIFIER_PATH == null) {
				if (other.MODIFIER_PATH != null)
					return false;

			} else if (!this.MODIFIER_PATH.equals(other.MODIFIER_PATH))

				return false;

			return true;
		}

		public void copyDataTo(row47Struct other) {

			other.MODIFIER_PATH = this.MODIFIER_PATH;
			other.MODIFIER_CD = this.MODIFIER_CD;
			other.NAME_CHAR = this.NAME_CHAR;
			other.MODIFIER_BLOB = this.MODIFIER_BLOB;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row47Struct other) {

			other.MODIFIER_PATH = this.MODIFIER_PATH;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.MODIFIER_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MODIFIER_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.MODIFIER_CD = readString(dis, ois);

				this.NAME_CHAR = readString(dis, ois);

				this.MODIFIER_BLOB = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.MODIFIER_CD, dos, oos);

				writeString(this.NAME_CHAR, dos, oos);

				writeString(this.MODIFIER_BLOB, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MODIFIER_PATH=" + MODIFIER_PATH);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",MODIFIER_BLOB=" + MODIFIER_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row47Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.MODIFIER_PATH,
					other.MODIFIER_PATH);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_31Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_31_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row47Struct row47 = new row47Struct();

				/**
				 * [tAdvancedHash_row47 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row47", false);
				start_Hash.put("tAdvancedHash_row47",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row47";

				int tos_count_tAdvancedHash_row47 = 0;

				// connection name:row47
				// source node:tFileInputDelimited_31 -
				// inputs:(after_tFileInputDelimited_1) outputs:(row47,row47) |
				// target node:tAdvancedHash_row47 - inputs:(row47) outputs:()
				// linked node: tMap_19 - inputs:(row11,row47)
				// outputs:(copyOfto_conc_dim)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row47 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row47Struct> tHash_Lookup_row47 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row47Struct> getLookup(matchingModeEnum_row47);

				globalMap.put("tHash_Lookup_row47", tHash_Lookup_row47);

				/**
				 * [tAdvancedHash_row47 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_31 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_31", false);
				start_Hash.put("tFileInputDelimited_31",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_31";

				int tos_count_tFileInputDelimited_31 = 0;

				int nb_line_tFileInputDelimited_31 = 0;
				int footer_tFileInputDelimited_31 = 0;
				int totalLinetFileInputDelimited_31 = 0;
				int limittFileInputDelimited_31 = -1;
				int lastLinetFileInputDelimited_31 = -1;

				char fieldSeparator_tFileInputDelimited_31[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_31 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_31[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_31 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_31 = /**
				 * Start field
				 * tFileInputDelimited_31:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_10_FILEPATH"))/**
				 * 
				 * End field tFileInputDelimited_31:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_31 = null;

				try {

					String[] rowtFileInputDelimited_31 = null;
					int currentLinetFileInputDelimited_31 = 0;
					int outputLinetFileInputDelimited_31 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_31 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_31 = 0;
							if (footer_value_tFileInputDelimited_31 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_31 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_31,
									fieldSeparator_tFileInputDelimited_31[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_31 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_31)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_31[0]);
						}

						csvReadertFileInputDelimited_31
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_31[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_31[0] != '\r'))
							csvReadertFileInputDelimited_31.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_31[0]);

						csvReadertFileInputDelimited_31.setQuoteChar('"');

						csvReadertFileInputDelimited_31
								.setEscapeChar(csvReadertFileInputDelimited_31
										.getQuoteChar());

						if (footer_tFileInputDelimited_31 > 0) {
							for (totalLinetFileInputDelimited_31 = 0; totalLinetFileInputDelimited_31 < 1; totalLinetFileInputDelimited_31++) {
								csvReadertFileInputDelimited_31.readNext();
							}
							csvReadertFileInputDelimited_31
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_31.readNext()) {

								rowtFileInputDelimited_31 = csvReadertFileInputDelimited_31
										.getValues();
								if (!(rowtFileInputDelimited_31.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_31[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_31++;

								}

							}
							int lastLineTemptFileInputDelimited_31 = totalLinetFileInputDelimited_31
									- footer_tFileInputDelimited_31 < 0 ? 0
									: totalLinetFileInputDelimited_31
											- footer_tFileInputDelimited_31;
							if (lastLinetFileInputDelimited_31 > 0) {
								lastLinetFileInputDelimited_31 = lastLinetFileInputDelimited_31 < lastLineTemptFileInputDelimited_31 ? lastLinetFileInputDelimited_31
										: lastLineTemptFileInputDelimited_31;
							} else {
								lastLinetFileInputDelimited_31 = lastLineTemptFileInputDelimited_31;
							}

							csvReadertFileInputDelimited_31.close();
							if (filename_tFileInputDelimited_31 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_31 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_31,
										fieldSeparator_tFileInputDelimited_31[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_31 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_31)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_31[0]);
							}
							csvReadertFileInputDelimited_31
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_31[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_31[0] != '\r'))
								csvReadertFileInputDelimited_31
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_31[0]);

							csvReadertFileInputDelimited_31.setQuoteChar('"');

							csvReadertFileInputDelimited_31
									.setEscapeChar(csvReadertFileInputDelimited_31
											.getQuoteChar());

						}

						if (limittFileInputDelimited_31 != 0) {
							for (currentLinetFileInputDelimited_31 = 0; currentLinetFileInputDelimited_31 < 1; currentLinetFileInputDelimited_31++) {
								csvReadertFileInputDelimited_31.readNext();
							}
						}
						csvReadertFileInputDelimited_31
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_31 != 0
							&& csvReadertFileInputDelimited_31 != null
							&& csvReadertFileInputDelimited_31.readNext()) {

						rowtFileInputDelimited_31 = csvReadertFileInputDelimited_31
								.getValues();

						if (rowtFileInputDelimited_31.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_31[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_31++;

						if (lastLinetFileInputDelimited_31 > -1
								&& currentLinetFileInputDelimited_31 > lastLinetFileInputDelimited_31) {
							break;
						}
						outputLinetFileInputDelimited_31++;
						if (limittFileInputDelimited_31 > 0
								&& outputLinetFileInputDelimited_31 > limittFileInputDelimited_31) {
							break;
						}

						row47 = null;

						row47 = null;

						boolean whetherReject_tFileInputDelimited_31 = false;
						row47 = new row47Struct();
						try {

							char fieldSeparator_tFileInputDelimited_31_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_31_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_31.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_31[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row47.MODIFIER_PATH = null;

								row47.MODIFIER_CD = null;

								row47.NAME_CHAR = null;

								row47.MODIFIER_BLOB = null;

								row47.UPDATE_DATE = null;

								row47.DOWNLOAD_DATE = null;

								row47.IMPORT_DATE = null;

								row47.SOURCESYSTEM_CD = null;

								row47.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_31 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_31 = 0;

								if (columnIndexWithD_tFileInputDelimited_31 < rowtFileInputDelimited_31.length) {

									row47.MODIFIER_PATH = rowtFileInputDelimited_31[columnIndexWithD_tFileInputDelimited_31];

								} else {
									row47.MODIFIER_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_31 = 1;

								if (columnIndexWithD_tFileInputDelimited_31 < rowtFileInputDelimited_31.length) {

									row47.MODIFIER_CD = rowtFileInputDelimited_31[columnIndexWithD_tFileInputDelimited_31];

								} else {
									row47.MODIFIER_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_31 = 2;

								if (columnIndexWithD_tFileInputDelimited_31 < rowtFileInputDelimited_31.length) {

									row47.NAME_CHAR = rowtFileInputDelimited_31[columnIndexWithD_tFileInputDelimited_31];

								} else {
									row47.NAME_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_31 = 3;

								if (columnIndexWithD_tFileInputDelimited_31 < rowtFileInputDelimited_31.length) {

									row47.MODIFIER_BLOB = rowtFileInputDelimited_31[columnIndexWithD_tFileInputDelimited_31];

								} else {
									row47.MODIFIER_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_31 = 4;

								if (columnIndexWithD_tFileInputDelimited_31 < rowtFileInputDelimited_31.length) {

									if (rowtFileInputDelimited_31[columnIndexWithD_tFileInputDelimited_31]
											.length() > 0) {

										row47.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_31[columnIndexWithD_tFileInputDelimited_31],
														"dd-MM-yyyy");

									} else {
										row47.UPDATE_DATE = null;
									}

								} else {
									row47.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_31 = 5;

								if (columnIndexWithD_tFileInputDelimited_31 < rowtFileInputDelimited_31.length) {

									if (rowtFileInputDelimited_31[columnIndexWithD_tFileInputDelimited_31]
											.length() > 0) {

										row47.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_31[columnIndexWithD_tFileInputDelimited_31],
														"dd-MM-yyyy");

									} else {
										row47.DOWNLOAD_DATE = null;
									}

								} else {
									row47.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_31 = 6;

								if (columnIndexWithD_tFileInputDelimited_31 < rowtFileInputDelimited_31.length) {

									if (rowtFileInputDelimited_31[columnIndexWithD_tFileInputDelimited_31]
											.length() > 0) {

										row47.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_31[columnIndexWithD_tFileInputDelimited_31],
														"dd-MM-yyyy");

									} else {
										row47.IMPORT_DATE = null;
									}

								} else {
									row47.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_31 = 7;

								if (columnIndexWithD_tFileInputDelimited_31 < rowtFileInputDelimited_31.length) {

									row47.SOURCESYSTEM_CD = rowtFileInputDelimited_31[columnIndexWithD_tFileInputDelimited_31];

								} else {
									row47.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_31 = 8;

								if (columnIndexWithD_tFileInputDelimited_31 < rowtFileInputDelimited_31.length) {

									row47.UPLOAD_ID = rowtFileInputDelimited_31[columnIndexWithD_tFileInputDelimited_31];

								} else {
									row47.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_31 = true;

							System.err.println(e.getMessage());
							row47 = null;

						}

						/**
						 * [tFileInputDelimited_31 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_31 main ] start
						 */

						currentComponent = "tFileInputDelimited_31";

						tos_count_tFileInputDelimited_31++;

						/**
						 * [tFileInputDelimited_31 main ] stop
						 */
						// Start of branch "row47"
						if (row47 != null) {

							/**
							 * [tAdvancedHash_row47 main ] start
							 */

							currentComponent = "tAdvancedHash_row47";

							row47Struct row47_HashRow = new row47Struct();

							row47_HashRow.MODIFIER_PATH = row47.MODIFIER_PATH;

							row47_HashRow.MODIFIER_CD = row47.MODIFIER_CD;

							row47_HashRow.NAME_CHAR = row47.NAME_CHAR;

							row47_HashRow.MODIFIER_BLOB = row47.MODIFIER_BLOB;

							row47_HashRow.UPDATE_DATE = row47.UPDATE_DATE;

							row47_HashRow.DOWNLOAD_DATE = row47.DOWNLOAD_DATE;

							row47_HashRow.IMPORT_DATE = row47.IMPORT_DATE;

							row47_HashRow.SOURCESYSTEM_CD = row47.SOURCESYSTEM_CD;

							row47_HashRow.UPLOAD_ID = row47.UPLOAD_ID;

							tHash_Lookup_row47.put(row47_HashRow);

							tos_count_tAdvancedHash_row47++;

							/**
							 * [tAdvancedHash_row47 main ] stop
							 */

						} // End of branch "row47"

						/**
						 * [tFileInputDelimited_31 end ] start
						 */

						currentComponent = "tFileInputDelimited_31";

						nb_line_tFileInputDelimited_31++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_31 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_31 != null) {
							csvReadertFileInputDelimited_31.close();
						}
					}
					if (csvReadertFileInputDelimited_31 != null) {
						globalMap.put("tFileInputDelimited_31_NB_LINE",
								nb_line_tFileInputDelimited_31);
					}

				}

				ok_Hash.put("tFileInputDelimited_31", true);
				end_Hash.put("tFileInputDelimited_31",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_31 end ] stop
				 */

				/**
				 * [tAdvancedHash_row47 end ] start
				 */

				currentComponent = "tAdvancedHash_row47";

				tHash_Lookup_row47.endPut();

				ok_Hash.put("tAdvancedHash_row47", true);
				end_Hash.put("tAdvancedHash_row47", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row47 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_31 finally ] start
				 */

				currentComponent = "tFileInputDelimited_31";

				/**
				 * [tFileInputDelimited_31 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row47 finally ] start
				 */

				currentComponent = "tAdvancedHash_row47";

				/**
				 * [tAdvancedHash_row47 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_31_SUBPROCESS_STATE", 1);
	}

	public static class row49Struct implements
			routines.system.IPersistableComparableLookupRow<row49Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.CONCEPT_PATH == null) ? 0 : this.CONCEPT_PATH
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row49Struct other = (row49Struct) obj;

			if (this.CONCEPT_PATH == null) {
				if (other.CONCEPT_PATH != null)
					return false;

			} else if (!this.CONCEPT_PATH.equals(other.CONCEPT_PATH))

				return false;

			return true;
		}

		public void copyDataTo(row49Struct other) {

			other.CONCEPT_PATH = this.CONCEPT_PATH;
			other.CONCEPT_CD = this.CONCEPT_CD;
			other.NAME_CHAR = this.NAME_CHAR;
			other.CONCEPT_BLOB = this.CONCEPT_BLOB;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row49Struct other) {

			other.CONCEPT_PATH = this.CONCEPT_PATH;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.CONCEPT_CD = readString(dis, ois);

				this.NAME_CHAR = readString(dis, ois);

				this.CONCEPT_BLOB = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.CONCEPT_CD, dos, oos);

				writeString(this.NAME_CHAR, dos, oos);

				writeString(this.CONCEPT_BLOB, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row49Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CONCEPT_PATH,
					other.CONCEPT_PATH);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_33Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_33_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row49Struct row49 = new row49Struct();

				/**
				 * [tAdvancedHash_row49 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row49", false);
				start_Hash.put("tAdvancedHash_row49",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row49";

				int tos_count_tAdvancedHash_row49 = 0;

				// connection name:row49
				// source node:tFileInputDelimited_33 -
				// inputs:(after_tFileInputDelimited_1) outputs:(row49,row49) |
				// target node:tAdvancedHash_row49 - inputs:(row49) outputs:()
				// linked node: tMap_21 - inputs:(out9,row49) outputs:(toCD_Mod)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row49 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row49Struct> tHash_Lookup_row49 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row49Struct> getLookup(matchingModeEnum_row49);

				globalMap.put("tHash_Lookup_row49", tHash_Lookup_row49);

				/**
				 * [tAdvancedHash_row49 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_33 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_33", false);
				start_Hash.put("tFileInputDelimited_33",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_33";

				int tos_count_tFileInputDelimited_33 = 0;

				int nb_line_tFileInputDelimited_33 = 0;
				int footer_tFileInputDelimited_33 = 0;
				int totalLinetFileInputDelimited_33 = 0;
				int limittFileInputDelimited_33 = -1;
				int lastLinetFileInputDelimited_33 = -1;

				char fieldSeparator_tFileInputDelimited_33[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_33 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_33[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_33 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_33 = /**
				 * Start field
				 * tFileInputDelimited_33:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_4_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_33:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_33 = null;

				try {

					String[] rowtFileInputDelimited_33 = null;
					int currentLinetFileInputDelimited_33 = 0;
					int outputLinetFileInputDelimited_33 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_33 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_33 = 0;
							if (footer_value_tFileInputDelimited_33 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_33 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_33,
									fieldSeparator_tFileInputDelimited_33[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_33 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_33)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_33[0]);
						}

						csvReadertFileInputDelimited_33
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_33[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_33[0] != '\r'))
							csvReadertFileInputDelimited_33.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_33[0]);

						csvReadertFileInputDelimited_33.setQuoteChar('"');

						csvReadertFileInputDelimited_33
								.setEscapeChar(csvReadertFileInputDelimited_33
										.getQuoteChar());

						if (footer_tFileInputDelimited_33 > 0) {
							for (totalLinetFileInputDelimited_33 = 0; totalLinetFileInputDelimited_33 < 1; totalLinetFileInputDelimited_33++) {
								csvReadertFileInputDelimited_33.readNext();
							}
							csvReadertFileInputDelimited_33
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_33.readNext()) {

								rowtFileInputDelimited_33 = csvReadertFileInputDelimited_33
										.getValues();
								if (!(rowtFileInputDelimited_33.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_33[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_33++;

								}

							}
							int lastLineTemptFileInputDelimited_33 = totalLinetFileInputDelimited_33
									- footer_tFileInputDelimited_33 < 0 ? 0
									: totalLinetFileInputDelimited_33
											- footer_tFileInputDelimited_33;
							if (lastLinetFileInputDelimited_33 > 0) {
								lastLinetFileInputDelimited_33 = lastLinetFileInputDelimited_33 < lastLineTemptFileInputDelimited_33 ? lastLinetFileInputDelimited_33
										: lastLineTemptFileInputDelimited_33;
							} else {
								lastLinetFileInputDelimited_33 = lastLineTemptFileInputDelimited_33;
							}

							csvReadertFileInputDelimited_33.close();
							if (filename_tFileInputDelimited_33 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_33 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_33,
										fieldSeparator_tFileInputDelimited_33[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_33 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_33)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_33[0]);
							}
							csvReadertFileInputDelimited_33
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_33[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_33[0] != '\r'))
								csvReadertFileInputDelimited_33
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_33[0]);

							csvReadertFileInputDelimited_33.setQuoteChar('"');

							csvReadertFileInputDelimited_33
									.setEscapeChar(csvReadertFileInputDelimited_33
											.getQuoteChar());

						}

						if (limittFileInputDelimited_33 != 0) {
							for (currentLinetFileInputDelimited_33 = 0; currentLinetFileInputDelimited_33 < 1; currentLinetFileInputDelimited_33++) {
								csvReadertFileInputDelimited_33.readNext();
							}
						}
						csvReadertFileInputDelimited_33
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_33 != 0
							&& csvReadertFileInputDelimited_33 != null
							&& csvReadertFileInputDelimited_33.readNext()) {

						rowtFileInputDelimited_33 = csvReadertFileInputDelimited_33
								.getValues();

						if (rowtFileInputDelimited_33.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_33[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_33++;

						if (lastLinetFileInputDelimited_33 > -1
								&& currentLinetFileInputDelimited_33 > lastLinetFileInputDelimited_33) {
							break;
						}
						outputLinetFileInputDelimited_33++;
						if (limittFileInputDelimited_33 > 0
								&& outputLinetFileInputDelimited_33 > limittFileInputDelimited_33) {
							break;
						}

						row49 = null;

						row49 = null;

						boolean whetherReject_tFileInputDelimited_33 = false;
						row49 = new row49Struct();
						try {

							char fieldSeparator_tFileInputDelimited_33_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_33_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_33.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_33[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row49.CONCEPT_PATH = null;

								row49.CONCEPT_CD = null;

								row49.NAME_CHAR = null;

								row49.CONCEPT_BLOB = null;

								row49.UPDATE_DATE = null;

								row49.DOWNLOAD_DATE = null;

								row49.IMPORT_DATE = null;

								row49.SOURCESYSTEM_CD = null;

								row49.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_33 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_33 = 0;

								if (columnIndexWithD_tFileInputDelimited_33 < rowtFileInputDelimited_33.length) {

									row49.CONCEPT_PATH = rowtFileInputDelimited_33[columnIndexWithD_tFileInputDelimited_33];

								} else {
									row49.CONCEPT_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_33 = 1;

								if (columnIndexWithD_tFileInputDelimited_33 < rowtFileInputDelimited_33.length) {

									row49.CONCEPT_CD = rowtFileInputDelimited_33[columnIndexWithD_tFileInputDelimited_33];

								} else {
									row49.CONCEPT_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_33 = 2;

								if (columnIndexWithD_tFileInputDelimited_33 < rowtFileInputDelimited_33.length) {

									row49.NAME_CHAR = rowtFileInputDelimited_33[columnIndexWithD_tFileInputDelimited_33];

								} else {
									row49.NAME_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_33 = 3;

								if (columnIndexWithD_tFileInputDelimited_33 < rowtFileInputDelimited_33.length) {

									row49.CONCEPT_BLOB = rowtFileInputDelimited_33[columnIndexWithD_tFileInputDelimited_33];

								} else {
									row49.CONCEPT_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_33 = 4;

								if (columnIndexWithD_tFileInputDelimited_33 < rowtFileInputDelimited_33.length) {

									if (rowtFileInputDelimited_33[columnIndexWithD_tFileInputDelimited_33]
											.length() > 0) {

										row49.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_33[columnIndexWithD_tFileInputDelimited_33],
														"dd-MM-yyyy");

									} else {
										row49.UPDATE_DATE = null;
									}

								} else {
									row49.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_33 = 5;

								if (columnIndexWithD_tFileInputDelimited_33 < rowtFileInputDelimited_33.length) {

									if (rowtFileInputDelimited_33[columnIndexWithD_tFileInputDelimited_33]
											.length() > 0) {

										row49.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_33[columnIndexWithD_tFileInputDelimited_33],
														"dd-MM-yyyy");

									} else {
										row49.DOWNLOAD_DATE = null;
									}

								} else {
									row49.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_33 = 6;

								if (columnIndexWithD_tFileInputDelimited_33 < rowtFileInputDelimited_33.length) {

									if (rowtFileInputDelimited_33[columnIndexWithD_tFileInputDelimited_33]
											.length() > 0) {

										row49.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_33[columnIndexWithD_tFileInputDelimited_33],
														"dd-MM-yyyy");

									} else {
										row49.IMPORT_DATE = null;
									}

								} else {
									row49.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_33 = 7;

								if (columnIndexWithD_tFileInputDelimited_33 < rowtFileInputDelimited_33.length) {

									row49.SOURCESYSTEM_CD = rowtFileInputDelimited_33[columnIndexWithD_tFileInputDelimited_33];

								} else {
									row49.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_33 = 8;

								if (columnIndexWithD_tFileInputDelimited_33 < rowtFileInputDelimited_33.length) {

									row49.UPLOAD_ID = rowtFileInputDelimited_33[columnIndexWithD_tFileInputDelimited_33];

								} else {
									row49.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_33 = true;

							System.err.println(e.getMessage());
							row49 = null;

						}

						/**
						 * [tFileInputDelimited_33 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_33 main ] start
						 */

						currentComponent = "tFileInputDelimited_33";

						tos_count_tFileInputDelimited_33++;

						/**
						 * [tFileInputDelimited_33 main ] stop
						 */
						// Start of branch "row49"
						if (row49 != null) {

							/**
							 * [tAdvancedHash_row49 main ] start
							 */

							currentComponent = "tAdvancedHash_row49";

							row49Struct row49_HashRow = new row49Struct();

							row49_HashRow.CONCEPT_PATH = row49.CONCEPT_PATH;

							row49_HashRow.CONCEPT_CD = row49.CONCEPT_CD;

							row49_HashRow.NAME_CHAR = row49.NAME_CHAR;

							row49_HashRow.CONCEPT_BLOB = row49.CONCEPT_BLOB;

							row49_HashRow.UPDATE_DATE = row49.UPDATE_DATE;

							row49_HashRow.DOWNLOAD_DATE = row49.DOWNLOAD_DATE;

							row49_HashRow.IMPORT_DATE = row49.IMPORT_DATE;

							row49_HashRow.SOURCESYSTEM_CD = row49.SOURCESYSTEM_CD;

							row49_HashRow.UPLOAD_ID = row49.UPLOAD_ID;

							tHash_Lookup_row49.put(row49_HashRow);

							tos_count_tAdvancedHash_row49++;

							/**
							 * [tAdvancedHash_row49 main ] stop
							 */

						} // End of branch "row49"

						/**
						 * [tFileInputDelimited_33 end ] start
						 */

						currentComponent = "tFileInputDelimited_33";

						nb_line_tFileInputDelimited_33++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_33 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_33 != null) {
							csvReadertFileInputDelimited_33.close();
						}
					}
					if (csvReadertFileInputDelimited_33 != null) {
						globalMap.put("tFileInputDelimited_33_NB_LINE",
								nb_line_tFileInputDelimited_33);
					}

				}

				ok_Hash.put("tFileInputDelimited_33", true);
				end_Hash.put("tFileInputDelimited_33",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_33 end ] stop
				 */

				/**
				 * [tAdvancedHash_row49 end ] start
				 */

				currentComponent = "tAdvancedHash_row49";

				tHash_Lookup_row49.endPut();

				ok_Hash.put("tAdvancedHash_row49", true);
				end_Hash.put("tAdvancedHash_row49", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row49 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_33 finally ] start
				 */

				currentComponent = "tFileInputDelimited_33";

				/**
				 * [tFileInputDelimited_33 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row49 finally ] start
				 */

				currentComponent = "tAdvancedHash_row49";

				/**
				 * [tAdvancedHash_row49 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_33_SUBPROCESS_STATE", 1);
	}

	public static class row51Struct implements
			routines.system.IPersistableComparableLookupRow<row51Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.CONCEPT_PATH == null) ? 0 : this.CONCEPT_PATH
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row51Struct other = (row51Struct) obj;

			if (this.CONCEPT_PATH == null) {
				if (other.CONCEPT_PATH != null)
					return false;

			} else if (!this.CONCEPT_PATH.equals(other.CONCEPT_PATH))

				return false;

			return true;
		}

		public void copyDataTo(row51Struct other) {

			other.CONCEPT_PATH = this.CONCEPT_PATH;
			other.CONCEPT_CD = this.CONCEPT_CD;
			other.NAME_CHAR = this.NAME_CHAR;
			other.CONCEPT_BLOB = this.CONCEPT_BLOB;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row51Struct other) {

			other.CONCEPT_PATH = this.CONCEPT_PATH;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.CONCEPT_CD = readString(dis, ois);

				this.NAME_CHAR = readString(dis, ois);

				this.CONCEPT_BLOB = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.CONCEPT_CD, dos, oos);

				writeString(this.NAME_CHAR, dos, oos);

				writeString(this.CONCEPT_BLOB, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row51Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CONCEPT_PATH,
					other.CONCEPT_PATH);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_13Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row51Struct row51 = new row51Struct();

				/**
				 * [tAdvancedHash_row51 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row51", false);
				start_Hash.put("tAdvancedHash_row51",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row51";

				int tos_count_tAdvancedHash_row51 = 0;

				// connection name:row51
				// source node:tFileInputDelimited_13 -
				// inputs:(after_tFileInputDelimited_8) outputs:(row51,row51) |
				// target node:tAdvancedHash_row51 - inputs:(row51) outputs:()
				// linked node: tMap_2 - inputs:(row50,row51) outputs:(toCD2)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row51 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row51Struct> tHash_Lookup_row51 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row51Struct> getLookup(matchingModeEnum_row51);

				globalMap.put("tHash_Lookup_row51", tHash_Lookup_row51);

				/**
				 * [tAdvancedHash_row51 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_13 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_13", false);
				start_Hash.put("tFileInputDelimited_13",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_13";

				int tos_count_tFileInputDelimited_13 = 0;

				int nb_line_tFileInputDelimited_13 = 0;
				int footer_tFileInputDelimited_13 = 0;
				int totalLinetFileInputDelimited_13 = 0;
				int limittFileInputDelimited_13 = -1;
				int lastLinetFileInputDelimited_13 = -1;

				char fieldSeparator_tFileInputDelimited_13[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_13 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_13[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_13 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_13 = /**
				 * Start field
				 * tFileInputDelimited_13:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_4_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_13:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_13 = null;

				try {

					String[] rowtFileInputDelimited_13 = null;
					int currentLinetFileInputDelimited_13 = 0;
					int outputLinetFileInputDelimited_13 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_13 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_13 = 0;
							if (footer_value_tFileInputDelimited_13 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_13 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_13,
									fieldSeparator_tFileInputDelimited_13[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_13 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_13)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_13[0]);
						}

						csvReadertFileInputDelimited_13
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_13[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_13[0] != '\r'))
							csvReadertFileInputDelimited_13.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_13[0]);

						csvReadertFileInputDelimited_13.setQuoteChar('"');

						csvReadertFileInputDelimited_13
								.setEscapeChar(csvReadertFileInputDelimited_13
										.getQuoteChar());

						if (footer_tFileInputDelimited_13 > 0) {
							for (totalLinetFileInputDelimited_13 = 0; totalLinetFileInputDelimited_13 < 1; totalLinetFileInputDelimited_13++) {
								csvReadertFileInputDelimited_13.readNext();
							}
							csvReadertFileInputDelimited_13
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_13.readNext()) {

								rowtFileInputDelimited_13 = csvReadertFileInputDelimited_13
										.getValues();
								if (!(rowtFileInputDelimited_13.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_13[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_13++;

								}

							}
							int lastLineTemptFileInputDelimited_13 = totalLinetFileInputDelimited_13
									- footer_tFileInputDelimited_13 < 0 ? 0
									: totalLinetFileInputDelimited_13
											- footer_tFileInputDelimited_13;
							if (lastLinetFileInputDelimited_13 > 0) {
								lastLinetFileInputDelimited_13 = lastLinetFileInputDelimited_13 < lastLineTemptFileInputDelimited_13 ? lastLinetFileInputDelimited_13
										: lastLineTemptFileInputDelimited_13;
							} else {
								lastLinetFileInputDelimited_13 = lastLineTemptFileInputDelimited_13;
							}

							csvReadertFileInputDelimited_13.close();
							if (filename_tFileInputDelimited_13 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_13 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_13,
										fieldSeparator_tFileInputDelimited_13[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_13 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_13)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_13[0]);
							}
							csvReadertFileInputDelimited_13
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_13[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_13[0] != '\r'))
								csvReadertFileInputDelimited_13
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_13[0]);

							csvReadertFileInputDelimited_13.setQuoteChar('"');

							csvReadertFileInputDelimited_13
									.setEscapeChar(csvReadertFileInputDelimited_13
											.getQuoteChar());

						}

						if (limittFileInputDelimited_13 != 0) {
							for (currentLinetFileInputDelimited_13 = 0; currentLinetFileInputDelimited_13 < 1; currentLinetFileInputDelimited_13++) {
								csvReadertFileInputDelimited_13.readNext();
							}
						}
						csvReadertFileInputDelimited_13
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_13 != 0
							&& csvReadertFileInputDelimited_13 != null
							&& csvReadertFileInputDelimited_13.readNext()) {

						rowtFileInputDelimited_13 = csvReadertFileInputDelimited_13
								.getValues();

						if (rowtFileInputDelimited_13.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_13[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_13++;

						if (lastLinetFileInputDelimited_13 > -1
								&& currentLinetFileInputDelimited_13 > lastLinetFileInputDelimited_13) {
							break;
						}
						outputLinetFileInputDelimited_13++;
						if (limittFileInputDelimited_13 > 0
								&& outputLinetFileInputDelimited_13 > limittFileInputDelimited_13) {
							break;
						}

						row51 = null;

						row51 = null;

						boolean whetherReject_tFileInputDelimited_13 = false;
						row51 = new row51Struct();
						try {

							char fieldSeparator_tFileInputDelimited_13_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_13_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_13.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_13[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row51.CONCEPT_PATH = null;

								row51.CONCEPT_CD = null;

								row51.NAME_CHAR = null;

								row51.CONCEPT_BLOB = null;

								row51.UPDATE_DATE = null;

								row51.DOWNLOAD_DATE = null;

								row51.IMPORT_DATE = null;

								row51.SOURCESYSTEM_CD = null;

								row51.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_13 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_13 = 0;

								if (columnIndexWithD_tFileInputDelimited_13 < rowtFileInputDelimited_13.length) {

									row51.CONCEPT_PATH = rowtFileInputDelimited_13[columnIndexWithD_tFileInputDelimited_13];

								} else {
									row51.CONCEPT_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_13 = 1;

								if (columnIndexWithD_tFileInputDelimited_13 < rowtFileInputDelimited_13.length) {

									row51.CONCEPT_CD = rowtFileInputDelimited_13[columnIndexWithD_tFileInputDelimited_13];

								} else {
									row51.CONCEPT_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_13 = 2;

								if (columnIndexWithD_tFileInputDelimited_13 < rowtFileInputDelimited_13.length) {

									row51.NAME_CHAR = rowtFileInputDelimited_13[columnIndexWithD_tFileInputDelimited_13];

								} else {
									row51.NAME_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_13 = 3;

								if (columnIndexWithD_tFileInputDelimited_13 < rowtFileInputDelimited_13.length) {

									row51.CONCEPT_BLOB = rowtFileInputDelimited_13[columnIndexWithD_tFileInputDelimited_13];

								} else {
									row51.CONCEPT_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_13 = 4;

								if (columnIndexWithD_tFileInputDelimited_13 < rowtFileInputDelimited_13.length) {

									if (rowtFileInputDelimited_13[columnIndexWithD_tFileInputDelimited_13]
											.length() > 0) {

										row51.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_13[columnIndexWithD_tFileInputDelimited_13],
														"dd-MM-yyyy");

									} else {
										row51.UPDATE_DATE = null;
									}

								} else {
									row51.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_13 = 5;

								if (columnIndexWithD_tFileInputDelimited_13 < rowtFileInputDelimited_13.length) {

									if (rowtFileInputDelimited_13[columnIndexWithD_tFileInputDelimited_13]
											.length() > 0) {

										row51.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_13[columnIndexWithD_tFileInputDelimited_13],
														"dd-MM-yyyy");

									} else {
										row51.DOWNLOAD_DATE = null;
									}

								} else {
									row51.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_13 = 6;

								if (columnIndexWithD_tFileInputDelimited_13 < rowtFileInputDelimited_13.length) {

									if (rowtFileInputDelimited_13[columnIndexWithD_tFileInputDelimited_13]
											.length() > 0) {

										row51.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_13[columnIndexWithD_tFileInputDelimited_13],
														"dd-MM-yyyy");

									} else {
										row51.IMPORT_DATE = null;
									}

								} else {
									row51.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_13 = 7;

								if (columnIndexWithD_tFileInputDelimited_13 < rowtFileInputDelimited_13.length) {

									row51.SOURCESYSTEM_CD = rowtFileInputDelimited_13[columnIndexWithD_tFileInputDelimited_13];

								} else {
									row51.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_13 = 8;

								if (columnIndexWithD_tFileInputDelimited_13 < rowtFileInputDelimited_13.length) {

									row51.UPLOAD_ID = rowtFileInputDelimited_13[columnIndexWithD_tFileInputDelimited_13];

								} else {
									row51.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_13 = true;

							System.err.println(e.getMessage());
							row51 = null;

						}

						/**
						 * [tFileInputDelimited_13 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_13 main ] start
						 */

						currentComponent = "tFileInputDelimited_13";

						tos_count_tFileInputDelimited_13++;

						/**
						 * [tFileInputDelimited_13 main ] stop
						 */
						// Start of branch "row51"
						if (row51 != null) {

							/**
							 * [tAdvancedHash_row51 main ] start
							 */

							currentComponent = "tAdvancedHash_row51";

							row51Struct row51_HashRow = new row51Struct();

							row51_HashRow.CONCEPT_PATH = row51.CONCEPT_PATH;

							row51_HashRow.CONCEPT_CD = row51.CONCEPT_CD;

							row51_HashRow.NAME_CHAR = row51.NAME_CHAR;

							row51_HashRow.CONCEPT_BLOB = row51.CONCEPT_BLOB;

							row51_HashRow.UPDATE_DATE = row51.UPDATE_DATE;

							row51_HashRow.DOWNLOAD_DATE = row51.DOWNLOAD_DATE;

							row51_HashRow.IMPORT_DATE = row51.IMPORT_DATE;

							row51_HashRow.SOURCESYSTEM_CD = row51.SOURCESYSTEM_CD;

							row51_HashRow.UPLOAD_ID = row51.UPLOAD_ID;

							tHash_Lookup_row51.put(row51_HashRow);

							tos_count_tAdvancedHash_row51++;

							/**
							 * [tAdvancedHash_row51 main ] stop
							 */

						} // End of branch "row51"

						/**
						 * [tFileInputDelimited_13 end ] start
						 */

						currentComponent = "tFileInputDelimited_13";

						nb_line_tFileInputDelimited_13++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_13 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_13 != null) {
							csvReadertFileInputDelimited_13.close();
						}
					}
					if (csvReadertFileInputDelimited_13 != null) {
						globalMap.put("tFileInputDelimited_13_NB_LINE",
								nb_line_tFileInputDelimited_13);
					}

				}

				ok_Hash.put("tFileInputDelimited_13", true);
				end_Hash.put("tFileInputDelimited_13",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_13 end ] stop
				 */

				/**
				 * [tAdvancedHash_row51 end ] start
				 */

				currentComponent = "tAdvancedHash_row51";

				tHash_Lookup_row51.endPut();

				ok_Hash.put("tAdvancedHash_row51", true);
				end_Hash.put("tAdvancedHash_row51", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row51 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_13 finally ] start
				 */

				currentComponent = "tFileInputDelimited_13";

				/**
				 * [tFileInputDelimited_13 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row51 finally ] start
				 */

				currentComponent = "tAdvancedHash_row51";

				/**
				 * [tAdvancedHash_row51 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_13_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_4 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_4", false);
				start_Hash.put("tCreateTemporaryFile_4",
						System.currentTimeMillis());

				currentComponent = "tCreateTemporaryFile_4";

				int tos_count_tCreateTemporaryFile_4 = 0;

				java.io.File dir_tCreateTemporaryFile_4 = new java.io.File(
						context.folderMain + context.folderOutput);
				dir_tCreateTemporaryFile_4.mkdirs();
				String name_tCreateTemporaryFile_4 = "talend_04_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_4 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_4 = new java.io.File(
						dir_tCreateTemporaryFile_4, name_tCreateTemporaryFile_4
								+ "." + suffix_tCreateTemporaryFile_4);
				if (file_tCreateTemporaryFile_4.createNewFile()) {
					file_tCreateTemporaryFile_4.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_4_FILEPATH",
						file_tCreateTemporaryFile_4.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_4 begin ] stop
				 */

				/**
				 * [tCreateTemporaryFile_4 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_4";

				tos_count_tCreateTemporaryFile_4++;

				/**
				 * [tCreateTemporaryFile_4 main ] stop
				 */

				/**
				 * [tCreateTemporaryFile_4 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_4";

				ok_Hash.put("tCreateTemporaryFile_4", true);
				end_Hash.put("tCreateTemporaryFile_4",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_4 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_4:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tCreateTemporaryFile_4 finally ] start
				 */

				currentComponent = "tCreateTemporaryFile_4";

				/**
				 * [tCreateTemporaryFile_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tCreateTemporaryFile_4_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_5 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_5", false);
				start_Hash.put("tCreateTemporaryFile_5",
						System.currentTimeMillis());

				currentComponent = "tCreateTemporaryFile_5";

				int tos_count_tCreateTemporaryFile_5 = 0;

				java.io.File dir_tCreateTemporaryFile_5 = new java.io.File(
						context.folderMain + context.folderOutput);
				dir_tCreateTemporaryFile_5.mkdirs();
				String name_tCreateTemporaryFile_5 = "talend_05_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_5 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_5 = new java.io.File(
						dir_tCreateTemporaryFile_5, name_tCreateTemporaryFile_5
								+ "." + suffix_tCreateTemporaryFile_5);
				if (file_tCreateTemporaryFile_5.createNewFile()) {
					file_tCreateTemporaryFile_5.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_5_FILEPATH",
						file_tCreateTemporaryFile_5.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_5 begin ] stop
				 */

				/**
				 * [tCreateTemporaryFile_5 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_5";

				tos_count_tCreateTemporaryFile_5++;

				/**
				 * [tCreateTemporaryFile_5 main ] stop
				 */

				/**
				 * [tCreateTemporaryFile_5 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_5";

				ok_Hash.put("tCreateTemporaryFile_5", true);
				end_Hash.put("tCreateTemporaryFile_5",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_5 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_5:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tCreateTemporaryFile_5 finally ] start
				 */

				currentComponent = "tCreateTemporaryFile_5";

				/**
				 * [tCreateTemporaryFile_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tCreateTemporaryFile_5_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_6 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_6", false);
				start_Hash.put("tCreateTemporaryFile_6",
						System.currentTimeMillis());

				currentComponent = "tCreateTemporaryFile_6";

				int tos_count_tCreateTemporaryFile_6 = 0;

				java.io.File dir_tCreateTemporaryFile_6 = new java.io.File(
						context.folderMain + context.folderOutput);
				dir_tCreateTemporaryFile_6.mkdirs();
				String name_tCreateTemporaryFile_6 = "talend_06_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_6 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_6 = new java.io.File(
						dir_tCreateTemporaryFile_6, name_tCreateTemporaryFile_6
								+ "." + suffix_tCreateTemporaryFile_6);
				if (file_tCreateTemporaryFile_6.createNewFile()) {
					file_tCreateTemporaryFile_6.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_6_FILEPATH",
						file_tCreateTemporaryFile_6.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_6 begin ] stop
				 */

				/**
				 * [tCreateTemporaryFile_6 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_6";

				tos_count_tCreateTemporaryFile_6++;

				/**
				 * [tCreateTemporaryFile_6 main ] stop
				 */

				/**
				 * [tCreateTemporaryFile_6 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_6";

				ok_Hash.put("tCreateTemporaryFile_6", true);
				end_Hash.put("tCreateTemporaryFile_6",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_6 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_6:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_5Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tCreateTemporaryFile_6 finally ] start
				 */

				currentComponent = "tCreateTemporaryFile_6";

				/**
				 * [tCreateTemporaryFile_6 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tCreateTemporaryFile_6_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_7 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_7", false);
				start_Hash.put("tCreateTemporaryFile_7",
						System.currentTimeMillis());

				currentComponent = "tCreateTemporaryFile_7";

				int tos_count_tCreateTemporaryFile_7 = 0;

				java.io.File dir_tCreateTemporaryFile_7 = new java.io.File(
						context.folderMain + context.folderOutput);
				dir_tCreateTemporaryFile_7.mkdirs();
				String name_tCreateTemporaryFile_7 = "talend_07_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_7 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_7 = new java.io.File(
						dir_tCreateTemporaryFile_7, name_tCreateTemporaryFile_7
								+ "." + suffix_tCreateTemporaryFile_7);
				if (file_tCreateTemporaryFile_7.createNewFile()) {
					file_tCreateTemporaryFile_7.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_7_FILEPATH",
						file_tCreateTemporaryFile_7.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_7 begin ] stop
				 */

				/**
				 * [tCreateTemporaryFile_7 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_7";

				tos_count_tCreateTemporaryFile_7++;

				/**
				 * [tCreateTemporaryFile_7 main ] stop
				 */

				/**
				 * [tCreateTemporaryFile_7 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_7";

				ok_Hash.put("tCreateTemporaryFile_7", true);
				end_Hash.put("tCreateTemporaryFile_7",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_7 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_7:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_6Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tCreateTemporaryFile_7 finally ] start
				 */

				currentComponent = "tCreateTemporaryFile_7";

				/**
				 * [tCreateTemporaryFile_7 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tCreateTemporaryFile_7_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_8Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_8 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_8", false);
				start_Hash.put("tCreateTemporaryFile_8",
						System.currentTimeMillis());

				currentComponent = "tCreateTemporaryFile_8";

				int tos_count_tCreateTemporaryFile_8 = 0;

				java.io.File dir_tCreateTemporaryFile_8 = new java.io.File(
						context.folderMain + context.folderOutput);
				dir_tCreateTemporaryFile_8.mkdirs();
				String name_tCreateTemporaryFile_8 = "talend_08_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_8 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_8 = new java.io.File(
						dir_tCreateTemporaryFile_8, name_tCreateTemporaryFile_8
								+ "." + suffix_tCreateTemporaryFile_8);
				if (file_tCreateTemporaryFile_8.createNewFile()) {
					file_tCreateTemporaryFile_8.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_8_FILEPATH",
						file_tCreateTemporaryFile_8.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_8 begin ] stop
				 */

				/**
				 * [tCreateTemporaryFile_8 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_8";

				tos_count_tCreateTemporaryFile_8++;

				/**
				 * [tCreateTemporaryFile_8 main ] stop
				 */

				/**
				 * [tCreateTemporaryFile_8 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_8";

				ok_Hash.put("tCreateTemporaryFile_8", true);
				end_Hash.put("tCreateTemporaryFile_8",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_8 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_8:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_7Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tCreateTemporaryFile_8 finally ] start
				 */

				currentComponent = "tCreateTemporaryFile_8";

				/**
				 * [tCreateTemporaryFile_8 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tCreateTemporaryFile_8_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_9Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_9 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_9", false);
				start_Hash.put("tCreateTemporaryFile_9",
						System.currentTimeMillis());

				currentComponent = "tCreateTemporaryFile_9";

				int tos_count_tCreateTemporaryFile_9 = 0;

				java.io.File dir_tCreateTemporaryFile_9 = new java.io.File(
						context.folderMain + context.folderOutput);
				dir_tCreateTemporaryFile_9.mkdirs();
				String name_tCreateTemporaryFile_9 = "talend_09_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_9 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_9 = new java.io.File(
						dir_tCreateTemporaryFile_9, name_tCreateTemporaryFile_9
								+ "." + suffix_tCreateTemporaryFile_9);
				if (file_tCreateTemporaryFile_9.createNewFile()) {
					file_tCreateTemporaryFile_9.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_9_FILEPATH",
						file_tCreateTemporaryFile_9.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_9 begin ] stop
				 */

				/**
				 * [tCreateTemporaryFile_9 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_9";

				tos_count_tCreateTemporaryFile_9++;

				/**
				 * [tCreateTemporaryFile_9 main ] stop
				 */

				/**
				 * [tCreateTemporaryFile_9 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_9";

				ok_Hash.put("tCreateTemporaryFile_9", true);
				end_Hash.put("tCreateTemporaryFile_9",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_9 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_9:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_8Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tCreateTemporaryFile_9 finally ] start
				 */

				currentComponent = "tCreateTemporaryFile_9";

				/**
				 * [tCreateTemporaryFile_9 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tCreateTemporaryFile_9_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_10Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_10 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_10", false);
				start_Hash.put("tCreateTemporaryFile_10",
						System.currentTimeMillis());

				currentComponent = "tCreateTemporaryFile_10";

				int tos_count_tCreateTemporaryFile_10 = 0;

				java.io.File dir_tCreateTemporaryFile_10 = new java.io.File(
						context.folderMain + context.folderOutput);
				dir_tCreateTemporaryFile_10.mkdirs();
				String name_tCreateTemporaryFile_10 = "talend_10_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_10 = ("tmp".replaceAll(
						"\\.", "").length() == 0) ? "tmp" : "tmp".replaceAll(
						"\\.", "");
				java.io.File file_tCreateTemporaryFile_10 = new java.io.File(
						dir_tCreateTemporaryFile_10,
						name_tCreateTemporaryFile_10 + "."
								+ suffix_tCreateTemporaryFile_10);
				if (file_tCreateTemporaryFile_10.createNewFile()) {
					file_tCreateTemporaryFile_10.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_10_FILEPATH",
						file_tCreateTemporaryFile_10.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_10 begin ] stop
				 */

				/**
				 * [tCreateTemporaryFile_10 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_10";

				tos_count_tCreateTemporaryFile_10++;

				/**
				 * [tCreateTemporaryFile_10 main ] stop
				 */

				/**
				 * [tCreateTemporaryFile_10 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_10";

				ok_Hash.put("tCreateTemporaryFile_10", true);
				end_Hash.put("tCreateTemporaryFile_10",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_10 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_10:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_9Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tCreateTemporaryFile_10 finally ] start
				 */

				currentComponent = "tCreateTemporaryFile_10";

				/**
				 * [tCreateTemporaryFile_10 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tCreateTemporaryFile_10_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_11Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_11 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_11", false);
				start_Hash.put("tCreateTemporaryFile_11",
						System.currentTimeMillis());

				currentComponent = "tCreateTemporaryFile_11";

				int tos_count_tCreateTemporaryFile_11 = 0;

				java.io.File dir_tCreateTemporaryFile_11 = new java.io.File(
						context.folderMain + context.folderOutput);
				dir_tCreateTemporaryFile_11.mkdirs();
				String name_tCreateTemporaryFile_11 = "talend_11_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_11 = ("tmp".replaceAll(
						"\\.", "").length() == 0) ? "tmp" : "tmp".replaceAll(
						"\\.", "");
				java.io.File file_tCreateTemporaryFile_11 = new java.io.File(
						dir_tCreateTemporaryFile_11,
						name_tCreateTemporaryFile_11 + "."
								+ suffix_tCreateTemporaryFile_11);
				if (file_tCreateTemporaryFile_11.createNewFile()) {
					file_tCreateTemporaryFile_11.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_11_FILEPATH",
						file_tCreateTemporaryFile_11.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_11 begin ] stop
				 */

				/**
				 * [tCreateTemporaryFile_11 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_11";

				tos_count_tCreateTemporaryFile_11++;

				/**
				 * [tCreateTemporaryFile_11 main ] stop
				 */

				/**
				 * [tCreateTemporaryFile_11 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_11";

				ok_Hash.put("tCreateTemporaryFile_11", true);
				end_Hash.put("tCreateTemporaryFile_11",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_11 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_11:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_10Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tCreateTemporaryFile_11 finally ] start
				 */

				currentComponent = "tCreateTemporaryFile_11";

				/**
				 * [tCreateTemporaryFile_11 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tCreateTemporaryFile_11_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_12Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_12 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_12", false);
				start_Hash.put("tCreateTemporaryFile_12",
						System.currentTimeMillis());

				currentComponent = "tCreateTemporaryFile_12";

				int tos_count_tCreateTemporaryFile_12 = 0;

				java.io.File dir_tCreateTemporaryFile_12 = new java.io.File(
						context.folderMain + context.folderOutput);
				dir_tCreateTemporaryFile_12.mkdirs();
				String name_tCreateTemporaryFile_12 = "talend_12_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_12 = ("tmp".replaceAll(
						"\\.", "").length() == 0) ? "tmp" : "tmp".replaceAll(
						"\\.", "");
				java.io.File file_tCreateTemporaryFile_12 = new java.io.File(
						dir_tCreateTemporaryFile_12,
						name_tCreateTemporaryFile_12 + "."
								+ suffix_tCreateTemporaryFile_12);
				if (file_tCreateTemporaryFile_12.createNewFile()) {
					file_tCreateTemporaryFile_12.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_12_FILEPATH",
						file_tCreateTemporaryFile_12.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_12 begin ] stop
				 */

				/**
				 * [tCreateTemporaryFile_12 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_12";

				tos_count_tCreateTemporaryFile_12++;

				/**
				 * [tCreateTemporaryFile_12 main ] stop
				 */

				/**
				 * [tCreateTemporaryFile_12 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_12";

				ok_Hash.put("tCreateTemporaryFile_12", true);
				end_Hash.put("tCreateTemporaryFile_12",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_12 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_12:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_11Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tCreateTemporaryFile_12 finally ] start
				 */

				currentComponent = "tCreateTemporaryFile_12";

				/**
				 * [tCreateTemporaryFile_12 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tCreateTemporaryFile_12_SUBPROCESS_STATE", 1);
	}

	public static class to_tmapStruct implements
			routines.system.IPersistableComparableLookupRow<to_tmapStruct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String TREE_PATH;

		public String getTREE_PATH() {
			return this.TREE_PATH;
		}

		public String STAGING_PATH;

		public String getSTAGING_PATH() {
			return this.STAGING_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		public String STARTDATE_SOURCE_PATH;

		public String getSTARTDATE_SOURCE_PATH() {
			return this.STARTDATE_SOURCE_PATH;
		}

		public String ENDDATE_SOURCE_PATH;

		public String getENDDATE_SOURCE_PATH() {
			return this.ENDDATE_SOURCE_PATH;
		}

		public String BASECODE;

		public String getBASECODE() {
			return this.BASECODE;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.CONCEPT_CD == null) ? 0 : this.CONCEPT_CD
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final to_tmapStruct other = (to_tmapStruct) obj;

			if (this.CONCEPT_CD == null) {
				if (other.CONCEPT_CD != null)
					return false;

			} else if (!this.CONCEPT_CD.equals(other.CONCEPT_CD))

				return false;

			return true;
		}

		public void copyDataTo(to_tmapStruct other) {

			other.TREE_PATH = this.TREE_PATH;
			other.STAGING_PATH = this.STAGING_PATH;
			other.CONCEPT_CD = this.CONCEPT_CD;
			other.NAME_CHAR = this.NAME_CHAR;
			other.CONCEPT_BLOB = this.CONCEPT_BLOB;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;
			other.STARTDATE_SOURCE_PATH = this.STARTDATE_SOURCE_PATH;
			other.ENDDATE_SOURCE_PATH = this.ENDDATE_SOURCE_PATH;
			other.BASECODE = this.BASECODE;
			other.C_NAME = this.C_NAME;

		}

		public void copyKeysDataTo(to_tmapStruct other) {

			other.CONCEPT_CD = this.CONCEPT_CD;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.CONCEPT_CD = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_CD, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.TREE_PATH = readString(dis, ois);

				this.STAGING_PATH = readString(dis, ois);

				this.NAME_CHAR = readString(dis, ois);

				this.CONCEPT_BLOB = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

				this.STARTDATE_SOURCE_PATH = readString(dis, ois);

				this.ENDDATE_SOURCE_PATH = readString(dis, ois);

				this.BASECODE = readString(dis, ois);

				this.C_NAME = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.TREE_PATH, dos, oos);

				writeString(this.STAGING_PATH, dos, oos);

				writeString(this.NAME_CHAR, dos, oos);

				writeString(this.CONCEPT_BLOB, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

				writeString(this.STARTDATE_SOURCE_PATH, dos, oos);

				writeString(this.ENDDATE_SOURCE_PATH, dos, oos);

				writeString(this.BASECODE, dos, oos);

				writeString(this.C_NAME, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TREE_PATH=" + TREE_PATH);
			sb.append(",STAGING_PATH=" + STAGING_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append(",STARTDATE_SOURCE_PATH=" + STARTDATE_SOURCE_PATH);
			sb.append(",ENDDATE_SOURCE_PATH=" + ENDDATE_SOURCE_PATH);
			sb.append(",BASECODE=" + BASECODE);
			sb.append(",C_NAME=" + C_NAME);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(to_tmapStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CONCEPT_CD,
					other.CONCEPT_CD);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class from_oe_target_ontStruct implements
			routines.system.IPersistableRow<from_oe_target_ontStruct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public Integer TARGET_ID;

		public Integer getTARGET_ID() {
			return this.TARGET_ID;
		}

		public Integer TREE_LEVEL;

		public Integer getTREE_LEVEL() {
			return this.TREE_LEVEL;
		}

		public String TREE_PATH;

		public String getTREE_PATH() {
			return this.TREE_PATH;
		}

		public String STAGING_PATH;

		public String getSTAGING_PATH() {
			return this.STAGING_PATH;
		}

		public String STAGING_DIMENSION;

		public String getSTAGING_DIMENSION() {
			return this.STAGING_DIMENSION;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String STARTDATE_STAGING_PATH;

		public String getSTARTDATE_STAGING_PATH() {
			return this.STARTDATE_STAGING_PATH;
		}

		public String ENDDATE_STAGING_PATH;

		public String getENDDATE_STAGING_PATH() {
			return this.ENDDATE_STAGING_PATH;
		}

		public String VISUALATTRIBUTES;

		public String getVISUALATTRIBUTES() {
			return this.VISUALATTRIBUTES;
		}

		public String BASECODE;

		public String getBASECODE() {
			return this.BASECODE;
		}

		public String METADATAXML;

		public String getMETADATAXML() {
			return this.METADATAXML;
		}

		public String COLUMNDATATYPE;

		public String getCOLUMNDATATYPE() {
			return this.COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String TOOLTIP;

		public String getTOOLTIP() {
			return this.TOOLTIP;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public String STAGING_M_APPLIED_PATH;

		public String getSTAGING_M_APPLIED_PATH() {
			return this.STAGING_M_APPLIED_PATH;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.TARGET_ID = readInteger(dis);

					this.TREE_LEVEL = readInteger(dis);

					this.TREE_PATH = readString(dis);

					this.STAGING_PATH = readString(dis);

					this.STAGING_DIMENSION = readString(dis);

					this.C_NAME = readString(dis);

					this.STARTDATE_STAGING_PATH = readString(dis);

					this.ENDDATE_STAGING_PATH = readString(dis);

					this.VISUALATTRIBUTES = readString(dis);

					this.BASECODE = readString(dis);

					this.METADATAXML = readString(dis);

					this.COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_COMMENT = readString(dis);

					this.TOOLTIP = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.STAGING_M_APPLIED_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.TARGET_ID, dos);

				// Integer

				writeInteger(this.TREE_LEVEL, dos);

				// String

				writeString(this.TREE_PATH, dos);

				// String

				writeString(this.STAGING_PATH, dos);

				// String

				writeString(this.STAGING_DIMENSION, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.STARTDATE_STAGING_PATH, dos);

				// String

				writeString(this.ENDDATE_STAGING_PATH, dos);

				// String

				writeString(this.VISUALATTRIBUTES, dos);

				// String

				writeString(this.BASECODE, dos);

				// String

				writeString(this.METADATAXML, dos);

				// String

				writeString(this.COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.TOOLTIP, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// String

				writeString(this.STAGING_M_APPLIED_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TARGET_ID=" + String.valueOf(TARGET_ID));
			sb.append(",TREE_LEVEL=" + String.valueOf(TREE_LEVEL));
			sb.append(",TREE_PATH=" + TREE_PATH);
			sb.append(",STAGING_PATH=" + STAGING_PATH);
			sb.append(",STAGING_DIMENSION=" + STAGING_DIMENSION);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",STARTDATE_STAGING_PATH=" + STARTDATE_STAGING_PATH);
			sb.append(",ENDDATE_STAGING_PATH=" + ENDDATE_STAGING_PATH);
			sb.append(",VISUALATTRIBUTES=" + VISUALATTRIBUTES);
			sb.append(",BASECODE=" + BASECODE);
			sb.append(",METADATAXML=" + METADATAXML);
			sb.append(",COLUMNDATATYPE=" + COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",TOOLTIP=" + TOOLTIP);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",STAGING_M_APPLIED_PATH=" + STAGING_M_APPLIED_PATH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(from_oe_target_ontStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_5Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_5Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public Integer TARGET_ID;

		public Integer getTARGET_ID() {
			return this.TARGET_ID;
		}

		public Integer TREE_LEVEL;

		public Integer getTREE_LEVEL() {
			return this.TREE_LEVEL;
		}

		public String TREE_PATH;

		public String getTREE_PATH() {
			return this.TREE_PATH;
		}

		public String STAGING_PATH;

		public String getSTAGING_PATH() {
			return this.STAGING_PATH;
		}

		public String STAGING_DIMENSION;

		public String getSTAGING_DIMENSION() {
			return this.STAGING_DIMENSION;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String STARTDATE_STAGING_PATH;

		public String getSTARTDATE_STAGING_PATH() {
			return this.STARTDATE_STAGING_PATH;
		}

		public String ENDDATE_STAGING_PATH;

		public String getENDDATE_STAGING_PATH() {
			return this.ENDDATE_STAGING_PATH;
		}

		public String VISUALATTRIBUTES;

		public String getVISUALATTRIBUTES() {
			return this.VISUALATTRIBUTES;
		}

		public String BASECODE;

		public String getBASECODE() {
			return this.BASECODE;
		}

		public String METADATAXML;

		public String getMETADATAXML() {
			return this.METADATAXML;
		}

		public String COLUMNDATATYPE;

		public String getCOLUMNDATATYPE() {
			return this.COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String TOOLTIP;

		public String getTOOLTIP() {
			return this.TOOLTIP;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public String STAGING_M_APPLIED_PATH;

		public String getSTAGING_M_APPLIED_PATH() {
			return this.STAGING_M_APPLIED_PATH;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.TARGET_ID = readInteger(dis);

					this.TREE_LEVEL = readInteger(dis);

					this.TREE_PATH = readString(dis);

					this.STAGING_PATH = readString(dis);

					this.STAGING_DIMENSION = readString(dis);

					this.C_NAME = readString(dis);

					this.STARTDATE_STAGING_PATH = readString(dis);

					this.ENDDATE_STAGING_PATH = readString(dis);

					this.VISUALATTRIBUTES = readString(dis);

					this.BASECODE = readString(dis);

					this.METADATAXML = readString(dis);

					this.COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_COMMENT = readString(dis);

					this.TOOLTIP = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.STAGING_M_APPLIED_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.TARGET_ID, dos);

				// Integer

				writeInteger(this.TREE_LEVEL, dos);

				// String

				writeString(this.TREE_PATH, dos);

				// String

				writeString(this.STAGING_PATH, dos);

				// String

				writeString(this.STAGING_DIMENSION, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.STARTDATE_STAGING_PATH, dos);

				// String

				writeString(this.ENDDATE_STAGING_PATH, dos);

				// String

				writeString(this.VISUALATTRIBUTES, dos);

				// String

				writeString(this.BASECODE, dos);

				// String

				writeString(this.METADATAXML, dos);

				// String

				writeString(this.COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.TOOLTIP, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// String

				writeString(this.STAGING_M_APPLIED_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TARGET_ID=" + String.valueOf(TARGET_ID));
			sb.append(",TREE_LEVEL=" + String.valueOf(TREE_LEVEL));
			sb.append(",TREE_PATH=" + TREE_PATH);
			sb.append(",STAGING_PATH=" + STAGING_PATH);
			sb.append(",STAGING_DIMENSION=" + STAGING_DIMENSION);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",STARTDATE_STAGING_PATH=" + STARTDATE_STAGING_PATH);
			sb.append(",ENDDATE_STAGING_PATH=" + ENDDATE_STAGING_PATH);
			sb.append(",VISUALATTRIBUTES=" + VISUALATTRIBUTES);
			sb.append(",BASECODE=" + BASECODE);
			sb.append(",METADATAXML=" + METADATAXML);
			sb.append(",COLUMNDATATYPE=" + COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",TOOLTIP=" + TOOLTIP);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",STAGING_M_APPLIED_PATH=" + STAGING_M_APPLIED_PATH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_4Process(globalMap);

				from_oe_target_ontStruct from_oe_target_ont = new from_oe_target_ontStruct();
				to_tmapStruct to_tmap = new to_tmapStruct();

				/**
				 * [tMap_3_TMAP_OUT begin ] start
				 */

				ok_Hash.put("tMap_3_TMAP_OUT", false);
				start_Hash.put("tMap_3_TMAP_OUT", System.currentTimeMillis());

				currentVirtualComponent = "tMap_3";

				currentComponent = "tMap_3_TMAP_OUT";

				int tos_count_tMap_3_TMAP_OUT = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<from_src_conc_dimStruct> tHash_Lookup_from_src_conc_dim = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<from_src_conc_dimStruct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<from_src_conc_dimStruct>) globalMap
						.get("tHash_Lookup_from_src_conc_dim"));

				from_src_conc_dimStruct from_src_conc_dimHashKey = new from_src_conc_dimStruct();
				from_src_conc_dimStruct from_src_conc_dimDefault = new from_src_conc_dimStruct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3_TMAP_OUT__Struct {
				}
				Var__tMap_3_TMAP_OUT__Struct Var__tMap_3_TMAP_OUT = new Var__tMap_3_TMAP_OUT__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				// ###############################

				class SortableRow_tMap_3_1 implements
						Comparable<SortableRow_tMap_3_1>,
						routines.system.IPersistableRow<SortableRow_tMap_3_1> { // G_TM_B_001

					boolean is__rejectedInnerJoin;

					String exprKey_from_src_conc_dim__CONCEPT_PATH;

					// from_oe_target_ont
					Integer from_oe_target_ont__TARGET_ID;
					Integer from_oe_target_ont__TREE_LEVEL;
					String from_oe_target_ont__TREE_PATH;
					String from_oe_target_ont__STAGING_PATH;
					String from_oe_target_ont__STAGING_DIMENSION;
					String from_oe_target_ont__C_NAME;
					String from_oe_target_ont__STARTDATE_STAGING_PATH;
					String from_oe_target_ont__ENDDATE_STAGING_PATH;
					String from_oe_target_ont__VISUALATTRIBUTES;
					String from_oe_target_ont__BASECODE;
					String from_oe_target_ont__METADATAXML;
					String from_oe_target_ont__COLUMNDATATYPE;
					String from_oe_target_ont__C_OPERATOR;
					String from_oe_target_ont__C_COMMENT;
					String from_oe_target_ont__TOOLTIP;
					java.util.Date from_oe_target_ont__UPDATE_DATE;
					java.util.Date from_oe_target_ont__DOWNLOAD_DATE;
					java.util.Date from_oe_target_ont__IMPORT_DATE;
					String from_oe_target_ont__SOURCESYSTEM_CD;
					String from_oe_target_ont__VALUETYPE_CD;
					String from_oe_target_ont__M_APPLIED_PATH;
					String from_oe_target_ont__STAGING_M_APPLIED_PATH;

					public void fillFrom(
							from_oe_target_ontStruct from_oe_target_ont,
							String exprKey_from_src_conc_dim__CONCEPT_PATH) {

						this.from_oe_target_ont__TARGET_ID = from_oe_target_ont.TARGET_ID;
						this.from_oe_target_ont__TREE_LEVEL = from_oe_target_ont.TREE_LEVEL;
						this.from_oe_target_ont__TREE_PATH = from_oe_target_ont.TREE_PATH;
						this.from_oe_target_ont__STAGING_PATH = from_oe_target_ont.STAGING_PATH;
						this.from_oe_target_ont__STAGING_DIMENSION = from_oe_target_ont.STAGING_DIMENSION;
						this.from_oe_target_ont__C_NAME = from_oe_target_ont.C_NAME;
						this.from_oe_target_ont__STARTDATE_STAGING_PATH = from_oe_target_ont.STARTDATE_STAGING_PATH;
						this.from_oe_target_ont__ENDDATE_STAGING_PATH = from_oe_target_ont.ENDDATE_STAGING_PATH;
						this.from_oe_target_ont__VISUALATTRIBUTES = from_oe_target_ont.VISUALATTRIBUTES;
						this.from_oe_target_ont__BASECODE = from_oe_target_ont.BASECODE;
						this.from_oe_target_ont__METADATAXML = from_oe_target_ont.METADATAXML;
						this.from_oe_target_ont__COLUMNDATATYPE = from_oe_target_ont.COLUMNDATATYPE;
						this.from_oe_target_ont__C_OPERATOR = from_oe_target_ont.C_OPERATOR;
						this.from_oe_target_ont__C_COMMENT = from_oe_target_ont.C_COMMENT;
						this.from_oe_target_ont__TOOLTIP = from_oe_target_ont.TOOLTIP;
						this.from_oe_target_ont__UPDATE_DATE = from_oe_target_ont.UPDATE_DATE;
						this.from_oe_target_ont__DOWNLOAD_DATE = from_oe_target_ont.DOWNLOAD_DATE;
						this.from_oe_target_ont__IMPORT_DATE = from_oe_target_ont.IMPORT_DATE;
						this.from_oe_target_ont__SOURCESYSTEM_CD = from_oe_target_ont.SOURCESYSTEM_CD;
						this.from_oe_target_ont__VALUETYPE_CD = from_oe_target_ont.VALUETYPE_CD;
						this.from_oe_target_ont__M_APPLIED_PATH = from_oe_target_ont.M_APPLIED_PATH;
						this.from_oe_target_ont__STAGING_M_APPLIED_PATH = from_oe_target_ont.STAGING_M_APPLIED_PATH;
						this.exprKey_from_src_conc_dim__CONCEPT_PATH = exprKey_from_src_conc_dim__CONCEPT_PATH;

					}

					public void copyDataTo(
							from_oe_target_ontStruct from_oe_target_ont) {

						from_oe_target_ont.TARGET_ID = this.from_oe_target_ont__TARGET_ID;
						from_oe_target_ont.TREE_LEVEL = this.from_oe_target_ont__TREE_LEVEL;
						from_oe_target_ont.TREE_PATH = this.from_oe_target_ont__TREE_PATH;
						from_oe_target_ont.STAGING_PATH = this.from_oe_target_ont__STAGING_PATH;
						from_oe_target_ont.STAGING_DIMENSION = this.from_oe_target_ont__STAGING_DIMENSION;
						from_oe_target_ont.C_NAME = this.from_oe_target_ont__C_NAME;
						from_oe_target_ont.STARTDATE_STAGING_PATH = this.from_oe_target_ont__STARTDATE_STAGING_PATH;
						from_oe_target_ont.ENDDATE_STAGING_PATH = this.from_oe_target_ont__ENDDATE_STAGING_PATH;
						from_oe_target_ont.VISUALATTRIBUTES = this.from_oe_target_ont__VISUALATTRIBUTES;
						from_oe_target_ont.BASECODE = this.from_oe_target_ont__BASECODE;
						from_oe_target_ont.METADATAXML = this.from_oe_target_ont__METADATAXML;
						from_oe_target_ont.COLUMNDATATYPE = this.from_oe_target_ont__COLUMNDATATYPE;
						from_oe_target_ont.C_OPERATOR = this.from_oe_target_ont__C_OPERATOR;
						from_oe_target_ont.C_COMMENT = this.from_oe_target_ont__C_COMMENT;
						from_oe_target_ont.TOOLTIP = this.from_oe_target_ont__TOOLTIP;
						from_oe_target_ont.UPDATE_DATE = this.from_oe_target_ont__UPDATE_DATE;
						from_oe_target_ont.DOWNLOAD_DATE = this.from_oe_target_ont__DOWNLOAD_DATE;
						from_oe_target_ont.IMPORT_DATE = this.from_oe_target_ont__IMPORT_DATE;
						from_oe_target_ont.SOURCESYSTEM_CD = this.from_oe_target_ont__SOURCESYSTEM_CD;
						from_oe_target_ont.VALUETYPE_CD = this.from_oe_target_ont__VALUETYPE_CD;
						from_oe_target_ont.M_APPLIED_PATH = this.from_oe_target_ont__M_APPLIED_PATH;
						from_oe_target_ont.STAGING_M_APPLIED_PATH = this.from_oe_target_ont__STAGING_M_APPLIED_PATH;

					}

					public String toString() {

						StringBuilder sb = new StringBuilder();
						sb.append(super.toString());
						sb.append("[");

						sb.append("from_oe_target_ont__TARGET_ID");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__TARGET_ID));

						sb.append(", ");

						sb.append("from_oe_target_ont__TREE_LEVEL");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__TREE_LEVEL));

						sb.append(", ");

						sb.append("from_oe_target_ont__TREE_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__TREE_PATH));

						sb.append(", ");

						sb.append("from_oe_target_ont__STAGING_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__STAGING_PATH));

						sb.append(", ");

						sb.append("from_oe_target_ont__STAGING_DIMENSION");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__STAGING_DIMENSION));

						sb.append(", ");

						sb.append("from_oe_target_ont__C_NAME");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__C_NAME));

						sb.append(", ");

						sb.append("from_oe_target_ont__STARTDATE_STAGING_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__STARTDATE_STAGING_PATH));

						sb.append(", ");

						sb.append("from_oe_target_ont__ENDDATE_STAGING_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__ENDDATE_STAGING_PATH));

						sb.append(", ");

						sb.append("from_oe_target_ont__VISUALATTRIBUTES");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__VISUALATTRIBUTES));

						sb.append(", ");

						sb.append("from_oe_target_ont__BASECODE");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__BASECODE));

						sb.append(", ");

						sb.append("from_oe_target_ont__METADATAXML");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__METADATAXML));

						sb.append(", ");

						sb.append("from_oe_target_ont__COLUMNDATATYPE");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__COLUMNDATATYPE));

						sb.append(", ");

						sb.append("from_oe_target_ont__C_OPERATOR");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__C_OPERATOR));

						sb.append(", ");

						sb.append("from_oe_target_ont__C_COMMENT");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__C_COMMENT));

						sb.append(", ");

						sb.append("from_oe_target_ont__TOOLTIP");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__TOOLTIP));

						sb.append(", ");

						sb.append("from_oe_target_ont__UPDATE_DATE");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__UPDATE_DATE));

						sb.append(", ");

						sb.append("from_oe_target_ont__DOWNLOAD_DATE");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__DOWNLOAD_DATE));

						sb.append(", ");

						sb.append("from_oe_target_ont__IMPORT_DATE");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__IMPORT_DATE));

						sb.append(", ");

						sb.append("from_oe_target_ont__SOURCESYSTEM_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__SOURCESYSTEM_CD));

						sb.append(", ");

						sb.append("from_oe_target_ont__VALUETYPE_CD");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__VALUETYPE_CD));

						sb.append(", ");

						sb.append("from_oe_target_ont__M_APPLIED_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__M_APPLIED_PATH));

						sb.append(", ");

						sb.append("from_oe_target_ont__STAGING_M_APPLIED_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.from_oe_target_ont__STAGING_M_APPLIED_PATH));

						sb.append("]");

						return sb.toString();
					}

					public int compareTo(SortableRow_tMap_3_1 other) {

						int returnValue = 0;

						returnValue = checkNullsAndCompare(
								this.exprKey_from_src_conc_dim__CONCEPT_PATH,
								other.exprKey_from_src_conc_dim__CONCEPT_PATH);
						if (returnValue != 0) {
							return returnValue;
						}

						return returnValue;
					}

					private int checkNullsAndCompare(Object object1,
							Object object2) {
						int returnValue = 0;
						if (object1 instanceof Comparable
								&& object2 instanceof Comparable) {
							returnValue = ((Comparable) object1)
									.compareTo(object2);
						} else if (object1 != null && object2 != null) {
							returnValue = compareStrings(object1.toString(),
									object2.toString());
						} else if (object1 == null && object2 != null) {
							returnValue = 1;
						} else if (object1 != null && object2 == null) {
							returnValue = -1;
						} else {
							returnValue = 0;
						}

						return returnValue;
					}

					private int compareStrings(String string1, String string2) {
						return string1.compareTo(string2);
					}

					public void readData(ObjectInputStream dis) {

						synchronized (from_oe_target_ontStruct.commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

							try {

								int length = 0;

								this.is__rejectedInnerJoin = dis.readBoolean();

								length = dis.readByte();
								if (length == -1) {
									this.from_oe_target_ont__TARGET_ID = null;
								} else {
									this.from_oe_target_ont__TARGET_ID = dis
											.readInt();
								}

								length = dis.readByte();
								if (length == -1) {
									this.from_oe_target_ont__TREE_LEVEL = null;
								} else {
									this.from_oe_target_ont__TREE_LEVEL = dis
											.readInt();
								}

								length = dis.readInt();
								if (length == -1) {
									this.from_oe_target_ont__TREE_PATH = null;
								} else {
									if (length > from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.from_oe_target_ont__TREE_PATH = new String(
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.from_oe_target_ont__STAGING_PATH = null;
								} else {
									if (length > from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.from_oe_target_ont__STAGING_PATH = new String(
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.from_oe_target_ont__STAGING_DIMENSION = null;
								} else {
									if (length > from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.from_oe_target_ont__STAGING_DIMENSION = new String(
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.from_oe_target_ont__C_NAME = null;
								} else {
									if (length > from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.from_oe_target_ont__C_NAME = new String(
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.from_oe_target_ont__STARTDATE_STAGING_PATH = null;
								} else {
									if (length > from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.from_oe_target_ont__STARTDATE_STAGING_PATH = new String(
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.from_oe_target_ont__ENDDATE_STAGING_PATH = null;
								} else {
									if (length > from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.from_oe_target_ont__ENDDATE_STAGING_PATH = new String(
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.from_oe_target_ont__VISUALATTRIBUTES = null;
								} else {
									if (length > from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.from_oe_target_ont__VISUALATTRIBUTES = new String(
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.from_oe_target_ont__BASECODE = null;
								} else {
									if (length > from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.from_oe_target_ont__BASECODE = new String(
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.from_oe_target_ont__METADATAXML = null;
								} else {
									if (length > from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.from_oe_target_ont__METADATAXML = new String(
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.from_oe_target_ont__COLUMNDATATYPE = null;
								} else {
									if (length > from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.from_oe_target_ont__COLUMNDATATYPE = new String(
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.from_oe_target_ont__C_OPERATOR = null;
								} else {
									if (length > from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.from_oe_target_ont__C_OPERATOR = new String(
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.from_oe_target_ont__C_COMMENT = null;
								} else {
									if (length > from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.from_oe_target_ont__C_COMMENT = new String(
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.from_oe_target_ont__TOOLTIP = null;
								} else {
									if (length > from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.from_oe_target_ont__TOOLTIP = new String(
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.from_oe_target_ont__UPDATE_DATE = null;
								} else {
									this.from_oe_target_ont__UPDATE_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.from_oe_target_ont__DOWNLOAD_DATE = null;
								} else {
									this.from_oe_target_ont__DOWNLOAD_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.from_oe_target_ont__IMPORT_DATE = null;
								} else {
									this.from_oe_target_ont__IMPORT_DATE = new Date(
											dis.readLong());
								}

								length = dis.readInt();
								if (length == -1) {
									this.from_oe_target_ont__SOURCESYSTEM_CD = null;
								} else {
									if (length > from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.from_oe_target_ont__SOURCESYSTEM_CD = new String(
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.from_oe_target_ont__VALUETYPE_CD = null;
								} else {
									if (length > from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.from_oe_target_ont__VALUETYPE_CD = new String(
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.from_oe_target_ont__M_APPLIED_PATH = null;
								} else {
									if (length > from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.from_oe_target_ont__M_APPLIED_PATH = new String(
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.from_oe_target_ont__STAGING_M_APPLIED_PATH = null;
								} else {
									if (length > from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.from_oe_target_ont__STAGING_M_APPLIED_PATH = new String(
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_from_src_conc_dim__CONCEPT_PATH = null;
								} else {
									if (length > from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.exprKey_from_src_conc_dim__CONCEPT_PATH = new String(
											from_oe_target_ontStruct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

							} catch (IOException e) {
								throw new RuntimeException(e);

							}

						}
					}

					public void writeData(ObjectOutputStream dos) {
						try {

							dos.writeBoolean(this.is__rejectedInnerJoin);

							if (this.from_oe_target_ont__TARGET_ID == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeInt(this.from_oe_target_ont__TARGET_ID);
							}

							if (this.from_oe_target_ont__TREE_LEVEL == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeInt(this.from_oe_target_ont__TREE_LEVEL);
							}

							if (this.from_oe_target_ont__TREE_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.from_oe_target_ont__TREE_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.from_oe_target_ont__STAGING_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.from_oe_target_ont__STAGING_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.from_oe_target_ont__STAGING_DIMENSION == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.from_oe_target_ont__STAGING_DIMENSION
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.from_oe_target_ont__C_NAME == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.from_oe_target_ont__C_NAME
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.from_oe_target_ont__STARTDATE_STAGING_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.from_oe_target_ont__STARTDATE_STAGING_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.from_oe_target_ont__ENDDATE_STAGING_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.from_oe_target_ont__ENDDATE_STAGING_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.from_oe_target_ont__VISUALATTRIBUTES == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.from_oe_target_ont__VISUALATTRIBUTES
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.from_oe_target_ont__BASECODE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.from_oe_target_ont__BASECODE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.from_oe_target_ont__METADATAXML == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.from_oe_target_ont__METADATAXML
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.from_oe_target_ont__COLUMNDATATYPE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.from_oe_target_ont__COLUMNDATATYPE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.from_oe_target_ont__C_OPERATOR == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.from_oe_target_ont__C_OPERATOR
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.from_oe_target_ont__C_COMMENT == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.from_oe_target_ont__C_COMMENT
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.from_oe_target_ont__TOOLTIP == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.from_oe_target_ont__TOOLTIP
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.from_oe_target_ont__UPDATE_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.from_oe_target_ont__UPDATE_DATE
										.getTime());
							}

							if (this.from_oe_target_ont__DOWNLOAD_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.from_oe_target_ont__DOWNLOAD_DATE
										.getTime());
							}

							if (this.from_oe_target_ont__IMPORT_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.from_oe_target_ont__IMPORT_DATE
										.getTime());
							}

							if (this.from_oe_target_ont__SOURCESYSTEM_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.from_oe_target_ont__SOURCESYSTEM_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.from_oe_target_ont__VALUETYPE_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.from_oe_target_ont__VALUETYPE_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.from_oe_target_ont__M_APPLIED_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.from_oe_target_ont__M_APPLIED_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.from_oe_target_ont__STAGING_M_APPLIED_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.from_oe_target_ont__STAGING_M_APPLIED_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.exprKey_from_src_conc_dim__CONCEPT_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_from_src_conc_dim__CONCEPT_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

				} // G_TM_B_001

				org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_3_1> fsi_tMap_3_1 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_3_1>(
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_"
								+ Thread.currentThread().getId() + "_" + pid
								+ "_tMap_3_1", 200000) {
					public SortableRow_tMap_3_1 createRowInstance() {
						return new SortableRow_tMap_3_1();
					}
				};

				fsi_tMap_3_1.initPut();

				/**
				 * [tMap_3_TMAP_OUT begin ] stop
				 */

				/**
				 * [tFileInputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_5", false);
				start_Hash.put("tFileInputDelimited_5",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_5";

				int tos_count_tFileInputDelimited_5 = 0;

				int nb_line_tFileInputDelimited_5 = 0;
				int footer_tFileInputDelimited_5 = 0;
				int totalLinetFileInputDelimited_5 = 0;
				int limittFileInputDelimited_5 = -1;
				int lastLinetFileInputDelimited_5 = -1;

				char fieldSeparator_tFileInputDelimited_5[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_5 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_5[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_5 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_5 = /**
				 * Start field
				 * tFileInputDelimited_5:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_1_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_5:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_5 = null;

				try {

					String[] rowtFileInputDelimited_5 = null;
					int currentLinetFileInputDelimited_5 = 0;
					int outputLinetFileInputDelimited_5 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_5 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_5 = 0;
							if (footer_value_tFileInputDelimited_5 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_5 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_5,
									fieldSeparator_tFileInputDelimited_5[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_5 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_5)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_5[0]);
						}

						csvReadertFileInputDelimited_5.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_5[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_5[0] != '\r'))
							csvReadertFileInputDelimited_5.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_5[0]);

						csvReadertFileInputDelimited_5.setQuoteChar('"');

						csvReadertFileInputDelimited_5
								.setEscapeChar(csvReadertFileInputDelimited_5
										.getQuoteChar());

						if (footer_tFileInputDelimited_5 > 0) {
							for (totalLinetFileInputDelimited_5 = 0; totalLinetFileInputDelimited_5 < 1; totalLinetFileInputDelimited_5++) {
								csvReadertFileInputDelimited_5.readNext();
							}
							csvReadertFileInputDelimited_5
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_5.readNext()) {

								rowtFileInputDelimited_5 = csvReadertFileInputDelimited_5
										.getValues();
								if (!(rowtFileInputDelimited_5.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_5[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_5++;

								}

							}
							int lastLineTemptFileInputDelimited_5 = totalLinetFileInputDelimited_5
									- footer_tFileInputDelimited_5 < 0 ? 0
									: totalLinetFileInputDelimited_5
											- footer_tFileInputDelimited_5;
							if (lastLinetFileInputDelimited_5 > 0) {
								lastLinetFileInputDelimited_5 = lastLinetFileInputDelimited_5 < lastLineTemptFileInputDelimited_5 ? lastLinetFileInputDelimited_5
										: lastLineTemptFileInputDelimited_5;
							} else {
								lastLinetFileInputDelimited_5 = lastLineTemptFileInputDelimited_5;
							}

							csvReadertFileInputDelimited_5.close();
							if (filename_tFileInputDelimited_5 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_5 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_5,
										fieldSeparator_tFileInputDelimited_5[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_5 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_5)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_5[0]);
							}
							csvReadertFileInputDelimited_5
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_5[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_5[0] != '\r'))
								csvReadertFileInputDelimited_5
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_5[0]);

							csvReadertFileInputDelimited_5.setQuoteChar('"');

							csvReadertFileInputDelimited_5
									.setEscapeChar(csvReadertFileInputDelimited_5
											.getQuoteChar());

						}

						if (limittFileInputDelimited_5 != 0) {
							for (currentLinetFileInputDelimited_5 = 0; currentLinetFileInputDelimited_5 < 1; currentLinetFileInputDelimited_5++) {
								csvReadertFileInputDelimited_5.readNext();
							}
						}
						csvReadertFileInputDelimited_5
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_5 != 0
							&& csvReadertFileInputDelimited_5 != null
							&& csvReadertFileInputDelimited_5.readNext()) {

						rowtFileInputDelimited_5 = csvReadertFileInputDelimited_5
								.getValues();

						if (rowtFileInputDelimited_5.length == 1
								&& ("\015").equals(rowtFileInputDelimited_5[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_5++;

						if (lastLinetFileInputDelimited_5 > -1
								&& currentLinetFileInputDelimited_5 > lastLinetFileInputDelimited_5) {
							break;
						}
						outputLinetFileInputDelimited_5++;
						if (limittFileInputDelimited_5 > 0
								&& outputLinetFileInputDelimited_5 > limittFileInputDelimited_5) {
							break;
						}

						from_oe_target_ont = null;

						boolean whetherReject_tFileInputDelimited_5 = false;
						from_oe_target_ont = new from_oe_target_ontStruct();
						try {

							char fieldSeparator_tFileInputDelimited_5_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_5_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_5.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_5[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								from_oe_target_ont.TARGET_ID = null;

								from_oe_target_ont.TREE_LEVEL = null;

								from_oe_target_ont.TREE_PATH = null;

								from_oe_target_ont.STAGING_PATH = null;

								from_oe_target_ont.STAGING_DIMENSION = null;

								from_oe_target_ont.C_NAME = null;

								from_oe_target_ont.STARTDATE_STAGING_PATH = null;

								from_oe_target_ont.ENDDATE_STAGING_PATH = null;

								from_oe_target_ont.VISUALATTRIBUTES = null;

								from_oe_target_ont.BASECODE = null;

								from_oe_target_ont.METADATAXML = null;

								from_oe_target_ont.COLUMNDATATYPE = null;

								from_oe_target_ont.C_OPERATOR = null;

								from_oe_target_ont.C_COMMENT = null;

								from_oe_target_ont.TOOLTIP = null;

								from_oe_target_ont.UPDATE_DATE = null;

								from_oe_target_ont.DOWNLOAD_DATE = null;

								from_oe_target_ont.IMPORT_DATE = null;

								from_oe_target_ont.SOURCESYSTEM_CD = null;

								from_oe_target_ont.VALUETYPE_CD = null;

								from_oe_target_ont.M_APPLIED_PATH = null;

								from_oe_target_ont.STAGING_M_APPLIED_PATH = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_5 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_5 = 0;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									if (rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]
											.length() > 0) {

										from_oe_target_ont.TARGET_ID = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]);

									} else {
										from_oe_target_ont.TARGET_ID = null;
									}

								} else {
									from_oe_target_ont.TARGET_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 1;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									if (rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]
											.length() > 0) {

										from_oe_target_ont.TREE_LEVEL = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]);

									} else {
										from_oe_target_ont.TREE_LEVEL = null;
									}

								} else {
									from_oe_target_ont.TREE_LEVEL = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 2;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									from_oe_target_ont.TREE_PATH = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									from_oe_target_ont.TREE_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 3;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									from_oe_target_ont.STAGING_PATH = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									from_oe_target_ont.STAGING_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 4;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									from_oe_target_ont.STAGING_DIMENSION = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									from_oe_target_ont.STAGING_DIMENSION = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 5;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									from_oe_target_ont.C_NAME = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									from_oe_target_ont.C_NAME = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 6;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									from_oe_target_ont.STARTDATE_STAGING_PATH = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									from_oe_target_ont.STARTDATE_STAGING_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 7;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									from_oe_target_ont.ENDDATE_STAGING_PATH = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									from_oe_target_ont.ENDDATE_STAGING_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 8;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									from_oe_target_ont.VISUALATTRIBUTES = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									from_oe_target_ont.VISUALATTRIBUTES = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 9;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									from_oe_target_ont.BASECODE = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									from_oe_target_ont.BASECODE = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 10;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									from_oe_target_ont.METADATAXML = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									from_oe_target_ont.METADATAXML = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 11;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									from_oe_target_ont.COLUMNDATATYPE = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									from_oe_target_ont.COLUMNDATATYPE = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 12;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									from_oe_target_ont.C_OPERATOR = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									from_oe_target_ont.C_OPERATOR = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 13;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									from_oe_target_ont.C_COMMENT = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									from_oe_target_ont.C_COMMENT = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 14;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									from_oe_target_ont.TOOLTIP = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									from_oe_target_ont.TOOLTIP = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 15;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									if (rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]
											.length() > 0) {

										from_oe_target_ont.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5],
														"dd-MM-yyyy");

									} else {
										from_oe_target_ont.UPDATE_DATE = null;
									}

								} else {
									from_oe_target_ont.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 16;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									if (rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]
											.length() > 0) {

										from_oe_target_ont.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5],
														"dd-MM-yyyy");

									} else {
										from_oe_target_ont.DOWNLOAD_DATE = null;
									}

								} else {
									from_oe_target_ont.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 17;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									if (rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]
											.length() > 0) {

										from_oe_target_ont.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5],
														"dd-MM-yyyy");

									} else {
										from_oe_target_ont.IMPORT_DATE = null;
									}

								} else {
									from_oe_target_ont.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 18;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									from_oe_target_ont.SOURCESYSTEM_CD = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									from_oe_target_ont.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 19;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									from_oe_target_ont.VALUETYPE_CD = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									from_oe_target_ont.VALUETYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 20;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									from_oe_target_ont.M_APPLIED_PATH = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									from_oe_target_ont.M_APPLIED_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 21;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									from_oe_target_ont.STAGING_M_APPLIED_PATH = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									from_oe_target_ont.STAGING_M_APPLIED_PATH = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_5 = true;

							System.err.println(e.getMessage());
							from_oe_target_ont = null;

						}

						/**
						 * [tFileInputDelimited_5 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_5 main ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						tos_count_tFileInputDelimited_5++;

						/**
						 * [tFileInputDelimited_5 main ] stop
						 */
						// Start of branch "from_oe_target_ont"
						if (from_oe_target_ont != null) {

							/**
							 * [tMap_3_TMAP_OUT main ] start
							 */

							currentVirtualComponent = "tMap_3";

							currentComponent = "tMap_3_TMAP_OUT";

							boolean hasCasePrimitiveKeyWithNull_tMap_3_TMAP_OUT = false;

							if (

							(

							from_oe_target_ont.M_APPLIED_PATH.equals("@") && (from_oe_target_ont.STARTDATE_STAGING_PATH
									.length() > 0 || from_oe_target_ont.ENDDATE_STAGING_PATH
									.length() > 0)

							)

							) { // G_TM_M_281

								hasCasePrimitiveKeyWithNull_tMap_3_TMAP_OUT = false;

								String exprKey_from_src_conc_dim__CONCEPT_PATH = from_oe_target_ont.STAGING_PATH;

								SortableRow_tMap_3_1 sortableRow_tMap_3_1 = fsi_tMap_3_1
										.getNextFreeRow();

								sortableRow_tMap_3_1
										.fillFrom(from_oe_target_ont,
												exprKey_from_src_conc_dim__CONCEPT_PATH);

								fsi_tMap_3_1.put(sortableRow_tMap_3_1);

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_3_TMAP_OUT = false;
								boolean mainRowRejected_tMap_3_TMAP_OUT = false;

								// ###############################

								tos_count_tMap_3_TMAP_OUT++;

								/**
								 * [tMap_3_TMAP_OUT main ] stop
								 */
							} // G_TM_M_281 close main tMap filter for table
								// 'from_oe_target_ont'

						} // End of branch "from_oe_target_ont"

						/**
						 * [tFileInputDelimited_5 end ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						nb_line_tFileInputDelimited_5++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_5 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_5 != null) {
							csvReadertFileInputDelimited_5.close();
						}
					}
					if (csvReadertFileInputDelimited_5 != null) {
						globalMap.put("tFileInputDelimited_5_NB_LINE",
								nb_line_tFileInputDelimited_5);
					}

				}

				ok_Hash.put("tFileInputDelimited_5", true);
				end_Hash.put("tFileInputDelimited_5",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_5 end ] stop
				 */

				/**
				 * [tMap_3_TMAP_OUT end ] start
				 */

				currentVirtualComponent = "tMap_3";

				currentComponent = "tMap_3_TMAP_OUT";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_3_TMAP_OUT", true);
				end_Hash.put("tMap_3_TMAP_OUT", System.currentTimeMillis());

				/**
				 * [tMap_3_TMAP_OUT end ] stop
				 */

				/**
				 * [tAdvancedHash_to_tmap begin ] start
				 */

				ok_Hash.put("tAdvancedHash_to_tmap", false);
				start_Hash.put("tAdvancedHash_to_tmap",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_to_tmap";

				int tos_count_tAdvancedHash_to_tmap = 0;

				// connection name:to_tmap
				// source node:tMap_3_TMAP_IN - inputs:(OnRowsEnd)
				// outputs:(to_tmap,to_tmap) | target node:tAdvancedHash_to_tmap
				// - inputs:(to_tmap) outputs:()
				// linked node: tMap_4 - inputs:(row6,to_tmap)
				// outputs:(to_obs_fct)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_to_tmap = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<to_tmapStruct> tHash_Lookup_to_tmap = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<to_tmapStruct>(
						matchingModeEnum_to_tmap,
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid
								+ "_Lookup_to_tmap_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public to_tmapStruct createRowInstance() {
								return new to_tmapStruct();
							}
						}

						, 200000

				);

				tHash_Lookup_to_tmap.initPut();

				globalMap.put("tHash_Lookup_to_tmap", tHash_Lookup_to_tmap);

				/**
				 * [tAdvancedHash_to_tmap begin ] stop
				 */

				/**
				 * [tMap_3_TMAP_IN begin ] start
				 */

				ok_Hash.put("tMap_3_TMAP_IN", false);
				start_Hash.put("tMap_3_TMAP_IN", System.currentTimeMillis());

				currentVirtualComponent = "tMap_3";

				currentComponent = "tMap_3_TMAP_IN";

				int tos_count_tMap_3_TMAP_IN = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3_TMAP_IN__Struct {
				}
				Var__tMap_3_TMAP_IN__Struct Var__tMap_3_TMAP_IN = new Var__tMap_3_TMAP_IN__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				to_tmapStruct to_tmap_tmp = new to_tmapStruct();
				// ###############################

				/**
				 * [tMap_3_TMAP_IN begin ] stop
				 */

				/**
				 * [tMap_3_TMAP_IN main ] start
				 */

				currentVirtualComponent = "tMap_3";

				currentComponent = "tMap_3_TMAP_IN";

				boolean hasCasePrimitiveKeyWithNull_tMap_3_TMAP_IN = false;

				fsi_tMap_3_1.endPut();

				if (from_oe_target_ont == null) {
					from_oe_target_ont = new from_oe_target_ontStruct();
				}

				// ###############################
				// # Input tables (lookups)
				boolean rejectedInnerJoin_tMap_3_TMAP_IN = false;
				boolean mainRowRejected_tMap_3_TMAP_IN = false;

				// /////////////////////////////////////////////
				// Starting Lookup Table "from_src_conc_dim"
				// /////////////////////////////////////////////

				SortableRow_tMap_3_1 rsc_tMap_3_1;

				tHash_Lookup_from_src_conc_dim.initGet();

				fsi_tMap_3_1.initGet();

				// TEST firstLookupIsPersistentSorted=true
				// isFirstPersistentSortedTable=true

				rejectedInnerJoin_tMap_3_TMAP_IN = false;

				while (fsi_tMap_3_1.hasNext()) { // G_TM_M_250 loop "1"

					// CALL close loop of lookup '1'

					rsc_tMap_3_1 = (SortableRow_tMap_3_1) fsi_tMap_3_1.next();
					rsc_tMap_3_1.copyDataTo(from_oe_target_ont);

					rejectedInnerJoin_tMap_3_TMAP_IN = rsc_tMap_3_1.is__rejectedInnerJoin;

					boolean forceLoopfrom_src_conc_dim = false;

					from_src_conc_dimStruct from_src_conc_dimObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_3_TMAP_IN) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_3_TMAP_IN = false;

						from_src_conc_dimHashKey.CONCEPT_PATH = rsc_tMap_3_1.exprKey_from_src_conc_dim__CONCEPT_PATH;

						tHash_Lookup_from_src_conc_dim
								.lookup(from_src_conc_dimHashKey);

						if (!tHash_Lookup_from_src_conc_dim.hasNext()) { // G_TM_M_090

							rejectedInnerJoin_tMap_3_TMAP_IN = true;

							forceLoopfrom_src_conc_dim = true;

						} // G_TM_M_090

					} // G_TM_M_020

					else { // G 20 - G 21
						forceLoopfrom_src_conc_dim = true;
					} // G 21

					from_src_conc_dimStruct from_src_conc_dim = null;

					while ((tHash_Lookup_from_src_conc_dim != null && tHash_Lookup_from_src_conc_dim
							.hasNext()) || forceLoopfrom_src_conc_dim) { // G_TM_M_043

						// CALL close loop of lookup 'from_src_conc_dim'

						from_src_conc_dimStruct fromLookup_from_src_conc_dim = null;
						from_src_conc_dim = from_src_conc_dimDefault;

						if (!forceLoopfrom_src_conc_dim) { // G 46

							fromLookup_from_src_conc_dim = tHash_Lookup_from_src_conc_dim
									.next();

							if (fromLookup_from_src_conc_dim != null) {
								from_src_conc_dim = fromLookup_from_src_conc_dim;
							}

						} // G 46

						forceLoopfrom_src_conc_dim = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_3_TMAP_IN__Struct Var = Var__tMap_3_TMAP_IN;// ###############################
							// ###############################
							// # Output tables

							to_tmap = null;

							if (!rejectedInnerJoin_tMap_3_TMAP_IN) {

								// # Output table : 'to_tmap'
								to_tmap_tmp.TREE_PATH = from_oe_target_ont.TREE_PATH;
								to_tmap_tmp.STAGING_PATH = from_oe_target_ont.STAGING_PATH;
								to_tmap_tmp.CONCEPT_CD = from_src_conc_dim.CONCEPT_CD;
								to_tmap_tmp.NAME_CHAR = from_src_conc_dim.NAME_CHAR;
								to_tmap_tmp.CONCEPT_BLOB = from_src_conc_dim.CONCEPT_BLOB;
								to_tmap_tmp.UPDATE_DATE = from_src_conc_dim.UPDATE_DATE;
								to_tmap_tmp.DOWNLOAD_DATE = from_src_conc_dim.DOWNLOAD_DATE;
								to_tmap_tmp.IMPORT_DATE = from_src_conc_dim.IMPORT_DATE;
								to_tmap_tmp.SOURCESYSTEM_CD = from_src_conc_dim.SOURCESYSTEM_CD;
								to_tmap_tmp.UPLOAD_ID = from_src_conc_dim.UPLOAD_ID;
								to_tmap_tmp.STARTDATE_SOURCE_PATH = from_oe_target_ont.STARTDATE_STAGING_PATH;
								to_tmap_tmp.ENDDATE_SOURCE_PATH = from_oe_target_ont.ENDDATE_STAGING_PATH;
								to_tmap_tmp.BASECODE = from_oe_target_ont.BASECODE;
								to_tmap_tmp.C_NAME = from_oe_target_ont.C_NAME;
								to_tmap = to_tmap_tmp;
							} // closing inner join bracket (2)
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_3_TMAP_IN = false;

						tos_count_tMap_3_TMAP_IN++;

						/**
						 * [tMap_3_TMAP_IN main ] stop
						 */
						// Start of branch "to_tmap"
						if (to_tmap != null) {

							/**
							 * [tAdvancedHash_to_tmap main ] start
							 */

							currentComponent = "tAdvancedHash_to_tmap";

							to_tmapStruct to_tmap_HashRow = tHash_Lookup_to_tmap
									.getNextFreeRow();

							to_tmap_HashRow.TREE_PATH = to_tmap.TREE_PATH;

							to_tmap_HashRow.STAGING_PATH = to_tmap.STAGING_PATH;

							to_tmap_HashRow.CONCEPT_CD = to_tmap.CONCEPT_CD;

							to_tmap_HashRow.NAME_CHAR = to_tmap.NAME_CHAR;

							to_tmap_HashRow.CONCEPT_BLOB = to_tmap.CONCEPT_BLOB;

							to_tmap_HashRow.UPDATE_DATE = to_tmap.UPDATE_DATE;

							to_tmap_HashRow.DOWNLOAD_DATE = to_tmap.DOWNLOAD_DATE;

							to_tmap_HashRow.IMPORT_DATE = to_tmap.IMPORT_DATE;

							to_tmap_HashRow.SOURCESYSTEM_CD = to_tmap.SOURCESYSTEM_CD;

							to_tmap_HashRow.UPLOAD_ID = to_tmap.UPLOAD_ID;

							to_tmap_HashRow.STARTDATE_SOURCE_PATH = to_tmap.STARTDATE_SOURCE_PATH;

							to_tmap_HashRow.ENDDATE_SOURCE_PATH = to_tmap.ENDDATE_SOURCE_PATH;

							to_tmap_HashRow.BASECODE = to_tmap.BASECODE;

							to_tmap_HashRow.C_NAME = to_tmap.C_NAME;

							tHash_Lookup_to_tmap.put(to_tmap_HashRow);

							tos_count_tAdvancedHash_to_tmap++;

							/**
							 * [tAdvancedHash_to_tmap main ] stop
							 */

						} // End of branch "to_tmap"

					} // close loop of lookup 'from_src_conc_dim' // G_TM_M_043

				} // G_TM_M_250 close loop read file data '1'

				/**
				 * [tMap_3_TMAP_IN end ] start
				 */

				currentVirtualComponent = "tMap_3";

				currentComponent = "tMap_3_TMAP_IN";

				// ###############################
				// # Lookup hashes releasing
				fsi_tMap_3_1.endGet();

				if (tHash_Lookup_from_src_conc_dim != null) {
					tHash_Lookup_from_src_conc_dim.endGet();
				}
				globalMap.remove("tHash_Lookup_from_src_conc_dim");

				// ###############################

				ok_Hash.put("tMap_3_TMAP_IN", true);
				end_Hash.put("tMap_3_TMAP_IN", System.currentTimeMillis());

				/**
				 * [tMap_3_TMAP_IN end ] stop
				 */

				/**
				 * [tAdvancedHash_to_tmap end ] start
				 */

				currentComponent = "tAdvancedHash_to_tmap";

				tHash_Lookup_to_tmap.endPut();

				ok_Hash.put("tAdvancedHash_to_tmap", true);
				end_Hash.put("tAdvancedHash_to_tmap",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_to_tmap end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_5 finally ] start
				 */

				currentComponent = "tFileInputDelimited_5";

				/**
				 * [tFileInputDelimited_5 finally ] stop
				 */

				/**
				 * [tMap_3_TMAP_OUT finally ] start
				 */

				currentVirtualComponent = "tMap_3";

				currentComponent = "tMap_3_TMAP_OUT";

				/**
				 * [tMap_3_TMAP_OUT finally ] stop
				 */

				/**
				 * [tMap_3_TMAP_IN finally ] start
				 */

				currentVirtualComponent = "tMap_3";

				currentComponent = "tMap_3_TMAP_IN";

				/**
				 * [tMap_3_TMAP_IN finally ] stop
				 */

				/**
				 * [tAdvancedHash_to_tmap finally ] start
				 */

				currentComponent = "tAdvancedHash_to_tmap";

				/**
				 * [tAdvancedHash_to_tmap finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 1);
	}

	public static class from_src_conc_dimStruct
			implements
			routines.system.IPersistableComparableLookupRow<from_src_conc_dimStruct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.CONCEPT_PATH == null) ? 0 : this.CONCEPT_PATH
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final from_src_conc_dimStruct other = (from_src_conc_dimStruct) obj;

			if (this.CONCEPT_PATH == null) {
				if (other.CONCEPT_PATH != null)
					return false;

			} else if (!this.CONCEPT_PATH.equals(other.CONCEPT_PATH))

				return false;

			return true;
		}

		public void copyDataTo(from_src_conc_dimStruct other) {

			other.CONCEPT_PATH = this.CONCEPT_PATH;
			other.CONCEPT_CD = this.CONCEPT_CD;
			other.NAME_CHAR = this.NAME_CHAR;
			other.CONCEPT_BLOB = this.CONCEPT_BLOB;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(from_src_conc_dimStruct other) {

			other.CONCEPT_PATH = this.CONCEPT_PATH;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.CONCEPT_CD = readString(dis, ois);

				this.NAME_CHAR = readString(dis, ois);

				this.CONCEPT_BLOB = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.CONCEPT_CD, dos, oos);

				writeString(this.NAME_CHAR, dos, oos);

				writeString(this.CONCEPT_BLOB, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(from_src_conc_dimStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CONCEPT_PATH,
					other.CONCEPT_PATH);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				from_src_conc_dimStruct from_src_conc_dim = new from_src_conc_dimStruct();

				/**
				 * [tAdvancedHash_from_src_conc_dim begin ] start
				 */

				ok_Hash.put("tAdvancedHash_from_src_conc_dim", false);
				start_Hash.put("tAdvancedHash_from_src_conc_dim",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_from_src_conc_dim";

				int tos_count_tAdvancedHash_from_src_conc_dim = 0;

				// connection name:from_src_conc_dim
				// source node:tFileInputDelimited_4 -
				// inputs:(after_tFileInputDelimited_5)
				// outputs:(from_src_conc_dim,from_src_conc_dim) | target
				// node:tAdvancedHash_from_src_conc_dim -
				// inputs:(from_src_conc_dim) outputs:()
				// linked node: tMap_3 -
				// inputs:(from_oe_target_ont,from_src_conc_dim)
				// outputs:(to_tmap,to_tmap)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_from_src_conc_dim = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<from_src_conc_dimStruct> tHash_Lookup_from_src_conc_dim = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<from_src_conc_dimStruct>(
						matchingModeEnum_from_src_conc_dim,
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid
								+ "_Lookup_from_src_conc_dim_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public from_src_conc_dimStruct createRowInstance() {
								return new from_src_conc_dimStruct();
							}
						}

						, 200000

				);

				tHash_Lookup_from_src_conc_dim.initPut();

				globalMap.put("tHash_Lookup_from_src_conc_dim",
						tHash_Lookup_from_src_conc_dim);

				/**
				 * [tAdvancedHash_from_src_conc_dim begin ] stop
				 */

				/**
				 * [tFileInputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_4", false);
				start_Hash.put("tFileInputDelimited_4",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_4";

				int tos_count_tFileInputDelimited_4 = 0;

				int nb_line_tFileInputDelimited_4 = 0;
				int footer_tFileInputDelimited_4 = 0;
				int totalLinetFileInputDelimited_4 = 0;
				int limittFileInputDelimited_4 = -1;
				int lastLinetFileInputDelimited_4 = -1;

				char fieldSeparator_tFileInputDelimited_4[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_4 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_4[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_4 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_4 = /**
				 * Start field
				 * tFileInputDelimited_4:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_4_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_4:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_4 = null;

				try {

					String[] rowtFileInputDelimited_4 = null;
					int currentLinetFileInputDelimited_4 = 0;
					int outputLinetFileInputDelimited_4 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_4 = 0;
							if (footer_value_tFileInputDelimited_4 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_4,
									fieldSeparator_tFileInputDelimited_4[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_4)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_4[0]);
						}

						csvReadertFileInputDelimited_4.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_4[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_4[0] != '\r'))
							csvReadertFileInputDelimited_4.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_4[0]);

						csvReadertFileInputDelimited_4.setQuoteChar('"');

						csvReadertFileInputDelimited_4
								.setEscapeChar(csvReadertFileInputDelimited_4
										.getQuoteChar());

						if (footer_tFileInputDelimited_4 > 0) {
							for (totalLinetFileInputDelimited_4 = 0; totalLinetFileInputDelimited_4 < 1; totalLinetFileInputDelimited_4++) {
								csvReadertFileInputDelimited_4.readNext();
							}
							csvReadertFileInputDelimited_4
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_4.readNext()) {

								rowtFileInputDelimited_4 = csvReadertFileInputDelimited_4
										.getValues();
								if (!(rowtFileInputDelimited_4.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_4[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_4++;

								}

							}
							int lastLineTemptFileInputDelimited_4 = totalLinetFileInputDelimited_4
									- footer_tFileInputDelimited_4 < 0 ? 0
									: totalLinetFileInputDelimited_4
											- footer_tFileInputDelimited_4;
							if (lastLinetFileInputDelimited_4 > 0) {
								lastLinetFileInputDelimited_4 = lastLinetFileInputDelimited_4 < lastLineTemptFileInputDelimited_4 ? lastLinetFileInputDelimited_4
										: lastLineTemptFileInputDelimited_4;
							} else {
								lastLinetFileInputDelimited_4 = lastLineTemptFileInputDelimited_4;
							}

							csvReadertFileInputDelimited_4.close();
							if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_4,
										fieldSeparator_tFileInputDelimited_4[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_4)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_4[0]);
							}
							csvReadertFileInputDelimited_4
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_4[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_4[0] != '\r'))
								csvReadertFileInputDelimited_4
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_4[0]);

							csvReadertFileInputDelimited_4.setQuoteChar('"');

							csvReadertFileInputDelimited_4
									.setEscapeChar(csvReadertFileInputDelimited_4
											.getQuoteChar());

						}

						if (limittFileInputDelimited_4 != 0) {
							for (currentLinetFileInputDelimited_4 = 0; currentLinetFileInputDelimited_4 < 1; currentLinetFileInputDelimited_4++) {
								csvReadertFileInputDelimited_4.readNext();
							}
						}
						csvReadertFileInputDelimited_4
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_4 != 0
							&& csvReadertFileInputDelimited_4 != null
							&& csvReadertFileInputDelimited_4.readNext()) {

						rowtFileInputDelimited_4 = csvReadertFileInputDelimited_4
								.getValues();

						if (rowtFileInputDelimited_4.length == 1
								&& ("\015").equals(rowtFileInputDelimited_4[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_4++;

						if (lastLinetFileInputDelimited_4 > -1
								&& currentLinetFileInputDelimited_4 > lastLinetFileInputDelimited_4) {
							break;
						}
						outputLinetFileInputDelimited_4++;
						if (limittFileInputDelimited_4 > 0
								&& outputLinetFileInputDelimited_4 > limittFileInputDelimited_4) {
							break;
						}

						from_src_conc_dim = null;

						from_src_conc_dim = null;

						boolean whetherReject_tFileInputDelimited_4 = false;
						from_src_conc_dim = new from_src_conc_dimStruct();
						try {

							char fieldSeparator_tFileInputDelimited_4_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_4_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_4.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_4[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								from_src_conc_dim.CONCEPT_PATH = null;

								from_src_conc_dim.CONCEPT_CD = null;

								from_src_conc_dim.NAME_CHAR = null;

								from_src_conc_dim.CONCEPT_BLOB = null;

								from_src_conc_dim.UPDATE_DATE = null;

								from_src_conc_dim.DOWNLOAD_DATE = null;

								from_src_conc_dim.IMPORT_DATE = null;

								from_src_conc_dim.SOURCESYSTEM_CD = null;

								from_src_conc_dim.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_4 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_4 = 0;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									from_src_conc_dim.CONCEPT_PATH = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									from_src_conc_dim.CONCEPT_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 1;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									from_src_conc_dim.CONCEPT_CD = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									from_src_conc_dim.CONCEPT_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 2;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									from_src_conc_dim.NAME_CHAR = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									from_src_conc_dim.NAME_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 3;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									from_src_conc_dim.CONCEPT_BLOB = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									from_src_conc_dim.CONCEPT_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 4;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									if (rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]
											.length() > 0) {

										from_src_conc_dim.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4],
														"dd-MM-yyyy");

									} else {
										from_src_conc_dim.UPDATE_DATE = null;
									}

								} else {
									from_src_conc_dim.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 5;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									if (rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]
											.length() > 0) {

										from_src_conc_dim.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4],
														"dd-MM-yyyy");

									} else {
										from_src_conc_dim.DOWNLOAD_DATE = null;
									}

								} else {
									from_src_conc_dim.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 6;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									if (rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]
											.length() > 0) {

										from_src_conc_dim.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4],
														"dd-MM-yyyy");

									} else {
										from_src_conc_dim.IMPORT_DATE = null;
									}

								} else {
									from_src_conc_dim.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 7;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									from_src_conc_dim.SOURCESYSTEM_CD = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									from_src_conc_dim.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 8;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									from_src_conc_dim.UPLOAD_ID = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									from_src_conc_dim.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_4 = true;

							System.err.println(e.getMessage());
							from_src_conc_dim = null;

						}

						/**
						 * [tFileInputDelimited_4 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_4 main ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						tos_count_tFileInputDelimited_4++;

						/**
						 * [tFileInputDelimited_4 main ] stop
						 */
						// Start of branch "from_src_conc_dim"
						if (from_src_conc_dim != null) {

							/**
							 * [tAdvancedHash_from_src_conc_dim main ] start
							 */

							currentComponent = "tAdvancedHash_from_src_conc_dim";

							from_src_conc_dimStruct from_src_conc_dim_HashRow = tHash_Lookup_from_src_conc_dim
									.getNextFreeRow();

							from_src_conc_dim_HashRow.CONCEPT_PATH = from_src_conc_dim.CONCEPT_PATH;

							from_src_conc_dim_HashRow.CONCEPT_CD = from_src_conc_dim.CONCEPT_CD;

							from_src_conc_dim_HashRow.NAME_CHAR = from_src_conc_dim.NAME_CHAR;

							from_src_conc_dim_HashRow.CONCEPT_BLOB = from_src_conc_dim.CONCEPT_BLOB;

							from_src_conc_dim_HashRow.UPDATE_DATE = from_src_conc_dim.UPDATE_DATE;

							from_src_conc_dim_HashRow.DOWNLOAD_DATE = from_src_conc_dim.DOWNLOAD_DATE;

							from_src_conc_dim_HashRow.IMPORT_DATE = from_src_conc_dim.IMPORT_DATE;

							from_src_conc_dim_HashRow.SOURCESYSTEM_CD = from_src_conc_dim.SOURCESYSTEM_CD;

							from_src_conc_dim_HashRow.UPLOAD_ID = from_src_conc_dim.UPLOAD_ID;

							tHash_Lookup_from_src_conc_dim
									.put(from_src_conc_dim_HashRow);

							tos_count_tAdvancedHash_from_src_conc_dim++;

							/**
							 * [tAdvancedHash_from_src_conc_dim main ] stop
							 */

						} // End of branch "from_src_conc_dim"

						/**
						 * [tFileInputDelimited_4 end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						nb_line_tFileInputDelimited_4++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_4 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_4 != null) {
							csvReadertFileInputDelimited_4.close();
						}
					}
					if (csvReadertFileInputDelimited_4 != null) {
						globalMap.put("tFileInputDelimited_4_NB_LINE",
								nb_line_tFileInputDelimited_4);
					}

				}

				ok_Hash.put("tFileInputDelimited_4", true);
				end_Hash.put("tFileInputDelimited_4",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_from_src_conc_dim end ] start
				 */

				currentComponent = "tAdvancedHash_from_src_conc_dim";

				tHash_Lookup_from_src_conc_dim.endPut();

				ok_Hash.put("tAdvancedHash_from_src_conc_dim", true);
				end_Hash.put("tAdvancedHash_from_src_conc_dim",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_from_src_conc_dim end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_4 finally ] start
				 */

				currentComponent = "tFileInputDelimited_4";

				/**
				 * [tFileInputDelimited_4 finally ] stop
				 */

				/**
				 * [tAdvancedHash_from_src_conc_dim finally ] start
				 */

				currentComponent = "tAdvancedHash_from_src_conc_dim";

				/**
				 * [tAdvancedHash_from_src_conc_dim finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}

	public static class row14Struct implements
			routines.system.IPersistableComparableLookupRow<row14Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public String START_DATE;

		public String getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public String END_DATE;

		public String getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.PATIENT_NUM == null) ? 0 : this.PATIENT_NUM
								.hashCode());

				result = prime
						* result
						+ ((this.CONCEPT_CD == null) ? 0 : this.CONCEPT_CD
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row14Struct other = (row14Struct) obj;

			if (this.PATIENT_NUM == null) {
				if (other.PATIENT_NUM != null)
					return false;

			} else if (!this.PATIENT_NUM.equals(other.PATIENT_NUM))

				return false;

			if (this.CONCEPT_CD == null) {
				if (other.CONCEPT_CD != null)
					return false;

			} else if (!this.CONCEPT_CD.equals(other.CONCEPT_CD))

				return false;

			return true;
		}

		public void copyDataTo(row14Struct other) {

			other.ENCOUNTER_NUM = this.ENCOUNTER_NUM;
			other.PATIENT_NUM = this.PATIENT_NUM;
			other.CONCEPT_CD = this.CONCEPT_CD;
			other.PROVIDER_ID = this.PROVIDER_ID;
			other.START_DATE = this.START_DATE;
			other.MODIFIER_CD = this.MODIFIER_CD;
			other.INSTANCE_NUM = this.INSTANCE_NUM;
			other.VALTYPE_CD = this.VALTYPE_CD;
			other.TVAL_CHAR = this.TVAL_CHAR;
			other.NVAL_NUM = this.NVAL_NUM;
			other.VALUEFLAG_CD = this.VALUEFLAG_CD;
			other.QUANTITY_NUM = this.QUANTITY_NUM;
			other.UNITS_CD = this.UNITS_CD;
			other.END_DATE = this.END_DATE;
			other.LOCATION_CD = this.LOCATION_CD;
			other.OBSERVATION_BLOB = this.OBSERVATION_BLOB;
			other.CONFIDENCE_NUM = this.CONFIDENCE_NUM;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row14Struct other) {

			other.PATIENT_NUM = this.PATIENT_NUM;
			other.CONCEPT_CD = this.CONCEPT_CD;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ENCOUNTER_NUM = (BigDecimal) ois.readObject();

				this.PROVIDER_ID = readString(dis, ois);

				this.START_DATE = readString(dis, ois);

				this.MODIFIER_CD = readString(dis, ois);

				this.INSTANCE_NUM = readString(dis, ois);

				this.VALTYPE_CD = readString(dis, ois);

				this.TVAL_CHAR = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.NVAL_NUM = null;
				} else {
					this.NVAL_NUM = dis.readFloat();
				}

				this.VALUEFLAG_CD = readString(dis, ois);

				this.QUANTITY_NUM = readString(dis, ois);

				this.UNITS_CD = readString(dis, ois);

				this.END_DATE = readString(dis, ois);

				this.LOCATION_CD = readString(dis, ois);

				this.OBSERVATION_BLOB = readString(dis, ois);

				this.CONFIDENCE_NUM = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				oos.writeObject(this.ENCOUNTER_NUM);

				writeString(this.PROVIDER_ID, dos, oos);

				writeString(this.START_DATE, dos, oos);

				writeString(this.MODIFIER_CD, dos, oos);

				writeString(this.INSTANCE_NUM, dos, oos);

				writeString(this.VALTYPE_CD, dos, oos);

				writeString(this.TVAL_CHAR, dos, oos);

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				writeString(this.VALUEFLAG_CD, dos, oos);

				writeString(this.QUANTITY_NUM, dos, oos);

				writeString(this.UNITS_CD, dos, oos);

				writeString(this.END_DATE, dos, oos);

				writeString(this.LOCATION_CD, dos, oos);

				writeString(this.OBSERVATION_BLOB, dos, oos);

				writeString(this.CONFIDENCE_NUM, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + START_DATE);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + END_DATE);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PATIENT_NUM,
					other.PATIENT_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.CONCEPT_CD,
					other.CONCEPT_CD);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_11Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row14Struct row14 = new row14Struct();

				/**
				 * [tAdvancedHash_row14 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row14", false);
				start_Hash.put("tAdvancedHash_row14",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row14";

				int tos_count_tAdvancedHash_row14 = 0;

				// connection name:row14
				// source node:tFileInputDelimited_11 -
				// inputs:(after_tFileInputDelimited_3) outputs:(row14,row14) |
				// target node:tAdvancedHash_row14 - inputs:(row14) outputs:()
				// linked node: tMap_9 - inputs:(row3,row14,row15)
				// outputs:(out1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row14 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row14Struct> tHash_Lookup_row14 = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row14Struct>(
						matchingModeEnum_row14,
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid
								+ "_Lookup_row14_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public row14Struct createRowInstance() {
								return new row14Struct();
							}
						}

						, 200000

				);

				tHash_Lookup_row14.initPut();

				globalMap.put("tHash_Lookup_row14", tHash_Lookup_row14);

				/**
				 * [tAdvancedHash_row14 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_11 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_11", false);
				start_Hash.put("tFileInputDelimited_11",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_11";

				int tos_count_tFileInputDelimited_11 = 0;

				int nb_line_tFileInputDelimited_11 = 0;
				int footer_tFileInputDelimited_11 = 0;
				int totalLinetFileInputDelimited_11 = 0;
				int limittFileInputDelimited_11 = -1;
				int lastLinetFileInputDelimited_11 = -1;

				char fieldSeparator_tFileInputDelimited_11[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_11 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_11[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_11 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_11 = /**
				 * Start field
				 * tFileInputDelimited_11:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_3_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_11:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_11 = null;

				try {

					String[] rowtFileInputDelimited_11 = null;
					int currentLinetFileInputDelimited_11 = 0;
					int outputLinetFileInputDelimited_11 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_11 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_11 = 0;
							if (footer_value_tFileInputDelimited_11 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_11 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_11,
									fieldSeparator_tFileInputDelimited_11[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_11 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_11)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_11[0]);
						}

						csvReadertFileInputDelimited_11
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_11[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_11[0] != '\r'))
							csvReadertFileInputDelimited_11.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_11[0]);

						csvReadertFileInputDelimited_11.setQuoteChar('"');

						csvReadertFileInputDelimited_11
								.setEscapeChar(csvReadertFileInputDelimited_11
										.getQuoteChar());

						if (footer_tFileInputDelimited_11 > 0) {
							for (totalLinetFileInputDelimited_11 = 0; totalLinetFileInputDelimited_11 < 0; totalLinetFileInputDelimited_11++) {
								csvReadertFileInputDelimited_11.readNext();
							}
							csvReadertFileInputDelimited_11
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_11.readNext()) {

								rowtFileInputDelimited_11 = csvReadertFileInputDelimited_11
										.getValues();
								if (!(rowtFileInputDelimited_11.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_11[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_11++;

								}

							}
							int lastLineTemptFileInputDelimited_11 = totalLinetFileInputDelimited_11
									- footer_tFileInputDelimited_11 < 0 ? 0
									: totalLinetFileInputDelimited_11
											- footer_tFileInputDelimited_11;
							if (lastLinetFileInputDelimited_11 > 0) {
								lastLinetFileInputDelimited_11 = lastLinetFileInputDelimited_11 < lastLineTemptFileInputDelimited_11 ? lastLinetFileInputDelimited_11
										: lastLineTemptFileInputDelimited_11;
							} else {
								lastLinetFileInputDelimited_11 = lastLineTemptFileInputDelimited_11;
							}

							csvReadertFileInputDelimited_11.close();
							if (filename_tFileInputDelimited_11 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_11 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_11,
										fieldSeparator_tFileInputDelimited_11[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_11 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_11)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_11[0]);
							}
							csvReadertFileInputDelimited_11
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_11[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_11[0] != '\r'))
								csvReadertFileInputDelimited_11
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_11[0]);

							csvReadertFileInputDelimited_11.setQuoteChar('"');

							csvReadertFileInputDelimited_11
									.setEscapeChar(csvReadertFileInputDelimited_11
											.getQuoteChar());

						}

						if (limittFileInputDelimited_11 != 0) {
							for (currentLinetFileInputDelimited_11 = 0; currentLinetFileInputDelimited_11 < 0; currentLinetFileInputDelimited_11++) {
								csvReadertFileInputDelimited_11.readNext();
							}
						}
						csvReadertFileInputDelimited_11
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_11 != 0
							&& csvReadertFileInputDelimited_11 != null
							&& csvReadertFileInputDelimited_11.readNext()) {

						rowtFileInputDelimited_11 = csvReadertFileInputDelimited_11
								.getValues();

						if (rowtFileInputDelimited_11.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_11[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_11++;

						if (lastLinetFileInputDelimited_11 > -1
								&& currentLinetFileInputDelimited_11 > lastLinetFileInputDelimited_11) {
							break;
						}
						outputLinetFileInputDelimited_11++;
						if (limittFileInputDelimited_11 > 0
								&& outputLinetFileInputDelimited_11 > limittFileInputDelimited_11) {
							break;
						}

						row14 = null;

						row14 = null;

						boolean whetherReject_tFileInputDelimited_11 = false;
						row14 = new row14Struct();
						try {

							char fieldSeparator_tFileInputDelimited_11_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_11_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_11.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_11[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row14.ENCOUNTER_NUM = null;

								row14.PATIENT_NUM = null;

								row14.CONCEPT_CD = null;

								row14.PROVIDER_ID = null;

								row14.START_DATE = null;

								row14.MODIFIER_CD = null;

								row14.INSTANCE_NUM = null;

								row14.VALTYPE_CD = null;

								row14.TVAL_CHAR = null;

								row14.NVAL_NUM = null;

								row14.VALUEFLAG_CD = null;

								row14.QUANTITY_NUM = null;

								row14.UNITS_CD = null;

								row14.END_DATE = null;

								row14.LOCATION_CD = null;

								row14.OBSERVATION_BLOB = null;

								row14.CONFIDENCE_NUM = null;

								row14.UPDATE_DATE = null;

								row14.DOWNLOAD_DATE = null;

								row14.IMPORT_DATE = null;

								row14.SOURCESYSTEM_CD = null;

								row14.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_11 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_11 = 0;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									if (rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11]
											.length() > 0) {

										row14.ENCOUNTER_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11]);

									} else {
										row14.ENCOUNTER_NUM = null;
									}

								} else {
									row14.ENCOUNTER_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 1;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									if (rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11]
											.length() > 0) {

										row14.PATIENT_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11]);

									} else {
										row14.PATIENT_NUM = null;
									}

								} else {
									row14.PATIENT_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 2;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									row14.CONCEPT_CD = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

								} else {
									row14.CONCEPT_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 3;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									row14.PROVIDER_ID = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

								} else {
									row14.PROVIDER_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 4;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									row14.START_DATE = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

								} else {
									row14.START_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 5;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									row14.MODIFIER_CD = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

								} else {
									row14.MODIFIER_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 6;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									row14.INSTANCE_NUM = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

								} else {
									row14.INSTANCE_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 7;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									row14.VALTYPE_CD = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

								} else {
									row14.VALTYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 8;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									row14.TVAL_CHAR = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

								} else {
									row14.TVAL_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 9;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									if (rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11]
											.length() > 0) {

										row14.NVAL_NUM = ParserUtils
												.parseTo_Float(rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11]);

									} else {
										row14.NVAL_NUM = null;
									}

								} else {
									row14.NVAL_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 10;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									row14.VALUEFLAG_CD = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

								} else {
									row14.VALUEFLAG_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 11;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									row14.QUANTITY_NUM = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

								} else {
									row14.QUANTITY_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 12;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									row14.UNITS_CD = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

								} else {
									row14.UNITS_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 13;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									row14.END_DATE = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

								} else {
									row14.END_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 14;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									row14.LOCATION_CD = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

								} else {
									row14.LOCATION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 15;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									row14.OBSERVATION_BLOB = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

								} else {
									row14.OBSERVATION_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 16;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									row14.CONFIDENCE_NUM = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

								} else {
									row14.CONFIDENCE_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 17;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									if (rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11]
											.length() > 0) {

										row14.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11],
														"yyyy-MM-dd");

									} else {
										row14.UPDATE_DATE = null;
									}

								} else {
									row14.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 18;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									if (rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11]
											.length() > 0) {

										row14.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11],
														"yyyy-MM-dd");

									} else {
										row14.DOWNLOAD_DATE = null;
									}

								} else {
									row14.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 19;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									if (rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11]
											.length() > 0) {

										row14.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11],
														"yyyy-MM-dd");

									} else {
										row14.IMPORT_DATE = null;
									}

								} else {
									row14.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 20;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									row14.SOURCESYSTEM_CD = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

								} else {
									row14.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_11 = 21;

								if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

									row14.UPLOAD_ID = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

								} else {
									row14.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_11 = true;

							System.err.println(e.getMessage());
							row14 = null;

						}

						/**
						 * [tFileInputDelimited_11 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_11 main ] start
						 */

						currentComponent = "tFileInputDelimited_11";

						tos_count_tFileInputDelimited_11++;

						/**
						 * [tFileInputDelimited_11 main ] stop
						 */
						// Start of branch "row14"
						if (row14 != null) {

							/**
							 * [tAdvancedHash_row14 main ] start
							 */

							currentComponent = "tAdvancedHash_row14";

							row14Struct row14_HashRow = tHash_Lookup_row14
									.getNextFreeRow();

							row14_HashRow.ENCOUNTER_NUM = row14.ENCOUNTER_NUM;

							row14_HashRow.PATIENT_NUM = row14.PATIENT_NUM;

							row14_HashRow.CONCEPT_CD = row14.CONCEPT_CD;

							row14_HashRow.PROVIDER_ID = row14.PROVIDER_ID;

							row14_HashRow.START_DATE = row14.START_DATE;

							row14_HashRow.MODIFIER_CD = row14.MODIFIER_CD;

							row14_HashRow.INSTANCE_NUM = row14.INSTANCE_NUM;

							row14_HashRow.VALTYPE_CD = row14.VALTYPE_CD;

							row14_HashRow.TVAL_CHAR = row14.TVAL_CHAR;

							row14_HashRow.NVAL_NUM = row14.NVAL_NUM;

							row14_HashRow.VALUEFLAG_CD = row14.VALUEFLAG_CD;

							row14_HashRow.QUANTITY_NUM = row14.QUANTITY_NUM;

							row14_HashRow.UNITS_CD = row14.UNITS_CD;

							row14_HashRow.END_DATE = row14.END_DATE;

							row14_HashRow.LOCATION_CD = row14.LOCATION_CD;

							row14_HashRow.OBSERVATION_BLOB = row14.OBSERVATION_BLOB;

							row14_HashRow.CONFIDENCE_NUM = row14.CONFIDENCE_NUM;

							row14_HashRow.UPDATE_DATE = row14.UPDATE_DATE;

							row14_HashRow.DOWNLOAD_DATE = row14.DOWNLOAD_DATE;

							row14_HashRow.IMPORT_DATE = row14.IMPORT_DATE;

							row14_HashRow.SOURCESYSTEM_CD = row14.SOURCESYSTEM_CD;

							row14_HashRow.UPLOAD_ID = row14.UPLOAD_ID;

							tHash_Lookup_row14.put(row14_HashRow);

							tos_count_tAdvancedHash_row14++;

							/**
							 * [tAdvancedHash_row14 main ] stop
							 */

						} // End of branch "row14"

						/**
						 * [tFileInputDelimited_11 end ] start
						 */

						currentComponent = "tFileInputDelimited_11";

						nb_line_tFileInputDelimited_11++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_11 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_11 != null) {
							csvReadertFileInputDelimited_11.close();
						}
					}
					if (csvReadertFileInputDelimited_11 != null) {
						globalMap.put("tFileInputDelimited_11_NB_LINE",
								nb_line_tFileInputDelimited_11);
					}

				}

				ok_Hash.put("tFileInputDelimited_11", true);
				end_Hash.put("tFileInputDelimited_11",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_11 end ] stop
				 */

				/**
				 * [tAdvancedHash_row14 end ] start
				 */

				currentComponent = "tAdvancedHash_row14";

				tHash_Lookup_row14.endPut();

				ok_Hash.put("tAdvancedHash_row14", true);
				end_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row14 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_11 finally ] start
				 */

				currentComponent = "tFileInputDelimited_11";

				/**
				 * [tFileInputDelimited_11 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row14 finally ] start
				 */

				currentComponent = "tAdvancedHash_row14";

				/**
				 * [tAdvancedHash_row14 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_11_SUBPROCESS_STATE", 1);
	}

	public static class row15Struct implements
			routines.system.IPersistableComparableLookupRow<row15Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.CONCEPT_PATH == null) ? 0 : this.CONCEPT_PATH
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row15Struct other = (row15Struct) obj;

			if (this.CONCEPT_PATH == null) {
				if (other.CONCEPT_PATH != null)
					return false;

			} else if (!this.CONCEPT_PATH.equals(other.CONCEPT_PATH))

				return false;

			return true;
		}

		public void copyDataTo(row15Struct other) {

			other.CONCEPT_PATH = this.CONCEPT_PATH;
			other.CONCEPT_CD = this.CONCEPT_CD;
			other.NAME_CHAR = this.NAME_CHAR;
			other.CONCEPT_BLOB = this.CONCEPT_BLOB;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row15Struct other) {

			other.CONCEPT_PATH = this.CONCEPT_PATH;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.CONCEPT_CD = readString(dis, ois);

				this.NAME_CHAR = readString(dis, ois);

				this.CONCEPT_BLOB = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.CONCEPT_CD, dos, oos);

				writeString(this.NAME_CHAR, dos, oos);

				writeString(this.CONCEPT_BLOB, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CONCEPT_PATH,
					other.CONCEPT_PATH);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_10Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row15Struct row15 = new row15Struct();

				/**
				 * [tAdvancedHash_row15 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row15", false);
				start_Hash.put("tAdvancedHash_row15",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row15";

				int tos_count_tAdvancedHash_row15 = 0;

				// connection name:row15
				// source node:tFileInputDelimited_10 -
				// inputs:(after_tFileInputDelimited_3) outputs:(row15,row15) |
				// target node:tAdvancedHash_row15 - inputs:(row15) outputs:()
				// linked node: tMap_9 - inputs:(row3,row14,row15)
				// outputs:(out1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row15 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row15Struct> tHash_Lookup_row15 = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row15Struct>(
						matchingModeEnum_row15,
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid
								+ "_Lookup_row15_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public row15Struct createRowInstance() {
								return new row15Struct();
							}
						}

						, 200000

				);

				tHash_Lookup_row15.initPut();

				globalMap.put("tHash_Lookup_row15", tHash_Lookup_row15);

				/**
				 * [tAdvancedHash_row15 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_10 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_10", false);
				start_Hash.put("tFileInputDelimited_10",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_10";

				int tos_count_tFileInputDelimited_10 = 0;

				int nb_line_tFileInputDelimited_10 = 0;
				int footer_tFileInputDelimited_10 = 0;
				int totalLinetFileInputDelimited_10 = 0;
				int limittFileInputDelimited_10 = -1;
				int lastLinetFileInputDelimited_10 = -1;

				char fieldSeparator_tFileInputDelimited_10[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_10 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_10[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_10 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_10 = /**
				 * Start field
				 * tFileInputDelimited_10:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_4_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_10:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_10 = null;

				try {

					String[] rowtFileInputDelimited_10 = null;
					int currentLinetFileInputDelimited_10 = 0;
					int outputLinetFileInputDelimited_10 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_10 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_10 = 0;
							if (footer_value_tFileInputDelimited_10 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_10 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_10,
									fieldSeparator_tFileInputDelimited_10[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_10 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_10)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_10[0]);
						}

						csvReadertFileInputDelimited_10
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_10[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_10[0] != '\r'))
							csvReadertFileInputDelimited_10.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_10[0]);

						csvReadertFileInputDelimited_10.setQuoteChar('"');

						csvReadertFileInputDelimited_10
								.setEscapeChar(csvReadertFileInputDelimited_10
										.getQuoteChar());

						if (footer_tFileInputDelimited_10 > 0) {
							for (totalLinetFileInputDelimited_10 = 0; totalLinetFileInputDelimited_10 < 1; totalLinetFileInputDelimited_10++) {
								csvReadertFileInputDelimited_10.readNext();
							}
							csvReadertFileInputDelimited_10
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_10.readNext()) {

								rowtFileInputDelimited_10 = csvReadertFileInputDelimited_10
										.getValues();
								if (!(rowtFileInputDelimited_10.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_10[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_10++;

								}

							}
							int lastLineTemptFileInputDelimited_10 = totalLinetFileInputDelimited_10
									- footer_tFileInputDelimited_10 < 0 ? 0
									: totalLinetFileInputDelimited_10
											- footer_tFileInputDelimited_10;
							if (lastLinetFileInputDelimited_10 > 0) {
								lastLinetFileInputDelimited_10 = lastLinetFileInputDelimited_10 < lastLineTemptFileInputDelimited_10 ? lastLinetFileInputDelimited_10
										: lastLineTemptFileInputDelimited_10;
							} else {
								lastLinetFileInputDelimited_10 = lastLineTemptFileInputDelimited_10;
							}

							csvReadertFileInputDelimited_10.close();
							if (filename_tFileInputDelimited_10 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_10 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_10,
										fieldSeparator_tFileInputDelimited_10[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_10 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_10)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_10[0]);
							}
							csvReadertFileInputDelimited_10
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_10[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_10[0] != '\r'))
								csvReadertFileInputDelimited_10
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_10[0]);

							csvReadertFileInputDelimited_10.setQuoteChar('"');

							csvReadertFileInputDelimited_10
									.setEscapeChar(csvReadertFileInputDelimited_10
											.getQuoteChar());

						}

						if (limittFileInputDelimited_10 != 0) {
							for (currentLinetFileInputDelimited_10 = 0; currentLinetFileInputDelimited_10 < 1; currentLinetFileInputDelimited_10++) {
								csvReadertFileInputDelimited_10.readNext();
							}
						}
						csvReadertFileInputDelimited_10
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_10 != 0
							&& csvReadertFileInputDelimited_10 != null
							&& csvReadertFileInputDelimited_10.readNext()) {

						rowtFileInputDelimited_10 = csvReadertFileInputDelimited_10
								.getValues();

						if (rowtFileInputDelimited_10.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_10[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_10++;

						if (lastLinetFileInputDelimited_10 > -1
								&& currentLinetFileInputDelimited_10 > lastLinetFileInputDelimited_10) {
							break;
						}
						outputLinetFileInputDelimited_10++;
						if (limittFileInputDelimited_10 > 0
								&& outputLinetFileInputDelimited_10 > limittFileInputDelimited_10) {
							break;
						}

						row15 = null;

						row15 = null;

						boolean whetherReject_tFileInputDelimited_10 = false;
						row15 = new row15Struct();
						try {

							char fieldSeparator_tFileInputDelimited_10_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_10_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_10.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_10[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row15.CONCEPT_PATH = null;

								row15.CONCEPT_CD = null;

								row15.NAME_CHAR = null;

								row15.CONCEPT_BLOB = null;

								row15.UPDATE_DATE = null;

								row15.DOWNLOAD_DATE = null;

								row15.IMPORT_DATE = null;

								row15.SOURCESYSTEM_CD = null;

								row15.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_10 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_10 = 0;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row15.CONCEPT_PATH = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row15.CONCEPT_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 1;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row15.CONCEPT_CD = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row15.CONCEPT_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 2;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row15.NAME_CHAR = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row15.NAME_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 3;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row15.CONCEPT_BLOB = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row15.CONCEPT_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 4;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									if (rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10]
											.length() > 0) {

										row15.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10],
														"dd-MM-yyyy");

									} else {
										row15.UPDATE_DATE = null;
									}

								} else {
									row15.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 5;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									if (rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10]
											.length() > 0) {

										row15.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10],
														"dd-MM-yyyy");

									} else {
										row15.DOWNLOAD_DATE = null;
									}

								} else {
									row15.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 6;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									if (rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10]
											.length() > 0) {

										row15.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10],
														"dd-MM-yyyy");

									} else {
										row15.IMPORT_DATE = null;
									}

								} else {
									row15.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 7;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row15.SOURCESYSTEM_CD = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row15.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 8;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row15.UPLOAD_ID = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row15.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_10 = true;

							System.err.println(e.getMessage());
							row15 = null;

						}

						/**
						 * [tFileInputDelimited_10 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_10 main ] start
						 */

						currentComponent = "tFileInputDelimited_10";

						tos_count_tFileInputDelimited_10++;

						/**
						 * [tFileInputDelimited_10 main ] stop
						 */
						// Start of branch "row15"
						if (row15 != null) {

							/**
							 * [tAdvancedHash_row15 main ] start
							 */

							currentComponent = "tAdvancedHash_row15";

							row15Struct row15_HashRow = tHash_Lookup_row15
									.getNextFreeRow();

							row15_HashRow.CONCEPT_PATH = row15.CONCEPT_PATH;

							row15_HashRow.CONCEPT_CD = row15.CONCEPT_CD;

							row15_HashRow.NAME_CHAR = row15.NAME_CHAR;

							row15_HashRow.CONCEPT_BLOB = row15.CONCEPT_BLOB;

							row15_HashRow.UPDATE_DATE = row15.UPDATE_DATE;

							row15_HashRow.DOWNLOAD_DATE = row15.DOWNLOAD_DATE;

							row15_HashRow.IMPORT_DATE = row15.IMPORT_DATE;

							row15_HashRow.SOURCESYSTEM_CD = row15.SOURCESYSTEM_CD;

							row15_HashRow.UPLOAD_ID = row15.UPLOAD_ID;

							tHash_Lookup_row15.put(row15_HashRow);

							tos_count_tAdvancedHash_row15++;

							/**
							 * [tAdvancedHash_row15 main ] stop
							 */

						} // End of branch "row15"

						/**
						 * [tFileInputDelimited_10 end ] start
						 */

						currentComponent = "tFileInputDelimited_10";

						nb_line_tFileInputDelimited_10++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_10 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_10 != null) {
							csvReadertFileInputDelimited_10.close();
						}
					}
					if (csvReadertFileInputDelimited_10 != null) {
						globalMap.put("tFileInputDelimited_10_NB_LINE",
								nb_line_tFileInputDelimited_10);
					}

				}

				ok_Hash.put("tFileInputDelimited_10", true);
				end_Hash.put("tFileInputDelimited_10",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_10 end ] stop
				 */

				/**
				 * [tAdvancedHash_row15 end ] start
				 */

				currentComponent = "tAdvancedHash_row15";

				tHash_Lookup_row15.endPut();

				ok_Hash.put("tAdvancedHash_row15", true);
				end_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row15 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_10 finally ] start
				 */

				currentComponent = "tFileInputDelimited_10";

				/**
				 * [tFileInputDelimited_10 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row15 finally ] start
				 */

				currentComponent = "tAdvancedHash_row15";

				/**
				 * [tAdvancedHash_row15 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_10_SUBPROCESS_STATE", 1);
	}

	public static class row16Struct implements
			routines.system.IPersistableComparableLookupRow<row16Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.CONCEPT_PATH == null) ? 0 : this.CONCEPT_PATH
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row16Struct other = (row16Struct) obj;

			if (this.CONCEPT_PATH == null) {
				if (other.CONCEPT_PATH != null)
					return false;

			} else if (!this.CONCEPT_PATH.equals(other.CONCEPT_PATH))

				return false;

			return true;
		}

		public void copyDataTo(row16Struct other) {

			other.CONCEPT_PATH = this.CONCEPT_PATH;
			other.CONCEPT_CD = this.CONCEPT_CD;
			other.NAME_CHAR = this.NAME_CHAR;
			other.CONCEPT_BLOB = this.CONCEPT_BLOB;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row16Struct other) {

			other.CONCEPT_PATH = this.CONCEPT_PATH;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.CONCEPT_CD = readString(dis, ois);

				this.NAME_CHAR = readString(dis, ois);

				this.CONCEPT_BLOB = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.CONCEPT_CD, dos, oos);

				writeString(this.NAME_CHAR, dos, oos);

				writeString(this.CONCEPT_BLOB, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CONCEPT_PATH,
					other.CONCEPT_PATH);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_9Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row16Struct row16 = new row16Struct();

				/**
				 * [tAdvancedHash_row16 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row16", false);
				start_Hash.put("tAdvancedHash_row16",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row16";

				int tos_count_tAdvancedHash_row16 = 0;

				// connection name:row16
				// source node:tFileInputDelimited_9 -
				// inputs:(after_tFileInputDelimited_3) outputs:(row16,row16) |
				// target node:tAdvancedHash_row16 - inputs:(row16) outputs:()
				// linked node: tMap_8 - inputs:(out1,row16,row17)
				// outputs:(asddd)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row16 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row16Struct> tHash_Lookup_row16 = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row16Struct>(
						matchingModeEnum_row16,
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid
								+ "_Lookup_row16_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public row16Struct createRowInstance() {
								return new row16Struct();
							}
						}

						, 200000

				);

				tHash_Lookup_row16.initPut();

				globalMap.put("tHash_Lookup_row16", tHash_Lookup_row16);

				/**
				 * [tAdvancedHash_row16 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_9 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_9", false);
				start_Hash.put("tFileInputDelimited_9",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_9";

				int tos_count_tFileInputDelimited_9 = 0;

				int nb_line_tFileInputDelimited_9 = 0;
				int footer_tFileInputDelimited_9 = 0;
				int totalLinetFileInputDelimited_9 = 0;
				int limittFileInputDelimited_9 = -1;
				int lastLinetFileInputDelimited_9 = -1;

				char fieldSeparator_tFileInputDelimited_9[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_9 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_9[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_9 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_9 = /**
				 * Start field
				 * tFileInputDelimited_9:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_4_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_9:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_9 = null;

				try {

					String[] rowtFileInputDelimited_9 = null;
					int currentLinetFileInputDelimited_9 = 0;
					int outputLinetFileInputDelimited_9 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_9 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_9 = 0;
							if (footer_value_tFileInputDelimited_9 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_9,
									fieldSeparator_tFileInputDelimited_9[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_9)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_9[0]);
						}

						csvReadertFileInputDelimited_9.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_9[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_9[0] != '\r'))
							csvReadertFileInputDelimited_9.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_9[0]);

						csvReadertFileInputDelimited_9.setQuoteChar('"');

						csvReadertFileInputDelimited_9
								.setEscapeChar(csvReadertFileInputDelimited_9
										.getQuoteChar());

						if (footer_tFileInputDelimited_9 > 0) {
							for (totalLinetFileInputDelimited_9 = 0; totalLinetFileInputDelimited_9 < 1; totalLinetFileInputDelimited_9++) {
								csvReadertFileInputDelimited_9.readNext();
							}
							csvReadertFileInputDelimited_9
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_9.readNext()) {

								rowtFileInputDelimited_9 = csvReadertFileInputDelimited_9
										.getValues();
								if (!(rowtFileInputDelimited_9.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_9[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_9++;

								}

							}
							int lastLineTemptFileInputDelimited_9 = totalLinetFileInputDelimited_9
									- footer_tFileInputDelimited_9 < 0 ? 0
									: totalLinetFileInputDelimited_9
											- footer_tFileInputDelimited_9;
							if (lastLinetFileInputDelimited_9 > 0) {
								lastLinetFileInputDelimited_9 = lastLinetFileInputDelimited_9 < lastLineTemptFileInputDelimited_9 ? lastLinetFileInputDelimited_9
										: lastLineTemptFileInputDelimited_9;
							} else {
								lastLinetFileInputDelimited_9 = lastLineTemptFileInputDelimited_9;
							}

							csvReadertFileInputDelimited_9.close();
							if (filename_tFileInputDelimited_9 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_9,
										fieldSeparator_tFileInputDelimited_9[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_9)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_9[0]);
							}
							csvReadertFileInputDelimited_9
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_9[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_9[0] != '\r'))
								csvReadertFileInputDelimited_9
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_9[0]);

							csvReadertFileInputDelimited_9.setQuoteChar('"');

							csvReadertFileInputDelimited_9
									.setEscapeChar(csvReadertFileInputDelimited_9
											.getQuoteChar());

						}

						if (limittFileInputDelimited_9 != 0) {
							for (currentLinetFileInputDelimited_9 = 0; currentLinetFileInputDelimited_9 < 1; currentLinetFileInputDelimited_9++) {
								csvReadertFileInputDelimited_9.readNext();
							}
						}
						csvReadertFileInputDelimited_9
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_9 != 0
							&& csvReadertFileInputDelimited_9 != null
							&& csvReadertFileInputDelimited_9.readNext()) {

						rowtFileInputDelimited_9 = csvReadertFileInputDelimited_9
								.getValues();

						if (rowtFileInputDelimited_9.length == 1
								&& ("\015").equals(rowtFileInputDelimited_9[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_9++;

						if (lastLinetFileInputDelimited_9 > -1
								&& currentLinetFileInputDelimited_9 > lastLinetFileInputDelimited_9) {
							break;
						}
						outputLinetFileInputDelimited_9++;
						if (limittFileInputDelimited_9 > 0
								&& outputLinetFileInputDelimited_9 > limittFileInputDelimited_9) {
							break;
						}

						row16 = null;

						row16 = null;

						boolean whetherReject_tFileInputDelimited_9 = false;
						row16 = new row16Struct();
						try {

							char fieldSeparator_tFileInputDelimited_9_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_9_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_9.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_9[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row16.CONCEPT_PATH = null;

								row16.CONCEPT_CD = null;

								row16.NAME_CHAR = null;

								row16.CONCEPT_BLOB = null;

								row16.UPDATE_DATE = null;

								row16.DOWNLOAD_DATE = null;

								row16.IMPORT_DATE = null;

								row16.SOURCESYSTEM_CD = null;

								row16.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_9 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_9 = 0;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row16.CONCEPT_PATH = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row16.CONCEPT_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 1;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row16.CONCEPT_CD = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row16.CONCEPT_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 2;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row16.NAME_CHAR = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row16.NAME_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 3;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row16.CONCEPT_BLOB = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row16.CONCEPT_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 4;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row16.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9],
														"dd-MM-yyyy");

									} else {
										row16.UPDATE_DATE = null;
									}

								} else {
									row16.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 5;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row16.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9],
														"dd-MM-yyyy");

									} else {
										row16.DOWNLOAD_DATE = null;
									}

								} else {
									row16.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 6;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row16.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9],
														"dd-MM-yyyy");

									} else {
										row16.IMPORT_DATE = null;
									}

								} else {
									row16.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 7;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row16.SOURCESYSTEM_CD = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row16.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 8;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row16.UPLOAD_ID = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row16.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_9 = true;

							System.err.println(e.getMessage());
							row16 = null;

						}

						/**
						 * [tFileInputDelimited_9 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_9 main ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						tos_count_tFileInputDelimited_9++;

						/**
						 * [tFileInputDelimited_9 main ] stop
						 */
						// Start of branch "row16"
						if (row16 != null) {

							/**
							 * [tAdvancedHash_row16 main ] start
							 */

							currentComponent = "tAdvancedHash_row16";

							row16Struct row16_HashRow = tHash_Lookup_row16
									.getNextFreeRow();

							row16_HashRow.CONCEPT_PATH = row16.CONCEPT_PATH;

							row16_HashRow.CONCEPT_CD = row16.CONCEPT_CD;

							row16_HashRow.NAME_CHAR = row16.NAME_CHAR;

							row16_HashRow.CONCEPT_BLOB = row16.CONCEPT_BLOB;

							row16_HashRow.UPDATE_DATE = row16.UPDATE_DATE;

							row16_HashRow.DOWNLOAD_DATE = row16.DOWNLOAD_DATE;

							row16_HashRow.IMPORT_DATE = row16.IMPORT_DATE;

							row16_HashRow.SOURCESYSTEM_CD = row16.SOURCESYSTEM_CD;

							row16_HashRow.UPLOAD_ID = row16.UPLOAD_ID;

							tHash_Lookup_row16.put(row16_HashRow);

							tos_count_tAdvancedHash_row16++;

							/**
							 * [tAdvancedHash_row16 main ] stop
							 */

						} // End of branch "row16"

						/**
						 * [tFileInputDelimited_9 end ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						nb_line_tFileInputDelimited_9++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_9 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_9 != null) {
							csvReadertFileInputDelimited_9.close();
						}
					}
					if (csvReadertFileInputDelimited_9 != null) {
						globalMap.put("tFileInputDelimited_9_NB_LINE",
								nb_line_tFileInputDelimited_9);
					}

				}

				ok_Hash.put("tFileInputDelimited_9", true);
				end_Hash.put("tFileInputDelimited_9",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_9 end ] stop
				 */

				/**
				 * [tAdvancedHash_row16 end ] start
				 */

				currentComponent = "tAdvancedHash_row16";

				tHash_Lookup_row16.endPut();

				ok_Hash.put("tAdvancedHash_row16", true);
				end_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row16 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_9 finally ] start
				 */

				currentComponent = "tFileInputDelimited_9";

				/**
				 * [tFileInputDelimited_9 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row16 finally ] start
				 */

				currentComponent = "tAdvancedHash_row16";

				/**
				 * [tAdvancedHash_row16 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 1);
	}

	public static class row17Struct implements
			routines.system.IPersistableComparableLookupRow<row17Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public String START_DATE;

		public String getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public String END_DATE;

		public String getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.PATIENT_NUM == null) ? 0 : this.PATIENT_NUM
								.hashCode());

				result = prime
						* result
						+ ((this.CONCEPT_CD == null) ? 0 : this.CONCEPT_CD
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row17Struct other = (row17Struct) obj;

			if (this.PATIENT_NUM == null) {
				if (other.PATIENT_NUM != null)
					return false;

			} else if (!this.PATIENT_NUM.equals(other.PATIENT_NUM))

				return false;

			if (this.CONCEPT_CD == null) {
				if (other.CONCEPT_CD != null)
					return false;

			} else if (!this.CONCEPT_CD.equals(other.CONCEPT_CD))

				return false;

			return true;
		}

		public void copyDataTo(row17Struct other) {

			other.ENCOUNTER_NUM = this.ENCOUNTER_NUM;
			other.PATIENT_NUM = this.PATIENT_NUM;
			other.CONCEPT_CD = this.CONCEPT_CD;
			other.PROVIDER_ID = this.PROVIDER_ID;
			other.START_DATE = this.START_DATE;
			other.MODIFIER_CD = this.MODIFIER_CD;
			other.INSTANCE_NUM = this.INSTANCE_NUM;
			other.VALTYPE_CD = this.VALTYPE_CD;
			other.TVAL_CHAR = this.TVAL_CHAR;
			other.NVAL_NUM = this.NVAL_NUM;
			other.VALUEFLAG_CD = this.VALUEFLAG_CD;
			other.QUANTITY_NUM = this.QUANTITY_NUM;
			other.UNITS_CD = this.UNITS_CD;
			other.END_DATE = this.END_DATE;
			other.LOCATION_CD = this.LOCATION_CD;
			other.OBSERVATION_BLOB = this.OBSERVATION_BLOB;
			other.CONFIDENCE_NUM = this.CONFIDENCE_NUM;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row17Struct other) {

			other.PATIENT_NUM = this.PATIENT_NUM;
			other.CONCEPT_CD = this.CONCEPT_CD;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ENCOUNTER_NUM = (BigDecimal) ois.readObject();

				this.PROVIDER_ID = readString(dis, ois);

				this.START_DATE = readString(dis, ois);

				this.MODIFIER_CD = readString(dis, ois);

				this.INSTANCE_NUM = readString(dis, ois);

				this.VALTYPE_CD = readString(dis, ois);

				this.TVAL_CHAR = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.NVAL_NUM = null;
				} else {
					this.NVAL_NUM = dis.readFloat();
				}

				this.VALUEFLAG_CD = readString(dis, ois);

				this.QUANTITY_NUM = readString(dis, ois);

				this.UNITS_CD = readString(dis, ois);

				this.END_DATE = readString(dis, ois);

				this.LOCATION_CD = readString(dis, ois);

				this.OBSERVATION_BLOB = readString(dis, ois);

				this.CONFIDENCE_NUM = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				oos.writeObject(this.ENCOUNTER_NUM);

				writeString(this.PROVIDER_ID, dos, oos);

				writeString(this.START_DATE, dos, oos);

				writeString(this.MODIFIER_CD, dos, oos);

				writeString(this.INSTANCE_NUM, dos, oos);

				writeString(this.VALTYPE_CD, dos, oos);

				writeString(this.TVAL_CHAR, dos, oos);

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				writeString(this.VALUEFLAG_CD, dos, oos);

				writeString(this.QUANTITY_NUM, dos, oos);

				writeString(this.UNITS_CD, dos, oos);

				writeString(this.END_DATE, dos, oos);

				writeString(this.LOCATION_CD, dos, oos);

				writeString(this.OBSERVATION_BLOB, dos, oos);

				writeString(this.CONFIDENCE_NUM, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + START_DATE);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + END_DATE);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PATIENT_NUM,
					other.PATIENT_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.CONCEPT_CD,
					other.CONCEPT_CD);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_12Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row17Struct row17 = new row17Struct();

				/**
				 * [tAdvancedHash_row17 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row17", false);
				start_Hash.put("tAdvancedHash_row17",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row17";

				int tos_count_tAdvancedHash_row17 = 0;

				// connection name:row17
				// source node:tFileInputDelimited_12 -
				// inputs:(after_tFileInputDelimited_3) outputs:(row17,row17) |
				// target node:tAdvancedHash_row17 - inputs:(row17) outputs:()
				// linked node: tMap_8 - inputs:(out1,row16,row17)
				// outputs:(asddd)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row17 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row17Struct> tHash_Lookup_row17 = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row17Struct>(
						matchingModeEnum_row17,
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid
								+ "_Lookup_row17_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public row17Struct createRowInstance() {
								return new row17Struct();
							}
						}

						, 200000

				);

				tHash_Lookup_row17.initPut();

				globalMap.put("tHash_Lookup_row17", tHash_Lookup_row17);

				/**
				 * [tAdvancedHash_row17 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_12 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_12", false);
				start_Hash.put("tFileInputDelimited_12",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_12";

				int tos_count_tFileInputDelimited_12 = 0;

				int nb_line_tFileInputDelimited_12 = 0;
				int footer_tFileInputDelimited_12 = 0;
				int totalLinetFileInputDelimited_12 = 0;
				int limittFileInputDelimited_12 = -1;
				int lastLinetFileInputDelimited_12 = -1;

				char fieldSeparator_tFileInputDelimited_12[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_12 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_12[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_12 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_12 = /**
				 * Start field
				 * tFileInputDelimited_12:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_3_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_12:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_12 = null;

				try {

					String[] rowtFileInputDelimited_12 = null;
					int currentLinetFileInputDelimited_12 = 0;
					int outputLinetFileInputDelimited_12 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_12 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_12 = 0;
							if (footer_value_tFileInputDelimited_12 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_12 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_12,
									fieldSeparator_tFileInputDelimited_12[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_12 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_12)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_12[0]);
						}

						csvReadertFileInputDelimited_12
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_12[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_12[0] != '\r'))
							csvReadertFileInputDelimited_12.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_12[0]);

						csvReadertFileInputDelimited_12.setQuoteChar('"');

						csvReadertFileInputDelimited_12
								.setEscapeChar(csvReadertFileInputDelimited_12
										.getQuoteChar());

						if (footer_tFileInputDelimited_12 > 0) {
							for (totalLinetFileInputDelimited_12 = 0; totalLinetFileInputDelimited_12 < 0; totalLinetFileInputDelimited_12++) {
								csvReadertFileInputDelimited_12.readNext();
							}
							csvReadertFileInputDelimited_12
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_12.readNext()) {

								rowtFileInputDelimited_12 = csvReadertFileInputDelimited_12
										.getValues();
								if (!(rowtFileInputDelimited_12.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_12[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_12++;

								}

							}
							int lastLineTemptFileInputDelimited_12 = totalLinetFileInputDelimited_12
									- footer_tFileInputDelimited_12 < 0 ? 0
									: totalLinetFileInputDelimited_12
											- footer_tFileInputDelimited_12;
							if (lastLinetFileInputDelimited_12 > 0) {
								lastLinetFileInputDelimited_12 = lastLinetFileInputDelimited_12 < lastLineTemptFileInputDelimited_12 ? lastLinetFileInputDelimited_12
										: lastLineTemptFileInputDelimited_12;
							} else {
								lastLinetFileInputDelimited_12 = lastLineTemptFileInputDelimited_12;
							}

							csvReadertFileInputDelimited_12.close();
							if (filename_tFileInputDelimited_12 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_12 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_12,
										fieldSeparator_tFileInputDelimited_12[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_12 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_12)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_12[0]);
							}
							csvReadertFileInputDelimited_12
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_12[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_12[0] != '\r'))
								csvReadertFileInputDelimited_12
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_12[0]);

							csvReadertFileInputDelimited_12.setQuoteChar('"');

							csvReadertFileInputDelimited_12
									.setEscapeChar(csvReadertFileInputDelimited_12
											.getQuoteChar());

						}

						if (limittFileInputDelimited_12 != 0) {
							for (currentLinetFileInputDelimited_12 = 0; currentLinetFileInputDelimited_12 < 0; currentLinetFileInputDelimited_12++) {
								csvReadertFileInputDelimited_12.readNext();
							}
						}
						csvReadertFileInputDelimited_12
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_12 != 0
							&& csvReadertFileInputDelimited_12 != null
							&& csvReadertFileInputDelimited_12.readNext()) {

						rowtFileInputDelimited_12 = csvReadertFileInputDelimited_12
								.getValues();

						if (rowtFileInputDelimited_12.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_12[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_12++;

						if (lastLinetFileInputDelimited_12 > -1
								&& currentLinetFileInputDelimited_12 > lastLinetFileInputDelimited_12) {
							break;
						}
						outputLinetFileInputDelimited_12++;
						if (limittFileInputDelimited_12 > 0
								&& outputLinetFileInputDelimited_12 > limittFileInputDelimited_12) {
							break;
						}

						row17 = null;

						row17 = null;

						boolean whetherReject_tFileInputDelimited_12 = false;
						row17 = new row17Struct();
						try {

							char fieldSeparator_tFileInputDelimited_12_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_12_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_12.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_12[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row17.ENCOUNTER_NUM = null;

								row17.PATIENT_NUM = null;

								row17.CONCEPT_CD = null;

								row17.PROVIDER_ID = null;

								row17.START_DATE = null;

								row17.MODIFIER_CD = null;

								row17.INSTANCE_NUM = null;

								row17.VALTYPE_CD = null;

								row17.TVAL_CHAR = null;

								row17.NVAL_NUM = null;

								row17.VALUEFLAG_CD = null;

								row17.QUANTITY_NUM = null;

								row17.UNITS_CD = null;

								row17.END_DATE = null;

								row17.LOCATION_CD = null;

								row17.OBSERVATION_BLOB = null;

								row17.CONFIDENCE_NUM = null;

								row17.UPDATE_DATE = null;

								row17.DOWNLOAD_DATE = null;

								row17.IMPORT_DATE = null;

								row17.SOURCESYSTEM_CD = null;

								row17.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_12 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_12 = 0;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									if (rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]
											.length() > 0) {

										row17.ENCOUNTER_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]);

									} else {
										row17.ENCOUNTER_NUM = null;
									}

								} else {
									row17.ENCOUNTER_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 1;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									if (rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]
											.length() > 0) {

										row17.PATIENT_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]);

									} else {
										row17.PATIENT_NUM = null;
									}

								} else {
									row17.PATIENT_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 2;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row17.CONCEPT_CD = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row17.CONCEPT_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 3;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row17.PROVIDER_ID = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row17.PROVIDER_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 4;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row17.START_DATE = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row17.START_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 5;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row17.MODIFIER_CD = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row17.MODIFIER_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 6;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row17.INSTANCE_NUM = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row17.INSTANCE_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 7;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row17.VALTYPE_CD = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row17.VALTYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 8;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row17.TVAL_CHAR = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row17.TVAL_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 9;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									if (rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]
											.length() > 0) {

										row17.NVAL_NUM = ParserUtils
												.parseTo_Float(rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]);

									} else {
										row17.NVAL_NUM = null;
									}

								} else {
									row17.NVAL_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 10;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row17.VALUEFLAG_CD = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row17.VALUEFLAG_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 11;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row17.QUANTITY_NUM = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row17.QUANTITY_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 12;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row17.UNITS_CD = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row17.UNITS_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 13;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row17.END_DATE = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row17.END_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 14;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row17.LOCATION_CD = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row17.LOCATION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 15;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row17.OBSERVATION_BLOB = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row17.OBSERVATION_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 16;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row17.CONFIDENCE_NUM = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row17.CONFIDENCE_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 17;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									if (rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]
											.length() > 0) {

										row17.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12],
														"yyyy-MM-dd");

									} else {
										row17.UPDATE_DATE = null;
									}

								} else {
									row17.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 18;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									if (rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]
											.length() > 0) {

										row17.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12],
														"yyyy-MM-dd");

									} else {
										row17.DOWNLOAD_DATE = null;
									}

								} else {
									row17.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 19;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									if (rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]
											.length() > 0) {

										row17.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12],
														"yyyy-MM-dd");

									} else {
										row17.IMPORT_DATE = null;
									}

								} else {
									row17.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 20;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row17.SOURCESYSTEM_CD = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row17.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 21;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row17.UPLOAD_ID = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row17.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_12 = true;

							System.err.println(e.getMessage());
							row17 = null;

						}

						/**
						 * [tFileInputDelimited_12 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_12 main ] start
						 */

						currentComponent = "tFileInputDelimited_12";

						tos_count_tFileInputDelimited_12++;

						/**
						 * [tFileInputDelimited_12 main ] stop
						 */
						// Start of branch "row17"
						if (row17 != null) {

							/**
							 * [tAdvancedHash_row17 main ] start
							 */

							currentComponent = "tAdvancedHash_row17";

							row17Struct row17_HashRow = tHash_Lookup_row17
									.getNextFreeRow();

							row17_HashRow.ENCOUNTER_NUM = row17.ENCOUNTER_NUM;

							row17_HashRow.PATIENT_NUM = row17.PATIENT_NUM;

							row17_HashRow.CONCEPT_CD = row17.CONCEPT_CD;

							row17_HashRow.PROVIDER_ID = row17.PROVIDER_ID;

							row17_HashRow.START_DATE = row17.START_DATE;

							row17_HashRow.MODIFIER_CD = row17.MODIFIER_CD;

							row17_HashRow.INSTANCE_NUM = row17.INSTANCE_NUM;

							row17_HashRow.VALTYPE_CD = row17.VALTYPE_CD;

							row17_HashRow.TVAL_CHAR = row17.TVAL_CHAR;

							row17_HashRow.NVAL_NUM = row17.NVAL_NUM;

							row17_HashRow.VALUEFLAG_CD = row17.VALUEFLAG_CD;

							row17_HashRow.QUANTITY_NUM = row17.QUANTITY_NUM;

							row17_HashRow.UNITS_CD = row17.UNITS_CD;

							row17_HashRow.END_DATE = row17.END_DATE;

							row17_HashRow.LOCATION_CD = row17.LOCATION_CD;

							row17_HashRow.OBSERVATION_BLOB = row17.OBSERVATION_BLOB;

							row17_HashRow.CONFIDENCE_NUM = row17.CONFIDENCE_NUM;

							row17_HashRow.UPDATE_DATE = row17.UPDATE_DATE;

							row17_HashRow.DOWNLOAD_DATE = row17.DOWNLOAD_DATE;

							row17_HashRow.IMPORT_DATE = row17.IMPORT_DATE;

							row17_HashRow.SOURCESYSTEM_CD = row17.SOURCESYSTEM_CD;

							row17_HashRow.UPLOAD_ID = row17.UPLOAD_ID;

							tHash_Lookup_row17.put(row17_HashRow);

							tos_count_tAdvancedHash_row17++;

							/**
							 * [tAdvancedHash_row17 main ] stop
							 */

						} // End of branch "row17"

						/**
						 * [tFileInputDelimited_12 end ] start
						 */

						currentComponent = "tFileInputDelimited_12";

						nb_line_tFileInputDelimited_12++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_12 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_12 != null) {
							csvReadertFileInputDelimited_12.close();
						}
					}
					if (csvReadertFileInputDelimited_12 != null) {
						globalMap.put("tFileInputDelimited_12_NB_LINE",
								nb_line_tFileInputDelimited_12);
					}

				}

				ok_Hash.put("tFileInputDelimited_12", true);
				end_Hash.put("tFileInputDelimited_12",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_12 end ] stop
				 */

				/**
				 * [tAdvancedHash_row17 end ] start
				 */

				currentComponent = "tAdvancedHash_row17";

				tHash_Lookup_row17.endPut();

				ok_Hash.put("tAdvancedHash_row17", true);
				end_Hash.put("tAdvancedHash_row17", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row17 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_12 finally ] start
				 */

				currentComponent = "tFileInputDelimited_12";

				/**
				 * [tFileInputDelimited_12 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row17 finally ] start
				 */

				currentComponent = "tAdvancedHash_row17";

				/**
				 * [tAdvancedHash_row17 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_12_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_14Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_14 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_14", false);
				start_Hash.put("tCreateTemporaryFile_14",
						System.currentTimeMillis());

				currentComponent = "tCreateTemporaryFile_14";

				int tos_count_tCreateTemporaryFile_14 = 0;

				java.io.File dir_tCreateTemporaryFile_14 = new java.io.File(
						context.folderMain + context.folderOutput);
				dir_tCreateTemporaryFile_14.mkdirs();
				String name_tCreateTemporaryFile_14 = "talend_12_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_14 = ("tmp".replaceAll(
						"\\.", "").length() == 0) ? "tmp" : "tmp".replaceAll(
						"\\.", "");
				java.io.File file_tCreateTemporaryFile_14 = new java.io.File(
						dir_tCreateTemporaryFile_14,
						name_tCreateTemporaryFile_14 + "."
								+ suffix_tCreateTemporaryFile_14);
				if (file_tCreateTemporaryFile_14.createNewFile()) {
					file_tCreateTemporaryFile_14.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_14_FILEPATH",
						file_tCreateTemporaryFile_14.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_14 begin ] stop
				 */

				/**
				 * [tCreateTemporaryFile_14 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_14";

				tos_count_tCreateTemporaryFile_14++;

				/**
				 * [tCreateTemporaryFile_14 main ] stop
				 */

				/**
				 * [tCreateTemporaryFile_14 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_14";

				ok_Hash.put("tCreateTemporaryFile_14", true);
				end_Hash.put("tCreateTemporaryFile_14",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_14 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_14:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_12Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tCreateTemporaryFile_14 finally ] start
				 */

				currentComponent = "tCreateTemporaryFile_14";

				/**
				 * [tCreateTemporaryFile_14 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tCreateTemporaryFile_14_SUBPROCESS_STATE", 1);
	}

	public static class copyOfto_tmapStruct
			implements
			routines.system.IPersistableComparableLookupRow<copyOfto_tmapStruct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String TREE_PATH;

		public String getTREE_PATH() {
			return this.TREE_PATH;
		}

		public String STAGING_PATH;

		public String getSTAGING_PATH() {
			return this.STAGING_PATH;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String MODIFIER_BLOB;

		public String getMODIFIER_BLOB() {
			return this.MODIFIER_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		public String STARTDATE_SOURCE_PATH;

		public String getSTARTDATE_SOURCE_PATH() {
			return this.STARTDATE_SOURCE_PATH;
		}

		public String ENDDATE_SOURCE_PATH;

		public String getENDDATE_SOURCE_PATH() {
			return this.ENDDATE_SOURCE_PATH;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public String BASECODE;

		public String getBASECODE() {
			return this.BASECODE;
		}

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.MODIFIER_CD == null) ? 0 : this.MODIFIER_CD
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfto_tmapStruct other = (copyOfto_tmapStruct) obj;

			if (this.MODIFIER_CD == null) {
				if (other.MODIFIER_CD != null)
					return false;

			} else if (!this.MODIFIER_CD.equals(other.MODIFIER_CD))

				return false;

			return true;
		}

		public void copyDataTo(copyOfto_tmapStruct other) {

			other.TREE_PATH = this.TREE_PATH;
			other.STAGING_PATH = this.STAGING_PATH;
			other.MODIFIER_CD = this.MODIFIER_CD;
			other.NAME_CHAR = this.NAME_CHAR;
			other.MODIFIER_BLOB = this.MODIFIER_BLOB;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;
			other.STARTDATE_SOURCE_PATH = this.STARTDATE_SOURCE_PATH;
			other.ENDDATE_SOURCE_PATH = this.ENDDATE_SOURCE_PATH;
			other.M_APPLIED_PATH = this.M_APPLIED_PATH;
			other.BASECODE = this.BASECODE;
			other.NAME = this.NAME;

		}

		public void copyKeysDataTo(copyOfto_tmapStruct other) {

			other.MODIFIER_CD = this.MODIFIER_CD;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.MODIFIER_CD = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MODIFIER_CD, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.TREE_PATH = readString(dis, ois);

				this.STAGING_PATH = readString(dis, ois);

				this.NAME_CHAR = readString(dis, ois);

				this.MODIFIER_BLOB = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

				this.STARTDATE_SOURCE_PATH = readString(dis, ois);

				this.ENDDATE_SOURCE_PATH = readString(dis, ois);

				this.M_APPLIED_PATH = readString(dis, ois);

				this.BASECODE = readString(dis, ois);

				this.NAME = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.TREE_PATH, dos, oos);

				writeString(this.STAGING_PATH, dos, oos);

				writeString(this.NAME_CHAR, dos, oos);

				writeString(this.MODIFIER_BLOB, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

				writeString(this.STARTDATE_SOURCE_PATH, dos, oos);

				writeString(this.ENDDATE_SOURCE_PATH, dos, oos);

				writeString(this.M_APPLIED_PATH, dos, oos);

				writeString(this.BASECODE, dos, oos);

				writeString(this.NAME, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TREE_PATH=" + TREE_PATH);
			sb.append(",STAGING_PATH=" + STAGING_PATH);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",MODIFIER_BLOB=" + MODIFIER_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append(",STARTDATE_SOURCE_PATH=" + STARTDATE_SOURCE_PATH);
			sb.append(",ENDDATE_SOURCE_PATH=" + ENDDATE_SOURCE_PATH);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",BASECODE=" + BASECODE);
			sb.append(",NAME=" + NAME);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfto_tmapStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.MODIFIER_CD,
					other.MODIFIER_CD);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row28Struct implements
			routines.system.IPersistableRow<row28Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public Integer TARGET_ID;

		public Integer getTARGET_ID() {
			return this.TARGET_ID;
		}

		public Integer TREE_LEVEL;

		public Integer getTREE_LEVEL() {
			return this.TREE_LEVEL;
		}

		public String TREE_PATH;

		public String getTREE_PATH() {
			return this.TREE_PATH;
		}

		public String STAGING_PATH;

		public String getSTAGING_PATH() {
			return this.STAGING_PATH;
		}

		public String STAGING_DIMENSION;

		public String getSTAGING_DIMENSION() {
			return this.STAGING_DIMENSION;
		}

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		public String STARTDATE_STAGING_PATH;

		public String getSTARTDATE_STAGING_PATH() {
			return this.STARTDATE_STAGING_PATH;
		}

		public String ENDDATE_STAGING_PATH;

		public String getENDDATE_STAGING_PATH() {
			return this.ENDDATE_STAGING_PATH;
		}

		public String VISUALATTRIBUTES;

		public String getVISUALATTRIBUTES() {
			return this.VISUALATTRIBUTES;
		}

		public String BASECODE;

		public String getBASECODE() {
			return this.BASECODE;
		}

		public String METADATAXML;

		public String getMETADATAXML() {
			return this.METADATAXML;
		}

		public String COLUMNDATATYPE;

		public String getCOLUMNDATATYPE() {
			return this.COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String TOOLTIP;

		public String getTOOLTIP() {
			return this.TOOLTIP;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.TARGET_ID = readInteger(dis);

					this.TREE_LEVEL = readInteger(dis);

					this.TREE_PATH = readString(dis);

					this.STAGING_PATH = readString(dis);

					this.STAGING_DIMENSION = readString(dis);

					this.NAME = readString(dis);

					this.STARTDATE_STAGING_PATH = readString(dis);

					this.ENDDATE_STAGING_PATH = readString(dis);

					this.VISUALATTRIBUTES = readString(dis);

					this.BASECODE = readString(dis);

					this.METADATAXML = readString(dis);

					this.COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_COMMENT = readString(dis);

					this.TOOLTIP = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.TARGET_ID, dos);

				// Integer

				writeInteger(this.TREE_LEVEL, dos);

				// String

				writeString(this.TREE_PATH, dos);

				// String

				writeString(this.STAGING_PATH, dos);

				// String

				writeString(this.STAGING_DIMENSION, dos);

				// String

				writeString(this.NAME, dos);

				// String

				writeString(this.STARTDATE_STAGING_PATH, dos);

				// String

				writeString(this.ENDDATE_STAGING_PATH, dos);

				// String

				writeString(this.VISUALATTRIBUTES, dos);

				// String

				writeString(this.BASECODE, dos);

				// String

				writeString(this.METADATAXML, dos);

				// String

				writeString(this.COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.TOOLTIP, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TARGET_ID=" + String.valueOf(TARGET_ID));
			sb.append(",TREE_LEVEL=" + String.valueOf(TREE_LEVEL));
			sb.append(",TREE_PATH=" + TREE_PATH);
			sb.append(",STAGING_PATH=" + STAGING_PATH);
			sb.append(",STAGING_DIMENSION=" + STAGING_DIMENSION);
			sb.append(",NAME=" + NAME);
			sb.append(",STARTDATE_STAGING_PATH=" + STARTDATE_STAGING_PATH);
			sb.append(",ENDDATE_STAGING_PATH=" + ENDDATE_STAGING_PATH);
			sb.append(",VISUALATTRIBUTES=" + VISUALATTRIBUTES);
			sb.append(",BASECODE=" + BASECODE);
			sb.append(",METADATAXML=" + METADATAXML);
			sb.append(",COLUMNDATATYPE=" + COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",TOOLTIP=" + TOOLTIP);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row28Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_16Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_16Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];

		public Integer TARGET_ID;

		public Integer getTARGET_ID() {
			return this.TARGET_ID;
		}

		public Integer TREE_LEVEL;

		public Integer getTREE_LEVEL() {
			return this.TREE_LEVEL;
		}

		public String TREE_PATH;

		public String getTREE_PATH() {
			return this.TREE_PATH;
		}

		public String STAGING_PATH;

		public String getSTAGING_PATH() {
			return this.STAGING_PATH;
		}

		public String STAGING_DIMENSION;

		public String getSTAGING_DIMENSION() {
			return this.STAGING_DIMENSION;
		}

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		public String STARTDATE_STAGING_PATH;

		public String getSTARTDATE_STAGING_PATH() {
			return this.STARTDATE_STAGING_PATH;
		}

		public String ENDDATE_STAGING_PATH;

		public String getENDDATE_STAGING_PATH() {
			return this.ENDDATE_STAGING_PATH;
		}

		public String VISUALATTRIBUTES;

		public String getVISUALATTRIBUTES() {
			return this.VISUALATTRIBUTES;
		}

		public String BASECODE;

		public String getBASECODE() {
			return this.BASECODE;
		}

		public String METADATAXML;

		public String getMETADATAXML() {
			return this.METADATAXML;
		}

		public String COLUMNDATATYPE;

		public String getCOLUMNDATATYPE() {
			return this.COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String TOOLTIP;

		public String getTOOLTIP() {
			return this.TOOLTIP;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.TARGET_ID = readInteger(dis);

					this.TREE_LEVEL = readInteger(dis);

					this.TREE_PATH = readString(dis);

					this.STAGING_PATH = readString(dis);

					this.STAGING_DIMENSION = readString(dis);

					this.NAME = readString(dis);

					this.STARTDATE_STAGING_PATH = readString(dis);

					this.ENDDATE_STAGING_PATH = readString(dis);

					this.VISUALATTRIBUTES = readString(dis);

					this.BASECODE = readString(dis);

					this.METADATAXML = readString(dis);

					this.COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_COMMENT = readString(dis);

					this.TOOLTIP = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.TARGET_ID, dos);

				// Integer

				writeInteger(this.TREE_LEVEL, dos);

				// String

				writeString(this.TREE_PATH, dos);

				// String

				writeString(this.STAGING_PATH, dos);

				// String

				writeString(this.STAGING_DIMENSION, dos);

				// String

				writeString(this.NAME, dos);

				// String

				writeString(this.STARTDATE_STAGING_PATH, dos);

				// String

				writeString(this.ENDDATE_STAGING_PATH, dos);

				// String

				writeString(this.VISUALATTRIBUTES, dos);

				// String

				writeString(this.BASECODE, dos);

				// String

				writeString(this.METADATAXML, dos);

				// String

				writeString(this.COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.TOOLTIP, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TARGET_ID=" + String.valueOf(TARGET_ID));
			sb.append(",TREE_LEVEL=" + String.valueOf(TREE_LEVEL));
			sb.append(",TREE_PATH=" + TREE_PATH);
			sb.append(",STAGING_PATH=" + STAGING_PATH);
			sb.append(",STAGING_DIMENSION=" + STAGING_DIMENSION);
			sb.append(",NAME=" + NAME);
			sb.append(",STARTDATE_STAGING_PATH=" + STARTDATE_STAGING_PATH);
			sb.append(",ENDDATE_STAGING_PATH=" + ENDDATE_STAGING_PATH);
			sb.append(",VISUALATTRIBUTES=" + VISUALATTRIBUTES);
			sb.append(",BASECODE=" + BASECODE);
			sb.append(",METADATAXML=" + METADATAXML);
			sb.append(",COLUMNDATATYPE=" + COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",TOOLTIP=" + TOOLTIP);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_16Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_15Process(globalMap);

				row28Struct row28 = new row28Struct();
				copyOfto_tmapStruct copyOfto_tmap = new copyOfto_tmapStruct();

				/**
				 * [tMap_12_TMAP_OUT begin ] start
				 */

				ok_Hash.put("tMap_12_TMAP_OUT", false);
				start_Hash.put("tMap_12_TMAP_OUT", System.currentTimeMillis());

				currentVirtualComponent = "tMap_12";

				currentComponent = "tMap_12_TMAP_OUT";

				int tos_count_tMap_12_TMAP_OUT = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row27Struct> tHash_Lookup_row27 = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row27Struct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row27Struct>) globalMap
						.get("tHash_Lookup_row27"));

				row27Struct row27HashKey = new row27Struct();
				row27Struct row27Default = new row27Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_12_TMAP_OUT__Struct {
				}
				Var__tMap_12_TMAP_OUT__Struct Var__tMap_12_TMAP_OUT = new Var__tMap_12_TMAP_OUT__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				// ###############################

				class SortableRow_tMap_12_1 implements
						Comparable<SortableRow_tMap_12_1>,
						routines.system.IPersistableRow<SortableRow_tMap_12_1> { // G_TM_B_001

					boolean is__rejectedInnerJoin;

					String exprKey_row27__MODIFIER_PATH;

					// row28
					Integer row28__TARGET_ID;
					Integer row28__TREE_LEVEL;
					String row28__TREE_PATH;
					String row28__STAGING_PATH;
					String row28__STAGING_DIMENSION;
					String row28__NAME;
					String row28__STARTDATE_STAGING_PATH;
					String row28__ENDDATE_STAGING_PATH;
					String row28__VISUALATTRIBUTES;
					String row28__BASECODE;
					String row28__METADATAXML;
					String row28__COLUMNDATATYPE;
					String row28__C_OPERATOR;
					String row28__C_COMMENT;
					String row28__TOOLTIP;
					java.util.Date row28__UPDATE_DATE;
					java.util.Date row28__DOWNLOAD_DATE;
					java.util.Date row28__IMPORT_DATE;
					String row28__SOURCESYSTEM_CD;
					String row28__VALUETYPE_CD;
					String row28__M_APPLIED_PATH;

					public void fillFrom(row28Struct row28,
							String exprKey_row27__MODIFIER_PATH) {

						this.row28__TARGET_ID = row28.TARGET_ID;
						this.row28__TREE_LEVEL = row28.TREE_LEVEL;
						this.row28__TREE_PATH = row28.TREE_PATH;
						this.row28__STAGING_PATH = row28.STAGING_PATH;
						this.row28__STAGING_DIMENSION = row28.STAGING_DIMENSION;
						this.row28__NAME = row28.NAME;
						this.row28__STARTDATE_STAGING_PATH = row28.STARTDATE_STAGING_PATH;
						this.row28__ENDDATE_STAGING_PATH = row28.ENDDATE_STAGING_PATH;
						this.row28__VISUALATTRIBUTES = row28.VISUALATTRIBUTES;
						this.row28__BASECODE = row28.BASECODE;
						this.row28__METADATAXML = row28.METADATAXML;
						this.row28__COLUMNDATATYPE = row28.COLUMNDATATYPE;
						this.row28__C_OPERATOR = row28.C_OPERATOR;
						this.row28__C_COMMENT = row28.C_COMMENT;
						this.row28__TOOLTIP = row28.TOOLTIP;
						this.row28__UPDATE_DATE = row28.UPDATE_DATE;
						this.row28__DOWNLOAD_DATE = row28.DOWNLOAD_DATE;
						this.row28__IMPORT_DATE = row28.IMPORT_DATE;
						this.row28__SOURCESYSTEM_CD = row28.SOURCESYSTEM_CD;
						this.row28__VALUETYPE_CD = row28.VALUETYPE_CD;
						this.row28__M_APPLIED_PATH = row28.M_APPLIED_PATH;
						this.exprKey_row27__MODIFIER_PATH = exprKey_row27__MODIFIER_PATH;

					}

					public void copyDataTo(row28Struct row28) {

						row28.TARGET_ID = this.row28__TARGET_ID;
						row28.TREE_LEVEL = this.row28__TREE_LEVEL;
						row28.TREE_PATH = this.row28__TREE_PATH;
						row28.STAGING_PATH = this.row28__STAGING_PATH;
						row28.STAGING_DIMENSION = this.row28__STAGING_DIMENSION;
						row28.NAME = this.row28__NAME;
						row28.STARTDATE_STAGING_PATH = this.row28__STARTDATE_STAGING_PATH;
						row28.ENDDATE_STAGING_PATH = this.row28__ENDDATE_STAGING_PATH;
						row28.VISUALATTRIBUTES = this.row28__VISUALATTRIBUTES;
						row28.BASECODE = this.row28__BASECODE;
						row28.METADATAXML = this.row28__METADATAXML;
						row28.COLUMNDATATYPE = this.row28__COLUMNDATATYPE;
						row28.C_OPERATOR = this.row28__C_OPERATOR;
						row28.C_COMMENT = this.row28__C_COMMENT;
						row28.TOOLTIP = this.row28__TOOLTIP;
						row28.UPDATE_DATE = this.row28__UPDATE_DATE;
						row28.DOWNLOAD_DATE = this.row28__DOWNLOAD_DATE;
						row28.IMPORT_DATE = this.row28__IMPORT_DATE;
						row28.SOURCESYSTEM_CD = this.row28__SOURCESYSTEM_CD;
						row28.VALUETYPE_CD = this.row28__VALUETYPE_CD;
						row28.M_APPLIED_PATH = this.row28__M_APPLIED_PATH;

					}

					public String toString() {

						StringBuilder sb = new StringBuilder();
						sb.append(super.toString());
						sb.append("[");

						sb.append("row28__TARGET_ID");
						sb.append("=");
						sb.append(String.valueOf(this.row28__TARGET_ID));

						sb.append(", ");

						sb.append("row28__TREE_LEVEL");
						sb.append("=");
						sb.append(String.valueOf(this.row28__TREE_LEVEL));

						sb.append(", ");

						sb.append("row28__TREE_PATH");
						sb.append("=");
						sb.append(String.valueOf(this.row28__TREE_PATH));

						sb.append(", ");

						sb.append("row28__STAGING_PATH");
						sb.append("=");
						sb.append(String.valueOf(this.row28__STAGING_PATH));

						sb.append(", ");

						sb.append("row28__STAGING_DIMENSION");
						sb.append("=");
						sb.append(String.valueOf(this.row28__STAGING_DIMENSION));

						sb.append(", ");

						sb.append("row28__NAME");
						sb.append("=");
						sb.append(String.valueOf(this.row28__NAME));

						sb.append(", ");

						sb.append("row28__STARTDATE_STAGING_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.row28__STARTDATE_STAGING_PATH));

						sb.append(", ");

						sb.append("row28__ENDDATE_STAGING_PATH");
						sb.append("=");
						sb.append(String
								.valueOf(this.row28__ENDDATE_STAGING_PATH));

						sb.append(", ");

						sb.append("row28__VISUALATTRIBUTES");
						sb.append("=");
						sb.append(String.valueOf(this.row28__VISUALATTRIBUTES));

						sb.append(", ");

						sb.append("row28__BASECODE");
						sb.append("=");
						sb.append(String.valueOf(this.row28__BASECODE));

						sb.append(", ");

						sb.append("row28__METADATAXML");
						sb.append("=");
						sb.append(String.valueOf(this.row28__METADATAXML));

						sb.append(", ");

						sb.append("row28__COLUMNDATATYPE");
						sb.append("=");
						sb.append(String.valueOf(this.row28__COLUMNDATATYPE));

						sb.append(", ");

						sb.append("row28__C_OPERATOR");
						sb.append("=");
						sb.append(String.valueOf(this.row28__C_OPERATOR));

						sb.append(", ");

						sb.append("row28__C_COMMENT");
						sb.append("=");
						sb.append(String.valueOf(this.row28__C_COMMENT));

						sb.append(", ");

						sb.append("row28__TOOLTIP");
						sb.append("=");
						sb.append(String.valueOf(this.row28__TOOLTIP));

						sb.append(", ");

						sb.append("row28__UPDATE_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row28__UPDATE_DATE));

						sb.append(", ");

						sb.append("row28__DOWNLOAD_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row28__DOWNLOAD_DATE));

						sb.append(", ");

						sb.append("row28__IMPORT_DATE");
						sb.append("=");
						sb.append(String.valueOf(this.row28__IMPORT_DATE));

						sb.append(", ");

						sb.append("row28__SOURCESYSTEM_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row28__SOURCESYSTEM_CD));

						sb.append(", ");

						sb.append("row28__VALUETYPE_CD");
						sb.append("=");
						sb.append(String.valueOf(this.row28__VALUETYPE_CD));

						sb.append(", ");

						sb.append("row28__M_APPLIED_PATH");
						sb.append("=");
						sb.append(String.valueOf(this.row28__M_APPLIED_PATH));

						sb.append("]");

						return sb.toString();
					}

					public int compareTo(SortableRow_tMap_12_1 other) {

						int returnValue = 0;

						returnValue = checkNullsAndCompare(
								this.exprKey_row27__MODIFIER_PATH,
								other.exprKey_row27__MODIFIER_PATH);
						if (returnValue != 0) {
							return returnValue;
						}

						return returnValue;
					}

					private int checkNullsAndCompare(Object object1,
							Object object2) {
						int returnValue = 0;
						if (object1 instanceof Comparable
								&& object2 instanceof Comparable) {
							returnValue = ((Comparable) object1)
									.compareTo(object2);
						} else if (object1 != null && object2 != null) {
							returnValue = compareStrings(object1.toString(),
									object2.toString());
						} else if (object1 == null && object2 != null) {
							returnValue = 1;
						} else if (object1 != null && object2 == null) {
							returnValue = -1;
						} else {
							returnValue = 0;
						}

						return returnValue;
					}

					private int compareStrings(String string1, String string2) {
						return string1.compareTo(string2);
					}

					public void readData(ObjectInputStream dis) {

						synchronized (row28Struct.commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

							try {

								int length = 0;

								this.is__rejectedInnerJoin = dis.readBoolean();

								length = dis.readByte();
								if (length == -1) {
									this.row28__TARGET_ID = null;
								} else {
									this.row28__TARGET_ID = dis.readInt();
								}

								length = dis.readByte();
								if (length == -1) {
									this.row28__TREE_LEVEL = null;
								} else {
									this.row28__TREE_LEVEL = dis.readInt();
								}

								length = dis.readInt();
								if (length == -1) {
									this.row28__TREE_PATH = null;
								} else {
									if (length > row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row28__TREE_PATH = new String(
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row28__STAGING_PATH = null;
								} else {
									if (length > row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row28__STAGING_PATH = new String(
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row28__STAGING_DIMENSION = null;
								} else {
									if (length > row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row28__STAGING_DIMENSION = new String(
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row28__NAME = null;
								} else {
									if (length > row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row28__NAME = new String(
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row28__STARTDATE_STAGING_PATH = null;
								} else {
									if (length > row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row28__STARTDATE_STAGING_PATH = new String(
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row28__ENDDATE_STAGING_PATH = null;
								} else {
									if (length > row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row28__ENDDATE_STAGING_PATH = new String(
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row28__VISUALATTRIBUTES = null;
								} else {
									if (length > row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row28__VISUALATTRIBUTES = new String(
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row28__BASECODE = null;
								} else {
									if (length > row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row28__BASECODE = new String(
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row28__METADATAXML = null;
								} else {
									if (length > row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row28__METADATAXML = new String(
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row28__COLUMNDATATYPE = null;
								} else {
									if (length > row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row28__COLUMNDATATYPE = new String(
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row28__C_OPERATOR = null;
								} else {
									if (length > row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row28__C_OPERATOR = new String(
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row28__C_COMMENT = null;
								} else {
									if (length > row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row28__C_COMMENT = new String(
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row28__TOOLTIP = null;
								} else {
									if (length > row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row28__TOOLTIP = new String(
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readByte();
								if (length == -1) {
									this.row28__UPDATE_DATE = null;
								} else {
									this.row28__UPDATE_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.row28__DOWNLOAD_DATE = null;
								} else {
									this.row28__DOWNLOAD_DATE = new Date(
											dis.readLong());
								}

								length = dis.readByte();
								if (length == -1) {
									this.row28__IMPORT_DATE = null;
								} else {
									this.row28__IMPORT_DATE = new Date(
											dis.readLong());
								}

								length = dis.readInt();
								if (length == -1) {
									this.row28__SOURCESYSTEM_CD = null;
								} else {
									if (length > row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row28__SOURCESYSTEM_CD = new String(
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row28__VALUETYPE_CD = null;
								} else {
									if (length > row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row28__VALUETYPE_CD = new String(
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.row28__M_APPLIED_PATH = null;
								} else {
									if (length > row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.row28__M_APPLIED_PATH = new String(
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row27__MODIFIER_PATH = null;
								} else {
									if (length > row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
										if (length < 1024
												&& row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
										} else {
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
										}
									}
									dis.readFully(
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
									this.exprKey_row27__MODIFIER_PATH = new String(
											row28Struct.commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
											0, length);
								}

							} catch (IOException e) {
								throw new RuntimeException(e);

							}

						}
					}

					public void writeData(ObjectOutputStream dos) {
						try {

							dos.writeBoolean(this.is__rejectedInnerJoin);

							if (this.row28__TARGET_ID == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeInt(this.row28__TARGET_ID);
							}

							if (this.row28__TREE_LEVEL == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeInt(this.row28__TREE_LEVEL);
							}

							if (this.row28__TREE_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row28__TREE_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row28__STAGING_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row28__STAGING_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row28__STAGING_DIMENSION == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row28__STAGING_DIMENSION
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row28__NAME == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row28__NAME.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row28__STARTDATE_STAGING_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row28__STARTDATE_STAGING_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row28__ENDDATE_STAGING_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row28__ENDDATE_STAGING_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row28__VISUALATTRIBUTES == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row28__VISUALATTRIBUTES
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row28__BASECODE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row28__BASECODE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row28__METADATAXML == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row28__METADATAXML
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row28__COLUMNDATATYPE == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row28__COLUMNDATATYPE
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row28__C_OPERATOR == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row28__C_OPERATOR
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row28__C_COMMENT == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row28__C_COMMENT
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row28__TOOLTIP == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row28__TOOLTIP
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row28__UPDATE_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row28__UPDATE_DATE.getTime());
							}

							if (this.row28__DOWNLOAD_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row28__DOWNLOAD_DATE
										.getTime());
							}

							if (this.row28__IMPORT_DATE == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeLong(this.row28__IMPORT_DATE.getTime());
							}

							if (this.row28__SOURCESYSTEM_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row28__SOURCESYSTEM_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row28__VALUETYPE_CD == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row28__VALUETYPE_CD
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row28__M_APPLIED_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row28__M_APPLIED_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.exprKey_row27__MODIFIER_PATH == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row27__MODIFIER_PATH
										.getBytes();
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

				} // G_TM_B_001

				org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_12_1> fsi_tMap_12_1 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_12_1>(
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_"
								+ Thread.currentThread().getId() + "_" + pid
								+ "_tMap_12_1", 200000) {
					public SortableRow_tMap_12_1 createRowInstance() {
						return new SortableRow_tMap_12_1();
					}
				};

				fsi_tMap_12_1.initPut();

				/**
				 * [tMap_12_TMAP_OUT begin ] stop
				 */

				/**
				 * [tFileInputDelimited_16 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_16", false);
				start_Hash.put("tFileInputDelimited_16",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_16";

				int tos_count_tFileInputDelimited_16 = 0;

				int nb_line_tFileInputDelimited_16 = 0;
				int footer_tFileInputDelimited_16 = 0;
				int totalLinetFileInputDelimited_16 = 0;
				int limittFileInputDelimited_16 = -1;
				int lastLinetFileInputDelimited_16 = -1;

				char fieldSeparator_tFileInputDelimited_16[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_16 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_16[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_16 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_16 = /**
				 * Start field
				 * tFileInputDelimited_16:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_1_FILEPATH"))/**
				 * End
				 * field tFileInputDelimited_16:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_16 = null;

				try {

					String[] rowtFileInputDelimited_16 = null;
					int currentLinetFileInputDelimited_16 = 0;
					int outputLinetFileInputDelimited_16 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_16 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_16 = 0;
							if (footer_value_tFileInputDelimited_16 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_16 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_16,
									fieldSeparator_tFileInputDelimited_16[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_16 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_16)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_16[0]);
						}

						csvReadertFileInputDelimited_16
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_16[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_16[0] != '\r'))
							csvReadertFileInputDelimited_16.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_16[0]);

						csvReadertFileInputDelimited_16.setQuoteChar('"');

						csvReadertFileInputDelimited_16
								.setEscapeChar(csvReadertFileInputDelimited_16
										.getQuoteChar());

						if (footer_tFileInputDelimited_16 > 0) {
							for (totalLinetFileInputDelimited_16 = 0; totalLinetFileInputDelimited_16 < 1; totalLinetFileInputDelimited_16++) {
								csvReadertFileInputDelimited_16.readNext();
							}
							csvReadertFileInputDelimited_16
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_16.readNext()) {

								rowtFileInputDelimited_16 = csvReadertFileInputDelimited_16
										.getValues();
								if (!(rowtFileInputDelimited_16.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_16[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_16++;

								}

							}
							int lastLineTemptFileInputDelimited_16 = totalLinetFileInputDelimited_16
									- footer_tFileInputDelimited_16 < 0 ? 0
									: totalLinetFileInputDelimited_16
											- footer_tFileInputDelimited_16;
							if (lastLinetFileInputDelimited_16 > 0) {
								lastLinetFileInputDelimited_16 = lastLinetFileInputDelimited_16 < lastLineTemptFileInputDelimited_16 ? lastLinetFileInputDelimited_16
										: lastLineTemptFileInputDelimited_16;
							} else {
								lastLinetFileInputDelimited_16 = lastLineTemptFileInputDelimited_16;
							}

							csvReadertFileInputDelimited_16.close();
							if (filename_tFileInputDelimited_16 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_16 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_16,
										fieldSeparator_tFileInputDelimited_16[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_16 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_16)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_16[0]);
							}
							csvReadertFileInputDelimited_16
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_16[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_16[0] != '\r'))
								csvReadertFileInputDelimited_16
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_16[0]);

							csvReadertFileInputDelimited_16.setQuoteChar('"');

							csvReadertFileInputDelimited_16
									.setEscapeChar(csvReadertFileInputDelimited_16
											.getQuoteChar());

						}

						if (limittFileInputDelimited_16 != 0) {
							for (currentLinetFileInputDelimited_16 = 0; currentLinetFileInputDelimited_16 < 1; currentLinetFileInputDelimited_16++) {
								csvReadertFileInputDelimited_16.readNext();
							}
						}
						csvReadertFileInputDelimited_16
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_16 != 0
							&& csvReadertFileInputDelimited_16 != null
							&& csvReadertFileInputDelimited_16.readNext()) {

						rowtFileInputDelimited_16 = csvReadertFileInputDelimited_16
								.getValues();

						if (rowtFileInputDelimited_16.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_16[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_16++;

						if (lastLinetFileInputDelimited_16 > -1
								&& currentLinetFileInputDelimited_16 > lastLinetFileInputDelimited_16) {
							break;
						}
						outputLinetFileInputDelimited_16++;
						if (limittFileInputDelimited_16 > 0
								&& outputLinetFileInputDelimited_16 > limittFileInputDelimited_16) {
							break;
						}

						row28 = null;

						boolean whetherReject_tFileInputDelimited_16 = false;
						row28 = new row28Struct();
						try {

							char fieldSeparator_tFileInputDelimited_16_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_16_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_16.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_16[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row28.TARGET_ID = null;

								row28.TREE_LEVEL = null;

								row28.TREE_PATH = null;

								row28.STAGING_PATH = null;

								row28.STAGING_DIMENSION = null;

								row28.NAME = null;

								row28.STARTDATE_STAGING_PATH = null;

								row28.ENDDATE_STAGING_PATH = null;

								row28.VISUALATTRIBUTES = null;

								row28.BASECODE = null;

								row28.METADATAXML = null;

								row28.COLUMNDATATYPE = null;

								row28.C_OPERATOR = null;

								row28.C_COMMENT = null;

								row28.TOOLTIP = null;

								row28.UPDATE_DATE = null;

								row28.DOWNLOAD_DATE = null;

								row28.IMPORT_DATE = null;

								row28.SOURCESYSTEM_CD = null;

								row28.VALUETYPE_CD = null;

								row28.M_APPLIED_PATH = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_16 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_16 = 0;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row28.TARGET_ID = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]);

									} else {
										row28.TARGET_ID = null;
									}

								} else {
									row28.TARGET_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 1;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row28.TREE_LEVEL = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]);

									} else {
										row28.TREE_LEVEL = null;
									}

								} else {
									row28.TREE_LEVEL = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 2;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row28.TREE_PATH = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row28.TREE_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 3;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row28.STAGING_PATH = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row28.STAGING_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 4;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row28.STAGING_DIMENSION = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row28.STAGING_DIMENSION = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 5;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row28.NAME = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row28.NAME = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 6;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row28.STARTDATE_STAGING_PATH = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row28.STARTDATE_STAGING_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 7;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row28.ENDDATE_STAGING_PATH = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row28.ENDDATE_STAGING_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 8;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row28.VISUALATTRIBUTES = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row28.VISUALATTRIBUTES = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 9;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row28.BASECODE = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row28.BASECODE = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 10;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row28.METADATAXML = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row28.METADATAXML = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 11;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row28.COLUMNDATATYPE = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row28.COLUMNDATATYPE = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 12;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row28.C_OPERATOR = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row28.C_OPERATOR = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 13;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row28.C_COMMENT = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row28.C_COMMENT = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 14;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row28.TOOLTIP = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row28.TOOLTIP = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 15;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row28.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16],
														"dd-MM-yyyy");

									} else {
										row28.UPDATE_DATE = null;
									}

								} else {
									row28.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 16;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row28.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16],
														"dd-MM-yyyy");

									} else {
										row28.DOWNLOAD_DATE = null;
									}

								} else {
									row28.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 17;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row28.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16],
														"dd-MM-yyyy");

									} else {
										row28.IMPORT_DATE = null;
									}

								} else {
									row28.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 18;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row28.SOURCESYSTEM_CD = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row28.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 19;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row28.VALUETYPE_CD = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row28.VALUETYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 20;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row28.M_APPLIED_PATH = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row28.M_APPLIED_PATH = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_16 = true;

							System.err.println(e.getMessage());
							row28 = null;

						}

						/**
						 * [tFileInputDelimited_16 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_16 main ] start
						 */

						currentComponent = "tFileInputDelimited_16";

						tos_count_tFileInputDelimited_16++;

						/**
						 * [tFileInputDelimited_16 main ] stop
						 */
						// Start of branch "row28"
						if (row28 != null) {

							/**
							 * [tMap_12_TMAP_OUT main ] start
							 */

							currentVirtualComponent = "tMap_12";

							currentComponent = "tMap_12_TMAP_OUT";

							boolean hasCasePrimitiveKeyWithNull_tMap_12_TMAP_OUT = false;

							if (

							(

							!row28.M_APPLIED_PATH.equals("@") && (row28.STARTDATE_STAGING_PATH
									.length() > 0 || row28.ENDDATE_STAGING_PATH
									.length() > 0)

							)

							) { // G_TM_M_281

								hasCasePrimitiveKeyWithNull_tMap_12_TMAP_OUT = false;

								String exprKey_row27__MODIFIER_PATH = row28.STAGING_PATH;

								SortableRow_tMap_12_1 sortableRow_tMap_12_1 = fsi_tMap_12_1
										.getNextFreeRow();

								sortableRow_tMap_12_1.fillFrom(row28,
										exprKey_row27__MODIFIER_PATH);

								fsi_tMap_12_1.put(sortableRow_tMap_12_1);

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_12_TMAP_OUT = false;
								boolean mainRowRejected_tMap_12_TMAP_OUT = false;

								// ###############################

								tos_count_tMap_12_TMAP_OUT++;

								/**
								 * [tMap_12_TMAP_OUT main ] stop
								 */
							} // G_TM_M_281 close main tMap filter for table
								// 'row28'

						} // End of branch "row28"

						/**
						 * [tFileInputDelimited_16 end ] start
						 */

						currentComponent = "tFileInputDelimited_16";

						nb_line_tFileInputDelimited_16++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_16 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_16 != null) {
							csvReadertFileInputDelimited_16.close();
						}
					}
					if (csvReadertFileInputDelimited_16 != null) {
						globalMap.put("tFileInputDelimited_16_NB_LINE",
								nb_line_tFileInputDelimited_16);
					}

				}

				ok_Hash.put("tFileInputDelimited_16", true);
				end_Hash.put("tFileInputDelimited_16",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_16 end ] stop
				 */

				/**
				 * [tMap_12_TMAP_OUT end ] start
				 */

				currentVirtualComponent = "tMap_12";

				currentComponent = "tMap_12_TMAP_OUT";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_12_TMAP_OUT", true);
				end_Hash.put("tMap_12_TMAP_OUT", System.currentTimeMillis());

				/**
				 * [tMap_12_TMAP_OUT end ] stop
				 */

				/**
				 * [tAdvancedHash_copyOfto_tmap begin ] start
				 */

				ok_Hash.put("tAdvancedHash_copyOfto_tmap", false);
				start_Hash.put("tAdvancedHash_copyOfto_tmap",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_copyOfto_tmap";

				int tos_count_tAdvancedHash_copyOfto_tmap = 0;

				// connection name:copyOfto_tmap
				// source node:tMap_12_TMAP_IN - inputs:(OnRowsEnd)
				// outputs:(copyOfto_tmap,copyOfto_tmap) | target
				// node:tAdvancedHash_copyOfto_tmap - inputs:(copyOfto_tmap)
				// outputs:()
				// linked node: tMap_13 - inputs:(row29,copyOfto_tmap)
				// outputs:(copyOfto_obs_fct)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_copyOfto_tmap = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<copyOfto_tmapStruct> tHash_Lookup_copyOfto_tmap = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<copyOfto_tmapStruct> getLookup(matchingModeEnum_copyOfto_tmap);

				globalMap.put("tHash_Lookup_copyOfto_tmap",
						tHash_Lookup_copyOfto_tmap);

				/**
				 * [tAdvancedHash_copyOfto_tmap begin ] stop
				 */

				/**
				 * [tMap_12_TMAP_IN begin ] start
				 */

				ok_Hash.put("tMap_12_TMAP_IN", false);
				start_Hash.put("tMap_12_TMAP_IN", System.currentTimeMillis());

				currentVirtualComponent = "tMap_12";

				currentComponent = "tMap_12_TMAP_IN";

				int tos_count_tMap_12_TMAP_IN = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_12_TMAP_IN__Struct {
				}
				Var__tMap_12_TMAP_IN__Struct Var__tMap_12_TMAP_IN = new Var__tMap_12_TMAP_IN__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfto_tmapStruct copyOfto_tmap_tmp = new copyOfto_tmapStruct();
				// ###############################

				/**
				 * [tMap_12_TMAP_IN begin ] stop
				 */

				/**
				 * [tMap_12_TMAP_IN main ] start
				 */

				currentVirtualComponent = "tMap_12";

				currentComponent = "tMap_12_TMAP_IN";

				boolean hasCasePrimitiveKeyWithNull_tMap_12_TMAP_IN = false;

				fsi_tMap_12_1.endPut();

				if (row28 == null) {
					row28 = new row28Struct();
				}

				// ###############################
				// # Input tables (lookups)
				boolean rejectedInnerJoin_tMap_12_TMAP_IN = false;
				boolean mainRowRejected_tMap_12_TMAP_IN = false;

				// /////////////////////////////////////////////
				// Starting Lookup Table "row27"
				// /////////////////////////////////////////////

				SortableRow_tMap_12_1 rsc_tMap_12_1;

				tHash_Lookup_row27.initGet();

				fsi_tMap_12_1.initGet();

				// TEST firstLookupIsPersistentSorted=true
				// isFirstPersistentSortedTable=true

				rejectedInnerJoin_tMap_12_TMAP_IN = false;

				while (fsi_tMap_12_1.hasNext()) { // G_TM_M_250 loop "1"

					// CALL close loop of lookup '1'

					rsc_tMap_12_1 = (SortableRow_tMap_12_1) fsi_tMap_12_1
							.next();
					rsc_tMap_12_1.copyDataTo(row28);

					rejectedInnerJoin_tMap_12_TMAP_IN = rsc_tMap_12_1.is__rejectedInnerJoin;

					boolean forceLooprow27 = false;

					row27Struct row27ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_12_TMAP_IN) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_12_TMAP_IN = false;

						row27HashKey.MODIFIER_PATH = rsc_tMap_12_1.exprKey_row27__MODIFIER_PATH;

						tHash_Lookup_row27.lookup(row27HashKey);

						if (!tHash_Lookup_row27.hasNext()) { // G_TM_M_090

							rejectedInnerJoin_tMap_12_TMAP_IN = true;

							forceLooprow27 = true;

						} // G_TM_M_090

					} // G_TM_M_020

					else { // G 20 - G 21
						forceLooprow27 = true;
					} // G 21

					row27Struct row27 = null;

					while ((tHash_Lookup_row27 != null && tHash_Lookup_row27
							.hasNext()) || forceLooprow27) { // G_TM_M_043

						// CALL close loop of lookup 'row27'

						row27Struct fromLookup_row27 = null;
						row27 = row27Default;

						if (!forceLooprow27) { // G 46

							fromLookup_row27 = tHash_Lookup_row27.next();

							if (fromLookup_row27 != null) {
								row27 = fromLookup_row27;
							}

						} // G 46

						forceLooprow27 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_12_TMAP_IN__Struct Var = Var__tMap_12_TMAP_IN;// ###############################
							// ###############################
							// # Output tables

							copyOfto_tmap = null;

							if (!rejectedInnerJoin_tMap_12_TMAP_IN) {

								// # Output table : 'copyOfto_tmap'
								copyOfto_tmap_tmp.TREE_PATH = row28.TREE_PATH;
								copyOfto_tmap_tmp.STAGING_PATH = row28.STAGING_PATH;
								copyOfto_tmap_tmp.MODIFIER_CD = row27.MODIFIER_CD;
								copyOfto_tmap_tmp.NAME_CHAR = row27.NAME_CHAR;
								copyOfto_tmap_tmp.MODIFIER_BLOB = row27.MODIFIER_BLOB;
								copyOfto_tmap_tmp.UPDATE_DATE = row27.UPDATE_DATE;
								copyOfto_tmap_tmp.DOWNLOAD_DATE = row27.DOWNLOAD_DATE;
								copyOfto_tmap_tmp.IMPORT_DATE = row27.IMPORT_DATE;
								copyOfto_tmap_tmp.SOURCESYSTEM_CD = row27.SOURCESYSTEM_CD;
								copyOfto_tmap_tmp.UPLOAD_ID = row27.UPLOAD_ID;
								copyOfto_tmap_tmp.STARTDATE_SOURCE_PATH = row28.STARTDATE_STAGING_PATH;
								copyOfto_tmap_tmp.ENDDATE_SOURCE_PATH = row28.ENDDATE_STAGING_PATH;
								copyOfto_tmap_tmp.M_APPLIED_PATH = row28.M_APPLIED_PATH;
								copyOfto_tmap_tmp.BASECODE = row28.BASECODE;
								copyOfto_tmap_tmp.NAME = row28.NAME;
								copyOfto_tmap = copyOfto_tmap_tmp;
							} // closing inner join bracket (2)
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_12_TMAP_IN = false;

						tos_count_tMap_12_TMAP_IN++;

						/**
						 * [tMap_12_TMAP_IN main ] stop
						 */
						// Start of branch "copyOfto_tmap"
						if (copyOfto_tmap != null) {

							/**
							 * [tAdvancedHash_copyOfto_tmap main ] start
							 */

							currentComponent = "tAdvancedHash_copyOfto_tmap";

							copyOfto_tmapStruct copyOfto_tmap_HashRow = new copyOfto_tmapStruct();

							copyOfto_tmap_HashRow.TREE_PATH = copyOfto_tmap.TREE_PATH;

							copyOfto_tmap_HashRow.STAGING_PATH = copyOfto_tmap.STAGING_PATH;

							copyOfto_tmap_HashRow.MODIFIER_CD = copyOfto_tmap.MODIFIER_CD;

							copyOfto_tmap_HashRow.NAME_CHAR = copyOfto_tmap.NAME_CHAR;

							copyOfto_tmap_HashRow.MODIFIER_BLOB = copyOfto_tmap.MODIFIER_BLOB;

							copyOfto_tmap_HashRow.UPDATE_DATE = copyOfto_tmap.UPDATE_DATE;

							copyOfto_tmap_HashRow.DOWNLOAD_DATE = copyOfto_tmap.DOWNLOAD_DATE;

							copyOfto_tmap_HashRow.IMPORT_DATE = copyOfto_tmap.IMPORT_DATE;

							copyOfto_tmap_HashRow.SOURCESYSTEM_CD = copyOfto_tmap.SOURCESYSTEM_CD;

							copyOfto_tmap_HashRow.UPLOAD_ID = copyOfto_tmap.UPLOAD_ID;

							copyOfto_tmap_HashRow.STARTDATE_SOURCE_PATH = copyOfto_tmap.STARTDATE_SOURCE_PATH;

							copyOfto_tmap_HashRow.ENDDATE_SOURCE_PATH = copyOfto_tmap.ENDDATE_SOURCE_PATH;

							copyOfto_tmap_HashRow.M_APPLIED_PATH = copyOfto_tmap.M_APPLIED_PATH;

							copyOfto_tmap_HashRow.BASECODE = copyOfto_tmap.BASECODE;

							copyOfto_tmap_HashRow.NAME = copyOfto_tmap.NAME;

							tHash_Lookup_copyOfto_tmap
									.put(copyOfto_tmap_HashRow);

							tos_count_tAdvancedHash_copyOfto_tmap++;

							/**
							 * [tAdvancedHash_copyOfto_tmap main ] stop
							 */

						} // End of branch "copyOfto_tmap"

					} // close loop of lookup 'row27' // G_TM_M_043

				} // G_TM_M_250 close loop read file data '1'

				/**
				 * [tMap_12_TMAP_IN end ] start
				 */

				currentVirtualComponent = "tMap_12";

				currentComponent = "tMap_12_TMAP_IN";

				// ###############################
				// # Lookup hashes releasing
				fsi_tMap_12_1.endGet();

				if (tHash_Lookup_row27 != null) {
					tHash_Lookup_row27.endGet();
				}
				globalMap.remove("tHash_Lookup_row27");

				// ###############################

				ok_Hash.put("tMap_12_TMAP_IN", true);
				end_Hash.put("tMap_12_TMAP_IN", System.currentTimeMillis());

				/**
				 * [tMap_12_TMAP_IN end ] stop
				 */

				/**
				 * [tAdvancedHash_copyOfto_tmap end ] start
				 */

				currentComponent = "tAdvancedHash_copyOfto_tmap";

				tHash_Lookup_copyOfto_tmap.endPut();

				ok_Hash.put("tAdvancedHash_copyOfto_tmap", true);
				end_Hash.put("tAdvancedHash_copyOfto_tmap",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_copyOfto_tmap end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_16 finally ] start
				 */

				currentComponent = "tFileInputDelimited_16";

				/**
				 * [tFileInputDelimited_16 finally ] stop
				 */

				/**
				 * [tMap_12_TMAP_OUT finally ] start
				 */

				currentVirtualComponent = "tMap_12";

				currentComponent = "tMap_12_TMAP_OUT";

				/**
				 * [tMap_12_TMAP_OUT finally ] stop
				 */

				/**
				 * [tMap_12_TMAP_IN finally ] start
				 */

				currentVirtualComponent = "tMap_12";

				currentComponent = "tMap_12_TMAP_IN";

				/**
				 * [tMap_12_TMAP_IN finally ] stop
				 */

				/**
				 * [tAdvancedHash_copyOfto_tmap finally ] start
				 */

				currentComponent = "tAdvancedHash_copyOfto_tmap";

				/**
				 * [tAdvancedHash_copyOfto_tmap finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_16_SUBPROCESS_STATE", 1);
	}

	public static class row27Struct implements
			routines.system.IPersistableComparableLookupRow<row27Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String MODIFIER_PATH;

		public String getMODIFIER_PATH() {
			return this.MODIFIER_PATH;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String MODIFIER_BLOB;

		public String getMODIFIER_BLOB() {
			return this.MODIFIER_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.MODIFIER_PATH == null) ? 0
								: this.MODIFIER_PATH.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row27Struct other = (row27Struct) obj;

			if (this.MODIFIER_PATH == null) {
				if (other.MODIFIER_PATH != null)
					return false;

			} else if (!this.MODIFIER_PATH.equals(other.MODIFIER_PATH))

				return false;

			return true;
		}

		public void copyDataTo(row27Struct other) {

			other.MODIFIER_PATH = this.MODIFIER_PATH;
			other.MODIFIER_CD = this.MODIFIER_CD;
			other.NAME_CHAR = this.NAME_CHAR;
			other.MODIFIER_BLOB = this.MODIFIER_BLOB;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row27Struct other) {

			other.MODIFIER_PATH = this.MODIFIER_PATH;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.MODIFIER_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MODIFIER_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.MODIFIER_CD = readString(dis, ois);

				this.NAME_CHAR = readString(dis, ois);

				this.MODIFIER_BLOB = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.MODIFIER_CD, dos, oos);

				writeString(this.NAME_CHAR, dos, oos);

				writeString(this.MODIFIER_BLOB, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MODIFIER_PATH=" + MODIFIER_PATH);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",MODIFIER_BLOB=" + MODIFIER_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row27Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.MODIFIER_PATH,
					other.MODIFIER_PATH);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_15Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row27Struct row27 = new row27Struct();

				/**
				 * [tAdvancedHash_row27 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row27", false);
				start_Hash.put("tAdvancedHash_row27",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row27";

				int tos_count_tAdvancedHash_row27 = 0;

				// connection name:row27
				// source node:tFileInputDelimited_15 -
				// inputs:(after_tFileInputDelimited_16) outputs:(row27,row27) |
				// target node:tAdvancedHash_row27 - inputs:(row27) outputs:()
				// linked node: tMap_12 - inputs:(row28,row27)
				// outputs:(copyOfto_tmap,copyOfto_tmap)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row27 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row27Struct> tHash_Lookup_row27 = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row27Struct>(
						matchingModeEnum_row27,
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid
								+ "_Lookup_row27_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public row27Struct createRowInstance() {
								return new row27Struct();
							}
						}

						, 200000

				);

				tHash_Lookup_row27.initPut();

				globalMap.put("tHash_Lookup_row27", tHash_Lookup_row27);

				/**
				 * [tAdvancedHash_row27 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_15 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_15", false);
				start_Hash.put("tFileInputDelimited_15",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_15";

				int tos_count_tFileInputDelimited_15 = 0;

				int nb_line_tFileInputDelimited_15 = 0;
				int footer_tFileInputDelimited_15 = 0;
				int totalLinetFileInputDelimited_15 = 0;
				int limittFileInputDelimited_15 = -1;
				int lastLinetFileInputDelimited_15 = -1;

				char fieldSeparator_tFileInputDelimited_15[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_15 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_15[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_15 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_15 = /**
				 * Start field
				 * tFileInputDelimited_15:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_10_FILEPATH"))/**
				 * 
				 * End field tFileInputDelimited_15:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_15 = null;

				try {

					String[] rowtFileInputDelimited_15 = null;
					int currentLinetFileInputDelimited_15 = 0;
					int outputLinetFileInputDelimited_15 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_15 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_15 = 0;
							if (footer_value_tFileInputDelimited_15 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_15 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_15,
									fieldSeparator_tFileInputDelimited_15[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_15 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_15)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_15[0]);
						}

						csvReadertFileInputDelimited_15
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_15[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_15[0] != '\r'))
							csvReadertFileInputDelimited_15.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_15[0]);

						csvReadertFileInputDelimited_15.setQuoteChar('"');

						csvReadertFileInputDelimited_15
								.setEscapeChar(csvReadertFileInputDelimited_15
										.getQuoteChar());

						if (footer_tFileInputDelimited_15 > 0) {
							for (totalLinetFileInputDelimited_15 = 0; totalLinetFileInputDelimited_15 < 1; totalLinetFileInputDelimited_15++) {
								csvReadertFileInputDelimited_15.readNext();
							}
							csvReadertFileInputDelimited_15
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_15.readNext()) {

								rowtFileInputDelimited_15 = csvReadertFileInputDelimited_15
										.getValues();
								if (!(rowtFileInputDelimited_15.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_15[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_15++;

								}

							}
							int lastLineTemptFileInputDelimited_15 = totalLinetFileInputDelimited_15
									- footer_tFileInputDelimited_15 < 0 ? 0
									: totalLinetFileInputDelimited_15
											- footer_tFileInputDelimited_15;
							if (lastLinetFileInputDelimited_15 > 0) {
								lastLinetFileInputDelimited_15 = lastLinetFileInputDelimited_15 < lastLineTemptFileInputDelimited_15 ? lastLinetFileInputDelimited_15
										: lastLineTemptFileInputDelimited_15;
							} else {
								lastLinetFileInputDelimited_15 = lastLineTemptFileInputDelimited_15;
							}

							csvReadertFileInputDelimited_15.close();
							if (filename_tFileInputDelimited_15 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_15 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_15,
										fieldSeparator_tFileInputDelimited_15[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_15 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_15)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_15[0]);
							}
							csvReadertFileInputDelimited_15
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_15[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_15[0] != '\r'))
								csvReadertFileInputDelimited_15
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_15[0]);

							csvReadertFileInputDelimited_15.setQuoteChar('"');

							csvReadertFileInputDelimited_15
									.setEscapeChar(csvReadertFileInputDelimited_15
											.getQuoteChar());

						}

						if (limittFileInputDelimited_15 != 0) {
							for (currentLinetFileInputDelimited_15 = 0; currentLinetFileInputDelimited_15 < 1; currentLinetFileInputDelimited_15++) {
								csvReadertFileInputDelimited_15.readNext();
							}
						}
						csvReadertFileInputDelimited_15
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_15 != 0
							&& csvReadertFileInputDelimited_15 != null
							&& csvReadertFileInputDelimited_15.readNext()) {

						rowtFileInputDelimited_15 = csvReadertFileInputDelimited_15
								.getValues();

						if (rowtFileInputDelimited_15.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_15[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_15++;

						if (lastLinetFileInputDelimited_15 > -1
								&& currentLinetFileInputDelimited_15 > lastLinetFileInputDelimited_15) {
							break;
						}
						outputLinetFileInputDelimited_15++;
						if (limittFileInputDelimited_15 > 0
								&& outputLinetFileInputDelimited_15 > limittFileInputDelimited_15) {
							break;
						}

						row27 = null;

						row27 = null;

						boolean whetherReject_tFileInputDelimited_15 = false;
						row27 = new row27Struct();
						try {

							char fieldSeparator_tFileInputDelimited_15_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_15_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_15.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_15[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row27.MODIFIER_PATH = null;

								row27.MODIFIER_CD = null;

								row27.NAME_CHAR = null;

								row27.MODIFIER_BLOB = null;

								row27.UPDATE_DATE = null;

								row27.DOWNLOAD_DATE = null;

								row27.IMPORT_DATE = null;

								row27.SOURCESYSTEM_CD = null;

								row27.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_15 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_15 = 0;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row27.MODIFIER_PATH = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row27.MODIFIER_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 1;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row27.MODIFIER_CD = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row27.MODIFIER_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 2;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row27.NAME_CHAR = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row27.NAME_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 3;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row27.MODIFIER_BLOB = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row27.MODIFIER_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 4;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									if (rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]
											.length() > 0) {

										row27.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15],
														"dd-MM-yyyy");

									} else {
										row27.UPDATE_DATE = null;
									}

								} else {
									row27.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 5;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									if (rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]
											.length() > 0) {

										row27.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15],
														"dd-MM-yyyy");

									} else {
										row27.DOWNLOAD_DATE = null;
									}

								} else {
									row27.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 6;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									if (rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]
											.length() > 0) {

										row27.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15],
														"dd-MM-yyyy");

									} else {
										row27.IMPORT_DATE = null;
									}

								} else {
									row27.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 7;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row27.SOURCESYSTEM_CD = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row27.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 8;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row27.UPLOAD_ID = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row27.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_15 = true;

							System.err.println(e.getMessage());
							row27 = null;

						}

						/**
						 * [tFileInputDelimited_15 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_15 main ] start
						 */

						currentComponent = "tFileInputDelimited_15";

						tos_count_tFileInputDelimited_15++;

						/**
						 * [tFileInputDelimited_15 main ] stop
						 */
						// Start of branch "row27"
						if (row27 != null) {

							/**
							 * [tAdvancedHash_row27 main ] start
							 */

							currentComponent = "tAdvancedHash_row27";

							row27Struct row27_HashRow = tHash_Lookup_row27
									.getNextFreeRow();

							row27_HashRow.MODIFIER_PATH = row27.MODIFIER_PATH;

							row27_HashRow.MODIFIER_CD = row27.MODIFIER_CD;

							row27_HashRow.NAME_CHAR = row27.NAME_CHAR;

							row27_HashRow.MODIFIER_BLOB = row27.MODIFIER_BLOB;

							row27_HashRow.UPDATE_DATE = row27.UPDATE_DATE;

							row27_HashRow.DOWNLOAD_DATE = row27.DOWNLOAD_DATE;

							row27_HashRow.IMPORT_DATE = row27.IMPORT_DATE;

							row27_HashRow.SOURCESYSTEM_CD = row27.SOURCESYSTEM_CD;

							row27_HashRow.UPLOAD_ID = row27.UPLOAD_ID;

							tHash_Lookup_row27.put(row27_HashRow);

							tos_count_tAdvancedHash_row27++;

							/**
							 * [tAdvancedHash_row27 main ] stop
							 */

						} // End of branch "row27"

						/**
						 * [tFileInputDelimited_15 end ] start
						 */

						currentComponent = "tFileInputDelimited_15";

						nb_line_tFileInputDelimited_15++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_15 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_15 != null) {
							csvReadertFileInputDelimited_15.close();
						}
					}
					if (csvReadertFileInputDelimited_15 != null) {
						globalMap.put("tFileInputDelimited_15_NB_LINE",
								nb_line_tFileInputDelimited_15);
					}

				}

				ok_Hash.put("tFileInputDelimited_15", true);
				end_Hash.put("tFileInputDelimited_15",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_15 end ] stop
				 */

				/**
				 * [tAdvancedHash_row27 end ] start
				 */

				currentComponent = "tAdvancedHash_row27";

				tHash_Lookup_row27.endPut();

				ok_Hash.put("tAdvancedHash_row27", true);
				end_Hash.put("tAdvancedHash_row27", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row27 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_15 finally ] start
				 */

				currentComponent = "tFileInputDelimited_15";

				/**
				 * [tFileInputDelimited_15 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row27 finally ] start
				 */

				currentComponent = "tAdvancedHash_row27";

				/**
				 * [tAdvancedHash_row27 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_15_SUBPROCESS_STATE", 1);
	}

	public static class row31Struct implements
			routines.system.IPersistableComparableLookupRow<row31Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String MODIFIER_PATH;

		public String getMODIFIER_PATH() {
			return this.MODIFIER_PATH;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String MODIFIER_BLOB;

		public String getMODIFIER_BLOB() {
			return this.MODIFIER_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.MODIFIER_PATH == null) ? 0
								: this.MODIFIER_PATH.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row31Struct other = (row31Struct) obj;

			if (this.MODIFIER_PATH == null) {
				if (other.MODIFIER_PATH != null)
					return false;

			} else if (!this.MODIFIER_PATH.equals(other.MODIFIER_PATH))

				return false;

			return true;
		}

		public void copyDataTo(row31Struct other) {

			other.MODIFIER_PATH = this.MODIFIER_PATH;
			other.MODIFIER_CD = this.MODIFIER_CD;
			other.NAME_CHAR = this.NAME_CHAR;
			other.MODIFIER_BLOB = this.MODIFIER_BLOB;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row31Struct other) {

			other.MODIFIER_PATH = this.MODIFIER_PATH;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.MODIFIER_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MODIFIER_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.MODIFIER_CD = readString(dis, ois);

				this.NAME_CHAR = readString(dis, ois);

				this.MODIFIER_BLOB = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.MODIFIER_CD, dos, oos);

				writeString(this.NAME_CHAR, dos, oos);

				writeString(this.MODIFIER_BLOB, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MODIFIER_PATH=" + MODIFIER_PATH);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",MODIFIER_BLOB=" + MODIFIER_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row31Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.MODIFIER_PATH,
					other.MODIFIER_PATH);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_19Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_19_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row31Struct row31 = new row31Struct();

				/**
				 * [tAdvancedHash_row31 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row31", false);
				start_Hash.put("tAdvancedHash_row31",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row31";

				int tos_count_tAdvancedHash_row31 = 0;

				// connection name:row31
				// source node:tFileInputDelimited_19 -
				// inputs:(after_tFileInputDelimited_17) outputs:(row31,row31) |
				// target node:tAdvancedHash_row31 - inputs:(row31) outputs:()
				// linked node: tMap_15 - inputs:(copyOfto_obs_fct,row31,row32)
				// outputs:(copyOfout1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row31 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row31Struct> tHash_Lookup_row31 = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row31Struct>(
						matchingModeEnum_row31,
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid
								+ "_Lookup_row31_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public row31Struct createRowInstance() {
								return new row31Struct();
							}
						}

						, 200000

				);

				tHash_Lookup_row31.initPut();

				globalMap.put("tHash_Lookup_row31", tHash_Lookup_row31);

				/**
				 * [tAdvancedHash_row31 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_19 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_19", false);
				start_Hash.put("tFileInputDelimited_19",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_19";

				int tos_count_tFileInputDelimited_19 = 0;

				int nb_line_tFileInputDelimited_19 = 0;
				int footer_tFileInputDelimited_19 = 0;
				int totalLinetFileInputDelimited_19 = 0;
				int limittFileInputDelimited_19 = -1;
				int lastLinetFileInputDelimited_19 = -1;

				char fieldSeparator_tFileInputDelimited_19[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_19 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_19[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_19 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_19 = /**
				 * Start field
				 * tFileInputDelimited_19:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_10_FILEPATH"))/**
				 * 
				 * End field tFileInputDelimited_19:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_19 = null;

				try {

					String[] rowtFileInputDelimited_19 = null;
					int currentLinetFileInputDelimited_19 = 0;
					int outputLinetFileInputDelimited_19 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_19 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_19 = 0;
							if (footer_value_tFileInputDelimited_19 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_19 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_19,
									fieldSeparator_tFileInputDelimited_19[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_19 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_19)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_19[0]);
						}

						csvReadertFileInputDelimited_19
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_19[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_19[0] != '\r'))
							csvReadertFileInputDelimited_19.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_19[0]);

						csvReadertFileInputDelimited_19.setQuoteChar('"');

						csvReadertFileInputDelimited_19
								.setEscapeChar(csvReadertFileInputDelimited_19
										.getQuoteChar());

						if (footer_tFileInputDelimited_19 > 0) {
							for (totalLinetFileInputDelimited_19 = 0; totalLinetFileInputDelimited_19 < 1; totalLinetFileInputDelimited_19++) {
								csvReadertFileInputDelimited_19.readNext();
							}
							csvReadertFileInputDelimited_19
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_19.readNext()) {

								rowtFileInputDelimited_19 = csvReadertFileInputDelimited_19
										.getValues();
								if (!(rowtFileInputDelimited_19.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_19[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_19++;

								}

							}
							int lastLineTemptFileInputDelimited_19 = totalLinetFileInputDelimited_19
									- footer_tFileInputDelimited_19 < 0 ? 0
									: totalLinetFileInputDelimited_19
											- footer_tFileInputDelimited_19;
							if (lastLinetFileInputDelimited_19 > 0) {
								lastLinetFileInputDelimited_19 = lastLinetFileInputDelimited_19 < lastLineTemptFileInputDelimited_19 ? lastLinetFileInputDelimited_19
										: lastLineTemptFileInputDelimited_19;
							} else {
								lastLinetFileInputDelimited_19 = lastLineTemptFileInputDelimited_19;
							}

							csvReadertFileInputDelimited_19.close();
							if (filename_tFileInputDelimited_19 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_19 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_19,
										fieldSeparator_tFileInputDelimited_19[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_19 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_19)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_19[0]);
							}
							csvReadertFileInputDelimited_19
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_19[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_19[0] != '\r'))
								csvReadertFileInputDelimited_19
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_19[0]);

							csvReadertFileInputDelimited_19.setQuoteChar('"');

							csvReadertFileInputDelimited_19
									.setEscapeChar(csvReadertFileInputDelimited_19
											.getQuoteChar());

						}

						if (limittFileInputDelimited_19 != 0) {
							for (currentLinetFileInputDelimited_19 = 0; currentLinetFileInputDelimited_19 < 1; currentLinetFileInputDelimited_19++) {
								csvReadertFileInputDelimited_19.readNext();
							}
						}
						csvReadertFileInputDelimited_19
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_19 != 0
							&& csvReadertFileInputDelimited_19 != null
							&& csvReadertFileInputDelimited_19.readNext()) {

						rowtFileInputDelimited_19 = csvReadertFileInputDelimited_19
								.getValues();

						if (rowtFileInputDelimited_19.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_19[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_19++;

						if (lastLinetFileInputDelimited_19 > -1
								&& currentLinetFileInputDelimited_19 > lastLinetFileInputDelimited_19) {
							break;
						}
						outputLinetFileInputDelimited_19++;
						if (limittFileInputDelimited_19 > 0
								&& outputLinetFileInputDelimited_19 > limittFileInputDelimited_19) {
							break;
						}

						row31 = null;

						row31 = null;

						boolean whetherReject_tFileInputDelimited_19 = false;
						row31 = new row31Struct();
						try {

							char fieldSeparator_tFileInputDelimited_19_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_19_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_19.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_19[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row31.MODIFIER_PATH = null;

								row31.MODIFIER_CD = null;

								row31.NAME_CHAR = null;

								row31.MODIFIER_BLOB = null;

								row31.UPDATE_DATE = null;

								row31.DOWNLOAD_DATE = null;

								row31.IMPORT_DATE = null;

								row31.SOURCESYSTEM_CD = null;

								row31.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_19 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_19 = 0;

								if (columnIndexWithD_tFileInputDelimited_19 < rowtFileInputDelimited_19.length) {

									row31.MODIFIER_PATH = rowtFileInputDelimited_19[columnIndexWithD_tFileInputDelimited_19];

								} else {
									row31.MODIFIER_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_19 = 1;

								if (columnIndexWithD_tFileInputDelimited_19 < rowtFileInputDelimited_19.length) {

									row31.MODIFIER_CD = rowtFileInputDelimited_19[columnIndexWithD_tFileInputDelimited_19];

								} else {
									row31.MODIFIER_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_19 = 2;

								if (columnIndexWithD_tFileInputDelimited_19 < rowtFileInputDelimited_19.length) {

									row31.NAME_CHAR = rowtFileInputDelimited_19[columnIndexWithD_tFileInputDelimited_19];

								} else {
									row31.NAME_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_19 = 3;

								if (columnIndexWithD_tFileInputDelimited_19 < rowtFileInputDelimited_19.length) {

									row31.MODIFIER_BLOB = rowtFileInputDelimited_19[columnIndexWithD_tFileInputDelimited_19];

								} else {
									row31.MODIFIER_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_19 = 4;

								if (columnIndexWithD_tFileInputDelimited_19 < rowtFileInputDelimited_19.length) {

									if (rowtFileInputDelimited_19[columnIndexWithD_tFileInputDelimited_19]
											.length() > 0) {

										row31.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_19[columnIndexWithD_tFileInputDelimited_19],
														"dd-MM-yyyy");

									} else {
										row31.UPDATE_DATE = null;
									}

								} else {
									row31.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_19 = 5;

								if (columnIndexWithD_tFileInputDelimited_19 < rowtFileInputDelimited_19.length) {

									if (rowtFileInputDelimited_19[columnIndexWithD_tFileInputDelimited_19]
											.length() > 0) {

										row31.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_19[columnIndexWithD_tFileInputDelimited_19],
														"dd-MM-yyyy");

									} else {
										row31.DOWNLOAD_DATE = null;
									}

								} else {
									row31.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_19 = 6;

								if (columnIndexWithD_tFileInputDelimited_19 < rowtFileInputDelimited_19.length) {

									if (rowtFileInputDelimited_19[columnIndexWithD_tFileInputDelimited_19]
											.length() > 0) {

										row31.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_19[columnIndexWithD_tFileInputDelimited_19],
														"dd-MM-yyyy");

									} else {
										row31.IMPORT_DATE = null;
									}

								} else {
									row31.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_19 = 7;

								if (columnIndexWithD_tFileInputDelimited_19 < rowtFileInputDelimited_19.length) {

									row31.SOURCESYSTEM_CD = rowtFileInputDelimited_19[columnIndexWithD_tFileInputDelimited_19];

								} else {
									row31.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_19 = 8;

								if (columnIndexWithD_tFileInputDelimited_19 < rowtFileInputDelimited_19.length) {

									row31.UPLOAD_ID = rowtFileInputDelimited_19[columnIndexWithD_tFileInputDelimited_19];

								} else {
									row31.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_19 = true;

							System.err.println(e.getMessage());
							row31 = null;

						}

						/**
						 * [tFileInputDelimited_19 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_19 main ] start
						 */

						currentComponent = "tFileInputDelimited_19";

						tos_count_tFileInputDelimited_19++;

						/**
						 * [tFileInputDelimited_19 main ] stop
						 */
						// Start of branch "row31"
						if (row31 != null) {

							/**
							 * [tAdvancedHash_row31 main ] start
							 */

							currentComponent = "tAdvancedHash_row31";

							row31Struct row31_HashRow = tHash_Lookup_row31
									.getNextFreeRow();

							row31_HashRow.MODIFIER_PATH = row31.MODIFIER_PATH;

							row31_HashRow.MODIFIER_CD = row31.MODIFIER_CD;

							row31_HashRow.NAME_CHAR = row31.NAME_CHAR;

							row31_HashRow.MODIFIER_BLOB = row31.MODIFIER_BLOB;

							row31_HashRow.UPDATE_DATE = row31.UPDATE_DATE;

							row31_HashRow.DOWNLOAD_DATE = row31.DOWNLOAD_DATE;

							row31_HashRow.IMPORT_DATE = row31.IMPORT_DATE;

							row31_HashRow.SOURCESYSTEM_CD = row31.SOURCESYSTEM_CD;

							row31_HashRow.UPLOAD_ID = row31.UPLOAD_ID;

							tHash_Lookup_row31.put(row31_HashRow);

							tos_count_tAdvancedHash_row31++;

							/**
							 * [tAdvancedHash_row31 main ] stop
							 */

						} // End of branch "row31"

						/**
						 * [tFileInputDelimited_19 end ] start
						 */

						currentComponent = "tFileInputDelimited_19";

						nb_line_tFileInputDelimited_19++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_19 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_19 != null) {
							csvReadertFileInputDelimited_19.close();
						}
					}
					if (csvReadertFileInputDelimited_19 != null) {
						globalMap.put("tFileInputDelimited_19_NB_LINE",
								nb_line_tFileInputDelimited_19);
					}

				}

				ok_Hash.put("tFileInputDelimited_19", true);
				end_Hash.put("tFileInputDelimited_19",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_19 end ] stop
				 */

				/**
				 * [tAdvancedHash_row31 end ] start
				 */

				currentComponent = "tAdvancedHash_row31";

				tHash_Lookup_row31.endPut();

				ok_Hash.put("tAdvancedHash_row31", true);
				end_Hash.put("tAdvancedHash_row31", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row31 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_19 finally ] start
				 */

				currentComponent = "tFileInputDelimited_19";

				/**
				 * [tFileInputDelimited_19 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row31 finally ] start
				 */

				currentComponent = "tAdvancedHash_row31";

				/**
				 * [tAdvancedHash_row31 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_19_SUBPROCESS_STATE", 1);
	}

	public static class row32Struct implements
			routines.system.IPersistableComparableLookupRow<row32Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public String START_DATE;

		public String getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public String END_DATE;

		public String getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.PATIENT_NUM == null) ? 0 : this.PATIENT_NUM
								.hashCode());

				result = prime
						* result
						+ ((this.MODIFIER_CD == null) ? 0 : this.MODIFIER_CD
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row32Struct other = (row32Struct) obj;

			if (this.PATIENT_NUM == null) {
				if (other.PATIENT_NUM != null)
					return false;

			} else if (!this.PATIENT_NUM.equals(other.PATIENT_NUM))

				return false;

			if (this.MODIFIER_CD == null) {
				if (other.MODIFIER_CD != null)
					return false;

			} else if (!this.MODIFIER_CD.equals(other.MODIFIER_CD))

				return false;

			return true;
		}

		public void copyDataTo(row32Struct other) {

			other.ENCOUNTER_NUM = this.ENCOUNTER_NUM;
			other.PATIENT_NUM = this.PATIENT_NUM;
			other.CONCEPT_CD = this.CONCEPT_CD;
			other.PROVIDER_ID = this.PROVIDER_ID;
			other.START_DATE = this.START_DATE;
			other.MODIFIER_CD = this.MODIFIER_CD;
			other.INSTANCE_NUM = this.INSTANCE_NUM;
			other.VALTYPE_CD = this.VALTYPE_CD;
			other.TVAL_CHAR = this.TVAL_CHAR;
			other.NVAL_NUM = this.NVAL_NUM;
			other.VALUEFLAG_CD = this.VALUEFLAG_CD;
			other.QUANTITY_NUM = this.QUANTITY_NUM;
			other.UNITS_CD = this.UNITS_CD;
			other.END_DATE = this.END_DATE;
			other.LOCATION_CD = this.LOCATION_CD;
			other.OBSERVATION_BLOB = this.OBSERVATION_BLOB;
			other.CONFIDENCE_NUM = this.CONFIDENCE_NUM;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row32Struct other) {

			other.PATIENT_NUM = this.PATIENT_NUM;
			other.MODIFIER_CD = this.MODIFIER_CD;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.MODIFIER_CD = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.MODIFIER_CD, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ENCOUNTER_NUM = (BigDecimal) ois.readObject();

				this.CONCEPT_CD = readString(dis, ois);

				this.PROVIDER_ID = readString(dis, ois);

				this.START_DATE = readString(dis, ois);

				this.INSTANCE_NUM = readString(dis, ois);

				this.VALTYPE_CD = readString(dis, ois);

				this.TVAL_CHAR = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.NVAL_NUM = null;
				} else {
					this.NVAL_NUM = dis.readFloat();
				}

				this.VALUEFLAG_CD = readString(dis, ois);

				this.QUANTITY_NUM = readString(dis, ois);

				this.UNITS_CD = readString(dis, ois);

				this.END_DATE = readString(dis, ois);

				this.LOCATION_CD = readString(dis, ois);

				this.OBSERVATION_BLOB = readString(dis, ois);

				this.CONFIDENCE_NUM = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				oos.writeObject(this.ENCOUNTER_NUM);

				writeString(this.CONCEPT_CD, dos, oos);

				writeString(this.PROVIDER_ID, dos, oos);

				writeString(this.START_DATE, dos, oos);

				writeString(this.INSTANCE_NUM, dos, oos);

				writeString(this.VALTYPE_CD, dos, oos);

				writeString(this.TVAL_CHAR, dos, oos);

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				writeString(this.VALUEFLAG_CD, dos, oos);

				writeString(this.QUANTITY_NUM, dos, oos);

				writeString(this.UNITS_CD, dos, oos);

				writeString(this.END_DATE, dos, oos);

				writeString(this.LOCATION_CD, dos, oos);

				writeString(this.OBSERVATION_BLOB, dos, oos);

				writeString(this.CONFIDENCE_NUM, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + START_DATE);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + END_DATE);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row32Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PATIENT_NUM,
					other.PATIENT_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.MODIFIER_CD,
					other.MODIFIER_CD);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_20Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_20_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row32Struct row32 = new row32Struct();

				/**
				 * [tAdvancedHash_row32 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row32", false);
				start_Hash.put("tAdvancedHash_row32",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row32";

				int tos_count_tAdvancedHash_row32 = 0;

				// connection name:row32
				// source node:tFileInputDelimited_20 -
				// inputs:(after_tFileInputDelimited_17) outputs:(row32,row32) |
				// target node:tAdvancedHash_row32 - inputs:(row32) outputs:()
				// linked node: tMap_15 - inputs:(copyOfto_obs_fct,row31,row32)
				// outputs:(copyOfout1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row32 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row32Struct> tHash_Lookup_row32 = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row32Struct>(
						matchingModeEnum_row32,
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid
								+ "_Lookup_row32_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public row32Struct createRowInstance() {
								return new row32Struct();
							}
						}

						, 200000

				);

				tHash_Lookup_row32.initPut();

				globalMap.put("tHash_Lookup_row32", tHash_Lookup_row32);

				/**
				 * [tAdvancedHash_row32 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_20 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_20", false);
				start_Hash.put("tFileInputDelimited_20",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_20";

				int tos_count_tFileInputDelimited_20 = 0;

				int nb_line_tFileInputDelimited_20 = 0;
				int footer_tFileInputDelimited_20 = 0;
				int totalLinetFileInputDelimited_20 = 0;
				int limittFileInputDelimited_20 = -1;
				int lastLinetFileInputDelimited_20 = -1;

				char fieldSeparator_tFileInputDelimited_20[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_20 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_20[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_20 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_20 = /**
				 * Start field
				 * tFileInputDelimited_20:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_12_FILEPATH"))/**
				 * 
				 * End field tFileInputDelimited_20:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_20 = null;

				try {

					String[] rowtFileInputDelimited_20 = null;
					int currentLinetFileInputDelimited_20 = 0;
					int outputLinetFileInputDelimited_20 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_20 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_20 = 0;
							if (footer_value_tFileInputDelimited_20 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_20 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_20,
									fieldSeparator_tFileInputDelimited_20[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_20 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_20)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_20[0]);
						}

						csvReadertFileInputDelimited_20
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_20[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_20[0] != '\r'))
							csvReadertFileInputDelimited_20.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_20[0]);

						csvReadertFileInputDelimited_20.setQuoteChar('"');

						csvReadertFileInputDelimited_20
								.setEscapeChar(csvReadertFileInputDelimited_20
										.getQuoteChar());

						if (footer_tFileInputDelimited_20 > 0) {
							for (totalLinetFileInputDelimited_20 = 0; totalLinetFileInputDelimited_20 < 0; totalLinetFileInputDelimited_20++) {
								csvReadertFileInputDelimited_20.readNext();
							}
							csvReadertFileInputDelimited_20
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_20.readNext()) {

								rowtFileInputDelimited_20 = csvReadertFileInputDelimited_20
										.getValues();
								if (!(rowtFileInputDelimited_20.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_20[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_20++;

								}

							}
							int lastLineTemptFileInputDelimited_20 = totalLinetFileInputDelimited_20
									- footer_tFileInputDelimited_20 < 0 ? 0
									: totalLinetFileInputDelimited_20
											- footer_tFileInputDelimited_20;
							if (lastLinetFileInputDelimited_20 > 0) {
								lastLinetFileInputDelimited_20 = lastLinetFileInputDelimited_20 < lastLineTemptFileInputDelimited_20 ? lastLinetFileInputDelimited_20
										: lastLineTemptFileInputDelimited_20;
							} else {
								lastLinetFileInputDelimited_20 = lastLineTemptFileInputDelimited_20;
							}

							csvReadertFileInputDelimited_20.close();
							if (filename_tFileInputDelimited_20 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_20 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_20,
										fieldSeparator_tFileInputDelimited_20[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_20 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_20)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_20[0]);
							}
							csvReadertFileInputDelimited_20
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_20[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_20[0] != '\r'))
								csvReadertFileInputDelimited_20
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_20[0]);

							csvReadertFileInputDelimited_20.setQuoteChar('"');

							csvReadertFileInputDelimited_20
									.setEscapeChar(csvReadertFileInputDelimited_20
											.getQuoteChar());

						}

						if (limittFileInputDelimited_20 != 0) {
							for (currentLinetFileInputDelimited_20 = 0; currentLinetFileInputDelimited_20 < 0; currentLinetFileInputDelimited_20++) {
								csvReadertFileInputDelimited_20.readNext();
							}
						}
						csvReadertFileInputDelimited_20
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_20 != 0
							&& csvReadertFileInputDelimited_20 != null
							&& csvReadertFileInputDelimited_20.readNext()) {

						rowtFileInputDelimited_20 = csvReadertFileInputDelimited_20
								.getValues();

						if (rowtFileInputDelimited_20.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_20[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_20++;

						if (lastLinetFileInputDelimited_20 > -1
								&& currentLinetFileInputDelimited_20 > lastLinetFileInputDelimited_20) {
							break;
						}
						outputLinetFileInputDelimited_20++;
						if (limittFileInputDelimited_20 > 0
								&& outputLinetFileInputDelimited_20 > limittFileInputDelimited_20) {
							break;
						}

						row32 = null;

						row32 = null;

						boolean whetherReject_tFileInputDelimited_20 = false;
						row32 = new row32Struct();
						try {

							char fieldSeparator_tFileInputDelimited_20_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_20_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_20.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_20[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row32.ENCOUNTER_NUM = null;

								row32.PATIENT_NUM = null;

								row32.CONCEPT_CD = null;

								row32.PROVIDER_ID = null;

								row32.START_DATE = null;

								row32.MODIFIER_CD = null;

								row32.INSTANCE_NUM = null;

								row32.VALTYPE_CD = null;

								row32.TVAL_CHAR = null;

								row32.NVAL_NUM = null;

								row32.VALUEFLAG_CD = null;

								row32.QUANTITY_NUM = null;

								row32.UNITS_CD = null;

								row32.END_DATE = null;

								row32.LOCATION_CD = null;

								row32.OBSERVATION_BLOB = null;

								row32.CONFIDENCE_NUM = null;

								row32.UPDATE_DATE = null;

								row32.DOWNLOAD_DATE = null;

								row32.IMPORT_DATE = null;

								row32.SOURCESYSTEM_CD = null;

								row32.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_20 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_20 = 0;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									if (rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]
											.length() > 0) {

										row32.ENCOUNTER_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]);

									} else {
										row32.ENCOUNTER_NUM = null;
									}

								} else {
									row32.ENCOUNTER_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 1;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									if (rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]
											.length() > 0) {

										row32.PATIENT_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]);

									} else {
										row32.PATIENT_NUM = null;
									}

								} else {
									row32.PATIENT_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 2;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									row32.CONCEPT_CD = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									row32.CONCEPT_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 3;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									row32.PROVIDER_ID = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									row32.PROVIDER_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 4;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									row32.START_DATE = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									row32.START_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 5;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									row32.MODIFIER_CD = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									row32.MODIFIER_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 6;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									row32.INSTANCE_NUM = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									row32.INSTANCE_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 7;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									row32.VALTYPE_CD = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									row32.VALTYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 8;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									row32.TVAL_CHAR = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									row32.TVAL_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 9;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									if (rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]
											.length() > 0) {

										row32.NVAL_NUM = ParserUtils
												.parseTo_Float(rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]);

									} else {
										row32.NVAL_NUM = null;
									}

								} else {
									row32.NVAL_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 10;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									row32.VALUEFLAG_CD = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									row32.VALUEFLAG_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 11;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									row32.QUANTITY_NUM = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									row32.QUANTITY_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 12;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									row32.UNITS_CD = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									row32.UNITS_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 13;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									row32.END_DATE = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									row32.END_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 14;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									row32.LOCATION_CD = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									row32.LOCATION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 15;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									row32.OBSERVATION_BLOB = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									row32.OBSERVATION_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 16;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									row32.CONFIDENCE_NUM = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									row32.CONFIDENCE_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 17;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									if (rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]
											.length() > 0) {

										row32.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20],
														"yyyy-MM-dd");

									} else {
										row32.UPDATE_DATE = null;
									}

								} else {
									row32.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 18;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									if (rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]
											.length() > 0) {

										row32.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20],
														"yyyy-MM-dd");

									} else {
										row32.DOWNLOAD_DATE = null;
									}

								} else {
									row32.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 19;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									if (rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20]
											.length() > 0) {

										row32.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20],
														"yyyy-MM-dd");

									} else {
										row32.IMPORT_DATE = null;
									}

								} else {
									row32.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 20;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									row32.SOURCESYSTEM_CD = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									row32.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_20 = 21;

								if (columnIndexWithD_tFileInputDelimited_20 < rowtFileInputDelimited_20.length) {

									row32.UPLOAD_ID = rowtFileInputDelimited_20[columnIndexWithD_tFileInputDelimited_20];

								} else {
									row32.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_20 = true;

							System.err.println(e.getMessage());
							row32 = null;

						}

						/**
						 * [tFileInputDelimited_20 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_20 main ] start
						 */

						currentComponent = "tFileInputDelimited_20";

						tos_count_tFileInputDelimited_20++;

						/**
						 * [tFileInputDelimited_20 main ] stop
						 */
						// Start of branch "row32"
						if (row32 != null) {

							/**
							 * [tAdvancedHash_row32 main ] start
							 */

							currentComponent = "tAdvancedHash_row32";

							row32Struct row32_HashRow = tHash_Lookup_row32
									.getNextFreeRow();

							row32_HashRow.ENCOUNTER_NUM = row32.ENCOUNTER_NUM;

							row32_HashRow.PATIENT_NUM = row32.PATIENT_NUM;

							row32_HashRow.CONCEPT_CD = row32.CONCEPT_CD;

							row32_HashRow.PROVIDER_ID = row32.PROVIDER_ID;

							row32_HashRow.START_DATE = row32.START_DATE;

							row32_HashRow.MODIFIER_CD = row32.MODIFIER_CD;

							row32_HashRow.INSTANCE_NUM = row32.INSTANCE_NUM;

							row32_HashRow.VALTYPE_CD = row32.VALTYPE_CD;

							row32_HashRow.TVAL_CHAR = row32.TVAL_CHAR;

							row32_HashRow.NVAL_NUM = row32.NVAL_NUM;

							row32_HashRow.VALUEFLAG_CD = row32.VALUEFLAG_CD;

							row32_HashRow.QUANTITY_NUM = row32.QUANTITY_NUM;

							row32_HashRow.UNITS_CD = row32.UNITS_CD;

							row32_HashRow.END_DATE = row32.END_DATE;

							row32_HashRow.LOCATION_CD = row32.LOCATION_CD;

							row32_HashRow.OBSERVATION_BLOB = row32.OBSERVATION_BLOB;

							row32_HashRow.CONFIDENCE_NUM = row32.CONFIDENCE_NUM;

							row32_HashRow.UPDATE_DATE = row32.UPDATE_DATE;

							row32_HashRow.DOWNLOAD_DATE = row32.DOWNLOAD_DATE;

							row32_HashRow.IMPORT_DATE = row32.IMPORT_DATE;

							row32_HashRow.SOURCESYSTEM_CD = row32.SOURCESYSTEM_CD;

							row32_HashRow.UPLOAD_ID = row32.UPLOAD_ID;

							tHash_Lookup_row32.put(row32_HashRow);

							tos_count_tAdvancedHash_row32++;

							/**
							 * [tAdvancedHash_row32 main ] stop
							 */

						} // End of branch "row32"

						/**
						 * [tFileInputDelimited_20 end ] start
						 */

						currentComponent = "tFileInputDelimited_20";

						nb_line_tFileInputDelimited_20++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_20 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_20 != null) {
							csvReadertFileInputDelimited_20.close();
						}
					}
					if (csvReadertFileInputDelimited_20 != null) {
						globalMap.put("tFileInputDelimited_20_NB_LINE",
								nb_line_tFileInputDelimited_20);
					}

				}

				ok_Hash.put("tFileInputDelimited_20", true);
				end_Hash.put("tFileInputDelimited_20",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_20 end ] stop
				 */

				/**
				 * [tAdvancedHash_row32 end ] start
				 */

				currentComponent = "tAdvancedHash_row32";

				tHash_Lookup_row32.endPut();

				ok_Hash.put("tAdvancedHash_row32", true);
				end_Hash.put("tAdvancedHash_row32", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row32 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_20 finally ] start
				 */

				currentComponent = "tFileInputDelimited_20";

				/**
				 * [tFileInputDelimited_20 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row32 finally ] start
				 */

				currentComponent = "tAdvancedHash_row32";

				/**
				 * [tAdvancedHash_row32 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_20_SUBPROCESS_STATE", 1);
	}

	public static class row33Struct implements
			routines.system.IPersistableComparableLookupRow<row33Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public String START_DATE;

		public String getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public String QUANTITY_NUM;

		public String getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public String END_DATE;

		public String getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public String CONFIDENCE_NUM;

		public String getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.PATIENT_NUM == null) ? 0 : this.PATIENT_NUM
								.hashCode());

				result = prime
						* result
						+ ((this.MODIFIER_CD == null) ? 0 : this.MODIFIER_CD
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row33Struct other = (row33Struct) obj;

			if (this.PATIENT_NUM == null) {
				if (other.PATIENT_NUM != null)
					return false;

			} else if (!this.PATIENT_NUM.equals(other.PATIENT_NUM))

				return false;

			if (this.MODIFIER_CD == null) {
				if (other.MODIFIER_CD != null)
					return false;

			} else if (!this.MODIFIER_CD.equals(other.MODIFIER_CD))

				return false;

			return true;
		}

		public void copyDataTo(row33Struct other) {

			other.ENCOUNTER_NUM = this.ENCOUNTER_NUM;
			other.PATIENT_NUM = this.PATIENT_NUM;
			other.CONCEPT_CD = this.CONCEPT_CD;
			other.PROVIDER_ID = this.PROVIDER_ID;
			other.START_DATE = this.START_DATE;
			other.MODIFIER_CD = this.MODIFIER_CD;
			other.INSTANCE_NUM = this.INSTANCE_NUM;
			other.VALTYPE_CD = this.VALTYPE_CD;
			other.TVAL_CHAR = this.TVAL_CHAR;
			other.NVAL_NUM = this.NVAL_NUM;
			other.VALUEFLAG_CD = this.VALUEFLAG_CD;
			other.QUANTITY_NUM = this.QUANTITY_NUM;
			other.UNITS_CD = this.UNITS_CD;
			other.END_DATE = this.END_DATE;
			other.LOCATION_CD = this.LOCATION_CD;
			other.OBSERVATION_BLOB = this.OBSERVATION_BLOB;
			other.CONFIDENCE_NUM = this.CONFIDENCE_NUM;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row33Struct other) {

			other.PATIENT_NUM = this.PATIENT_NUM;
			other.MODIFIER_CD = this.MODIFIER_CD;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.MODIFIER_CD = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.MODIFIER_CD, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ENCOUNTER_NUM = (BigDecimal) ois.readObject();

				this.CONCEPT_CD = readString(dis, ois);

				this.PROVIDER_ID = readString(dis, ois);

				this.START_DATE = readString(dis, ois);

				this.INSTANCE_NUM = readString(dis, ois);

				this.VALTYPE_CD = readString(dis, ois);

				this.TVAL_CHAR = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.NVAL_NUM = null;
				} else {
					this.NVAL_NUM = dis.readFloat();
				}

				this.VALUEFLAG_CD = readString(dis, ois);

				this.QUANTITY_NUM = readString(dis, ois);

				this.UNITS_CD = readString(dis, ois);

				this.END_DATE = readString(dis, ois);

				this.LOCATION_CD = readString(dis, ois);

				this.OBSERVATION_BLOB = readString(dis, ois);

				this.CONFIDENCE_NUM = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				oos.writeObject(this.ENCOUNTER_NUM);

				writeString(this.CONCEPT_CD, dos, oos);

				writeString(this.PROVIDER_ID, dos, oos);

				writeString(this.START_DATE, dos, oos);

				writeString(this.INSTANCE_NUM, dos, oos);

				writeString(this.VALTYPE_CD, dos, oos);

				writeString(this.TVAL_CHAR, dos, oos);

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				writeString(this.VALUEFLAG_CD, dos, oos);

				writeString(this.QUANTITY_NUM, dos, oos);

				writeString(this.UNITS_CD, dos, oos);

				writeString(this.END_DATE, dos, oos);

				writeString(this.LOCATION_CD, dos, oos);

				writeString(this.OBSERVATION_BLOB, dos, oos);

				writeString(this.CONFIDENCE_NUM, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + START_DATE);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + QUANTITY_NUM);
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + END_DATE);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + CONFIDENCE_NUM);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row33Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PATIENT_NUM,
					other.PATIENT_NUM);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.MODIFIER_CD,
					other.MODIFIER_CD);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_21Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_21_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row33Struct row33 = new row33Struct();

				/**
				 * [tAdvancedHash_row33 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row33", false);
				start_Hash.put("tAdvancedHash_row33",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row33";

				int tos_count_tAdvancedHash_row33 = 0;

				// connection name:row33
				// source node:tFileInputDelimited_21 -
				// inputs:(after_tFileInputDelimited_17) outputs:(row33,row33) |
				// target node:tAdvancedHash_row33 - inputs:(row33) outputs:()
				// linked node: tMap_14 - inputs:(copyOfout1,row33,row30)
				// outputs:(copyOfasddd)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row33 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row33Struct> tHash_Lookup_row33 = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row33Struct>(
						matchingModeEnum_row33,
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid
								+ "_Lookup_row33_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public row33Struct createRowInstance() {
								return new row33Struct();
							}
						}

						, 200000

				);

				tHash_Lookup_row33.initPut();

				globalMap.put("tHash_Lookup_row33", tHash_Lookup_row33);

				/**
				 * [tAdvancedHash_row33 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_21 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_21", false);
				start_Hash.put("tFileInputDelimited_21",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_21";

				int tos_count_tFileInputDelimited_21 = 0;

				int nb_line_tFileInputDelimited_21 = 0;
				int footer_tFileInputDelimited_21 = 0;
				int totalLinetFileInputDelimited_21 = 0;
				int limittFileInputDelimited_21 = -1;
				int lastLinetFileInputDelimited_21 = -1;

				char fieldSeparator_tFileInputDelimited_21[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_21 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_21[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_21 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_21 = /**
				 * Start field
				 * tFileInputDelimited_21:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_12_FILEPATH"))/**
				 * 
				 * End field tFileInputDelimited_21:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_21 = null;

				try {

					String[] rowtFileInputDelimited_21 = null;
					int currentLinetFileInputDelimited_21 = 0;
					int outputLinetFileInputDelimited_21 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_21 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_21 = 0;
							if (footer_value_tFileInputDelimited_21 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_21 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_21,
									fieldSeparator_tFileInputDelimited_21[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_21 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_21)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_21[0]);
						}

						csvReadertFileInputDelimited_21
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_21[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_21[0] != '\r'))
							csvReadertFileInputDelimited_21.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_21[0]);

						csvReadertFileInputDelimited_21.setQuoteChar('"');

						csvReadertFileInputDelimited_21
								.setEscapeChar(csvReadertFileInputDelimited_21
										.getQuoteChar());

						if (footer_tFileInputDelimited_21 > 0) {
							for (totalLinetFileInputDelimited_21 = 0; totalLinetFileInputDelimited_21 < 0; totalLinetFileInputDelimited_21++) {
								csvReadertFileInputDelimited_21.readNext();
							}
							csvReadertFileInputDelimited_21
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_21.readNext()) {

								rowtFileInputDelimited_21 = csvReadertFileInputDelimited_21
										.getValues();
								if (!(rowtFileInputDelimited_21.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_21[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_21++;

								}

							}
							int lastLineTemptFileInputDelimited_21 = totalLinetFileInputDelimited_21
									- footer_tFileInputDelimited_21 < 0 ? 0
									: totalLinetFileInputDelimited_21
											- footer_tFileInputDelimited_21;
							if (lastLinetFileInputDelimited_21 > 0) {
								lastLinetFileInputDelimited_21 = lastLinetFileInputDelimited_21 < lastLineTemptFileInputDelimited_21 ? lastLinetFileInputDelimited_21
										: lastLineTemptFileInputDelimited_21;
							} else {
								lastLinetFileInputDelimited_21 = lastLineTemptFileInputDelimited_21;
							}

							csvReadertFileInputDelimited_21.close();
							if (filename_tFileInputDelimited_21 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_21 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_21,
										fieldSeparator_tFileInputDelimited_21[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_21 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_21)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_21[0]);
							}
							csvReadertFileInputDelimited_21
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_21[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_21[0] != '\r'))
								csvReadertFileInputDelimited_21
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_21[0]);

							csvReadertFileInputDelimited_21.setQuoteChar('"');

							csvReadertFileInputDelimited_21
									.setEscapeChar(csvReadertFileInputDelimited_21
											.getQuoteChar());

						}

						if (limittFileInputDelimited_21 != 0) {
							for (currentLinetFileInputDelimited_21 = 0; currentLinetFileInputDelimited_21 < 0; currentLinetFileInputDelimited_21++) {
								csvReadertFileInputDelimited_21.readNext();
							}
						}
						csvReadertFileInputDelimited_21
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_21 != 0
							&& csvReadertFileInputDelimited_21 != null
							&& csvReadertFileInputDelimited_21.readNext()) {

						rowtFileInputDelimited_21 = csvReadertFileInputDelimited_21
								.getValues();

						if (rowtFileInputDelimited_21.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_21[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_21++;

						if (lastLinetFileInputDelimited_21 > -1
								&& currentLinetFileInputDelimited_21 > lastLinetFileInputDelimited_21) {
							break;
						}
						outputLinetFileInputDelimited_21++;
						if (limittFileInputDelimited_21 > 0
								&& outputLinetFileInputDelimited_21 > limittFileInputDelimited_21) {
							break;
						}

						row33 = null;

						row33 = null;

						boolean whetherReject_tFileInputDelimited_21 = false;
						row33 = new row33Struct();
						try {

							char fieldSeparator_tFileInputDelimited_21_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_21_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_21.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_21[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row33.ENCOUNTER_NUM = null;

								row33.PATIENT_NUM = null;

								row33.CONCEPT_CD = null;

								row33.PROVIDER_ID = null;

								row33.START_DATE = null;

								row33.MODIFIER_CD = null;

								row33.INSTANCE_NUM = null;

								row33.VALTYPE_CD = null;

								row33.TVAL_CHAR = null;

								row33.NVAL_NUM = null;

								row33.VALUEFLAG_CD = null;

								row33.QUANTITY_NUM = null;

								row33.UNITS_CD = null;

								row33.END_DATE = null;

								row33.LOCATION_CD = null;

								row33.OBSERVATION_BLOB = null;

								row33.CONFIDENCE_NUM = null;

								row33.UPDATE_DATE = null;

								row33.DOWNLOAD_DATE = null;

								row33.IMPORT_DATE = null;

								row33.SOURCESYSTEM_CD = null;

								row33.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_21 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_21 = 0;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									if (rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21]
											.length() > 0) {

										row33.ENCOUNTER_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21]);

									} else {
										row33.ENCOUNTER_NUM = null;
									}

								} else {
									row33.ENCOUNTER_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 1;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									if (rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21]
											.length() > 0) {

										row33.PATIENT_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21]);

									} else {
										row33.PATIENT_NUM = null;
									}

								} else {
									row33.PATIENT_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 2;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									row33.CONCEPT_CD = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									row33.CONCEPT_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 3;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									row33.PROVIDER_ID = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									row33.PROVIDER_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 4;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									row33.START_DATE = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									row33.START_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 5;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									row33.MODIFIER_CD = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									row33.MODIFIER_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 6;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									row33.INSTANCE_NUM = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									row33.INSTANCE_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 7;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									row33.VALTYPE_CD = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									row33.VALTYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 8;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									row33.TVAL_CHAR = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									row33.TVAL_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 9;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									if (rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21]
											.length() > 0) {

										row33.NVAL_NUM = ParserUtils
												.parseTo_Float(rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21]);

									} else {
										row33.NVAL_NUM = null;
									}

								} else {
									row33.NVAL_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 10;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									row33.VALUEFLAG_CD = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									row33.VALUEFLAG_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 11;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									row33.QUANTITY_NUM = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									row33.QUANTITY_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 12;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									row33.UNITS_CD = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									row33.UNITS_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 13;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									row33.END_DATE = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									row33.END_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 14;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									row33.LOCATION_CD = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									row33.LOCATION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 15;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									row33.OBSERVATION_BLOB = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									row33.OBSERVATION_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 16;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									row33.CONFIDENCE_NUM = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									row33.CONFIDENCE_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 17;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									if (rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21]
											.length() > 0) {

										row33.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21],
														"yyyy-MM-dd");

									} else {
										row33.UPDATE_DATE = null;
									}

								} else {
									row33.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 18;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									if (rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21]
											.length() > 0) {

										row33.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21],
														"yyyy-MM-dd");

									} else {
										row33.DOWNLOAD_DATE = null;
									}

								} else {
									row33.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 19;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									if (rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21]
											.length() > 0) {

										row33.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21],
														"yyyy-MM-dd");

									} else {
										row33.IMPORT_DATE = null;
									}

								} else {
									row33.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 20;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									row33.SOURCESYSTEM_CD = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									row33.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_21 = 21;

								if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

									row33.UPLOAD_ID = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

								} else {
									row33.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_21 = true;

							System.err.println(e.getMessage());
							row33 = null;

						}

						/**
						 * [tFileInputDelimited_21 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_21 main ] start
						 */

						currentComponent = "tFileInputDelimited_21";

						tos_count_tFileInputDelimited_21++;

						/**
						 * [tFileInputDelimited_21 main ] stop
						 */
						// Start of branch "row33"
						if (row33 != null) {

							/**
							 * [tAdvancedHash_row33 main ] start
							 */

							currentComponent = "tAdvancedHash_row33";

							row33Struct row33_HashRow = tHash_Lookup_row33
									.getNextFreeRow();

							row33_HashRow.ENCOUNTER_NUM = row33.ENCOUNTER_NUM;

							row33_HashRow.PATIENT_NUM = row33.PATIENT_NUM;

							row33_HashRow.CONCEPT_CD = row33.CONCEPT_CD;

							row33_HashRow.PROVIDER_ID = row33.PROVIDER_ID;

							row33_HashRow.START_DATE = row33.START_DATE;

							row33_HashRow.MODIFIER_CD = row33.MODIFIER_CD;

							row33_HashRow.INSTANCE_NUM = row33.INSTANCE_NUM;

							row33_HashRow.VALTYPE_CD = row33.VALTYPE_CD;

							row33_HashRow.TVAL_CHAR = row33.TVAL_CHAR;

							row33_HashRow.NVAL_NUM = row33.NVAL_NUM;

							row33_HashRow.VALUEFLAG_CD = row33.VALUEFLAG_CD;

							row33_HashRow.QUANTITY_NUM = row33.QUANTITY_NUM;

							row33_HashRow.UNITS_CD = row33.UNITS_CD;

							row33_HashRow.END_DATE = row33.END_DATE;

							row33_HashRow.LOCATION_CD = row33.LOCATION_CD;

							row33_HashRow.OBSERVATION_BLOB = row33.OBSERVATION_BLOB;

							row33_HashRow.CONFIDENCE_NUM = row33.CONFIDENCE_NUM;

							row33_HashRow.UPDATE_DATE = row33.UPDATE_DATE;

							row33_HashRow.DOWNLOAD_DATE = row33.DOWNLOAD_DATE;

							row33_HashRow.IMPORT_DATE = row33.IMPORT_DATE;

							row33_HashRow.SOURCESYSTEM_CD = row33.SOURCESYSTEM_CD;

							row33_HashRow.UPLOAD_ID = row33.UPLOAD_ID;

							tHash_Lookup_row33.put(row33_HashRow);

							tos_count_tAdvancedHash_row33++;

							/**
							 * [tAdvancedHash_row33 main ] stop
							 */

						} // End of branch "row33"

						/**
						 * [tFileInputDelimited_21 end ] start
						 */

						currentComponent = "tFileInputDelimited_21";

						nb_line_tFileInputDelimited_21++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_21 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_21 != null) {
							csvReadertFileInputDelimited_21.close();
						}
					}
					if (csvReadertFileInputDelimited_21 != null) {
						globalMap.put("tFileInputDelimited_21_NB_LINE",
								nb_line_tFileInputDelimited_21);
					}

				}

				ok_Hash.put("tFileInputDelimited_21", true);
				end_Hash.put("tFileInputDelimited_21",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_21 end ] stop
				 */

				/**
				 * [tAdvancedHash_row33 end ] start
				 */

				currentComponent = "tAdvancedHash_row33";

				tHash_Lookup_row33.endPut();

				ok_Hash.put("tAdvancedHash_row33", true);
				end_Hash.put("tAdvancedHash_row33", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row33 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_21 finally ] start
				 */

				currentComponent = "tFileInputDelimited_21";

				/**
				 * [tFileInputDelimited_21 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row33 finally ] start
				 */

				currentComponent = "tAdvancedHash_row33";

				/**
				 * [tAdvancedHash_row33 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_21_SUBPROCESS_STATE", 1);
	}

	public static class row30Struct implements
			routines.system.IPersistableComparableLookupRow<row30Struct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String MODIFIER_PATH;

		public String getMODIFIER_PATH() {
			return this.MODIFIER_PATH;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String MODIFIER_BLOB;

		public String getMODIFIER_BLOB() {
			return this.MODIFIER_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String UPLOAD_ID;

		public String getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.MODIFIER_PATH == null) ? 0
								: this.MODIFIER_PATH.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row30Struct other = (row30Struct) obj;

			if (this.MODIFIER_PATH == null) {
				if (other.MODIFIER_PATH != null)
					return false;

			} else if (!this.MODIFIER_PATH.equals(other.MODIFIER_PATH))

				return false;

			return true;
		}

		public void copyDataTo(row30Struct other) {

			other.MODIFIER_PATH = this.MODIFIER_PATH;
			other.MODIFIER_CD = this.MODIFIER_CD;
			other.NAME_CHAR = this.NAME_CHAR;
			other.MODIFIER_BLOB = this.MODIFIER_BLOB;
			other.UPDATE_DATE = this.UPDATE_DATE;
			other.DOWNLOAD_DATE = this.DOWNLOAD_DATE;
			other.IMPORT_DATE = this.IMPORT_DATE;
			other.SOURCESYSTEM_CD = this.SOURCESYSTEM_CD;
			other.UPLOAD_ID = this.UPLOAD_ID;

		}

		public void copyKeysDataTo(row30Struct other) {

			other.MODIFIER_PATH = this.MODIFIER_PATH;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTCommand_TransformationToTarget) {

				try {

					int length = 0;

					this.MODIFIER_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MODIFIER_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.MODIFIER_CD = readString(dis, ois);

				this.NAME_CHAR = readString(dis, ois);

				this.MODIFIER_BLOB = readString(dis, ois);

				this.UPDATE_DATE = readDate(dis, ois);

				this.DOWNLOAD_DATE = readDate(dis, ois);

				this.IMPORT_DATE = readDate(dis, ois);

				this.SOURCESYSTEM_CD = readString(dis, ois);

				this.UPLOAD_ID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.MODIFIER_CD, dos, oos);

				writeString(this.NAME_CHAR, dos, oos);

				writeString(this.MODIFIER_BLOB, dos, oos);

				writeDate(this.UPDATE_DATE, dos, oos);

				writeDate(this.DOWNLOAD_DATE, dos, oos);

				writeDate(this.IMPORT_DATE, dos, oos);

				writeString(this.SOURCESYSTEM_CD, dos, oos);

				writeString(this.UPLOAD_ID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MODIFIER_PATH=" + MODIFIER_PATH);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",MODIFIER_BLOB=" + MODIFIER_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + UPLOAD_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row30Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.MODIFIER_PATH,
					other.MODIFIER_PATH);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_25Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_25_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row30Struct row30 = new row30Struct();

				/**
				 * [tAdvancedHash_row30 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row30", false);
				start_Hash.put("tAdvancedHash_row30",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row30";

				int tos_count_tAdvancedHash_row30 = 0;

				// connection name:row30
				// source node:tFileInputDelimited_25 -
				// inputs:(after_tFileInputDelimited_17) outputs:(row30,row30) |
				// target node:tAdvancedHash_row30 - inputs:(row30) outputs:()
				// linked node: tMap_14 - inputs:(copyOfout1,row33,row30)
				// outputs:(copyOfasddd)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row30 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row30Struct> tHash_Lookup_row30 = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row30Struct>(
						matchingModeEnum_row30,
						context.folderMain + context.folderOutput + "/"
								+ jobName + "_tMapData_" + pid
								+ "_Lookup_row30_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public row30Struct createRowInstance() {
								return new row30Struct();
							}
						}

						, 200000

				);

				tHash_Lookup_row30.initPut();

				globalMap.put("tHash_Lookup_row30", tHash_Lookup_row30);

				/**
				 * [tAdvancedHash_row30 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_25 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_25", false);
				start_Hash.put("tFileInputDelimited_25",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_25";

				int tos_count_tFileInputDelimited_25 = 0;

				int nb_line_tFileInputDelimited_25 = 0;
				int footer_tFileInputDelimited_25 = 0;
				int totalLinetFileInputDelimited_25 = 0;
				int limittFileInputDelimited_25 = -1;
				int lastLinetFileInputDelimited_25 = -1;

				char fieldSeparator_tFileInputDelimited_25[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_25 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_25[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_25 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_25 = /**
				 * Start field
				 * tFileInputDelimited_25:FILENAME
				 */
				((String) globalMap.get("tCreateTemporaryFile_10_FILEPATH"))/**
				 * 
				 * End field tFileInputDelimited_25:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_25 = null;

				try {

					String[] rowtFileInputDelimited_25 = null;
					int currentLinetFileInputDelimited_25 = 0;
					int outputLinetFileInputDelimited_25 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_25 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_25 = 0;
							if (footer_value_tFileInputDelimited_25 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_25 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_25,
									fieldSeparator_tFileInputDelimited_25[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_25 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_25)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_25[0]);
						}

						csvReadertFileInputDelimited_25
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_25[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_25[0] != '\r'))
							csvReadertFileInputDelimited_25.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_25[0]);

						csvReadertFileInputDelimited_25.setQuoteChar('"');

						csvReadertFileInputDelimited_25
								.setEscapeChar(csvReadertFileInputDelimited_25
										.getQuoteChar());

						if (footer_tFileInputDelimited_25 > 0) {
							for (totalLinetFileInputDelimited_25 = 0; totalLinetFileInputDelimited_25 < 1; totalLinetFileInputDelimited_25++) {
								csvReadertFileInputDelimited_25.readNext();
							}
							csvReadertFileInputDelimited_25
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_25.readNext()) {

								rowtFileInputDelimited_25 = csvReadertFileInputDelimited_25
										.getValues();
								if (!(rowtFileInputDelimited_25.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_25[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_25++;

								}

							}
							int lastLineTemptFileInputDelimited_25 = totalLinetFileInputDelimited_25
									- footer_tFileInputDelimited_25 < 0 ? 0
									: totalLinetFileInputDelimited_25
											- footer_tFileInputDelimited_25;
							if (lastLinetFileInputDelimited_25 > 0) {
								lastLinetFileInputDelimited_25 = lastLinetFileInputDelimited_25 < lastLineTemptFileInputDelimited_25 ? lastLinetFileInputDelimited_25
										: lastLineTemptFileInputDelimited_25;
							} else {
								lastLinetFileInputDelimited_25 = lastLineTemptFileInputDelimited_25;
							}

							csvReadertFileInputDelimited_25.close();
							if (filename_tFileInputDelimited_25 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_25 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_25,
										fieldSeparator_tFileInputDelimited_25[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_25 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_25)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_25[0]);
							}
							csvReadertFileInputDelimited_25
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_25[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_25[0] != '\r'))
								csvReadertFileInputDelimited_25
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_25[0]);

							csvReadertFileInputDelimited_25.setQuoteChar('"');

							csvReadertFileInputDelimited_25
									.setEscapeChar(csvReadertFileInputDelimited_25
											.getQuoteChar());

						}

						if (limittFileInputDelimited_25 != 0) {
							for (currentLinetFileInputDelimited_25 = 0; currentLinetFileInputDelimited_25 < 1; currentLinetFileInputDelimited_25++) {
								csvReadertFileInputDelimited_25.readNext();
							}
						}
						csvReadertFileInputDelimited_25
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_25 != 0
							&& csvReadertFileInputDelimited_25 != null
							&& csvReadertFileInputDelimited_25.readNext()) {

						rowtFileInputDelimited_25 = csvReadertFileInputDelimited_25
								.getValues();

						if (rowtFileInputDelimited_25.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_25[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_25++;

						if (lastLinetFileInputDelimited_25 > -1
								&& currentLinetFileInputDelimited_25 > lastLinetFileInputDelimited_25) {
							break;
						}
						outputLinetFileInputDelimited_25++;
						if (limittFileInputDelimited_25 > 0
								&& outputLinetFileInputDelimited_25 > limittFileInputDelimited_25) {
							break;
						}

						row30 = null;

						row30 = null;

						boolean whetherReject_tFileInputDelimited_25 = false;
						row30 = new row30Struct();
						try {

							char fieldSeparator_tFileInputDelimited_25_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_25_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_25.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_25[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row30.MODIFIER_PATH = null;

								row30.MODIFIER_CD = null;

								row30.NAME_CHAR = null;

								row30.MODIFIER_BLOB = null;

								row30.UPDATE_DATE = null;

								row30.DOWNLOAD_DATE = null;

								row30.IMPORT_DATE = null;

								row30.SOURCESYSTEM_CD = null;

								row30.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_25 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_25 = 0;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									row30.MODIFIER_PATH = rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25];

								} else {
									row30.MODIFIER_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 1;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									row30.MODIFIER_CD = rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25];

								} else {
									row30.MODIFIER_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 2;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									row30.NAME_CHAR = rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25];

								} else {
									row30.NAME_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 3;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									row30.MODIFIER_BLOB = rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25];

								} else {
									row30.MODIFIER_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 4;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									if (rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25]
											.length() > 0) {

										row30.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25],
														"dd-MM-yyyy");

									} else {
										row30.UPDATE_DATE = null;
									}

								} else {
									row30.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 5;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									if (rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25]
											.length() > 0) {

										row30.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25],
														"dd-MM-yyyy");

									} else {
										row30.DOWNLOAD_DATE = null;
									}

								} else {
									row30.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 6;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									if (rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25]
											.length() > 0) {

										row30.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25],
														"dd-MM-yyyy");

									} else {
										row30.IMPORT_DATE = null;
									}

								} else {
									row30.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 7;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									row30.SOURCESYSTEM_CD = rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25];

								} else {
									row30.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_25 = 8;

								if (columnIndexWithD_tFileInputDelimited_25 < rowtFileInputDelimited_25.length) {

									row30.UPLOAD_ID = rowtFileInputDelimited_25[columnIndexWithD_tFileInputDelimited_25];

								} else {
									row30.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_25 = true;

							System.err.println(e.getMessage());
							row30 = null;

						}

						/**
						 * [tFileInputDelimited_25 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_25 main ] start
						 */

						currentComponent = "tFileInputDelimited_25";

						tos_count_tFileInputDelimited_25++;

						/**
						 * [tFileInputDelimited_25 main ] stop
						 */
						// Start of branch "row30"
						if (row30 != null) {

							/**
							 * [tAdvancedHash_row30 main ] start
							 */

							currentComponent = "tAdvancedHash_row30";

							row30Struct row30_HashRow = tHash_Lookup_row30
									.getNextFreeRow();

							row30_HashRow.MODIFIER_PATH = row30.MODIFIER_PATH;

							row30_HashRow.MODIFIER_CD = row30.MODIFIER_CD;

							row30_HashRow.NAME_CHAR = row30.NAME_CHAR;

							row30_HashRow.MODIFIER_BLOB = row30.MODIFIER_BLOB;

							row30_HashRow.UPDATE_DATE = row30.UPDATE_DATE;

							row30_HashRow.DOWNLOAD_DATE = row30.DOWNLOAD_DATE;

							row30_HashRow.IMPORT_DATE = row30.IMPORT_DATE;

							row30_HashRow.SOURCESYSTEM_CD = row30.SOURCESYSTEM_CD;

							row30_HashRow.UPLOAD_ID = row30.UPLOAD_ID;

							tHash_Lookup_row30.put(row30_HashRow);

							tos_count_tAdvancedHash_row30++;

							/**
							 * [tAdvancedHash_row30 main ] stop
							 */

						} // End of branch "row30"

						/**
						 * [tFileInputDelimited_25 end ] start
						 */

						currentComponent = "tFileInputDelimited_25";

						nb_line_tFileInputDelimited_25++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_25 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_25 != null) {
							csvReadertFileInputDelimited_25.close();
						}
					}
					if (csvReadertFileInputDelimited_25 != null) {
						globalMap.put("tFileInputDelimited_25_NB_LINE",
								nb_line_tFileInputDelimited_25);
					}

				}

				ok_Hash.put("tFileInputDelimited_25", true);
				end_Hash.put("tFileInputDelimited_25",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_25 end ] stop
				 */

				/**
				 * [tAdvancedHash_row30 end ] start
				 */

				currentComponent = "tAdvancedHash_row30";

				tHash_Lookup_row30.endPut();

				ok_Hash.put("tAdvancedHash_row30", true);
				end_Hash.put("tAdvancedHash_row30", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row30 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_25 finally ] start
				 */

				currentComponent = "tFileInputDelimited_25";

				/**
				 * [tFileInputDelimited_25 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row30 finally ] start
				 */

				currentComponent = "tAdvancedHash_row30";

				/**
				 * [tAdvancedHash_row30 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_25_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final TOSIDRTCommand_TransformationToTarget TOSIDRTCommand_TransformationToTargetClass = new TOSIDRTCommand_TransformationToTarget();

		int exitCode = TOSIDRTCommand_TransformationToTargetClass
				.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = TOSIDRTCommand_TransformationToTarget.class
					.getClassLoader().getResourceAsStream(
							"i2b2_postgres2/tosidrtcommand_transformationtotarget_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.folderOutput = (String) context.getProperty("folderOutput");
			context.folderMain = (String) context.getProperty("folderMain");
			context.DB_StagingI2B2_sqlclassname = (String) context
					.getProperty("DB_StagingI2B2_sqlclassname");
			try {
				context.TargetID = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("TargetID"));
			} catch (NumberFormatException e) {
				context.TargetID = null;
			}
			context.sql = (String) context.getProperty("sql");
			context.DB_TargetI2B2_sqlclassname = (String) context
					.getProperty("DB_TargetI2B2_sqlclassname");
			context.currentQuery = (String) context.getProperty("currentQuery");
			try {
				context.truncateProject = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("truncateProject"));
			} catch (NumberFormatException e) {
				context.truncateProject = null;
			}
			try {
				context.truncateQueries = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("truncateQueries"));
			} catch (NumberFormatException e) {
				context.truncateQueries = null;
			}
			context.DB_StagingI2B2_DatabaseType = (String) context
					.getProperty("DB_StagingI2B2_DatabaseType");
			context.DB_StagingI2B2_DriverClass = (String) context
					.getProperty("DB_StagingI2B2_DriverClass");
			context.DB_StagingI2B2_Host = (String) context
					.getProperty("DB_StagingI2B2_Host");
			context.DB_StagingI2B2_Instance = (String) context
					.getProperty("DB_StagingI2B2_Instance");
			context.DB_StagingI2B2_jdbcurl = (String) context
					.getProperty("DB_StagingI2B2_jdbcurl");
			String pwd_DB_StagingI2B2_Password_value = context
					.getProperty("DB_StagingI2B2_Password");
			context.DB_StagingI2B2_Password = null;
			if (pwd_DB_StagingI2B2_Password_value != null) {
				if (context_param.containsKey("DB_StagingI2B2_Password")) {// no
																			// need
																			// to
																			// decrypt
																			// if
																			// it
																			// come
																			// from
																			// program
																			// argument
																			// or
																			// parent
																			// job
																			// runtime
					context.DB_StagingI2B2_Password = pwd_DB_StagingI2B2_Password_value;
				} else if (!pwd_DB_StagingI2B2_Password_value.isEmpty()) {
					try {
						context.DB_StagingI2B2_Password = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_DB_StagingI2B2_Password_value);
						context.put("DB_StagingI2B2_Password",
								context.DB_StagingI2B2_Password);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.DB_StagingI2B2_Port = (String) context
					.getProperty("DB_StagingI2B2_Port");
			context.DB_StagingI2B2_Schema = (String) context
					.getProperty("DB_StagingI2B2_Schema");
			context.DB_StagingI2B2_Username = (String) context
					.getProperty("DB_StagingI2B2_Username");
			context.DB_StagingI2B2_WHType = (String) context
					.getProperty("DB_StagingI2B2_WHType");
			context.DB_TargetI2B2_DatabaseType = (String) context
					.getProperty("DB_TargetI2B2_DatabaseType");
			context.DB_TargetI2B2_DriverClass = (String) context
					.getProperty("DB_TargetI2B2_DriverClass");
			context.DB_TargetI2B2_Host = (String) context
					.getProperty("DB_TargetI2B2_Host");
			context.DB_TargetI2B2_Instance = (String) context
					.getProperty("DB_TargetI2B2_Instance");
			context.DB_TargetI2B2_jdbcurl = (String) context
					.getProperty("DB_TargetI2B2_jdbcurl");
			String pwd_DB_TargetI2B2_Password_value = context
					.getProperty("DB_TargetI2B2_Password");
			context.DB_TargetI2B2_Password = null;
			if (pwd_DB_TargetI2B2_Password_value != null) {
				if (context_param.containsKey("DB_TargetI2B2_Password")) {// no
																			// need
																			// to
																			// decrypt
																			// if
																			// it
																			// come
																			// from
																			// program
																			// argument
																			// or
																			// parent
																			// job
																			// runtime
					context.DB_TargetI2B2_Password = pwd_DB_TargetI2B2_Password_value;
				} else if (!pwd_DB_TargetI2B2_Password_value.isEmpty()) {
					try {
						context.DB_TargetI2B2_Password = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_DB_TargetI2B2_Password_value);
						context.put("DB_TargetI2B2_Password",
								context.DB_TargetI2B2_Password);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.DB_TargetI2B2_Port = (String) context
					.getProperty("DB_TargetI2B2_Port");
			context.DB_TargetI2B2_Schema = (String) context
					.getProperty("DB_TargetI2B2_Schema");
			context.DB_TargetI2B2_Username = (String) context
					.getProperty("DB_TargetI2B2_Username");
			context.DB_TargetI2B2_WHType = (String) context
					.getProperty("DB_TargetI2B2_WHType");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("folderOutput")) {
				context.folderOutput = (String) parentContextMap
						.get("folderOutput");
			}
			if (parentContextMap.containsKey("folderMain")) {
				context.folderMain = (String) parentContextMap
						.get("folderMain");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_sqlclassname")) {
				context.DB_StagingI2B2_sqlclassname = (String) parentContextMap
						.get("DB_StagingI2B2_sqlclassname");
			}
			if (parentContextMap.containsKey("TargetID")) {
				context.TargetID = (Integer) parentContextMap.get("TargetID");
			}
			if (parentContextMap.containsKey("sql")) {
				context.sql = (String) parentContextMap.get("sql");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_sqlclassname")) {
				context.DB_TargetI2B2_sqlclassname = (String) parentContextMap
						.get("DB_TargetI2B2_sqlclassname");
			}
			if (parentContextMap.containsKey("currentQuery")) {
				context.currentQuery = (String) parentContextMap
						.get("currentQuery");
			}
			if (parentContextMap.containsKey("truncateProject")) {
				context.truncateProject = (Boolean) parentContextMap
						.get("truncateProject");
			}
			if (parentContextMap.containsKey("truncateQueries")) {
				context.truncateQueries = (Boolean) parentContextMap
						.get("truncateQueries");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_DatabaseType")) {
				context.DB_StagingI2B2_DatabaseType = (String) parentContextMap
						.get("DB_StagingI2B2_DatabaseType");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_DriverClass")) {
				context.DB_StagingI2B2_DriverClass = (String) parentContextMap
						.get("DB_StagingI2B2_DriverClass");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Host")) {
				context.DB_StagingI2B2_Host = (String) parentContextMap
						.get("DB_StagingI2B2_Host");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Instance")) {
				context.DB_StagingI2B2_Instance = (String) parentContextMap
						.get("DB_StagingI2B2_Instance");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_jdbcurl")) {
				context.DB_StagingI2B2_jdbcurl = (String) parentContextMap
						.get("DB_StagingI2B2_jdbcurl");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Password")) {
				context.DB_StagingI2B2_Password = (java.lang.String) parentContextMap
						.get("DB_StagingI2B2_Password");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Port")) {
				context.DB_StagingI2B2_Port = (String) parentContextMap
						.get("DB_StagingI2B2_Port");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Schema")) {
				context.DB_StagingI2B2_Schema = (String) parentContextMap
						.get("DB_StagingI2B2_Schema");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Username")) {
				context.DB_StagingI2B2_Username = (String) parentContextMap
						.get("DB_StagingI2B2_Username");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_WHType")) {
				context.DB_StagingI2B2_WHType = (String) parentContextMap
						.get("DB_StagingI2B2_WHType");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_DatabaseType")) {
				context.DB_TargetI2B2_DatabaseType = (String) parentContextMap
						.get("DB_TargetI2B2_DatabaseType");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_DriverClass")) {
				context.DB_TargetI2B2_DriverClass = (String) parentContextMap
						.get("DB_TargetI2B2_DriverClass");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Host")) {
				context.DB_TargetI2B2_Host = (String) parentContextMap
						.get("DB_TargetI2B2_Host");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Instance")) {
				context.DB_TargetI2B2_Instance = (String) parentContextMap
						.get("DB_TargetI2B2_Instance");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_jdbcurl")) {
				context.DB_TargetI2B2_jdbcurl = (String) parentContextMap
						.get("DB_TargetI2B2_jdbcurl");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Password")) {
				context.DB_TargetI2B2_Password = (java.lang.String) parentContextMap
						.get("DB_TargetI2B2_Password");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Port")) {
				context.DB_TargetI2B2_Port = (String) parentContextMap
						.get("DB_TargetI2B2_Port");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Schema")) {
				context.DB_TargetI2B2_Schema = (String) parentContextMap
						.get("DB_TargetI2B2_Schema");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Username")) {
				context.DB_TargetI2B2_Username = (String) parentContextMap
						.get("DB_TargetI2B2_Username");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_WHType")) {
				context.DB_TargetI2B2_WHType = (String) parentContextMap
						.get("DB_TargetI2B2_WHType");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("DB_StagingI2B2_Password");
		parametersToEncrypt.add("DB_TargetI2B2_Password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tCreateTemporaryFile_14Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tCreateTemporaryFile_14) {
			globalMap.put("tCreateTemporaryFile_14_SUBPROCESS_STATE", -1);

			e_tCreateTemporaryFile_14.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : TOSIDRTCommand_TransformationToTarget");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();
	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tJDBCConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tJDBCConnection_1",
				globalMap.get("conn_tJDBCConnection_1"));
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 2357650 characters generated by Talend Open Studio for Data Integration on
 * the March 10, 2015 4:06:08 PM CET
 ************************************************************************************************/
