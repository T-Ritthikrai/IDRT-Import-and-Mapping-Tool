// ============================================================================
//
// Copyright (c) 2006-2014, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package i2b2_postgres2.tosidrtconnector_0_4;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tLibraryLoad_1
import de.umg.mi.idrt.ioe.tos.TOSHandler;

//the import part of tLibraryLoad_5
//import java.util.List;

//the import part of tJava_6
//import java.util.List;
//import routines.TOSHandler2;

//the import part of tJava_17
//import java.util.List;

//the import part of tJava_2
//import java.util.List;

//the import part of tJava_18
//import java.util.List;

//the import part of tJavaFlex_1
import java.io.BufferedReader;
import java.io.IOException;
import java.io.Reader;
import java.io.StringWriter;
import java.sql.SQLException;
import java.sql.Clob;

//the import part of tJava_3
//import java.util.List;

//the import part of tJava_23
//import java.util.List;

//the import part of tJava_21
//import java.util.List;

//the import part of tJava_22
//import java.util.List;

//the import part of tJava_7
//import java.util.List;

//the import part of tJava_12
//import java.util.List;

//the import part of tJava_5

//the import part of tJava_20
//import java.util.List;

//the import part of tJava_19
//import java.util.List;

//the import part of tJavaFlex_7

//the import part of tJava_16

//the import part of tJava_8
//import java.util.List;

//the import part of tJava_1
//import java.util.List;

//the import part of tJava_13
//import java.util.List;

//the import part of tJava_14
//import java.util.List;

//the import part of tJava_15
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: TOSIDRTConnector Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.6.1.20141207_1530
 * @status DEV
 */
public class TOSIDRTConnector implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (Var1 != null) {

				this.setProperty("Var1", Var1.toString());

			}

			if (Var2 != null) {

				this.setProperty("Var2", Var2.toString());

			}

			if (Var3 != null) {

				this.setProperty("Var3", Var3.toString());

			}

			if (currentQuery != null) {

				this.setProperty("currentQuery", currentQuery.toString());

			}

			if (IndexDrop != null) {

				this.setProperty("IndexDrop", IndexDrop.toString());

			}

			if (IndexStop != null) {

				this.setProperty("IndexStop", IndexStop.toString());

			}

			if (truncateProject != null) {

				this.setProperty("truncateProject", truncateProject.toString());

			}

			if (truncateQueries != null) {

				this.setProperty("truncateQueries", truncateQueries.toString());

			}

			if (DB_StagingI2B2_DatabaseType != null) {

				this.setProperty("DB_StagingI2B2_DatabaseType",
						DB_StagingI2B2_DatabaseType.toString());

			}

			if (DB_StagingI2B2_DriverClass != null) {

				this.setProperty("DB_StagingI2B2_DriverClass",
						DB_StagingI2B2_DriverClass.toString());

			}

			if (DB_StagingI2B2_Host != null) {

				this.setProperty("DB_StagingI2B2_Host",
						DB_StagingI2B2_Host.toString());

			}

			if (DB_StagingI2B2_Instance != null) {

				this.setProperty("DB_StagingI2B2_Instance",
						DB_StagingI2B2_Instance.toString());

			}

			if (DB_StagingI2B2_jdbcurl != null) {

				this.setProperty("DB_StagingI2B2_jdbcurl",
						DB_StagingI2B2_jdbcurl.toString());

			}

			if (DB_StagingI2B2_Password != null) {

				this.setProperty("DB_StagingI2B2_Password",
						DB_StagingI2B2_Password.toString());

			}

			if (DB_StagingI2B2_Port != null) {

				this.setProperty("DB_StagingI2B2_Port",
						DB_StagingI2B2_Port.toString());

			}

			if (DB_StagingI2B2_Schema != null) {

				this.setProperty("DB_StagingI2B2_Schema",
						DB_StagingI2B2_Schema.toString());

			}

			if (DB_StagingI2B2_Username != null) {

				this.setProperty("DB_StagingI2B2_Username",
						DB_StagingI2B2_Username.toString());

			}

			if (DB_StagingI2B2_WHType != null) {

				this.setProperty("DB_StagingI2B2_WHType",
						DB_StagingI2B2_WHType.toString());

			}

			if (DB_TargetI2B2_DatabaseType != null) {

				this.setProperty("DB_TargetI2B2_DatabaseType",
						DB_TargetI2B2_DatabaseType.toString());

			}

			if (DB_TargetI2B2_DriverClass != null) {

				this.setProperty("DB_TargetI2B2_DriverClass",
						DB_TargetI2B2_DriverClass.toString());

			}

			if (DB_TargetI2B2_Host != null) {

				this.setProperty("DB_TargetI2B2_Host",
						DB_TargetI2B2_Host.toString());

			}

			if (DB_TargetI2B2_Instance != null) {

				this.setProperty("DB_TargetI2B2_Instance",
						DB_TargetI2B2_Instance.toString());

			}

			if (DB_TargetI2B2_jdbcurl != null) {

				this.setProperty("DB_TargetI2B2_jdbcurl",
						DB_TargetI2B2_jdbcurl.toString());

			}

			if (DB_TargetI2B2_Password != null) {

				this.setProperty("DB_TargetI2B2_Password",
						DB_TargetI2B2_Password.toString());

			}

			if (DB_TargetI2B2_Port != null) {

				this.setProperty("DB_TargetI2B2_Port",
						DB_TargetI2B2_Port.toString());

			}

			if (DB_TargetI2B2_Schema != null) {

				this.setProperty("DB_TargetI2B2_Schema",
						DB_TargetI2B2_Schema.toString());

			}

			if (DB_TargetI2B2_Username != null) {

				this.setProperty("DB_TargetI2B2_Username",
						DB_TargetI2B2_Username.toString());

			}

			if (DB_TargetI2B2_WHType != null) {

				this.setProperty("DB_TargetI2B2_WHType",
						DB_TargetI2B2_WHType.toString());

			}

			if (DataFile != null) {

				this.setProperty("DataFile", DataFile.toString());

			}

			if (ErrorMessage != null) {

				this.setProperty("ErrorMessage", ErrorMessage.toString());

			}

			if (IfValue != null) {

				this.setProperty("IfValue", IfValue.toString());

			}

			if (JDBC_URL != null) {

				this.setProperty("JDBC_URL", JDBC_URL.toString());

			}

			if (JDBCDriver != null) {

				this.setProperty("JDBCDriver", JDBCDriver.toString());

			}

			if (Job != null) {

				this.setProperty("Job", Job.toString());

			}

			if (SQLCommand != null) {

				this.setProperty("SQLCommand", SQLCommand.toString());

			}

			if (SQLCommand2 != null) {

				this.setProperty("SQLCommand2", SQLCommand2.toString());

			}

			if (SQLTable != null) {

				this.setProperty("SQLTable", SQLTable.toString());

			}

			if (SQLTable2 != null) {

				this.setProperty("SQLTable2", SQLTable2.toString());

			}

			if (StatusMessage != null) {

				this.setProperty("StatusMessage", StatusMessage.toString());

			}

			if (TableIEOTarget != null) {

				this.setProperty("TableIEOTarget", TableIEOTarget.toString());

			}

			if (TableIEOTargetOntology != null) {

				this.setProperty("TableIEOTargetOntology",
						TableIEOTargetOntology.toString());

			}

			if (TableIEOTargetProject != null) {

				this.setProperty("TableIEOTargetProject",
						TableIEOTargetProject.toString());

			}

			if (TargetID != null) {

				this.setProperty("TargetID", TargetID.toString());

			}

			if (TOSHandler != null) {

				this.setProperty("TOSHandler", TOSHandler.toString());

			}

		}

		public String Var1;

		public String getVar1() {
			return this.Var1;
		}

		public String Var2;

		public String getVar2() {
			return this.Var2;
		}

		public String Var3;

		public String getVar3() {
			return this.Var3;
		}

		public String currentQuery;

		public String getCurrentQuery() {
			return this.currentQuery;
		}

		public Boolean IndexDrop;

		public Boolean getIndexDrop() {
			return this.IndexDrop;
		}

		public Boolean IndexStop;

		public Boolean getIndexStop() {
			return this.IndexStop;
		}

		public Boolean truncateProject;

		public Boolean getTruncateProject() {
			return this.truncateProject;
		}

		public Boolean truncateQueries;

		public Boolean getTruncateQueries() {
			return this.truncateQueries;
		}

		public String DB_StagingI2B2_DatabaseType;

		public String getDB_StagingI2B2_DatabaseType() {
			return this.DB_StagingI2B2_DatabaseType;
		}

		public String DB_StagingI2B2_DriverClass;

		public String getDB_StagingI2B2_DriverClass() {
			return this.DB_StagingI2B2_DriverClass;
		}

		public String DB_StagingI2B2_Host;

		public String getDB_StagingI2B2_Host() {
			return this.DB_StagingI2B2_Host;
		}

		public String DB_StagingI2B2_Instance;

		public String getDB_StagingI2B2_Instance() {
			return this.DB_StagingI2B2_Instance;
		}

		public String DB_StagingI2B2_jdbcurl;

		public String getDB_StagingI2B2_jdbcurl() {
			return this.DB_StagingI2B2_jdbcurl;
		}

		public java.lang.String DB_StagingI2B2_Password;

		public java.lang.String getDB_StagingI2B2_Password() {
			return this.DB_StagingI2B2_Password;
		}

		public String DB_StagingI2B2_Port;

		public String getDB_StagingI2B2_Port() {
			return this.DB_StagingI2B2_Port;
		}

		public String DB_StagingI2B2_Schema;

		public String getDB_StagingI2B2_Schema() {
			return this.DB_StagingI2B2_Schema;
		}

		public String DB_StagingI2B2_Username;

		public String getDB_StagingI2B2_Username() {
			return this.DB_StagingI2B2_Username;
		}

		public String DB_StagingI2B2_WHType;

		public String getDB_StagingI2B2_WHType() {
			return this.DB_StagingI2B2_WHType;
		}

		public String DB_TargetI2B2_DatabaseType;

		public String getDB_TargetI2B2_DatabaseType() {
			return this.DB_TargetI2B2_DatabaseType;
		}

		public String DB_TargetI2B2_DriverClass;

		public String getDB_TargetI2B2_DriverClass() {
			return this.DB_TargetI2B2_DriverClass;
		}

		public String DB_TargetI2B2_Host;

		public String getDB_TargetI2B2_Host() {
			return this.DB_TargetI2B2_Host;
		}

		public String DB_TargetI2B2_Instance;

		public String getDB_TargetI2B2_Instance() {
			return this.DB_TargetI2B2_Instance;
		}

		public String DB_TargetI2B2_jdbcurl;

		public String getDB_TargetI2B2_jdbcurl() {
			return this.DB_TargetI2B2_jdbcurl;
		}

		public java.lang.String DB_TargetI2B2_Password;

		public java.lang.String getDB_TargetI2B2_Password() {
			return this.DB_TargetI2B2_Password;
		}

		public String DB_TargetI2B2_Port;

		public String getDB_TargetI2B2_Port() {
			return this.DB_TargetI2B2_Port;
		}

		public String DB_TargetI2B2_Schema;

		public String getDB_TargetI2B2_Schema() {
			return this.DB_TargetI2B2_Schema;
		}

		public String DB_TargetI2B2_Username;

		public String getDB_TargetI2B2_Username() {
			return this.DB_TargetI2B2_Username;
		}

		public String DB_TargetI2B2_WHType;

		public String getDB_TargetI2B2_WHType() {
			return this.DB_TargetI2B2_WHType;
		}

		public String DataFile;

		public String getDataFile() {
			return this.DataFile;
		}

		public String ErrorMessage;

		public String getErrorMessage() {
			return this.ErrorMessage;
		}

		public Boolean IfValue;

		public Boolean getIfValue() {
			return this.IfValue;
		}

		public String JDBC_URL;

		public String getJDBC_URL() {
			return this.JDBC_URL;
		}

		public String JDBCDriver;

		public String getJDBCDriver() {
			return this.JDBCDriver;
		}

		public String Job;

		public String getJob() {
			return this.Job;
		}

		public String SQLCommand;

		public String getSQLCommand() {
			return this.SQLCommand;
		}

		public String SQLCommand2;

		public String getSQLCommand2() {
			return this.SQLCommand2;
		}

		public String SQLTable;

		public String getSQLTable() {
			return this.SQLTable;
		}

		public String SQLTable2;

		public String getSQLTable2() {
			return this.SQLTable2;
		}

		public String StatusMessage;

		public String getStatusMessage() {
			return this.StatusMessage;
		}

		public String TableIEOTarget;

		public String getTableIEOTarget() {
			return this.TableIEOTarget;
		}

		public String TableIEOTargetOntology;

		public String getTableIEOTargetOntology() {
			return this.TableIEOTargetOntology;
		}

		public String TableIEOTargetProject;

		public String getTableIEOTargetProject() {
			return this.TableIEOTargetProject;
		}

		public Integer TargetID;

		public Integer getTargetID() {
			return this.TargetID;
		}

		public Object TOSHandler;

		public Object getTOSHandler() {
			return this.TOSHandler;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.4";
	private final String jobName = "TOSIDRTConnector";
	private final String projectName = "I2B2_POSTGRES2";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					TOSIDRTConnector.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(TOSIDRTConnector.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tLibraryLoad_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLibraryLoad_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLibraryLoad_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLibraryLoad_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_18_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaFlex_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_23_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_23_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCConnection_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_21_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_21_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCRow_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_22_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_22_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJDBCOutput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_7Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_20_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_19_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_19_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaFlex_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLibraryLoad_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLibraryLoad_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_6_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_17_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_18_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_23_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCConnection_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_21_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCRow_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_22_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_7_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_12_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_20_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCRow_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_19_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_16_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_8_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_6_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_7_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "ERROR", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

		try {

			errorCode = null;
			tDie_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}
	}

	public void tDie_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_9_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_8_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_13_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_14_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_15_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLibraryLoad_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLibraryLoad_1 begin ] start
				 */

				ok_Hash.put("tLibraryLoad_1", false);
				start_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				currentComponent = "tLibraryLoad_1";

				int tos_count_tLibraryLoad_1 = 0;

				/**
				 * [tLibraryLoad_1 begin ] stop
				 */

				/**
				 * [tLibraryLoad_1 main ] start
				 */

				currentComponent = "tLibraryLoad_1";

				tos_count_tLibraryLoad_1++;

				/**
				 * [tLibraryLoad_1 main ] stop
				 */

				/**
				 * [tLibraryLoad_1 end ] start
				 */

				currentComponent = "tLibraryLoad_1";

				ok_Hash.put("tLibraryLoad_1", true);
				end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				/**
				 * [tLibraryLoad_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tLibraryLoad_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tLibraryLoad_5Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLibraryLoad_1 finally ] start
				 */

				currentComponent = "tLibraryLoad_1";

				/**
				 * [tLibraryLoad_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 1);
	}

	public void tLibraryLoad_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLibraryLoad_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLibraryLoad_5 begin ] start
				 */

				ok_Hash.put("tLibraryLoad_5", false);
				start_Hash.put("tLibraryLoad_5", System.currentTimeMillis());

				currentComponent = "tLibraryLoad_5";

				int tos_count_tLibraryLoad_5 = 0;

				/**
				 * [tLibraryLoad_5 begin ] stop
				 */

				/**
				 * [tLibraryLoad_5 main ] start
				 */

				currentComponent = "tLibraryLoad_5";

				tos_count_tLibraryLoad_5++;

				/**
				 * [tLibraryLoad_5 main ] stop
				 */

				/**
				 * [tLibraryLoad_5 end ] start
				 */

				currentComponent = "tLibraryLoad_5";

				ok_Hash.put("tLibraryLoad_5", true);
				end_Hash.put("tLibraryLoad_5", System.currentTimeMillis());

				/**
				 * [tLibraryLoad_5 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tLibraryLoad_5:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_6Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLibraryLoad_5 finally ] start
				 */

				currentComponent = "tLibraryLoad_5";

				/**
				 * [tLibraryLoad_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLibraryLoad_5_SUBPROCESS_STATE", 1);
	}

	public void tJava_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_6 begin ] start
				 */

				ok_Hash.put("tJava_6", false);
				start_Hash.put("tJava_6", System.currentTimeMillis());

				currentComponent = "tJava_6";

				int tos_count_tJava_6 = 0;

				context.TOSHandler = new TOSHandler();

				/*
				 * context.JDBC_URL = "jdbc:oracle:thin:@" + context.OracleHost
				 * + ":" + context.OraclePort + ":" + context.OracleDB;
				 * context.JDBCDriver = "oracle.jdbc.driver.OracleDriver";
				 */

				/*
				 * System.out.println("TOS: ----initial vars-----");
				 * System.out.println
				 * (" - context.OracleHost: \""+context.OracleHost+"\"");
				 * System.
				 * out.println(" - context.OraclePort: \""+context.OraclePort
				 * +"\"");
				 * System.out.println(" - context.OracleUsername: \""+context
				 * .OracleUsername+"\"");
				 * System.out.println(" - context.OracleSID(DB): \""
				 * +context.OracleDB+"\"");
				 * System.out.println(" - context.OracleSchema: \""
				 * +context.OracleSchema+"\"");
				 * System.out.println(" - context.Job: \""+context.Job+"\"");
				 * System
				 * .out.println(" - context.SQLTable: \""+context.SQLTable+
				 * "\"");
				 * System.out.println(" - context.SQLCommand: \""+context.
				 * SQLCommand+"\"");
				 * System.out.println(" - context.SQLTable2: \""
				 * +context.SQLTable2+"\"");
				 * System.out.println(" - context.SQLCommand2: \""
				 * +context.SQLCommand2+"\"");
				 * System.out.println(" - context.Var1: \""+context.Var1+"\"");
				 * System.out.println(" - context.Var2: \""+context.Var2+"\"");
				 * System.out.println(" - context.Var3: \""+context.Var3+"\"");
				 * System
				 * .out.println(" - context.DataFile: \""+context.DataFile+
				 * "\"");
				 * System.out.println(" - context.TableIEOTargetOntology_test: \""
				 * +context.TableIEOTargetOntology +"\"");
				 * 
				 * System.out.println(" - context.DB_StagingI2B2_jdbcurl: \""+
				 * context.DB_StagingI2B2_jdbcurl+"\"");
				 * System.out.println(" - context.DB_StagingI2B2_sqlclassname: \""
				 * +context.DB_StagingI2B2_sqlclassname+"\"");
				 * System.out.println
				 * (" - context.DB_StagingI2B2_Username: \""+context
				 * .DB_StagingI2B2_Username+"\"");
				 * System.out.println(" - context.DB_StagingI2B2_Password: \""
				 * +context.DB_StagingI2B2_Password+"\"");
				 */

				/*
				 * context.TableIEOTargetOntology =
				 * TOSHandler.TableIEOTargetOntology; context.TableIEOTarget =
				 * TOSHandler.TableIEOTarget; context.TableIEOTargetProject =
				 * TOSHandler.TableIEOTargetProject;
				 */

				/**
				 * [tJava_6 begin ] stop
				 */

				/**
				 * [tJava_6 main ] start
				 */

				currentComponent = "tJava_6";

				tos_count_tJava_6++;

				/**
				 * [tJava_6 main ] stop
				 */

				/**
				 * [tJava_6 end ] start
				 */

				currentComponent = "tJava_6";

				ok_Hash.put("tJava_6", true);
				end_Hash.put("tJava_6", System.currentTimeMillis());

				/**
				 * [tJava_6 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_6:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_17Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_6 finally ] start
				 */

				currentComponent = "tJava_6";

				/**
				 * [tJava_6 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_6_SUBPROCESS_STATE", 1);
	}

	public void tJava_17Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_17_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_17 begin ] start
				 */

				ok_Hash.put("tJava_17", false);
				start_Hash.put("tJava_17", System.currentTimeMillis());

				currentComponent = "tJava_17";

				int tos_count_tJava_17 = 0;

				if (context.DB_StagingI2B2_DatabaseType
						.equalsIgnoreCase("postgres")) {
					context.DB_StagingI2B2_jdbcurl = "jdbc:postgresql://"
							+ context.DB_StagingI2B2_Host + ":"
							+ context.DB_StagingI2B2_Port + "/"
							+ context.DB_StagingI2B2_Instance;
					context.DB_StagingI2B2_DriverClass = "org.postgresql.Driver";
					System.out.println("Staging Postgres Database");
				} else {
					System.out.println("Staging Oracle Database");
					context.DB_StagingI2B2_DriverClass = "oracle.jdbc.driver.OracleDriver";
					context.DB_StagingI2B2_jdbcurl = "jdbc:oracle:thin:@"
							+ context.DB_StagingI2B2_Host + ":"
							+ context.DB_StagingI2B2_Port + ":"
							+ context.DB_StagingI2B2_Instance;
				}

				if (context.DB_TargetI2B2_DatabaseType
						.equalsIgnoreCase("postgres")) {
					context.DB_TargetI2B2_jdbcurl = "jdbc:postgresql://"
							+ context.DB_TargetI2B2_Host + ":"
							+ context.DB_TargetI2B2_Port + "/"
							+ context.DB_TargetI2B2_Instance;
					context.DB_TargetI2B2_DriverClass = "org.postgresql.Driver";
					System.out.println("Target Postgres Database");
				} else {
					System.out.println("Target Oracle Database");
					context.DB_TargetI2B2_DriverClass = "oracle.jdbc.driver.OracleDriver";
					context.DB_TargetI2B2_jdbcurl = "jdbc:oracle:thin:@"
							+ context.DB_TargetI2B2_Host + ":"
							+ context.DB_TargetI2B2_Port + ":"
							+ context.DB_TargetI2B2_Instance;
				}

				/**
				 * [tJava_17 begin ] stop
				 */

				/**
				 * [tJava_17 main ] start
				 */

				currentComponent = "tJava_17";

				tos_count_tJava_17++;

				/**
				 * [tJava_17 main ] stop
				 */

				/**
				 * [tJava_17 end ] start
				 */

				currentComponent = "tJava_17";

				ok_Hash.put("tJava_17", true);
				end_Hash.put("tJava_17", System.currentTimeMillis());

				/**
				 * [tJava_17 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_17:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tRunJob_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_17 finally ] start
				 */

				currentComponent = "tJava_17";

				/**
				 * [tJava_17 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_17_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_4 begin ] start
				 */

				ok_Hash.put("tRunJob_4", false);
				start_Hash.put("tRunJob_4", System.currentTimeMillis());

				currentComponent = "tRunJob_4";

				int tos_count_tRunJob_4 = 0;

				/**
				 * [tRunJob_4 begin ] stop
				 */

				/**
				 * [tRunJob_4 main ] start
				 */

				currentComponent = "tRunJob_4";

				java.util.List<String> paraList_tRunJob_4 = new java.util.ArrayList<String>();

				paraList_tRunJob_4.add("--father_pid=" + pid);

				paraList_tRunJob_4.add("--root_pid=" + rootPid);

				paraList_tRunJob_4.add("--father_node=tRunJob_4");

				paraList_tRunJob_4.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_4.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_4.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_4 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_4 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_4".equals(tRunJobName_tRunJob_4)
						&& childResumePath_tRunJob_4 != null) {
					paraList_tRunJob_4
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_4.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_4");

				java.util.Map<String, Object> parentContextMap_tRunJob_4 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_4 = context
						.propertyNames();
				while (propertyNames_tRunJob_4.hasMoreElements()) {
					String key_tRunJob_4 = (String) propertyNames_tRunJob_4
							.nextElement();
					Object value_tRunJob_4 = (Object) context
							.get(key_tRunJob_4);
					paraList_tRunJob_4.add("--context_param " + key_tRunJob_4
							+ "=" + value_tRunJob_4);
				}

				parentContextMap_tRunJob_4.put("Var1", context.Var1);

				parentContextMap_tRunJob_4.put("Var2", context.Var2);

				parentContextMap_tRunJob_4.put("Var3", context.Var3);

				parentContextMap_tRunJob_4.put("currentQuery",
						context.currentQuery);

				parentContextMap_tRunJob_4.put("IndexDrop", context.IndexDrop);

				parentContextMap_tRunJob_4.put("IndexStop", context.IndexStop);

				parentContextMap_tRunJob_4.put("truncateProject",
						context.truncateProject);

				parentContextMap_tRunJob_4.put("truncateQueries",
						context.truncateQueries);

				parentContextMap_tRunJob_4.put("DB_StagingI2B2_DatabaseType",
						context.DB_StagingI2B2_DatabaseType);

				parentContextMap_tRunJob_4.put("DB_StagingI2B2_DriverClass",
						context.DB_StagingI2B2_DriverClass);

				parentContextMap_tRunJob_4.put("DB_StagingI2B2_Host",
						context.DB_StagingI2B2_Host);

				parentContextMap_tRunJob_4.put("DB_StagingI2B2_Instance",
						context.DB_StagingI2B2_Instance);

				parentContextMap_tRunJob_4.put("DB_StagingI2B2_jdbcurl",
						context.DB_StagingI2B2_jdbcurl);

				parentContextMap_tRunJob_4.put("DB_StagingI2B2_Password",
						context.DB_StagingI2B2_Password);

				parentContextMap_tRunJob_4.put("DB_StagingI2B2_Port",
						context.DB_StagingI2B2_Port);

				parentContextMap_tRunJob_4.put("DB_StagingI2B2_Schema",
						context.DB_StagingI2B2_Schema);

				parentContextMap_tRunJob_4.put("DB_StagingI2B2_Username",
						context.DB_StagingI2B2_Username);

				parentContextMap_tRunJob_4.put("DB_StagingI2B2_WHType",
						context.DB_StagingI2B2_WHType);

				parentContextMap_tRunJob_4.put("DB_TargetI2B2_DatabaseType",
						context.DB_TargetI2B2_DatabaseType);

				parentContextMap_tRunJob_4.put("DB_TargetI2B2_DriverClass",
						context.DB_TargetI2B2_DriverClass);

				parentContextMap_tRunJob_4.put("DB_TargetI2B2_Host",
						context.DB_TargetI2B2_Host);

				parentContextMap_tRunJob_4.put("DB_TargetI2B2_Instance",
						context.DB_TargetI2B2_Instance);

				parentContextMap_tRunJob_4.put("DB_TargetI2B2_jdbcurl",
						context.DB_TargetI2B2_jdbcurl);

				parentContextMap_tRunJob_4.put("DB_TargetI2B2_Password",
						context.DB_TargetI2B2_Password);

				parentContextMap_tRunJob_4.put("DB_TargetI2B2_Port",
						context.DB_TargetI2B2_Port);

				parentContextMap_tRunJob_4.put("DB_TargetI2B2_Schema",
						context.DB_TargetI2B2_Schema);

				parentContextMap_tRunJob_4.put("DB_TargetI2B2_Username",
						context.DB_TargetI2B2_Username);

				parentContextMap_tRunJob_4.put("DB_TargetI2B2_WHType",
						context.DB_TargetI2B2_WHType);

				parentContextMap_tRunJob_4.put("DataFile", context.DataFile);

				parentContextMap_tRunJob_4.put("ErrorMessage",
						context.ErrorMessage);

				parentContextMap_tRunJob_4.put("IfValue", context.IfValue);

				parentContextMap_tRunJob_4.put("JDBC_URL", context.JDBC_URL);

				parentContextMap_tRunJob_4
						.put("JDBCDriver", context.JDBCDriver);

				parentContextMap_tRunJob_4.put("Job", context.Job);

				parentContextMap_tRunJob_4
						.put("SQLCommand", context.SQLCommand);

				parentContextMap_tRunJob_4.put("SQLCommand2",
						context.SQLCommand2);

				parentContextMap_tRunJob_4.put("SQLTable", context.SQLTable);

				parentContextMap_tRunJob_4.put("SQLTable2", context.SQLTable2);

				parentContextMap_tRunJob_4.put("StatusMessage",
						context.StatusMessage);

				parentContextMap_tRunJob_4.put("TableIEOTarget",
						context.TableIEOTarget);

				parentContextMap_tRunJob_4.put("TableIEOTargetOntology",
						context.TableIEOTargetOntology);

				parentContextMap_tRunJob_4.put("TableIEOTargetProject",
						context.TableIEOTargetProject);

				parentContextMap_tRunJob_4.put("TargetID", context.TargetID);

				parentContextMap_tRunJob_4
						.put("TOSHandler", context.TOSHandler);

				Object obj_tRunJob_4 = null;

				i2b2_postgres2.tosidrtcommand_createieotables_0_1.TOSIDRTCommand_CreateIEOTables childJob_tRunJob_4 = new i2b2_postgres2.tosidrtcommand_createieotables_0_1.TOSIDRTCommand_CreateIEOTables();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_4 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_4) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_4 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_4 : talendDataSources_tRunJob_4
							.entrySet()) {
						dataSources_tRunJob_4.put(
								talendDataSourceEntry_tRunJob_4.getKey(),
								talendDataSourceEntry_tRunJob_4.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_4.setDataSources(dataSources_tRunJob_4);
				}

				childJob_tRunJob_4.parentContextMap = parentContextMap_tRunJob_4;

				String[][] childReturn_tRunJob_4 = childJob_tRunJob_4
						.runJob((String[]) paraList_tRunJob_4
								.toArray(new String[paraList_tRunJob_4.size()]));

				errorCode = childJob_tRunJob_4.getErrorCode();

				if (childJob_tRunJob_4.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_4_CHILD_RETURN_CODE",
							childJob_tRunJob_4.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_4
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_4_CHILD_RETURN_CODE",
							childJob_tRunJob_4.getErrorCode());
				}
				if (childJob_tRunJob_4.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_4_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_4.getExceptionStackTrace());
				}

				if (childJob_tRunJob_4.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_4.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_4++;

				/**
				 * [tRunJob_4 main ] stop
				 */

				/**
				 * [tRunJob_4 end ] start
				 */

				currentComponent = "tRunJob_4";

				ok_Hash.put("tRunJob_4", true);
				end_Hash.put("tRunJob_4", System.currentTimeMillis());

				/**
				 * [tRunJob_4 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tRunJob_4:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_4 finally ] start
				 */

				currentComponent = "tRunJob_4";

				/**
				 * [tRunJob_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_4_SUBPROCESS_STATE", 1);
	}

	public void tJava_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());

				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				// INNER JOIN I2B2KFO179.i2b2 ON concept_dimension.CONCEPT_PATH
				// = i2b2.C_DIMCODE ORDER BY concept_dimension.CONCEPT_PATH ASC
				/*
				 * context.Job = "ontology"; context.SQLTable = "i2b2";
				 * context.SQLCommand =
				 * "SELECT * FROM I2B2IDRT.I2B2 WHERE C_HLEVEL < 10 ORDER BY C_HLEVEL ASC"
				 * ; //context.Job = "ontology_dimensions"; //context.SQLTable =
				 * "concept_dimension"; //context.SQLCommand =
				 * "SELECT * FROM I2B2KFO179.concept_dimension FULL OUTER JOIN I2B2KFO179.modifier_dimension ON concept_dimension.CONCEPT_PATH = i2b2.C_DIMCODE "
				 * ;
				 */

				boolean sqlCommandIsEmpty = StringHandling
						.LEN(context.SQLCommand) < 1;

				if (context.Job.isEmpty()) {
					context.Job = "ontology";
				}
				// System.out.println("TOS: context.Job is empty. Set to \"ontology\" now.");
				// context.SQLCommand = "SELECT * FROM " + context.OracleSchema
				// +".I2B2 ORDER BY C_HLEVEL, C_NAME ASC";
				// } else if ( context.Job.equals("ontology") &&
				// sqlCommandIsEmpty ){
				// context.SQLCommand = "SELECT * FROM " + context.OracleSchema
				// +".I2B2 ORDER BY C_HLEVEL ASC";
				// System.out.println("context.Job is "+context.Job+", but context.SQLCommand is empty. Set to \""+context.SQLCommand+"\" now.");
				// } else if ( context.Job.equals("ontology_dimensions") &&
				// sqlCommandIsEmpty ){
				// context.SQLCommand = "SELECT * FROM " + context.OracleSchema
				// +".I2B2 ORDER BY C_HLEVEL ASC";
				// System.out.println("context.Job is "+context.Job+", but context.SQLCommand is empty. Set to \""+context.SQLCommand+"\" now.");
				// }

				if (context.DataFile == null || "null".equals(context.DataFile)) {
					context.DataFile = "";
				}

				System.out.println("TOS: ----actual vars-----");
				System.out.println(" - context.DB_StagingI2B2_Schema: \""
						+ context.DB_StagingI2B2_Schema + "\"");
				System.out.println(" - context.DB_StagingI2B2_Username: \""
						+ context.DB_StagingI2B2_Username + "\"");
				System.out.println(" - context.DB_TargetI2B2_Schema: \""
						+ context.DB_TargetI2B2_Schema + "\"");
				System.out.println(" - context.Job: \"" + context.Job + "\"");
				System.out.println(" - context.DataFile: \"" + context.DataFile
						+ "\"");

				/**
				 * [tJava_2 begin ] stop
				 */

				/**
				 * [tJava_2 main ] start
				 */

				currentComponent = "tJava_2";

				tos_count_tJava_2++;

				/**
				 * [tJava_2 main ] stop
				 */

				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				if (context.Job.equals("ontology")
						|| context.Job.equals("ReadStagingOntology")) {

					tJava_18Process(globalMap);
				}

				if (context.Job.equals("check_ontology_empty")
						|| context.Job.equals("CheckOntology")) {

					tJava_23Process(globalMap);
				}

				if (context.Job.equals("add_target_ontology")
						|| context.Job.equals("WriteTargetOntology")) {

					tJava_21Process(globalMap);
				}

				if (context.Job.equals("delete_target_ontology")) {

					tJava_20Process(globalMap);
				}

				if (context.Job.equals("read_target_ontology")
						|| context.Job.equals("LoadTargetOntology")) {

					tJava_19Process(globalMap);
				}

				if (context.Job.equals("etlStagingI2B2ToTargetI2B2")) {

					tJava_8Process(globalMap);
				}

				if (context.Job.equals("LoadTargetProjects")) {

					tJava_13Process(globalMap);
				}

				if (context.Job.equals("SaveTargetProjects")) {

					tJava_14Process(globalMap);
				}

				if (context.Job.equals("DeleteTarget")) {

					tJava_15Process(globalMap);
				}

				/**
				 * [tJava_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_2 finally ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_18Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_18_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_18 begin ] start
				 */

				ok_Hash.put("tJava_18", false);
				start_Hash.put("tJava_18", System.currentTimeMillis());

				currentComponent = "tJava_18";

				int tos_count_tJava_18 = 0;

				if (context.DB_StagingI2B2_WHType.equalsIgnoreCase("i2b2"))
					context.currentQuery = "SELECT * FROM "
							+ context.DB_StagingI2B2_Schema
							+ ".I2B2 ORDER BY m_applied_path, C_HLEVEL, C_FULLNAME ASC";
				else {
					context.currentQuery = "SELECT * FROM i2b2metadata.i2b2_secure ORDER BY m_applied_path, C_HLEVEL, C_FULLNAME ASC";

				}
				System.out.println(context.currentQuery);

				/**
				 * [tJava_18 begin ] stop
				 */

				/**
				 * [tJava_18 main ] start
				 */

				currentComponent = "tJava_18";

				tos_count_tJava_18++;

				/**
				 * [tJava_18 main ] stop
				 */

				/**
				 * [tJava_18 end ] start
				 */

				currentComponent = "tJava_18";

				ok_Hash.put("tJava_18", true);
				end_Hash.put("tJava_18", System.currentTimeMillis());

				/**
				 * [tJava_18 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_18:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_18 finally ] start
				 */

				currentComponent = "tJava_18";

				/**
				 * [tJava_18 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_18_SUBPROCESS_STATE", 1);
	}

	public static class dbrowStruct implements
			routines.system.IPersistableRow<dbrowStruct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTConnector = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTConnector = new byte[0];

		public BigDecimal C_HLEVEL;

		public BigDecimal getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String C_SYNONYM_CD;

		public String getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public Integer C_TOTALNUM;

		public Integer getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public Object C_METADATAXML;

		public Object getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public String C_COLUMNDATATYPE;

		public String getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		public String i2b2_id;

		public String getI2b2_id() {
			return this.i2b2_id;
		}

		public String secure_obj_token;

		public String getSecure_obj_token() {
			return this.secure_obj_token;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTConnector.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTConnector.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTConnector = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTConnector = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_TOSIDRTConnector,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTConnector, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTConnector) {

				try {

					int length = 0;

					this.C_HLEVEL = (BigDecimal) dis.readObject();

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					this.C_SYNONYM_CD = readString(dis);

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = readInteger(dis);

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = (Object) dis.readObject();

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					this.C_COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

					this.i2b2_id = readString(dis);

					this.secure_obj_token = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.C_HLEVEL);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.C_SYNONYM_CD, dos);

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// Integer

				writeInteger(this.C_TOTALNUM, dos);

				// String

				writeString(this.C_BASECODE, dos);

				// Object

				dos.writeObject(this.C_METADATAXML);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// String

				writeString(this.C_COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

				// String

				writeString(this.i2b2_id, dos);

				// String

				writeString(this.secure_obj_token, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + C_SYNONYM_CD);
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + String.valueOf(C_TOTALNUM));
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + String.valueOf(C_METADATAXML));
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + C_COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append(",i2b2_id=" + i2b2_id);
			sb.append(",secure_obj_token=" + secure_obj_token);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(dbrowStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				dbrowStruct dbrow = new dbrowStruct();

				/**
				 * [tJavaFlex_1 begin ] start
				 */

				ok_Hash.put("tJavaFlex_1", false);
				start_Hash.put("tJavaFlex_1", System.currentTimeMillis());

				currentComponent = "tJavaFlex_1";

				int tos_count_tJavaFlex_1 = 0;

				System.out
						.println("TOS: Starting Talend-Job \"ontology\" as TOS-Code.");

				int number_of_ontology_items = 0;

				/**
				 * [tJavaFlex_1 begin ] stop
				 */

				/**
				 * [tJDBCInput_1 begin ] start
				 */

				ok_Hash.put("tJDBCInput_1", false);
				start_Hash.put("tJDBCInput_1", System.currentTimeMillis());

				currentComponent = "tJDBCInput_1";

				int tos_count_tJDBCInput_1 = 0;

				int nb_line_tJDBCInput_1 = 0;
				java.sql.Connection conn_tJDBCInput_1 = null;
				String driverClass_tJDBCInput_1 = context.DB_StagingI2B2_DriverClass;
				java.lang.Class.forName(driverClass_tJDBCInput_1);

				String url_tJDBCInput_1 = context.DB_StagingI2B2_jdbcurl;
				String dbUser_tJDBCInput_1 = context.DB_StagingI2B2_Username;

				final String decryptedPassword_tJDBCInput_1 = context.DB_StagingI2B2_Password;

				String dbPwd_tJDBCInput_1 = decryptedPassword_tJDBCInput_1;

				conn_tJDBCInput_1 = java.sql.DriverManager.getConnection(
						url_tJDBCInput_1, dbUser_tJDBCInput_1,
						dbPwd_tJDBCInput_1);

				java.sql.Statement stmt_tJDBCInput_1 = conn_tJDBCInput_1
						.createStatement();
				stmt_tJDBCInput_1.setFetchSize(1000);

				String dbquery_tJDBCInput_1 = context.currentQuery;

				globalMap.put("tJDBCInput_1_QUERY", dbquery_tJDBCInput_1);
				java.sql.ResultSet rs_tJDBCInput_1 = null;
				try {
					rs_tJDBCInput_1 = stmt_tJDBCInput_1
							.executeQuery(dbquery_tJDBCInput_1);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_1 = rs_tJDBCInput_1
							.getMetaData();
					int colQtyInRs_tJDBCInput_1 = rsmd_tJDBCInput_1
							.getColumnCount();

					String tmpContent_tJDBCInput_1 = null;

					while (rs_tJDBCInput_1.next()) {
						nb_line_tJDBCInput_1++;

						if (colQtyInRs_tJDBCInput_1 < 1) {
							dbrow.C_HLEVEL = null;
						} else {

							if (rs_tJDBCInput_1.getObject(1) != null) {
								dbrow.C_HLEVEL = rs_tJDBCInput_1
										.getBigDecimal(1);
							} else {
								dbrow.C_HLEVEL = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 2) {
							dbrow.C_FULLNAME = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(2);
							if (tmpContent_tJDBCInput_1 != null) {
								dbrow.C_FULLNAME = tmpContent_tJDBCInput_1;
							} else {
								dbrow.C_FULLNAME = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 3) {
							dbrow.C_NAME = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(3);
							if (tmpContent_tJDBCInput_1 != null) {
								dbrow.C_NAME = tmpContent_tJDBCInput_1;
							} else {
								dbrow.C_NAME = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 4) {
							dbrow.C_SYNONYM_CD = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(4);
							if (tmpContent_tJDBCInput_1 != null) {
								dbrow.C_SYNONYM_CD = tmpContent_tJDBCInput_1;
							} else {
								dbrow.C_SYNONYM_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 5) {
							dbrow.C_VISUALATTRIBUTES = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(5);
							if (tmpContent_tJDBCInput_1 != null) {
								dbrow.C_VISUALATTRIBUTES = tmpContent_tJDBCInput_1;
							} else {
								dbrow.C_VISUALATTRIBUTES = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 6) {
							dbrow.C_TOTALNUM = null;
						} else {

							if (rs_tJDBCInput_1.getObject(6) != null) {
								dbrow.C_TOTALNUM = rs_tJDBCInput_1.getInt(6);
							} else {
								dbrow.C_TOTALNUM = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 7) {
							dbrow.C_BASECODE = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(7);
							if (tmpContent_tJDBCInput_1 != null) {
								dbrow.C_BASECODE = tmpContent_tJDBCInput_1;
							} else {
								dbrow.C_BASECODE = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 8) {
							dbrow.C_METADATAXML = null;
						} else {

							if (rs_tJDBCInput_1.getObject(8) != null) {
								dbrow.C_METADATAXML = rs_tJDBCInput_1
										.getObject(8);
							} else {
								dbrow.C_METADATAXML = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 9) {
							dbrow.C_FACTTABLECOLUMN = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(9);
							if (tmpContent_tJDBCInput_1 != null) {
								dbrow.C_FACTTABLECOLUMN = tmpContent_tJDBCInput_1;
							} else {
								dbrow.C_FACTTABLECOLUMN = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 10) {
							dbrow.C_TABLENAME = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(10);
							if (tmpContent_tJDBCInput_1 != null) {
								dbrow.C_TABLENAME = tmpContent_tJDBCInput_1;
							} else {
								dbrow.C_TABLENAME = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 11) {
							dbrow.C_COLUMNNAME = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(11);
							if (tmpContent_tJDBCInput_1 != null) {
								dbrow.C_COLUMNNAME = tmpContent_tJDBCInput_1;
							} else {
								dbrow.C_COLUMNNAME = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 12) {
							dbrow.C_COLUMNDATATYPE = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(12);
							if (tmpContent_tJDBCInput_1 != null) {
								dbrow.C_COLUMNDATATYPE = tmpContent_tJDBCInput_1;
							} else {
								dbrow.C_COLUMNDATATYPE = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 13) {
							dbrow.C_OPERATOR = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(13);
							if (tmpContent_tJDBCInput_1 != null) {
								dbrow.C_OPERATOR = tmpContent_tJDBCInput_1;
							} else {
								dbrow.C_OPERATOR = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 14) {
							dbrow.C_DIMCODE = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(14);
							if (tmpContent_tJDBCInput_1 != null) {
								dbrow.C_DIMCODE = tmpContent_tJDBCInput_1;
							} else {
								dbrow.C_DIMCODE = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 15) {
							dbrow.C_COMMENT = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(15);
							if (tmpContent_tJDBCInput_1 != null) {
								dbrow.C_COMMENT = tmpContent_tJDBCInput_1;
							} else {
								dbrow.C_COMMENT = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 16) {
							dbrow.C_TOOLTIP = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(16);
							if (tmpContent_tJDBCInput_1 != null) {
								dbrow.C_TOOLTIP = tmpContent_tJDBCInput_1;
							} else {
								dbrow.C_TOOLTIP = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 17) {
							dbrow.M_APPLIED_PATH = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(17);
							if (tmpContent_tJDBCInput_1 != null) {
								dbrow.M_APPLIED_PATH = tmpContent_tJDBCInput_1;
							} else {
								dbrow.M_APPLIED_PATH = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 18) {
							dbrow.UPDATE_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_1 = null;
							try {
								date_tJDBCInput_1 = rs_tJDBCInput_1
										.getTimestamp(18);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_1 = rs_tJDBCInput_1.getDate(18);
							}
							dbrow.UPDATE_DATE = date_tJDBCInput_1;
						}
						if (colQtyInRs_tJDBCInput_1 < 19) {
							dbrow.DOWNLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_1 = null;
							try {
								date_tJDBCInput_1 = rs_tJDBCInput_1
										.getTimestamp(19);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_1 = rs_tJDBCInput_1.getDate(19);
							}
							dbrow.DOWNLOAD_DATE = date_tJDBCInput_1;
						}
						if (colQtyInRs_tJDBCInput_1 < 20) {
							dbrow.IMPORT_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_1 = null;
							try {
								date_tJDBCInput_1 = rs_tJDBCInput_1
										.getTimestamp(20);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_1 = rs_tJDBCInput_1.getDate(20);
							}
							dbrow.IMPORT_DATE = date_tJDBCInput_1;
						}
						if (colQtyInRs_tJDBCInput_1 < 21) {
							dbrow.SOURCESYSTEM_CD = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(21);
							if (tmpContent_tJDBCInput_1 != null) {
								dbrow.SOURCESYSTEM_CD = tmpContent_tJDBCInput_1;
							} else {
								dbrow.SOURCESYSTEM_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 22) {
							dbrow.VALUETYPE_CD = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(22);
							if (tmpContent_tJDBCInput_1 != null) {
								dbrow.VALUETYPE_CD = tmpContent_tJDBCInput_1;
							} else {
								dbrow.VALUETYPE_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 23) {
							dbrow.M_EXCLUSION_CD = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(23);
							if (tmpContent_tJDBCInput_1 != null) {
								dbrow.M_EXCLUSION_CD = tmpContent_tJDBCInput_1;
							} else {
								dbrow.M_EXCLUSION_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 24) {
							dbrow.C_PATH = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(24);
							if (tmpContent_tJDBCInput_1 != null) {
								dbrow.C_PATH = tmpContent_tJDBCInput_1;
							} else {
								dbrow.C_PATH = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 25) {
							dbrow.C_SYMBOL = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(25);
							if (tmpContent_tJDBCInput_1 != null) {
								dbrow.C_SYMBOL = tmpContent_tJDBCInput_1;
							} else {
								dbrow.C_SYMBOL = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 26) {
							dbrow.i2b2_id = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(26);
							if (tmpContent_tJDBCInput_1 != null) {
								dbrow.i2b2_id = tmpContent_tJDBCInput_1;
							} else {
								dbrow.i2b2_id = null;
							}
						}
						if (colQtyInRs_tJDBCInput_1 < 27) {
							dbrow.secure_obj_token = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(27);
							if (tmpContent_tJDBCInput_1 != null) {
								dbrow.secure_obj_token = tmpContent_tJDBCInput_1;
							} else {
								dbrow.secure_obj_token = null;
							}
						}

						/**
						 * [tJDBCInput_1 begin ] stop
						 */

						/**
						 * [tJDBCInput_1 main ] start
						 */

						currentComponent = "tJDBCInput_1";

						tos_count_tJDBCInput_1++;

						/**
						 * [tJDBCInput_1 main ] stop
						 */

						/**
						 * [tJavaFlex_1 main ] start
						 */

						currentComponent = "tJavaFlex_1";

						String meta = "";

						if (context.DB_StagingI2B2_DatabaseType
								.equalsIgnoreCase("oracle")) {
							if (dbrow.C_METADATAXML != null) {
								Clob data = (Clob) dbrow.C_METADATAXML;
								// System.out.println(data.toString());
								final StringBuilder sb = new StringBuilder();

								try {
									final Reader reader = data
											.getCharacterStream();
									final BufferedReader br = new BufferedReader(
											reader);

									int b;
									while (-1 != (b = br.read())) {
										sb.append((char) b);
									}

									br.close();
								} catch (SQLException e) {
									e.printStackTrace();
								} catch (IOException e) {
									e.printStackTrace();
								}

								meta = sb.toString();

							}
						} else {
							meta = dbrow.C_METADATAXML.toString();
						}
						TOSHandler.addi2b2OntologyItemToTree(dbrow.C_HLEVEL
								.intValue(), dbrow.C_FULLNAME, dbrow.C_NAME,
								dbrow.C_SYNONYM_CD, dbrow.C_VISUALATTRIBUTES,
								Relational.ISNULL(dbrow.C_TOTALNUM) ? 0
										: dbrow.C_TOTALNUM.intValue(),
								dbrow.C_BASECODE, meta,
								dbrow.C_FACTTABLECOLUMN, dbrow.C_TABLENAME,
								dbrow.C_COLUMNNAME, dbrow.C_COLUMNDATATYPE,
								dbrow.C_OPERATOR, dbrow.C_DIMCODE,
								dbrow.C_COMMENT, dbrow.C_TOOLTIP,
								dbrow.M_APPLIED_PATH, dbrow.UPDATE_DATE,
								dbrow.DOWNLOAD_DATE, dbrow.IMPORT_DATE,
								dbrow.SOURCESYSTEM_CD, dbrow.VALUETYPE_CD,
								dbrow.M_EXCLUSION_CD, dbrow.C_PATH,
								dbrow.C_SYMBOL, dbrow.secure_obj_token);

						number_of_ontology_items++;

						tos_count_tJavaFlex_1++;

						/**
						 * [tJavaFlex_1 main ] stop
						 */

						/**
						 * [tJDBCInput_1 end ] start
						 */

						currentComponent = "tJDBCInput_1";

					}
				} finally {
					if (rs_tJDBCInput_1 != null) {
						rs_tJDBCInput_1.close();
					}
					stmt_tJDBCInput_1.close();

					if (conn_tJDBCInput_1 != null
							&& !conn_tJDBCInput_1.isClosed()) {

						conn_tJDBCInput_1.close();

					}
				}
				globalMap.put("tJDBCInput_1_NB_LINE", nb_line_tJDBCInput_1);

				ok_Hash.put("tJDBCInput_1", true);
				end_Hash.put("tJDBCInput_1", System.currentTimeMillis());

				/**
				 * [tJDBCInput_1 end ] stop
				 */

				/**
				 * [tJavaFlex_1 end ] start
				 */

				currentComponent = "tJavaFlex_1";

				System.out.println("TOS: Ontology read with "
						+ number_of_ontology_items + " items.");

				ok_Hash.put("tJavaFlex_1", true);
				end_Hash.put("tJavaFlex_1", System.currentTimeMillis());

				/**
				 * [tJavaFlex_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_1 finally ] start
				 */

				currentComponent = "tJDBCInput_1";

				/**
				 * [tJDBCInput_1 finally ] stop
				 */

				/**
				 * [tJavaFlex_1 finally ] start
				 */

				currentComponent = "tJavaFlex_1";

				/**
				 * [tJavaFlex_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_3 begin ] start
				 */

				ok_Hash.put("tJava_3", false);
				start_Hash.put("tJava_3", System.currentTimeMillis());

				currentComponent = "tJava_3";

				int tos_count_tJava_3 = 0;

				context.ErrorMessage = "Error while getting data from to the db.";
				((TOSHandler) context.TOSHandler).status(context.ErrorMessage);
				System.out.println(context.ErrorMessage);

				/**
				 * [tJava_3 begin ] stop
				 */

				/**
				 * [tJava_3 main ] start
				 */

				currentComponent = "tJava_3";

				tos_count_tJava_3++;

				/**
				 * [tJava_3 main ] stop
				 */

				/**
				 * [tJava_3 end ] start
				 */

				currentComponent = "tJava_3";

				ok_Hash.put("tJava_3", true);
				end_Hash.put("tJava_3", System.currentTimeMillis());

				/**
				 * [tJava_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_3 finally ] start
				 */

				currentComponent = "tJava_3";

				/**
				 * [tJava_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}

	public void tJava_23Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_23_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_23 begin ] start
				 */

				ok_Hash.put("tJava_23", false);
				start_Hash.put("tJava_23", System.currentTimeMillis());

				currentComponent = "tJava_23";

				int tos_count_tJava_23 = 0;

				if (context.DB_StagingI2B2_WHType.equalsIgnoreCase("i2b2"))
					context.currentQuery = "Select C_FULLNAME from "
							+ context.DB_StagingI2B2_Schema
							+ ".i2b2 where C_HLEVEL='0'";
				else {
					context.currentQuery = "Select C_FULLNAME from i2b2metdata.i2b2_secure where C_HLEVEL='0'";

				}

				/**
				 * [tJava_23 begin ] stop
				 */

				/**
				 * [tJava_23 main ] start
				 */

				currentComponent = "tJava_23";

				tos_count_tJava_23++;

				/**
				 * [tJava_23 main ] stop
				 */

				/**
				 * [tJava_23 end ] start
				 */

				currentComponent = "tJava_23";

				ok_Hash.put("tJava_23", true);
				end_Hash.put("tJava_23", System.currentTimeMillis());

				/**
				 * [tJava_23 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_23:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCConnection_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_23 finally ] start
				 */

				currentComponent = "tJava_23";

				/**
				 * [tJava_23 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_23_SUBPROCESS_STATE", 1);
	}

	public void tJDBCConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCConnection_1 begin ] start
				 */

				ok_Hash.put("tJDBCConnection_1", false);
				start_Hash.put("tJDBCConnection_1", System.currentTimeMillis());

				currentComponent = "tJDBCConnection_1";

				int tos_count_tJDBCConnection_1 = 0;

				String url_tJDBCConnection_1 = context.DB_StagingI2B2_jdbcurl;

				String dbUser_tJDBCConnection_1 = context.DB_StagingI2B2_Username;

				final String decryptedPassword_tJDBCConnection_1 = context.DB_StagingI2B2_Password;
				String dbPwd_tJDBCConnection_1 = decryptedPassword_tJDBCConnection_1;

				java.sql.Connection conn_tJDBCConnection_1 = null;

				String driverClass_tJDBCConnection_1 = context.DB_StagingI2B2_DriverClass;
				java.lang.Class.forName(driverClass_tJDBCConnection_1);

				conn_tJDBCConnection_1 = java.sql.DriverManager.getConnection(
						url_tJDBCConnection_1, dbUser_tJDBCConnection_1,
						dbPwd_tJDBCConnection_1);

				globalMap.put("conn_tJDBCConnection_1", conn_tJDBCConnection_1);
				if (null != conn_tJDBCConnection_1) {

					conn_tJDBCConnection_1.setAutoCommit(false);
				}

				globalMap.put("conn_tJDBCConnection_1", conn_tJDBCConnection_1);
				globalMap.put("url_tJDBCConnection_1", url_tJDBCConnection_1);
				// globalMap.put("user_tJDBCConnection_1",
				// dbUser_tJDBCConnection_1);
				// globalMap.put("pass_tJDBCConnection_1",
				// dbPwd_tJDBCConnection_1);

				/**
				 * [tJDBCConnection_1 begin ] stop
				 */

				/**
				 * [tJDBCConnection_1 main ] start
				 */

				currentComponent = "tJDBCConnection_1";

				tos_count_tJDBCConnection_1++;

				/**
				 * [tJDBCConnection_1 main ] stop
				 */

				/**
				 * [tJDBCConnection_1 end ] start
				 */

				currentComponent = "tJDBCConnection_1";

				ok_Hash.put("tJDBCConnection_1", true);
				end_Hash.put("tJDBCConnection_1", System.currentTimeMillis());

				/**
				 * [tJDBCConnection_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJDBCConnection_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tJDBCInput_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCConnection_1 finally ] start
				 */

				currentComponent = "tJDBCConnection_1";

				/**
				 * [tJDBCConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tJDBCInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCInput_2 begin ] start
				 */

				ok_Hash.put("tJDBCInput_2", false);
				start_Hash.put("tJDBCInput_2", System.currentTimeMillis());

				currentComponent = "tJDBCInput_2";

				int tos_count_tJDBCInput_2 = 0;

				int nb_line_tJDBCInput_2 = 0;
				java.sql.Connection conn_tJDBCInput_2 = null;
				conn_tJDBCInput_2 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_2 = conn_tJDBCInput_2
						.createStatement();

				String dbquery_tJDBCInput_2 = context.currentQuery;

				globalMap.put("tJDBCInput_2_QUERY", dbquery_tJDBCInput_2);
				java.sql.ResultSet rs_tJDBCInput_2 = null;
				try {
					rs_tJDBCInput_2 = stmt_tJDBCInput_2
							.executeQuery(dbquery_tJDBCInput_2);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_2 = rs_tJDBCInput_2
							.getMetaData();
					int colQtyInRs_tJDBCInput_2 = rsmd_tJDBCInput_2
							.getColumnCount();

					String tmpContent_tJDBCInput_2 = null;

					while (rs_tJDBCInput_2.next()) {
						nb_line_tJDBCInput_2++;

						/**
						 * [tJDBCInput_2 begin ] stop
						 */

						/**
						 * [tJDBCInput_2 main ] start
						 */

						currentComponent = "tJDBCInput_2";

						tos_count_tJDBCInput_2++;

						/**
						 * [tJDBCInput_2 main ] stop
						 */

						/**
						 * [tJDBCInput_2 end ] start
						 */

						currentComponent = "tJDBCInput_2";

					}
				} finally {
					if (rs_tJDBCInput_2 != null) {
						rs_tJDBCInput_2.close();
					}
					stmt_tJDBCInput_2.close();

				}
				globalMap.put("tJDBCInput_2_NB_LINE", nb_line_tJDBCInput_2);

				ok_Hash.put("tJDBCInput_2", true);
				end_Hash.put("tJDBCInput_2", System.currentTimeMillis());

				if (((Integer) globalMap.get("tJDBCInput_2_NB_LINE")) > 1) {

					tDie_1Process(globalMap);
				}

				if (true /* meaning else */) {

					tDie_2Process(globalMap);
				}

				/**
				 * [tJDBCInput_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_2 finally ] start
				 */

				currentComponent = "tJDBCInput_2";

				/**
				 * [tJDBCInput_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_2_SUBPROCESS_STATE", 1);
	}

	public void tDie_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_1 begin ] start
				 */

				ok_Hash.put("tDie_1", false);
				start_Hash.put("tDie_1", System.currentTimeMillis());

				currentComponent = "tDie_1";

				int tos_count_tDie_1 = 0;

				/**
				 * [tDie_1 begin ] stop
				 */

				/**
				 * [tDie_1 main ] start
				 */

				currentComponent = "tDie_1";

				globalMap.put("tDie_1_DIE_PRIORITY", 3);
				System.err
						.println("Checking the i2b2 database for an existing ontology ... success.");

				globalMap
						.put("tDie_1_DIE_MESSAGE",
								"Checking the i2b2 database for an existing ontology ... success.");
				globalMap
						.put("tDie_1_DIE_MESSAGES",
								"Checking the i2b2 database for an existing ontology ... success.");
				currentComponent = "tDie_1";
				status = "failure";
				errorCode = new Integer(0);
				globalMap.put("tDie_1_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_1++;

				/**
				 * [tDie_1 main ] stop
				 */

				/**
				 * [tDie_1 end ] start
				 */

				currentComponent = "tDie_1";

				ok_Hash.put("tDie_1", true);
				end_Hash.put("tDie_1", System.currentTimeMillis());

				/**
				 * [tDie_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_1 finally ] start
				 */

				currentComponent = "tDie_1";

				/**
				 * [tDie_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}

	public void tDie_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_2 begin ] start
				 */

				ok_Hash.put("tDie_2", false);
				start_Hash.put("tDie_2", System.currentTimeMillis());

				currentComponent = "tDie_2";

				int tos_count_tDie_2 = 0;

				/**
				 * [tDie_2 begin ] stop
				 */

				/**
				 * [tDie_2 main ] start
				 */

				currentComponent = "tDie_2";

				globalMap.put("tDie_2_DIE_PRIORITY", 3);
				System.err
						.println("Checking the i2b2 database for an existing ontology ... no ontology found.");

				globalMap
						.put("tDie_2_DIE_MESSAGE",
								"Checking the i2b2 database for an existing ontology ... no ontology found.");
				globalMap
						.put("tDie_2_DIE_MESSAGES",
								"Checking the i2b2 database for an existing ontology ... no ontology found.");
				currentComponent = "tDie_2";
				status = "failure";
				errorCode = new Integer(10);
				globalMap.put("tDie_2_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_2++;

				/**
				 * [tDie_2 main ] stop
				 */

				/**
				 * [tDie_2 end ] start
				 */

				currentComponent = "tDie_2";

				ok_Hash.put("tDie_2", true);
				end_Hash.put("tDie_2", System.currentTimeMillis());

				/**
				 * [tDie_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_2 finally ] start
				 */

				currentComponent = "tDie_2";

				/**
				 * [tDie_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_21Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_21_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_21 begin ] start
				 */

				ok_Hash.put("tJava_21", false);
				start_Hash.put("tJava_21", System.currentTimeMillis());

				currentComponent = "tJava_21";

				int tos_count_tJava_21 = 0;

				if (context.DB_StagingI2B2_WHType.equalsIgnoreCase("i2b2"))
					context.currentQuery = "DELETE FROM "
							+ context.DB_StagingI2B2_Schema + "."
							+ context.TableIEOTargetOntology
							+ "  WHERE target_id = '" + context.TargetID + "'";
				else {
					context.currentQuery = "DELETE FROM i2b2metadata."
							+ context.TableIEOTargetOntology
							+ "  WHERE target_id = '" + context.TargetID + "'";

				}

				/**
				 * [tJava_21 begin ] stop
				 */

				/**
				 * [tJava_21 main ] start
				 */

				currentComponent = "tJava_21";

				tos_count_tJava_21++;

				/**
				 * [tJava_21 main ] stop
				 */

				/**
				 * [tJava_21 end ] start
				 */

				currentComponent = "tJava_21";

				ok_Hash.put("tJava_21", true);
				end_Hash.put("tJava_21", System.currentTimeMillis());

				/**
				 * [tJava_21 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_21:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCRow_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_21 finally ] start
				 */

				currentComponent = "tJava_21";

				/**
				 * [tJava_21 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_21_SUBPROCESS_STATE", 1);
	}

	public void tJDBCRow_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCRow_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCRow_2 begin ] start
				 */

				ok_Hash.put("tJDBCRow_2", false);
				start_Hash.put("tJDBCRow_2", System.currentTimeMillis());

				currentComponent = "tJDBCRow_2";

				int tos_count_tJDBCRow_2 = 0;

				java.sql.Connection conn_tJDBCRow_2 = null;
				String query_tJDBCRow_2 = "";
				boolean whetherReject_tJDBCRow_2 = false;
				String driverClass_tJDBCRow_2 = context.DB_StagingI2B2_DriverClass;
				java.lang.Class.forName(driverClass_tJDBCRow_2);

				String url_tJDBCRow_2 = context.DB_StagingI2B2_jdbcurl;

				String dbUser_tJDBCRow_2 = context.DB_StagingI2B2_Username;

				final String decryptedPassword_tJDBCRow_2 = context.DB_StagingI2B2_Password;

				String dbPwd_tJDBCRow_2 = decryptedPassword_tJDBCRow_2;

				conn_tJDBCRow_2 = java.sql.DriverManager.getConnection(
						url_tJDBCRow_2, dbUser_tJDBCRow_2, dbPwd_tJDBCRow_2);

				if (conn_tJDBCRow_2.getAutoCommit()) {

					conn_tJDBCRow_2.setAutoCommit(false);

				}
				int commitEvery_tJDBCRow_2 = 10000;
				int commitCounter_tJDBCRow_2 = 0;

				java.sql.Statement stmt_tJDBCRow_2 = conn_tJDBCRow_2
						.createStatement();

				/**
				 * [tJDBCRow_2 begin ] stop
				 */

				/**
				 * [tJDBCRow_2 main ] start
				 */

				currentComponent = "tJDBCRow_2";

				query_tJDBCRow_2 = context.currentQuery;
				whetherReject_tJDBCRow_2 = false;
				globalMap.put("tJDBCRow_2_QUERY", query_tJDBCRow_2);
				try {
					stmt_tJDBCRow_2.execute(query_tJDBCRow_2);

				} catch (java.lang.Exception e) {
					whetherReject_tJDBCRow_2 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tJDBCRow_2) {

				}

				commitCounter_tJDBCRow_2++;
				if (commitEvery_tJDBCRow_2 <= commitCounter_tJDBCRow_2) {

					conn_tJDBCRow_2.commit();

					commitCounter_tJDBCRow_2 = 0;
				}

				tos_count_tJDBCRow_2++;

				/**
				 * [tJDBCRow_2 main ] stop
				 */

				/**
				 * [tJDBCRow_2 end ] start
				 */

				currentComponent = "tJDBCRow_2";

				stmt_tJDBCRow_2.close();
				if (commitEvery_tJDBCRow_2 > commitCounter_tJDBCRow_2) {

					conn_tJDBCRow_2.commit();

					commitCounter_tJDBCRow_2 = 0;

				}
				conn_tJDBCRow_2.close();

				ok_Hash.put("tJDBCRow_2", true);
				end_Hash.put("tJDBCRow_2", System.currentTimeMillis());

				/**
				 * [tJDBCRow_2 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCRow_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_22Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCRow_2 finally ] start
				 */

				currentComponent = "tJDBCRow_2";

				/**
				 * [tJDBCRow_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCRow_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_22Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_22_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_22 begin ] start
				 */

				ok_Hash.put("tJava_22", false);
				start_Hash.put("tJava_22", System.currentTimeMillis());

				currentComponent = "tJava_22";

				int tos_count_tJava_22 = 0;

				if (context.DB_StagingI2B2_WHType.equalsIgnoreCase("i2b2"))
					context.currentQuery = context.DB_StagingI2B2_Schema + "."
							+ context.TableIEOTargetOntology;
				else {
					context.currentQuery = "i2b2metadata."
							+ context.TableIEOTargetOntology;

				}

				/**
				 * [tJava_22 begin ] stop
				 */

				/**
				 * [tJava_22 main ] start
				 */

				currentComponent = "tJava_22";

				tos_count_tJava_22++;

				/**
				 * [tJava_22 main ] stop
				 */

				/**
				 * [tJava_22 end ] start
				 */

				currentComponent = "tJava_22";

				ok_Hash.put("tJava_22", true);
				end_Hash.put("tJava_22", System.currentTimeMillis());

				/**
				 * [tJava_22 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_22:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_22 finally ] start
				 */

				currentComponent = "tJava_22";

				/**
				 * [tJava_22 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_22_SUBPROCESS_STATE", 1);
	}

	public static class tmpRowStruct implements
			routines.system.IPersistableRow<tmpRowStruct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTConnector = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTConnector = new byte[0];

		public Integer TARGET_ID;

		public Integer getTARGET_ID() {
			return this.TARGET_ID;
		}

		public Integer TREE_LEVEL;

		public Integer getTREE_LEVEL() {
			return this.TREE_LEVEL;
		}

		public String TREE_PATH;

		public String getTREE_PATH() {
			return this.TREE_PATH;
		}

		public String STAGING_PATH;

		public String getSTAGING_PATH() {
			return this.STAGING_PATH;
		}

		public String STAGING_DIMENSION;

		public String getSTAGING_DIMENSION() {
			return this.STAGING_DIMENSION;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String STARTDATE_STAGING_PATH;

		public String getSTARTDATE_STAGING_PATH() {
			return this.STARTDATE_STAGING_PATH;
		}

		public String ENDDATE_STAGING_PATH;

		public String getENDDATE_STAGING_PATH() {
			return this.ENDDATE_STAGING_PATH;
		}

		public String VISUALATTRIBUTES;

		public String getVISUALATTRIBUTES() {
			return this.VISUALATTRIBUTES;
		}

		public String BASECODE;

		public String getBASECODE() {
			return this.BASECODE;
		}

		public String METADATAXML;

		public String getMETADATAXML() {
			return this.METADATAXML;
		}

		public String COLUMNDATATYPE;

		public String getCOLUMNDATATYPE() {
			return this.COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String TOOLTIP;

		public String getTOOLTIP() {
			return this.TOOLTIP;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public String STAGING_M_APPLIED_PATH;

		public String getSTAGING_M_APPLIED_PATH() {
			return this.STAGING_M_APPLIED_PATH;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTConnector.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTConnector.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTConnector = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTConnector = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_TOSIDRTConnector,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTConnector, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTConnector) {

				try {

					int length = 0;

					this.TARGET_ID = readInteger(dis);

					this.TREE_LEVEL = readInteger(dis);

					this.TREE_PATH = readString(dis);

					this.STAGING_PATH = readString(dis);

					this.STAGING_DIMENSION = readString(dis);

					this.C_NAME = readString(dis);

					this.STARTDATE_STAGING_PATH = readString(dis);

					this.ENDDATE_STAGING_PATH = readString(dis);

					this.VISUALATTRIBUTES = readString(dis);

					this.BASECODE = readString(dis);

					this.METADATAXML = readString(dis);

					this.COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_COMMENT = readString(dis);

					this.TOOLTIP = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.STAGING_M_APPLIED_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.TARGET_ID, dos);

				// Integer

				writeInteger(this.TREE_LEVEL, dos);

				// String

				writeString(this.TREE_PATH, dos);

				// String

				writeString(this.STAGING_PATH, dos);

				// String

				writeString(this.STAGING_DIMENSION, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.STARTDATE_STAGING_PATH, dos);

				// String

				writeString(this.ENDDATE_STAGING_PATH, dos);

				// String

				writeString(this.VISUALATTRIBUTES, dos);

				// String

				writeString(this.BASECODE, dos);

				// String

				writeString(this.METADATAXML, dos);

				// String

				writeString(this.COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.TOOLTIP, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// String

				writeString(this.STAGING_M_APPLIED_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TARGET_ID=" + String.valueOf(TARGET_ID));
			sb.append(",TREE_LEVEL=" + String.valueOf(TREE_LEVEL));
			sb.append(",TREE_PATH=" + TREE_PATH);
			sb.append(",STAGING_PATH=" + STAGING_PATH);
			sb.append(",STAGING_DIMENSION=" + STAGING_DIMENSION);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",STARTDATE_STAGING_PATH=" + STARTDATE_STAGING_PATH);
			sb.append(",ENDDATE_STAGING_PATH=" + ENDDATE_STAGING_PATH);
			sb.append(",VISUALATTRIBUTES=" + VISUALATTRIBUTES);
			sb.append(",BASECODE=" + BASECODE);
			sb.append(",METADATAXML=" + METADATAXML);
			sb.append(",COLUMNDATATYPE=" + COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",TOOLTIP=" + TOOLTIP);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",STAGING_M_APPLIED_PATH=" + STAGING_M_APPLIED_PATH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tmpRowStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tmpRowStruct tmpRow = new tmpRowStruct();

				/**
				 * [tJDBCOutput_1 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_1", false);
				start_Hash.put("tJDBCOutput_1", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_1";

				int tos_count_tJDBCOutput_1 = 0;

				int nb_line_tJDBCOutput_1 = 0;
				int nb_line_update_tJDBCOutput_1 = 0;
				int nb_line_inserted_tJDBCOutput_1 = 0;
				int nb_line_deleted_tJDBCOutput_1 = 0;
				int nb_line_rejected_tJDBCOutput_1 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_1 = 0;

				int deletedCount_tJDBCOutput_1 = 0;
				int updatedCount_tJDBCOutput_1 = 0;
				int insertedCount_tJDBCOutput_1 = 0;
				int rejectedCount_tJDBCOutput_1 = 0;

				boolean whetherReject_tJDBCOutput_1 = false;

				java.sql.Connection connection_tJDBCOutput_1 = null;

				java.lang.Class.forName(context.DB_StagingI2B2_DriverClass);
				String connectionString_tJDBCOutput_1 = context.DB_StagingI2B2_jdbcurl;

				final String decryptedPassword_tJDBCOutput_1 = context.DB_StagingI2B2_Password;

				connection_tJDBCOutput_1 = java.sql.DriverManager
						.getConnection(connectionString_tJDBCOutput_1,
								context.DB_StagingI2B2_Username,
								decryptedPassword_tJDBCOutput_1);

				resourceMap.put("conn_tJDBCOutput_1", connection_tJDBCOutput_1);
				connection_tJDBCOutput_1.setAutoCommit(false);
				int commitEvery_tJDBCOutput_1 = 10000;
				int commitCounter_tJDBCOutput_1 = 0;
				int batchSize_tJDBCOutput_1 = 10000;
				int batchSizeCounter_tJDBCOutput_1 = 0;

				String insert_tJDBCOutput_1 = "INSERT INTO "
						+ context.currentQuery
						+ " (TARGET_ID,TREE_LEVEL,TREE_PATH,STAGING_PATH,STAGING_DIMENSION,C_NAME,STARTDATE_STAGING_PATH,ENDDATE_STAGING_PATH,VISUALATTRIBUTES,BASECODE,METADATAXML,COLUMNDATATYPE,C_OPERATOR,C_COMMENT,TOOLTIP,UPDATE_DATE,DOWNLOAD_DATE,IMPORT_DATE,SOURCESYSTEM_CD,VALUETYPE_CD,M_APPLIED_PATH,STAGING_M_APPLIED_PATH) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_1 = connection_tJDBCOutput_1
						.prepareStatement(insert_tJDBCOutput_1);

				/**
				 * [tJDBCOutput_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;

				char fieldSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_1 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_1 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_1 = /**
				 * Start field
				 * tFileInputDelimited_1:FILENAME
				 */
				context.DataFile/** End field tFileInputDelimited_1:FILENAME */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

				try {

					String[] rowtFileInputDelimited_1 = null;
					int currentLinetFileInputDelimited_1 = 0;
					int outputLinetFileInputDelimited_1 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0;
							if (footer_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_1,
									fieldSeparator_tFileInputDelimited_1[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_1)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_1[0]);
						}

						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
							csvReadertFileInputDelimited_1.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_1[0]);

						csvReadertFileInputDelimited_1.setQuoteChar('"');

						csvReadertFileInputDelimited_1
								.setEscapeChar(csvReadertFileInputDelimited_1
										.getQuoteChar());

						if (footer_tFileInputDelimited_1 > 0) {
							for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
							csvReadertFileInputDelimited_1
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_1.readNext()) {

								rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
										.getValues();
								if (!(rowtFileInputDelimited_1.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_1[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_1++;

								}

							}
							int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
									- footer_tFileInputDelimited_1 < 0 ? 0
									: totalLinetFileInputDelimited_1
											- footer_tFileInputDelimited_1;
							if (lastLinetFileInputDelimited_1 > 0) {
								lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1
										: lastLineTemptFileInputDelimited_1;
							} else {
								lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
							}

							csvReadertFileInputDelimited_1.close();
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_1)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_1[0]);
							}
							csvReadertFileInputDelimited_1
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('"');

							csvReadertFileInputDelimited_1
									.setEscapeChar(csvReadertFileInputDelimited_1
											.getQuoteChar());

						}

						if (limittFileInputDelimited_1 != 0) {
							for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 1; currentLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
						}
						csvReadertFileInputDelimited_1
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_1 != 0
							&& csvReadertFileInputDelimited_1 != null
							&& csvReadertFileInputDelimited_1.readNext()) {

						rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
								.getValues();

						if (rowtFileInputDelimited_1.length == 1
								&& ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_1++;

						if (lastLinetFileInputDelimited_1 > -1
								&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
							break;
						}
						outputLinetFileInputDelimited_1++;
						if (limittFileInputDelimited_1 > 0
								&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
							break;
						}

						tmpRow = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						tmpRow = new tmpRowStruct();
						try {

							char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) ";").length() > 0) {
								fieldSeparator_tFileInputDelimited_1_ListType = ((String) ";")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_1.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								tmpRow.TARGET_ID = null;

								tmpRow.TREE_LEVEL = null;

								tmpRow.TREE_PATH = null;

								tmpRow.STAGING_PATH = null;

								tmpRow.STAGING_DIMENSION = null;

								tmpRow.C_NAME = null;

								tmpRow.STARTDATE_STAGING_PATH = null;

								tmpRow.ENDDATE_STAGING_PATH = null;

								tmpRow.VISUALATTRIBUTES = null;

								tmpRow.BASECODE = null;

								tmpRow.METADATAXML = null;

								tmpRow.COLUMNDATATYPE = null;

								tmpRow.C_OPERATOR = null;

								tmpRow.C_COMMENT = null;

								tmpRow.TOOLTIP = null;

								tmpRow.UPDATE_DATE = null;

								tmpRow.DOWNLOAD_DATE = null;

								tmpRow.IMPORT_DATE = null;

								tmpRow.SOURCESYSTEM_CD = null;

								tmpRow.VALUETYPE_CD = null;

								tmpRow.M_APPLIED_PATH = null;

								tmpRow.STAGING_M_APPLIED_PATH = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_1 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_1 = 0;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										tmpRow.TARGET_ID = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

									} else {
										tmpRow.TARGET_ID = null;
									}

								} else {
									tmpRow.TARGET_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 1;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										tmpRow.TREE_LEVEL = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

									} else {
										tmpRow.TREE_LEVEL = null;
									}

								} else {
									tmpRow.TREE_LEVEL = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 2;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									tmpRow.TREE_PATH = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									tmpRow.TREE_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 3;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									tmpRow.STAGING_PATH = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									tmpRow.STAGING_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 4;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									tmpRow.STAGING_DIMENSION = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									tmpRow.STAGING_DIMENSION = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 5;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									tmpRow.C_NAME = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									tmpRow.C_NAME = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 6;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									tmpRow.STARTDATE_STAGING_PATH = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									tmpRow.STARTDATE_STAGING_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 7;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									tmpRow.ENDDATE_STAGING_PATH = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									tmpRow.ENDDATE_STAGING_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 8;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									tmpRow.VISUALATTRIBUTES = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									tmpRow.VISUALATTRIBUTES = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 9;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									tmpRow.BASECODE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									tmpRow.BASECODE = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 10;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									tmpRow.METADATAXML = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									tmpRow.METADATAXML = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 11;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									tmpRow.COLUMNDATATYPE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									tmpRow.COLUMNDATATYPE = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 12;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									tmpRow.C_OPERATOR = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									tmpRow.C_OPERATOR = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 13;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									tmpRow.C_COMMENT = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									tmpRow.C_COMMENT = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 14;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									tmpRow.TOOLTIP = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									tmpRow.TOOLTIP = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 15;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										tmpRow.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
														"dd-MM-yyyy");

									} else {
										tmpRow.UPDATE_DATE = null;
									}

								} else {
									tmpRow.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 16;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										tmpRow.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
														"dd-MM-yyyy");

									} else {
										tmpRow.DOWNLOAD_DATE = null;
									}

								} else {
									tmpRow.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 17;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										tmpRow.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
														"dd-MM-yyyy");

									} else {
										tmpRow.IMPORT_DATE = null;
									}

								} else {
									tmpRow.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 18;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									tmpRow.SOURCESYSTEM_CD = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									tmpRow.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 19;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									tmpRow.VALUETYPE_CD = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									tmpRow.VALUETYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 20;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									tmpRow.M_APPLIED_PATH = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									tmpRow.M_APPLIED_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 21;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									tmpRow.STAGING_M_APPLIED_PATH = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									tmpRow.STAGING_M_APPLIED_PATH = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							tmpRow = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "tmpRow"
						if (tmpRow != null) {

							/**
							 * [tJDBCOutput_1 main ] start
							 */

							currentComponent = "tJDBCOutput_1";

							whetherReject_tJDBCOutput_1 = false;
							if (tmpRow.TARGET_ID == null) {
								pstmt_tJDBCOutput_1.setNull(1,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tJDBCOutput_1.setInt(1, tmpRow.TARGET_ID);
							}

							if (tmpRow.TREE_LEVEL == null) {
								pstmt_tJDBCOutput_1.setNull(2,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tJDBCOutput_1
										.setInt(2, tmpRow.TREE_LEVEL);
							}

							if (tmpRow.TREE_PATH == null) {
								pstmt_tJDBCOutput_1.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_1.setString(3,
										tmpRow.TREE_PATH);
							}

							if (tmpRow.STAGING_PATH == null) {
								pstmt_tJDBCOutput_1.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_1.setString(4,
										tmpRow.STAGING_PATH);
							}

							if (tmpRow.STAGING_DIMENSION == null) {
								pstmt_tJDBCOutput_1.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_1.setString(5,
										tmpRow.STAGING_DIMENSION);
							}

							if (tmpRow.C_NAME == null) {
								pstmt_tJDBCOutput_1.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_1.setString(6, tmpRow.C_NAME);
							}

							if (tmpRow.STARTDATE_STAGING_PATH == null) {
								pstmt_tJDBCOutput_1.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_1.setString(7,
										tmpRow.STARTDATE_STAGING_PATH);
							}

							if (tmpRow.ENDDATE_STAGING_PATH == null) {
								pstmt_tJDBCOutput_1.setNull(8,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_1.setString(8,
										tmpRow.ENDDATE_STAGING_PATH);
							}

							if (tmpRow.VISUALATTRIBUTES == null) {
								pstmt_tJDBCOutput_1.setNull(9,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_1.setString(9,
										tmpRow.VISUALATTRIBUTES);
							}

							if (tmpRow.BASECODE == null) {
								pstmt_tJDBCOutput_1.setNull(10,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_1.setString(10,
										tmpRow.BASECODE);
							}

							if (tmpRow.METADATAXML == null) {
								pstmt_tJDBCOutput_1.setNull(11,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_1.setString(11,
										tmpRow.METADATAXML);
							}

							if (tmpRow.COLUMNDATATYPE == null) {
								pstmt_tJDBCOutput_1.setNull(12,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_1.setString(12,
										tmpRow.COLUMNDATATYPE);
							}

							if (tmpRow.C_OPERATOR == null) {
								pstmt_tJDBCOutput_1.setNull(13,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_1.setString(13,
										tmpRow.C_OPERATOR);
							}

							if (tmpRow.C_COMMENT == null) {
								pstmt_tJDBCOutput_1.setNull(14,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_1.setString(14,
										tmpRow.C_COMMENT);
							}

							if (tmpRow.TOOLTIP == null) {
								pstmt_tJDBCOutput_1.setNull(15,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_1.setString(15,
										tmpRow.TOOLTIP);
							}

							if (tmpRow.UPDATE_DATE != null) {
								pstmt_tJDBCOutput_1.setTimestamp(16,
										new java.sql.Timestamp(
												tmpRow.UPDATE_DATE.getTime()));
							} else {
								pstmt_tJDBCOutput_1.setNull(16,
										java.sql.Types.DATE);
							}

							if (tmpRow.DOWNLOAD_DATE != null) {
								pstmt_tJDBCOutput_1
										.setTimestamp(
												17,
												new java.sql.Timestamp(
														tmpRow.DOWNLOAD_DATE
																.getTime()));
							} else {
								pstmt_tJDBCOutput_1.setNull(17,
										java.sql.Types.DATE);
							}

							if (tmpRow.IMPORT_DATE != null) {
								pstmt_tJDBCOutput_1.setTimestamp(18,
										new java.sql.Timestamp(
												tmpRow.IMPORT_DATE.getTime()));
							} else {
								pstmt_tJDBCOutput_1.setNull(18,
										java.sql.Types.DATE);
							}

							if (tmpRow.SOURCESYSTEM_CD == null) {
								pstmt_tJDBCOutput_1.setNull(19,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_1.setString(19,
										tmpRow.SOURCESYSTEM_CD);
							}

							if (tmpRow.VALUETYPE_CD == null) {
								pstmt_tJDBCOutput_1.setNull(20,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_1.setString(20,
										tmpRow.VALUETYPE_CD);
							}

							if (tmpRow.M_APPLIED_PATH == null) {
								pstmt_tJDBCOutput_1.setNull(21,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_1.setString(21,
										tmpRow.M_APPLIED_PATH);
							}

							if (tmpRow.STAGING_M_APPLIED_PATH == null) {
								pstmt_tJDBCOutput_1.setNull(22,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_1.setString(22,
										tmpRow.STAGING_M_APPLIED_PATH);
							}

							pstmt_tJDBCOutput_1.addBatch();
							nb_line_tJDBCOutput_1++;

							batchSizeCounter_tJDBCOutput_1++;
							if (!whetherReject_tJDBCOutput_1) {
							}
							if (batchSize_tJDBCOutput_1 <= batchSizeCounter_tJDBCOutput_1) {
								int[] status_tJDBCOutput_1 = null;
								int countSum_tJDBCOutput_1 = 0;
								try {
									batchSizeCounter_tJDBCOutput_1 = 0;

									status_tJDBCOutput_1 = pstmt_tJDBCOutput_1
											.executeBatch();

									for (int countEach_tJDBCOutput_1 : status_tJDBCOutput_1) {
										countSum_tJDBCOutput_1 += (countEach_tJDBCOutput_1 < 0 ? 0
												: countEach_tJDBCOutput_1);
									}
								} catch (java.sql.BatchUpdateException e) {

									for (int countEach_tJDBCOutput_1 : e
											.getUpdateCounts()) {
										countSum_tJDBCOutput_1 += (countEach_tJDBCOutput_1 < 0 ? 0
												: countEach_tJDBCOutput_1);
									}

									System.err.println(e.getMessage());

								}
								try {
									tmp_batchUpdateCount_tJDBCOutput_1 = pstmt_tJDBCOutput_1
											.getUpdateCount();
								} catch (java.sql.SQLException e) {

								}
								tmp_batchUpdateCount_tJDBCOutput_1 = tmp_batchUpdateCount_tJDBCOutput_1 > countSum_tJDBCOutput_1 ? tmp_batchUpdateCount_tJDBCOutput_1
										: countSum_tJDBCOutput_1;

								insertedCount_tJDBCOutput_1 += tmp_batchUpdateCount_tJDBCOutput_1;

							}

							commitCounter_tJDBCOutput_1++;
							if (commitEvery_tJDBCOutput_1 <= commitCounter_tJDBCOutput_1) {

								connection_tJDBCOutput_1.commit();
								commitCounter_tJDBCOutput_1 = 0;
							}

							tos_count_tJDBCOutput_1++;

							/**
							 * [tJDBCOutput_1 main ] stop
							 */

						} // End of branch "tmpRow"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						nb_line_tFileInputDelimited_1++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_1 != null) {
							csvReadertFileInputDelimited_1.close();
						}
					}
					if (csvReadertFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								nb_line_tFileInputDelimited_1);
					}

				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tJDBCOutput_1 end ] start
				 */

				currentComponent = "tJDBCOutput_1";

				int[] status_tJDBCOutput_1 = null;
				int countSum_tJDBCOutput_1 = 0;
				try {
					if (pstmt_tJDBCOutput_1 != null
							&& batchSizeCounter_tJDBCOutput_1 > 0) {

						status_tJDBCOutput_1 = pstmt_tJDBCOutput_1
								.executeBatch();

						for (int countEach_tJDBCOutput_1 : status_tJDBCOutput_1) {
							countSum_tJDBCOutput_1 += (countEach_tJDBCOutput_1 < 0 ? 0
									: countEach_tJDBCOutput_1);
						}
					}
				} catch (java.sql.BatchUpdateException e) {

					for (int countEach_tJDBCOutput_1 : e.getUpdateCounts()) {
						countSum_tJDBCOutput_1 += (countEach_tJDBCOutput_1 < 0 ? 0
								: countEach_tJDBCOutput_1);
					}
					System.err.println(e.getMessage());

				}
				if (pstmt_tJDBCOutput_1 != null
						&& batchSizeCounter_tJDBCOutput_1 > 0) {
					try {
						tmp_batchUpdateCount_tJDBCOutput_1 = pstmt_tJDBCOutput_1
								.getUpdateCount();
					} catch (java.sql.SQLException e) {

					}
					tmp_batchUpdateCount_tJDBCOutput_1 = tmp_batchUpdateCount_tJDBCOutput_1 > countSum_tJDBCOutput_1 ? tmp_batchUpdateCount_tJDBCOutput_1
							: countSum_tJDBCOutput_1;

					insertedCount_tJDBCOutput_1 += tmp_batchUpdateCount_tJDBCOutput_1;

				}
				if (pstmt_tJDBCOutput_1 != null) {

					pstmt_tJDBCOutput_1.close();

				}

				if (commitCounter_tJDBCOutput_1 > 0) {

					connection_tJDBCOutput_1.commit();

				}

				connection_tJDBCOutput_1.close();

				resourceMap.put("finish_tJDBCOutput_1", true);

				nb_line_deleted_tJDBCOutput_1 = nb_line_deleted_tJDBCOutput_1
						+ deletedCount_tJDBCOutput_1;
				nb_line_update_tJDBCOutput_1 = nb_line_update_tJDBCOutput_1
						+ updatedCount_tJDBCOutput_1;
				nb_line_inserted_tJDBCOutput_1 = nb_line_inserted_tJDBCOutput_1
						+ insertedCount_tJDBCOutput_1;
				nb_line_rejected_tJDBCOutput_1 = nb_line_rejected_tJDBCOutput_1
						+ rejectedCount_tJDBCOutput_1;

				globalMap.put("tJDBCOutput_1_NB_LINE", nb_line_tJDBCOutput_1);
				globalMap.put("tJDBCOutput_1_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_1);
				globalMap.put("tJDBCOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_1);
				globalMap.put("tJDBCOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_1);
				globalMap.put("tJDBCOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_1);

				ok_Hash.put("tJDBCOutput_1", true);
				end_Hash.put("tJDBCOutput_1", System.currentTimeMillis());

				tJava_5Process(globalMap);

				/**
				 * [tJDBCOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tJDBCOutput_1 finally ] start
				 */

				currentComponent = "tJDBCOutput_1";

				if (resourceMap.get("finish_tJDBCOutput_1") == null) {
					if (resourceMap.get("conn_tJDBCOutput_1") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tJDBCOutput_1")).close();

						} catch (java.sql.SQLException sqlEx_tJDBCOutput_1) {
							String errorMessage_tJDBCOutput_1 = "failed to close the connection in tJDBCOutput_1 :"
									+ sqlEx_tJDBCOutput_1.getMessage();

							System.err.println(errorMessage_tJDBCOutput_1);
						}
					}
				}

				/**
				 * [tJDBCOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_7 begin ] start
				 */

				ok_Hash.put("tJava_7", false);
				start_Hash.put("tJava_7", System.currentTimeMillis());

				currentComponent = "tJava_7";

				int tos_count_tJava_7 = 0;

				context.ErrorMessage = "Error while writing target ontology to database.";
				System.out.println("--#ERROR#--");
				System.out.println(((String) globalMap
						.get("tOracleOutput_1_QUERY")));
				System.out.println(((String) globalMap
						.get("tOracleOutput_1_ERROR_MESSAGE")));
				System.out.println(((Integer) globalMap
						.get("tOracleOutput_1_NB_LINE")));
				System.out.println(((Integer) globalMap
						.get("tOracleOutput_1_NB_LINE_INSERTED")));

				/**
				 * [tJava_7 begin ] stop
				 */

				/**
				 * [tJava_7 main ] start
				 */

				currentComponent = "tJava_7";

				tos_count_tJava_7++;

				/**
				 * [tJava_7 main ] stop
				 */

				/**
				 * [tJava_7 end ] start
				 */

				currentComponent = "tJava_7";

				ok_Hash.put("tJava_7", true);
				end_Hash.put("tJava_7", System.currentTimeMillis());

				tJava_12Process(globalMap);

				/**
				 * [tJava_7 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_7 finally ] start
				 */

				currentComponent = "tJava_7";

				/**
				 * [tJava_7 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_7_SUBPROCESS_STATE", 1);
	}

	public void tJava_12Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_12 begin ] start
				 */

				ok_Hash.put("tJava_12", false);
				start_Hash.put("tJava_12", System.currentTimeMillis());

				currentComponent = "tJava_12";

				int tos_count_tJava_12 = 0;

				if (true) {
					((TOSHandler) context.TOSHandler)
							.status("Deleting TOS tmp file.");

				}

				/**
				 * [tJava_12 begin ] stop
				 */

				/**
				 * [tJava_12 main ] start
				 */

				currentComponent = "tJava_12";

				tos_count_tJava_12++;

				/**
				 * [tJava_12 main ] stop
				 */

				/**
				 * [tJava_12 end ] start
				 */

				currentComponent = "tJava_12";

				ok_Hash.put("tJava_12", true);
				end_Hash.put("tJava_12", System.currentTimeMillis());

				/**
				 * [tJava_12 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_12 finally ] start
				 */

				currentComponent = "tJava_12";

				/**
				 * [tJava_12 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_12_SUBPROCESS_STATE", 1);
	}

	public void tJava_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_5 begin ] start
				 */

				ok_Hash.put("tJava_5", false);
				start_Hash.put("tJava_5", System.currentTimeMillis());

				currentComponent = "tJava_5";

				int tos_count_tJava_5 = 0;

				((TOSHandler) context.TOSHandler)
						.status("tJDBCOutput_1_NB_LINE_INSERTED: "
								+ ((Integer) globalMap
										.get("tJDBCOutput_1_NB_LINE_INSERTED")));

				context.StatusMessage = "Target I2B2 ontology saved ("
						+ ((Integer) globalMap
								.get("tJDBCOutput_1_NB_LINE_INSERTED"))
						+ " lines).";

				((TOSHandler) context.TOSHandler)
						.statusSuccess(context.StatusMessage);
				System.out.println(context.StatusMessage);

				System.out
						.println("Error1: "
								+ ((String) globalMap
										.get("tJDBCInput_1_ERROR_MESSAGE")));

				/**
				 * [tJava_5 begin ] stop
				 */

				/**
				 * [tJava_5 main ] start
				 */

				currentComponent = "tJava_5";

				tos_count_tJava_5++;

				/**
				 * [tJava_5 main ] stop
				 */

				/**
				 * [tJava_5 end ] start
				 */

				currentComponent = "tJava_5";

				ok_Hash.put("tJava_5", true);
				end_Hash.put("tJava_5", System.currentTimeMillis());

				/**
				 * [tJava_5 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_5:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_12Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_5 finally ] start
				 */

				currentComponent = "tJava_5";

				/**
				 * [tJava_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}

	public void tJava_20Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_20_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_20 begin ] start
				 */

				ok_Hash.put("tJava_20", false);
				start_Hash.put("tJava_20", System.currentTimeMillis());

				currentComponent = "tJava_20";

				int tos_count_tJava_20 = 0;

				if (context.DB_StagingI2B2_WHType.equalsIgnoreCase("i2b2"))
					context.currentQuery = "DELETE FROM "
							+ context.DB_StagingI2B2_Schema + "."
							+ context.TableIEOTargetOntology
							+ "  WHERE target_id = '" + context.TargetID + "'";
				else {
					context.currentQuery = "DELETE FROM i2b2metadata."
							+ context.TableIEOTargetOntology
							+ "  WHERE target_id = '" + context.TargetID + "'";

				}

				/**
				 * [tJava_20 begin ] stop
				 */

				/**
				 * [tJava_20 main ] start
				 */

				currentComponent = "tJava_20";

				tos_count_tJava_20++;

				/**
				 * [tJava_20 main ] stop
				 */

				/**
				 * [tJava_20 end ] start
				 */

				currentComponent = "tJava_20";

				ok_Hash.put("tJava_20", true);
				end_Hash.put("tJava_20", System.currentTimeMillis());

				/**
				 * [tJava_20 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_20:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCRow_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_20 finally ] start
				 */

				currentComponent = "tJava_20";

				/**
				 * [tJava_20 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_20_SUBPROCESS_STATE", 1);
	}

	public void tJDBCRow_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCRow_1 begin ] start
				 */

				ok_Hash.put("tJDBCRow_1", false);
				start_Hash.put("tJDBCRow_1", System.currentTimeMillis());

				currentComponent = "tJDBCRow_1";

				int tos_count_tJDBCRow_1 = 0;

				java.sql.Connection conn_tJDBCRow_1 = null;
				String query_tJDBCRow_1 = "";
				boolean whetherReject_tJDBCRow_1 = false;
				String driverClass_tJDBCRow_1 = context.DB_StagingI2B2_DriverClass;
				java.lang.Class.forName(driverClass_tJDBCRow_1);

				String url_tJDBCRow_1 = context.DB_StagingI2B2_jdbcurl;

				String dbUser_tJDBCRow_1 = context.DB_StagingI2B2_Username;

				final String decryptedPassword_tJDBCRow_1 = context.DB_StagingI2B2_Password;

				String dbPwd_tJDBCRow_1 = decryptedPassword_tJDBCRow_1;

				conn_tJDBCRow_1 = java.sql.DriverManager.getConnection(
						url_tJDBCRow_1, dbUser_tJDBCRow_1, dbPwd_tJDBCRow_1);

				if (conn_tJDBCRow_1.getAutoCommit()) {

					conn_tJDBCRow_1.setAutoCommit(false);

				}
				int commitEvery_tJDBCRow_1 = 10000;
				int commitCounter_tJDBCRow_1 = 0;

				java.sql.Statement stmt_tJDBCRow_1 = conn_tJDBCRow_1
						.createStatement();

				/**
				 * [tJDBCRow_1 begin ] stop
				 */

				/**
				 * [tJDBCRow_1 main ] start
				 */

				currentComponent = "tJDBCRow_1";

				query_tJDBCRow_1 = context.currentQuery;
				whetherReject_tJDBCRow_1 = false;
				globalMap.put("tJDBCRow_1_QUERY", query_tJDBCRow_1);
				try {
					stmt_tJDBCRow_1.execute(query_tJDBCRow_1);

				} catch (java.lang.Exception e) {
					whetherReject_tJDBCRow_1 = true;

					System.err.print(e.getMessage());

				}

				commitCounter_tJDBCRow_1++;
				if (commitEvery_tJDBCRow_1 <= commitCounter_tJDBCRow_1) {

					conn_tJDBCRow_1.commit();

					commitCounter_tJDBCRow_1 = 0;
				}

				tos_count_tJDBCRow_1++;

				/**
				 * [tJDBCRow_1 main ] stop
				 */

				/**
				 * [tJDBCRow_1 end ] start
				 */

				currentComponent = "tJDBCRow_1";

				stmt_tJDBCRow_1.close();
				if (commitEvery_tJDBCRow_1 > commitCounter_tJDBCRow_1) {

					conn_tJDBCRow_1.commit();

					commitCounter_tJDBCRow_1 = 0;

				}
				conn_tJDBCRow_1.close();

				ok_Hash.put("tJDBCRow_1", true);
				end_Hash.put("tJDBCRow_1", System.currentTimeMillis());

				/**
				 * [tJDBCRow_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCRow_1 finally ] start
				 */

				currentComponent = "tJDBCRow_1";

				/**
				 * [tJDBCRow_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCRow_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_19Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_19_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_19 begin ] start
				 */

				ok_Hash.put("tJava_19", false);
				start_Hash.put("tJava_19", System.currentTimeMillis());

				currentComponent = "tJava_19";

				int tos_count_tJava_19 = 0;

				if (context.DB_StagingI2B2_WHType.equalsIgnoreCase("i2b2"))
					context.currentQuery = "SELECT * FROM "
							+ context.DB_StagingI2B2_Schema
							+ "."
							+ context.TableIEOTargetOntology
							+ " WHERE TARGET_ID = '"
							+ context.TargetID
							+ "' ORDER BY M_APPLIED_PATH, tree_level,tree_path ASC";
				else {
					context.currentQuery = "SELECT * FROM i2b2metadata."
							+ context.TableIEOTargetOntology
							+ " WHERE TARGET_ID = '"
							+ context.TargetID
							+ "' ORDER BY M_APPLIED_PATH, tree_level,tree_path ASC";

				}

				/**
				 * [tJava_19 begin ] stop
				 */

				/**
				 * [tJava_19 main ] start
				 */

				currentComponent = "tJava_19";

				tos_count_tJava_19++;

				/**
				 * [tJava_19 main ] stop
				 */

				/**
				 * [tJava_19 end ] start
				 */

				currentComponent = "tJava_19";

				ok_Hash.put("tJava_19", true);
				end_Hash.put("tJava_19", System.currentTimeMillis());

				/**
				 * [tJava_19 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_19:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCInput_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_19 finally ] start
				 */

				currentComponent = "tJava_19";

				/**
				 * [tJava_19 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_19_SUBPROCESS_STATE", 1);
	}

	public static class rTargetOntologyStruct implements
			routines.system.IPersistableRow<rTargetOntologyStruct> {
		final static byte[] commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTConnector = new byte[0];
		static byte[] commonByteArray_I2B2_POSTGRES2_TOSIDRTConnector = new byte[0];

		public Integer TARGET_ID;

		public Integer getTARGET_ID() {
			return this.TARGET_ID;
		}

		public Integer TREE_LEVEL;

		public Integer getTREE_LEVEL() {
			return this.TREE_LEVEL;
		}

		public String TREE_PATH;

		public String getTREE_PATH() {
			return this.TREE_PATH;
		}

		public String STAGING_PATH;

		public String getSTAGING_PATH() {
			return this.STAGING_PATH;
		}

		public String STAGING_DIMENSION;

		public String getSTAGING_DIMENSION() {
			return this.STAGING_DIMENSION;
		}

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		public String STARTDATE_STAGING_PATH;

		public String getSTARTDATE_STAGING_PATH() {
			return this.STARTDATE_STAGING_PATH;
		}

		public String ENDDATE_STAGING_PATH;

		public String getENDDATE_STAGING_PATH() {
			return this.ENDDATE_STAGING_PATH;
		}

		public String VISUALATTRIBUTES;

		public String getVISUALATTRIBUTES() {
			return this.VISUALATTRIBUTES;
		}

		public String BASECODE;

		public String getBASECODE() {
			return this.BASECODE;
		}

		public String METADATAXML;

		public String getMETADATAXML() {
			return this.METADATAXML;
		}

		public String COLUMNDATATYPE;

		public String getCOLUMNDATATYPE() {
			return this.COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String TOOLTIP;

		public String getTOOLTIP() {
			return this.TOOLTIP;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public String STAGING_M_APPLIED_PATH;

		public String getSTAGING_M_APPLIED_PATH() {
			return this.STAGING_M_APPLIED_PATH;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_I2B2_POSTGRES2_TOSIDRTConnector.length) {
					if (length < 1024
							&& commonByteArray_I2B2_POSTGRES2_TOSIDRTConnector.length == 0) {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTConnector = new byte[1024];
					} else {
						commonByteArray_I2B2_POSTGRES2_TOSIDRTConnector = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_I2B2_POSTGRES2_TOSIDRTConnector,
						0, length);
				strReturn = new String(
						commonByteArray_I2B2_POSTGRES2_TOSIDRTConnector, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_I2B2_POSTGRES2_TOSIDRTConnector) {

				try {

					int length = 0;

					this.TARGET_ID = readInteger(dis);

					this.TREE_LEVEL = readInteger(dis);

					this.TREE_PATH = readString(dis);

					this.STAGING_PATH = readString(dis);

					this.STAGING_DIMENSION = readString(dis);

					this.NAME = readString(dis);

					this.STARTDATE_STAGING_PATH = readString(dis);

					this.ENDDATE_STAGING_PATH = readString(dis);

					this.VISUALATTRIBUTES = readString(dis);

					this.BASECODE = readString(dis);

					this.METADATAXML = readString(dis);

					this.COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_COMMENT = readString(dis);

					this.TOOLTIP = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.STAGING_M_APPLIED_PATH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.TARGET_ID, dos);

				// Integer

				writeInteger(this.TREE_LEVEL, dos);

				// String

				writeString(this.TREE_PATH, dos);

				// String

				writeString(this.STAGING_PATH, dos);

				// String

				writeString(this.STAGING_DIMENSION, dos);

				// String

				writeString(this.NAME, dos);

				// String

				writeString(this.STARTDATE_STAGING_PATH, dos);

				// String

				writeString(this.ENDDATE_STAGING_PATH, dos);

				// String

				writeString(this.VISUALATTRIBUTES, dos);

				// String

				writeString(this.BASECODE, dos);

				// String

				writeString(this.METADATAXML, dos);

				// String

				writeString(this.COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.TOOLTIP, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// String

				writeString(this.STAGING_M_APPLIED_PATH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TARGET_ID=" + String.valueOf(TARGET_ID));
			sb.append(",TREE_LEVEL=" + String.valueOf(TREE_LEVEL));
			sb.append(",TREE_PATH=" + TREE_PATH);
			sb.append(",STAGING_PATH=" + STAGING_PATH);
			sb.append(",STAGING_DIMENSION=" + STAGING_DIMENSION);
			sb.append(",NAME=" + NAME);
			sb.append(",STARTDATE_STAGING_PATH=" + STARTDATE_STAGING_PATH);
			sb.append(",ENDDATE_STAGING_PATH=" + ENDDATE_STAGING_PATH);
			sb.append(",VISUALATTRIBUTES=" + VISUALATTRIBUTES);
			sb.append(",BASECODE=" + BASECODE);
			sb.append(",METADATAXML=" + METADATAXML);
			sb.append(",COLUMNDATATYPE=" + COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",TOOLTIP=" + TOOLTIP);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",STAGING_M_APPLIED_PATH=" + STAGING_M_APPLIED_PATH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(rTargetOntologyStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				rTargetOntologyStruct rTargetOntology = new rTargetOntologyStruct();

				/**
				 * [tJavaFlex_7 begin ] start
				 */

				ok_Hash.put("tJavaFlex_7", false);
				start_Hash.put("tJavaFlex_7", System.currentTimeMillis());

				currentComponent = "tJavaFlex_7";

				int tos_count_tJavaFlex_7 = 0;

				TOSHandler
						.status("Starting TOS-Job \"LoadTargetOntology\" (TargetID="
								+ context.TargetID + ").");

				/**
				 * [tJavaFlex_7 begin ] stop
				 */

				/**
				 * [tJDBCInput_3 begin ] start
				 */

				ok_Hash.put("tJDBCInput_3", false);
				start_Hash.put("tJDBCInput_3", System.currentTimeMillis());

				currentComponent = "tJDBCInput_3";

				int tos_count_tJDBCInput_3 = 0;

				int nb_line_tJDBCInput_3 = 0;
				java.sql.Connection conn_tJDBCInput_3 = null;
				String driverClass_tJDBCInput_3 = context.DB_StagingI2B2_DriverClass;
				java.lang.Class.forName(driverClass_tJDBCInput_3);

				String url_tJDBCInput_3 = context.DB_StagingI2B2_jdbcurl;
				String dbUser_tJDBCInput_3 = context.DB_StagingI2B2_Username;

				final String decryptedPassword_tJDBCInput_3 = context.DB_StagingI2B2_Password;

				String dbPwd_tJDBCInput_3 = decryptedPassword_tJDBCInput_3;

				conn_tJDBCInput_3 = java.sql.DriverManager.getConnection(
						url_tJDBCInput_3, dbUser_tJDBCInput_3,
						dbPwd_tJDBCInput_3);

				java.sql.Statement stmt_tJDBCInput_3 = conn_tJDBCInput_3
						.createStatement();

				String dbquery_tJDBCInput_3 = context.currentQuery;

				globalMap.put("tJDBCInput_3_QUERY", dbquery_tJDBCInput_3);
				java.sql.ResultSet rs_tJDBCInput_3 = null;
				try {
					rs_tJDBCInput_3 = stmt_tJDBCInput_3
							.executeQuery(dbquery_tJDBCInput_3);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_3 = rs_tJDBCInput_3
							.getMetaData();
					int colQtyInRs_tJDBCInput_3 = rsmd_tJDBCInput_3
							.getColumnCount();

					String tmpContent_tJDBCInput_3 = null;

					while (rs_tJDBCInput_3.next()) {
						nb_line_tJDBCInput_3++;

						if (colQtyInRs_tJDBCInput_3 < 1) {
							rTargetOntology.TARGET_ID = null;
						} else {

							if (rs_tJDBCInput_3.getObject(1) != null) {
								rTargetOntology.TARGET_ID = rs_tJDBCInput_3
										.getInt(1);
							} else {
								rTargetOntology.TARGET_ID = null;
							}
						}
						if (colQtyInRs_tJDBCInput_3 < 2) {
							rTargetOntology.TREE_LEVEL = null;
						} else {

							if (rs_tJDBCInput_3.getObject(2) != null) {
								rTargetOntology.TREE_LEVEL = rs_tJDBCInput_3
										.getInt(2);
							} else {
								rTargetOntology.TREE_LEVEL = null;
							}
						}
						if (colQtyInRs_tJDBCInput_3 < 3) {
							rTargetOntology.TREE_PATH = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(3);
							if (tmpContent_tJDBCInput_3 != null) {
								rTargetOntology.TREE_PATH = tmpContent_tJDBCInput_3;
							} else {
								rTargetOntology.TREE_PATH = null;
							}
						}
						if (colQtyInRs_tJDBCInput_3 < 4) {
							rTargetOntology.STAGING_PATH = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(4);
							if (tmpContent_tJDBCInput_3 != null) {
								rTargetOntology.STAGING_PATH = tmpContent_tJDBCInput_3;
							} else {
								rTargetOntology.STAGING_PATH = null;
							}
						}
						if (colQtyInRs_tJDBCInput_3 < 5) {
							rTargetOntology.STAGING_DIMENSION = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(5);
							if (tmpContent_tJDBCInput_3 != null) {
								rTargetOntology.STAGING_DIMENSION = tmpContent_tJDBCInput_3;
							} else {
								rTargetOntology.STAGING_DIMENSION = null;
							}
						}
						if (colQtyInRs_tJDBCInput_3 < 6) {
							rTargetOntology.NAME = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(6);
							if (tmpContent_tJDBCInput_3 != null) {
								rTargetOntology.NAME = tmpContent_tJDBCInput_3;
							} else {
								rTargetOntology.NAME = null;
							}
						}
						if (colQtyInRs_tJDBCInput_3 < 7) {
							rTargetOntology.STARTDATE_STAGING_PATH = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(7);
							if (tmpContent_tJDBCInput_3 != null) {
								rTargetOntology.STARTDATE_STAGING_PATH = tmpContent_tJDBCInput_3;
							} else {
								rTargetOntology.STARTDATE_STAGING_PATH = null;
							}
						}
						if (colQtyInRs_tJDBCInput_3 < 8) {
							rTargetOntology.ENDDATE_STAGING_PATH = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(8);
							if (tmpContent_tJDBCInput_3 != null) {
								rTargetOntology.ENDDATE_STAGING_PATH = tmpContent_tJDBCInput_3;
							} else {
								rTargetOntology.ENDDATE_STAGING_PATH = null;
							}
						}
						if (colQtyInRs_tJDBCInput_3 < 9) {
							rTargetOntology.VISUALATTRIBUTES = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(9);
							if (tmpContent_tJDBCInput_3 != null) {
								rTargetOntology.VISUALATTRIBUTES = tmpContent_tJDBCInput_3;
							} else {
								rTargetOntology.VISUALATTRIBUTES = null;
							}
						}
						if (colQtyInRs_tJDBCInput_3 < 10) {
							rTargetOntology.BASECODE = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(10);
							if (tmpContent_tJDBCInput_3 != null) {
								rTargetOntology.BASECODE = tmpContent_tJDBCInput_3;
							} else {
								rTargetOntology.BASECODE = null;
							}
						}
						if (colQtyInRs_tJDBCInput_3 < 11) {
							rTargetOntology.METADATAXML = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(11);
							if (tmpContent_tJDBCInput_3 != null) {
								rTargetOntology.METADATAXML = tmpContent_tJDBCInput_3;
							} else {
								rTargetOntology.METADATAXML = null;
							}
						}
						if (colQtyInRs_tJDBCInput_3 < 12) {
							rTargetOntology.COLUMNDATATYPE = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(12);
							if (tmpContent_tJDBCInput_3 != null) {
								rTargetOntology.COLUMNDATATYPE = tmpContent_tJDBCInput_3;
							} else {
								rTargetOntology.COLUMNDATATYPE = null;
							}
						}
						if (colQtyInRs_tJDBCInput_3 < 13) {
							rTargetOntology.C_OPERATOR = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(13);
							if (tmpContent_tJDBCInput_3 != null) {
								rTargetOntology.C_OPERATOR = tmpContent_tJDBCInput_3;
							} else {
								rTargetOntology.C_OPERATOR = null;
							}
						}
						if (colQtyInRs_tJDBCInput_3 < 14) {
							rTargetOntology.C_COMMENT = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(14);
							if (tmpContent_tJDBCInput_3 != null) {
								rTargetOntology.C_COMMENT = tmpContent_tJDBCInput_3;
							} else {
								rTargetOntology.C_COMMENT = null;
							}
						}
						if (colQtyInRs_tJDBCInput_3 < 15) {
							rTargetOntology.TOOLTIP = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(15);
							if (tmpContent_tJDBCInput_3 != null) {
								rTargetOntology.TOOLTIP = tmpContent_tJDBCInput_3;
							} else {
								rTargetOntology.TOOLTIP = null;
							}
						}
						if (colQtyInRs_tJDBCInput_3 < 16) {
							rTargetOntology.UPDATE_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_3 = null;
							try {
								date_tJDBCInput_3 = rs_tJDBCInput_3
										.getTimestamp(16);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_3 = rs_tJDBCInput_3.getDate(16);
							}
							rTargetOntology.UPDATE_DATE = date_tJDBCInput_3;
						}
						if (colQtyInRs_tJDBCInput_3 < 17) {
							rTargetOntology.DOWNLOAD_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_3 = null;
							try {
								date_tJDBCInput_3 = rs_tJDBCInput_3
										.getTimestamp(17);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_3 = rs_tJDBCInput_3.getDate(17);
							}
							rTargetOntology.DOWNLOAD_DATE = date_tJDBCInput_3;
						}
						if (colQtyInRs_tJDBCInput_3 < 18) {
							rTargetOntology.IMPORT_DATE = null;
						} else {

							java.util.Date date_tJDBCInput_3 = null;
							try {
								date_tJDBCInput_3 = rs_tJDBCInput_3
										.getTimestamp(18);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_3 = rs_tJDBCInput_3.getDate(18);
							}
							rTargetOntology.IMPORT_DATE = date_tJDBCInput_3;
						}
						if (colQtyInRs_tJDBCInput_3 < 19) {
							rTargetOntology.SOURCESYSTEM_CD = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(19);
							if (tmpContent_tJDBCInput_3 != null) {
								rTargetOntology.SOURCESYSTEM_CD = tmpContent_tJDBCInput_3;
							} else {
								rTargetOntology.SOURCESYSTEM_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_3 < 20) {
							rTargetOntology.VALUETYPE_CD = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(20);
							if (tmpContent_tJDBCInput_3 != null) {
								rTargetOntology.VALUETYPE_CD = tmpContent_tJDBCInput_3;
							} else {
								rTargetOntology.VALUETYPE_CD = null;
							}
						}
						if (colQtyInRs_tJDBCInput_3 < 21) {
							rTargetOntology.M_APPLIED_PATH = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(21);
							if (tmpContent_tJDBCInput_3 != null) {
								rTargetOntology.M_APPLIED_PATH = tmpContent_tJDBCInput_3;
							} else {
								rTargetOntology.M_APPLIED_PATH = null;
							}
						}
						if (colQtyInRs_tJDBCInput_3 < 22) {
							rTargetOntology.STAGING_M_APPLIED_PATH = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(22);
							if (tmpContent_tJDBCInput_3 != null) {
								rTargetOntology.STAGING_M_APPLIED_PATH = tmpContent_tJDBCInput_3;
							} else {
								rTargetOntology.STAGING_M_APPLIED_PATH = null;
							}
						}

						/**
						 * [tJDBCInput_3 begin ] stop
						 */

						/**
						 * [tJDBCInput_3 main ] start
						 */

						currentComponent = "tJDBCInput_3";

						tos_count_tJDBCInput_3++;

						/**
						 * [tJDBCInput_3 main ] stop
						 */

						/**
						 * [tJavaFlex_7 main ] start
						 */

						currentComponent = "tJavaFlex_7";

						// System.out.println("META: " +
						// rTargetOntology.METADATAXML);
						// System.out.println();
						TOSHandler.addTargetOntologyItemToTree(
								rTargetOntology.TREE_LEVEL,
								rTargetOntology.TREE_PATH,
								rTargetOntology.STAGING_PATH,
								rTargetOntology.STAGING_DIMENSION,
								rTargetOntology.NAME,
								rTargetOntology.STARTDATE_STAGING_PATH,
								rTargetOntology.ENDDATE_STAGING_PATH,
								rTargetOntology.VISUALATTRIBUTES,
								rTargetOntology.BASECODE,
								rTargetOntology.METADATAXML,
								rTargetOntology.COLUMNDATATYPE,
								rTargetOntology.C_OPERATOR,
								rTargetOntology.C_COMMENT,
								rTargetOntology.TOOLTIP,
								rTargetOntology.UPDATE_DATE,
								rTargetOntology.DOWNLOAD_DATE,
								rTargetOntology.IMPORT_DATE,
								rTargetOntology.SOURCESYSTEM_CD,
								rTargetOntology.VALUETYPE_CD,
								rTargetOntology.M_APPLIED_PATH,
								rTargetOntology.STAGING_M_APPLIED_PATH);

						tos_count_tJavaFlex_7++;

						/**
						 * [tJavaFlex_7 main ] stop
						 */

						/**
						 * [tJDBCInput_3 end ] start
						 */

						currentComponent = "tJDBCInput_3";

					}
				} finally {
					if (rs_tJDBCInput_3 != null) {
						rs_tJDBCInput_3.close();
					}
					stmt_tJDBCInput_3.close();

					if (conn_tJDBCInput_3 != null
							&& !conn_tJDBCInput_3.isClosed()) {

						conn_tJDBCInput_3.close();

					}
				}
				globalMap.put("tJDBCInput_3_NB_LINE", nb_line_tJDBCInput_3);

				ok_Hash.put("tJDBCInput_3", true);
				end_Hash.put("tJDBCInput_3", System.currentTimeMillis());

				/**
				 * [tJDBCInput_3 end ] stop
				 */

				/**
				 * [tJavaFlex_7 end ] start
				 */

				currentComponent = "tJavaFlex_7";

				// end of the component, outside/closing the loop

				ok_Hash.put("tJavaFlex_7", true);
				end_Hash.put("tJavaFlex_7", System.currentTimeMillis());

				tJava_16Process(globalMap);

				/**
				 * [tJavaFlex_7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_3 finally ] start
				 */

				currentComponent = "tJDBCInput_3";

				/**
				 * [tJDBCInput_3 finally ] stop
				 */

				/**
				 * [tJavaFlex_7 finally ] start
				 */

				currentComponent = "tJavaFlex_7";

				/**
				 * [tJavaFlex_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_3_SUBPROCESS_STATE", 1);
	}

	public void tJava_16Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_16 begin ] start
				 */

				ok_Hash.put("tJava_16", false);
				start_Hash.put("tJava_16", System.currentTimeMillis());

				currentComponent = "tJava_16";

				int tos_count_tJava_16 = 0;

				context.StatusMessage = "Target I2B2 loaded ("
						+ ((Integer) globalMap.get("tJDBCInput_3_NB_LINE"))
						+ " lines).";

				((TOSHandler) context.TOSHandler)
						.statusSuccess(context.StatusMessage);
				System.out.println(context.StatusMessage);

				/**
				 * [tJava_16 begin ] stop
				 */

				/**
				 * [tJava_16 main ] start
				 */

				currentComponent = "tJava_16";

				tos_count_tJava_16++;

				/**
				 * [tJava_16 main ] stop
				 */

				/**
				 * [tJava_16 end ] start
				 */

				currentComponent = "tJava_16";

				ok_Hash.put("tJava_16", true);
				end_Hash.put("tJava_16", System.currentTimeMillis());

				/**
				 * [tJava_16 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_16 finally ] start
				 */

				currentComponent = "tJava_16";

				/**
				 * [tJava_16 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_16_SUBPROCESS_STATE", 1);
	}

	public void tJava_8Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_8 begin ] start
				 */

				ok_Hash.put("tJava_8", false);
				start_Hash.put("tJava_8", System.currentTimeMillis());

				currentComponent = "tJava_8";

				int tos_count_tJava_8 = 0;

				TOSHandler
						.status("Starting external TOS-Job \"etlStagingI2B2ToTargetI2B2\".");

				/**
				 * [tJava_8 begin ] stop
				 */

				/**
				 * [tJava_8 main ] start
				 */

				currentComponent = "tJava_8";

				tos_count_tJava_8++;

				/**
				 * [tJava_8 main ] stop
				 */

				/**
				 * [tJava_8 end ] start
				 */

				currentComponent = "tJava_8";

				ok_Hash.put("tJava_8", true);
				end_Hash.put("tJava_8", System.currentTimeMillis());

				if (context.IndexStop) {

					tRunJob_6Process(globalMap);
				}

				if (context.IndexDrop) {

					tRunJob_7Process(globalMap);
				}

				/**
				 * [tJava_8 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_8:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tRunJob_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_8 finally ] start
				 */

				currentComponent = "tJava_8";

				/**
				 * [tJava_8 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_8_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_6 begin ] start
				 */

				ok_Hash.put("tRunJob_6", false);
				start_Hash.put("tRunJob_6", System.currentTimeMillis());

				currentComponent = "tRunJob_6";

				int tos_count_tRunJob_6 = 0;

				/**
				 * [tRunJob_6 begin ] stop
				 */

				/**
				 * [tRunJob_6 main ] start
				 */

				currentComponent = "tRunJob_6";

				java.util.List<String> paraList_tRunJob_6 = new java.util.ArrayList<String>();

				paraList_tRunJob_6.add("--father_pid=" + pid);

				paraList_tRunJob_6.add("--root_pid=" + rootPid);

				paraList_tRunJob_6.add("--father_node=tRunJob_6");

				paraList_tRunJob_6.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_6.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_6.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_6 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_6 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_6".equals(tRunJobName_tRunJob_6)
						&& childResumePath_tRunJob_6 != null) {
					paraList_tRunJob_6
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_6.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_6");

				java.util.Map<String, Object> parentContextMap_tRunJob_6 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_6 = context
						.propertyNames();
				while (propertyNames_tRunJob_6.hasMoreElements()) {
					String key_tRunJob_6 = (String) propertyNames_tRunJob_6
							.nextElement();
					Object value_tRunJob_6 = (Object) context
							.get(key_tRunJob_6);
					paraList_tRunJob_6.add("--context_param " + key_tRunJob_6
							+ "=" + value_tRunJob_6);
				}

				parentContextMap_tRunJob_6.put("Var1", context.Var1);

				parentContextMap_tRunJob_6.put("Var2", context.Var2);

				parentContextMap_tRunJob_6.put("Var3", context.Var3);

				parentContextMap_tRunJob_6.put("currentQuery",
						context.currentQuery);

				parentContextMap_tRunJob_6.put("IndexDrop", context.IndexDrop);

				parentContextMap_tRunJob_6.put("IndexStop", context.IndexStop);

				parentContextMap_tRunJob_6.put("truncateProject",
						context.truncateProject);

				parentContextMap_tRunJob_6.put("truncateQueries",
						context.truncateQueries);

				parentContextMap_tRunJob_6.put("DB_StagingI2B2_DatabaseType",
						context.DB_StagingI2B2_DatabaseType);

				parentContextMap_tRunJob_6.put("DB_StagingI2B2_DriverClass",
						context.DB_StagingI2B2_DriverClass);

				parentContextMap_tRunJob_6.put("DB_StagingI2B2_Host",
						context.DB_StagingI2B2_Host);

				parentContextMap_tRunJob_6.put("DB_StagingI2B2_Instance",
						context.DB_StagingI2B2_Instance);

				parentContextMap_tRunJob_6.put("DB_StagingI2B2_jdbcurl",
						context.DB_StagingI2B2_jdbcurl);

				parentContextMap_tRunJob_6.put("DB_StagingI2B2_Password",
						context.DB_StagingI2B2_Password);

				parentContextMap_tRunJob_6.put("DB_StagingI2B2_Port",
						context.DB_StagingI2B2_Port);

				parentContextMap_tRunJob_6.put("DB_StagingI2B2_Schema",
						context.DB_StagingI2B2_Schema);

				parentContextMap_tRunJob_6.put("DB_StagingI2B2_Username",
						context.DB_StagingI2B2_Username);

				parentContextMap_tRunJob_6.put("DB_StagingI2B2_WHType",
						context.DB_StagingI2B2_WHType);

				parentContextMap_tRunJob_6.put("DB_TargetI2B2_DatabaseType",
						context.DB_TargetI2B2_DatabaseType);

				parentContextMap_tRunJob_6.put("DB_TargetI2B2_DriverClass",
						context.DB_TargetI2B2_DriverClass);

				parentContextMap_tRunJob_6.put("DB_TargetI2B2_Host",
						context.DB_TargetI2B2_Host);

				parentContextMap_tRunJob_6.put("DB_TargetI2B2_Instance",
						context.DB_TargetI2B2_Instance);

				parentContextMap_tRunJob_6.put("DB_TargetI2B2_jdbcurl",
						context.DB_TargetI2B2_jdbcurl);

				parentContextMap_tRunJob_6.put("DB_TargetI2B2_Password",
						context.DB_TargetI2B2_Password);

				parentContextMap_tRunJob_6.put("DB_TargetI2B2_Port",
						context.DB_TargetI2B2_Port);

				parentContextMap_tRunJob_6.put("DB_TargetI2B2_Schema",
						context.DB_TargetI2B2_Schema);

				parentContextMap_tRunJob_6.put("DB_TargetI2B2_Username",
						context.DB_TargetI2B2_Username);

				parentContextMap_tRunJob_6.put("DB_TargetI2B2_WHType",
						context.DB_TargetI2B2_WHType);

				parentContextMap_tRunJob_6.put("DataFile", context.DataFile);

				parentContextMap_tRunJob_6.put("ErrorMessage",
						context.ErrorMessage);

				parentContextMap_tRunJob_6.put("IfValue", context.IfValue);

				parentContextMap_tRunJob_6.put("JDBC_URL", context.JDBC_URL);

				parentContextMap_tRunJob_6
						.put("JDBCDriver", context.JDBCDriver);

				parentContextMap_tRunJob_6.put("Job", context.Job);

				parentContextMap_tRunJob_6
						.put("SQLCommand", context.SQLCommand);

				parentContextMap_tRunJob_6.put("SQLCommand2",
						context.SQLCommand2);

				parentContextMap_tRunJob_6.put("SQLTable", context.SQLTable);

				parentContextMap_tRunJob_6.put("SQLTable2", context.SQLTable2);

				parentContextMap_tRunJob_6.put("StatusMessage",
						context.StatusMessage);

				parentContextMap_tRunJob_6.put("TableIEOTarget",
						context.TableIEOTarget);

				parentContextMap_tRunJob_6.put("TableIEOTargetOntology",
						context.TableIEOTargetOntology);

				parentContextMap_tRunJob_6.put("TableIEOTargetProject",
						context.TableIEOTargetProject);

				parentContextMap_tRunJob_6.put("TargetID", context.TargetID);

				parentContextMap_tRunJob_6
						.put("TOSHandler", context.TOSHandler);

				Object obj_tRunJob_6 = null;

				obj_tRunJob_6 = context.DB_TargetI2B2_DatabaseType;
				paraList_tRunJob_6
						.add("--context_param DB_StagingI2B2_DatabaseType="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_6));
				parentContextMap_tRunJob_6.put("DB_StagingI2B2_DatabaseType",
						obj_tRunJob_6);

				obj_tRunJob_6 = context.DB_TargetI2B2_DriverClass;
				paraList_tRunJob_6
						.add("--context_param DB_StagingI2B2_DriverClass="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_6));
				parentContextMap_tRunJob_6.put("DB_StagingI2B2_DriverClass",
						obj_tRunJob_6);

				obj_tRunJob_6 = context.DB_TargetI2B2_Host;
				paraList_tRunJob_6.add("--context_param DB_StagingI2B2_Host="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_6));
				parentContextMap_tRunJob_6.put("DB_StagingI2B2_Host",
						obj_tRunJob_6);

				obj_tRunJob_6 = context.DB_TargetI2B2_Instance;
				paraList_tRunJob_6
						.add("--context_param DB_StagingI2B2_Instance="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_6));
				parentContextMap_tRunJob_6.put("DB_StagingI2B2_Instance",
						obj_tRunJob_6);

				obj_tRunJob_6 = context.DB_TargetI2B2_jdbcurl;
				paraList_tRunJob_6
						.add("--context_param DB_StagingI2B2_jdbcurl="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_6));
				parentContextMap_tRunJob_6.put("DB_StagingI2B2_jdbcurl",
						obj_tRunJob_6);

				obj_tRunJob_6 = context.DB_TargetI2B2_Password;
				paraList_tRunJob_6
						.add("--context_param DB_StagingI2B2_Password="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_6));
				parentContextMap_tRunJob_6.put("DB_StagingI2B2_Password",
						obj_tRunJob_6);

				obj_tRunJob_6 = context.DB_TargetI2B2_Port;
				paraList_tRunJob_6.add("--context_param DB_StagingI2B2_Port="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_6));
				parentContextMap_tRunJob_6.put("DB_StagingI2B2_Port",
						obj_tRunJob_6);

				obj_tRunJob_6 = context.DB_TargetI2B2_Schema;
				paraList_tRunJob_6.add("--context_param DB_StagingI2B2_Schema="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_6));
				parentContextMap_tRunJob_6.put("DB_StagingI2B2_Schema",
						obj_tRunJob_6);

				obj_tRunJob_6 = context.DB_TargetI2B2_Username;
				paraList_tRunJob_6
						.add("--context_param DB_StagingI2B2_Username="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_6));
				parentContextMap_tRunJob_6.put("DB_StagingI2B2_Username",
						obj_tRunJob_6);

				i2b2_postgres2.database_stop_indexing_0_1.Database_Stop_Indexing childJob_tRunJob_6 = new i2b2_postgres2.database_stop_indexing_0_1.Database_Stop_Indexing();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_6 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_6) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_6 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_6 : talendDataSources_tRunJob_6
							.entrySet()) {
						dataSources_tRunJob_6.put(
								talendDataSourceEntry_tRunJob_6.getKey(),
								talendDataSourceEntry_tRunJob_6.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_6.setDataSources(dataSources_tRunJob_6);
				}

				childJob_tRunJob_6.parentContextMap = parentContextMap_tRunJob_6;

				String[][] childReturn_tRunJob_6 = childJob_tRunJob_6
						.runJob((String[]) paraList_tRunJob_6
								.toArray(new String[paraList_tRunJob_6.size()]));

				errorCode = childJob_tRunJob_6.getErrorCode();

				if (childJob_tRunJob_6.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_6_CHILD_RETURN_CODE",
							childJob_tRunJob_6.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_6
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_6_CHILD_RETURN_CODE",
							childJob_tRunJob_6.getErrorCode());
				}
				if (childJob_tRunJob_6.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_6_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_6.getExceptionStackTrace());
				}

				if (childJob_tRunJob_6.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_6.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_6++;

				/**
				 * [tRunJob_6 main ] stop
				 */

				/**
				 * [tRunJob_6 end ] start
				 */

				currentComponent = "tRunJob_6";

				ok_Hash.put("tRunJob_6", true);
				end_Hash.put("tRunJob_6", System.currentTimeMillis());

				/**
				 * [tRunJob_6 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_6 finally ] start
				 */

				currentComponent = "tRunJob_6";

				/**
				 * [tRunJob_6 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_6_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_7 begin ] start
				 */

				ok_Hash.put("tRunJob_7", false);
				start_Hash.put("tRunJob_7", System.currentTimeMillis());

				currentComponent = "tRunJob_7";

				int tos_count_tRunJob_7 = 0;

				/**
				 * [tRunJob_7 begin ] stop
				 */

				/**
				 * [tRunJob_7 main ] start
				 */

				currentComponent = "tRunJob_7";

				java.util.List<String> paraList_tRunJob_7 = new java.util.ArrayList<String>();

				paraList_tRunJob_7.add("--father_pid=" + pid);

				paraList_tRunJob_7.add("--root_pid=" + rootPid);

				paraList_tRunJob_7.add("--father_node=tRunJob_7");

				paraList_tRunJob_7.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_7.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_7.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_7 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_7 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_7".equals(tRunJobName_tRunJob_7)
						&& childResumePath_tRunJob_7 != null) {
					paraList_tRunJob_7
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_7.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_7");

				java.util.Map<String, Object> parentContextMap_tRunJob_7 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_7 = context
						.propertyNames();
				while (propertyNames_tRunJob_7.hasMoreElements()) {
					String key_tRunJob_7 = (String) propertyNames_tRunJob_7
							.nextElement();
					Object value_tRunJob_7 = (Object) context
							.get(key_tRunJob_7);
					paraList_tRunJob_7.add("--context_param " + key_tRunJob_7
							+ "=" + value_tRunJob_7);
				}

				parentContextMap_tRunJob_7.put("Var1", context.Var1);

				parentContextMap_tRunJob_7.put("Var2", context.Var2);

				parentContextMap_tRunJob_7.put("Var3", context.Var3);

				parentContextMap_tRunJob_7.put("currentQuery",
						context.currentQuery);

				parentContextMap_tRunJob_7.put("IndexDrop", context.IndexDrop);

				parentContextMap_tRunJob_7.put("IndexStop", context.IndexStop);

				parentContextMap_tRunJob_7.put("truncateProject",
						context.truncateProject);

				parentContextMap_tRunJob_7.put("truncateQueries",
						context.truncateQueries);

				parentContextMap_tRunJob_7.put("DB_StagingI2B2_DatabaseType",
						context.DB_StagingI2B2_DatabaseType);

				parentContextMap_tRunJob_7.put("DB_StagingI2B2_DriverClass",
						context.DB_StagingI2B2_DriverClass);

				parentContextMap_tRunJob_7.put("DB_StagingI2B2_Host",
						context.DB_StagingI2B2_Host);

				parentContextMap_tRunJob_7.put("DB_StagingI2B2_Instance",
						context.DB_StagingI2B2_Instance);

				parentContextMap_tRunJob_7.put("DB_StagingI2B2_jdbcurl",
						context.DB_StagingI2B2_jdbcurl);

				parentContextMap_tRunJob_7.put("DB_StagingI2B2_Password",
						context.DB_StagingI2B2_Password);

				parentContextMap_tRunJob_7.put("DB_StagingI2B2_Port",
						context.DB_StagingI2B2_Port);

				parentContextMap_tRunJob_7.put("DB_StagingI2B2_Schema",
						context.DB_StagingI2B2_Schema);

				parentContextMap_tRunJob_7.put("DB_StagingI2B2_Username",
						context.DB_StagingI2B2_Username);

				parentContextMap_tRunJob_7.put("DB_StagingI2B2_WHType",
						context.DB_StagingI2B2_WHType);

				parentContextMap_tRunJob_7.put("DB_TargetI2B2_DatabaseType",
						context.DB_TargetI2B2_DatabaseType);

				parentContextMap_tRunJob_7.put("DB_TargetI2B2_DriverClass",
						context.DB_TargetI2B2_DriverClass);

				parentContextMap_tRunJob_7.put("DB_TargetI2B2_Host",
						context.DB_TargetI2B2_Host);

				parentContextMap_tRunJob_7.put("DB_TargetI2B2_Instance",
						context.DB_TargetI2B2_Instance);

				parentContextMap_tRunJob_7.put("DB_TargetI2B2_jdbcurl",
						context.DB_TargetI2B2_jdbcurl);

				parentContextMap_tRunJob_7.put("DB_TargetI2B2_Password",
						context.DB_TargetI2B2_Password);

				parentContextMap_tRunJob_7.put("DB_TargetI2B2_Port",
						context.DB_TargetI2B2_Port);

				parentContextMap_tRunJob_7.put("DB_TargetI2B2_Schema",
						context.DB_TargetI2B2_Schema);

				parentContextMap_tRunJob_7.put("DB_TargetI2B2_Username",
						context.DB_TargetI2B2_Username);

				parentContextMap_tRunJob_7.put("DB_TargetI2B2_WHType",
						context.DB_TargetI2B2_WHType);

				parentContextMap_tRunJob_7.put("DataFile", context.DataFile);

				parentContextMap_tRunJob_7.put("ErrorMessage",
						context.ErrorMessage);

				parentContextMap_tRunJob_7.put("IfValue", context.IfValue);

				parentContextMap_tRunJob_7.put("JDBC_URL", context.JDBC_URL);

				parentContextMap_tRunJob_7
						.put("JDBCDriver", context.JDBCDriver);

				parentContextMap_tRunJob_7.put("Job", context.Job);

				parentContextMap_tRunJob_7
						.put("SQLCommand", context.SQLCommand);

				parentContextMap_tRunJob_7.put("SQLCommand2",
						context.SQLCommand2);

				parentContextMap_tRunJob_7.put("SQLTable", context.SQLTable);

				parentContextMap_tRunJob_7.put("SQLTable2", context.SQLTable2);

				parentContextMap_tRunJob_7.put("StatusMessage",
						context.StatusMessage);

				parentContextMap_tRunJob_7.put("TableIEOTarget",
						context.TableIEOTarget);

				parentContextMap_tRunJob_7.put("TableIEOTargetOntology",
						context.TableIEOTargetOntology);

				parentContextMap_tRunJob_7.put("TableIEOTargetProject",
						context.TableIEOTargetProject);

				parentContextMap_tRunJob_7.put("TargetID", context.TargetID);

				parentContextMap_tRunJob_7
						.put("TOSHandler", context.TOSHandler);

				Object obj_tRunJob_7 = null;

				obj_tRunJob_7 = context.DB_TargetI2B2_DatabaseType;
				paraList_tRunJob_7
						.add("--context_param DB_StagingI2B2_DatabaseType="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_7));
				parentContextMap_tRunJob_7.put("DB_StagingI2B2_DatabaseType",
						obj_tRunJob_7);

				obj_tRunJob_7 = context.DB_TargetI2B2_DriverClass;
				paraList_tRunJob_7
						.add("--context_param DB_StagingI2B2_DriverClass="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_7));
				parentContextMap_tRunJob_7.put("DB_StagingI2B2_DriverClass",
						obj_tRunJob_7);

				obj_tRunJob_7 = context.DB_TargetI2B2_Host;
				paraList_tRunJob_7.add("--context_param DB_StagingI2B2_Host="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
				parentContextMap_tRunJob_7.put("DB_StagingI2B2_Host",
						obj_tRunJob_7);

				obj_tRunJob_7 = context.DB_TargetI2B2_Instance;
				paraList_tRunJob_7
						.add("--context_param DB_StagingI2B2_Instance="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_7));
				parentContextMap_tRunJob_7.put("DB_StagingI2B2_Instance",
						obj_tRunJob_7);

				obj_tRunJob_7 = context.DB_TargetI2B2_jdbcurl;
				paraList_tRunJob_7
						.add("--context_param DB_StagingI2B2_jdbcurl="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_7));
				parentContextMap_tRunJob_7.put("DB_StagingI2B2_jdbcurl",
						obj_tRunJob_7);

				obj_tRunJob_7 = context.DB_TargetI2B2_Password;
				paraList_tRunJob_7
						.add("--context_param DB_StagingI2B2_Password="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_7));
				parentContextMap_tRunJob_7.put("DB_StagingI2B2_Password",
						obj_tRunJob_7);

				obj_tRunJob_7 = context.DB_TargetI2B2_Port;
				paraList_tRunJob_7.add("--context_param DB_StagingI2B2_Port="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
				parentContextMap_tRunJob_7.put("DB_StagingI2B2_Port",
						obj_tRunJob_7);

				obj_tRunJob_7 = context.DB_TargetI2B2_Schema;
				paraList_tRunJob_7.add("--context_param DB_StagingI2B2_Schema="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
				parentContextMap_tRunJob_7.put("DB_StagingI2B2_Schema",
						obj_tRunJob_7);

				obj_tRunJob_7 = context.DB_TargetI2B2_Username;
				paraList_tRunJob_7
						.add("--context_param DB_StagingI2B2_Username="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_7));
				parentContextMap_tRunJob_7.put("DB_StagingI2B2_Username",
						obj_tRunJob_7);

				i2b2_postgres2.database_drop_indexing_0_1.Database_Drop_Indexing childJob_tRunJob_7 = new i2b2_postgres2.database_drop_indexing_0_1.Database_Drop_Indexing();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_7 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_7) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_7 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_7 : talendDataSources_tRunJob_7
							.entrySet()) {
						dataSources_tRunJob_7.put(
								talendDataSourceEntry_tRunJob_7.getKey(),
								talendDataSourceEntry_tRunJob_7.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_7.setDataSources(dataSources_tRunJob_7);
				}

				childJob_tRunJob_7.parentContextMap = parentContextMap_tRunJob_7;

				String[][] childReturn_tRunJob_7 = childJob_tRunJob_7
						.runJob((String[]) paraList_tRunJob_7
								.toArray(new String[paraList_tRunJob_7.size()]));

				errorCode = childJob_tRunJob_7.getErrorCode();

				if (childJob_tRunJob_7.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_7_CHILD_RETURN_CODE",
							childJob_tRunJob_7.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_7
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_7_CHILD_RETURN_CODE",
							childJob_tRunJob_7.getErrorCode());
				}
				if (childJob_tRunJob_7.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_7_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_7.getExceptionStackTrace());
				}

				if (childJob_tRunJob_7.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_7.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_7++;

				/**
				 * [tRunJob_7 main ] stop
				 */

				/**
				 * [tRunJob_7 end ] start
				 */

				currentComponent = "tRunJob_7";

				ok_Hash.put("tRunJob_7", true);
				end_Hash.put("tRunJob_7", System.currentTimeMillis());

				/**
				 * [tRunJob_7 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_7 finally ] start
				 */

				currentComponent = "tRunJob_7";

				/**
				 * [tRunJob_7 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_7_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_1 begin ] start
				 */

				ok_Hash.put("tRunJob_1", false);
				start_Hash.put("tRunJob_1", System.currentTimeMillis());

				currentComponent = "tRunJob_1";

				int tos_count_tRunJob_1 = 0;

				/**
				 * [tRunJob_1 begin ] stop
				 */

				/**
				 * [tRunJob_1 main ] start
				 */

				currentComponent = "tRunJob_1";

				java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();

				paraList_tRunJob_1.add("--father_pid=" + pid);

				paraList_tRunJob_1.add("--root_pid=" + rootPid);

				paraList_tRunJob_1.add("--father_node=tRunJob_1");

				paraList_tRunJob_1.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_1.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_1.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_1 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_1 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_1".equals(tRunJobName_tRunJob_1)
						&& childResumePath_tRunJob_1 != null) {
					paraList_tRunJob_1
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_1");

				java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_1 = context
						.propertyNames();
				while (propertyNames_tRunJob_1.hasMoreElements()) {
					String key_tRunJob_1 = (String) propertyNames_tRunJob_1
							.nextElement();
					Object value_tRunJob_1 = (Object) context
							.get(key_tRunJob_1);
					paraList_tRunJob_1.add("--context_param " + key_tRunJob_1
							+ "=" + value_tRunJob_1);
				}

				parentContextMap_tRunJob_1.put("Var1", context.Var1);

				parentContextMap_tRunJob_1.put("Var2", context.Var2);

				parentContextMap_tRunJob_1.put("Var3", context.Var3);

				parentContextMap_tRunJob_1.put("currentQuery",
						context.currentQuery);

				parentContextMap_tRunJob_1.put("IndexDrop", context.IndexDrop);

				parentContextMap_tRunJob_1.put("IndexStop", context.IndexStop);

				parentContextMap_tRunJob_1.put("truncateProject",
						context.truncateProject);

				parentContextMap_tRunJob_1.put("truncateQueries",
						context.truncateQueries);

				parentContextMap_tRunJob_1.put("DB_StagingI2B2_DatabaseType",
						context.DB_StagingI2B2_DatabaseType);

				parentContextMap_tRunJob_1.put("DB_StagingI2B2_DriverClass",
						context.DB_StagingI2B2_DriverClass);

				parentContextMap_tRunJob_1.put("DB_StagingI2B2_Host",
						context.DB_StagingI2B2_Host);

				parentContextMap_tRunJob_1.put("DB_StagingI2B2_Instance",
						context.DB_StagingI2B2_Instance);

				parentContextMap_tRunJob_1.put("DB_StagingI2B2_jdbcurl",
						context.DB_StagingI2B2_jdbcurl);

				parentContextMap_tRunJob_1.put("DB_StagingI2B2_Password",
						context.DB_StagingI2B2_Password);

				parentContextMap_tRunJob_1.put("DB_StagingI2B2_Port",
						context.DB_StagingI2B2_Port);

				parentContextMap_tRunJob_1.put("DB_StagingI2B2_Schema",
						context.DB_StagingI2B2_Schema);

				parentContextMap_tRunJob_1.put("DB_StagingI2B2_Username",
						context.DB_StagingI2B2_Username);

				parentContextMap_tRunJob_1.put("DB_StagingI2B2_WHType",
						context.DB_StagingI2B2_WHType);

				parentContextMap_tRunJob_1.put("DB_TargetI2B2_DatabaseType",
						context.DB_TargetI2B2_DatabaseType);

				parentContextMap_tRunJob_1.put("DB_TargetI2B2_DriverClass",
						context.DB_TargetI2B2_DriverClass);

				parentContextMap_tRunJob_1.put("DB_TargetI2B2_Host",
						context.DB_TargetI2B2_Host);

				parentContextMap_tRunJob_1.put("DB_TargetI2B2_Instance",
						context.DB_TargetI2B2_Instance);

				parentContextMap_tRunJob_1.put("DB_TargetI2B2_jdbcurl",
						context.DB_TargetI2B2_jdbcurl);

				parentContextMap_tRunJob_1.put("DB_TargetI2B2_Password",
						context.DB_TargetI2B2_Password);

				parentContextMap_tRunJob_1.put("DB_TargetI2B2_Port",
						context.DB_TargetI2B2_Port);

				parentContextMap_tRunJob_1.put("DB_TargetI2B2_Schema",
						context.DB_TargetI2B2_Schema);

				parentContextMap_tRunJob_1.put("DB_TargetI2B2_Username",
						context.DB_TargetI2B2_Username);

				parentContextMap_tRunJob_1.put("DB_TargetI2B2_WHType",
						context.DB_TargetI2B2_WHType);

				parentContextMap_tRunJob_1.put("DataFile", context.DataFile);

				parentContextMap_tRunJob_1.put("ErrorMessage",
						context.ErrorMessage);

				parentContextMap_tRunJob_1.put("IfValue", context.IfValue);

				parentContextMap_tRunJob_1.put("JDBC_URL", context.JDBC_URL);

				parentContextMap_tRunJob_1
						.put("JDBCDriver", context.JDBCDriver);

				parentContextMap_tRunJob_1.put("Job", context.Job);

				parentContextMap_tRunJob_1
						.put("SQLCommand", context.SQLCommand);

				parentContextMap_tRunJob_1.put("SQLCommand2",
						context.SQLCommand2);

				parentContextMap_tRunJob_1.put("SQLTable", context.SQLTable);

				parentContextMap_tRunJob_1.put("SQLTable2", context.SQLTable2);

				parentContextMap_tRunJob_1.put("StatusMessage",
						context.StatusMessage);

				parentContextMap_tRunJob_1.put("TableIEOTarget",
						context.TableIEOTarget);

				parentContextMap_tRunJob_1.put("TableIEOTargetOntology",
						context.TableIEOTargetOntology);

				parentContextMap_tRunJob_1.put("TableIEOTargetProject",
						context.TableIEOTargetProject);

				parentContextMap_tRunJob_1.put("TargetID", context.TargetID);

				parentContextMap_tRunJob_1
						.put("TOSHandler", context.TOSHandler);

				Object obj_tRunJob_1 = null;

				i2b2_postgres2.tosidrtcommand_transformationtotarget_0_1.TOSIDRTCommand_TransformationToTarget childJob_tRunJob_1 = new i2b2_postgres2.tosidrtcommand_transformationtotarget_0_1.TOSIDRTCommand_TransformationToTarget();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_1) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
							.entrySet()) {
						dataSources_tRunJob_1.put(
								talendDataSourceEntry_tRunJob_1.getKey(),
								talendDataSourceEntry_tRunJob_1.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
				}

				childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;

				String[][] childReturn_tRunJob_1 = childJob_tRunJob_1
						.runJob((String[]) paraList_tRunJob_1
								.toArray(new String[paraList_tRunJob_1.size()]));

				errorCode = childJob_tRunJob_1.getErrorCode();

				if (childJob_tRunJob_1.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_1
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getErrorCode());
				}
				if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_1.getExceptionStackTrace());
				}

				if (childJob_tRunJob_1.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_1.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_1++;

				/**
				 * [tRunJob_1 main ] stop
				 */

				/**
				 * [tRunJob_1 end ] start
				 */

				currentComponent = "tRunJob_1";

				ok_Hash.put("tRunJob_1", true);
				end_Hash.put("tRunJob_1", System.currentTimeMillis());

				/**
				 * [tRunJob_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tRunJob_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_1 finally ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}

	public void tDie_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_3 begin ] start
				 */

				ok_Hash.put("tDie_3", false);
				start_Hash.put("tDie_3", System.currentTimeMillis());

				currentComponent = "tDie_3";

				int tos_count_tDie_3 = 0;

				/**
				 * [tDie_3 begin ] stop
				 */

				/**
				 * [tDie_3 main ] start
				 */

				currentComponent = "tDie_3";

				globalMap.put("tDie_3_DIE_PRIORITY", 5);
				System.err.println(((String) globalMap
						.get("tRunJob_1_ERROR_MESSAGE")));

				globalMap.put("tDie_3_DIE_MESSAGE",
						((String) globalMap.get("tRunJob_1_ERROR_MESSAGE")));
				globalMap.put("tDie_3_DIE_MESSAGES",
						((String) globalMap.get("tRunJob_1_ERROR_MESSAGE")));
				currentComponent = "tDie_3";
				status = "failure";
				errorCode = new Integer(3);
				globalMap.put("tDie_3_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_3++;

				/**
				 * [tDie_3 main ] stop
				 */

				/**
				 * [tDie_3 end ] start
				 */

				currentComponent = "tDie_3";

				ok_Hash.put("tDie_3", true);
				end_Hash.put("tDie_3", System.currentTimeMillis());

				/**
				 * [tDie_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_3 finally ] start
				 */

				currentComponent = "tDie_3";

				/**
				 * [tDie_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_3_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				String foo = "bar";

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				if (context.IndexStop) {

					tRunJob_9Process(globalMap);
				}

				if (context.IndexDrop) {

					tRunJob_8Process(globalMap);
				}

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_9Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_9 begin ] start
				 */

				ok_Hash.put("tRunJob_9", false);
				start_Hash.put("tRunJob_9", System.currentTimeMillis());

				currentComponent = "tRunJob_9";

				int tos_count_tRunJob_9 = 0;

				/**
				 * [tRunJob_9 begin ] stop
				 */

				/**
				 * [tRunJob_9 main ] start
				 */

				currentComponent = "tRunJob_9";

				java.util.List<String> paraList_tRunJob_9 = new java.util.ArrayList<String>();

				paraList_tRunJob_9.add("--father_pid=" + pid);

				paraList_tRunJob_9.add("--root_pid=" + rootPid);

				paraList_tRunJob_9.add("--father_node=tRunJob_9");

				paraList_tRunJob_9.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_9.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_9.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_9 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_9 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_9".equals(tRunJobName_tRunJob_9)
						&& childResumePath_tRunJob_9 != null) {
					paraList_tRunJob_9
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_9.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_9");

				java.util.Map<String, Object> parentContextMap_tRunJob_9 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_9 = context
						.propertyNames();
				while (propertyNames_tRunJob_9.hasMoreElements()) {
					String key_tRunJob_9 = (String) propertyNames_tRunJob_9
							.nextElement();
					Object value_tRunJob_9 = (Object) context
							.get(key_tRunJob_9);
					paraList_tRunJob_9.add("--context_param " + key_tRunJob_9
							+ "=" + value_tRunJob_9);
				}

				parentContextMap_tRunJob_9.put("Var1", context.Var1);

				parentContextMap_tRunJob_9.put("Var2", context.Var2);

				parentContextMap_tRunJob_9.put("Var3", context.Var3);

				parentContextMap_tRunJob_9.put("currentQuery",
						context.currentQuery);

				parentContextMap_tRunJob_9.put("IndexDrop", context.IndexDrop);

				parentContextMap_tRunJob_9.put("IndexStop", context.IndexStop);

				parentContextMap_tRunJob_9.put("truncateProject",
						context.truncateProject);

				parentContextMap_tRunJob_9.put("truncateQueries",
						context.truncateQueries);

				parentContextMap_tRunJob_9.put("DB_StagingI2B2_DatabaseType",
						context.DB_StagingI2B2_DatabaseType);

				parentContextMap_tRunJob_9.put("DB_StagingI2B2_DriverClass",
						context.DB_StagingI2B2_DriverClass);

				parentContextMap_tRunJob_9.put("DB_StagingI2B2_Host",
						context.DB_StagingI2B2_Host);

				parentContextMap_tRunJob_9.put("DB_StagingI2B2_Instance",
						context.DB_StagingI2B2_Instance);

				parentContextMap_tRunJob_9.put("DB_StagingI2B2_jdbcurl",
						context.DB_StagingI2B2_jdbcurl);

				parentContextMap_tRunJob_9.put("DB_StagingI2B2_Password",
						context.DB_StagingI2B2_Password);

				parentContextMap_tRunJob_9.put("DB_StagingI2B2_Port",
						context.DB_StagingI2B2_Port);

				parentContextMap_tRunJob_9.put("DB_StagingI2B2_Schema",
						context.DB_StagingI2B2_Schema);

				parentContextMap_tRunJob_9.put("DB_StagingI2B2_Username",
						context.DB_StagingI2B2_Username);

				parentContextMap_tRunJob_9.put("DB_StagingI2B2_WHType",
						context.DB_StagingI2B2_WHType);

				parentContextMap_tRunJob_9.put("DB_TargetI2B2_DatabaseType",
						context.DB_TargetI2B2_DatabaseType);

				parentContextMap_tRunJob_9.put("DB_TargetI2B2_DriverClass",
						context.DB_TargetI2B2_DriverClass);

				parentContextMap_tRunJob_9.put("DB_TargetI2B2_Host",
						context.DB_TargetI2B2_Host);

				parentContextMap_tRunJob_9.put("DB_TargetI2B2_Instance",
						context.DB_TargetI2B2_Instance);

				parentContextMap_tRunJob_9.put("DB_TargetI2B2_jdbcurl",
						context.DB_TargetI2B2_jdbcurl);

				parentContextMap_tRunJob_9.put("DB_TargetI2B2_Password",
						context.DB_TargetI2B2_Password);

				parentContextMap_tRunJob_9.put("DB_TargetI2B2_Port",
						context.DB_TargetI2B2_Port);

				parentContextMap_tRunJob_9.put("DB_TargetI2B2_Schema",
						context.DB_TargetI2B2_Schema);

				parentContextMap_tRunJob_9.put("DB_TargetI2B2_Username",
						context.DB_TargetI2B2_Username);

				parentContextMap_tRunJob_9.put("DB_TargetI2B2_WHType",
						context.DB_TargetI2B2_WHType);

				parentContextMap_tRunJob_9.put("DataFile", context.DataFile);

				parentContextMap_tRunJob_9.put("ErrorMessage",
						context.ErrorMessage);

				parentContextMap_tRunJob_9.put("IfValue", context.IfValue);

				parentContextMap_tRunJob_9.put("JDBC_URL", context.JDBC_URL);

				parentContextMap_tRunJob_9
						.put("JDBCDriver", context.JDBCDriver);

				parentContextMap_tRunJob_9.put("Job", context.Job);

				parentContextMap_tRunJob_9
						.put("SQLCommand", context.SQLCommand);

				parentContextMap_tRunJob_9.put("SQLCommand2",
						context.SQLCommand2);

				parentContextMap_tRunJob_9.put("SQLTable", context.SQLTable);

				parentContextMap_tRunJob_9.put("SQLTable2", context.SQLTable2);

				parentContextMap_tRunJob_9.put("StatusMessage",
						context.StatusMessage);

				parentContextMap_tRunJob_9.put("TableIEOTarget",
						context.TableIEOTarget);

				parentContextMap_tRunJob_9.put("TableIEOTargetOntology",
						context.TableIEOTargetOntology);

				parentContextMap_tRunJob_9.put("TableIEOTargetProject",
						context.TableIEOTargetProject);

				parentContextMap_tRunJob_9.put("TargetID", context.TargetID);

				parentContextMap_tRunJob_9
						.put("TOSHandler", context.TOSHandler);

				Object obj_tRunJob_9 = null;

				obj_tRunJob_9 = context.DB_TargetI2B2_DatabaseType;
				paraList_tRunJob_9
						.add("--context_param DB_StagingI2B2_DatabaseType="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_9));
				parentContextMap_tRunJob_9.put("DB_StagingI2B2_DatabaseType",
						obj_tRunJob_9);

				obj_tRunJob_9 = context.DB_TargetI2B2_DriverClass;
				paraList_tRunJob_9
						.add("--context_param DB_StagingI2B2_DriverClass="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_9));
				parentContextMap_tRunJob_9.put("DB_StagingI2B2_DriverClass",
						obj_tRunJob_9);

				obj_tRunJob_9 = context.DB_TargetI2B2_Host;
				paraList_tRunJob_9.add("--context_param DB_StagingI2B2_Host="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
				parentContextMap_tRunJob_9.put("DB_StagingI2B2_Host",
						obj_tRunJob_9);

				obj_tRunJob_9 = context.DB_TargetI2B2_Instance;
				paraList_tRunJob_9
						.add("--context_param DB_StagingI2B2_Instance="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_9));
				parentContextMap_tRunJob_9.put("DB_StagingI2B2_Instance",
						obj_tRunJob_9);

				obj_tRunJob_9 = context.DB_TargetI2B2_jdbcurl;
				paraList_tRunJob_9
						.add("--context_param DB_StagingI2B2_jdbcurl="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_9));
				parentContextMap_tRunJob_9.put("DB_StagingI2B2_jdbcurl",
						obj_tRunJob_9);

				obj_tRunJob_9 = context.DB_TargetI2B2_Password;
				paraList_tRunJob_9
						.add("--context_param DB_StagingI2B2_Password="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_9));
				parentContextMap_tRunJob_9.put("DB_StagingI2B2_Password",
						obj_tRunJob_9);

				obj_tRunJob_9 = context.DB_TargetI2B2_Port;
				paraList_tRunJob_9.add("--context_param DB_StagingI2B2_Port="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
				parentContextMap_tRunJob_9.put("DB_StagingI2B2_Port",
						obj_tRunJob_9);

				obj_tRunJob_9 = context.DB_TargetI2B2_Schema;
				paraList_tRunJob_9.add("--context_param DB_StagingI2B2_Schema="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
				parentContextMap_tRunJob_9.put("DB_StagingI2B2_Schema",
						obj_tRunJob_9);

				obj_tRunJob_9 = context.DB_TargetI2B2_Username;
				paraList_tRunJob_9
						.add("--context_param DB_StagingI2B2_Username="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_9));
				parentContextMap_tRunJob_9.put("DB_StagingI2B2_Username",
						obj_tRunJob_9);

				i2b2_postgres2.database_rebuild_indexing_0_1.Database_Rebuild_Indexing childJob_tRunJob_9 = new i2b2_postgres2.database_rebuild_indexing_0_1.Database_Rebuild_Indexing();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_9 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_9) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_9 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_9 : talendDataSources_tRunJob_9
							.entrySet()) {
						dataSources_tRunJob_9.put(
								talendDataSourceEntry_tRunJob_9.getKey(),
								talendDataSourceEntry_tRunJob_9.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_9.setDataSources(dataSources_tRunJob_9);
				}

				childJob_tRunJob_9.parentContextMap = parentContextMap_tRunJob_9;

				String[][] childReturn_tRunJob_9 = childJob_tRunJob_9
						.runJob((String[]) paraList_tRunJob_9
								.toArray(new String[paraList_tRunJob_9.size()]));

				errorCode = childJob_tRunJob_9.getErrorCode();

				if (childJob_tRunJob_9.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_9_CHILD_RETURN_CODE",
							childJob_tRunJob_9.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_9
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_9_CHILD_RETURN_CODE",
							childJob_tRunJob_9.getErrorCode());
				}
				if (childJob_tRunJob_9.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_9_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_9.getExceptionStackTrace());
				}

				if (childJob_tRunJob_9.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_9.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_9++;

				/**
				 * [tRunJob_9 main ] stop
				 */

				/**
				 * [tRunJob_9 end ] start
				 */

				currentComponent = "tRunJob_9";

				ok_Hash.put("tRunJob_9", true);
				end_Hash.put("tRunJob_9", System.currentTimeMillis());

				/**
				 * [tRunJob_9 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_9 finally ] start
				 */

				currentComponent = "tRunJob_9";

				/**
				 * [tRunJob_9 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_9_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_8Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_8 begin ] start
				 */

				ok_Hash.put("tRunJob_8", false);
				start_Hash.put("tRunJob_8", System.currentTimeMillis());

				currentComponent = "tRunJob_8";

				int tos_count_tRunJob_8 = 0;

				/**
				 * [tRunJob_8 begin ] stop
				 */

				/**
				 * [tRunJob_8 main ] start
				 */

				currentComponent = "tRunJob_8";

				java.util.List<String> paraList_tRunJob_8 = new java.util.ArrayList<String>();

				paraList_tRunJob_8.add("--father_pid=" + pid);

				paraList_tRunJob_8.add("--root_pid=" + rootPid);

				paraList_tRunJob_8.add("--father_node=tRunJob_8");

				paraList_tRunJob_8.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_8.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_8.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_8 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_8 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_8".equals(tRunJobName_tRunJob_8)
						&& childResumePath_tRunJob_8 != null) {
					paraList_tRunJob_8
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_8.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_8");

				java.util.Map<String, Object> parentContextMap_tRunJob_8 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_8 = context
						.propertyNames();
				while (propertyNames_tRunJob_8.hasMoreElements()) {
					String key_tRunJob_8 = (String) propertyNames_tRunJob_8
							.nextElement();
					Object value_tRunJob_8 = (Object) context
							.get(key_tRunJob_8);
					paraList_tRunJob_8.add("--context_param " + key_tRunJob_8
							+ "=" + value_tRunJob_8);
				}

				parentContextMap_tRunJob_8.put("Var1", context.Var1);

				parentContextMap_tRunJob_8.put("Var2", context.Var2);

				parentContextMap_tRunJob_8.put("Var3", context.Var3);

				parentContextMap_tRunJob_8.put("currentQuery",
						context.currentQuery);

				parentContextMap_tRunJob_8.put("IndexDrop", context.IndexDrop);

				parentContextMap_tRunJob_8.put("IndexStop", context.IndexStop);

				parentContextMap_tRunJob_8.put("truncateProject",
						context.truncateProject);

				parentContextMap_tRunJob_8.put("truncateQueries",
						context.truncateQueries);

				parentContextMap_tRunJob_8.put("DB_StagingI2B2_DatabaseType",
						context.DB_StagingI2B2_DatabaseType);

				parentContextMap_tRunJob_8.put("DB_StagingI2B2_DriverClass",
						context.DB_StagingI2B2_DriverClass);

				parentContextMap_tRunJob_8.put("DB_StagingI2B2_Host",
						context.DB_StagingI2B2_Host);

				parentContextMap_tRunJob_8.put("DB_StagingI2B2_Instance",
						context.DB_StagingI2B2_Instance);

				parentContextMap_tRunJob_8.put("DB_StagingI2B2_jdbcurl",
						context.DB_StagingI2B2_jdbcurl);

				parentContextMap_tRunJob_8.put("DB_StagingI2B2_Password",
						context.DB_StagingI2B2_Password);

				parentContextMap_tRunJob_8.put("DB_StagingI2B2_Port",
						context.DB_StagingI2B2_Port);

				parentContextMap_tRunJob_8.put("DB_StagingI2B2_Schema",
						context.DB_StagingI2B2_Schema);

				parentContextMap_tRunJob_8.put("DB_StagingI2B2_Username",
						context.DB_StagingI2B2_Username);

				parentContextMap_tRunJob_8.put("DB_StagingI2B2_WHType",
						context.DB_StagingI2B2_WHType);

				parentContextMap_tRunJob_8.put("DB_TargetI2B2_DatabaseType",
						context.DB_TargetI2B2_DatabaseType);

				parentContextMap_tRunJob_8.put("DB_TargetI2B2_DriverClass",
						context.DB_TargetI2B2_DriverClass);

				parentContextMap_tRunJob_8.put("DB_TargetI2B2_Host",
						context.DB_TargetI2B2_Host);

				parentContextMap_tRunJob_8.put("DB_TargetI2B2_Instance",
						context.DB_TargetI2B2_Instance);

				parentContextMap_tRunJob_8.put("DB_TargetI2B2_jdbcurl",
						context.DB_TargetI2B2_jdbcurl);

				parentContextMap_tRunJob_8.put("DB_TargetI2B2_Password",
						context.DB_TargetI2B2_Password);

				parentContextMap_tRunJob_8.put("DB_TargetI2B2_Port",
						context.DB_TargetI2B2_Port);

				parentContextMap_tRunJob_8.put("DB_TargetI2B2_Schema",
						context.DB_TargetI2B2_Schema);

				parentContextMap_tRunJob_8.put("DB_TargetI2B2_Username",
						context.DB_TargetI2B2_Username);

				parentContextMap_tRunJob_8.put("DB_TargetI2B2_WHType",
						context.DB_TargetI2B2_WHType);

				parentContextMap_tRunJob_8.put("DataFile", context.DataFile);

				parentContextMap_tRunJob_8.put("ErrorMessage",
						context.ErrorMessage);

				parentContextMap_tRunJob_8.put("IfValue", context.IfValue);

				parentContextMap_tRunJob_8.put("JDBC_URL", context.JDBC_URL);

				parentContextMap_tRunJob_8
						.put("JDBCDriver", context.JDBCDriver);

				parentContextMap_tRunJob_8.put("Job", context.Job);

				parentContextMap_tRunJob_8
						.put("SQLCommand", context.SQLCommand);

				parentContextMap_tRunJob_8.put("SQLCommand2",
						context.SQLCommand2);

				parentContextMap_tRunJob_8.put("SQLTable", context.SQLTable);

				parentContextMap_tRunJob_8.put("SQLTable2", context.SQLTable2);

				parentContextMap_tRunJob_8.put("StatusMessage",
						context.StatusMessage);

				parentContextMap_tRunJob_8.put("TableIEOTarget",
						context.TableIEOTarget);

				parentContextMap_tRunJob_8.put("TableIEOTargetOntology",
						context.TableIEOTargetOntology);

				parentContextMap_tRunJob_8.put("TableIEOTargetProject",
						context.TableIEOTargetProject);

				parentContextMap_tRunJob_8.put("TargetID", context.TargetID);

				parentContextMap_tRunJob_8
						.put("TOSHandler", context.TOSHandler);

				Object obj_tRunJob_8 = null;

				obj_tRunJob_8 = context.DB_TargetI2B2_DatabaseType;
				paraList_tRunJob_8
						.add("--context_param DB_StagingI2B2_DatabaseType="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_8));
				parentContextMap_tRunJob_8.put("DB_StagingI2B2_DatabaseType",
						obj_tRunJob_8);

				obj_tRunJob_8 = context.DB_TargetI2B2_DriverClass;
				paraList_tRunJob_8
						.add("--context_param DB_StagingI2B2_DriverClass="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_8));
				parentContextMap_tRunJob_8.put("DB_StagingI2B2_DriverClass",
						obj_tRunJob_8);

				obj_tRunJob_8 = context.DB_TargetI2B2_Host;
				paraList_tRunJob_8.add("--context_param DB_StagingI2B2_Host="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_8));
				parentContextMap_tRunJob_8.put("DB_StagingI2B2_Host",
						obj_tRunJob_8);

				obj_tRunJob_8 = context.DB_TargetI2B2_Instance;
				paraList_tRunJob_8
						.add("--context_param DB_StagingI2B2_Instance="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_8));
				parentContextMap_tRunJob_8.put("DB_StagingI2B2_Instance",
						obj_tRunJob_8);

				obj_tRunJob_8 = context.DB_TargetI2B2_jdbcurl;
				paraList_tRunJob_8
						.add("--context_param DB_StagingI2B2_jdbcurl="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_8));
				parentContextMap_tRunJob_8.put("DB_StagingI2B2_jdbcurl",
						obj_tRunJob_8);

				obj_tRunJob_8 = context.DB_TargetI2B2_Password;
				paraList_tRunJob_8
						.add("--context_param DB_StagingI2B2_Password="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_8));
				parentContextMap_tRunJob_8.put("DB_StagingI2B2_Password",
						obj_tRunJob_8);

				obj_tRunJob_8 = context.DB_TargetI2B2_Port;
				paraList_tRunJob_8.add("--context_param DB_StagingI2B2_Port="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_8));
				parentContextMap_tRunJob_8.put("DB_StagingI2B2_Port",
						obj_tRunJob_8);

				obj_tRunJob_8 = context.DB_TargetI2B2_Schema;
				paraList_tRunJob_8.add("--context_param DB_StagingI2B2_Schema="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_8));
				parentContextMap_tRunJob_8.put("DB_StagingI2B2_Schema",
						obj_tRunJob_8);

				obj_tRunJob_8 = context.DB_TargetI2B2_Username;
				paraList_tRunJob_8
						.add("--context_param DB_StagingI2B2_Username="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_8));
				parentContextMap_tRunJob_8.put("DB_StagingI2B2_Username",
						obj_tRunJob_8);

				i2b2_postgres2.database_create_indexing_0_1.Database_Create_Indexing childJob_tRunJob_8 = new i2b2_postgres2.database_create_indexing_0_1.Database_Create_Indexing();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_8 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_8) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_8 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_8 : talendDataSources_tRunJob_8
							.entrySet()) {
						dataSources_tRunJob_8.put(
								talendDataSourceEntry_tRunJob_8.getKey(),
								talendDataSourceEntry_tRunJob_8.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_8.setDataSources(dataSources_tRunJob_8);
				}

				childJob_tRunJob_8.parentContextMap = parentContextMap_tRunJob_8;

				String[][] childReturn_tRunJob_8 = childJob_tRunJob_8
						.runJob((String[]) paraList_tRunJob_8
								.toArray(new String[paraList_tRunJob_8.size()]));

				errorCode = childJob_tRunJob_8.getErrorCode();

				if (childJob_tRunJob_8.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_8_CHILD_RETURN_CODE",
							childJob_tRunJob_8.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_8
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_8_CHILD_RETURN_CODE",
							childJob_tRunJob_8.getErrorCode());
				}
				if (childJob_tRunJob_8.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_8_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_8.getExceptionStackTrace());
				}

				if (childJob_tRunJob_8.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_8.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_8++;

				/**
				 * [tRunJob_8 main ] stop
				 */

				/**
				 * [tRunJob_8 end ] start
				 */

				currentComponent = "tRunJob_8";

				ok_Hash.put("tRunJob_8", true);
				end_Hash.put("tRunJob_8", System.currentTimeMillis());

				/**
				 * [tRunJob_8 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_8 finally ] start
				 */

				currentComponent = "tRunJob_8";

				/**
				 * [tRunJob_8 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_8_SUBPROCESS_STATE", 1);
	}

	public void tJava_13Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_13 begin ] start
				 */

				ok_Hash.put("tJava_13", false);
				start_Hash.put("tJava_13", System.currentTimeMillis());

				currentComponent = "tJava_13";

				int tos_count_tJava_13 = 0;

				TOSHandler
						.status("Starting external TOS-Job \"LoadTargetProjects\".");

				/**
				 * [tJava_13 begin ] stop
				 */

				/**
				 * [tJava_13 main ] start
				 */

				currentComponent = "tJava_13";

				tos_count_tJava_13++;

				/**
				 * [tJava_13 main ] stop
				 */

				/**
				 * [tJava_13 end ] start
				 */

				currentComponent = "tJava_13";

				ok_Hash.put("tJava_13", true);
				end_Hash.put("tJava_13", System.currentTimeMillis());

				tRunJob_2Process(globalMap);

				/**
				 * [tJava_13 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_13 finally ] start
				 */

				currentComponent = "tJava_13";

				/**
				 * [tJava_13 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_13_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_2 begin ] start
				 */

				ok_Hash.put("tRunJob_2", false);
				start_Hash.put("tRunJob_2", System.currentTimeMillis());

				currentComponent = "tRunJob_2";

				int tos_count_tRunJob_2 = 0;

				/**
				 * [tRunJob_2 begin ] stop
				 */

				/**
				 * [tRunJob_2 main ] start
				 */

				currentComponent = "tRunJob_2";

				java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();

				paraList_tRunJob_2.add("--father_pid=" + pid);

				paraList_tRunJob_2.add("--root_pid=" + rootPid);

				paraList_tRunJob_2.add("--father_node=tRunJob_2");

				paraList_tRunJob_2.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_2.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_2.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_2 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_2 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_2".equals(tRunJobName_tRunJob_2)
						&& childResumePath_tRunJob_2 != null) {
					paraList_tRunJob_2
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_2");

				java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_2 = context
						.propertyNames();
				while (propertyNames_tRunJob_2.hasMoreElements()) {
					String key_tRunJob_2 = (String) propertyNames_tRunJob_2
							.nextElement();
					Object value_tRunJob_2 = (Object) context
							.get(key_tRunJob_2);
					paraList_tRunJob_2.add("--context_param " + key_tRunJob_2
							+ "=" + value_tRunJob_2);
				}

				parentContextMap_tRunJob_2.put("Var1", context.Var1);

				parentContextMap_tRunJob_2.put("Var2", context.Var2);

				parentContextMap_tRunJob_2.put("Var3", context.Var3);

				parentContextMap_tRunJob_2.put("currentQuery",
						context.currentQuery);

				parentContextMap_tRunJob_2.put("IndexDrop", context.IndexDrop);

				parentContextMap_tRunJob_2.put("IndexStop", context.IndexStop);

				parentContextMap_tRunJob_2.put("truncateProject",
						context.truncateProject);

				parentContextMap_tRunJob_2.put("truncateQueries",
						context.truncateQueries);

				parentContextMap_tRunJob_2.put("DB_StagingI2B2_DatabaseType",
						context.DB_StagingI2B2_DatabaseType);

				parentContextMap_tRunJob_2.put("DB_StagingI2B2_DriverClass",
						context.DB_StagingI2B2_DriverClass);

				parentContextMap_tRunJob_2.put("DB_StagingI2B2_Host",
						context.DB_StagingI2B2_Host);

				parentContextMap_tRunJob_2.put("DB_StagingI2B2_Instance",
						context.DB_StagingI2B2_Instance);

				parentContextMap_tRunJob_2.put("DB_StagingI2B2_jdbcurl",
						context.DB_StagingI2B2_jdbcurl);

				parentContextMap_tRunJob_2.put("DB_StagingI2B2_Password",
						context.DB_StagingI2B2_Password);

				parentContextMap_tRunJob_2.put("DB_StagingI2B2_Port",
						context.DB_StagingI2B2_Port);

				parentContextMap_tRunJob_2.put("DB_StagingI2B2_Schema",
						context.DB_StagingI2B2_Schema);

				parentContextMap_tRunJob_2.put("DB_StagingI2B2_Username",
						context.DB_StagingI2B2_Username);

				parentContextMap_tRunJob_2.put("DB_StagingI2B2_WHType",
						context.DB_StagingI2B2_WHType);

				parentContextMap_tRunJob_2.put("DB_TargetI2B2_DatabaseType",
						context.DB_TargetI2B2_DatabaseType);

				parentContextMap_tRunJob_2.put("DB_TargetI2B2_DriverClass",
						context.DB_TargetI2B2_DriverClass);

				parentContextMap_tRunJob_2.put("DB_TargetI2B2_Host",
						context.DB_TargetI2B2_Host);

				parentContextMap_tRunJob_2.put("DB_TargetI2B2_Instance",
						context.DB_TargetI2B2_Instance);

				parentContextMap_tRunJob_2.put("DB_TargetI2B2_jdbcurl",
						context.DB_TargetI2B2_jdbcurl);

				parentContextMap_tRunJob_2.put("DB_TargetI2B2_Password",
						context.DB_TargetI2B2_Password);

				parentContextMap_tRunJob_2.put("DB_TargetI2B2_Port",
						context.DB_TargetI2B2_Port);

				parentContextMap_tRunJob_2.put("DB_TargetI2B2_Schema",
						context.DB_TargetI2B2_Schema);

				parentContextMap_tRunJob_2.put("DB_TargetI2B2_Username",
						context.DB_TargetI2B2_Username);

				parentContextMap_tRunJob_2.put("DB_TargetI2B2_WHType",
						context.DB_TargetI2B2_WHType);

				parentContextMap_tRunJob_2.put("DataFile", context.DataFile);

				parentContextMap_tRunJob_2.put("ErrorMessage",
						context.ErrorMessage);

				parentContextMap_tRunJob_2.put("IfValue", context.IfValue);

				parentContextMap_tRunJob_2.put("JDBC_URL", context.JDBC_URL);

				parentContextMap_tRunJob_2
						.put("JDBCDriver", context.JDBCDriver);

				parentContextMap_tRunJob_2.put("Job", context.Job);

				parentContextMap_tRunJob_2
						.put("SQLCommand", context.SQLCommand);

				parentContextMap_tRunJob_2.put("SQLCommand2",
						context.SQLCommand2);

				parentContextMap_tRunJob_2.put("SQLTable", context.SQLTable);

				parentContextMap_tRunJob_2.put("SQLTable2", context.SQLTable2);

				parentContextMap_tRunJob_2.put("StatusMessage",
						context.StatusMessage);

				parentContextMap_tRunJob_2.put("TableIEOTarget",
						context.TableIEOTarget);

				parentContextMap_tRunJob_2.put("TableIEOTargetOntology",
						context.TableIEOTargetOntology);

				parentContextMap_tRunJob_2.put("TableIEOTargetProject",
						context.TableIEOTargetProject);

				parentContextMap_tRunJob_2.put("TargetID", context.TargetID);

				parentContextMap_tRunJob_2
						.put("TOSHandler", context.TOSHandler);

				Object obj_tRunJob_2 = null;

				i2b2_postgres2.tosidrtcommand_createtargetproject_0_1.TOSIDRTCommand_CreateTargetProject childJob_tRunJob_2 = new i2b2_postgres2.tosidrtcommand_createtargetproject_0_1.TOSIDRTCommand_CreateTargetProject();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_2) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
							.entrySet()) {
						dataSources_tRunJob_2.put(
								talendDataSourceEntry_tRunJob_2.getKey(),
								talendDataSourceEntry_tRunJob_2.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
				}

				childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;

				String[][] childReturn_tRunJob_2 = childJob_tRunJob_2
						.runJob((String[]) paraList_tRunJob_2
								.toArray(new String[paraList_tRunJob_2.size()]));

				errorCode = childJob_tRunJob_2.getErrorCode();

				if (childJob_tRunJob_2.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_2_CHILD_RETURN_CODE",
							childJob_tRunJob_2.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_2
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_2_CHILD_RETURN_CODE",
							childJob_tRunJob_2.getErrorCode());
				}
				if (childJob_tRunJob_2.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_2.getExceptionStackTrace());
				}

				if (childJob_tRunJob_2.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_2.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_2++;

				/**
				 * [tRunJob_2 main ] stop
				 */

				/**
				 * [tRunJob_2 end ] start
				 */

				currentComponent = "tRunJob_2";

				ok_Hash.put("tRunJob_2", true);
				end_Hash.put("tRunJob_2", System.currentTimeMillis());

				/**
				 * [tRunJob_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_2 finally ] start
				 */

				currentComponent = "tRunJob_2";

				/**
				 * [tRunJob_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_14Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_14 begin ] start
				 */

				ok_Hash.put("tJava_14", false);
				start_Hash.put("tJava_14", System.currentTimeMillis());

				currentComponent = "tJava_14";

				int tos_count_tJava_14 = 0;

				TOSHandler
						.status("Starting external TOS-Job \"SaveTargetProjects\".");

				/**
				 * [tJava_14 begin ] stop
				 */

				/**
				 * [tJava_14 main ] start
				 */

				currentComponent = "tJava_14";

				tos_count_tJava_14++;

				/**
				 * [tJava_14 main ] stop
				 */

				/**
				 * [tJava_14 end ] start
				 */

				currentComponent = "tJava_14";

				ok_Hash.put("tJava_14", true);
				end_Hash.put("tJava_14", System.currentTimeMillis());

				tRunJob_3Process(globalMap);

				/**
				 * [tJava_14 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_14 finally ] start
				 */

				currentComponent = "tJava_14";

				/**
				 * [tJava_14 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_14_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_3 begin ] start
				 */

				ok_Hash.put("tRunJob_3", false);
				start_Hash.put("tRunJob_3", System.currentTimeMillis());

				currentComponent = "tRunJob_3";

				int tos_count_tRunJob_3 = 0;

				/**
				 * [tRunJob_3 begin ] stop
				 */

				/**
				 * [tRunJob_3 main ] start
				 */

				currentComponent = "tRunJob_3";

				java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();

				paraList_tRunJob_3.add("--father_pid=" + pid);

				paraList_tRunJob_3.add("--root_pid=" + rootPid);

				paraList_tRunJob_3.add("--father_node=tRunJob_3");

				paraList_tRunJob_3.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_3.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_3.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_3 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_3 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_3".equals(tRunJobName_tRunJob_3)
						&& childResumePath_tRunJob_3 != null) {
					paraList_tRunJob_3
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_3.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_3");

				java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_3 = context
						.propertyNames();
				while (propertyNames_tRunJob_3.hasMoreElements()) {
					String key_tRunJob_3 = (String) propertyNames_tRunJob_3
							.nextElement();
					Object value_tRunJob_3 = (Object) context
							.get(key_tRunJob_3);
					paraList_tRunJob_3.add("--context_param " + key_tRunJob_3
							+ "=" + value_tRunJob_3);
				}

				parentContextMap_tRunJob_3.put("Var1", context.Var1);

				parentContextMap_tRunJob_3.put("Var2", context.Var2);

				parentContextMap_tRunJob_3.put("Var3", context.Var3);

				parentContextMap_tRunJob_3.put("currentQuery",
						context.currentQuery);

				parentContextMap_tRunJob_3.put("IndexDrop", context.IndexDrop);

				parentContextMap_tRunJob_3.put("IndexStop", context.IndexStop);

				parentContextMap_tRunJob_3.put("truncateProject",
						context.truncateProject);

				parentContextMap_tRunJob_3.put("truncateQueries",
						context.truncateQueries);

				parentContextMap_tRunJob_3.put("DB_StagingI2B2_DatabaseType",
						context.DB_StagingI2B2_DatabaseType);

				parentContextMap_tRunJob_3.put("DB_StagingI2B2_DriverClass",
						context.DB_StagingI2B2_DriverClass);

				parentContextMap_tRunJob_3.put("DB_StagingI2B2_Host",
						context.DB_StagingI2B2_Host);

				parentContextMap_tRunJob_3.put("DB_StagingI2B2_Instance",
						context.DB_StagingI2B2_Instance);

				parentContextMap_tRunJob_3.put("DB_StagingI2B2_jdbcurl",
						context.DB_StagingI2B2_jdbcurl);

				parentContextMap_tRunJob_3.put("DB_StagingI2B2_Password",
						context.DB_StagingI2B2_Password);

				parentContextMap_tRunJob_3.put("DB_StagingI2B2_Port",
						context.DB_StagingI2B2_Port);

				parentContextMap_tRunJob_3.put("DB_StagingI2B2_Schema",
						context.DB_StagingI2B2_Schema);

				parentContextMap_tRunJob_3.put("DB_StagingI2B2_Username",
						context.DB_StagingI2B2_Username);

				parentContextMap_tRunJob_3.put("DB_StagingI2B2_WHType",
						context.DB_StagingI2B2_WHType);

				parentContextMap_tRunJob_3.put("DB_TargetI2B2_DatabaseType",
						context.DB_TargetI2B2_DatabaseType);

				parentContextMap_tRunJob_3.put("DB_TargetI2B2_DriverClass",
						context.DB_TargetI2B2_DriverClass);

				parentContextMap_tRunJob_3.put("DB_TargetI2B2_Host",
						context.DB_TargetI2B2_Host);

				parentContextMap_tRunJob_3.put("DB_TargetI2B2_Instance",
						context.DB_TargetI2B2_Instance);

				parentContextMap_tRunJob_3.put("DB_TargetI2B2_jdbcurl",
						context.DB_TargetI2B2_jdbcurl);

				parentContextMap_tRunJob_3.put("DB_TargetI2B2_Password",
						context.DB_TargetI2B2_Password);

				parentContextMap_tRunJob_3.put("DB_TargetI2B2_Port",
						context.DB_TargetI2B2_Port);

				parentContextMap_tRunJob_3.put("DB_TargetI2B2_Schema",
						context.DB_TargetI2B2_Schema);

				parentContextMap_tRunJob_3.put("DB_TargetI2B2_Username",
						context.DB_TargetI2B2_Username);

				parentContextMap_tRunJob_3.put("DB_TargetI2B2_WHType",
						context.DB_TargetI2B2_WHType);

				parentContextMap_tRunJob_3.put("DataFile", context.DataFile);

				parentContextMap_tRunJob_3.put("ErrorMessage",
						context.ErrorMessage);

				parentContextMap_tRunJob_3.put("IfValue", context.IfValue);

				parentContextMap_tRunJob_3.put("JDBC_URL", context.JDBC_URL);

				parentContextMap_tRunJob_3
						.put("JDBCDriver", context.JDBCDriver);

				parentContextMap_tRunJob_3.put("Job", context.Job);

				parentContextMap_tRunJob_3
						.put("SQLCommand", context.SQLCommand);

				parentContextMap_tRunJob_3.put("SQLCommand2",
						context.SQLCommand2);

				parentContextMap_tRunJob_3.put("SQLTable", context.SQLTable);

				parentContextMap_tRunJob_3.put("SQLTable2", context.SQLTable2);

				parentContextMap_tRunJob_3.put("StatusMessage",
						context.StatusMessage);

				parentContextMap_tRunJob_3.put("TableIEOTarget",
						context.TableIEOTarget);

				parentContextMap_tRunJob_3.put("TableIEOTargetOntology",
						context.TableIEOTargetOntology);

				parentContextMap_tRunJob_3.put("TableIEOTargetProject",
						context.TableIEOTargetProject);

				parentContextMap_tRunJob_3.put("TargetID", context.TargetID);

				parentContextMap_tRunJob_3
						.put("TOSHandler", context.TOSHandler);

				Object obj_tRunJob_3 = null;

				i2b2_postgres2.tosidrtcommand_savetargetprojects_0_1.TOSIDRTCommand_SaveTargetProjects childJob_tRunJob_3 = new i2b2_postgres2.tosidrtcommand_savetargetprojects_0_1.TOSIDRTCommand_SaveTargetProjects();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_3) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_3 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_3 : talendDataSources_tRunJob_3
							.entrySet()) {
						dataSources_tRunJob_3.put(
								talendDataSourceEntry_tRunJob_3.getKey(),
								talendDataSourceEntry_tRunJob_3.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_3.setDataSources(dataSources_tRunJob_3);
				}

				childJob_tRunJob_3.parentContextMap = parentContextMap_tRunJob_3;

				String[][] childReturn_tRunJob_3 = childJob_tRunJob_3
						.runJob((String[]) paraList_tRunJob_3
								.toArray(new String[paraList_tRunJob_3.size()]));

				errorCode = childJob_tRunJob_3.getErrorCode();

				if (childJob_tRunJob_3.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_3_CHILD_RETURN_CODE",
							childJob_tRunJob_3.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_3
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_3_CHILD_RETURN_CODE",
							childJob_tRunJob_3.getErrorCode());
				}
				if (childJob_tRunJob_3.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_3.getExceptionStackTrace());
				}

				if (childJob_tRunJob_3.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_3.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_3++;

				/**
				 * [tRunJob_3 main ] stop
				 */

				/**
				 * [tRunJob_3 end ] start
				 */

				currentComponent = "tRunJob_3";

				ok_Hash.put("tRunJob_3", true);
				end_Hash.put("tRunJob_3", System.currentTimeMillis());

				/**
				 * [tRunJob_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_3 finally ] start
				 */

				currentComponent = "tRunJob_3";

				/**
				 * [tRunJob_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 1);
	}

	public void tJava_15Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_15 begin ] start
				 */

				ok_Hash.put("tJava_15", false);
				start_Hash.put("tJava_15", System.currentTimeMillis());

				currentComponent = "tJava_15";

				int tos_count_tJava_15 = 0;

				TOSHandler
						.status("Starting external TOS-Job \"DeleteTarget\".");

				/**
				 * [tJava_15 begin ] stop
				 */

				/**
				 * [tJava_15 main ] start
				 */

				currentComponent = "tJava_15";

				tos_count_tJava_15++;

				/**
				 * [tJava_15 main ] stop
				 */

				/**
				 * [tJava_15 end ] start
				 */

				currentComponent = "tJava_15";

				ok_Hash.put("tJava_15", true);
				end_Hash.put("tJava_15", System.currentTimeMillis());

				tRunJob_5Process(globalMap);

				/**
				 * [tJava_15 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_15 finally ] start
				 */

				currentComponent = "tJava_15";

				/**
				 * [tJava_15 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_15_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_5 begin ] start
				 */

				ok_Hash.put("tRunJob_5", false);
				start_Hash.put("tRunJob_5", System.currentTimeMillis());

				currentComponent = "tRunJob_5";

				int tos_count_tRunJob_5 = 0;

				/**
				 * [tRunJob_5 begin ] stop
				 */

				/**
				 * [tRunJob_5 main ] start
				 */

				currentComponent = "tRunJob_5";

				java.util.List<String> paraList_tRunJob_5 = new java.util.ArrayList<String>();

				paraList_tRunJob_5.add("--father_pid=" + pid);

				paraList_tRunJob_5.add("--root_pid=" + rootPid);

				paraList_tRunJob_5.add("--father_node=tRunJob_5");

				paraList_tRunJob_5.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_5.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_5.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_5 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_5 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_5".equals(tRunJobName_tRunJob_5)
						&& childResumePath_tRunJob_5 != null) {
					paraList_tRunJob_5
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_5.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_5");

				java.util.Map<String, Object> parentContextMap_tRunJob_5 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_5 = context
						.propertyNames();
				while (propertyNames_tRunJob_5.hasMoreElements()) {
					String key_tRunJob_5 = (String) propertyNames_tRunJob_5
							.nextElement();
					Object value_tRunJob_5 = (Object) context
							.get(key_tRunJob_5);
					paraList_tRunJob_5.add("--context_param " + key_tRunJob_5
							+ "=" + value_tRunJob_5);
				}

				parentContextMap_tRunJob_5.put("Var1", context.Var1);

				parentContextMap_tRunJob_5.put("Var2", context.Var2);

				parentContextMap_tRunJob_5.put("Var3", context.Var3);

				parentContextMap_tRunJob_5.put("currentQuery",
						context.currentQuery);

				parentContextMap_tRunJob_5.put("IndexDrop", context.IndexDrop);

				parentContextMap_tRunJob_5.put("IndexStop", context.IndexStop);

				parentContextMap_tRunJob_5.put("truncateProject",
						context.truncateProject);

				parentContextMap_tRunJob_5.put("truncateQueries",
						context.truncateQueries);

				parentContextMap_tRunJob_5.put("DB_StagingI2B2_DatabaseType",
						context.DB_StagingI2B2_DatabaseType);

				parentContextMap_tRunJob_5.put("DB_StagingI2B2_DriverClass",
						context.DB_StagingI2B2_DriverClass);

				parentContextMap_tRunJob_5.put("DB_StagingI2B2_Host",
						context.DB_StagingI2B2_Host);

				parentContextMap_tRunJob_5.put("DB_StagingI2B2_Instance",
						context.DB_StagingI2B2_Instance);

				parentContextMap_tRunJob_5.put("DB_StagingI2B2_jdbcurl",
						context.DB_StagingI2B2_jdbcurl);

				parentContextMap_tRunJob_5.put("DB_StagingI2B2_Password",
						context.DB_StagingI2B2_Password);

				parentContextMap_tRunJob_5.put("DB_StagingI2B2_Port",
						context.DB_StagingI2B2_Port);

				parentContextMap_tRunJob_5.put("DB_StagingI2B2_Schema",
						context.DB_StagingI2B2_Schema);

				parentContextMap_tRunJob_5.put("DB_StagingI2B2_Username",
						context.DB_StagingI2B2_Username);

				parentContextMap_tRunJob_5.put("DB_StagingI2B2_WHType",
						context.DB_StagingI2B2_WHType);

				parentContextMap_tRunJob_5.put("DB_TargetI2B2_DatabaseType",
						context.DB_TargetI2B2_DatabaseType);

				parentContextMap_tRunJob_5.put("DB_TargetI2B2_DriverClass",
						context.DB_TargetI2B2_DriverClass);

				parentContextMap_tRunJob_5.put("DB_TargetI2B2_Host",
						context.DB_TargetI2B2_Host);

				parentContextMap_tRunJob_5.put("DB_TargetI2B2_Instance",
						context.DB_TargetI2B2_Instance);

				parentContextMap_tRunJob_5.put("DB_TargetI2B2_jdbcurl",
						context.DB_TargetI2B2_jdbcurl);

				parentContextMap_tRunJob_5.put("DB_TargetI2B2_Password",
						context.DB_TargetI2B2_Password);

				parentContextMap_tRunJob_5.put("DB_TargetI2B2_Port",
						context.DB_TargetI2B2_Port);

				parentContextMap_tRunJob_5.put("DB_TargetI2B2_Schema",
						context.DB_TargetI2B2_Schema);

				parentContextMap_tRunJob_5.put("DB_TargetI2B2_Username",
						context.DB_TargetI2B2_Username);

				parentContextMap_tRunJob_5.put("DB_TargetI2B2_WHType",
						context.DB_TargetI2B2_WHType);

				parentContextMap_tRunJob_5.put("DataFile", context.DataFile);

				parentContextMap_tRunJob_5.put("ErrorMessage",
						context.ErrorMessage);

				parentContextMap_tRunJob_5.put("IfValue", context.IfValue);

				parentContextMap_tRunJob_5.put("JDBC_URL", context.JDBC_URL);

				parentContextMap_tRunJob_5
						.put("JDBCDriver", context.JDBCDriver);

				parentContextMap_tRunJob_5.put("Job", context.Job);

				parentContextMap_tRunJob_5
						.put("SQLCommand", context.SQLCommand);

				parentContextMap_tRunJob_5.put("SQLCommand2",
						context.SQLCommand2);

				parentContextMap_tRunJob_5.put("SQLTable", context.SQLTable);

				parentContextMap_tRunJob_5.put("SQLTable2", context.SQLTable2);

				parentContextMap_tRunJob_5.put("StatusMessage",
						context.StatusMessage);

				parentContextMap_tRunJob_5.put("TableIEOTarget",
						context.TableIEOTarget);

				parentContextMap_tRunJob_5.put("TableIEOTargetOntology",
						context.TableIEOTargetOntology);

				parentContextMap_tRunJob_5.put("TableIEOTargetProject",
						context.TableIEOTargetProject);

				parentContextMap_tRunJob_5.put("TargetID", context.TargetID);

				parentContextMap_tRunJob_5
						.put("TOSHandler", context.TOSHandler);

				Object obj_tRunJob_5 = null;

				i2b2_postgres2.tosidrtcommand_deletetarget_0_1.TOSIDRTCommand_DeleteTarget childJob_tRunJob_5 = new i2b2_postgres2.tosidrtcommand_deletetarget_0_1.TOSIDRTCommand_DeleteTarget();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_5 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_5) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_5 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_5 : talendDataSources_tRunJob_5
							.entrySet()) {
						dataSources_tRunJob_5.put(
								talendDataSourceEntry_tRunJob_5.getKey(),
								talendDataSourceEntry_tRunJob_5.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_5.setDataSources(dataSources_tRunJob_5);
				}

				childJob_tRunJob_5.parentContextMap = parentContextMap_tRunJob_5;

				String[][] childReturn_tRunJob_5 = childJob_tRunJob_5
						.runJob((String[]) paraList_tRunJob_5
								.toArray(new String[paraList_tRunJob_5.size()]));

				errorCode = childJob_tRunJob_5.getErrorCode();

				if (childJob_tRunJob_5.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_5_CHILD_RETURN_CODE",
							childJob_tRunJob_5.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_5
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_5_CHILD_RETURN_CODE",
							childJob_tRunJob_5.getErrorCode());
				}
				if (childJob_tRunJob_5.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_5_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_5.getExceptionStackTrace());
				}

				if (childJob_tRunJob_5.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_5.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_5++;

				/**
				 * [tRunJob_5 main ] stop
				 */

				/**
				 * [tRunJob_5 end ] start
				 */

				currentComponent = "tRunJob_5";

				ok_Hash.put("tRunJob_5", true);
				end_Hash.put("tRunJob_5", System.currentTimeMillis());

				/**
				 * [tRunJob_5 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_5 finally ] start
				 */

				currentComponent = "tRunJob_5";

				/**
				 * [tRunJob_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_5_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final TOSIDRTConnector TOSIDRTConnectorClass = new TOSIDRTConnector();

		int exitCode = TOSIDRTConnectorClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = TOSIDRTConnector.class
					.getClassLoader().getResourceAsStream(
							"i2b2_postgres2/tosidrtconnector_0_4/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.Var1 = (String) context.getProperty("Var1");
			context.Var2 = (String) context.getProperty("Var2");
			context.Var3 = (String) context.getProperty("Var3");
			context.currentQuery = (String) context.getProperty("currentQuery");
			try {
				context.IndexDrop = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("IndexDrop"));
			} catch (NumberFormatException e) {
				context.IndexDrop = null;
			}
			try {
				context.IndexStop = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("IndexStop"));
			} catch (NumberFormatException e) {
				context.IndexStop = null;
			}
			try {
				context.truncateProject = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("truncateProject"));
			} catch (NumberFormatException e) {
				context.truncateProject = null;
			}
			try {
				context.truncateQueries = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("truncateQueries"));
			} catch (NumberFormatException e) {
				context.truncateQueries = null;
			}
			context.DB_StagingI2B2_DatabaseType = (String) context
					.getProperty("DB_StagingI2B2_DatabaseType");
			context.DB_StagingI2B2_DriverClass = (String) context
					.getProperty("DB_StagingI2B2_DriverClass");
			context.DB_StagingI2B2_Host = (String) context
					.getProperty("DB_StagingI2B2_Host");
			context.DB_StagingI2B2_Instance = (String) context
					.getProperty("DB_StagingI2B2_Instance");
			context.DB_StagingI2B2_jdbcurl = (String) context
					.getProperty("DB_StagingI2B2_jdbcurl");
			String pwd_DB_StagingI2B2_Password_value = context
					.getProperty("DB_StagingI2B2_Password");
			context.DB_StagingI2B2_Password = null;
			if (pwd_DB_StagingI2B2_Password_value != null) {
				if (context_param.containsKey("DB_StagingI2B2_Password")) {// no
																			// need
																			// to
																			// decrypt
																			// if
																			// it
																			// come
																			// from
																			// program
																			// argument
																			// or
																			// parent
																			// job
																			// runtime
					context.DB_StagingI2B2_Password = pwd_DB_StagingI2B2_Password_value;
				} else if (!pwd_DB_StagingI2B2_Password_value.isEmpty()) {
					try {
						context.DB_StagingI2B2_Password = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_DB_StagingI2B2_Password_value);
						context.put("DB_StagingI2B2_Password",
								context.DB_StagingI2B2_Password);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.DB_StagingI2B2_Port = (String) context
					.getProperty("DB_StagingI2B2_Port");
			context.DB_StagingI2B2_Schema = (String) context
					.getProperty("DB_StagingI2B2_Schema");
			context.DB_StagingI2B2_Username = (String) context
					.getProperty("DB_StagingI2B2_Username");
			context.DB_StagingI2B2_WHType = (String) context
					.getProperty("DB_StagingI2B2_WHType");
			context.DB_TargetI2B2_DatabaseType = (String) context
					.getProperty("DB_TargetI2B2_DatabaseType");
			context.DB_TargetI2B2_DriverClass = (String) context
					.getProperty("DB_TargetI2B2_DriverClass");
			context.DB_TargetI2B2_Host = (String) context
					.getProperty("DB_TargetI2B2_Host");
			context.DB_TargetI2B2_Instance = (String) context
					.getProperty("DB_TargetI2B2_Instance");
			context.DB_TargetI2B2_jdbcurl = (String) context
					.getProperty("DB_TargetI2B2_jdbcurl");
			String pwd_DB_TargetI2B2_Password_value = context
					.getProperty("DB_TargetI2B2_Password");
			context.DB_TargetI2B2_Password = null;
			if (pwd_DB_TargetI2B2_Password_value != null) {
				if (context_param.containsKey("DB_TargetI2B2_Password")) {// no
																			// need
																			// to
																			// decrypt
																			// if
																			// it
																			// come
																			// from
																			// program
																			// argument
																			// or
																			// parent
																			// job
																			// runtime
					context.DB_TargetI2B2_Password = pwd_DB_TargetI2B2_Password_value;
				} else if (!pwd_DB_TargetI2B2_Password_value.isEmpty()) {
					try {
						context.DB_TargetI2B2_Password = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_DB_TargetI2B2_Password_value);
						context.put("DB_TargetI2B2_Password",
								context.DB_TargetI2B2_Password);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.DB_TargetI2B2_Port = (String) context
					.getProperty("DB_TargetI2B2_Port");
			context.DB_TargetI2B2_Schema = (String) context
					.getProperty("DB_TargetI2B2_Schema");
			context.DB_TargetI2B2_Username = (String) context
					.getProperty("DB_TargetI2B2_Username");
			context.DB_TargetI2B2_WHType = (String) context
					.getProperty("DB_TargetI2B2_WHType");
			context.DataFile = (String) context.getProperty("DataFile");
			context.ErrorMessage = (String) context.getProperty("ErrorMessage");
			try {
				context.IfValue = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("IfValue"));
			} catch (NumberFormatException e) {
				context.IfValue = null;
			}
			context.JDBC_URL = (String) context.getProperty("JDBC_URL");
			context.JDBCDriver = (String) context.getProperty("JDBCDriver");
			context.Job = (String) context.getProperty("Job");
			context.SQLCommand = (String) context.getProperty("SQLCommand");
			context.SQLCommand2 = (String) context.getProperty("SQLCommand2");
			context.SQLTable = (String) context.getProperty("SQLTable");
			context.SQLTable2 = (String) context.getProperty("SQLTable2");
			context.StatusMessage = (String) context
					.getProperty("StatusMessage");
			context.TableIEOTarget = (String) context
					.getProperty("TableIEOTarget");
			context.TableIEOTargetOntology = (String) context
					.getProperty("TableIEOTargetOntology");
			context.TableIEOTargetProject = (String) context
					.getProperty("TableIEOTargetProject");
			try {
				context.TargetID = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("TargetID"));
			} catch (NumberFormatException e) {
				context.TargetID = null;
			}
			context.TOSHandler = (Object) context.getProperty("TOSHandler");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("Var1")) {
				context.Var1 = (String) parentContextMap.get("Var1");
			}
			if (parentContextMap.containsKey("Var2")) {
				context.Var2 = (String) parentContextMap.get("Var2");
			}
			if (parentContextMap.containsKey("Var3")) {
				context.Var3 = (String) parentContextMap.get("Var3");
			}
			if (parentContextMap.containsKey("currentQuery")) {
				context.currentQuery = (String) parentContextMap
						.get("currentQuery");
			}
			if (parentContextMap.containsKey("IndexDrop")) {
				context.IndexDrop = (Boolean) parentContextMap.get("IndexDrop");
			}
			if (parentContextMap.containsKey("IndexStop")) {
				context.IndexStop = (Boolean) parentContextMap.get("IndexStop");
			}
			if (parentContextMap.containsKey("truncateProject")) {
				context.truncateProject = (Boolean) parentContextMap
						.get("truncateProject");
			}
			if (parentContextMap.containsKey("truncateQueries")) {
				context.truncateQueries = (Boolean) parentContextMap
						.get("truncateQueries");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_DatabaseType")) {
				context.DB_StagingI2B2_DatabaseType = (String) parentContextMap
						.get("DB_StagingI2B2_DatabaseType");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_DriverClass")) {
				context.DB_StagingI2B2_DriverClass = (String) parentContextMap
						.get("DB_StagingI2B2_DriverClass");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Host")) {
				context.DB_StagingI2B2_Host = (String) parentContextMap
						.get("DB_StagingI2B2_Host");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Instance")) {
				context.DB_StagingI2B2_Instance = (String) parentContextMap
						.get("DB_StagingI2B2_Instance");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_jdbcurl")) {
				context.DB_StagingI2B2_jdbcurl = (String) parentContextMap
						.get("DB_StagingI2B2_jdbcurl");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Password")) {
				context.DB_StagingI2B2_Password = (java.lang.String) parentContextMap
						.get("DB_StagingI2B2_Password");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Port")) {
				context.DB_StagingI2B2_Port = (String) parentContextMap
						.get("DB_StagingI2B2_Port");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Schema")) {
				context.DB_StagingI2B2_Schema = (String) parentContextMap
						.get("DB_StagingI2B2_Schema");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Username")) {
				context.DB_StagingI2B2_Username = (String) parentContextMap
						.get("DB_StagingI2B2_Username");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_WHType")) {
				context.DB_StagingI2B2_WHType = (String) parentContextMap
						.get("DB_StagingI2B2_WHType");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_DatabaseType")) {
				context.DB_TargetI2B2_DatabaseType = (String) parentContextMap
						.get("DB_TargetI2B2_DatabaseType");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_DriverClass")) {
				context.DB_TargetI2B2_DriverClass = (String) parentContextMap
						.get("DB_TargetI2B2_DriverClass");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Host")) {
				context.DB_TargetI2B2_Host = (String) parentContextMap
						.get("DB_TargetI2B2_Host");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Instance")) {
				context.DB_TargetI2B2_Instance = (String) parentContextMap
						.get("DB_TargetI2B2_Instance");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_jdbcurl")) {
				context.DB_TargetI2B2_jdbcurl = (String) parentContextMap
						.get("DB_TargetI2B2_jdbcurl");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Password")) {
				context.DB_TargetI2B2_Password = (java.lang.String) parentContextMap
						.get("DB_TargetI2B2_Password");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Port")) {
				context.DB_TargetI2B2_Port = (String) parentContextMap
						.get("DB_TargetI2B2_Port");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Schema")) {
				context.DB_TargetI2B2_Schema = (String) parentContextMap
						.get("DB_TargetI2B2_Schema");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_Username")) {
				context.DB_TargetI2B2_Username = (String) parentContextMap
						.get("DB_TargetI2B2_Username");
			}
			if (parentContextMap.containsKey("DB_TargetI2B2_WHType")) {
				context.DB_TargetI2B2_WHType = (String) parentContextMap
						.get("DB_TargetI2B2_WHType");
			}
			if (parentContextMap.containsKey("DataFile")) {
				context.DataFile = (String) parentContextMap.get("DataFile");
			}
			if (parentContextMap.containsKey("ErrorMessage")) {
				context.ErrorMessage = (String) parentContextMap
						.get("ErrorMessage");
			}
			if (parentContextMap.containsKey("IfValue")) {
				context.IfValue = (Boolean) parentContextMap.get("IfValue");
			}
			if (parentContextMap.containsKey("JDBC_URL")) {
				context.JDBC_URL = (String) parentContextMap.get("JDBC_URL");
			}
			if (parentContextMap.containsKey("JDBCDriver")) {
				context.JDBCDriver = (String) parentContextMap
						.get("JDBCDriver");
			}
			if (parentContextMap.containsKey("Job")) {
				context.Job = (String) parentContextMap.get("Job");
			}
			if (parentContextMap.containsKey("SQLCommand")) {
				context.SQLCommand = (String) parentContextMap
						.get("SQLCommand");
			}
			if (parentContextMap.containsKey("SQLCommand2")) {
				context.SQLCommand2 = (String) parentContextMap
						.get("SQLCommand2");
			}
			if (parentContextMap.containsKey("SQLTable")) {
				context.SQLTable = (String) parentContextMap.get("SQLTable");
			}
			if (parentContextMap.containsKey("SQLTable2")) {
				context.SQLTable2 = (String) parentContextMap.get("SQLTable2");
			}
			if (parentContextMap.containsKey("StatusMessage")) {
				context.StatusMessage = (String) parentContextMap
						.get("StatusMessage");
			}
			if (parentContextMap.containsKey("TableIEOTarget")) {
				context.TableIEOTarget = (String) parentContextMap
						.get("TableIEOTarget");
			}
			if (parentContextMap.containsKey("TableIEOTargetOntology")) {
				context.TableIEOTargetOntology = (String) parentContextMap
						.get("TableIEOTargetOntology");
			}
			if (parentContextMap.containsKey("TableIEOTargetProject")) {
				context.TableIEOTargetProject = (String) parentContextMap
						.get("TableIEOTargetProject");
			}
			if (parentContextMap.containsKey("TargetID")) {
				context.TargetID = (Integer) parentContextMap.get("TargetID");
			}
			if (parentContextMap.containsKey("TOSHandler")) {
				context.TOSHandler = (Object) parentContextMap
						.get("TOSHandler");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("DB_StagingI2B2_Password");
		parametersToEncrypt.add("DB_TargetI2B2_Password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tLibraryLoad_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tLibraryLoad_1) {
			globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", -1);

			e_tLibraryLoad_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : TOSIDRTConnector");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();
	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tJDBCConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tJDBCConnection_1",
				globalMap.get("conn_tJDBCConnection_1"));
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 347168 characters generated by Talend Open Studio for Data Integration on the
 * March 10, 2015 4:06:10 PM CET
 ************************************************************************************************/
