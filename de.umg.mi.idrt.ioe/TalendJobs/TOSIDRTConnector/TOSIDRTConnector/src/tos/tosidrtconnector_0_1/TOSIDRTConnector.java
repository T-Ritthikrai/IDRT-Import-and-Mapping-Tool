// ============================================================================
//
// Copyright (c) 2005-2012, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package tos.tosidrtconnector_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaFlex_1
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: TOSIDRTConnector Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.2.0.M4_r90320
 * @status 
 */
public class TOSIDRTConnector implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (OracleHost != null) {

				this.setProperty("OracleHost", OracleHost.toString());

			}

			if (OraclePort != null) {

				this.setProperty("OraclePort", OraclePort.toString());

			}

			if (OracleDB != null) {

				this.setProperty("OracleDB", OracleDB.toString());

			}

			if (OracleSchema != null) {

				this.setProperty("OracleSchema", OracleSchema.toString());

			}

			if (OracleUsername != null) {

				this.setProperty("OracleUsername", OracleUsername.toString());

			}

			if (OraclePassword != null) {

				this.setProperty("OraclePassword", OraclePassword.toString());

			}

		}

		public String OracleHost;

		public String getOracleHost() {
			return this.OracleHost;
		}

		public String OraclePort;

		public String getOraclePort() {
			return this.OraclePort;
		}

		public String OracleDB;

		public String getOracleDB() {
			return this.OracleDB;
		}

		public String OracleSchema;

		public String getOracleSchema() {
			return this.OracleSchema;
		}

		public String OracleUsername;

		public String getOracleUsername() {
			return this.OracleUsername;
		}

		public String OraclePassword;

		public String getOraclePassword() {
			return this.OraclePassword;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "TOSIDRTConnector";
	private final String projectName = "TOS";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		globalMap.put(KEY_DB_DATASOURCES, dataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception = null;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					TOSIDRTConnector.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(TOSIDRTConnector.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			} else {

				status = "failure";

			}
		}
	}

	public void tOracleInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleInput_1", System.currentTimeMillis());

		status = "failure";

		tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJavaFlex_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaFlex_1", System.currentTimeMillis());

		status = "failure";

		tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tOracleInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	private ESBProviderCallback callback = null;

	public void setProviderCallback(ESBProviderCallback callback) {
	}

	public ESBEndpointInfo getEndpoint() {
		return null;
	}

	public static class dbrowStruct implements
			routines.system.IPersistableRow<dbrowStruct> {
		final static byte[] commonByteArrayLock_TOS_TOSIDRTConnector = new byte[0];
		static byte[] commonByteArray_TOS_TOSIDRTConnector = new byte[0];

		public BigDecimal C_HLEVEL;

		public BigDecimal getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String C_SYNONYM_CD;

		public String getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public BigDecimal C_TOTALNUM;

		public BigDecimal getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public Object C_METADATAXML;

		public Object getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public String C_COLUMNDATATYPE;

		public String getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public Object C_COMMENT;

		public Object getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_TOSIDRTConnector.length) {
					if (length < 1024
							&& commonByteArray_TOS_TOSIDRTConnector.length == 0) {
						commonByteArray_TOS_TOSIDRTConnector = new byte[1024];
					} else {
						commonByteArray_TOS_TOSIDRTConnector = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_TOSIDRTConnector, 0, length);
				strReturn = new String(commonByteArray_TOS_TOSIDRTConnector, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_TOSIDRTConnector) {

				try {

					int length = 0;

					this.C_HLEVEL = (BigDecimal) dis.readObject();

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					this.C_SYNONYM_CD = readString(dis);

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = (BigDecimal) dis.readObject();

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = (Object) dis.readObject();

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					this.C_COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = (Object) dis.readObject();

					this.C_TOOLTIP = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.C_HLEVEL);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.C_SYNONYM_CD, dos);

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// BigDecimal

				dos.writeObject(this.C_TOTALNUM);

				// String

				writeString(this.C_BASECODE, dos);

				// Object

				dos.writeObject(this.C_METADATAXML);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// String

				writeString(this.C_COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// Object

				dos.writeObject(this.C_COMMENT);

				// String

				writeString(this.C_TOOLTIP, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + C_SYNONYM_CD);
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + String.valueOf(C_TOTALNUM));
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + String.valueOf(C_METADATAXML));
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + C_COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + String.valueOf(C_COMMENT));
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(dbrowStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				dbrowStruct dbrow = new dbrowStruct();

				/**
				 * [tJavaFlex_1 begin ] start
				 */

				ok_Hash.put("tJavaFlex_1", false);
				start_Hash.put("tJavaFlex_1", System.currentTimeMillis());
				currentComponent = "tJavaFlex_1";

				int tos_count_tJavaFlex_1 = 0;

				System.out.println("Starting Talend-Job as TOS-Code.");
				TOSHandler tos = new TOSHandler();

				/**
				 * [tJavaFlex_1 begin ] stop
				 */

				/**
				 * [tOracleInput_1 begin ] start
				 */

				ok_Hash.put("tOracleInput_1", false);
				start_Hash.put("tOracleInput_1", System.currentTimeMillis());
				currentComponent = "tOracleInput_1";

				int tos_count_tOracleInput_1 = 0;

				int nb_line_tOracleInput_1 = 0;
				java.sql.Connection conn_tOracleInput_1 = null;
				java.lang.Class.forName("oracle.jdbc.OracleDriver");

				String url_tOracleInput_1 = null;
				url_tOracleInput_1 = "jdbc:oracle:thin:@" + "134.76.124.17"
						+ ":" + "1521" + ":" + "I2B2T";

				String dbUser_tOracleInput_1 = "SYSTEM";
				String dbPwd_tOracleInput_1 = "wc24gqd";
				conn_tOracleInput_1 = java.sql.DriverManager.getConnection(
						url_tOracleInput_1, dbUser_tOracleInput_1,
						dbPwd_tOracleInput_1);
				java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1
						.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1
						.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_1 = java.util.TimeZone
						.getDefault().getID();
				while (rsGetTZ_tOracleInput_1.next()) {
					sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1
							.getString(1);
				}
				((oracle.jdbc.OracleConnection) conn_tOracleInput_1)
						.setSessionTimeZone(sessionTimezone_tOracleInput_1);

				java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1
						.createStatement();

				String dbquery_tOracleInput_1 = "SELECT * FROM I2B2KFO179.I2B2";

				globalMap.put("tOracleInput_1_QUERY", dbquery_tOracleInput_1);

				java.sql.ResultSet rs_tOracleInput_1 = stmt_tOracleInput_1
						.executeQuery(dbquery_tOracleInput_1);
				java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1
						.getMetaData();
				int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1
						.getColumnCount();

				String tmpContent_tOracleInput_1 = null;
				while (rs_tOracleInput_1.next()) {
					nb_line_tOracleInput_1++;

					if (colQtyInRs_tOracleInput_1 < 1) {
						dbrow.C_HLEVEL = null;
					} else {

						if (rs_tOracleInput_1.getObject(1) != null) {
							dbrow.C_HLEVEL = rs_tOracleInput_1.getBigDecimal(1);
						} else {

							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tOracleInput_1 < 2) {
						dbrow.C_FULLNAME = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(2);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.C_FULLNAME = tmpContent_tOracleInput_1;
						} else {
							dbrow.C_FULLNAME = null;
						}

					}
					if (colQtyInRs_tOracleInput_1 < 3) {
						dbrow.C_NAME = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(3);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.C_NAME = tmpContent_tOracleInput_1;
						} else {
							dbrow.C_NAME = null;
						}

					}
					if (colQtyInRs_tOracleInput_1 < 4) {
						dbrow.C_SYNONYM_CD = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(4);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.C_SYNONYM_CD = tmpContent_tOracleInput_1;
						} else {
							dbrow.C_SYNONYM_CD = null;
						}

					}
					if (colQtyInRs_tOracleInput_1 < 5) {
						dbrow.C_VISUALATTRIBUTES = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(5);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.C_VISUALATTRIBUTES = tmpContent_tOracleInput_1;
						} else {
							dbrow.C_VISUALATTRIBUTES = null;
						}

					}
					if (colQtyInRs_tOracleInput_1 < 6) {
						dbrow.C_TOTALNUM = null;
					} else {

						if (rs_tOracleInput_1.getObject(6) != null) {
							dbrow.C_TOTALNUM = rs_tOracleInput_1
									.getBigDecimal(6);
						} else {

							dbrow.C_TOTALNUM = null;
						}

					}
					if (colQtyInRs_tOracleInput_1 < 7) {
						dbrow.C_BASECODE = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(7);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.C_BASECODE = tmpContent_tOracleInput_1;
						} else {
							dbrow.C_BASECODE = null;
						}

					}
					if (colQtyInRs_tOracleInput_1 < 8) {
						dbrow.C_METADATAXML = null;
					} else {

						Object tmpObj_8_tOracleInput_1 = rs_tOracleInput_1
								.getObject(8);
						if (tmpObj_8_tOracleInput_1 != null) {
							dbrow.C_METADATAXML = tmpObj_8_tOracleInput_1;
						} else {
							dbrow.C_METADATAXML = null;
						}

					}
					if (colQtyInRs_tOracleInput_1 < 9) {
						dbrow.C_FACTTABLECOLUMN = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(9);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.C_FACTTABLECOLUMN = tmpContent_tOracleInput_1;
						} else {
							dbrow.C_FACTTABLECOLUMN = null;
						}

					}
					if (colQtyInRs_tOracleInput_1 < 10) {
						dbrow.C_TABLENAME = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(10);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.C_TABLENAME = tmpContent_tOracleInput_1;
						} else {
							dbrow.C_TABLENAME = null;
						}

					}
					if (colQtyInRs_tOracleInput_1 < 11) {
						dbrow.C_COLUMNNAME = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(11);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.C_COLUMNNAME = tmpContent_tOracleInput_1;
						} else {
							dbrow.C_COLUMNNAME = null;
						}

					}
					if (colQtyInRs_tOracleInput_1 < 12) {
						dbrow.C_COLUMNDATATYPE = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(12);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.C_COLUMNDATATYPE = tmpContent_tOracleInput_1;
						} else {
							dbrow.C_COLUMNDATATYPE = null;
						}

					}
					if (colQtyInRs_tOracleInput_1 < 13) {
						dbrow.C_OPERATOR = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(13);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.C_OPERATOR = tmpContent_tOracleInput_1;
						} else {
							dbrow.C_OPERATOR = null;
						}

					}
					if (colQtyInRs_tOracleInput_1 < 14) {
						dbrow.C_DIMCODE = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(14);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.C_DIMCODE = tmpContent_tOracleInput_1;
						} else {
							dbrow.C_DIMCODE = null;
						}

					}
					if (colQtyInRs_tOracleInput_1 < 15) {
						dbrow.C_COMMENT = null;
					} else {

						Object tmpObj_15_tOracleInput_1 = rs_tOracleInput_1
								.getObject(15);
						if (tmpObj_15_tOracleInput_1 != null) {
							dbrow.C_COMMENT = tmpObj_15_tOracleInput_1;
						} else {
							dbrow.C_COMMENT = null;
						}

					}
					if (colQtyInRs_tOracleInput_1 < 16) {
						dbrow.C_TOOLTIP = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(16);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.C_TOOLTIP = tmpContent_tOracleInput_1;
						} else {
							dbrow.C_TOOLTIP = null;
						}

					}
					if (colQtyInRs_tOracleInput_1 < 17) {
						dbrow.M_APPLIED_PATH = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(17);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.M_APPLIED_PATH = tmpContent_tOracleInput_1;
						} else {
							dbrow.M_APPLIED_PATH = null;
						}

					}
					if (colQtyInRs_tOracleInput_1 < 18) {
						dbrow.UPDATE_DATE = null;
					} else {

						if (rs_tOracleInput_1.getTimestamp(18) != null) {
							dbrow.UPDATE_DATE = new java.util.Date(
									rs_tOracleInput_1.getTimestamp(18)
											.getTime());
						} else {
							dbrow.UPDATE_DATE = null;
						}

					}
					if (colQtyInRs_tOracleInput_1 < 19) {
						dbrow.DOWNLOAD_DATE = null;
					} else {

						if (rs_tOracleInput_1.getTimestamp(19) != null) {
							dbrow.DOWNLOAD_DATE = new java.util.Date(
									rs_tOracleInput_1.getTimestamp(19)
											.getTime());
						} else {
							dbrow.DOWNLOAD_DATE = null;
						}

					}
					if (colQtyInRs_tOracleInput_1 < 20) {
						dbrow.IMPORT_DATE = null;
					} else {

						if (rs_tOracleInput_1.getTimestamp(20) != null) {
							dbrow.IMPORT_DATE = new java.util.Date(
									rs_tOracleInput_1.getTimestamp(20)
											.getTime());
						} else {
							dbrow.IMPORT_DATE = null;
						}

					}
					if (colQtyInRs_tOracleInput_1 < 21) {
						dbrow.SOURCESYSTEM_CD = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(21);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.SOURCESYSTEM_CD = tmpContent_tOracleInput_1;
						} else {
							dbrow.SOURCESYSTEM_CD = null;
						}

					}
					if (colQtyInRs_tOracleInput_1 < 22) {
						dbrow.VALUETYPE_CD = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(22);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.VALUETYPE_CD = tmpContent_tOracleInput_1;
						} else {
							dbrow.VALUETYPE_CD = null;
						}

					}
					if (colQtyInRs_tOracleInput_1 < 23) {
						dbrow.M_EXCLUSION_CD = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(23);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.M_EXCLUSION_CD = tmpContent_tOracleInput_1;
						} else {
							dbrow.M_EXCLUSION_CD = null;
						}

					}
					if (colQtyInRs_tOracleInput_1 < 24) {
						dbrow.C_PATH = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(24);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.C_PATH = tmpContent_tOracleInput_1;
						} else {
							dbrow.C_PATH = null;
						}

					}
					if (colQtyInRs_tOracleInput_1 < 25) {
						dbrow.C_SYMBOL = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(25);
						if (tmpContent_tOracleInput_1 != null) {
							dbrow.C_SYMBOL = tmpContent_tOracleInput_1;
						} else {
							dbrow.C_SYMBOL = null;
						}

					}

					/**
					 * [tOracleInput_1 begin ] stop
					 */
					/**
					 * [tOracleInput_1 main ] start
					 */

					currentComponent = "tOracleInput_1";

					tos_count_tOracleInput_1++;

					/**
					 * [tOracleInput_1 main ] stop
					 */

					/**
					 * [tJavaFlex_1 main ] start
					 */

					currentComponent = "tJavaFlex_1";

					tos.add(dbrow.C_FULLNAME);

					tos_count_tJavaFlex_1++;

					/**
					 * [tJavaFlex_1 main ] stop
					 */

					/**
					 * [tOracleInput_1 end ] start
					 */

					currentComponent = "tOracleInput_1";

				}
				stmt_tOracleInput_1.close();

				conn_tOracleInput_1.close();

				globalMap.put("tOracleInput_1_NB_LINE", nb_line_tOracleInput_1);

				ok_Hash.put("tOracleInput_1", true);
				end_Hash.put("tOracleInput_1", System.currentTimeMillis());

				/**
				 * [tOracleInput_1 end ] stop
				 */

				/**
				 * [tJavaFlex_1 end ] start
				 */

				currentComponent = "tJavaFlex_1";

				// end of the component, outside/closing the loop

				ok_Hash.put("tJavaFlex_1", true);
				end_Hash.put("tJavaFlex_1", System.currentTimeMillis());

				/**
				 * [tJavaFlex_1 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal threadLocal = new ThreadLocal();
	{
		java.util.Map threadRunResultMap = new java.util.HashMap();
		threadRunResultMap.put("errorCode", null);
		threadRunResultMap.put("status", "");
		threadLocal.set(threadRunResultMap);
	}

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final TOSIDRTConnector TOSIDRTConnectorClass = new TOSIDRTConnector();

		int exitCode = TOSIDRTConnectorClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = TOSIDRTConnector.class
					.getClassLoader().getResourceAsStream(
							"tos/tosidrtconnector_0_1/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}

			context.OracleHost = (String) context.getProperty("OracleHost");

			context.OraclePort = (String) context.getProperty("OraclePort");

			context.OracleDB = (String) context.getProperty("OracleDB");

			context.OracleSchema = (String) context.getProperty("OracleSchema");

			context.OracleUsername = (String) context
					.getProperty("OracleUsername");

			context.OraclePassword = (String) context
					.getProperty("OraclePassword");

		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("OracleHost")) {
				context.OracleHost = (String) parentContextMap
						.get("OracleHost");
			}
			if (parentContextMap.containsKey("OraclePort")) {
				context.OraclePort = (String) parentContextMap
						.get("OraclePort");
			}
			if (parentContextMap.containsKey("OracleDB")) {
				context.OracleDB = (String) parentContextMap.get("OracleDB");
			}
			if (parentContextMap.containsKey("OracleSchema")) {
				context.OracleSchema = (String) parentContextMap
						.get("OracleSchema");
			}
			if (parentContextMap.containsKey("OracleUsername")) {
				context.OracleUsername = (String) parentContextMap
						.get("OracleUsername");
			}
			if (parentContextMap.containsKey("OraclePassword")) {
				context.OraclePassword = (String) parentContextMap
						.get("OraclePassword");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tOracleInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tOracleInput_1) {

			e_tOracleInput_1.printStackTrace();
			globalMap.put("tOracleInput_1_SUBPROCESS_STATE", -1);

		} finally {
		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : TOSIDRTConnector");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 45808 characters generated by Talend Open Studio for Big Data on the 19.
 * Oktober 2012 08:33:18 MESZ
 ************************************************************************************************/
