// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package tos.odm_master_0_1;

import routines.IIT;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.enc_num_routine;
import routines.Mathematical;
import routines.Relational;
import routines.IDRTHelper;
import routines.TalendDate;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_8
//import java.util.List;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJava_9
//import java.util.List;

//the import part of tJava_28
//import java.util.List;

//the import part of tJava_22
//import java.util.List;

//the import part of tJava_27
//import java.util.List;

//the import part of tJava_26
//import java.util.List;

//the import part of tJava_1
//import java.util.List;

//the import part of tJava_12
//import java.util.List;

//the import part of tJava_10
//import java.util.List;

//the import part of tJava_6
//import java.util.List;

//the import part of tJava_7
//import java.util.List;

//the import part of tJava_25
//import java.util.List;

//the import part of tJava_17
//import java.util.List;

//the import part of tJava_4
//import java.util.List;

//the import part of tJava_2
//import java.util.List;

//the import part of tJava_18
//import java.util.List;

//the import part of tJava_5
//import java.util.List;

//the import part of tJava_19
//import java.util.List;

//the import part of tJava_20
//import java.util.List;

//the import part of tJava_21
//import java.util.List;

//the import part of tJavaRow_2
//import java.util.List;

//the import part of tLibraryLoad_1
//import java.util.List;
import de.goettingen.i2b2.importtool.idrt.StatusListener.StatusListener;

@SuppressWarnings("unused")
/**
 * Job: ODM_MASTER Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.3.1.r104014
 * @status 
 */
public class ODM_MASTER implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (importTerms != null) {

				this.setProperty("importTerms", importTerms.toString());

			}

			if (basedir != null) {

				this.setProperty("basedir", basedir.toString());

			}

			if (datePattern != null) {

				this.setProperty("datePattern", datePattern.toString());

			}

			if (fileName != null) {

				this.setProperty("fileName", fileName.toString());

			}

			if (cleanUp != null) {

				this.setProperty("cleanUp", cleanUp.toString());

			}

			if (coding != null) {

				this.setProperty("coding", coding.toString());

			}

			if (DBHost != null) {

				this.setProperty("DBHost", DBHost.toString());

			}

			if (DBInstance != null) {

				this.setProperty("DBInstance", DBInstance.toString());

			}

			if (DBPassword != null) {

				this.setProperty("DBPassword", DBPassword.toString());

			}

			if (DBPort != null) {

				this.setProperty("DBPort", DBPort.toString());

			}

			if (DBSchema != null) {

				this.setProperty("DBSchema", DBSchema.toString());

			}

			if (DBUsername != null) {

				this.setProperty("DBUsername", DBUsername.toString());

			}

			if (FTPPassword != null) {

				this.setProperty("FTPPassword", FTPPassword.toString());

			}

			if (FTPUser != null) {

				this.setProperty("FTPUser", FTPUser.toString());

			}

			if (truncateProject != null) {

				this.setProperty("truncateProject", truncateProject.toString());

			}

			if (concept_cd != null) {

				this.setProperty("concept_cd", concept_cd.toString());

			}

			if (concept_path != null) {

				this.setProperty("concept_path", concept_path.toString());

			}

			if (currentFile != null) {

				this.setProperty("currentFile", currentFile.toString());

			}

			if (encoding != null) {

				this.setProperty("encoding", encoding.toString());

			}

			if (folderMain != null) {

				this.setProperty("folderMain", folderMain.toString());

			}

			if (folderODM != null) {

				this.setProperty("folderODM", folderODM.toString());

			}

			if (folderOutput != null) {

				this.setProperty("folderOutput", folderOutput.toString());

			}

			if (folderTmp != null) {

				this.setProperty("folderTmp", folderTmp.toString());

			}

			if (i2b2HeadNode != null) {

				this.setProperty("i2b2HeadNode", i2b2HeadNode.toString());

			}

			if (i2b2HeadNodeName != null) {

				this.setProperty("i2b2HeadNodeName",
						i2b2HeadNodeName.toString());

			}

			if (importCodelist != null) {

				this.setProperty("importCodelist", importCodelist.toString());

			}

			if (importSingleFile != null) {

				this.setProperty("importSingleFile",
						importSingleFile.toString());

			}

			if (includePids != null) {

				this.setProperty("includePids", includePids.toString());

			}

			if (ItemData != null) {

				this.setProperty("ItemData", ItemData.toString());

			}

			if (ItemDataAny != null) {

				this.setProperty("ItemDataAny", ItemDataAny.toString());

			}

			if (ItemDataBase64Binary != null) {

				this.setProperty("ItemDataBase64Binary",
						ItemDataBase64Binary.toString());

			}

			if (ItemDataBase64Float != null) {

				this.setProperty("ItemDataBase64Float",
						ItemDataBase64Float.toString());

			}

			if (ItemDataBoolean != null) {

				this.setProperty("ItemDataBoolean", ItemDataBoolean.toString());

			}

			if (ItemDataDate != null) {

				this.setProperty("ItemDataDate", ItemDataDate.toString());

			}

			if (ItemDataDatetime != null) {

				this.setProperty("ItemDataDatetime",
						ItemDataDatetime.toString());

			}

			if (ItemDataDouble != null) {

				this.setProperty("ItemDataDouble", ItemDataDouble.toString());

			}

			if (ItemDataDurationDatetime != null) {

				this.setProperty("ItemDataDurationDatetime",
						ItemDataDurationDatetime.toString());

			}

			if (ItemDataFloat != null) {

				this.setProperty("ItemDataFloat", ItemDataFloat.toString());

			}

			if (ItemDataHexBinary != null) {

				this.setProperty("ItemDataHexBinary",
						ItemDataHexBinary.toString());

			}

			if (ItemDataHexFloat != null) {

				this.setProperty("ItemDataHexFloat",
						ItemDataHexFloat.toString());

			}

			if (ItemDataIncompleteDatetime != null) {

				this.setProperty("ItemDataIncompleteDatetime",
						ItemDataIncompleteDatetime.toString());

			}

			if (ItemDataInteger != null) {

				this.setProperty("ItemDataInteger", ItemDataInteger.toString());

			}

			if (ItemDataIntervalDatetime != null) {

				this.setProperty("ItemDataIntervalDatetime",
						ItemDataIntervalDatetime.toString());

			}

			if (ItemDataPartialDate != null) {

				this.setProperty("ItemDataPartialDate",
						ItemDataPartialDate.toString());

			}

			if (ItemDataPartialDatetime != null) {

				this.setProperty("ItemDataPartialDatetime",
						ItemDataPartialDatetime.toString());

			}

			if (ItemDataPartialTime != null) {

				this.setProperty("ItemDataPartialTime",
						ItemDataPartialTime.toString());

			}

			if (ItemDataString != null) {

				this.setProperty("ItemDataString", ItemDataString.toString());

			}

			if (ItemDataTime != null) {

				this.setProperty("ItemDataTime", ItemDataTime.toString());

			}

			if (ItemDataURI != null) {

				this.setProperty("ItemDataURI", ItemDataURI.toString());

			}

			if (MDPD != null) {

				this.setProperty("MDPD", MDPD.toString());

			}

			if (MDPDName != null) {

				this.setProperty("MDPDName", MDPDName.toString());

			}

			if (xslt != null) {

				this.setProperty("xslt", xslt.toString());

			}

			if (xslt_namespace != null) {

				this.setProperty("xslt_namespace", xslt_namespace.toString());

			}

			if (counter != null) {

				this.setProperty("counter", counter.toString());

			}

			if (currentCounter != null) {

				this.setProperty("currentCounter", currentCounter.toString());

			}

			if (status != null) {

				this.setProperty("status", status.toString());

			}

			if (statusTmp != null) {

				this.setProperty("statusTmp", statusTmp.toString());

			}

		}

		public Boolean importTerms;

		public Boolean getImportTerms() {
			return this.importTerms;
		}

		public String basedir;

		public String getBasedir() {
			return this.basedir;
		}

		public String datePattern;

		public String getDatePattern() {
			return this.datePattern;
		}

		public String fileName;

		public String getFileName() {
			return this.fileName;
		}

		public Boolean cleanUp;

		public Boolean getCleanUp() {
			return this.cleanUp;
		}

		public String coding;

		public String getCoding() {
			return this.coding;
		}

		public String DBHost;

		public String getDBHost() {
			return this.DBHost;
		}

		public String DBInstance;

		public String getDBInstance() {
			return this.DBInstance;
		}

		public java.lang.String DBPassword;

		public java.lang.String getDBPassword() {
			return this.DBPassword;
		}

		public String DBPort;

		public String getDBPort() {
			return this.DBPort;
		}

		public String DBSchema;

		public String getDBSchema() {
			return this.DBSchema;
		}

		public String DBUsername;

		public String getDBUsername() {
			return this.DBUsername;
		}

		public java.lang.String FTPPassword;

		public java.lang.String getFTPPassword() {
			return this.FTPPassword;
		}

		public String FTPUser;

		public String getFTPUser() {
			return this.FTPUser;
		}

		public Boolean truncateProject;

		public Boolean getTruncateProject() {
			return this.truncateProject;
		}

		public String concept_cd;

		public String getConcept_cd() {
			return this.concept_cd;
		}

		public String concept_path;

		public String getConcept_path() {
			return this.concept_path;
		}

		public String currentFile;

		public String getCurrentFile() {
			return this.currentFile;
		}

		public String encoding;

		public String getEncoding() {
			return this.encoding;
		}

		public String folderMain;

		public String getFolderMain() {
			return this.folderMain;
		}

		public String folderODM;

		public String getFolderODM() {
			return this.folderODM;
		}

		public String folderOutput;

		public String getFolderOutput() {
			return this.folderOutput;
		}

		public String folderTmp;

		public String getFolderTmp() {
			return this.folderTmp;
		}

		public String i2b2HeadNode;

		public String getI2b2HeadNode() {
			return this.i2b2HeadNode;
		}

		public String i2b2HeadNodeName;

		public String getI2b2HeadNodeName() {
			return this.i2b2HeadNodeName;
		}

		public Boolean importCodelist;

		public Boolean getImportCodelist() {
			return this.importCodelist;
		}

		public Boolean importSingleFile;

		public Boolean getImportSingleFile() {
			return this.importSingleFile;
		}

		public Boolean includePids;

		public Boolean getIncludePids() {
			return this.includePids;
		}

		public String ItemData;

		public String getItemData() {
			return this.ItemData;
		}

		public String ItemDataAny;

		public String getItemDataAny() {
			return this.ItemDataAny;
		}

		public String ItemDataBase64Binary;

		public String getItemDataBase64Binary() {
			return this.ItemDataBase64Binary;
		}

		public String ItemDataBase64Float;

		public String getItemDataBase64Float() {
			return this.ItemDataBase64Float;
		}

		public String ItemDataBoolean;

		public String getItemDataBoolean() {
			return this.ItemDataBoolean;
		}

		public String ItemDataDate;

		public String getItemDataDate() {
			return this.ItemDataDate;
		}

		public String ItemDataDatetime;

		public String getItemDataDatetime() {
			return this.ItemDataDatetime;
		}

		public String ItemDataDouble;

		public String getItemDataDouble() {
			return this.ItemDataDouble;
		}

		public String ItemDataDurationDatetime;

		public String getItemDataDurationDatetime() {
			return this.ItemDataDurationDatetime;
		}

		public String ItemDataFloat;

		public String getItemDataFloat() {
			return this.ItemDataFloat;
		}

		public String ItemDataHexBinary;

		public String getItemDataHexBinary() {
			return this.ItemDataHexBinary;
		}

		public String ItemDataHexFloat;

		public String getItemDataHexFloat() {
			return this.ItemDataHexFloat;
		}

		public String ItemDataIncompleteDatetime;

		public String getItemDataIncompleteDatetime() {
			return this.ItemDataIncompleteDatetime;
		}

		public String ItemDataInteger;

		public String getItemDataInteger() {
			return this.ItemDataInteger;
		}

		public String ItemDataIntervalDatetime;

		public String getItemDataIntervalDatetime() {
			return this.ItemDataIntervalDatetime;
		}

		public String ItemDataPartialDate;

		public String getItemDataPartialDate() {
			return this.ItemDataPartialDate;
		}

		public String ItemDataPartialDatetime;

		public String getItemDataPartialDatetime() {
			return this.ItemDataPartialDatetime;
		}

		public String ItemDataPartialTime;

		public String getItemDataPartialTime() {
			return this.ItemDataPartialTime;
		}

		public String ItemDataString;

		public String getItemDataString() {
			return this.ItemDataString;
		}

		public String ItemDataTime;

		public String getItemDataTime() {
			return this.ItemDataTime;
		}

		public String ItemDataURI;

		public String getItemDataURI() {
			return this.ItemDataURI;
		}

		public String MDPD;

		public String getMDPD() {
			return this.MDPD;
		}

		public String MDPDName;

		public String getMDPDName() {
			return this.MDPDName;
		}

		public String xslt;

		public String getXslt() {
			return this.xslt;
		}

		public String xslt_namespace;

		public String getXslt_namespace() {
			return this.xslt_namespace;
		}

		public Integer counter;

		public Integer getCounter() {
			return this.counter;
		}

		public Integer currentCounter;

		public Integer getCurrentCounter() {
			return this.currentCounter;
		}

		public Float status;

		public Float getStatus() {
			return this.status;
		}

		public Float statusTmp;

		public Float getStatusTmp() {
			return this.statusTmp;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "ODM_MASTER";
	private final String projectName = "TOS";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					ODM_MASTER.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(ODM_MASTER.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tRunJob_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_2", System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_26Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_8", System.currentTimeMillis());

		status = "failure";

		tJava_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputXML_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputXML_1", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_1", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_3", System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_27Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_9", System.currentTimeMillis());

		status = "failure";

		tJava_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_4", System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_28Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tRunJob_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_28_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_28", System.currentTimeMillis());

		status = "failure";

		tJava_28_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_22_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_22", System.currentTimeMillis());

		status = "failure";

		tJava_22_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_27_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_27", System.currentTimeMillis());

		status = "failure";

		tJava_27_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_26_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_26", System.currentTimeMillis());

		status = "failure";

		tJava_26_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_1", System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_12", System.currentTimeMillis());

		status = "failure";

		tRunJob_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_12", System.currentTimeMillis());

		status = "failure";

		tJava_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileList_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileList_1", System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileDelete_1", System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_10", System.currentTimeMillis());

		status = "failure";

		tJava_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_5", System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_17Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tRunJob_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_6", System.currentTimeMillis());

		status = "failure";

		tJava_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_1", System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_25Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_7", System.currentTimeMillis());

		status = "failure";

		tJava_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_25_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_25", System.currentTimeMillis());

		status = "failure";

		tJava_25_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_17", System.currentTimeMillis());

		status = "failure";

		tJava_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileList_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileList_4", System.currentTimeMillis());

		status = "failure";

		tFileList_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_4", System.currentTimeMillis());

		status = "failure";

		tFileList_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileList_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileList_2", System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_20Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tFileList_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_2", System.currentTimeMillis());

		status = "failure";

		tFileList_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_18_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_18", System.currentTimeMillis());

		status = "failure";

		tJava_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_5", System.currentTimeMillis());

		status = "failure";

		tJava_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_19_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_19", System.currentTimeMillis());

		status = "failure";

		tJava_19_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_10", System.currentTimeMillis());

		status = "failure";

		tRunJob_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_20_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_20", System.currentTimeMillis());

		status = "failure";

		tJava_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tCreateTemporaryFile_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_2", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_21_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_21", System.currentTimeMillis());

		status = "failure";

		tJava_21_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleConnection_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleConnection_1", System.currentTimeMillis());

		status = "failure";

		tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleInput_1", System.currentTimeMillis());

		status = "failure";

		tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_2", System.currentTimeMillis());

		status = "failure";

		tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleClose_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tOracleClose_1", System.currentTimeMillis());

		status = "failure";

		tOracleClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLibraryLoad_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

		status = "failure";

		tLibraryLoad_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tCreateTemporaryFile_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_1", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tRunJob_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_8_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputXML_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_9_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_28_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_22_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_27_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_26_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_12_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_12_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileList_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_10_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_6_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_7_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_25_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_17_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileList_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileList_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_18_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_19_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_10_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_20_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_2_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_21_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleConnection_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleInput_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleClose_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLibraryLoad_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_2 begin ] start
				 */

				ok_Hash.put("tRunJob_2", false);
				start_Hash.put("tRunJob_2", System.currentTimeMillis());
				currentComponent = "tRunJob_2";

				int tos_count_tRunJob_2 = 0;

				/**
				 * [tRunJob_2 begin ] stop
				 */
				/**
				 * [tRunJob_2 main ] start
				 */

				currentComponent = "tRunJob_2";

				java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();
				paraList_tRunJob_2.add("--father_pid=" + pid);

				paraList_tRunJob_2.add("--root_pid=" + rootPid);

				paraList_tRunJob_2.add("--father_node=tRunJob_2");

				paraList_tRunJob_2.add("--context=Default");

				// for feature:10589
				paraList_tRunJob_2.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_2.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_2 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_2 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_2".equals(tRunJobName_tRunJob_2)
						&& childResumePath_tRunJob_2 != null) {
					paraList_tRunJob_2
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_2");

				java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_2 = context
						.propertyNames();
				while (propertyNames_tRunJob_2.hasMoreElements()) {
					String key_tRunJob_2 = (String) propertyNames_tRunJob_2
							.nextElement();
					Object value_tRunJob_2 = (Object) context
							.get(key_tRunJob_2);
					paraList_tRunJob_2.add("--context_param " + key_tRunJob_2
							+ "=" + value_tRunJob_2);
				}

				parentContextMap_tRunJob_2.put("importTerms",
						context.importTerms);
				parentContextMap_tRunJob_2.put("basedir", context.basedir);
				parentContextMap_tRunJob_2.put("datePattern",
						context.datePattern);
				parentContextMap_tRunJob_2.put("fileName", context.fileName);
				parentContextMap_tRunJob_2.put("cleanUp", context.cleanUp);
				parentContextMap_tRunJob_2.put("coding", context.coding);
				parentContextMap_tRunJob_2.put("DBHost", context.DBHost);
				parentContextMap_tRunJob_2
						.put("DBInstance", context.DBInstance);
				parentContextMap_tRunJob_2
						.put("DBPassword", context.DBPassword);
				parentContextMap_tRunJob_2.put("DBPort", context.DBPort);
				parentContextMap_tRunJob_2.put("DBSchema", context.DBSchema);
				parentContextMap_tRunJob_2
						.put("DBUsername", context.DBUsername);
				parentContextMap_tRunJob_2.put("FTPPassword",
						context.FTPPassword);
				parentContextMap_tRunJob_2.put("FTPUser", context.FTPUser);
				parentContextMap_tRunJob_2.put("truncateProject",
						context.truncateProject);
				parentContextMap_tRunJob_2
						.put("concept_cd", context.concept_cd);
				parentContextMap_tRunJob_2.put("concept_path",
						context.concept_path);
				parentContextMap_tRunJob_2.put("currentFile",
						context.currentFile);
				parentContextMap_tRunJob_2.put("encoding", context.encoding);
				parentContextMap_tRunJob_2
						.put("folderMain", context.folderMain);
				parentContextMap_tRunJob_2.put("folderODM", context.folderODM);
				parentContextMap_tRunJob_2.put("folderOutput",
						context.folderOutput);
				parentContextMap_tRunJob_2.put("folderTmp", context.folderTmp);
				parentContextMap_tRunJob_2.put("i2b2HeadNode",
						context.i2b2HeadNode);
				parentContextMap_tRunJob_2.put("i2b2HeadNodeName",
						context.i2b2HeadNodeName);
				parentContextMap_tRunJob_2.put("importCodelist",
						context.importCodelist);
				parentContextMap_tRunJob_2.put("importSingleFile",
						context.importSingleFile);
				parentContextMap_tRunJob_2.put("includePids",
						context.includePids);
				parentContextMap_tRunJob_2.put("ItemData", context.ItemData);
				parentContextMap_tRunJob_2.put("ItemDataAny",
						context.ItemDataAny);
				parentContextMap_tRunJob_2.put("ItemDataBase64Binary",
						context.ItemDataBase64Binary);
				parentContextMap_tRunJob_2.put("ItemDataBase64Float",
						context.ItemDataBase64Float);
				parentContextMap_tRunJob_2.put("ItemDataBoolean",
						context.ItemDataBoolean);
				parentContextMap_tRunJob_2.put("ItemDataDate",
						context.ItemDataDate);
				parentContextMap_tRunJob_2.put("ItemDataDatetime",
						context.ItemDataDatetime);
				parentContextMap_tRunJob_2.put("ItemDataDouble",
						context.ItemDataDouble);
				parentContextMap_tRunJob_2.put("ItemDataDurationDatetime",
						context.ItemDataDurationDatetime);
				parentContextMap_tRunJob_2.put("ItemDataFloat",
						context.ItemDataFloat);
				parentContextMap_tRunJob_2.put("ItemDataHexBinary",
						context.ItemDataHexBinary);
				parentContextMap_tRunJob_2.put("ItemDataHexFloat",
						context.ItemDataHexFloat);
				parentContextMap_tRunJob_2.put("ItemDataIncompleteDatetime",
						context.ItemDataIncompleteDatetime);
				parentContextMap_tRunJob_2.put("ItemDataInteger",
						context.ItemDataInteger);
				parentContextMap_tRunJob_2.put("ItemDataIntervalDatetime",
						context.ItemDataIntervalDatetime);
				parentContextMap_tRunJob_2.put("ItemDataPartialDate",
						context.ItemDataPartialDate);
				parentContextMap_tRunJob_2.put("ItemDataPartialDatetime",
						context.ItemDataPartialDatetime);
				parentContextMap_tRunJob_2.put("ItemDataPartialTime",
						context.ItemDataPartialTime);
				parentContextMap_tRunJob_2.put("ItemDataString",
						context.ItemDataString);
				parentContextMap_tRunJob_2.put("ItemDataTime",
						context.ItemDataTime);
				parentContextMap_tRunJob_2.put("ItemDataURI",
						context.ItemDataURI);
				parentContextMap_tRunJob_2.put("MDPD", context.MDPD);
				parentContextMap_tRunJob_2.put("MDPDName", context.MDPDName);
				parentContextMap_tRunJob_2.put("xslt", context.xslt);
				parentContextMap_tRunJob_2.put("xslt_namespace",
						context.xslt_namespace);
				parentContextMap_tRunJob_2.put("counter", context.counter);
				parentContextMap_tRunJob_2.put("currentCounter",
						context.currentCounter);
				parentContextMap_tRunJob_2.put("status", context.status);
				parentContextMap_tRunJob_2.put("statusTmp", context.statusTmp);

				Object obj_tRunJob_2 = null;

				tos.odm_extract_pd_0_1.ODM_Extract_PD childJob_tRunJob_2 = new tos.odm_extract_pd_0_1.ODM_Extract_PD();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_2) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
							.entrySet()) {
						dataSources_tRunJob_2.put(
								talendDataSourceEntry_tRunJob_2.getKey(),
								talendDataSourceEntry_tRunJob_2.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
				}
				childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;
				String[][] childReturn_tRunJob_2 = childJob_tRunJob_2
						.runJob((String[]) paraList_tRunJob_2
								.toArray(new String[paraList_tRunJob_2.size()]));
				errorCode = childJob_tRunJob_2.getErrorCode();

				if (childJob_tRunJob_2.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_2_CHILD_RETURN_CODE",
							childJob_tRunJob_2.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_2
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_2_CHILD_RETURN_CODE",
							childJob_tRunJob_2.getErrorCode());
				}
				if (childJob_tRunJob_2.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_2.getExceptionStackTrace());
				}

				if (childJob_tRunJob_2.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_2.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_2++;

				/**
				 * [tRunJob_2 main ] stop
				 */
				/**
				 * [tRunJob_2 end ] start
				 */

				currentComponent = "tRunJob_2";

				ok_Hash.put("tRunJob_2", true);
				end_Hash.put("tRunJob_2", System.currentTimeMillis());

				if (!StatusListener.getInterrupt()) {

					tJava_8Process(globalMap);
				}

				/**
				 * [tRunJob_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_8Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_8 begin ] start
				 */

				ok_Hash.put("tJava_8", false);
				start_Hash.put("tJava_8", System.currentTimeMillis());
				currentComponent = "tJava_8";

				int tos_count_tJava_8 = 0;

				context.status = context.status + (context.statusTmp / 100)
						* 30;
				StatusListener.setStatus(context.status, "Creating DB Schema",
						context.currentFile);
				System.out.println(context.status);

				/**
				 * [tJava_8 begin ] stop
				 */
				/**
				 * [tJava_8 main ] start
				 */

				currentComponent = "tJava_8";

				tos_count_tJava_8++;

				/**
				 * [tJava_8 main ] stop
				 */
				/**
				 * [tJava_8 end ] start
				 */

				currentComponent = "tJava_8";

				ok_Hash.put("tJava_8", true);
				end_Hash.put("tJava_8", System.currentTimeMillis());

				/**
				 * [tJava_8 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_8:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputXML_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_8_SUBPROCESS_STATE", 1);
	}

	public static class row14Struct implements
			routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_MASTER = new byte[0];
		static byte[] commonByteArray_TOS_ODM_MASTER = new byte[0];

		public String OID;

		public String getOID() {
			return this.OID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_MASTER.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_MASTER.length == 0) {
						commonByteArray_TOS_ODM_MASTER = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_MASTER = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_MASTER, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_MASTER, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_MASTER) {

				try {

					int length = 0;

					this.OID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.OID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OID=" + OID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputXML_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row14Struct row14 = new row14Struct();

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());
				currentComponent = "tJavaRow_1";

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tFileInputXML_1 begin ] start
				 */

				ok_Hash.put("tFileInputXML_1", false);
				start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
				currentComponent = "tFileInputXML_1";

				int tos_count_tFileInputXML_1 = 0;

				int nb_line_tFileInputXML_1 = 0;

				class IgnoreDTDEntityResolver_tFileInputXML_1 implements
						org.xml.sax.EntityResolver {

					public org.xml.sax.InputSource resolveEntity(
							String publicId, String systemId)
							throws org.xml.sax.SAXException,
							java.io.IOException {
						return new org.xml.sax.InputSource(
								new java.io.ByteArrayInputStream(
										"<?xml version='1.0' encoding='UTF-8'?>"
												.getBytes()));
					}

				}
				String os_tFileInputXML_1 = System.getProperty("os.name")
						.toLowerCase();
				boolean isWindows_tFileInputXML_1 = false;
				if (os_tFileInputXML_1.indexOf("windows") > -1
						|| os_tFileInputXML_1.indexOf("nt") > -1) {
					isWindows_tFileInputXML_1 = true;
				}
				class NameSpaceTool_tFileInputXML_1 {

					public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

					private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

					public void countNSMap(org.dom4j.Element el) {
						for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
								.declaredNamespaces()) {
							if (ns.getPrefix().trim().length() == 0) {
								xmlNameSpaceMap.put(
										"pre" + defualtNSPath.size(),
										ns.getURI());
								String path = "";
								org.dom4j.Element elTmp = el;
								while (elTmp != null) {
									if (elTmp.getNamespacePrefix() != null
											&& elTmp.getNamespacePrefix()
													.length() > 0) {
										path = "/" + elTmp.getNamespacePrefix()
												+ ":" + elTmp.getName() + path;
									} else {
										path = "/" + elTmp.getName() + path;
									}
									elTmp = elTmp.getParent();
								}
								defualtNSPath.add(path);
							} else {
								xmlNameSpaceMap
										.put(ns.getPrefix(), ns.getURI());
							}

						}
						for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
								.elements()) {
							countNSMap(e);
						}
					}

					public String addDefaultNSPrefix(String path,
							String loopPath) {
						if (defualtNSPath.size() > 0) {
							String fullPath = loopPath;
							if (!path.equals(fullPath)) {
								for (String tmp : path.split("/")) {
									if (("..").equals(tmp)) {
										fullPath = fullPath.substring(0,
												fullPath.lastIndexOf("/"));
									} else {
										fullPath += "/" + tmp;
									}
								}
							}
							int size = fullPath.split("/").length - 1;
							if (size < 0) {
								return fullPath;
							}
							int[] indexs = new int[size];
							java.util.Arrays.fill(indexs, -1);
							int length = 0;
							for (int i = 0; i < defualtNSPath.size(); i++) {
								if (defualtNSPath.get(i).length() > length
										&& fullPath.startsWith(defualtNSPath
												.get(i))) {
									java.util.Arrays.fill(indexs, defualtNSPath
											.get(i).split("/").length - 2,
											indexs.length, i);
									length = defualtNSPath.get(i).length();
								}
							}

							StringBuilder newPath = new StringBuilder();
							String[] pathStrs = path.split("/");
							for (int i = 0; i < pathStrs.length; i++) {
								String tmp = pathStrs[i];
								if (newPath.length() > 0) {
									newPath.append("/");
								}
								if (tmp.length() > 0 && tmp.indexOf(":") == -1
										&& tmp.indexOf(".") == -1 /*
																 * &&
																 * tmp.indexOf
																 * ("@") == -1
																 */) {
									int index = indexs[i + indexs.length
											- pathStrs.length];
									if (index >= 0) {
										// ==== add by wliu to support both
										// filter and functions==
										if (tmp.indexOf("[") > 0
												&& tmp.indexOf("]") > tmp
														.indexOf("[")) {// include
																		// filter
											String tmpStr = replaceElementWithNS(
													tmp, "pre" + index + ":");
											newPath.append(tmpStr);
										} else {
											if (tmp.indexOf("@") != -1
													|| tmp.indexOf("(") < tmp
															.indexOf(")")) { // include
																				// attribute
												newPath.append(tmp);
											} else {
												// ==add end=======
												newPath.append("pre")
														.append(index)
														.append(":")
														.append(tmp);
											}
										}
									} else {
										newPath.append(tmp);
									}
								} else {
									newPath.append(tmp);
								}
							}
							return newPath.toString();
						}
						return path;
					}

					private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
					private java.util.regex.Pattern pattern = java.util.regex.Pattern
							.compile(matches);

					private String replaceElementWithNS(String global,
							String pre) {

						java.util.regex.Matcher match = pattern.matcher(global);
						StringBuffer sb = new StringBuffer();
						match.reset();
						while (match.find()) {
							String group = match.group();
							String tmp = "";
							if (group.toLowerCase().matches(
									"\\b(div|mod|and|or)\\b.*")
									|| group.matches("@.*")) {
								tmp = group;
							} else {
								tmp = tmp + pre + group;
							}
							match.appendReplacement(sb, tmp);
						}
						match.appendTail(sb);

						return sb.toString();
					}

				}

				class XML_API_tFileInputXML_1 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				org.dom4j.io.SAXReader reader_tFileInputXML_1 = new org.dom4j.io.SAXReader();
				reader_tFileInputXML_1
						.setEntityResolver(new IgnoreDTDEntityResolver_tFileInputXML_1());
				Object filename_tFileInputXML_1 = null;
				try {
					filename_tFileInputXML_1 = context.currentFile;
				} catch (java.lang.Exception e) {

					System.err.println(e.getMessage());

				}
				if (filename_tFileInputXML_1 != null
						&& filename_tFileInputXML_1 instanceof String
						&& filename_tFileInputXML_1.toString().startsWith("//")) {
					if (!isWindows_tFileInputXML_1) {
						filename_tFileInputXML_1 = filename_tFileInputXML_1
								.toString().replaceFirst("//", "/");
					}
				}

				boolean isValidFile_tFileInputXML_1 = true;
				org.dom4j.Document doc_tFileInputXML_1 = null;
				java.io.Closeable toClose_tFileInputXML_1 = null;
				try {
					if (filename_tFileInputXML_1 instanceof java.io.InputStream) {
						java.io.InputStream inputStream_tFileInputXML_1 = (java.io.InputStream) filename_tFileInputXML_1;
						toClose_tFileInputXML_1 = inputStream_tFileInputXML_1;
						doc_tFileInputXML_1 = reader_tFileInputXML_1
								.read(inputStream_tFileInputXML_1);
					} else {
						java.io.Reader unicodeReader_tFileInputXML_1 = new UnicodeReader(
								new java.io.FileInputStream(String
										.valueOf(filename_tFileInputXML_1)),
								context.encoding);
						toClose_tFileInputXML_1 = unicodeReader_tFileInputXML_1;
						org.xml.sax.InputSource in_tFileInputXML_1 = new org.xml.sax.InputSource(
								unicodeReader_tFileInputXML_1);
						doc_tFileInputXML_1 = reader_tFileInputXML_1
								.read(in_tFileInputXML_1);
					}
				} catch (java.lang.Exception e) {
					System.err.println(e.getMessage());
					isValidFile_tFileInputXML_1 = false;
				} finally {
					if (toClose_tFileInputXML_1 != null) {
						toClose_tFileInputXML_1.close();
					}
				}
				if (isValidFile_tFileInputXML_1) {
					NameSpaceTool_tFileInputXML_1 nsTool_tFileInputXML_1 = new NameSpaceTool_tFileInputXML_1();
					nsTool_tFileInputXML_1.countNSMap(doc_tFileInputXML_1
							.getRootElement());
					java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_1 = nsTool_tFileInputXML_1.xmlNameSpaceMap;

					org.dom4j.XPath x_tFileInputXML_1 = doc_tFileInputXML_1
							.createXPath(nsTool_tFileInputXML_1
									.addDefaultNSPrefix("/ODM/Study",
											"/ODM/Study"));
					x_tFileInputXML_1
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1);

					java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_1 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tFileInputXML_1
							.selectNodes(doc_tFileInputXML_1);
					XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();
					String str_tFileInputXML_1 = "";
					org.dom4j.Node node_tFileInputXML_1 = null;

					// init all mapping xpaths
					org.dom4j.XPath xTmp0_tFileInputXML_1 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_1
									.addDefaultNSPrefix("@OID", "/ODM/Study"));
					xTmp0_tFileInputXML_1
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1);

					for (org.dom4j.tree.AbstractNode temp_tFileInputXML_1 : nodeList_tFileInputXML_1) {
						nb_line_tFileInputXML_1++;
						row14 = null;
						boolean whetherReject_tFileInputXML_1 = false;
						row14 = new row14Struct();
						try {
							Object obj0_tFileInputXML_1 = xTmp0_tFileInputXML_1
									.evaluate(temp_tFileInputXML_1);
							if (obj0_tFileInputXML_1 == null) {
								node_tFileInputXML_1 = null;
								str_tFileInputXML_1 = "";

							} else if (obj0_tFileInputXML_1 instanceof org.dom4j.Node) {
								node_tFileInputXML_1 = (org.dom4j.Node) obj0_tFileInputXML_1;
								str_tFileInputXML_1 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_1,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj0_tFileInputXML_1 instanceof String
									|| obj0_tFileInputXML_1 instanceof Number) {
								node_tFileInputXML_1 = temp_tFileInputXML_1;
								str_tFileInputXML_1 = String
										.valueOf(obj0_tFileInputXML_1);
							} else if (obj0_tFileInputXML_1 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_1;
								node_tFileInputXML_1 = nodes_tFileInputXML_1
										.size() > 0 ? nodes_tFileInputXML_1
										.get(0) : null;
								str_tFileInputXML_1 = node_tFileInputXML_1 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_1,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_1
									.isDefNull(node_tFileInputXML_1)) {
								row14.OID = null;
							} else if (xml_api_tFileInputXML_1
									.isEmpty(node_tFileInputXML_1)) {
								row14.OID = "";
							} else if (xml_api_tFileInputXML_1
									.isMissing(node_tFileInputXML_1)) {
								row14.OID = null;
							} else {
								row14.OID = str_tFileInputXML_1;
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputXML_1 = true;
							System.err.println(e.getMessage());
							row14 = null;
						}

						/**
						 * [tFileInputXML_1 begin ] stop
						 */
						/**
						 * [tFileInputXML_1 main ] start
						 */

						currentComponent = "tFileInputXML_1";

						tos_count_tFileInputXML_1++;

						/**
						 * [tFileInputXML_1 main ] stop
						 */
						// Start of branch "row14"
						if (row14 != null) {

							/**
							 * [tJavaRow_1 main ] start
							 */

							currentComponent = "tJavaRow_1";

							context.fileName = row14.OID;
							// context.concept_cd = "|" + context.i2b2HeadNode +
							// "|" + context.MDPD+ "|"+ row14.OID + "|";
							// context.concept_path = "\\" +
							// context.i2b2HeadNode + "\\" + context.MDPD+ "\\"+
							// row14.OID + "\\";
							System.out.println("OID is now: "
									+ context.fileName);
							// System.out.println(context.concept_cd);
							// System.out.println(context.concept_path);

							nb_line_tJavaRow_1++;

							tos_count_tJavaRow_1++;

							/**
							 * [tJavaRow_1 main ] stop
							 */

						} // End of branch "row14"

						/**
						 * [tFileInputXML_1 end ] start
						 */

						currentComponent = "tFileInputXML_1";

					}
				}
				globalMap.put("tFileInputXML_1_NB_LINE",
						nb_line_tFileInputXML_1);

				ok_Hash.put("tFileInputXML_1", true);
				end_Hash.put("tFileInputXML_1", System.currentTimeMillis());

				if (!StatusListener.getInterrupt()) {

					tRunJob_3Process(globalMap);
				}

				/**
				 * [tFileInputXML_1 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				/**
				 * [tJavaRow_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_3 begin ] start
				 */

				ok_Hash.put("tRunJob_3", false);
				start_Hash.put("tRunJob_3", System.currentTimeMillis());
				currentComponent = "tRunJob_3";

				int tos_count_tRunJob_3 = 0;

				/**
				 * [tRunJob_3 begin ] stop
				 */
				/**
				 * [tRunJob_3 main ] start
				 */

				currentComponent = "tRunJob_3";

				java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();
				paraList_tRunJob_3.add("--father_pid=" + pid);

				paraList_tRunJob_3.add("--root_pid=" + rootPid);

				paraList_tRunJob_3.add("--father_node=tRunJob_3");

				paraList_tRunJob_3.add("--context=Default");

				// for feature:10589
				paraList_tRunJob_3.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_3.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_3 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_3 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_3".equals(tRunJobName_tRunJob_3)
						&& childResumePath_tRunJob_3 != null) {
					paraList_tRunJob_3
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_3.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_3");

				java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_3 = context
						.propertyNames();
				while (propertyNames_tRunJob_3.hasMoreElements()) {
					String key_tRunJob_3 = (String) propertyNames_tRunJob_3
							.nextElement();
					Object value_tRunJob_3 = (Object) context
							.get(key_tRunJob_3);
					paraList_tRunJob_3.add("--context_param " + key_tRunJob_3
							+ "=" + value_tRunJob_3);
				}

				parentContextMap_tRunJob_3.put("importTerms",
						context.importTerms);
				parentContextMap_tRunJob_3.put("basedir", context.basedir);
				parentContextMap_tRunJob_3.put("datePattern",
						context.datePattern);
				parentContextMap_tRunJob_3.put("fileName", context.fileName);
				parentContextMap_tRunJob_3.put("cleanUp", context.cleanUp);
				parentContextMap_tRunJob_3.put("coding", context.coding);
				parentContextMap_tRunJob_3.put("DBHost", context.DBHost);
				parentContextMap_tRunJob_3
						.put("DBInstance", context.DBInstance);
				parentContextMap_tRunJob_3
						.put("DBPassword", context.DBPassword);
				parentContextMap_tRunJob_3.put("DBPort", context.DBPort);
				parentContextMap_tRunJob_3.put("DBSchema", context.DBSchema);
				parentContextMap_tRunJob_3
						.put("DBUsername", context.DBUsername);
				parentContextMap_tRunJob_3.put("FTPPassword",
						context.FTPPassword);
				parentContextMap_tRunJob_3.put("FTPUser", context.FTPUser);
				parentContextMap_tRunJob_3.put("truncateProject",
						context.truncateProject);
				parentContextMap_tRunJob_3
						.put("concept_cd", context.concept_cd);
				parentContextMap_tRunJob_3.put("concept_path",
						context.concept_path);
				parentContextMap_tRunJob_3.put("currentFile",
						context.currentFile);
				parentContextMap_tRunJob_3.put("encoding", context.encoding);
				parentContextMap_tRunJob_3
						.put("folderMain", context.folderMain);
				parentContextMap_tRunJob_3.put("folderODM", context.folderODM);
				parentContextMap_tRunJob_3.put("folderOutput",
						context.folderOutput);
				parentContextMap_tRunJob_3.put("folderTmp", context.folderTmp);
				parentContextMap_tRunJob_3.put("i2b2HeadNode",
						context.i2b2HeadNode);
				parentContextMap_tRunJob_3.put("i2b2HeadNodeName",
						context.i2b2HeadNodeName);
				parentContextMap_tRunJob_3.put("importCodelist",
						context.importCodelist);
				parentContextMap_tRunJob_3.put("importSingleFile",
						context.importSingleFile);
				parentContextMap_tRunJob_3.put("includePids",
						context.includePids);
				parentContextMap_tRunJob_3.put("ItemData", context.ItemData);
				parentContextMap_tRunJob_3.put("ItemDataAny",
						context.ItemDataAny);
				parentContextMap_tRunJob_3.put("ItemDataBase64Binary",
						context.ItemDataBase64Binary);
				parentContextMap_tRunJob_3.put("ItemDataBase64Float",
						context.ItemDataBase64Float);
				parentContextMap_tRunJob_3.put("ItemDataBoolean",
						context.ItemDataBoolean);
				parentContextMap_tRunJob_3.put("ItemDataDate",
						context.ItemDataDate);
				parentContextMap_tRunJob_3.put("ItemDataDatetime",
						context.ItemDataDatetime);
				parentContextMap_tRunJob_3.put("ItemDataDouble",
						context.ItemDataDouble);
				parentContextMap_tRunJob_3.put("ItemDataDurationDatetime",
						context.ItemDataDurationDatetime);
				parentContextMap_tRunJob_3.put("ItemDataFloat",
						context.ItemDataFloat);
				parentContextMap_tRunJob_3.put("ItemDataHexBinary",
						context.ItemDataHexBinary);
				parentContextMap_tRunJob_3.put("ItemDataHexFloat",
						context.ItemDataHexFloat);
				parentContextMap_tRunJob_3.put("ItemDataIncompleteDatetime",
						context.ItemDataIncompleteDatetime);
				parentContextMap_tRunJob_3.put("ItemDataInteger",
						context.ItemDataInteger);
				parentContextMap_tRunJob_3.put("ItemDataIntervalDatetime",
						context.ItemDataIntervalDatetime);
				parentContextMap_tRunJob_3.put("ItemDataPartialDate",
						context.ItemDataPartialDate);
				parentContextMap_tRunJob_3.put("ItemDataPartialDatetime",
						context.ItemDataPartialDatetime);
				parentContextMap_tRunJob_3.put("ItemDataPartialTime",
						context.ItemDataPartialTime);
				parentContextMap_tRunJob_3.put("ItemDataString",
						context.ItemDataString);
				parentContextMap_tRunJob_3.put("ItemDataTime",
						context.ItemDataTime);
				parentContextMap_tRunJob_3.put("ItemDataURI",
						context.ItemDataURI);
				parentContextMap_tRunJob_3.put("MDPD", context.MDPD);
				parentContextMap_tRunJob_3.put("MDPDName", context.MDPDName);
				parentContextMap_tRunJob_3.put("xslt", context.xslt);
				parentContextMap_tRunJob_3.put("xslt_namespace",
						context.xslt_namespace);
				parentContextMap_tRunJob_3.put("counter", context.counter);
				parentContextMap_tRunJob_3.put("currentCounter",
						context.currentCounter);
				parentContextMap_tRunJob_3.put("status", context.status);
				parentContextMap_tRunJob_3.put("statusTmp", context.statusTmp);

				Object obj_tRunJob_3 = null;

				tos.idrt_to_db_schema_1_0.IDRT_to_DB_Schema childJob_tRunJob_3 = new tos.idrt_to_db_schema_1_0.IDRT_to_DB_Schema();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_3) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_3 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_3 : talendDataSources_tRunJob_3
							.entrySet()) {
						dataSources_tRunJob_3.put(
								talendDataSourceEntry_tRunJob_3.getKey(),
								talendDataSourceEntry_tRunJob_3.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_3.setDataSources(dataSources_tRunJob_3);
				}
				childJob_tRunJob_3.parentContextMap = parentContextMap_tRunJob_3;
				String[][] childReturn_tRunJob_3 = childJob_tRunJob_3
						.runJob((String[]) paraList_tRunJob_3
								.toArray(new String[paraList_tRunJob_3.size()]));
				errorCode = childJob_tRunJob_3.getErrorCode();

				if (childJob_tRunJob_3.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_3_CHILD_RETURN_CODE",
							childJob_tRunJob_3.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_3
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_3_CHILD_RETURN_CODE",
							childJob_tRunJob_3.getErrorCode());
				}
				if (childJob_tRunJob_3.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_3.getExceptionStackTrace());
				}

				if (childJob_tRunJob_3.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_3.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_3++;

				/**
				 * [tRunJob_3 main ] stop
				 */
				/**
				 * [tRunJob_3 end ] start
				 */

				currentComponent = "tRunJob_3";

				ok_Hash.put("tRunJob_3", true);
				end_Hash.put("tRunJob_3", System.currentTimeMillis());

				if (!StatusListener.getInterrupt()) {

					tJava_9Process(globalMap);
				}

				/**
				 * [tRunJob_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 1);
	}

	public void tJava_9Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_9 begin ] start
				 */

				ok_Hash.put("tJava_9", false);
				start_Hash.put("tJava_9", System.currentTimeMillis());
				currentComponent = "tJava_9";

				int tos_count_tJava_9 = 0;

				context.status = context.status + (context.statusTmp / 100)
						* 20;
				StatusListener.setStatus(context.status, "Uploading Data",
						context.currentFile);
				System.out.println(context.status);

				/**
				 * [tJava_9 begin ] stop
				 */
				/**
				 * [tJava_9 main ] start
				 */

				currentComponent = "tJava_9";

				tos_count_tJava_9++;

				/**
				 * [tJava_9 main ] stop
				 */
				/**
				 * [tJava_9 end ] start
				 */

				currentComponent = "tJava_9";

				ok_Hash.put("tJava_9", true);
				end_Hash.put("tJava_9", System.currentTimeMillis());

				if (!StatusListener.getInterrupt()) {

					tRunJob_4Process(globalMap);
				}

				/**
				 * [tJava_9 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_9_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_4 begin ] start
				 */

				ok_Hash.put("tRunJob_4", false);
				start_Hash.put("tRunJob_4", System.currentTimeMillis());
				currentComponent = "tRunJob_4";

				int tos_count_tRunJob_4 = 0;

				/**
				 * [tRunJob_4 begin ] stop
				 */
				/**
				 * [tRunJob_4 main ] start
				 */

				currentComponent = "tRunJob_4";

				java.util.List<String> paraList_tRunJob_4 = new java.util.ArrayList<String>();
				paraList_tRunJob_4.add("--father_pid=" + pid);

				paraList_tRunJob_4.add("--root_pid=" + rootPid);

				paraList_tRunJob_4.add("--father_node=tRunJob_4");

				paraList_tRunJob_4.add("--context=Default");

				// for feature:10589
				paraList_tRunJob_4.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_4.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_4 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_4 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_4".equals(tRunJobName_tRunJob_4)
						&& childResumePath_tRunJob_4 != null) {
					paraList_tRunJob_4
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_4.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_4");

				java.util.Map<String, Object> parentContextMap_tRunJob_4 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_4 = context
						.propertyNames();
				while (propertyNames_tRunJob_4.hasMoreElements()) {
					String key_tRunJob_4 = (String) propertyNames_tRunJob_4
							.nextElement();
					Object value_tRunJob_4 = (Object) context
							.get(key_tRunJob_4);
					paraList_tRunJob_4.add("--context_param " + key_tRunJob_4
							+ "=" + value_tRunJob_4);
				}

				parentContextMap_tRunJob_4.put("importTerms",
						context.importTerms);
				parentContextMap_tRunJob_4.put("basedir", context.basedir);
				parentContextMap_tRunJob_4.put("datePattern",
						context.datePattern);
				parentContextMap_tRunJob_4.put("fileName", context.fileName);
				parentContextMap_tRunJob_4.put("cleanUp", context.cleanUp);
				parentContextMap_tRunJob_4.put("coding", context.coding);
				parentContextMap_tRunJob_4.put("DBHost", context.DBHost);
				parentContextMap_tRunJob_4
						.put("DBInstance", context.DBInstance);
				parentContextMap_tRunJob_4
						.put("DBPassword", context.DBPassword);
				parentContextMap_tRunJob_4.put("DBPort", context.DBPort);
				parentContextMap_tRunJob_4.put("DBSchema", context.DBSchema);
				parentContextMap_tRunJob_4
						.put("DBUsername", context.DBUsername);
				parentContextMap_tRunJob_4.put("FTPPassword",
						context.FTPPassword);
				parentContextMap_tRunJob_4.put("FTPUser", context.FTPUser);
				parentContextMap_tRunJob_4.put("truncateProject",
						context.truncateProject);
				parentContextMap_tRunJob_4
						.put("concept_cd", context.concept_cd);
				parentContextMap_tRunJob_4.put("concept_path",
						context.concept_path);
				parentContextMap_tRunJob_4.put("currentFile",
						context.currentFile);
				parentContextMap_tRunJob_4.put("encoding", context.encoding);
				parentContextMap_tRunJob_4
						.put("folderMain", context.folderMain);
				parentContextMap_tRunJob_4.put("folderODM", context.folderODM);
				parentContextMap_tRunJob_4.put("folderOutput",
						context.folderOutput);
				parentContextMap_tRunJob_4.put("folderTmp", context.folderTmp);
				parentContextMap_tRunJob_4.put("i2b2HeadNode",
						context.i2b2HeadNode);
				parentContextMap_tRunJob_4.put("i2b2HeadNodeName",
						context.i2b2HeadNodeName);
				parentContextMap_tRunJob_4.put("importCodelist",
						context.importCodelist);
				parentContextMap_tRunJob_4.put("importSingleFile",
						context.importSingleFile);
				parentContextMap_tRunJob_4.put("includePids",
						context.includePids);
				parentContextMap_tRunJob_4.put("ItemData", context.ItemData);
				parentContextMap_tRunJob_4.put("ItemDataAny",
						context.ItemDataAny);
				parentContextMap_tRunJob_4.put("ItemDataBase64Binary",
						context.ItemDataBase64Binary);
				parentContextMap_tRunJob_4.put("ItemDataBase64Float",
						context.ItemDataBase64Float);
				parentContextMap_tRunJob_4.put("ItemDataBoolean",
						context.ItemDataBoolean);
				parentContextMap_tRunJob_4.put("ItemDataDate",
						context.ItemDataDate);
				parentContextMap_tRunJob_4.put("ItemDataDatetime",
						context.ItemDataDatetime);
				parentContextMap_tRunJob_4.put("ItemDataDouble",
						context.ItemDataDouble);
				parentContextMap_tRunJob_4.put("ItemDataDurationDatetime",
						context.ItemDataDurationDatetime);
				parentContextMap_tRunJob_4.put("ItemDataFloat",
						context.ItemDataFloat);
				parentContextMap_tRunJob_4.put("ItemDataHexBinary",
						context.ItemDataHexBinary);
				parentContextMap_tRunJob_4.put("ItemDataHexFloat",
						context.ItemDataHexFloat);
				parentContextMap_tRunJob_4.put("ItemDataIncompleteDatetime",
						context.ItemDataIncompleteDatetime);
				parentContextMap_tRunJob_4.put("ItemDataInteger",
						context.ItemDataInteger);
				parentContextMap_tRunJob_4.put("ItemDataIntervalDatetime",
						context.ItemDataIntervalDatetime);
				parentContextMap_tRunJob_4.put("ItemDataPartialDate",
						context.ItemDataPartialDate);
				parentContextMap_tRunJob_4.put("ItemDataPartialDatetime",
						context.ItemDataPartialDatetime);
				parentContextMap_tRunJob_4.put("ItemDataPartialTime",
						context.ItemDataPartialTime);
				parentContextMap_tRunJob_4.put("ItemDataString",
						context.ItemDataString);
				parentContextMap_tRunJob_4.put("ItemDataTime",
						context.ItemDataTime);
				parentContextMap_tRunJob_4.put("ItemDataURI",
						context.ItemDataURI);
				parentContextMap_tRunJob_4.put("MDPD", context.MDPD);
				parentContextMap_tRunJob_4.put("MDPDName", context.MDPDName);
				parentContextMap_tRunJob_4.put("xslt", context.xslt);
				parentContextMap_tRunJob_4.put("xslt_namespace",
						context.xslt_namespace);
				parentContextMap_tRunJob_4.put("counter", context.counter);
				parentContextMap_tRunJob_4.put("currentCounter",
						context.currentCounter);
				parentContextMap_tRunJob_4.put("status", context.status);
				parentContextMap_tRunJob_4.put("statusTmp", context.statusTmp);

				Object obj_tRunJob_4 = null;

				tos.idrt_jdbc_upload_1_0.IDRT_JDBC_Upload childJob_tRunJob_4 = new tos.idrt_jdbc_upload_1_0.IDRT_JDBC_Upload();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_4 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_4) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_4 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_4 : talendDataSources_tRunJob_4
							.entrySet()) {
						dataSources_tRunJob_4.put(
								talendDataSourceEntry_tRunJob_4.getKey(),
								talendDataSourceEntry_tRunJob_4.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_4.setDataSources(dataSources_tRunJob_4);
				}
				childJob_tRunJob_4.parentContextMap = parentContextMap_tRunJob_4;
				String[][] childReturn_tRunJob_4 = childJob_tRunJob_4
						.runJob((String[]) paraList_tRunJob_4
								.toArray(new String[paraList_tRunJob_4.size()]));
				errorCode = childJob_tRunJob_4.getErrorCode();

				if (childJob_tRunJob_4.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_4_CHILD_RETURN_CODE",
							childJob_tRunJob_4.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_4
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_4_CHILD_RETURN_CODE",
							childJob_tRunJob_4.getErrorCode());
				}
				if (childJob_tRunJob_4.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_4_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_4.getExceptionStackTrace());
				}

				if (childJob_tRunJob_4.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_4.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_4++;

				/**
				 * [tRunJob_4 main ] stop
				 */
				/**
				 * [tRunJob_4 end ] start
				 */

				currentComponent = "tRunJob_4";

				ok_Hash.put("tRunJob_4", true);
				end_Hash.put("tRunJob_4", System.currentTimeMillis());

				/**
				 * [tRunJob_4 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tRunJob_4:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_22Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tRunJob_4_SUBPROCESS_STATE", 1);
	}

	public void tJava_28Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_28_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_28 begin ] start
				 */

				ok_Hash.put("tJava_28", false);
				start_Hash.put("tJava_28", System.currentTimeMillis());
				currentComponent = "tJava_28";

				int tos_count_tJava_28 = 0;

				StatusListener.error("Error whileuploading",
						((String) globalMap
								.get("tRunJob_4_CHILD_EXCEPTION_STACKTRACE")),
						context.currentFile);

				/**
				 * [tJava_28 begin ] stop
				 */
				/**
				 * [tJava_28 main ] start
				 */

				currentComponent = "tJava_28";

				tos_count_tJava_28++;

				/**
				 * [tJava_28 main ] stop
				 */
				/**
				 * [tJava_28 end ] start
				 */

				currentComponent = "tJava_28";

				ok_Hash.put("tJava_28", true);
				end_Hash.put("tJava_28", System.currentTimeMillis());

				/**
				 * [tJava_28 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_28_SUBPROCESS_STATE", 1);
	}

	public void tJava_22Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_22_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_22 begin ] start
				 */

				ok_Hash.put("tJava_22", false);
				start_Hash.put("tJava_22", System.currentTimeMillis());
				currentComponent = "tJava_22";

				int tos_count_tJava_22 = 0;

				StatusListener.setSubStatus(0.0f, (int) (float) (0.0f) + "%");

				/**
				 * [tJava_22 begin ] stop
				 */
				/**
				 * [tJava_22 main ] start
				 */

				currentComponent = "tJava_22";

				tos_count_tJava_22++;

				/**
				 * [tJava_22 main ] stop
				 */
				/**
				 * [tJava_22 end ] start
				 */

				currentComponent = "tJava_22";

				ok_Hash.put("tJava_22", true);
				end_Hash.put("tJava_22", System.currentTimeMillis());

				/**
				 * [tJava_22 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_22_SUBPROCESS_STATE", 1);
	}

	public void tJava_27Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_27_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_27 begin ] start
				 */

				ok_Hash.put("tJava_27", false);
				start_Hash.put("tJava_27", System.currentTimeMillis());
				currentComponent = "tJava_27";

				int tos_count_tJava_27 = 0;

				StatusListener.error("Error while creating the DB Schema.",
						((String) globalMap
								.get("tRunJob_3_CHILD_EXCEPTION_STACKTRACE")),
						context.currentFile);
				System.out.println("ERRRRROR");

				/**
				 * [tJava_27 begin ] stop
				 */
				/**
				 * [tJava_27 main ] start
				 */

				currentComponent = "tJava_27";

				tos_count_tJava_27++;

				/**
				 * [tJava_27 main ] stop
				 */
				/**
				 * [tJava_27 end ] start
				 */

				currentComponent = "tJava_27";

				ok_Hash.put("tJava_27", true);
				end_Hash.put("tJava_27", System.currentTimeMillis());

				/**
				 * [tJava_27 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_27_SUBPROCESS_STATE", 1);
	}

	public void tJava_26Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_26_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_26 begin ] start
				 */

				ok_Hash.put("tJava_26", false);
				start_Hash.put("tJava_26", System.currentTimeMillis());
				currentComponent = "tJava_26";

				int tos_count_tJava_26 = 0;

				StatusListener.error("Error while getting the patient data",
						((String) globalMap
								.get("tRunJob_2_CHILD_EXCEPTION_STACKTRACE")),
						context.currentFile);

				/**
				 * [tJava_26 begin ] stop
				 */
				/**
				 * [tJava_26 main ] start
				 */

				currentComponent = "tJava_26";

				tos_count_tJava_26++;

				/**
				 * [tJava_26 main ] stop
				 */
				/**
				 * [tJava_26 end ] start
				 */

				currentComponent = "tJava_26";

				ok_Hash.put("tJava_26", true);
				end_Hash.put("tJava_26", System.currentTimeMillis());

				/**
				 * [tJava_26 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_26_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());
				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				System.out.println("MasterJob started");
				System.out.println(context.folderMain);
				context.counter = 0;
				context.status = 0.0f;
				context.currentCounter = 0;

				/**
				 * [tJava_1 begin ] stop
				 */
				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */
				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				if (context.truncateProject) {

					tRunJob_12Process(globalMap);
				}

				if (context.importSingleFile) {

					tJava_12Process(globalMap);
				}

				if (!context.importSingleFile) {

					tFileList_4Process(globalMap);
				}

				/**
				 * [tJava_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_12Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_12 begin ] start
				 */

				ok_Hash.put("tRunJob_12", false);
				start_Hash.put("tRunJob_12", System.currentTimeMillis());
				currentComponent = "tRunJob_12";

				int tos_count_tRunJob_12 = 0;

				/**
				 * [tRunJob_12 begin ] stop
				 */
				/**
				 * [tRunJob_12 main ] start
				 */

				currentComponent = "tRunJob_12";

				java.util.List<String> paraList_tRunJob_12 = new java.util.ArrayList<String>();
				paraList_tRunJob_12.add("--father_pid=" + pid);

				paraList_tRunJob_12.add("--root_pid=" + rootPid);

				paraList_tRunJob_12.add("--father_node=tRunJob_12");

				paraList_tRunJob_12.add("--context=Default");

				// for feature:10589
				paraList_tRunJob_12.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_12.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_12 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_12 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_12".equals(tRunJobName_tRunJob_12)
						&& childResumePath_tRunJob_12 != null) {
					paraList_tRunJob_12
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_12.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_12");

				java.util.Map<String, Object> parentContextMap_tRunJob_12 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_12 = context
						.propertyNames();
				while (propertyNames_tRunJob_12.hasMoreElements()) {
					String key_tRunJob_12 = (String) propertyNames_tRunJob_12
							.nextElement();
					Object value_tRunJob_12 = (Object) context
							.get(key_tRunJob_12);
					paraList_tRunJob_12.add("--context_param " + key_tRunJob_12
							+ "=" + value_tRunJob_12);
				}

				parentContextMap_tRunJob_12.put("importTerms",
						context.importTerms);
				parentContextMap_tRunJob_12.put("basedir", context.basedir);
				parentContextMap_tRunJob_12.put("datePattern",
						context.datePattern);
				parentContextMap_tRunJob_12.put("fileName", context.fileName);
				parentContextMap_tRunJob_12.put("cleanUp", context.cleanUp);
				parentContextMap_tRunJob_12.put("coding", context.coding);
				parentContextMap_tRunJob_12.put("DBHost", context.DBHost);
				parentContextMap_tRunJob_12.put("DBInstance",
						context.DBInstance);
				parentContextMap_tRunJob_12.put("DBPassword",
						context.DBPassword);
				parentContextMap_tRunJob_12.put("DBPort", context.DBPort);
				parentContextMap_tRunJob_12.put("DBSchema", context.DBSchema);
				parentContextMap_tRunJob_12.put("DBUsername",
						context.DBUsername);
				parentContextMap_tRunJob_12.put("FTPPassword",
						context.FTPPassword);
				parentContextMap_tRunJob_12.put("FTPUser", context.FTPUser);
				parentContextMap_tRunJob_12.put("truncateProject",
						context.truncateProject);
				parentContextMap_tRunJob_12.put("concept_cd",
						context.concept_cd);
				parentContextMap_tRunJob_12.put("concept_path",
						context.concept_path);
				parentContextMap_tRunJob_12.put("currentFile",
						context.currentFile);
				parentContextMap_tRunJob_12.put("encoding", context.encoding);
				parentContextMap_tRunJob_12.put("folderMain",
						context.folderMain);
				parentContextMap_tRunJob_12.put("folderODM", context.folderODM);
				parentContextMap_tRunJob_12.put("folderOutput",
						context.folderOutput);
				parentContextMap_tRunJob_12.put("folderTmp", context.folderTmp);
				parentContextMap_tRunJob_12.put("i2b2HeadNode",
						context.i2b2HeadNode);
				parentContextMap_tRunJob_12.put("i2b2HeadNodeName",
						context.i2b2HeadNodeName);
				parentContextMap_tRunJob_12.put("importCodelist",
						context.importCodelist);
				parentContextMap_tRunJob_12.put("importSingleFile",
						context.importSingleFile);
				parentContextMap_tRunJob_12.put("includePids",
						context.includePids);
				parentContextMap_tRunJob_12.put("ItemData", context.ItemData);
				parentContextMap_tRunJob_12.put("ItemDataAny",
						context.ItemDataAny);
				parentContextMap_tRunJob_12.put("ItemDataBase64Binary",
						context.ItemDataBase64Binary);
				parentContextMap_tRunJob_12.put("ItemDataBase64Float",
						context.ItemDataBase64Float);
				parentContextMap_tRunJob_12.put("ItemDataBoolean",
						context.ItemDataBoolean);
				parentContextMap_tRunJob_12.put("ItemDataDate",
						context.ItemDataDate);
				parentContextMap_tRunJob_12.put("ItemDataDatetime",
						context.ItemDataDatetime);
				parentContextMap_tRunJob_12.put("ItemDataDouble",
						context.ItemDataDouble);
				parentContextMap_tRunJob_12.put("ItemDataDurationDatetime",
						context.ItemDataDurationDatetime);
				parentContextMap_tRunJob_12.put("ItemDataFloat",
						context.ItemDataFloat);
				parentContextMap_tRunJob_12.put("ItemDataHexBinary",
						context.ItemDataHexBinary);
				parentContextMap_tRunJob_12.put("ItemDataHexFloat",
						context.ItemDataHexFloat);
				parentContextMap_tRunJob_12.put("ItemDataIncompleteDatetime",
						context.ItemDataIncompleteDatetime);
				parentContextMap_tRunJob_12.put("ItemDataInteger",
						context.ItemDataInteger);
				parentContextMap_tRunJob_12.put("ItemDataIntervalDatetime",
						context.ItemDataIntervalDatetime);
				parentContextMap_tRunJob_12.put("ItemDataPartialDate",
						context.ItemDataPartialDate);
				parentContextMap_tRunJob_12.put("ItemDataPartialDatetime",
						context.ItemDataPartialDatetime);
				parentContextMap_tRunJob_12.put("ItemDataPartialTime",
						context.ItemDataPartialTime);
				parentContextMap_tRunJob_12.put("ItemDataString",
						context.ItemDataString);
				parentContextMap_tRunJob_12.put("ItemDataTime",
						context.ItemDataTime);
				parentContextMap_tRunJob_12.put("ItemDataURI",
						context.ItemDataURI);
				parentContextMap_tRunJob_12.put("MDPD", context.MDPD);
				parentContextMap_tRunJob_12.put("MDPDName", context.MDPDName);
				parentContextMap_tRunJob_12.put("xslt", context.xslt);
				parentContextMap_tRunJob_12.put("xslt_namespace",
						context.xslt_namespace);
				parentContextMap_tRunJob_12.put("counter", context.counter);
				parentContextMap_tRunJob_12.put("currentCounter",
						context.currentCounter);
				parentContextMap_tRunJob_12.put("status", context.status);
				parentContextMap_tRunJob_12.put("statusTmp", context.statusTmp);

				Object obj_tRunJob_12 = null;

				tos.idrt_truncate_tables_0_1.IDRT_Truncate_Tables childJob_tRunJob_12 = new tos.idrt_truncate_tables_0_1.IDRT_Truncate_Tables();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_12 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_12) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_12 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_12 : talendDataSources_tRunJob_12
							.entrySet()) {
						dataSources_tRunJob_12.put(
								talendDataSourceEntry_tRunJob_12.getKey(),
								talendDataSourceEntry_tRunJob_12.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_12.setDataSources(dataSources_tRunJob_12);
				}
				childJob_tRunJob_12.parentContextMap = parentContextMap_tRunJob_12;
				String[][] childReturn_tRunJob_12 = childJob_tRunJob_12
						.runJob((String[]) paraList_tRunJob_12
								.toArray(new String[paraList_tRunJob_12.size()]));
				errorCode = childJob_tRunJob_12.getErrorCode();

				if (childJob_tRunJob_12.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_12_CHILD_RETURN_CODE",
							childJob_tRunJob_12.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_12
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_12_CHILD_RETURN_CODE",
							childJob_tRunJob_12.getErrorCode());
				}
				if (childJob_tRunJob_12.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_12_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_12.getExceptionStackTrace());
				}

				if (childJob_tRunJob_12.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_12.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_12++;

				/**
				 * [tRunJob_12 main ] stop
				 */
				/**
				 * [tRunJob_12 end ] start
				 */

				currentComponent = "tRunJob_12";

				ok_Hash.put("tRunJob_12", true);
				end_Hash.put("tRunJob_12", System.currentTimeMillis());

				/**
				 * [tRunJob_12 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tRunJob_12_SUBPROCESS_STATE", 1);
	}

	public void tJava_12Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_12 begin ] start
				 */

				ok_Hash.put("tJava_12", false);
				start_Hash.put("tJava_12", System.currentTimeMillis());
				currentComponent = "tJava_12";

				int tos_count_tJava_12 = 0;

				context.counter = 1;
				float status = ((float) context.currentCounter)
						/ ((float) context.counter);
				context.status = status * 100;
				context.statusTmp = 100 / (float) context.counter;
				System.out.println("status: " + context.status + " = "
						+ context.counter + "/" + context.currentCounter);
				StatusListener.setStatus(context.status, context.currentFile);

				/**
				 * [tJava_12 begin ] stop
				 */
				/**
				 * [tJava_12 main ] start
				 */

				currentComponent = "tJava_12";

				tos_count_tJava_12++;

				/**
				 * [tJava_12 main ] stop
				 */
				/**
				 * [tJava_12 end ] start
				 */

				currentComponent = "tJava_12";

				ok_Hash.put("tJava_12", true);
				end_Hash.put("tJava_12", System.currentTimeMillis());

				/**
				 * [tJava_12 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_12:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileList_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_12_SUBPROCESS_STATE", 1);
	}

	public void tFileList_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileList_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileList_1 begin ] start
				 */

				int NB_ITERATE_tFileDelete_1 = 0; // for statistics

				ok_Hash.put("tFileList_1", false);
				start_Hash.put("tFileList_1", System.currentTimeMillis());
				currentComponent = "tFileList_1";

				int tos_count_tFileList_1 = 0;

				String directory_tFileList_1 = context.folderMain
						+ context.folderOutput;
				final java.util.List<String> maskList_tFileList_1 = new java.util.ArrayList<String>();
				maskList_tFileList_1.add("*");
				int NB_FILEtFileList_1 = 0;

				final boolean case_sensitive_tFileList_1 = true;
				final java.util.List<java.io.File> list_tFileList_1 = new java.util.ArrayList<java.io.File>();
				java.io.File file_tFileList_1 = new java.io.File(
						directory_tFileList_1);

				file_tFileList_1.listFiles(new java.io.FilenameFilter() {
					public boolean accept(java.io.File dir, String name) {
						java.io.File file = new java.io.File(dir, name);
						if (!file.isDirectory()) {

							String fileName_tFileList_1 = file.getName();
							for (final String filemask_tFileList_1 : maskList_tFileList_1) {
								String filemask_compile_tFileList_1 = filemask_tFileList_1;

								filemask_compile_tFileList_1 = org.apache.oro.text.GlobCompiler.globToPerl5(
										filemask_tFileList_1.toCharArray(),
										org.apache.oro.text.GlobCompiler.DEFAULT_MASK);

								java.util.regex.Pattern fileNamePattern_tFileList_1 = java.util.regex.Pattern
										.compile(filemask_compile_tFileList_1);

								if (fileNamePattern_tFileList_1.matcher(
										fileName_tFileList_1).matches()) {
									list_tFileList_1.add(file);
								}
							}
						}
						return true;
					}
				});
				java.util.Collections.sort(list_tFileList_1);

				for (int i_tFileList_1 = 0; i_tFileList_1 < list_tFileList_1
						.size(); i_tFileList_1++) {
					java.io.File files_tFileList_1 = list_tFileList_1
							.get(i_tFileList_1);
					String fileName_tFileList_1 = files_tFileList_1.getName();

					String currentFileName_tFileList_1 = files_tFileList_1
							.getName();
					String currentFilePath_tFileList_1 = files_tFileList_1
							.getAbsolutePath();
					String currentFileDirectory_tFileList_1 = files_tFileList_1
							.getParent();
					String currentFileExtension_tFileList_1 = null;

					if (files_tFileList_1.getName().contains(".")
							&& files_tFileList_1.isFile()) {
						currentFileExtension_tFileList_1 = files_tFileList_1
								.getName().substring(
										files_tFileList_1.getName()
												.lastIndexOf(".") + 1);
					} else {
						currentFileExtension_tFileList_1 = "";
					}

					NB_FILEtFileList_1++;
					globalMap.put("tFileList_1_CURRENT_FILE",
							currentFileName_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEPATH",
							currentFilePath_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEDIRECTORY",
							currentFileDirectory_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEEXTENSION",
							currentFileExtension_tFileList_1);
					globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);

					/**
					 * [tFileList_1 begin ] stop
					 */
					/**
					 * [tFileList_1 main ] start
					 */

					currentComponent = "tFileList_1";

					tos_count_tFileList_1++;

					/**
					 * [tFileList_1 main ] stop
					 */
					NB_ITERATE_tFileDelete_1++;
					iterateLoop++;

					/**
					 * [tFileDelete_1 begin ] start
					 */

					ok_Hash.put("tFileDelete_1", false);
					start_Hash.put("tFileDelete_1", System.currentTimeMillis());
					currentComponent = "tFileDelete_1";

					int tos_count_tFileDelete_1 = 0;

					/**
					 * [tFileDelete_1 begin ] stop
					 */
					/**
					 * [tFileDelete_1 main ] start
					 */

					currentComponent = "tFileDelete_1";

					class DeleteFoldertFileDelete_1 {
						/**
						 * delete all the sub-files in 'file'
						 * 
						 * @param file
						 */
						public boolean delete(java.io.File file) {
							java.io.File[] files = file.listFiles();
							for (int i = 0; i < files.length; i++) {
								if (files[i].isFile()) {
									files[i].delete();
								} else if (files[i].isDirectory()) {
									if (!files[i].delete()) {
										delete(files[i]);
									}
								}
							}
							deleteDirectory(file);
							return file.delete();
						}

						/**
						 * delete all the sub-folders in 'file'
						 * 
						 * @param file
						 */
						private void deleteDirectory(java.io.File file) {
							java.io.File[] filed = file.listFiles();
							for (int i = 0; i < filed.length; i++) {
								if (filed[i].isDirectory()) {
									deleteDirectory(filed[i]);
								}
								filed[i].delete();
							}
						}

					}
					java.io.File file_tFileDelete_1 = new java.io.File(
							((String) globalMap
									.get("tFileList_1_CURRENT_FILEPATH")));
					if (file_tFileDelete_1.exists()
							&& file_tFileDelete_1.isFile()) {
						if (file_tFileDelete_1.delete()) {
							globalMap.put("tFileDelete_1_CURRENT_STATUS",
									"File deleted.");
						} else {
							globalMap.put("tFileDelete_1_CURRENT_STATUS",
									"No file deleted.");
						}
					} else {
						globalMap.put("tFileDelete_1_CURRENT_STATUS",
								"File does not exists or is invalid.");
						throw new RuntimeException(
								"File does not exists or is invalid.");
					}
					globalMap.put("tFileDelete_1_DELETE_PATH",
							((String) globalMap
									.get("tFileList_1_CURRENT_FILEPATH")));

					tos_count_tFileDelete_1++;

					/**
					 * [tFileDelete_1 main ] stop
					 */
					/**
					 * [tFileDelete_1 end ] start
					 */

					currentComponent = "tFileDelete_1";

					ok_Hash.put("tFileDelete_1", true);
					end_Hash.put("tFileDelete_1", System.currentTimeMillis());

					/**
					 * [tFileDelete_1 end ] stop
					 */

					/**
					 * [tFileList_1 end ] start
					 */

					currentComponent = "tFileList_1";

				}
				globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);

				ok_Hash.put("tFileList_1", true);
				end_Hash.put("tFileList_1", System.currentTimeMillis());

				if (!StatusListener.getInterrupt()) {

					tJava_10Process(globalMap);
				}

				/**
				 * [tFileList_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileList_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_10Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_10 begin ] start
				 */

				ok_Hash.put("tJava_10", false);
				start_Hash.put("tJava_10", System.currentTimeMillis());
				currentComponent = "tJava_10";

				int tos_count_tJava_10 = 0;

				StatusListener.setStatus(context.status, "XSLT Transformation",
						context.currentFile);

				/**
				 * [tJava_10 begin ] stop
				 */
				/**
				 * [tJava_10 main ] start
				 */

				currentComponent = "tJava_10";

				tos_count_tJava_10++;

				/**
				 * [tJava_10 main ] stop
				 */
				/**
				 * [tJava_10 end ] start
				 */

				currentComponent = "tJava_10";

				ok_Hash.put("tJava_10", true);
				end_Hash.put("tJava_10", System.currentTimeMillis());

				/**
				 * [tJava_10 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_10:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tRunJob_5Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_10_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_5 begin ] start
				 */

				ok_Hash.put("tRunJob_5", false);
				start_Hash.put("tRunJob_5", System.currentTimeMillis());
				currentComponent = "tRunJob_5";

				int tos_count_tRunJob_5 = 0;

				/**
				 * [tRunJob_5 begin ] stop
				 */
				/**
				 * [tRunJob_5 main ] start
				 */

				currentComponent = "tRunJob_5";

				java.util.List<String> paraList_tRunJob_5 = new java.util.ArrayList<String>();
				paraList_tRunJob_5.add("--father_pid=" + pid);

				paraList_tRunJob_5.add("--root_pid=" + rootPid);

				paraList_tRunJob_5.add("--father_node=tRunJob_5");

				paraList_tRunJob_5.add("--context=Default");

				// for feature:10589
				paraList_tRunJob_5.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_5.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_5 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_5 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_5".equals(tRunJobName_tRunJob_5)
						&& childResumePath_tRunJob_5 != null) {
					paraList_tRunJob_5
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_5.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_5");

				java.util.Map<String, Object> parentContextMap_tRunJob_5 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_5 = null;

				obj_tRunJob_5 = context.folderMain;
				paraList_tRunJob_5.add("--context_param folderMain="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
				parentContextMap_tRunJob_5.put("folderMain", obj_tRunJob_5);
				obj_tRunJob_5 = context.folderTmp;
				paraList_tRunJob_5.add("--context_param folderTmp="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
				parentContextMap_tRunJob_5.put("folderTmp", obj_tRunJob_5);
				obj_tRunJob_5 = context.currentFile;
				paraList_tRunJob_5.add("--context_param currentFile="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
				parentContextMap_tRunJob_5.put("currentFile", obj_tRunJob_5);
				obj_tRunJob_5 = context.xslt;
				paraList_tRunJob_5.add("--context_param xslt="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
				parentContextMap_tRunJob_5.put("xslt", obj_tRunJob_5);
				obj_tRunJob_5 = context.folderOutput;
				paraList_tRunJob_5.add("--context_param output="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
				parentContextMap_tRunJob_5.put("output", obj_tRunJob_5);
				tos.odm_extract_pd_with_xslt_0_1.ODM_Extract_PD_With_XSLT childJob_tRunJob_5 = new tos.odm_extract_pd_with_xslt_0_1.ODM_Extract_PD_With_XSLT();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_5 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_5) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_5 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_5 : talendDataSources_tRunJob_5
							.entrySet()) {
						dataSources_tRunJob_5.put(
								talendDataSourceEntry_tRunJob_5.getKey(),
								talendDataSourceEntry_tRunJob_5.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_5.setDataSources(dataSources_tRunJob_5);
				}
				childJob_tRunJob_5.parentContextMap = parentContextMap_tRunJob_5;
				String[][] childReturn_tRunJob_5 = childJob_tRunJob_5
						.runJob((String[]) paraList_tRunJob_5
								.toArray(new String[paraList_tRunJob_5.size()]));
				errorCode = childJob_tRunJob_5.getErrorCode();

				if (childJob_tRunJob_5.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_5_CHILD_RETURN_CODE",
							childJob_tRunJob_5.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_5
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_5_CHILD_RETURN_CODE",
							childJob_tRunJob_5.getErrorCode());
				}
				if (childJob_tRunJob_5.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_5_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_5.getExceptionStackTrace());
				}

				if (childJob_tRunJob_5.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_5.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_5++;

				/**
				 * [tRunJob_5 main ] stop
				 */
				/**
				 * [tRunJob_5 end ] start
				 */

				currentComponent = "tRunJob_5";

				ok_Hash.put("tRunJob_5", true);
				end_Hash.put("tRunJob_5", System.currentTimeMillis());

				/**
				 * [tRunJob_5 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tRunJob_5:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_6Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tRunJob_5_SUBPROCESS_STATE", 1);
	}

	public void tJava_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_6 begin ] start
				 */

				ok_Hash.put("tJava_6", false);
				start_Hash.put("tJava_6", System.currentTimeMillis());
				currentComponent = "tJava_6";

				int tos_count_tJava_6 = 0;

				// System.out.println("interrupted?");
				context.status = context.status + (context.statusTmp / 100)
						* 10;
				StatusListener.setStatus(context.status, "Creating Ontology",
						context.currentFile);
				System.out.println(context.status);
				if (StatusListener.getInterrupt())
					System.out.println("Interrupted!");

				/**
				 * [tJava_6 begin ] stop
				 */
				/**
				 * [tJava_6 main ] start
				 */

				currentComponent = "tJava_6";

				tos_count_tJava_6++;

				/**
				 * [tJava_6 main ] stop
				 */
				/**
				 * [tJava_6 end ] start
				 */

				currentComponent = "tJava_6";

				ok_Hash.put("tJava_6", true);
				end_Hash.put("tJava_6", System.currentTimeMillis());

				if (!StatusListener.getInterrupt()) {

					tRunJob_1Process(globalMap);
				}

				/**
				 * [tJava_6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_6_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_1 begin ] start
				 */

				ok_Hash.put("tRunJob_1", false);
				start_Hash.put("tRunJob_1", System.currentTimeMillis());
				currentComponent = "tRunJob_1";

				int tos_count_tRunJob_1 = 0;

				/**
				 * [tRunJob_1 begin ] stop
				 */
				/**
				 * [tRunJob_1 main ] start
				 */

				currentComponent = "tRunJob_1";

				java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
				paraList_tRunJob_1.add("--father_pid=" + pid);

				paraList_tRunJob_1.add("--root_pid=" + rootPid);

				paraList_tRunJob_1.add("--father_node=tRunJob_1");

				paraList_tRunJob_1.add("--context=Default");

				// for feature:10589
				paraList_tRunJob_1.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_1.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_1 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_1 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_1".equals(tRunJobName_tRunJob_1)
						&& childResumePath_tRunJob_1 != null) {
					paraList_tRunJob_1
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_1");

				java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_1 = context
						.propertyNames();
				while (propertyNames_tRunJob_1.hasMoreElements()) {
					String key_tRunJob_1 = (String) propertyNames_tRunJob_1
							.nextElement();
					Object value_tRunJob_1 = (Object) context
							.get(key_tRunJob_1);
					paraList_tRunJob_1.add("--context_param " + key_tRunJob_1
							+ "=" + value_tRunJob_1);
				}

				parentContextMap_tRunJob_1.put("importTerms",
						context.importTerms);
				parentContextMap_tRunJob_1.put("basedir", context.basedir);
				parentContextMap_tRunJob_1.put("datePattern",
						context.datePattern);
				parentContextMap_tRunJob_1.put("fileName", context.fileName);
				parentContextMap_tRunJob_1.put("cleanUp", context.cleanUp);
				parentContextMap_tRunJob_1.put("coding", context.coding);
				parentContextMap_tRunJob_1.put("DBHost", context.DBHost);
				parentContextMap_tRunJob_1
						.put("DBInstance", context.DBInstance);
				parentContextMap_tRunJob_1
						.put("DBPassword", context.DBPassword);
				parentContextMap_tRunJob_1.put("DBPort", context.DBPort);
				parentContextMap_tRunJob_1.put("DBSchema", context.DBSchema);
				parentContextMap_tRunJob_1
						.put("DBUsername", context.DBUsername);
				parentContextMap_tRunJob_1.put("FTPPassword",
						context.FTPPassword);
				parentContextMap_tRunJob_1.put("FTPUser", context.FTPUser);
				parentContextMap_tRunJob_1.put("truncateProject",
						context.truncateProject);
				parentContextMap_tRunJob_1
						.put("concept_cd", context.concept_cd);
				parentContextMap_tRunJob_1.put("concept_path",
						context.concept_path);
				parentContextMap_tRunJob_1.put("currentFile",
						context.currentFile);
				parentContextMap_tRunJob_1.put("encoding", context.encoding);
				parentContextMap_tRunJob_1
						.put("folderMain", context.folderMain);
				parentContextMap_tRunJob_1.put("folderODM", context.folderODM);
				parentContextMap_tRunJob_1.put("folderOutput",
						context.folderOutput);
				parentContextMap_tRunJob_1.put("folderTmp", context.folderTmp);
				parentContextMap_tRunJob_1.put("i2b2HeadNode",
						context.i2b2HeadNode);
				parentContextMap_tRunJob_1.put("i2b2HeadNodeName",
						context.i2b2HeadNodeName);
				parentContextMap_tRunJob_1.put("importCodelist",
						context.importCodelist);
				parentContextMap_tRunJob_1.put("importSingleFile",
						context.importSingleFile);
				parentContextMap_tRunJob_1.put("includePids",
						context.includePids);
				parentContextMap_tRunJob_1.put("ItemData", context.ItemData);
				parentContextMap_tRunJob_1.put("ItemDataAny",
						context.ItemDataAny);
				parentContextMap_tRunJob_1.put("ItemDataBase64Binary",
						context.ItemDataBase64Binary);
				parentContextMap_tRunJob_1.put("ItemDataBase64Float",
						context.ItemDataBase64Float);
				parentContextMap_tRunJob_1.put("ItemDataBoolean",
						context.ItemDataBoolean);
				parentContextMap_tRunJob_1.put("ItemDataDate",
						context.ItemDataDate);
				parentContextMap_tRunJob_1.put("ItemDataDatetime",
						context.ItemDataDatetime);
				parentContextMap_tRunJob_1.put("ItemDataDouble",
						context.ItemDataDouble);
				parentContextMap_tRunJob_1.put("ItemDataDurationDatetime",
						context.ItemDataDurationDatetime);
				parentContextMap_tRunJob_1.put("ItemDataFloat",
						context.ItemDataFloat);
				parentContextMap_tRunJob_1.put("ItemDataHexBinary",
						context.ItemDataHexBinary);
				parentContextMap_tRunJob_1.put("ItemDataHexFloat",
						context.ItemDataHexFloat);
				parentContextMap_tRunJob_1.put("ItemDataIncompleteDatetime",
						context.ItemDataIncompleteDatetime);
				parentContextMap_tRunJob_1.put("ItemDataInteger",
						context.ItemDataInteger);
				parentContextMap_tRunJob_1.put("ItemDataIntervalDatetime",
						context.ItemDataIntervalDatetime);
				parentContextMap_tRunJob_1.put("ItemDataPartialDate",
						context.ItemDataPartialDate);
				parentContextMap_tRunJob_1.put("ItemDataPartialDatetime",
						context.ItemDataPartialDatetime);
				parentContextMap_tRunJob_1.put("ItemDataPartialTime",
						context.ItemDataPartialTime);
				parentContextMap_tRunJob_1.put("ItemDataString",
						context.ItemDataString);
				parentContextMap_tRunJob_1.put("ItemDataTime",
						context.ItemDataTime);
				parentContextMap_tRunJob_1.put("ItemDataURI",
						context.ItemDataURI);
				parentContextMap_tRunJob_1.put("MDPD", context.MDPD);
				parentContextMap_tRunJob_1.put("MDPDName", context.MDPDName);
				parentContextMap_tRunJob_1.put("xslt", context.xslt);
				parentContextMap_tRunJob_1.put("xslt_namespace",
						context.xslt_namespace);
				parentContextMap_tRunJob_1.put("counter", context.counter);
				parentContextMap_tRunJob_1.put("currentCounter",
						context.currentCounter);
				parentContextMap_tRunJob_1.put("status", context.status);
				parentContextMap_tRunJob_1.put("statusTmp", context.statusTmp);

				Object obj_tRunJob_1 = null;

				tos.odm_create_ontology_1_1.ODM_Create_Ontology childJob_tRunJob_1 = new tos.odm_create_ontology_1_1.ODM_Create_Ontology();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_1) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
							.entrySet()) {
						dataSources_tRunJob_1.put(
								talendDataSourceEntry_tRunJob_1.getKey(),
								talendDataSourceEntry_tRunJob_1.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
				}
				childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
				String[][] childReturn_tRunJob_1 = childJob_tRunJob_1
						.runJob((String[]) paraList_tRunJob_1
								.toArray(new String[paraList_tRunJob_1.size()]));
				errorCode = childJob_tRunJob_1.getErrorCode();

				if (childJob_tRunJob_1.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_1
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getErrorCode());
				}
				if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_1.getExceptionStackTrace());
				}

				if (childJob_tRunJob_1.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_1.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_1++;

				/**
				 * [tRunJob_1 main ] stop
				 */
				/**
				 * [tRunJob_1 end ] start
				 */

				currentComponent = "tRunJob_1";

				ok_Hash.put("tRunJob_1", true);
				end_Hash.put("tRunJob_1", System.currentTimeMillis());

				if (!StatusListener.getInterrupt()) {

					tJava_7Process(globalMap);
				}

				/**
				 * [tRunJob_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_7 begin ] start
				 */

				ok_Hash.put("tJava_7", false);
				start_Hash.put("tJava_7", System.currentTimeMillis());
				currentComponent = "tJava_7";

				int tos_count_tJava_7 = 0;

				context.status = context.status + (context.statusTmp / 100)
						* 30;
				System.out.println(context.status);
				StatusListener.setStatus(context.status,
						"Getting Patient Data", context.currentFile);

				/**
				 * [tJava_7 begin ] stop
				 */
				/**
				 * [tJava_7 main ] start
				 */

				currentComponent = "tJava_7";

				tos_count_tJava_7++;

				/**
				 * [tJava_7 main ] stop
				 */
				/**
				 * [tJava_7 end ] start
				 */

				currentComponent = "tJava_7";

				ok_Hash.put("tJava_7", true);
				end_Hash.put("tJava_7", System.currentTimeMillis());

				/**
				 * [tJava_7 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_7:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tRunJob_2Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_7_SUBPROCESS_STATE", 1);
	}

	public void tJava_25Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_25_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_25 begin ] start
				 */

				ok_Hash.put("tJava_25", false);
				start_Hash.put("tJava_25", System.currentTimeMillis());
				currentComponent = "tJava_25";

				int tos_count_tJava_25 = 0;

				StatusListener.error("Error while creating the Ontology",
						((String) globalMap
								.get("tRunJob_1_CHILD_EXCEPTION_STACKTRACE")),
						context.currentFile);

				/**
				 * [tJava_25 begin ] stop
				 */
				/**
				 * [tJava_25 main ] start
				 */

				currentComponent = "tJava_25";

				tos_count_tJava_25++;

				/**
				 * [tJava_25 main ] stop
				 */
				/**
				 * [tJava_25 end ] start
				 */

				currentComponent = "tJava_25";

				ok_Hash.put("tJava_25", true);
				end_Hash.put("tJava_25", System.currentTimeMillis());

				/**
				 * [tJava_25 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_25_SUBPROCESS_STATE", 1);
	}

	public void tJava_17Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_17_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_17 begin ] start
				 */

				ok_Hash.put("tJava_17", false);
				start_Hash.put("tJava_17", System.currentTimeMillis());
				currentComponent = "tJava_17";

				int tos_count_tJava_17 = 0;

				StatusListener.error("Error while transforming the ODM-File",
						((String) globalMap
								.get("tRunJob_5_CHILD_EXCEPTION_STACKTRACE")),
						context.currentFile);

				/**
				 * [tJava_17 begin ] stop
				 */
				/**
				 * [tJava_17 main ] start
				 */

				currentComponent = "tJava_17";

				tos_count_tJava_17++;

				/**
				 * [tJava_17 main ] stop
				 */
				/**
				 * [tJava_17 end ] start
				 */

				currentComponent = "tJava_17";

				ok_Hash.put("tJava_17", true);
				end_Hash.put("tJava_17", System.currentTimeMillis());

				/**
				 * [tJava_17 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_17_SUBPROCESS_STATE", 1);
	}

	public void tFileList_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileList_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileList_4 begin ] start
				 */

				int NB_ITERATE_tJava_4 = 0; // for statistics

				ok_Hash.put("tFileList_4", false);
				start_Hash.put("tFileList_4", System.currentTimeMillis());
				currentComponent = "tFileList_4";

				int tos_count_tFileList_4 = 0;

				String directory_tFileList_4 = context.folderODM;
				final java.util.List<String> maskList_tFileList_4 = new java.util.ArrayList<String>();
				maskList_tFileList_4.add("*.xml");
				int NB_FILEtFileList_4 = 0;

				final boolean case_sensitive_tFileList_4 = true;
				final java.util.List<java.io.File> list_tFileList_4 = new java.util.ArrayList<java.io.File>();
				java.io.File file_tFileList_4 = new java.io.File(
						directory_tFileList_4);

				file_tFileList_4.listFiles(new java.io.FilenameFilter() {
					public boolean accept(java.io.File dir, String name) {
						java.io.File file = new java.io.File(dir, name);
						if (!file.isDirectory()) {

							String fileName_tFileList_4 = file.getName();
							for (final String filemask_tFileList_4 : maskList_tFileList_4) {
								String filemask_compile_tFileList_4 = filemask_tFileList_4;

								filemask_compile_tFileList_4 = org.apache.oro.text.GlobCompiler.globToPerl5(
										filemask_tFileList_4.toCharArray(),
										org.apache.oro.text.GlobCompiler.DEFAULT_MASK);

								java.util.regex.Pattern fileNamePattern_tFileList_4 = java.util.regex.Pattern
										.compile(filemask_compile_tFileList_4);

								if (fileNamePattern_tFileList_4.matcher(
										fileName_tFileList_4).matches()) {
									list_tFileList_4.add(file);
								}
							}
						}
						return true;
					}
				});
				java.util.Collections.sort(list_tFileList_4);

				for (int i_tFileList_4 = 0; i_tFileList_4 < list_tFileList_4
						.size(); i_tFileList_4++) {
					java.io.File files_tFileList_4 = list_tFileList_4
							.get(i_tFileList_4);
					String fileName_tFileList_4 = files_tFileList_4.getName();

					String currentFileName_tFileList_4 = files_tFileList_4
							.getName();
					String currentFilePath_tFileList_4 = files_tFileList_4
							.getAbsolutePath();
					String currentFileDirectory_tFileList_4 = files_tFileList_4
							.getParent();
					String currentFileExtension_tFileList_4 = null;

					if (files_tFileList_4.getName().contains(".")
							&& files_tFileList_4.isFile()) {
						currentFileExtension_tFileList_4 = files_tFileList_4
								.getName().substring(
										files_tFileList_4.getName()
												.lastIndexOf(".") + 1);
					} else {
						currentFileExtension_tFileList_4 = "";
					}

					NB_FILEtFileList_4++;
					globalMap.put("tFileList_4_CURRENT_FILE",
							currentFileName_tFileList_4);
					globalMap.put("tFileList_4_CURRENT_FILEPATH",
							currentFilePath_tFileList_4);
					globalMap.put("tFileList_4_CURRENT_FILEDIRECTORY",
							currentFileDirectory_tFileList_4);
					globalMap.put("tFileList_4_CURRENT_FILEEXTENSION",
							currentFileExtension_tFileList_4);
					globalMap.put("tFileList_4_NB_FILE", NB_FILEtFileList_4);

					/**
					 * [tFileList_4 begin ] stop
					 */
					/**
					 * [tFileList_4 main ] start
					 */

					currentComponent = "tFileList_4";

					tos_count_tFileList_4++;

					/**
					 * [tFileList_4 main ] stop
					 */
					NB_ITERATE_tJava_4++;
					iterateLoop++;

					/**
					 * [tJava_4 begin ] start
					 */

					ok_Hash.put("tJava_4", false);
					start_Hash.put("tJava_4", System.currentTimeMillis());
					currentComponent = "tJava_4";

					int tos_count_tJava_4 = 0;

					context.counter++;

					/**
					 * [tJava_4 begin ] stop
					 */
					/**
					 * [tJava_4 main ] start
					 */

					currentComponent = "tJava_4";

					tos_count_tJava_4++;

					/**
					 * [tJava_4 main ] stop
					 */
					/**
					 * [tJava_4 end ] start
					 */

					currentComponent = "tJava_4";

					ok_Hash.put("tJava_4", true);
					end_Hash.put("tJava_4", System.currentTimeMillis());

					/**
					 * [tJava_4 end ] stop
					 */

					/**
					 * [tFileList_4 end ] start
					 */

					currentComponent = "tFileList_4";

				}
				globalMap.put("tFileList_4_NB_FILE", NB_FILEtFileList_4);

				ok_Hash.put("tFileList_4", true);
				end_Hash.put("tFileList_4", System.currentTimeMillis());

				/**
				 * [tFileList_4 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileList_4:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileList_2Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileList_4_SUBPROCESS_STATE", 1);
	}

	public void tFileList_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileList_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileList_2 begin ] start
				 */

				int NB_ITERATE_tJava_2 = 0; // for statistics

				ok_Hash.put("tFileList_2", false);
				start_Hash.put("tFileList_2", System.currentTimeMillis());
				currentComponent = "tFileList_2";

				int tos_count_tFileList_2 = 0;

				String directory_tFileList_2 = context.folderODM;
				final java.util.List<String> maskList_tFileList_2 = new java.util.ArrayList<String>();
				maskList_tFileList_2.add("*.xml");
				int NB_FILEtFileList_2 = 0;

				final boolean case_sensitive_tFileList_2 = true;
				final java.util.List<java.io.File> list_tFileList_2 = new java.util.ArrayList<java.io.File>();
				java.io.File file_tFileList_2 = new java.io.File(
						directory_tFileList_2);

				file_tFileList_2.listFiles(new java.io.FilenameFilter() {
					public boolean accept(java.io.File dir, String name) {
						java.io.File file = new java.io.File(dir, name);
						if (!file.isDirectory()) {

							String fileName_tFileList_2 = file.getName();
							for (final String filemask_tFileList_2 : maskList_tFileList_2) {
								String filemask_compile_tFileList_2 = filemask_tFileList_2;

								filemask_compile_tFileList_2 = org.apache.oro.text.GlobCompiler.globToPerl5(
										filemask_tFileList_2.toCharArray(),
										org.apache.oro.text.GlobCompiler.DEFAULT_MASK);

								java.util.regex.Pattern fileNamePattern_tFileList_2 = java.util.regex.Pattern
										.compile(filemask_compile_tFileList_2);

								if (fileNamePattern_tFileList_2.matcher(
										fileName_tFileList_2).matches()) {
									list_tFileList_2.add(file);
								}
							}
						}
						return true;
					}
				});
				java.util.Collections.sort(list_tFileList_2);

				for (int i_tFileList_2 = 0; i_tFileList_2 < list_tFileList_2
						.size(); i_tFileList_2++) {
					java.io.File files_tFileList_2 = list_tFileList_2
							.get(i_tFileList_2);
					String fileName_tFileList_2 = files_tFileList_2.getName();

					String currentFileName_tFileList_2 = files_tFileList_2
							.getName();
					String currentFilePath_tFileList_2 = files_tFileList_2
							.getAbsolutePath();
					String currentFileDirectory_tFileList_2 = files_tFileList_2
							.getParent();
					String currentFileExtension_tFileList_2 = null;

					if (files_tFileList_2.getName().contains(".")
							&& files_tFileList_2.isFile()) {
						currentFileExtension_tFileList_2 = files_tFileList_2
								.getName().substring(
										files_tFileList_2.getName()
												.lastIndexOf(".") + 1);
					} else {
						currentFileExtension_tFileList_2 = "";
					}

					NB_FILEtFileList_2++;
					globalMap.put("tFileList_2_CURRENT_FILE",
							currentFileName_tFileList_2);
					globalMap.put("tFileList_2_CURRENT_FILEPATH",
							currentFilePath_tFileList_2);
					globalMap.put("tFileList_2_CURRENT_FILEDIRECTORY",
							currentFileDirectory_tFileList_2);
					globalMap.put("tFileList_2_CURRENT_FILEEXTENSION",
							currentFileExtension_tFileList_2);
					globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);

					/**
					 * [tFileList_2 begin ] stop
					 */
					/**
					 * [tFileList_2 main ] start
					 */

					currentComponent = "tFileList_2";

					tos_count_tFileList_2++;

					/**
					 * [tFileList_2 main ] stop
					 */
					NB_ITERATE_tJava_2++;
					iterateLoop++;

					/**
					 * [tJava_2 begin ] start
					 */

					ok_Hash.put("tJava_2", false);
					start_Hash.put("tJava_2", System.currentTimeMillis());
					currentComponent = "tJava_2";

					int tos_count_tJava_2 = 0;

					context.currentFile = ((String) globalMap
							.get("tFileList_2_CURRENT_FILEPATH"));
					System.out.println("currentFile: " + context.currentFile);
					context.encoding = IDRTHelper.getEncoding(
							context.currentFile, context.encoding);
					System.out.println("Using XML Encoding: "
							+ context.encoding);

					float status = ((float) context.currentCounter)
							/ ((float) context.counter);
					context.status = status * 100;
					context.statusTmp = 100 / (float) context.counter;
					System.out.println("status: " + context.status + " = "
							+ context.counter + "/" + context.currentCounter);
					StatusListener.setStatus(context.status,
							context.currentFile);
					context.currentCounter++;

					/**
					 * [tJava_2 begin ] stop
					 */
					/**
					 * [tJava_2 main ] start
					 */

					currentComponent = "tJava_2";

					tos_count_tJava_2++;

					/**
					 * [tJava_2 main ] stop
					 */
					/**
					 * [tJava_2 end ] start
					 */

					currentComponent = "tJava_2";

					ok_Hash.put("tJava_2", true);
					end_Hash.put("tJava_2", System.currentTimeMillis());

					if (!StatusListener.getInterrupt()) {

						tFileList_1Process(globalMap);
					}

					/**
					 * [tJava_2 end ] stop
					 */

					/**
					 * [tFileList_2 end ] start
					 */

					currentComponent = "tFileList_2";

				}
				globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);

				if (NB_FILEtFileList_2 == 0)
					throw new RuntimeException("No file found in directory "
							+ directory_tFileList_2);

				ok_Hash.put("tFileList_2", true);
				end_Hash.put("tFileList_2", System.currentTimeMillis());

				/**
				 * [tFileList_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileList_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_18Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileList_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_18Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_18_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_18 begin ] start
				 */

				ok_Hash.put("tJava_18", false);
				start_Hash.put("tJava_18", System.currentTimeMillis());
				currentComponent = "tJava_18";

				int tos_count_tJava_18 = 0;

				String foo = "bar";

				/**
				 * [tJava_18 begin ] stop
				 */
				/**
				 * [tJava_18 main ] start
				 */

				currentComponent = "tJava_18";

				tos_count_tJava_18++;

				/**
				 * [tJava_18 main ] stop
				 */
				/**
				 * [tJava_18 end ] start
				 */

				currentComponent = "tJava_18";

				ok_Hash.put("tJava_18", true);
				end_Hash.put("tJava_18", System.currentTimeMillis());

				if (context.cleanUp) {

					tJava_19Process(globalMap);
				}

				/**
				 * [tJava_18 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_18:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_5Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_18_SUBPROCESS_STATE", 1);
	}

	public void tJava_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_5 begin ] start
				 */

				ok_Hash.put("tJava_5", false);
				start_Hash.put("tJava_5", System.currentTimeMillis());
				currentComponent = "tJava_5";

				int tos_count_tJava_5 = 0;

				StatusListener.setStatus(100, "Done");

				/**
				 * [tJava_5 begin ] stop
				 */
				/**
				 * [tJava_5 main ] start
				 */

				currentComponent = "tJava_5";

				tos_count_tJava_5++;

				/**
				 * [tJava_5 main ] stop
				 */
				/**
				 * [tJava_5 end ] start
				 */

				currentComponent = "tJava_5";

				ok_Hash.put("tJava_5", true);
				end_Hash.put("tJava_5", System.currentTimeMillis());

				/**
				 * [tJava_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}

	public void tJava_19Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_19_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_19 begin ] start
				 */

				ok_Hash.put("tJava_19", false);
				start_Hash.put("tJava_19", System.currentTimeMillis());
				currentComponent = "tJava_19";

				int tos_count_tJava_19 = 0;

				StatusListener.setStatus(95, "Cleaning Up...", "");

				/**
				 * [tJava_19 begin ] stop
				 */
				/**
				 * [tJava_19 main ] start
				 */

				currentComponent = "tJava_19";

				tos_count_tJava_19++;

				/**
				 * [tJava_19 main ] stop
				 */
				/**
				 * [tJava_19 end ] start
				 */

				currentComponent = "tJava_19";

				ok_Hash.put("tJava_19", true);
				end_Hash.put("tJava_19", System.currentTimeMillis());

				/**
				 * [tJava_19 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_19:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tRunJob_10Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_19_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_10Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_10 begin ] start
				 */

				ok_Hash.put("tRunJob_10", false);
				start_Hash.put("tRunJob_10", System.currentTimeMillis());
				currentComponent = "tRunJob_10";

				int tos_count_tRunJob_10 = 0;

				/**
				 * [tRunJob_10 begin ] stop
				 */
				/**
				 * [tRunJob_10 main ] start
				 */

				currentComponent = "tRunJob_10";

				java.util.List<String> paraList_tRunJob_10 = new java.util.ArrayList<String>();
				paraList_tRunJob_10.add("--father_pid=" + pid);

				paraList_tRunJob_10.add("--root_pid=" + rootPid);

				paraList_tRunJob_10.add("--father_node=tRunJob_10");

				paraList_tRunJob_10.add("--context=Default");

				// for feature:10589
				paraList_tRunJob_10.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_10.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_10 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_10 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_10".equals(tRunJobName_tRunJob_10)
						&& childResumePath_tRunJob_10 != null) {
					paraList_tRunJob_10
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_10.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_10");

				java.util.Map<String, Object> parentContextMap_tRunJob_10 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_10 = context
						.propertyNames();
				while (propertyNames_tRunJob_10.hasMoreElements()) {
					String key_tRunJob_10 = (String) propertyNames_tRunJob_10
							.nextElement();
					Object value_tRunJob_10 = (Object) context
							.get(key_tRunJob_10);
					paraList_tRunJob_10.add("--context_param " + key_tRunJob_10
							+ "=" + value_tRunJob_10);
				}

				parentContextMap_tRunJob_10.put("importTerms",
						context.importTerms);
				parentContextMap_tRunJob_10.put("basedir", context.basedir);
				parentContextMap_tRunJob_10.put("datePattern",
						context.datePattern);
				parentContextMap_tRunJob_10.put("fileName", context.fileName);
				parentContextMap_tRunJob_10.put("cleanUp", context.cleanUp);
				parentContextMap_tRunJob_10.put("coding", context.coding);
				parentContextMap_tRunJob_10.put("DBHost", context.DBHost);
				parentContextMap_tRunJob_10.put("DBInstance",
						context.DBInstance);
				parentContextMap_tRunJob_10.put("DBPassword",
						context.DBPassword);
				parentContextMap_tRunJob_10.put("DBPort", context.DBPort);
				parentContextMap_tRunJob_10.put("DBSchema", context.DBSchema);
				parentContextMap_tRunJob_10.put("DBUsername",
						context.DBUsername);
				parentContextMap_tRunJob_10.put("FTPPassword",
						context.FTPPassword);
				parentContextMap_tRunJob_10.put("FTPUser", context.FTPUser);
				parentContextMap_tRunJob_10.put("truncateProject",
						context.truncateProject);
				parentContextMap_tRunJob_10.put("concept_cd",
						context.concept_cd);
				parentContextMap_tRunJob_10.put("concept_path",
						context.concept_path);
				parentContextMap_tRunJob_10.put("currentFile",
						context.currentFile);
				parentContextMap_tRunJob_10.put("encoding", context.encoding);
				parentContextMap_tRunJob_10.put("folderMain",
						context.folderMain);
				parentContextMap_tRunJob_10.put("folderODM", context.folderODM);
				parentContextMap_tRunJob_10.put("folderOutput",
						context.folderOutput);
				parentContextMap_tRunJob_10.put("folderTmp", context.folderTmp);
				parentContextMap_tRunJob_10.put("i2b2HeadNode",
						context.i2b2HeadNode);
				parentContextMap_tRunJob_10.put("i2b2HeadNodeName",
						context.i2b2HeadNodeName);
				parentContextMap_tRunJob_10.put("importCodelist",
						context.importCodelist);
				parentContextMap_tRunJob_10.put("importSingleFile",
						context.importSingleFile);
				parentContextMap_tRunJob_10.put("includePids",
						context.includePids);
				parentContextMap_tRunJob_10.put("ItemData", context.ItemData);
				parentContextMap_tRunJob_10.put("ItemDataAny",
						context.ItemDataAny);
				parentContextMap_tRunJob_10.put("ItemDataBase64Binary",
						context.ItemDataBase64Binary);
				parentContextMap_tRunJob_10.put("ItemDataBase64Float",
						context.ItemDataBase64Float);
				parentContextMap_tRunJob_10.put("ItemDataBoolean",
						context.ItemDataBoolean);
				parentContextMap_tRunJob_10.put("ItemDataDate",
						context.ItemDataDate);
				parentContextMap_tRunJob_10.put("ItemDataDatetime",
						context.ItemDataDatetime);
				parentContextMap_tRunJob_10.put("ItemDataDouble",
						context.ItemDataDouble);
				parentContextMap_tRunJob_10.put("ItemDataDurationDatetime",
						context.ItemDataDurationDatetime);
				parentContextMap_tRunJob_10.put("ItemDataFloat",
						context.ItemDataFloat);
				parentContextMap_tRunJob_10.put("ItemDataHexBinary",
						context.ItemDataHexBinary);
				parentContextMap_tRunJob_10.put("ItemDataHexFloat",
						context.ItemDataHexFloat);
				parentContextMap_tRunJob_10.put("ItemDataIncompleteDatetime",
						context.ItemDataIncompleteDatetime);
				parentContextMap_tRunJob_10.put("ItemDataInteger",
						context.ItemDataInteger);
				parentContextMap_tRunJob_10.put("ItemDataIntervalDatetime",
						context.ItemDataIntervalDatetime);
				parentContextMap_tRunJob_10.put("ItemDataPartialDate",
						context.ItemDataPartialDate);
				parentContextMap_tRunJob_10.put("ItemDataPartialDatetime",
						context.ItemDataPartialDatetime);
				parentContextMap_tRunJob_10.put("ItemDataPartialTime",
						context.ItemDataPartialTime);
				parentContextMap_tRunJob_10.put("ItemDataString",
						context.ItemDataString);
				parentContextMap_tRunJob_10.put("ItemDataTime",
						context.ItemDataTime);
				parentContextMap_tRunJob_10.put("ItemDataURI",
						context.ItemDataURI);
				parentContextMap_tRunJob_10.put("MDPD", context.MDPD);
				parentContextMap_tRunJob_10.put("MDPDName", context.MDPDName);
				parentContextMap_tRunJob_10.put("xslt", context.xslt);
				parentContextMap_tRunJob_10.put("xslt_namespace",
						context.xslt_namespace);
				parentContextMap_tRunJob_10.put("counter", context.counter);
				parentContextMap_tRunJob_10.put("currentCounter",
						context.currentCounter);
				parentContextMap_tRunJob_10.put("status", context.status);
				parentContextMap_tRunJob_10.put("statusTmp", context.statusTmp);

				Object obj_tRunJob_10 = null;

				tos.idrt_delete_patients_0_1.IDRT_Delete_Patients childJob_tRunJob_10 = new tos.idrt_delete_patients_0_1.IDRT_Delete_Patients();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_10 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_10) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_10 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_10 : talendDataSources_tRunJob_10
							.entrySet()) {
						dataSources_tRunJob_10.put(
								talendDataSourceEntry_tRunJob_10.getKey(),
								talendDataSourceEntry_tRunJob_10.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_10.setDataSources(dataSources_tRunJob_10);
				}
				childJob_tRunJob_10.parentContextMap = parentContextMap_tRunJob_10;
				String[][] childReturn_tRunJob_10 = childJob_tRunJob_10
						.runJob((String[]) paraList_tRunJob_10
								.toArray(new String[paraList_tRunJob_10.size()]));
				errorCode = childJob_tRunJob_10.getErrorCode();

				if (childJob_tRunJob_10.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_10_CHILD_RETURN_CODE",
							childJob_tRunJob_10.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_10
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_10_CHILD_RETURN_CODE",
							childJob_tRunJob_10.getErrorCode());
				}
				if (childJob_tRunJob_10.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_10_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_10.getExceptionStackTrace());
				}

				if (childJob_tRunJob_10.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_10.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_10++;

				/**
				 * [tRunJob_10 main ] stop
				 */
				/**
				 * [tRunJob_10 end ] start
				 */

				currentComponent = "tRunJob_10";

				ok_Hash.put("tRunJob_10", true);
				end_Hash.put("tRunJob_10", System.currentTimeMillis());

				/**
				 * [tRunJob_10 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tRunJob_10_SUBPROCESS_STATE", 1);
	}

	public void tJava_20Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_20_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_20 begin ] start
				 */

				ok_Hash.put("tJava_20", false);
				start_Hash.put("tJava_20", System.currentTimeMillis());
				currentComponent = "tJava_20";

				int tos_count_tJava_20 = 0;

				StatusListener.error("NO FILE FOUND!",
						((String) globalMap.get("tFileList_2_ERROR_MESSAGE")),
						context.currentFile);
				// System.out.println("ERROR NO FILE FOUND!");

				/**
				 * [tJava_20 begin ] stop
				 */
				/**
				 * [tJava_20 main ] start
				 */

				currentComponent = "tJava_20";

				tos_count_tJava_20++;

				/**
				 * [tJava_20 main ] stop
				 */
				/**
				 * [tJava_20 end ] start
				 */

				currentComponent = "tJava_20";

				ok_Hash.put("tJava_20", true);
				end_Hash.put("tJava_20", System.currentTimeMillis());

				/**
				 * [tJava_20 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_20_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_2 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_2", false);
				start_Hash.put("tCreateTemporaryFile_2",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_2";

				int tos_count_tCreateTemporaryFile_2 = 0;

				java.io.File dir_tCreateTemporaryFile_2 = new java.io.File(
						context.folderMain + context.folderOutput);
				dir_tCreateTemporaryFile_2.mkdirs();
				String name_tCreateTemporaryFile_2 = "talend_XXXX".replaceAll(
						"XXXX", routines.TalendString.getAsciiRandomString(4)
								.toUpperCase());
				String suffix_tCreateTemporaryFile_2 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_2 = new java.io.File(
						dir_tCreateTemporaryFile_2, name_tCreateTemporaryFile_2
								+ "." + suffix_tCreateTemporaryFile_2);
				if (file_tCreateTemporaryFile_2.createNewFile()) {
					file_tCreateTemporaryFile_2.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_2_FILEPATH",
						file_tCreateTemporaryFile_2.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_2 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_2 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_2";

				tos_count_tCreateTemporaryFile_2++;

				/**
				 * [tCreateTemporaryFile_2 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_2 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_2";

				ok_Hash.put("tCreateTemporaryFile_2", true);
				end_Hash.put("tCreateTemporaryFile_2",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_21Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_21Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_21_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_21 begin ] start
				 */

				ok_Hash.put("tJava_21", false);
				start_Hash.put("tJava_21", System.currentTimeMillis());
				currentComponent = "tJava_21";

				int tos_count_tJava_21 = 0;

				context.coding = "ISO-8859-15";
				StatusListener.setSubStatus(0.0f, (int) (float) (0.0f) + "%");

				/**
				 * [tJava_21 begin ] stop
				 */
				/**
				 * [tJava_21 main ] start
				 */

				currentComponent = "tJava_21";

				tos_count_tJava_21++;

				/**
				 * [tJava_21 main ] stop
				 */
				/**
				 * [tJava_21 end ] start
				 */

				currentComponent = "tJava_21";

				ok_Hash.put("tJava_21", true);
				end_Hash.put("tJava_21", System.currentTimeMillis());

				/**
				 * [tJava_21 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_21:OnSubjobOk1", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tOracleConnection_1Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_21:OnSubjobOk2", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_21_SUBPROCESS_STATE", 1);
	}

	public void tOracleConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tOracleConnection_1 begin ] start
				 */

				ok_Hash.put("tOracleConnection_1", false);
				start_Hash.put("tOracleConnection_1",
						System.currentTimeMillis());
				currentComponent = "tOracleConnection_1";

				int tos_count_tOracleConnection_1 = 0;

				String url_tOracleConnection_1 = "jdbc:oracle:thin:@"
						+ context.DBHost + ":" + context.DBPort + ":"
						+ context.DBInstance;
				globalMap.put("connectionType_" + "tOracleConnection_1",
						"ORACLE_SID");

				String userName_tOracleConnection_1 = context.DBUsername;
				String password_tOracleConnection_1 = context.DBPassword;

				java.sql.Connection conn_tOracleConnection_1 = null;

				if ((null == globalMap.get(KEY_DB_DATASOURCES))
						|| "".equals("")) {

					java.lang.Class.forName("oracle.jdbc.OracleDriver");

					conn_tOracleConnection_1 = java.sql.DriverManager
							.getConnection(url_tOracleConnection_1,
									userName_tOracleConnection_1,
									password_tOracleConnection_1);
					globalMap.put("conn_tOracleConnection_1",
							conn_tOracleConnection_1);
				}
				if (null != conn_tOracleConnection_1) {

					conn_tOracleConnection_1.setAutoCommit(true);
				}
				globalMap.put("host_" + "tOracleConnection_1", context.DBHost);
				globalMap.put("port_" + "tOracleConnection_1", context.DBPort);
				globalMap.put("dbname_" + "tOracleConnection_1",
						context.DBInstance);

				globalMap.put("conn_" + "tOracleConnection_1",
						conn_tOracleConnection_1);
				globalMap.put("dbschema_" + "tOracleConnection_1",
						context.DBSchema);
				globalMap.put("username_" + "tOracleConnection_1",
						context.DBUsername);
				globalMap.put("password_" + "tOracleConnection_1",
						context.DBPassword);

				/**
				 * [tOracleConnection_1 begin ] stop
				 */
				/**
				 * [tOracleConnection_1 main ] start
				 */

				currentComponent = "tOracleConnection_1";

				tos_count_tOracleConnection_1++;

				/**
				 * [tOracleConnection_1 main ] stop
				 */
				/**
				 * [tOracleConnection_1 end ] start
				 */

				currentComponent = "tOracleConnection_1";

				ok_Hash.put("tOracleConnection_1", true);
				end_Hash.put("tOracleConnection_1", System.currentTimeMillis());

				/**
				 * [tOracleConnection_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tOracleConnection_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tOracleInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class row21Struct implements
			routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_MASTER = new byte[0];
		static byte[] commonByteArray_TOS_ODM_MASTER = new byte[0];

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_MASTER.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_MASTER.length == 0) {
						commonByteArray_TOS_ODM_MASTER = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_MASTER = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_MASTER, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_MASTER, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_MASTER) {

				try {

					int length = 0;

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row21Struct row21 = new row21Struct();

				/**
				 * [tJavaRow_2 begin ] start
				 */

				ok_Hash.put("tJavaRow_2", false);
				start_Hash.put("tJavaRow_2", System.currentTimeMillis());
				currentComponent = "tJavaRow_2";

				int tos_count_tJavaRow_2 = 0;

				int nb_line_tJavaRow_2 = 0;

				/**
				 * [tJavaRow_2 begin ] stop
				 */

				/**
				 * [tOracleInput_1 begin ] start
				 */

				ok_Hash.put("tOracleInput_1", false);
				start_Hash.put("tOracleInput_1", System.currentTimeMillis());
				currentComponent = "tOracleInput_1";

				int tos_count_tOracleInput_1 = 0;

				int nb_line_tOracleInput_1 = 0;
				java.sql.Connection conn_tOracleInput_1 = null;
				conn_tOracleInput_1 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");
				if (null == conn_tOracleInput_1) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleInput_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tOracleInput_1 = dataSources_tOracleInput_1.get("")
							.getConnection();
					// globalMap.put("conn_tOracleConnection_1",
					// conn_tOracleInput_1);
				}
				if (((oracle.jdbc.OracleConnection) conn_tOracleInput_1)
						.getSessionTimeZone() == null) {
					java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1
							.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1
							.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_1 = java.util.TimeZone
							.getDefault().getID();
					while (rsGetTZ_tOracleInput_1.next()) {
						sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1
								.getString(1);
					}
					((oracle.jdbc.OracleConnection) conn_tOracleInput_1)
							.setSessionTimeZone(sessionTimezone_tOracleInput_1);
				}

				java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1
						.createStatement();

				String dbquery_tOracleInput_1 = "select value from nls_database_parameters where parameter='NLS_CHARACTERSET'";

				globalMap.put("tOracleInput_1_QUERY", dbquery_tOracleInput_1);

				java.sql.ResultSet rs_tOracleInput_1 = stmt_tOracleInput_1
						.executeQuery(dbquery_tOracleInput_1);
				java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1
						.getMetaData();
				int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1
						.getColumnCount();

				String tmpContent_tOracleInput_1 = null;
				int column_index_tOracleInput_1 = 1;
				while (rs_tOracleInput_1.next()) {
					nb_line_tOracleInput_1++;

					column_index_tOracleInput_1 = 1;

					if (colQtyInRs_tOracleInput_1 < column_index_tOracleInput_1) {
						row21.value = null;
					} else {

						tmpContent_tOracleInput_1 = rs_tOracleInput_1
								.getString(column_index_tOracleInput_1);
						if (tmpContent_tOracleInput_1 != null) {
							row21.value = tmpContent_tOracleInput_1;
						} else {
							row21.value = null;
						}

					}

					/**
					 * [tOracleInput_1 begin ] stop
					 */
					/**
					 * [tOracleInput_1 main ] start
					 */

					currentComponent = "tOracleInput_1";

					tos_count_tOracleInput_1++;

					/**
					 * [tOracleInput_1 main ] stop
					 */

					/**
					 * [tJavaRow_2 main ] start
					 */

					currentComponent = "tJavaRow_2";

					if (row21.value.toLowerCase().contains("utf")) {
						context.coding = "UTF-8";
					} else {
						context.coding = "ISO-8859-15";
					}
					System.out.println(context.coding);
					System.out.println(row21.value);
					nb_line_tJavaRow_2++;

					tos_count_tJavaRow_2++;

					/**
					 * [tJavaRow_2 main ] stop
					 */

					/**
					 * [tOracleInput_1 end ] start
					 */

					currentComponent = "tOracleInput_1";

				}
				stmt_tOracleInput_1.close();

				globalMap.put("tOracleInput_1_NB_LINE", nb_line_tOracleInput_1);

				ok_Hash.put("tOracleInput_1", true);
				end_Hash.put("tOracleInput_1", System.currentTimeMillis());

				/**
				 * [tOracleInput_1 end ] stop
				 */

				/**
				 * [tJavaRow_2 end ] start
				 */

				currentComponent = "tJavaRow_2";

				globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);

				ok_Hash.put("tJavaRow_2", true);
				end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				/**
				 * [tJavaRow_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tOracleInput_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tOracleClose_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}

	public void tOracleClose_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tOracleClose_1 begin ] start
				 */

				ok_Hash.put("tOracleClose_1", false);
				start_Hash.put("tOracleClose_1", System.currentTimeMillis());
				currentComponent = "tOracleClose_1";

				int tos_count_tOracleClose_1 = 0;

				/**
				 * [tOracleClose_1 begin ] stop
				 */
				/**
				 * [tOracleClose_1 main ] start
				 */

				currentComponent = "tOracleClose_1";

				java.sql.Connection conn_tOracleClose_1 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");

				if (null == conn_tOracleClose_1) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tOracleClose_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					if (dataSources_tOracleClose_1 != null) {
						if (dataSources_tOracleClose_1.get("") != null) {
							conn_tOracleClose_1 = dataSources_tOracleClose_1
									.get("").getConnection();
						}
					}
				}

				if (conn_tOracleClose_1 != null
						&& !conn_tOracleClose_1.isClosed()) {
					conn_tOracleClose_1.close();
				}

				tos_count_tOracleClose_1++;

				/**
				 * [tOracleClose_1 main ] stop
				 */
				/**
				 * [tOracleClose_1 end ] start
				 */

				currentComponent = "tOracleClose_1";

				ok_Hash.put("tOracleClose_1", true);
				end_Hash.put("tOracleClose_1", System.currentTimeMillis());

				/**
				 * [tOracleClose_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 1);
	}

	public void tLibraryLoad_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLibraryLoad_1 begin ] start
				 */

				ok_Hash.put("tLibraryLoad_1", false);
				start_Hash.put("tLibraryLoad_1", System.currentTimeMillis());
				currentComponent = "tLibraryLoad_1";

				int tos_count_tLibraryLoad_1 = 0;

				/**
				 * [tLibraryLoad_1 begin ] stop
				 */
				/**
				 * [tLibraryLoad_1 main ] start
				 */

				currentComponent = "tLibraryLoad_1";

				tos_count_tLibraryLoad_1++;

				/**
				 * [tLibraryLoad_1 main ] stop
				 */
				/**
				 * [tLibraryLoad_1 end ] start
				 */

				currentComponent = "tLibraryLoad_1";

				ok_Hash.put("tLibraryLoad_1", true);
				end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				/**
				 * [tLibraryLoad_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tLibraryLoad_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_1 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_1", false);
				start_Hash.put("tCreateTemporaryFile_1",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_1";

				int tos_count_tCreateTemporaryFile_1 = 0;

				java.io.File dir_tCreateTemporaryFile_1 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_1.mkdirs();
				String name_tCreateTemporaryFile_1 = "talend_XXXX".replaceAll(
						"XXXX", routines.TalendString.getAsciiRandomString(4)
								.toUpperCase());
				String suffix_tCreateTemporaryFile_1 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_1 = new java.io.File(
						dir_tCreateTemporaryFile_1, name_tCreateTemporaryFile_1
								+ "." + suffix_tCreateTemporaryFile_1);
				if (file_tCreateTemporaryFile_1.createNewFile()) {
					file_tCreateTemporaryFile_1.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_1_FILEPATH",
						file_tCreateTemporaryFile_1.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_1 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_1 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_1";

				tos_count_tCreateTemporaryFile_1++;

				/**
				 * [tCreateTemporaryFile_1 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_1 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_1";

				ok_Hash.put("tCreateTemporaryFile_1", true);
				end_Hash.put("tCreateTemporaryFile_1",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_2Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final ODM_MASTER ODM_MASTERClass = new ODM_MASTER();

		int exitCode = ODM_MASTERClass.runJobInTOS(args);
		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = ODM_MASTER.class.getClassLoader()
					.getResourceAsStream(
							"tos/odm_master_0_1/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			try {
				context.importTerms = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("importTerms"));
			} catch (NumberFormatException e) {
				context.importTerms = null;
			}
			context.basedir = (String) context.getProperty("basedir");
			context.datePattern = (String) context.getProperty("datePattern");
			context.fileName = (String) context.getProperty("fileName");
			try {
				context.cleanUp = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("cleanUp"));
			} catch (NumberFormatException e) {
				context.cleanUp = null;
			}
			context.coding = (String) context.getProperty("coding");
			context.DBHost = (String) context.getProperty("DBHost");
			context.DBInstance = (String) context.getProperty("DBInstance");
			context.DBPassword = (java.lang.String) context
					.getProperty("DBPassword");
			context.DBPort = (String) context.getProperty("DBPort");
			context.DBSchema = (String) context.getProperty("DBSchema");
			context.DBUsername = (String) context.getProperty("DBUsername");
			context.FTPPassword = (java.lang.String) context
					.getProperty("FTPPassword");
			context.FTPUser = (String) context.getProperty("FTPUser");
			try {
				context.truncateProject = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("truncateProject"));
			} catch (NumberFormatException e) {
				context.truncateProject = null;
			}
			context.concept_cd = (String) context.getProperty("concept_cd");
			context.concept_path = (String) context.getProperty("concept_path");
			context.currentFile = (String) context.getProperty("currentFile");
			context.encoding = (String) context.getProperty("encoding");
			context.folderMain = (String) context.getProperty("folderMain");
			context.folderODM = (String) context.getProperty("folderODM");
			context.folderOutput = (String) context.getProperty("folderOutput");
			context.folderTmp = (String) context.getProperty("folderTmp");
			context.i2b2HeadNode = (String) context.getProperty("i2b2HeadNode");
			context.i2b2HeadNodeName = (String) context
					.getProperty("i2b2HeadNodeName");
			try {
				context.importCodelist = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("importCodelist"));
			} catch (NumberFormatException e) {
				context.importCodelist = null;
			}
			try {
				context.importSingleFile = routines.system.ParserUtils
						.parseTo_Boolean(context
								.getProperty("importSingleFile"));
			} catch (NumberFormatException e) {
				context.importSingleFile = null;
			}
			try {
				context.includePids = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("includePids"));
			} catch (NumberFormatException e) {
				context.includePids = null;
			}
			context.ItemData = (String) context.getProperty("ItemData");
			context.ItemDataAny = (String) context.getProperty("ItemDataAny");
			context.ItemDataBase64Binary = (String) context
					.getProperty("ItemDataBase64Binary");
			context.ItemDataBase64Float = (String) context
					.getProperty("ItemDataBase64Float");
			context.ItemDataBoolean = (String) context
					.getProperty("ItemDataBoolean");
			context.ItemDataDate = (String) context.getProperty("ItemDataDate");
			context.ItemDataDatetime = (String) context
					.getProperty("ItemDataDatetime");
			context.ItemDataDouble = (String) context
					.getProperty("ItemDataDouble");
			context.ItemDataDurationDatetime = (String) context
					.getProperty("ItemDataDurationDatetime");
			context.ItemDataFloat = (String) context
					.getProperty("ItemDataFloat");
			context.ItemDataHexBinary = (String) context
					.getProperty("ItemDataHexBinary");
			context.ItemDataHexFloat = (String) context
					.getProperty("ItemDataHexFloat");
			context.ItemDataIncompleteDatetime = (String) context
					.getProperty("ItemDataIncompleteDatetime");
			context.ItemDataInteger = (String) context
					.getProperty("ItemDataInteger");
			context.ItemDataIntervalDatetime = (String) context
					.getProperty("ItemDataIntervalDatetime");
			context.ItemDataPartialDate = (String) context
					.getProperty("ItemDataPartialDate");
			context.ItemDataPartialDatetime = (String) context
					.getProperty("ItemDataPartialDatetime");
			context.ItemDataPartialTime = (String) context
					.getProperty("ItemDataPartialTime");
			context.ItemDataString = (String) context
					.getProperty("ItemDataString");
			context.ItemDataTime = (String) context.getProperty("ItemDataTime");
			context.ItemDataURI = (String) context.getProperty("ItemDataURI");
			context.MDPD = (String) context.getProperty("MDPD");
			context.MDPDName = (String) context.getProperty("MDPDName");
			context.xslt = (String) context.getProperty("xslt");
			context.xslt_namespace = (String) context
					.getProperty("xslt_namespace");
			try {
				context.counter = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("counter"));
			} catch (NumberFormatException e) {
				context.counter = null;
			}
			try {
				context.currentCounter = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("currentCounter"));
			} catch (NumberFormatException e) {
				context.currentCounter = null;
			}
			try {
				context.status = routines.system.ParserUtils
						.parseTo_Float(context.getProperty("status"));
			} catch (NumberFormatException e) {
				context.status = null;
			}
			try {
				context.statusTmp = routines.system.ParserUtils
						.parseTo_Float(context.getProperty("statusTmp"));
			} catch (NumberFormatException e) {
				context.statusTmp = null;
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("importTerms")) {
				context.importTerms = (Boolean) parentContextMap
						.get("importTerms");
			}
			if (parentContextMap.containsKey("basedir")) {
				context.basedir = (String) parentContextMap.get("basedir");
			}
			if (parentContextMap.containsKey("datePattern")) {
				context.datePattern = (String) parentContextMap
						.get("datePattern");
			}
			if (parentContextMap.containsKey("fileName")) {
				context.fileName = (String) parentContextMap.get("fileName");
			}
			if (parentContextMap.containsKey("cleanUp")) {
				context.cleanUp = (Boolean) parentContextMap.get("cleanUp");
			}
			if (parentContextMap.containsKey("coding")) {
				context.coding = (String) parentContextMap.get("coding");
			}
			if (parentContextMap.containsKey("DBHost")) {
				context.DBHost = (String) parentContextMap.get("DBHost");
			}
			if (parentContextMap.containsKey("DBInstance")) {
				context.DBInstance = (String) parentContextMap
						.get("DBInstance");
			}
			if (parentContextMap.containsKey("DBPassword")) {
				context.DBPassword = (java.lang.String) parentContextMap
						.get("DBPassword");
			}
			if (parentContextMap.containsKey("DBPort")) {
				context.DBPort = (String) parentContextMap.get("DBPort");
			}
			if (parentContextMap.containsKey("DBSchema")) {
				context.DBSchema = (String) parentContextMap.get("DBSchema");
			}
			if (parentContextMap.containsKey("DBUsername")) {
				context.DBUsername = (String) parentContextMap
						.get("DBUsername");
			}
			if (parentContextMap.containsKey("FTPPassword")) {
				context.FTPPassword = (java.lang.String) parentContextMap
						.get("FTPPassword");
			}
			if (parentContextMap.containsKey("FTPUser")) {
				context.FTPUser = (String) parentContextMap.get("FTPUser");
			}
			if (parentContextMap.containsKey("truncateProject")) {
				context.truncateProject = (Boolean) parentContextMap
						.get("truncateProject");
			}
			if (parentContextMap.containsKey("concept_cd")) {
				context.concept_cd = (String) parentContextMap
						.get("concept_cd");
			}
			if (parentContextMap.containsKey("concept_path")) {
				context.concept_path = (String) parentContextMap
						.get("concept_path");
			}
			if (parentContextMap.containsKey("currentFile")) {
				context.currentFile = (String) parentContextMap
						.get("currentFile");
			}
			if (parentContextMap.containsKey("encoding")) {
				context.encoding = (String) parentContextMap.get("encoding");
			}
			if (parentContextMap.containsKey("folderMain")) {
				context.folderMain = (String) parentContextMap
						.get("folderMain");
			}
			if (parentContextMap.containsKey("folderODM")) {
				context.folderODM = (String) parentContextMap.get("folderODM");
			}
			if (parentContextMap.containsKey("folderOutput")) {
				context.folderOutput = (String) parentContextMap
						.get("folderOutput");
			}
			if (parentContextMap.containsKey("folderTmp")) {
				context.folderTmp = (String) parentContextMap.get("folderTmp");
			}
			if (parentContextMap.containsKey("i2b2HeadNode")) {
				context.i2b2HeadNode = (String) parentContextMap
						.get("i2b2HeadNode");
			}
			if (parentContextMap.containsKey("i2b2HeadNodeName")) {
				context.i2b2HeadNodeName = (String) parentContextMap
						.get("i2b2HeadNodeName");
			}
			if (parentContextMap.containsKey("importCodelist")) {
				context.importCodelist = (Boolean) parentContextMap
						.get("importCodelist");
			}
			if (parentContextMap.containsKey("importSingleFile")) {
				context.importSingleFile = (Boolean) parentContextMap
						.get("importSingleFile");
			}
			if (parentContextMap.containsKey("includePids")) {
				context.includePids = (Boolean) parentContextMap
						.get("includePids");
			}
			if (parentContextMap.containsKey("ItemData")) {
				context.ItemData = (String) parentContextMap.get("ItemData");
			}
			if (parentContextMap.containsKey("ItemDataAny")) {
				context.ItemDataAny = (String) parentContextMap
						.get("ItemDataAny");
			}
			if (parentContextMap.containsKey("ItemDataBase64Binary")) {
				context.ItemDataBase64Binary = (String) parentContextMap
						.get("ItemDataBase64Binary");
			}
			if (parentContextMap.containsKey("ItemDataBase64Float")) {
				context.ItemDataBase64Float = (String) parentContextMap
						.get("ItemDataBase64Float");
			}
			if (parentContextMap.containsKey("ItemDataBoolean")) {
				context.ItemDataBoolean = (String) parentContextMap
						.get("ItemDataBoolean");
			}
			if (parentContextMap.containsKey("ItemDataDate")) {
				context.ItemDataDate = (String) parentContextMap
						.get("ItemDataDate");
			}
			if (parentContextMap.containsKey("ItemDataDatetime")) {
				context.ItemDataDatetime = (String) parentContextMap
						.get("ItemDataDatetime");
			}
			if (parentContextMap.containsKey("ItemDataDouble")) {
				context.ItemDataDouble = (String) parentContextMap
						.get("ItemDataDouble");
			}
			if (parentContextMap.containsKey("ItemDataDurationDatetime")) {
				context.ItemDataDurationDatetime = (String) parentContextMap
						.get("ItemDataDurationDatetime");
			}
			if (parentContextMap.containsKey("ItemDataFloat")) {
				context.ItemDataFloat = (String) parentContextMap
						.get("ItemDataFloat");
			}
			if (parentContextMap.containsKey("ItemDataHexBinary")) {
				context.ItemDataHexBinary = (String) parentContextMap
						.get("ItemDataHexBinary");
			}
			if (parentContextMap.containsKey("ItemDataHexFloat")) {
				context.ItemDataHexFloat = (String) parentContextMap
						.get("ItemDataHexFloat");
			}
			if (parentContextMap.containsKey("ItemDataIncompleteDatetime")) {
				context.ItemDataIncompleteDatetime = (String) parentContextMap
						.get("ItemDataIncompleteDatetime");
			}
			if (parentContextMap.containsKey("ItemDataInteger")) {
				context.ItemDataInteger = (String) parentContextMap
						.get("ItemDataInteger");
			}
			if (parentContextMap.containsKey("ItemDataIntervalDatetime")) {
				context.ItemDataIntervalDatetime = (String) parentContextMap
						.get("ItemDataIntervalDatetime");
			}
			if (parentContextMap.containsKey("ItemDataPartialDate")) {
				context.ItemDataPartialDate = (String) parentContextMap
						.get("ItemDataPartialDate");
			}
			if (parentContextMap.containsKey("ItemDataPartialDatetime")) {
				context.ItemDataPartialDatetime = (String) parentContextMap
						.get("ItemDataPartialDatetime");
			}
			if (parentContextMap.containsKey("ItemDataPartialTime")) {
				context.ItemDataPartialTime = (String) parentContextMap
						.get("ItemDataPartialTime");
			}
			if (parentContextMap.containsKey("ItemDataString")) {
				context.ItemDataString = (String) parentContextMap
						.get("ItemDataString");
			}
			if (parentContextMap.containsKey("ItemDataTime")) {
				context.ItemDataTime = (String) parentContextMap
						.get("ItemDataTime");
			}
			if (parentContextMap.containsKey("ItemDataURI")) {
				context.ItemDataURI = (String) parentContextMap
						.get("ItemDataURI");
			}
			if (parentContextMap.containsKey("MDPD")) {
				context.MDPD = (String) parentContextMap.get("MDPD");
			}
			if (parentContextMap.containsKey("MDPDName")) {
				context.MDPDName = (String) parentContextMap.get("MDPDName");
			}
			if (parentContextMap.containsKey("xslt")) {
				context.xslt = (String) parentContextMap.get("xslt");
			}
			if (parentContextMap.containsKey("xslt_namespace")) {
				context.xslt_namespace = (String) parentContextMap
						.get("xslt_namespace");
			}
			if (parentContextMap.containsKey("counter")) {
				context.counter = (Integer) parentContextMap.get("counter");
			}
			if (parentContextMap.containsKey("currentCounter")) {
				context.currentCounter = (Integer) parentContextMap
						.get("currentCounter");
			}
			if (parentContextMap.containsKey("status")) {
				context.status = (Float) parentContextMap.get("status");
			}
			if (parentContextMap.containsKey("statusTmp")) {
				context.statusTmp = (Float) parentContextMap.get("statusTmp");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tLibraryLoad_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tLibraryLoad_1) {

			e_tLibraryLoad_1.printStackTrace();
			globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : ODM_MASTER");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 225242 characters generated by Talend Open Studio for Data Integration on the
 * January 13, 2014 5:03:16 PM CET
 ************************************************************************************************/
