// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package tos.odm_extract_pd_0_1;

import routines.IIT;
import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.enc_num_routine;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_7
//import java.util.List;

//the import part of tJava_4
//import java.util.List;

//the import part of tJava_6
//import java.util.List;

//the import part of tJava_5
//import java.util.List;

//the import part of tJava_3
//import java.util.List;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJava_1
//import java.util.List;

//the import part of tJavaRow_9
//import java.util.List;

//the import part of tJavaRow_2
//import java.util.List;

//the import part of tJavaRow_6
//import java.util.List;

//the import part of tJavaRow_11
//import java.util.List;

//the import part of tJavaRow_3
//import java.util.List;

//the import part of tJava_2
//import java.util.List;

//the import part of tLibraryLoad_1
import de.goettingen.i2b2.importtool.idrt.StatusListener.StatusListener;

//the import part of tJava_7
import java.math.BigDecimal;
import java.util.HashMap;

//the import part of tJavaRow_8
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: ODM_Extract_PD Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.3.1.r104014
 * @status 
 */
public class ODM_Extract_PD implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (source != null) {

				this.setProperty("source", source.toString());

			}

			if (startDate != null) {

				this.setProperty("startDate", startDate.toString());

			}

			if (subjid != null) {

				this.setProperty("subjid", subjid.toString());

			}

			if (encounterItem != null) {

				this.setProperty("encounterItem", encounterItem.toString());

			}

			if (subStatus != null) {

				this.setProperty("subStatus", subStatus.toString());

			}

			if (instanceMap != null) {

				this.setProperty("instanceMap", instanceMap.toString());

			}

			if (maxInstance != null) {

				this.setProperty("maxInstance", maxInstance.toString());

			}

			if (DBHost != null) {

				this.setProperty("DBHost", DBHost.toString());

			}

			if (DBInstance != null) {

				this.setProperty("DBInstance", DBInstance.toString());

			}

			if (DBPassword != null) {

				this.setProperty("DBPassword", DBPassword.toString());

			}

			if (DBPort != null) {

				this.setProperty("DBPort", DBPort.toString());

			}

			if (DBSchema != null) {

				this.setProperty("DBSchema", DBSchema.toString());

			}

			if (DBUsername != null) {

				this.setProperty("DBUsername", DBUsername.toString());

			}

			if (DB_StagingI2B2_jdbcurl != null) {

				this.setProperty("DB_StagingI2B2_jdbcurl",
						DB_StagingI2B2_jdbcurl.toString());

			}

			if (DB_StagingI2B2_sqlclassname != null) {

				this.setProperty("DB_StagingI2B2_sqlclassname",
						DB_StagingI2B2_sqlclassname.toString());

			}

			if (concept_cd != null) {

				this.setProperty("concept_cd", concept_cd.toString());

			}

			if (concept_path != null) {

				this.setProperty("concept_path", concept_path.toString());

			}

			if (currentFile != null) {

				this.setProperty("currentFile", currentFile.toString());

			}

			if (encoding != null) {

				this.setProperty("encoding", encoding.toString());

			}

			if (folderMain != null) {

				this.setProperty("folderMain", folderMain.toString());

			}

			if (folderODM != null) {

				this.setProperty("folderODM", folderODM.toString());

			}

			if (folderOutput != null) {

				this.setProperty("folderOutput", folderOutput.toString());

			}

			if (folderTmp != null) {

				this.setProperty("folderTmp", folderTmp.toString());

			}

			if (i2b2HeadNode != null) {

				this.setProperty("i2b2HeadNode", i2b2HeadNode.toString());

			}

			if (i2b2HeadNodeName != null) {

				this.setProperty("i2b2HeadNodeName",
						i2b2HeadNodeName.toString());

			}

			if (importCodelist != null) {

				this.setProperty("importCodelist", importCodelist.toString());

			}

			if (includePids != null) {

				this.setProperty("includePids", includePids.toString());

			}

			if (ItemData != null) {

				this.setProperty("ItemData", ItemData.toString());

			}

			if (ItemDataAny != null) {

				this.setProperty("ItemDataAny", ItemDataAny.toString());

			}

			if (ItemDataBase64Binary != null) {

				this.setProperty("ItemDataBase64Binary",
						ItemDataBase64Binary.toString());

			}

			if (ItemDataBase64Float != null) {

				this.setProperty("ItemDataBase64Float",
						ItemDataBase64Float.toString());

			}

			if (ItemDataBoolean != null) {

				this.setProperty("ItemDataBoolean", ItemDataBoolean.toString());

			}

			if (ItemDataDate != null) {

				this.setProperty("ItemDataDate", ItemDataDate.toString());

			}

			if (ItemDataDatetime != null) {

				this.setProperty("ItemDataDatetime",
						ItemDataDatetime.toString());

			}

			if (ItemDataDouble != null) {

				this.setProperty("ItemDataDouble", ItemDataDouble.toString());

			}

			if (ItemDataDurationDatetime != null) {

				this.setProperty("ItemDataDurationDatetime",
						ItemDataDurationDatetime.toString());

			}

			if (ItemDataFloat != null) {

				this.setProperty("ItemDataFloat", ItemDataFloat.toString());

			}

			if (ItemDataHexBinary != null) {

				this.setProperty("ItemDataHexBinary",
						ItemDataHexBinary.toString());

			}

			if (ItemDataHexFloat != null) {

				this.setProperty("ItemDataHexFloat",
						ItemDataHexFloat.toString());

			}

			if (ItemDataIncompleteDatetime != null) {

				this.setProperty("ItemDataIncompleteDatetime",
						ItemDataIncompleteDatetime.toString());

			}

			if (ItemDataInteger != null) {

				this.setProperty("ItemDataInteger", ItemDataInteger.toString());

			}

			if (ItemDataIntervalDatetime != null) {

				this.setProperty("ItemDataIntervalDatetime",
						ItemDataIntervalDatetime.toString());

			}

			if (ItemDataPartialDate != null) {

				this.setProperty("ItemDataPartialDate",
						ItemDataPartialDate.toString());

			}

			if (ItemDataPartialDatetime != null) {

				this.setProperty("ItemDataPartialDatetime",
						ItemDataPartialDatetime.toString());

			}

			if (ItemDataPartialTime != null) {

				this.setProperty("ItemDataPartialTime",
						ItemDataPartialTime.toString());

			}

			if (ItemDataString != null) {

				this.setProperty("ItemDataString", ItemDataString.toString());

			}

			if (ItemDataTime != null) {

				this.setProperty("ItemDataTime", ItemDataTime.toString());

			}

			if (ItemDataURI != null) {

				this.setProperty("ItemDataURI", ItemDataURI.toString());

			}

			if (MDPD != null) {

				this.setProperty("MDPD", MDPD.toString());

			}

			if (MDPDName != null) {

				this.setProperty("MDPDName", MDPDName.toString());

			}

			if (xslt != null) {

				this.setProperty("xslt", xslt.toString());

			}

		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public Long startDate;

		public Long getStartDate() {
			return this.startDate;
		}

		public String subjid;

		public String getSubjid() {
			return this.subjid;
		}

		public String encounterItem;

		public String getEncounterItem() {
			return this.encounterItem;
		}

		public Float subStatus;

		public Float getSubStatus() {
			return this.subStatus;
		}

		public Object instanceMap;

		public Object getInstanceMap() {
			return this.instanceMap;
		}

		public BigDecimal maxInstance;

		public BigDecimal getMaxInstance() {
			return this.maxInstance;
		}

		public String DBHost;

		public String getDBHost() {
			return this.DBHost;
		}

		public String DBInstance;

		public String getDBInstance() {
			return this.DBInstance;
		}

		public java.lang.String DBPassword;

		public java.lang.String getDBPassword() {
			return this.DBPassword;
		}

		public String DBPort;

		public String getDBPort() {
			return this.DBPort;
		}

		public String DBSchema;

		public String getDBSchema() {
			return this.DBSchema;
		}

		public String DBUsername;

		public String getDBUsername() {
			return this.DBUsername;
		}

		public String DB_StagingI2B2_jdbcurl;

		public String getDB_StagingI2B2_jdbcurl() {
			return this.DB_StagingI2B2_jdbcurl;
		}

		public String DB_StagingI2B2_sqlclassname;

		public String getDB_StagingI2B2_sqlclassname() {
			return this.DB_StagingI2B2_sqlclassname;
		}

		public String concept_cd;

		public String getConcept_cd() {
			return this.concept_cd;
		}

		public String concept_path;

		public String getConcept_path() {
			return this.concept_path;
		}

		public String currentFile;

		public String getCurrentFile() {
			return this.currentFile;
		}

		public String encoding;

		public String getEncoding() {
			return this.encoding;
		}

		public String folderMain;

		public String getFolderMain() {
			return this.folderMain;
		}

		public String folderODM;

		public String getFolderODM() {
			return this.folderODM;
		}

		public String folderOutput;

		public String getFolderOutput() {
			return this.folderOutput;
		}

		public String folderTmp;

		public String getFolderTmp() {
			return this.folderTmp;
		}

		public String i2b2HeadNode;

		public String getI2b2HeadNode() {
			return this.i2b2HeadNode;
		}

		public String i2b2HeadNodeName;

		public String getI2b2HeadNodeName() {
			return this.i2b2HeadNodeName;
		}

		public Boolean importCodelist;

		public Boolean getImportCodelist() {
			return this.importCodelist;
		}

		public Boolean includePids;

		public Boolean getIncludePids() {
			return this.includePids;
		}

		public String ItemData;

		public String getItemData() {
			return this.ItemData;
		}

		public String ItemDataAny;

		public String getItemDataAny() {
			return this.ItemDataAny;
		}

		public String ItemDataBase64Binary;

		public String getItemDataBase64Binary() {
			return this.ItemDataBase64Binary;
		}

		public String ItemDataBase64Float;

		public String getItemDataBase64Float() {
			return this.ItemDataBase64Float;
		}

		public String ItemDataBoolean;

		public String getItemDataBoolean() {
			return this.ItemDataBoolean;
		}

		public String ItemDataDate;

		public String getItemDataDate() {
			return this.ItemDataDate;
		}

		public String ItemDataDatetime;

		public String getItemDataDatetime() {
			return this.ItemDataDatetime;
		}

		public String ItemDataDouble;

		public String getItemDataDouble() {
			return this.ItemDataDouble;
		}

		public String ItemDataDurationDatetime;

		public String getItemDataDurationDatetime() {
			return this.ItemDataDurationDatetime;
		}

		public String ItemDataFloat;

		public String getItemDataFloat() {
			return this.ItemDataFloat;
		}

		public String ItemDataHexBinary;

		public String getItemDataHexBinary() {
			return this.ItemDataHexBinary;
		}

		public String ItemDataHexFloat;

		public String getItemDataHexFloat() {
			return this.ItemDataHexFloat;
		}

		public String ItemDataIncompleteDatetime;

		public String getItemDataIncompleteDatetime() {
			return this.ItemDataIncompleteDatetime;
		}

		public String ItemDataInteger;

		public String getItemDataInteger() {
			return this.ItemDataInteger;
		}

		public String ItemDataIntervalDatetime;

		public String getItemDataIntervalDatetime() {
			return this.ItemDataIntervalDatetime;
		}

		public String ItemDataPartialDate;

		public String getItemDataPartialDate() {
			return this.ItemDataPartialDate;
		}

		public String ItemDataPartialDatetime;

		public String getItemDataPartialDatetime() {
			return this.ItemDataPartialDatetime;
		}

		public String ItemDataPartialTime;

		public String getItemDataPartialTime() {
			return this.ItemDataPartialTime;
		}

		public String ItemDataString;

		public String getItemDataString() {
			return this.ItemDataString;
		}

		public String ItemDataTime;

		public String getItemDataTime() {
			return this.ItemDataTime;
		}

		public String ItemDataURI;

		public String getItemDataURI() {
			return this.ItemDataURI;
		}

		public String MDPD;

		public String getMDPD() {
			return this.MDPD;
		}

		public String MDPDName;

		public String getMDPDName() {
			return this.MDPDName;
		}

		public String xslt;

		public String getXslt() {
			return this.xslt;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "ODM_Extract_PD";
	private final String projectName = "TOS";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					ODM_Extract_PD.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(ODM_Extract_PD.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tCreateTemporaryFile_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_1", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputXML_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputXML_7", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_1", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_7", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tForeach_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tForeach_1", System.currentTimeMillis());

		status = "failure";

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_4", System.currentTimeMillis());

		status = "failure";

		tJava_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_6", System.currentTimeMillis());

		status = "failure";

		tJava_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_16", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_10", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_14", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_10", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUnite_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUnite_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_7", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_5", System.currentTimeMillis());

		status = "failure";

		tJava_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tCreateTemporaryFile_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_16", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_21_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_21", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_21_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_11", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_21_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_17", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_21_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_22_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_22", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_22_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_18_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_18", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_22_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_3", System.currentTimeMillis());

		status = "failure";

		tJava_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUnite_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUnite_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_9", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_1", System.currentTimeMillis());

		status = "failure";

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputXML_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputXML_2", System.currentTimeMillis());

		status = "failure";

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_9", System.currentTimeMillis());

		status = "failure";

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());

		status = "failure";

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_1", System.currentTimeMillis());

		status = "failure";

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

		status = "failure";

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_2", System.currentTimeMillis());

		status = "failure";

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_3", System.currentTimeMillis());

		status = "failure";

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_2", System.currentTimeMillis());

		status = "failure";

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_6", System.currentTimeMillis());

		status = "failure";

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_4", System.currentTimeMillis());

		status = "failure";

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_6", System.currentTimeMillis());

		status = "failure";

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

		status = "failure";

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());

		status = "failure";

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_9", System.currentTimeMillis());

		status = "failure";

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_15", System.currentTimeMillis());

		status = "failure";

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_11", System.currentTimeMillis());

		status = "failure";

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_8", System.currentTimeMillis());

		status = "failure";

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_8", System.currentTimeMillis());

		status = "failure";

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_10", System.currentTimeMillis());

		status = "failure";

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_3", System.currentTimeMillis());

		status = "failure";

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_5", System.currentTimeMillis());

		status = "failure";

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_12", System.currentTimeMillis());

		status = "failure";

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tCreateTemporaryFile_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_2", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_14", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_14_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_3", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_15", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_15_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_4", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_9", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_10", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_11", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_11_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_8", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_12", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_12_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputXML_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputXML_3", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_3", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tCreateTemporaryFile_17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_17", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_17_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_15", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_15_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_13", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_13_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_14", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_14_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_2", System.currentTimeMillis());

		status = "failure";

		tJava_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLibraryLoad_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

		status = "failure";

		tLibraryLoad_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_17", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_17_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_7", System.currentTimeMillis());

		status = "failure";

		tJava_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCConnection_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCConnection_1", System.currentTimeMillis());

		status = "failure";

		tJDBCConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_1", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_8", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_11", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_18_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_18", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row20_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row20", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_15_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_fromOnt_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_fromOnt", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_fromCode_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_fromCode", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_14_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row22_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_17_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputXML_7_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tForeach_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_6_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_16_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_10_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_16_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_21_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_22_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_2_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_14_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_3_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_15_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_4_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_9_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_10_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_11_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_8_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_12_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputXML_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_17_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_15_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_13_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_14_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_7_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLibraryLoad_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_17_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_7_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCConnection_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_1 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_1", false);
				start_Hash.put("tCreateTemporaryFile_1",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_1";

				int tos_count_tCreateTemporaryFile_1 = 0;

				java.io.File dir_tCreateTemporaryFile_1 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_1.mkdirs();
				String name_tCreateTemporaryFile_1 = "talend1asdasd_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_1 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_1 = new java.io.File(
						dir_tCreateTemporaryFile_1, name_tCreateTemporaryFile_1
								+ "." + suffix_tCreateTemporaryFile_1);
				if (file_tCreateTemporaryFile_1.createNewFile()) {
					file_tCreateTemporaryFile_1.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_1_FILEPATH",
						file_tCreateTemporaryFile_1.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_1 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_1 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_1";

				tos_count_tCreateTemporaryFile_1++;

				/**
				 * [tCreateTemporaryFile_1 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_1 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_1";

				ok_Hash.put("tCreateTemporaryFile_1", true);
				end_Hash.put("tCreateTemporaryFile_1",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputXML_7Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_1_SUBPROCESS_STATE", 1);
	}

	public static class row19Struct implements
			routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String StudyOID;

		public String getStudyOID() {
			return this.StudyOID;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.Download_Date = readDate(dis);

					this.source = readString(dis);

					this.StudyOID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.StudyOID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Download_Date=" + String.valueOf(Download_Date));
			sb.append(",source=" + source);
			sb.append(",StudyOID=" + StudyOID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row18Struct implements
			routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String StudyOID;

		public String getStudyOID() {
			return this.StudyOID;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.Download_Date = readDate(dis);

					this.source = readString(dis);

					this.StudyOID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.StudyOID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Download_Date=" + String.valueOf(Download_Date));
			sb.append(",source=" + source);
			sb.append(",StudyOID=" + StudyOID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputXML_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputXML_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row18Struct row18 = new row18Struct();
				row18Struct row19 = row18;

				/**
				 * [tJavaRow_7 begin ] start
				 */

				ok_Hash.put("tJavaRow_7", false);
				start_Hash.put("tJavaRow_7", System.currentTimeMillis());
				currentComponent = "tJavaRow_7";

				int tos_count_tJavaRow_7 = 0;

				int nb_line_tJavaRow_7 = 0;

				/**
				 * [tJavaRow_7 begin ] stop
				 */

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());
				currentComponent = "tLogRow_1";

				int tos_count_tLogRow_1 = 0;

				// /////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[3];

					public void addRow(String[] row) {

						for (int i = 0; i < 3; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i],
										row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 2 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 2 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(
									new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(),
									(Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0]
								- fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[2]
								- fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}
				}
				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
				util_tLogRow_1.setTableName("tLogRow_1");
				util_tLogRow_1.addRow(new String[] { "Download_Date", "source",
						"StudyOID", });
				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
				// /////////////////////

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tFileInputXML_7 begin ] start
				 */

				ok_Hash.put("tFileInputXML_7", false);
				start_Hash.put("tFileInputXML_7", System.currentTimeMillis());
				currentComponent = "tFileInputXML_7";

				int tos_count_tFileInputXML_7 = 0;

				int nb_line_tFileInputXML_7 = 0;

				class IgnoreDTDEntityResolver_tFileInputXML_7 implements
						org.xml.sax.EntityResolver {

					public org.xml.sax.InputSource resolveEntity(
							String publicId, String systemId)
							throws org.xml.sax.SAXException,
							java.io.IOException {
						return new org.xml.sax.InputSource(
								new java.io.ByteArrayInputStream(
										"<?xml version='1.0' encoding='UTF-8'?>"
												.getBytes()));
					}

				}
				String os_tFileInputXML_7 = System.getProperty("os.name")
						.toLowerCase();
				boolean isWindows_tFileInputXML_7 = false;
				if (os_tFileInputXML_7.indexOf("windows") > -1
						|| os_tFileInputXML_7.indexOf("nt") > -1) {
					isWindows_tFileInputXML_7 = true;
				}
				class NameSpaceTool_tFileInputXML_7 {

					public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

					private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

					public void countNSMap(org.dom4j.Element el) {
						for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
								.declaredNamespaces()) {
							if (ns.getPrefix().trim().length() == 0) {
								xmlNameSpaceMap.put(
										"pre" + defualtNSPath.size(),
										ns.getURI());
								String path = "";
								org.dom4j.Element elTmp = el;
								while (elTmp != null) {
									if (elTmp.getNamespacePrefix() != null
											&& elTmp.getNamespacePrefix()
													.length() > 0) {
										path = "/" + elTmp.getNamespacePrefix()
												+ ":" + elTmp.getName() + path;
									} else {
										path = "/" + elTmp.getName() + path;
									}
									elTmp = elTmp.getParent();
								}
								defualtNSPath.add(path);
							} else {
								xmlNameSpaceMap
										.put(ns.getPrefix(), ns.getURI());
							}

						}
						for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
								.elements()) {
							countNSMap(e);
						}
					}

					public String addDefaultNSPrefix(String path,
							String loopPath) {
						if (defualtNSPath.size() > 0) {
							String fullPath = loopPath;
							if (!path.equals(fullPath)) {
								for (String tmp : path.split("/")) {
									if (("..").equals(tmp)) {
										fullPath = fullPath.substring(0,
												fullPath.lastIndexOf("/"));
									} else {
										fullPath += "/" + tmp;
									}
								}
							}
							int size = fullPath.split("/").length - 1;
							if (size < 0) {
								return fullPath;
							}
							int[] indexs = new int[size];
							java.util.Arrays.fill(indexs, -1);
							int length = 0;
							for (int i = 0; i < defualtNSPath.size(); i++) {
								if (defualtNSPath.get(i).length() > length
										&& fullPath.startsWith(defualtNSPath
												.get(i))) {
									java.util.Arrays.fill(indexs, defualtNSPath
											.get(i).split("/").length - 2,
											indexs.length, i);
									length = defualtNSPath.get(i).length();
								}
							}

							StringBuilder newPath = new StringBuilder();
							String[] pathStrs = path.split("/");
							for (int i = 0; i < pathStrs.length; i++) {
								String tmp = pathStrs[i];
								if (newPath.length() > 0) {
									newPath.append("/");
								}
								if (tmp.length() > 0 && tmp.indexOf(":") == -1
										&& tmp.indexOf(".") == -1 /*
																 * &&
																 * tmp.indexOf
																 * ("@") == -1
																 */) {
									int index = indexs[i + indexs.length
											- pathStrs.length];
									if (index >= 0) {
										// ==== add by wliu to support both
										// filter and functions==
										if (tmp.indexOf("[") > 0
												&& tmp.indexOf("]") > tmp
														.indexOf("[")) {// include
																		// filter
											String tmpStr = replaceElementWithNS(
													tmp, "pre" + index + ":");
											newPath.append(tmpStr);
										} else {
											if (tmp.indexOf("@") != -1
													|| tmp.indexOf("(") < tmp
															.indexOf(")")) { // include
																				// attribute
												newPath.append(tmp);
											} else {
												// ==add end=======
												newPath.append("pre")
														.append(index)
														.append(":")
														.append(tmp);
											}
										}
									} else {
										newPath.append(tmp);
									}
								} else {
									newPath.append(tmp);
								}
							}
							return newPath.toString();
						}
						return path;
					}

					private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
					private java.util.regex.Pattern pattern = java.util.regex.Pattern
							.compile(matches);

					private String replaceElementWithNS(String global,
							String pre) {

						java.util.regex.Matcher match = pattern.matcher(global);
						StringBuffer sb = new StringBuffer();
						match.reset();
						while (match.find()) {
							String group = match.group();
							String tmp = "";
							if (group.toLowerCase().matches(
									"\\b(div|mod|and|or)\\b.*")
									|| group.matches("@.*")) {
								tmp = group;
							} else {
								tmp = tmp + pre + group;
							}
							match.appendReplacement(sb, tmp);
						}
						match.appendTail(sb);

						return sb.toString();
					}

				}

				class XML_API_tFileInputXML_7 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				org.dom4j.io.SAXReader reader_tFileInputXML_7 = new org.dom4j.io.SAXReader();
				reader_tFileInputXML_7
						.setEntityResolver(new IgnoreDTDEntityResolver_tFileInputXML_7());
				Object filename_tFileInputXML_7 = null;
				try {
					filename_tFileInputXML_7 = context.currentFile;
				} catch (java.lang.Exception e) {

					System.err.println(e.getMessage());

				}
				if (filename_tFileInputXML_7 != null
						&& filename_tFileInputXML_7 instanceof String
						&& filename_tFileInputXML_7.toString().startsWith("//")) {
					if (!isWindows_tFileInputXML_7) {
						filename_tFileInputXML_7 = filename_tFileInputXML_7
								.toString().replaceFirst("//", "/");
					}
				}

				boolean isValidFile_tFileInputXML_7 = true;
				org.dom4j.Document doc_tFileInputXML_7 = null;
				java.io.Closeable toClose_tFileInputXML_7 = null;
				try {
					if (filename_tFileInputXML_7 instanceof java.io.InputStream) {
						java.io.InputStream inputStream_tFileInputXML_7 = (java.io.InputStream) filename_tFileInputXML_7;
						toClose_tFileInputXML_7 = inputStream_tFileInputXML_7;
						doc_tFileInputXML_7 = reader_tFileInputXML_7
								.read(inputStream_tFileInputXML_7);
					} else {
						java.io.Reader unicodeReader_tFileInputXML_7 = new UnicodeReader(
								new java.io.FileInputStream(String
										.valueOf(filename_tFileInputXML_7)),
								context.encoding);
						toClose_tFileInputXML_7 = unicodeReader_tFileInputXML_7;
						org.xml.sax.InputSource in_tFileInputXML_7 = new org.xml.sax.InputSource(
								unicodeReader_tFileInputXML_7);
						doc_tFileInputXML_7 = reader_tFileInputXML_7
								.read(in_tFileInputXML_7);
					}
				} catch (java.lang.Exception e) {
					System.err.println(e.getMessage());
					isValidFile_tFileInputXML_7 = false;
				} finally {
					if (toClose_tFileInputXML_7 != null) {
						toClose_tFileInputXML_7.close();
					}
				}
				if (isValidFile_tFileInputXML_7) {
					NameSpaceTool_tFileInputXML_7 nsTool_tFileInputXML_7 = new NameSpaceTool_tFileInputXML_7();
					nsTool_tFileInputXML_7.countNSMap(doc_tFileInputXML_7
							.getRootElement());
					java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_7 = nsTool_tFileInputXML_7.xmlNameSpaceMap;

					org.dom4j.XPath x_tFileInputXML_7 = doc_tFileInputXML_7
							.createXPath(nsTool_tFileInputXML_7
									.addDefaultNSPrefix("/ODM/Study",
											"/ODM/Study"));
					x_tFileInputXML_7
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_7);

					java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_7 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tFileInputXML_7
							.selectNodes(doc_tFileInputXML_7);
					XML_API_tFileInputXML_7 xml_api_tFileInputXML_7 = new XML_API_tFileInputXML_7();
					String str_tFileInputXML_7 = "";
					org.dom4j.Node node_tFileInputXML_7 = null;

					// init all mapping xpaths
					org.dom4j.XPath xTmp0_tFileInputXML_7 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_7
									.addDefaultNSPrefix("../@CreationDateTime",
											"/ODM/Study"));
					xTmp0_tFileInputXML_7
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_7);
					org.dom4j.XPath xTmp1_tFileInputXML_7 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_7
									.addDefaultNSPrefix("../@SourceSystem",
											"/ODM/Study"));
					xTmp1_tFileInputXML_7
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_7);
					org.dom4j.XPath xTmp2_tFileInputXML_7 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_7
									.addDefaultNSPrefix("/@OID", "/ODM/Study"));
					xTmp2_tFileInputXML_7
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_7);

					for (org.dom4j.tree.AbstractNode temp_tFileInputXML_7 : nodeList_tFileInputXML_7) {
						nb_line_tFileInputXML_7++;
						row18 = null;
						boolean whetherReject_tFileInputXML_7 = false;
						row18 = new row18Struct();
						try {
							Object obj0_tFileInputXML_7 = xTmp0_tFileInputXML_7
									.evaluate(temp_tFileInputXML_7);
							if (obj0_tFileInputXML_7 == null) {
								node_tFileInputXML_7 = null;
								str_tFileInputXML_7 = "";

							} else if (obj0_tFileInputXML_7 instanceof org.dom4j.Node) {
								node_tFileInputXML_7 = (org.dom4j.Node) obj0_tFileInputXML_7;
								str_tFileInputXML_7 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_7,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj0_tFileInputXML_7 instanceof String
									|| obj0_tFileInputXML_7 instanceof Number) {
								node_tFileInputXML_7 = temp_tFileInputXML_7;
								str_tFileInputXML_7 = String
										.valueOf(obj0_tFileInputXML_7);
							} else if (obj0_tFileInputXML_7 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_7 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_7;
								node_tFileInputXML_7 = nodes_tFileInputXML_7
										.size() > 0 ? nodes_tFileInputXML_7
										.get(0) : null;
								str_tFileInputXML_7 = node_tFileInputXML_7 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_7,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_7
									.isDefNull(node_tFileInputXML_7)) {
								row18.Download_Date = null;
							} else if (xml_api_tFileInputXML_7
									.isEmpty(node_tFileInputXML_7)
									|| xml_api_tFileInputXML_7
											.isMissing(node_tFileInputXML_7)) {
								row18.Download_Date = null;
							} else {
								row18.Download_Date = ParserUtils.parseTo_Date(
										str_tFileInputXML_7, "yyyy-MM-dd");
							}
							Object obj1_tFileInputXML_7 = xTmp1_tFileInputXML_7
									.evaluate(temp_tFileInputXML_7);
							if (obj1_tFileInputXML_7 == null) {
								node_tFileInputXML_7 = null;
								str_tFileInputXML_7 = "";

							} else if (obj1_tFileInputXML_7 instanceof org.dom4j.Node) {
								node_tFileInputXML_7 = (org.dom4j.Node) obj1_tFileInputXML_7;
								str_tFileInputXML_7 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_7,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj1_tFileInputXML_7 instanceof String
									|| obj1_tFileInputXML_7 instanceof Number) {
								node_tFileInputXML_7 = temp_tFileInputXML_7;
								str_tFileInputXML_7 = String
										.valueOf(obj1_tFileInputXML_7);
							} else if (obj1_tFileInputXML_7 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_7 = (java.util.List<org.dom4j.Node>) obj1_tFileInputXML_7;
								node_tFileInputXML_7 = nodes_tFileInputXML_7
										.size() > 0 ? nodes_tFileInputXML_7
										.get(0) : null;
								str_tFileInputXML_7 = node_tFileInputXML_7 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_7,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_7
									.isDefNull(node_tFileInputXML_7)) {
								row18.source = null;
							} else if (xml_api_tFileInputXML_7
									.isEmpty(node_tFileInputXML_7)) {
								row18.source = "";
							} else if (xml_api_tFileInputXML_7
									.isMissing(node_tFileInputXML_7)) {
								row18.source = null;
							} else {
								row18.source = str_tFileInputXML_7;
							}
							Object obj2_tFileInputXML_7 = xTmp2_tFileInputXML_7
									.evaluate(temp_tFileInputXML_7);
							if (obj2_tFileInputXML_7 == null) {
								node_tFileInputXML_7 = null;
								str_tFileInputXML_7 = "";

							} else if (obj2_tFileInputXML_7 instanceof org.dom4j.Node) {
								node_tFileInputXML_7 = (org.dom4j.Node) obj2_tFileInputXML_7;
								str_tFileInputXML_7 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_7,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj2_tFileInputXML_7 instanceof String
									|| obj2_tFileInputXML_7 instanceof Number) {
								node_tFileInputXML_7 = temp_tFileInputXML_7;
								str_tFileInputXML_7 = String
										.valueOf(obj2_tFileInputXML_7);
							} else if (obj2_tFileInputXML_7 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_7 = (java.util.List<org.dom4j.Node>) obj2_tFileInputXML_7;
								node_tFileInputXML_7 = nodes_tFileInputXML_7
										.size() > 0 ? nodes_tFileInputXML_7
										.get(0) : null;
								str_tFileInputXML_7 = node_tFileInputXML_7 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_7,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_7
									.isDefNull(node_tFileInputXML_7)) {
								row18.StudyOID = null;
							} else if (xml_api_tFileInputXML_7
									.isEmpty(node_tFileInputXML_7)) {
								row18.StudyOID = "";
							} else if (xml_api_tFileInputXML_7
									.isMissing(node_tFileInputXML_7)) {
								row18.StudyOID = null;
							} else {
								row18.StudyOID = str_tFileInputXML_7;
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputXML_7 = true;
							System.err.println(e.getMessage());
							row18 = null;
						}

						/**
						 * [tFileInputXML_7 begin ] stop
						 */
						/**
						 * [tFileInputXML_7 main ] start
						 */

						currentComponent = "tFileInputXML_7";

						tos_count_tFileInputXML_7++;

						/**
						 * [tFileInputXML_7 main ] stop
						 */
						// Start of branch "row18"
						if (row18 != null) {

							/**
							 * [tLogRow_1 main ] start
							 */

							currentComponent = "tLogRow_1";

							// /////////////////////

							String[] row_tLogRow_1 = new String[3];

							if (row18.Download_Date != null) { //
								row_tLogRow_1[0] = FormatterUtils.format_Date(
										row18.Download_Date, "yyyy-MM-dd");

							} //

							if (row18.source != null) { //
								row_tLogRow_1[1] = String.valueOf(row18.source);

							} //

							if (row18.StudyOID != null) { //
								row_tLogRow_1[2] = String
										.valueOf(row18.StudyOID);

							} //

							util_tLogRow_1.addRow(row_tLogRow_1);
							nb_line_tLogRow_1++;
							// ////

							// ////

							// /////////////////////

							row19 = row18;

							tos_count_tLogRow_1++;

							/**
							 * [tLogRow_1 main ] stop
							 */

							/**
							 * [tJavaRow_7 main ] start
							 */

							currentComponent = "tJavaRow_7";

							if (row19.source != null && row19.StudyOID != null)
								context.source = row19.source + "_"
										+ row19.StudyOID;
							else if (row19.source == null)
								context.source = row19.StudyOID;
							else if (row19.StudyOID == null)
								context.source = row19.source;
							System.out.println("file: " + context.currentFile);
							System.out.println("OID: " + row19.StudyOID);
							System.out.println(context.encoding);

							nb_line_tJavaRow_7++;

							tos_count_tJavaRow_7++;

							/**
							 * [tJavaRow_7 main ] stop
							 */

						} // End of branch "row18"

						/**
						 * [tFileInputXML_7 end ] start
						 */

						currentComponent = "tFileInputXML_7";

					}
				}
				globalMap.put("tFileInputXML_7_NB_LINE",
						nb_line_tFileInputXML_7);

				ok_Hash.put("tFileInputXML_7", true);
				end_Hash.put("tFileInputXML_7", System.currentTimeMillis());

				/**
				 * [tFileInputXML_7 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				// ////

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
							.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(
							new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				consoleOut_tLogRow_1
						.println(util_tLogRow_1.format().toString());
				consoleOut_tLogRow_1.flush();
				// ////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

				// /////////////////////

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

				/**
				 * [tJavaRow_7 end ] start
				 */

				currentComponent = "tJavaRow_7";

				globalMap.put("tJavaRow_7_NB_LINE", nb_line_tJavaRow_7);

				ok_Hash.put("tJavaRow_7", true);
				end_Hash.put("tJavaRow_7", System.currentTimeMillis());

				/**
				 * [tJavaRow_7 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputXML_7:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tForeach_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputXML_7_SUBPROCESS_STATE", 1);
	}

	public static class row28Struct implements
			routines.system.IPersistableRow<row28Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public String PatientID;

		public String getPatientID() {
			return this.PatientID;
		}

		public String EncounterNum;

		public String getEncounterNum() {
			return this.EncounterNum;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.PatientID = readString(dis);

					this.EncounterNum = readString(dis);

					this.VisitID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PatientID, dos);

				// String

				writeString(this.EncounterNum, dos);

				// String

				writeString(this.VisitID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PatientID=" + PatientID);
			sb.append(",EncounterNum=" + EncounterNum);
			sb.append(",VisitID=" + VisitID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row28Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public String PatientID;

		public String getPatientID() {
			return this.PatientID;
		}

		public String EncounterNum;

		public String getEncounterNum() {
			return this.EncounterNum;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.PatientID = readString(dis);

					this.EncounterNum = readString(dis);

					this.VisitID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PatientID, dos);

				// String

				writeString(this.EncounterNum, dos);

				// String

				writeString(this.VisitID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PatientID=" + PatientID);
			sb.append(",EncounterNum=" + EncounterNum);
			sb.append(",VisitID=" + VisitID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out5Struct implements
			routines.system.IPersistableRow<out5Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String StudyEventRepeatKey;

		public String getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public String FormRepeatKey;

		public String getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		public String itemGroupRepeatKey;

		public String getItemGroupRepeatKey() {
			return this.itemGroupRepeatKey;
		}

		public String itemCode;

		public String getItemCode() {
			return this.itemCode;
		}

		public String startDate;

		public String getStartDate() {
			return this.startDate;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String mod_path;

		public String getMod_path() {
			return this.mod_path;
		}

		public String mod_item;

		public String getMod_item() {
			return this.mod_item;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.itemID = readString(dis);

					this.Value = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.SubjectKey = readString(dis);

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.StudyEventRepeatKey = readString(dis);

					this.FormRepeatKey = readString(dis);

					this.itemGroupRepeatKey = readString(dis);

					this.itemCode = readString(dis);

					this.startDate = readString(dis);

					this.m_applied_path = readString(dis);

					this.mod_path = readString(dis);

					this.mod_item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.SubjectKey, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.StudyEventRepeatKey, dos);

				// String

				writeString(this.FormRepeatKey, dos);

				// String

				writeString(this.itemGroupRepeatKey, dos);

				// String

				writeString(this.itemCode, dos);

				// String

				writeString(this.startDate, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.mod_path, dos);

				// String

				writeString(this.mod_item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",StudyEventRepeatKey=" + StudyEventRepeatKey);
			sb.append(",FormRepeatKey=" + FormRepeatKey);
			sb.append(",itemGroupRepeatKey=" + itemGroupRepeatKey);
			sb.append(",itemCode=" + itemCode);
			sb.append(",startDate=" + startDate);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",mod_path=" + mod_path);
			sb.append(",mod_item=" + mod_item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out6Struct implements
			routines.system.IPersistableRow<out6Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String mod_path;

		public String getMod_path() {
			return this.mod_path;
		}

		public String mod_item;

		public String getMod_item() {
			return this.mod_item;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

					this.mod_path = readString(dis);

					this.mod_item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.mod_path, dos);

				// String

				writeString(this.mod_item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",mod_path=" + mod_path);
			sb.append(",mod_item=" + mod_item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row25Struct implements
			routines.system.IPersistableRow<row25Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String StudyEventRepeatKey;

		public String getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public String FormRepeatKey;

		public String getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		public String itemGroupRepeatKey;

		public String getItemGroupRepeatKey() {
			return this.itemGroupRepeatKey;
		}

		public String itemCode;

		public String getItemCode() {
			return this.itemCode;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String mod_path;

		public String getMod_path() {
			return this.mod_path;
		}

		public String mod_item;

		public String getMod_item() {
			return this.mod_item;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.itemID = readString(dis);

					this.Value = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.SubjectKey = readString(dis);

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.StudyEventRepeatKey = readString(dis);

					this.FormRepeatKey = readString(dis);

					this.itemGroupRepeatKey = readString(dis);

					this.itemCode = readString(dis);

					this.name = readString(dis);

					this.m_applied_path = readString(dis);

					this.mod_path = readString(dis);

					this.mod_item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.SubjectKey, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.StudyEventRepeatKey, dos);

				// String

				writeString(this.FormRepeatKey, dos);

				// String

				writeString(this.itemGroupRepeatKey, dos);

				// String

				writeString(this.itemCode, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.mod_path, dos);

				// String

				writeString(this.mod_item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",StudyEventRepeatKey=" + StudyEventRepeatKey);
			sb.append(",FormRepeatKey=" + FormRepeatKey);
			sb.append(",itemGroupRepeatKey=" + itemGroupRepeatKey);
			sb.append(",itemCode=" + itemCode);
			sb.append(",name=" + name);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",mod_path=" + mod_path);
			sb.append(",mod_item=" + mod_item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row24Struct implements
			routines.system.IPersistableRow<row24Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String StudyEventRepeatKey;

		public String getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public String FormRepeatKey;

		public String getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		public String itemGroupRepeatKey;

		public String getItemGroupRepeatKey() {
			return this.itemGroupRepeatKey;
		}

		public String itemCode;

		public String getItemCode() {
			return this.itemCode;
		}

		public String startDate;

		public String getStartDate() {
			return this.startDate;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String mod_path;

		public String getMod_path() {
			return this.mod_path;
		}

		public String mod_item;

		public String getMod_item() {
			return this.mod_item;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.itemID = readString(dis);

					this.Value = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.SubjectKey = readString(dis);

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.StudyEventRepeatKey = readString(dis);

					this.FormRepeatKey = readString(dis);

					this.itemGroupRepeatKey = readString(dis);

					this.itemCode = readString(dis);

					this.startDate = readString(dis);

					this.m_applied_path = readString(dis);

					this.mod_path = readString(dis);

					this.mod_item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.SubjectKey, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.StudyEventRepeatKey, dos);

				// String

				writeString(this.FormRepeatKey, dos);

				// String

				writeString(this.itemGroupRepeatKey, dos);

				// String

				writeString(this.itemCode, dos);

				// String

				writeString(this.startDate, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.mod_path, dos);

				// String

				writeString(this.mod_item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",StudyEventRepeatKey=" + StudyEventRepeatKey);
			sb.append(",FormRepeatKey=" + FormRepeatKey);
			sb.append(",itemGroupRepeatKey=" + itemGroupRepeatKey);
			sb.append(",itemCode=" + itemCode);
			sb.append(",startDate=" + startDate);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",mod_path=" + mod_path);
			sb.append(",mod_item=" + mod_item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out3Struct implements
			routines.system.IPersistableRow<out3Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String StudyEventRepeatKey;

		public String getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public String FormRepeatKey;

		public String getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		public String itemGroupRepeatKey;

		public String getItemGroupRepeatKey() {
			return this.itemGroupRepeatKey;
		}

		public String itemCode;

		public String getItemCode() {
			return this.itemCode;
		}

		public String startDate;

		public String getStartDate() {
			return this.startDate;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String mod_path;

		public String getMod_path() {
			return this.mod_path;
		}

		public String mod_item;

		public String getMod_item() {
			return this.mod_item;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.itemID = readString(dis);

					this.Value = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.SubjectKey = readString(dis);

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.StudyEventRepeatKey = readString(dis);

					this.FormRepeatKey = readString(dis);

					this.itemGroupRepeatKey = readString(dis);

					this.itemCode = readString(dis);

					this.startDate = readString(dis);

					this.m_applied_path = readString(dis);

					this.mod_path = readString(dis);

					this.mod_item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.SubjectKey, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.StudyEventRepeatKey, dos);

				// String

				writeString(this.FormRepeatKey, dos);

				// String

				writeString(this.itemGroupRepeatKey, dos);

				// String

				writeString(this.itemCode, dos);

				// String

				writeString(this.startDate, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.mod_path, dos);

				// String

				writeString(this.mod_item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",StudyEventRepeatKey=" + StudyEventRepeatKey);
			sb.append(",FormRepeatKey=" + FormRepeatKey);
			sb.append(",itemGroupRepeatKey=" + itemGroupRepeatKey);
			sb.append(",itemCode=" + itemCode);
			sb.append(",startDate=" + startDate);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",mod_path=" + mod_path);
			sb.append(",mod_item=" + mod_item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class to_ont_xmlStruct implements
			routines.system.IPersistableRow<to_ont_xmlStruct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(to_ont_xmlStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class to_ontStruct implements
			routines.system.IPersistableRow<to_ontStruct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(to_ontStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out7Struct implements
			routines.system.IPersistableRow<out7Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class outt123Struct implements
			routines.system.IPersistableRow<outt123Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String StudyEventRepeatKey;

		public String getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public String FormRepeatKey;

		public String getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		public String itemGroupRepeatKey;

		public String getItemGroupRepeatKey() {
			return this.itemGroupRepeatKey;
		}

		public String itemCode;

		public String getItemCode() {
			return this.itemCode;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String mod_path;

		public String getMod_path() {
			return this.mod_path;
		}

		public String mod_item;

		public String getMod_item() {
			return this.mod_item;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.itemID = readString(dis);

					this.Value = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.SubjectKey = readString(dis);

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.StudyEventRepeatKey = readString(dis);

					this.FormRepeatKey = readString(dis);

					this.itemGroupRepeatKey = readString(dis);

					this.itemCode = readString(dis);

					this.name = readString(dis);

					this.m_applied_path = readString(dis);

					this.mod_path = readString(dis);

					this.mod_item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.SubjectKey, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.StudyEventRepeatKey, dos);

				// String

				writeString(this.FormRepeatKey, dos);

				// String

				writeString(this.itemGroupRepeatKey, dos);

				// String

				writeString(this.itemCode, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.mod_path, dos);

				// String

				writeString(this.mod_item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",StudyEventRepeatKey=" + StudyEventRepeatKey);
			sb.append(",FormRepeatKey=" + FormRepeatKey);
			sb.append(",itemGroupRepeatKey=" + itemGroupRepeatKey);
			sb.append(",itemCode=" + itemCode);
			sb.append(",name=" + name);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",mod_path=" + mod_path);
			sb.append(",mod_item=" + mod_item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(outt123Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out4Struct implements
			routines.system.IPersistableRow<out4Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String StudyEventRepeatKey;

		public String getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public String FormRepeatKey;

		public String getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		public String itemGroupRepeatKey;

		public String getItemGroupRepeatKey() {
			return this.itemGroupRepeatKey;
		}

		public String itemCode;

		public String getItemCode() {
			return this.itemCode;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String mod_path;

		public String getMod_path() {
			return this.mod_path;
		}

		public String mod_item;

		public String getMod_item() {
			return this.mod_item;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.itemID = readString(dis);

					this.Value = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.SubjectKey = readString(dis);

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.StudyEventRepeatKey = readString(dis);

					this.FormRepeatKey = readString(dis);

					this.itemGroupRepeatKey = readString(dis);

					this.itemCode = readString(dis);

					this.name = readString(dis);

					this.m_applied_path = readString(dis);

					this.mod_path = readString(dis);

					this.mod_item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.SubjectKey, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.StudyEventRepeatKey, dos);

				// String

				writeString(this.FormRepeatKey, dos);

				// String

				writeString(this.itemGroupRepeatKey, dos);

				// String

				writeString(this.itemCode, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.mod_path, dos);

				// String

				writeString(this.mod_item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",StudyEventRepeatKey=" + StudyEventRepeatKey);
			sb.append(",FormRepeatKey=" + FormRepeatKey);
			sb.append(",itemGroupRepeatKey=" + itemGroupRepeatKey);
			sb.append(",itemCode=" + itemCode);
			sb.append(",name=" + name);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",mod_path=" + mod_path);
			sb.append(",mod_item=" + mod_item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String StudyEventRepeatKey;

		public String getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public String FormRepeatKey;

		public String getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		public String ItemGroupRepeatKey;

		public String getItemGroupRepeatKey() {
			return this.ItemGroupRepeatKey;
		}

		public String itemCode;

		public String getItemCode() {
			return this.itemCode;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String mod_path;

		public String getMod_path() {
			return this.mod_path;
		}

		public String mod_item;

		public String getMod_item() {
			return this.mod_item;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.itemID = readString(dis);

					this.Value = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.SubjectKey = readString(dis);

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.StudyEventRepeatKey = readString(dis);

					this.FormRepeatKey = readString(dis);

					this.ItemGroupRepeatKey = readString(dis);

					this.itemCode = readString(dis);

					this.name = readString(dis);

					this.m_applied_path = readString(dis);

					this.mod_path = readString(dis);

					this.mod_item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.SubjectKey, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.StudyEventRepeatKey, dos);

				// String

				writeString(this.FormRepeatKey, dos);

				// String

				writeString(this.ItemGroupRepeatKey, dos);

				// String

				writeString(this.itemCode, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.mod_path, dos);

				// String

				writeString(this.mod_item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",StudyEventRepeatKey=" + StudyEventRepeatKey);
			sb.append(",FormRepeatKey=" + FormRepeatKey);
			sb.append(",ItemGroupRepeatKey=" + ItemGroupRepeatKey);
			sb.append(",itemCode=" + itemCode);
			sb.append(",name=" + name);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",mod_path=" + mod_path);
			sb.append(",mod_item=" + mod_item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row26Struct implements
			routines.system.IPersistableRow<row26Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String StudyEventRepeatKey;

		public String getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public String FormRepeatKey;

		public String getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		public String ItemGroupRepeatKey;

		public String getItemGroupRepeatKey() {
			return this.ItemGroupRepeatKey;
		}

		public String itemCode;

		public String getItemCode() {
			return this.itemCode;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String mod_path;

		public String getMod_path() {
			return this.mod_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.itemID = readString(dis);

					this.Value = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.SubjectKey = readString(dis);

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.StudyEventRepeatKey = readString(dis);

					this.FormRepeatKey = readString(dis);

					this.ItemGroupRepeatKey = readString(dis);

					this.itemCode = readString(dis);

					this.name = readString(dis);

					this.m_applied_path = readString(dis);

					this.mod_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.SubjectKey, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.StudyEventRepeatKey, dos);

				// String

				writeString(this.FormRepeatKey, dos);

				// String

				writeString(this.ItemGroupRepeatKey, dos);

				// String

				writeString(this.itemCode, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.mod_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",StudyEventRepeatKey=" + StudyEventRepeatKey);
			sb.append(",FormRepeatKey=" + FormRepeatKey);
			sb.append(",ItemGroupRepeatKey=" + ItemGroupRepeatKey);
			sb.append(",itemCode=" + itemCode);
			sb.append(",name=" + name);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",mod_path=" + mod_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row26Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out2Struct implements
			routines.system.IPersistableRow<out2Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String StudyEventRepeatKey;

		public String getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public String FormRepeatKey;

		public String getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		public String ItemGroupRepeatKey;

		public String getItemGroupRepeatKey() {
			return this.ItemGroupRepeatKey;
		}

		public String itemCode;

		public String getItemCode() {
			return this.itemCode;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String mod_path;

		public String getMod_path() {
			return this.mod_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.itemID = readString(dis);

					this.Value = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.SubjectKey = readString(dis);

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.StudyEventRepeatKey = readString(dis);

					this.FormRepeatKey = readString(dis);

					this.ItemGroupRepeatKey = readString(dis);

					this.itemCode = readString(dis);

					this.name = readString(dis);

					this.m_applied_path = readString(dis);

					this.mod_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.SubjectKey, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.StudyEventRepeatKey, dos);

				// String

				writeString(this.FormRepeatKey, dos);

				// String

				writeString(this.ItemGroupRepeatKey, dos);

				// String

				writeString(this.itemCode, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.mod_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",StudyEventRepeatKey=" + StudyEventRepeatKey);
			sb.append(",FormRepeatKey=" + FormRepeatKey);
			sb.append(",ItemGroupRepeatKey=" + ItemGroupRepeatKey);
			sb.append(",itemCode=" + itemCode);
			sb.append(",name=" + name);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",mod_path=" + mod_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public String PID;

		public String getPID() {
			return this.PID;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.PID = readString(dis);

					this.SubjectKey = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PID, dos);

				// String

				writeString(this.SubjectKey, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PID=" + PID);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class toTempStruct implements
			routines.system.IPersistableRow<toTempStruct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public String PID;

		public String getPID() {
			return this.PID;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.PID = readString(dis);

					this.SubjectKey = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PID, dos);

				// String

				writeString(this.SubjectKey, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PID=" + PID);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(toTempStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class fromPatientStruct implements
			routines.system.IPersistableRow<fromPatientStruct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String itemGroupOID;

		public String getItemGroupOID() {
			return this.itemGroupOID;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String StudyEventRepeatKey;

		public String getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public String FormRepeatKey;

		public String getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		public String ItemGroupRepeatKey;

		public String getItemGroupRepeatKey() {
			return this.ItemGroupRepeatKey;
		}

		public String MetaDataVersionOID;

		public String getMetaDataVersionOID() {
			return this.MetaDataVersionOID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.itemID = readString(dis);

					this.Value = readString(dis);

					this.itemGroupOID = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.SubjectKey = readString(dis);

					this.DataType = readString(dis);

					this.StudyEventRepeatKey = readString(dis);

					this.FormRepeatKey = readString(dis);

					this.ItemGroupRepeatKey = readString(dis);

					this.MetaDataVersionOID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.itemGroupOID, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.SubjectKey, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.StudyEventRepeatKey, dos);

				// String

				writeString(this.FormRepeatKey, dos);

				// String

				writeString(this.ItemGroupRepeatKey, dos);

				// String

				writeString(this.MetaDataVersionOID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",itemGroupOID=" + itemGroupOID);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append(",DataType=" + DataType);
			sb.append(",StudyEventRepeatKey=" + StudyEventRepeatKey);
			sb.append(",FormRepeatKey=" + FormRepeatKey);
			sb.append(",ItemGroupRepeatKey=" + ItemGroupRepeatKey);
			sb.append(",MetaDataVersionOID=" + MetaDataVersionOID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(fromPatientStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class toEncNumStruct implements
			routines.system.IPersistableRow<toEncNumStruct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public String PatientID;

		public String getPatientID() {
			return this.PatientID;
		}

		public String EncounterNum;

		public String getEncounterNum() {
			return this.EncounterNum;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.PatientID = readString(dis);

					this.EncounterNum = readString(dis);

					this.VisitID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PatientID, dos);

				// String

				writeString(this.EncounterNum, dos);

				// String

				writeString(this.VisitID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PatientID=" + PatientID);
			sb.append(",EncounterNum=" + EncounterNum);
			sb.append(",VisitID=" + VisitID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(toEncNumStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row27Struct implements
			routines.system.IPersistableRow<row27Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String itemGroupOID;

		public String getItemGroupOID() {
			return this.itemGroupOID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String StudyEventRepeatKey;

		public String getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public String FormRepeatKey;

		public String getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		public String ItemGroupRepeatKey;

		public String getItemGroupRepeatKey() {
			return this.ItemGroupRepeatKey;
		}

		public String MetaDataVersionOID;

		public String getMetaDataVersionOID() {
			return this.MetaDataVersionOID;
		}

		public String TransactionType;

		public String getTransactionType() {
			return this.TransactionType;
		}

		public String IsNull;

		public String getIsNull() {
			return this.IsNull;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.itemID = readString(dis);

					this.Value = readString(dis);

					this.itemGroupOID = readString(dis);

					this.FormID = readString(dis);

					this.SubjectKey = readString(dis);

					this.VisitID = readString(dis);

					this.StudyEventRepeatKey = readString(dis);

					this.FormRepeatKey = readString(dis);

					this.ItemGroupRepeatKey = readString(dis);

					this.MetaDataVersionOID = readString(dis);

					this.TransactionType = readString(dis);

					this.IsNull = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.itemGroupOID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.SubjectKey, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.StudyEventRepeatKey, dos);

				// String

				writeString(this.FormRepeatKey, dos);

				// String

				writeString(this.ItemGroupRepeatKey, dos);

				// String

				writeString(this.MetaDataVersionOID, dos);

				// String

				writeString(this.TransactionType, dos);

				// String

				writeString(this.IsNull, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",itemGroupOID=" + itemGroupOID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append(",VisitID=" + VisitID);
			sb.append(",StudyEventRepeatKey=" + StudyEventRepeatKey);
			sb.append(",FormRepeatKey=" + FormRepeatKey);
			sb.append(",ItemGroupRepeatKey=" + ItemGroupRepeatKey);
			sb.append(",MetaDataVersionOID=" + MetaDataVersionOID);
			sb.append(",TransactionType=" + TransactionType);
			sb.append(",IsNull=" + IsNull);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row27Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String itemGroupOID;

		public String getItemGroupOID() {
			return this.itemGroupOID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String StudyEventRepeatKey;

		public String getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public String FormRepeatKey;

		public String getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		public String ItemGroupRepeatKey;

		public String getItemGroupRepeatKey() {
			return this.ItemGroupRepeatKey;
		}

		public String MetaDataVersionOID;

		public String getMetaDataVersionOID() {
			return this.MetaDataVersionOID;
		}

		public String TransactionType;

		public String getTransactionType() {
			return this.TransactionType;
		}

		public String IsNull;

		public String getIsNull() {
			return this.IsNull;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.itemID = readString(dis);

					this.Value = readString(dis);

					this.itemGroupOID = readString(dis);

					this.FormID = readString(dis);

					this.SubjectKey = readString(dis);

					this.VisitID = readString(dis);

					this.StudyEventRepeatKey = readString(dis);

					this.FormRepeatKey = readString(dis);

					this.ItemGroupRepeatKey = readString(dis);

					this.MetaDataVersionOID = readString(dis);

					this.TransactionType = readString(dis);

					this.IsNull = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.itemGroupOID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.SubjectKey, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.StudyEventRepeatKey, dos);

				// String

				writeString(this.FormRepeatKey, dos);

				// String

				writeString(this.ItemGroupRepeatKey, dos);

				// String

				writeString(this.MetaDataVersionOID, dos);

				// String

				writeString(this.TransactionType, dos);

				// String

				writeString(this.IsNull, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",itemGroupOID=" + itemGroupOID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append(",VisitID=" + VisitID);
			sb.append(",StudyEventRepeatKey=" + StudyEventRepeatKey);
			sb.append(",FormRepeatKey=" + FormRepeatKey);
			sb.append(",ItemGroupRepeatKey=" + ItemGroupRepeatKey);
			sb.append(",MetaDataVersionOID=" + MetaDataVersionOID);
			sb.append(",TransactionType=" + TransactionType);
			sb.append(",IsNull=" + IsNull);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tForeach_1Struct implements
			routines.system.IPersistableRow<after_tForeach_1Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tForeach_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tForeach_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tForeach_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_1Process(globalMap);
				tFileInputDelimited_14Process(globalMap);
				tFileInputDelimited_7Process(globalMap);

				row1Struct row1 = new row1Struct();
				row27Struct row27 = new row27Struct();
				toTempStruct toTemp = new toTempStruct();
				row2Struct row2 = new row2Struct();
				fromPatientStruct fromPatient = new fromPatientStruct();
				out2Struct out2 = new out2Struct();
				out2Struct row26 = out2;
				row5Struct row5 = new row5Struct();
				outt123Struct outt123 = new outt123Struct();
				out3Struct out3 = new out3Struct();
				row24Struct row24 = new row24Struct();
				to_ont_xmlStruct to_ont_xml = new to_ont_xmlStruct();
				to_ontStruct to_ont = new to_ontStruct();
				out7Struct out7 = new out7Struct();
				out4Struct out4 = new out4Struct();
				row25Struct row25 = new row25Struct();
				out5Struct out5 = new out5Struct();
				out6Struct out6 = new out6Struct();
				toEncNumStruct toEncNum = new toEncNumStruct();
				row3Struct row3 = new row3Struct();
				row3Struct row28 = row3;

				/**
				 * [tForeach_1 begin ] start
				 */

				int NB_ITERATE_tJava_1 = 0; // for statistics

				ok_Hash.put("tForeach_1", false);
				start_Hash.put("tForeach_1", System.currentTimeMillis());
				currentComponent = "tForeach_1";

				int tos_count_tForeach_1 = 0;

				Object[] values_tForeach_1 = new Object[] { context.ItemData,
						context.ItemDataString, context.ItemDataInteger,
						context.ItemDataFloat, context.ItemDataDate,
						context.ItemDataAny, context.ItemDataTime,
						context.ItemDataDatetime, context.ItemDataBoolean,
						context.ItemDataDouble, context.ItemDataPartialTime,
						context.ItemDataPartialDate,
						context.ItemDataIntervalDatetime,
						context.ItemDataPartialDatetime,
						context.ItemDataDurationDatetime, context.ItemDataURI,
						context.ItemDataIncompleteDatetime,
						context.ItemDataBase64Float, context.ItemDataHexFloat,
						context.ItemDataBase64Binary,
						context.ItemDataHexBinary, };

				for (Object tmp_tForeach_1 : values_tForeach_1) {
					globalMap.put("tForeach_1_CURRENT_VALUE", tmp_tForeach_1);

					/**
					 * [tForeach_1 begin ] stop
					 */
					/**
					 * [tForeach_1 main ] start
					 */

					currentComponent = "tForeach_1";

					tos_count_tForeach_1++;

					/**
					 * [tForeach_1 main ] stop
					 */
					NB_ITERATE_tJava_1++;
					iterateLoop++;

					/**
					 * [tJava_1 begin ] start
					 */

					int NB_ITERATE_tFileInputXML_2 = 0; // for statistics

					ok_Hash.put("tJava_1", false);
					start_Hash.put("tJava_1", System.currentTimeMillis());
					currentComponent = "tJava_1";

					int tos_count_tJava_1 = 0;

					System.out.println("Current Datatype: "
							+ ((String) globalMap
									.get("tForeach_1_CURRENT_VALUE"))
									.substring(1 + ((String) globalMap
											.get("tForeach_1_CURRENT_VALUE"))
											.lastIndexOf("/")));
					enc_num_routine.createEncMap();
					enc_num_routine.createMap();
					context.subStatus = context.subStatus + 4.0f;
					StatusListener.setSubStatus(context.subStatus,
							(int) (float) (context.subStatus) + "%");

					/**
					 * [tJava_1 begin ] stop
					 */
					/**
					 * [tJava_1 main ] start
					 */

					currentComponent = "tJava_1";

					tos_count_tJava_1++;

					/**
					 * [tJava_1 main ] stop
					 */
					NB_ITERATE_tFileInputXML_2++;
					iterateLoop++;

					/**
					 * [tFileOutputDelimited_2 begin ] start
					 */

					ok_Hash.put("tFileOutputDelimited_2", false);
					start_Hash.put("tFileOutputDelimited_2",
							System.currentTimeMillis());
					currentComponent = "tFileOutputDelimited_2";

					int tos_count_tFileOutputDelimited_2 = 0;

					String fileName_tFileOutputDelimited_2 = "";
					fileName_tFileOutputDelimited_2 = (new java.io.File(
							((String) globalMap
									.get("tCreateTemporaryFile_2_FILEPATH"))))
							.getAbsolutePath().replace("\\", "/");
					String fullName_tFileOutputDelimited_2 = null;
					String extension_tFileOutputDelimited_2 = null;
					String directory_tFileOutputDelimited_2 = null;
					if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
						if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
								.lastIndexOf("/")) {
							fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
							extension_tFileOutputDelimited_2 = "";
						} else {
							fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
									.substring(0,
											fileName_tFileOutputDelimited_2
													.lastIndexOf("."));
							extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
									.substring(fileName_tFileOutputDelimited_2
											.lastIndexOf("."));
						}
						directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("/"));
					} else {
						if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
							fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
									.substring(0,
											fileName_tFileOutputDelimited_2
													.lastIndexOf("."));
							extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
									.substring(fileName_tFileOutputDelimited_2
											.lastIndexOf("."));
						} else {
							fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
							extension_tFileOutputDelimited_2 = "";
						}
						directory_tFileOutputDelimited_2 = "";
					}
					boolean isFileGenerated_tFileOutputDelimited_2 = true;
					java.io.File filetFileOutputDelimited_2 = new java.io.File(
							fileName_tFileOutputDelimited_2);
					globalMap.put("tFileOutputDelimited_2_FILE_NAME",
							fileName_tFileOutputDelimited_2);
					if (filetFileOutputDelimited_2.exists()) {
						isFileGenerated_tFileOutputDelimited_2 = false;
					}

					int nb_line_tFileOutputDelimited_2 = 0;
					int splitEvery_tFileOutputDelimited_2 = 1000;
					int splitedFileNo_tFileOutputDelimited_2 = 0;
					int currentRow_tFileOutputDelimited_2 = 0;

					final String OUT_DELIM_tFileOutputDelimited_2 = /**
					 * Start
					 * field tFileOutputDelimited_2:FIELDSEPARATOR
					 */
					"\t"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
					;

					final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
					 * 
					 * Start field tFileOutputDelimited_2:ROWSEPARATOR
					 */
					"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
					;

					// create directory only if not exists
					if (directory_tFileOutputDelimited_2 != null
							&& directory_tFileOutputDelimited_2.trim().length() != 0) {
						java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
								directory_tFileOutputDelimited_2);
						if (!dir_tFileOutputDelimited_2.exists()) {
							dir_tFileOutputDelimited_2.mkdirs();
						}
					}

					// routines.system.Row
					java.io.Writer outtFileOutputDelimited_2 = null;
					try {
						outtFileOutputDelimited_2 = new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_2,
												true), "ISO-8859-15"));

						/**
						 * [tFileOutputDelimited_2 begin ] stop
						 */

						/**
						 * [tUniqRow_1 begin ] start
						 */

						ok_Hash.put("tUniqRow_1", false);
						start_Hash
								.put("tUniqRow_1", System.currentTimeMillis());
						currentComponent = "tUniqRow_1";

						int tos_count_tUniqRow_1 = 0;

						class KeyStruct_tUniqRow_1 {

							private static final int DEFAULT_HASHCODE = 1;
							private static final int PRIME = 31;
							private int hashCode = DEFAULT_HASHCODE;
							public boolean hashCodeDirty = true;

							String SubjectKey;

							@Override
							public int hashCode() {
								if (this.hashCodeDirty) {
									final int prime = PRIME;
									int result = DEFAULT_HASHCODE;

									result = prime
											* result
											+ ((this.SubjectKey == null) ? 0
													: this.SubjectKey
															.hashCode());

									this.hashCode = result;
									this.hashCodeDirty = false;
								}
								return this.hashCode;
							}

							@Override
							public boolean equals(Object obj) {
								if (this == obj)
									return true;
								if (obj == null)
									return false;
								if (getClass() != obj.getClass())
									return false;
								final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;

								if (this.SubjectKey == null) {
									if (other.SubjectKey != null)
										return false;
								} else if (!this.SubjectKey
										.equals(other.SubjectKey))
									return false;

								return true;
							}

						}

						int nb_uniques_tUniqRow_1 = 0;
						int nb_duplicates_tUniqRow_1 = 0;
						KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
						java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>();

						/**
						 * [tUniqRow_1 begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 begin ] start
						 */

						ok_Hash.put("tFileOutputDelimited_1", false);
						start_Hash.put("tFileOutputDelimited_1",
								System.currentTimeMillis());
						currentComponent = "tFileOutputDelimited_1";

						int tos_count_tFileOutputDelimited_1 = 0;

						String fileName_tFileOutputDelimited_1 = "";
						fileName_tFileOutputDelimited_1 = (new java.io.File(
								((String) globalMap
										.get("tCreateTemporaryFile_1_FILEPATH"))))
								.getAbsolutePath().replace("\\", "/");
						String fullName_tFileOutputDelimited_1 = null;
						String extension_tFileOutputDelimited_1 = null;
						String directory_tFileOutputDelimited_1 = null;
						if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
							if (fileName_tFileOutputDelimited_1
									.lastIndexOf(".") < fileName_tFileOutputDelimited_1
									.lastIndexOf("/")) {
								fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
								extension_tFileOutputDelimited_1 = "";
							} else {
								fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
										.substring(0,
												fileName_tFileOutputDelimited_1
														.lastIndexOf("."));
								extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
										.substring(fileName_tFileOutputDelimited_1
												.lastIndexOf("."));
							}
							directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
									.substring(0,
											fileName_tFileOutputDelimited_1
													.lastIndexOf("/"));
						} else {
							if (fileName_tFileOutputDelimited_1
									.lastIndexOf(".") != -1) {
								fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
										.substring(0,
												fileName_tFileOutputDelimited_1
														.lastIndexOf("."));
								extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
										.substring(fileName_tFileOutputDelimited_1
												.lastIndexOf("."));
							} else {
								fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
								extension_tFileOutputDelimited_1 = "";
							}
							directory_tFileOutputDelimited_1 = "";
						}
						boolean isFileGenerated_tFileOutputDelimited_1 = true;
						java.io.File filetFileOutputDelimited_1 = new java.io.File(
								fileName_tFileOutputDelimited_1);
						globalMap.put("tFileOutputDelimited_1_FILE_NAME",
								fileName_tFileOutputDelimited_1);
						if (filetFileOutputDelimited_1.exists()) {
							isFileGenerated_tFileOutputDelimited_1 = false;
						}

						String[] headColutFileOutputDelimited_1 = new String[19];
						class CSVBasicSet_tFileOutputDelimited_1 {
							private char field_Delim;
							private char row_Delim;
							private char escape;
							private char textEnclosure;
							private boolean useCRLFRecordDelimiter;

							public boolean isUseCRLFRecordDelimiter() {
								return useCRLFRecordDelimiter;
							}

							public void setFieldSeparator(String fieldSep)
									throws IllegalArgumentException {
								char field_Delim_tFileOutputDelimited_1[] = null;

								// support passing value (property: Field
								// Separator) by 'context.fs' or
								// 'globalMap.get("fs")'.
								if (fieldSep.length() > 0) {
									field_Delim_tFileOutputDelimited_1 = fieldSep
											.toCharArray();
								} else {
									throw new IllegalArgumentException(
											"Field Separator must be assigned a char.");
								}
								this.field_Delim = field_Delim_tFileOutputDelimited_1[0];
							}

							public char getFieldDelim() {
								if (this.field_Delim == 0) {
									setFieldSeparator("\t");
								}
								return this.field_Delim;
							}

							public void setRowSeparator(String rowSep) {
								if ("\r\n".equals(rowSep)) {
									useCRLFRecordDelimiter = true;
									return;
								}
								char row_DelimtFileOutputDelimited_1[] = null;

								// support passing value (property: Row
								// Separator) by 'context.rs' or
								// 'globalMap.get("rs")'.
								if (rowSep.length() > 0) {
									row_DelimtFileOutputDelimited_1 = rowSep
											.toCharArray();
								} else {
									throw new IllegalArgumentException(
											"Row Separator must be assigned a char.");
								}
								this.row_Delim = row_DelimtFileOutputDelimited_1[0];
							}

							public char getRowDelim() {
								if (this.row_Delim == 0) {
									setRowSeparator("\n");
								}
								return this.row_Delim;
							}

							public void setEscapeAndTextEnclosure(
									String strEscape, String strTextEnclosure)
									throws IllegalArgumentException {
								if (strEscape.length() <= 0) {
									throw new IllegalArgumentException(
											"Escape Char must be assigned a char.");
								}

								if ("".equals(strTextEnclosure))
									strTextEnclosure = "\0";
								char textEnclosure_tFileOutputDelimited_1[] = null;

								if (strTextEnclosure.length() > 0) {
									textEnclosure_tFileOutputDelimited_1 = strTextEnclosure
											.toCharArray();
								} else {
									throw new IllegalArgumentException(
											"Text Enclosure must be assigned a char.");
								}

								this.textEnclosure = textEnclosure_tFileOutputDelimited_1[0];

								if (("\\").equals(strEscape)) {
									this.escape = '\\';
								} else if (strEscape.equals(strTextEnclosure)) {
									this.escape = this.textEnclosure;
								} else {
									// the default escape mode is double escape
									this.escape = this.textEnclosure;
								}

							}

							public char getEscapeChar() {
								return (char) this.escape;
							}

							public char getTextEnclosure() {
								return this.textEnclosure;
							}
						}

						int nb_line_tFileOutputDelimited_1 = 0;
						int splitEvery_tFileOutputDelimited_1 = 1000;
						int splitedFileNo_tFileOutputDelimited_1 = 0;
						int currentRow_tFileOutputDelimited_1 = 0;

						CSVBasicSet_tFileOutputDelimited_1 csvSettings_tFileOutputDelimited_1 = new CSVBasicSet_tFileOutputDelimited_1();
						csvSettings_tFileOutputDelimited_1
								.setFieldSeparator("\t");
						csvSettings_tFileOutputDelimited_1
								.setRowSeparator("\n");
						csvSettings_tFileOutputDelimited_1
								.setEscapeAndTextEnclosure("\"", "\"");
						// create directory only if not exists
						if (directory_tFileOutputDelimited_1 != null
								&& directory_tFileOutputDelimited_1.trim()
										.length() != 0) {
							java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
									directory_tFileOutputDelimited_1);
							if (!dir_tFileOutputDelimited_1.exists()) {
								dir_tFileOutputDelimited_1.mkdirs();
							}
						}
						com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = null;
						try {
							CsvWritertFileOutputDelimited_1 = new com.talend.csv.CSVWriter(
									new java.io.BufferedWriter(
											new java.io.OutputStreamWriter(
													new java.io.FileOutputStream(
															fileName_tFileOutputDelimited_1,
															true),
													"ISO-8859-15")));
							CsvWritertFileOutputDelimited_1
									.setSeparator(csvSettings_tFileOutputDelimited_1
											.getFieldDelim());

							if (!csvSettings_tFileOutputDelimited_1
									.isUseCRLFRecordDelimiter()
									&& csvSettings_tFileOutputDelimited_1
											.getRowDelim() != '\r'
									&& csvSettings_tFileOutputDelimited_1
											.getRowDelim() != '\n') {
								CsvWritertFileOutputDelimited_1.setLineEnd(""
										+ csvSettings_tFileOutputDelimited_1
												.getRowDelim());
							}

							CsvWritertFileOutputDelimited_1
									.setEscapeChar(csvSettings_tFileOutputDelimited_1
											.getEscapeChar());
							CsvWritertFileOutputDelimited_1
									.setQuoteChar(csvSettings_tFileOutputDelimited_1
											.getTextEnclosure());
							CsvWritertFileOutputDelimited_1
									.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

							/**
							 * [tFileOutputDelimited_1 begin ] stop
							 */

							/**
							 * [tJavaRow_6 begin ] start
							 */

							ok_Hash.put("tJavaRow_6", false);
							start_Hash.put("tJavaRow_6",
									System.currentTimeMillis());
							currentComponent = "tJavaRow_6";

							int tos_count_tJavaRow_6 = 0;

							int nb_line_tJavaRow_6 = 0;

							/**
							 * [tJavaRow_6 begin ] stop
							 */

							/**
							 * [tFileOutputDelimited_5 begin ] start
							 */

							ok_Hash.put("tFileOutputDelimited_5", false);
							start_Hash.put("tFileOutputDelimited_5",
									System.currentTimeMillis());
							currentComponent = "tFileOutputDelimited_5";

							int tos_count_tFileOutputDelimited_5 = 0;

							String fileName_tFileOutputDelimited_5 = "";
							fileName_tFileOutputDelimited_5 = (new java.io.File(
									((String) globalMap
											.get("tCreateTemporaryFile_4_FILEPATH"))))
									.getAbsolutePath().replace("\\", "/");
							String fullName_tFileOutputDelimited_5 = null;
							String extension_tFileOutputDelimited_5 = null;
							String directory_tFileOutputDelimited_5 = null;
							if ((fileName_tFileOutputDelimited_5.indexOf("/") != -1)) {
								if (fileName_tFileOutputDelimited_5
										.lastIndexOf(".") < fileName_tFileOutputDelimited_5
										.lastIndexOf("/")) {
									fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
									extension_tFileOutputDelimited_5 = "";
								} else {
									fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
											.substring(0,
													fileName_tFileOutputDelimited_5
															.lastIndexOf("."));
									extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
											.substring(fileName_tFileOutputDelimited_5
													.lastIndexOf("."));
								}
								directory_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
										.substring(0,
												fileName_tFileOutputDelimited_5
														.lastIndexOf("/"));
							} else {
								if (fileName_tFileOutputDelimited_5
										.lastIndexOf(".") != -1) {
									fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
											.substring(0,
													fileName_tFileOutputDelimited_5
															.lastIndexOf("."));
									extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
											.substring(fileName_tFileOutputDelimited_5
													.lastIndexOf("."));
								} else {
									fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
									extension_tFileOutputDelimited_5 = "";
								}
								directory_tFileOutputDelimited_5 = "";
							}
							boolean isFileGenerated_tFileOutputDelimited_5 = true;
							java.io.File filetFileOutputDelimited_5 = new java.io.File(
									fileName_tFileOutputDelimited_5);
							globalMap.put("tFileOutputDelimited_5_FILE_NAME",
									fileName_tFileOutputDelimited_5);
							if (filetFileOutputDelimited_5.exists()) {
								isFileGenerated_tFileOutputDelimited_5 = false;
							}

							String[] headColutFileOutputDelimited_5 = new String[13];
							class CSVBasicSet_tFileOutputDelimited_5 {
								private char field_Delim;
								private char row_Delim;
								private char escape;
								private char textEnclosure;
								private boolean useCRLFRecordDelimiter;

								public boolean isUseCRLFRecordDelimiter() {
									return useCRLFRecordDelimiter;
								}

								public void setFieldSeparator(String fieldSep)
										throws IllegalArgumentException {
									char field_Delim_tFileOutputDelimited_5[] = null;

									// support passing value (property: Field
									// Separator) by 'context.fs' or
									// 'globalMap.get("fs")'.
									if (fieldSep.length() > 0) {
										field_Delim_tFileOutputDelimited_5 = fieldSep
												.toCharArray();
									} else {
										throw new IllegalArgumentException(
												"Field Separator must be assigned a char.");
									}
									this.field_Delim = field_Delim_tFileOutputDelimited_5[0];
								}

								public char getFieldDelim() {
									if (this.field_Delim == 0) {
										setFieldSeparator("\t");
									}
									return this.field_Delim;
								}

								public void setRowSeparator(String rowSep) {
									if ("\r\n".equals(rowSep)) {
										useCRLFRecordDelimiter = true;
										return;
									}
									char row_DelimtFileOutputDelimited_5[] = null;

									// support passing value (property: Row
									// Separator) by 'context.rs' or
									// 'globalMap.get("rs")'.
									if (rowSep.length() > 0) {
										row_DelimtFileOutputDelimited_5 = rowSep
												.toCharArray();
									} else {
										throw new IllegalArgumentException(
												"Row Separator must be assigned a char.");
									}
									this.row_Delim = row_DelimtFileOutputDelimited_5[0];
								}

								public char getRowDelim() {
									if (this.row_Delim == 0) {
										setRowSeparator("\n");
									}
									return this.row_Delim;
								}

								public void setEscapeAndTextEnclosure(
										String strEscape,
										String strTextEnclosure)
										throws IllegalArgumentException {
									if (strEscape.length() <= 0) {
										throw new IllegalArgumentException(
												"Escape Char must be assigned a char.");
									}

									if ("".equals(strTextEnclosure))
										strTextEnclosure = "\0";
									char textEnclosure_tFileOutputDelimited_5[] = null;

									if (strTextEnclosure.length() > 0) {
										textEnclosure_tFileOutputDelimited_5 = strTextEnclosure
												.toCharArray();
									} else {
										throw new IllegalArgumentException(
												"Text Enclosure must be assigned a char.");
									}

									this.textEnclosure = textEnclosure_tFileOutputDelimited_5[0];

									if (("\\").equals(strEscape)) {
										this.escape = '\\';
									} else if (strEscape
											.equals(strTextEnclosure)) {
										this.escape = this.textEnclosure;
									} else {
										// the default escape mode is double
										// escape
										this.escape = this.textEnclosure;
									}

								}

								public char getEscapeChar() {
									return (char) this.escape;
								}

								public char getTextEnclosure() {
									return this.textEnclosure;
								}
							}

							int nb_line_tFileOutputDelimited_5 = 0;
							int splitEvery_tFileOutputDelimited_5 = 1000;
							int splitedFileNo_tFileOutputDelimited_5 = 0;
							int currentRow_tFileOutputDelimited_5 = 0;

							CSVBasicSet_tFileOutputDelimited_5 csvSettings_tFileOutputDelimited_5 = new CSVBasicSet_tFileOutputDelimited_5();
							csvSettings_tFileOutputDelimited_5
									.setFieldSeparator("\t");
							csvSettings_tFileOutputDelimited_5
									.setRowSeparator("\n");
							csvSettings_tFileOutputDelimited_5
									.setEscapeAndTextEnclosure("\"", "\"");
							// create directory only if not exists
							if (directory_tFileOutputDelimited_5 != null
									&& directory_tFileOutputDelimited_5.trim()
											.length() != 0) {
								java.io.File dir_tFileOutputDelimited_5 = new java.io.File(
										directory_tFileOutputDelimited_5);
								if (!dir_tFileOutputDelimited_5.exists()) {
									dir_tFileOutputDelimited_5.mkdirs();
								}
							}
							com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_5 = null;
							try {
								CsvWritertFileOutputDelimited_5 = new com.talend.csv.CSVWriter(
										new java.io.BufferedWriter(
												new java.io.OutputStreamWriter(
														new java.io.FileOutputStream(
																fileName_tFileOutputDelimited_5,
																true),
														"ISO-8859-15")));
								CsvWritertFileOutputDelimited_5
										.setSeparator(csvSettings_tFileOutputDelimited_5
												.getFieldDelim());

								if (!csvSettings_tFileOutputDelimited_5
										.isUseCRLFRecordDelimiter()
										&& csvSettings_tFileOutputDelimited_5
												.getRowDelim() != '\r'
										&& csvSettings_tFileOutputDelimited_5
												.getRowDelim() != '\n') {
									CsvWritertFileOutputDelimited_5
											.setLineEnd(""
													+ csvSettings_tFileOutputDelimited_5
															.getRowDelim());
								}

								CsvWritertFileOutputDelimited_5
										.setEscapeChar(csvSettings_tFileOutputDelimited_5
												.getEscapeChar());
								CsvWritertFileOutputDelimited_5
										.setQuoteChar(csvSettings_tFileOutputDelimited_5
												.getTextEnclosure());
								CsvWritertFileOutputDelimited_5
										.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

								/**
								 * [tFileOutputDelimited_5 begin ] stop
								 */

								/**
								 * [tFileOutputDelimited_9 begin ] start
								 */

								ok_Hash.put("tFileOutputDelimited_9", false);
								start_Hash.put("tFileOutputDelimited_9",
										System.currentTimeMillis());
								currentComponent = "tFileOutputDelimited_9";

								int tos_count_tFileOutputDelimited_9 = 0;

								String fileName_tFileOutputDelimited_9 = "";
								fileName_tFileOutputDelimited_9 = (new java.io.File(
										((String) globalMap
												.get("tCreateTemporaryFile_10_FILEPATH"))))
										.getAbsolutePath().replace("\\", "/");
								String fullName_tFileOutputDelimited_9 = null;
								String extension_tFileOutputDelimited_9 = null;
								String directory_tFileOutputDelimited_9 = null;
								if ((fileName_tFileOutputDelimited_9
										.indexOf("/") != -1)) {
									if (fileName_tFileOutputDelimited_9
											.lastIndexOf(".") < fileName_tFileOutputDelimited_9
											.lastIndexOf("/")) {
										fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9;
										extension_tFileOutputDelimited_9 = "";
									} else {
										fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
												.substring(
														0,
														fileName_tFileOutputDelimited_9
																.lastIndexOf("."));
										extension_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
												.substring(fileName_tFileOutputDelimited_9
														.lastIndexOf("."));
									}
									directory_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
											.substring(0,
													fileName_tFileOutputDelimited_9
															.lastIndexOf("/"));
								} else {
									if (fileName_tFileOutputDelimited_9
											.lastIndexOf(".") != -1) {
										fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
												.substring(
														0,
														fileName_tFileOutputDelimited_9
																.lastIndexOf("."));
										extension_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
												.substring(fileName_tFileOutputDelimited_9
														.lastIndexOf("."));
									} else {
										fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9;
										extension_tFileOutputDelimited_9 = "";
									}
									directory_tFileOutputDelimited_9 = "";
								}
								boolean isFileGenerated_tFileOutputDelimited_9 = true;
								java.io.File filetFileOutputDelimited_9 = new java.io.File(
										fileName_tFileOutputDelimited_9);
								globalMap.put(
										"tFileOutputDelimited_9_FILE_NAME",
										fileName_tFileOutputDelimited_9);
								if (filetFileOutputDelimited_9.exists()) {
									isFileGenerated_tFileOutputDelimited_9 = false;
								}

								String[] headColutFileOutputDelimited_9 = new String[13];
								class CSVBasicSet_tFileOutputDelimited_9 {
									private char field_Delim;
									private char row_Delim;
									private char escape;
									private char textEnclosure;
									private boolean useCRLFRecordDelimiter;

									public boolean isUseCRLFRecordDelimiter() {
										return useCRLFRecordDelimiter;
									}

									public void setFieldSeparator(
											String fieldSep)
											throws IllegalArgumentException {
										char field_Delim_tFileOutputDelimited_9[] = null;

										// support passing value (property:
										// Field Separator) by 'context.fs' or
										// 'globalMap.get("fs")'.
										if (fieldSep.length() > 0) {
											field_Delim_tFileOutputDelimited_9 = fieldSep
													.toCharArray();
										} else {
											throw new IllegalArgumentException(
													"Field Separator must be assigned a char.");
										}
										this.field_Delim = field_Delim_tFileOutputDelimited_9[0];
									}

									public char getFieldDelim() {
										if (this.field_Delim == 0) {
											setFieldSeparator("\t");
										}
										return this.field_Delim;
									}

									public void setRowSeparator(String rowSep) {
										if ("\r\n".equals(rowSep)) {
											useCRLFRecordDelimiter = true;
											return;
										}
										char row_DelimtFileOutputDelimited_9[] = null;

										// support passing value (property: Row
										// Separator) by 'context.rs' or
										// 'globalMap.get("rs")'.
										if (rowSep.length() > 0) {
											row_DelimtFileOutputDelimited_9 = rowSep
													.toCharArray();
										} else {
											throw new IllegalArgumentException(
													"Row Separator must be assigned a char.");
										}
										this.row_Delim = row_DelimtFileOutputDelimited_9[0];
									}

									public char getRowDelim() {
										if (this.row_Delim == 0) {
											setRowSeparator("\n");
										}
										return this.row_Delim;
									}

									public void setEscapeAndTextEnclosure(
											String strEscape,
											String strTextEnclosure)
											throws IllegalArgumentException {
										if (strEscape.length() <= 0) {
											throw new IllegalArgumentException(
													"Escape Char must be assigned a char.");
										}

										if ("".equals(strTextEnclosure))
											strTextEnclosure = "\0";
										char textEnclosure_tFileOutputDelimited_9[] = null;

										if (strTextEnclosure.length() > 0) {
											textEnclosure_tFileOutputDelimited_9 = strTextEnclosure
													.toCharArray();
										} else {
											throw new IllegalArgumentException(
													"Text Enclosure must be assigned a char.");
										}

										this.textEnclosure = textEnclosure_tFileOutputDelimited_9[0];

										if (("\\").equals(strEscape)) {
											this.escape = '\\';
										} else if (strEscape
												.equals(strTextEnclosure)) {
											this.escape = this.textEnclosure;
										} else {
											// the default escape mode is double
											// escape
											this.escape = this.textEnclosure;
										}

									}

									public char getEscapeChar() {
										return (char) this.escape;
									}

									public char getTextEnclosure() {
										return this.textEnclosure;
									}
								}

								int nb_line_tFileOutputDelimited_9 = 0;
								int splitEvery_tFileOutputDelimited_9 = 1000;
								int splitedFileNo_tFileOutputDelimited_9 = 0;
								int currentRow_tFileOutputDelimited_9 = 0;

								CSVBasicSet_tFileOutputDelimited_9 csvSettings_tFileOutputDelimited_9 = new CSVBasicSet_tFileOutputDelimited_9();
								csvSettings_tFileOutputDelimited_9
										.setFieldSeparator("\t");
								csvSettings_tFileOutputDelimited_9
										.setRowSeparator("\n");
								csvSettings_tFileOutputDelimited_9
										.setEscapeAndTextEnclosure("\"", "\"");
								// create directory only if not exists
								if (directory_tFileOutputDelimited_9 != null
										&& directory_tFileOutputDelimited_9
												.trim().length() != 0) {
									java.io.File dir_tFileOutputDelimited_9 = new java.io.File(
											directory_tFileOutputDelimited_9);
									if (!dir_tFileOutputDelimited_9.exists()) {
										dir_tFileOutputDelimited_9.mkdirs();
									}
								}
								com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_9 = null;
								try {
									CsvWritertFileOutputDelimited_9 = new com.talend.csv.CSVWriter(
											new java.io.BufferedWriter(
													new java.io.OutputStreamWriter(
															new java.io.FileOutputStream(
																	fileName_tFileOutputDelimited_9,
																	true),
															"ISO-8859-15")));
									CsvWritertFileOutputDelimited_9
											.setSeparator(csvSettings_tFileOutputDelimited_9
													.getFieldDelim());

									if (!csvSettings_tFileOutputDelimited_9
											.isUseCRLFRecordDelimiter()
											&& csvSettings_tFileOutputDelimited_9
													.getRowDelim() != '\r'
											&& csvSettings_tFileOutputDelimited_9
													.getRowDelim() != '\n') {
										CsvWritertFileOutputDelimited_9
												.setLineEnd(""
														+ csvSettings_tFileOutputDelimited_9
																.getRowDelim());
									}

									CsvWritertFileOutputDelimited_9
											.setEscapeChar(csvSettings_tFileOutputDelimited_9
													.getEscapeChar());
									CsvWritertFileOutputDelimited_9
											.setQuoteChar(csvSettings_tFileOutputDelimited_9
													.getTextEnclosure());
									CsvWritertFileOutputDelimited_9
											.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

									/**
									 * [tFileOutputDelimited_9 begin ] stop
									 */

									/**
									 * [tFileOutputDelimited_15 begin ] start
									 */

									ok_Hash.put("tFileOutputDelimited_15",
											false);
									start_Hash.put("tFileOutputDelimited_15",
											System.currentTimeMillis());
									currentComponent = "tFileOutputDelimited_15";

									int tos_count_tFileOutputDelimited_15 = 0;

									String fileName_tFileOutputDelimited_15 = "";
									fileName_tFileOutputDelimited_15 = (new java.io.File(
											((String) globalMap
													.get("tCreateTemporaryFile_14_FILEPATH"))))
											.getAbsolutePath().replace("\\",
													"/");
									String fullName_tFileOutputDelimited_15 = null;
									String extension_tFileOutputDelimited_15 = null;
									String directory_tFileOutputDelimited_15 = null;
									if ((fileName_tFileOutputDelimited_15
											.indexOf("/") != -1)) {
										if (fileName_tFileOutputDelimited_15
												.lastIndexOf(".") < fileName_tFileOutputDelimited_15
												.lastIndexOf("/")) {
											fullName_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15;
											extension_tFileOutputDelimited_15 = "";
										} else {
											fullName_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15
													.substring(
															0,
															fileName_tFileOutputDelimited_15
																	.lastIndexOf("."));
											extension_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15
													.substring(fileName_tFileOutputDelimited_15
															.lastIndexOf("."));
										}
										directory_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15
												.substring(
														0,
														fileName_tFileOutputDelimited_15
																.lastIndexOf("/"));
									} else {
										if (fileName_tFileOutputDelimited_15
												.lastIndexOf(".") != -1) {
											fullName_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15
													.substring(
															0,
															fileName_tFileOutputDelimited_15
																	.lastIndexOf("."));
											extension_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15
													.substring(fileName_tFileOutputDelimited_15
															.lastIndexOf("."));
										} else {
											fullName_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15;
											extension_tFileOutputDelimited_15 = "";
										}
										directory_tFileOutputDelimited_15 = "";
									}
									boolean isFileGenerated_tFileOutputDelimited_15 = true;
									java.io.File filetFileOutputDelimited_15 = new java.io.File(
											fileName_tFileOutputDelimited_15);
									globalMap
											.put("tFileOutputDelimited_15_FILE_NAME",
													fileName_tFileOutputDelimited_15);
									if (filetFileOutputDelimited_15.exists()) {
										isFileGenerated_tFileOutputDelimited_15 = false;
									}

									String[] headColutFileOutputDelimited_15 = new String[13];
									class CSVBasicSet_tFileOutputDelimited_15 {
										private char field_Delim;
										private char row_Delim;
										private char escape;
										private char textEnclosure;
										private boolean useCRLFRecordDelimiter;

										public boolean isUseCRLFRecordDelimiter() {
											return useCRLFRecordDelimiter;
										}

										public void setFieldSeparator(
												String fieldSep)
												throws IllegalArgumentException {
											char field_Delim_tFileOutputDelimited_15[] = null;

											// support passing value (property:
											// Field Separator) by 'context.fs'
											// or 'globalMap.get("fs")'.
											if (fieldSep.length() > 0) {
												field_Delim_tFileOutputDelimited_15 = fieldSep
														.toCharArray();
											} else {
												throw new IllegalArgumentException(
														"Field Separator must be assigned a char.");
											}
											this.field_Delim = field_Delim_tFileOutputDelimited_15[0];
										}

										public char getFieldDelim() {
											if (this.field_Delim == 0) {
												setFieldSeparator("\t");
											}
											return this.field_Delim;
										}

										public void setRowSeparator(
												String rowSep) {
											if ("\r\n".equals(rowSep)) {
												useCRLFRecordDelimiter = true;
												return;
											}
											char row_DelimtFileOutputDelimited_15[] = null;

											// support passing value (property:
											// Row Separator) by 'context.rs' or
											// 'globalMap.get("rs")'.
											if (rowSep.length() > 0) {
												row_DelimtFileOutputDelimited_15 = rowSep
														.toCharArray();
											} else {
												throw new IllegalArgumentException(
														"Row Separator must be assigned a char.");
											}
											this.row_Delim = row_DelimtFileOutputDelimited_15[0];
										}

										public char getRowDelim() {
											if (this.row_Delim == 0) {
												setRowSeparator("\n");
											}
											return this.row_Delim;
										}

										public void setEscapeAndTextEnclosure(
												String strEscape,
												String strTextEnclosure)
												throws IllegalArgumentException {
											if (strEscape.length() <= 0) {
												throw new IllegalArgumentException(
														"Escape Char must be assigned a char.");
											}

											if ("".equals(strTextEnclosure))
												strTextEnclosure = "\0";
											char textEnclosure_tFileOutputDelimited_15[] = null;

											if (strTextEnclosure.length() > 0) {
												textEnclosure_tFileOutputDelimited_15 = strTextEnclosure
														.toCharArray();
											} else {
												throw new IllegalArgumentException(
														"Text Enclosure must be assigned a char.");
											}

											this.textEnclosure = textEnclosure_tFileOutputDelimited_15[0];

											if (("\\").equals(strEscape)) {
												this.escape = '\\';
											} else if (strEscape
													.equals(strTextEnclosure)) {
												this.escape = this.textEnclosure;
											} else {
												// the default escape mode is
												// double escape
												this.escape = this.textEnclosure;
											}

										}

										public char getEscapeChar() {
											return (char) this.escape;
										}

										public char getTextEnclosure() {
											return this.textEnclosure;
										}
									}

									int nb_line_tFileOutputDelimited_15 = 0;
									int splitEvery_tFileOutputDelimited_15 = 1000;
									int splitedFileNo_tFileOutputDelimited_15 = 0;
									int currentRow_tFileOutputDelimited_15 = 0;

									CSVBasicSet_tFileOutputDelimited_15 csvSettings_tFileOutputDelimited_15 = new CSVBasicSet_tFileOutputDelimited_15();
									csvSettings_tFileOutputDelimited_15
											.setFieldSeparator("\t");
									csvSettings_tFileOutputDelimited_15
											.setRowSeparator("\n");
									csvSettings_tFileOutputDelimited_15
											.setEscapeAndTextEnclosure("\"",
													"\"");
									// create directory only if not exists
									if (directory_tFileOutputDelimited_15 != null
											&& directory_tFileOutputDelimited_15
													.trim().length() != 0) {
										java.io.File dir_tFileOutputDelimited_15 = new java.io.File(
												directory_tFileOutputDelimited_15);
										if (!dir_tFileOutputDelimited_15
												.exists()) {
											dir_tFileOutputDelimited_15
													.mkdirs();
										}
									}
									com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_15 = null;
									try {
										CsvWritertFileOutputDelimited_15 = new com.talend.csv.CSVWriter(
												new java.io.BufferedWriter(
														new java.io.OutputStreamWriter(
																new java.io.FileOutputStream(
																		fileName_tFileOutputDelimited_15,
																		true),
																"ISO-8859-15")));
										CsvWritertFileOutputDelimited_15
												.setSeparator(csvSettings_tFileOutputDelimited_15
														.getFieldDelim());

										if (!csvSettings_tFileOutputDelimited_15
												.isUseCRLFRecordDelimiter()
												&& csvSettings_tFileOutputDelimited_15
														.getRowDelim() != '\r'
												&& csvSettings_tFileOutputDelimited_15
														.getRowDelim() != '\n') {
											CsvWritertFileOutputDelimited_15
													.setLineEnd(""
															+ csvSettings_tFileOutputDelimited_15
																	.getRowDelim());
										}

										CsvWritertFileOutputDelimited_15
												.setEscapeChar(csvSettings_tFileOutputDelimited_15
														.getEscapeChar());
										CsvWritertFileOutputDelimited_15
												.setQuoteChar(csvSettings_tFileOutputDelimited_15
														.getTextEnclosure());
										CsvWritertFileOutputDelimited_15
												.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

										/**
										 * [tFileOutputDelimited_15 begin ] stop
										 */

										/**
										 * [tMap_4 begin ] start
										 */

										ok_Hash.put("tMap_4", false);
										start_Hash.put("tMap_4",
												System.currentTimeMillis());
										currentComponent = "tMap_4";

										int tos_count_tMap_4 = 0;

										// ###############################
										// # Lookup's keys initialization
										// ###############################

										// ###############################
										// # Vars initialization
										class Var__tMap_4__Struct {
											boolean var1;
											boolean var2;
											boolean var3;
										}
										Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
										// ###############################

										// ###############################
										// # Outputs initialization
										out3Struct out3_tmp = new out3Struct();
										to_ont_xmlStruct to_ont_xml_tmp = new to_ont_xmlStruct();
										to_ontStruct to_ont_tmp = new to_ontStruct();
										out7Struct out7_tmp = new out7Struct();
										// ###############################

										/**
										 * [tMap_4 begin ] stop
										 */

										/**
										 * [tFileOutputDelimited_8 begin ] start
										 */

										ok_Hash.put("tFileOutputDelimited_8",
												false);
										start_Hash.put(
												"tFileOutputDelimited_8",
												System.currentTimeMillis());
										currentComponent = "tFileOutputDelimited_8";

										int tos_count_tFileOutputDelimited_8 = 0;

										String fileName_tFileOutputDelimited_8 = "";
										fileName_tFileOutputDelimited_8 = (new java.io.File(
												((String) globalMap
														.get("tCreateTemporaryFile_8_FILEPATH"))))
												.getAbsolutePath().replace(
														"\\", "/");
										String fullName_tFileOutputDelimited_8 = null;
										String extension_tFileOutputDelimited_8 = null;
										String directory_tFileOutputDelimited_8 = null;
										if ((fileName_tFileOutputDelimited_8
												.indexOf("/") != -1)) {
											if (fileName_tFileOutputDelimited_8
													.lastIndexOf(".") < fileName_tFileOutputDelimited_8
													.lastIndexOf("/")) {
												fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
												extension_tFileOutputDelimited_8 = "";
											} else {
												fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
														.substring(
																0,
																fileName_tFileOutputDelimited_8
																		.lastIndexOf("."));
												extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
														.substring(fileName_tFileOutputDelimited_8
																.lastIndexOf("."));
											}
											directory_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
													.substring(
															0,
															fileName_tFileOutputDelimited_8
																	.lastIndexOf("/"));
										} else {
											if (fileName_tFileOutputDelimited_8
													.lastIndexOf(".") != -1) {
												fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
														.substring(
																0,
																fileName_tFileOutputDelimited_8
																		.lastIndexOf("."));
												extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
														.substring(fileName_tFileOutputDelimited_8
																.lastIndexOf("."));
											} else {
												fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
												extension_tFileOutputDelimited_8 = "";
											}
											directory_tFileOutputDelimited_8 = "";
										}
										boolean isFileGenerated_tFileOutputDelimited_8 = true;
										java.io.File filetFileOutputDelimited_8 = new java.io.File(
												fileName_tFileOutputDelimited_8);
										globalMap
												.put("tFileOutputDelimited_8_FILE_NAME",
														fileName_tFileOutputDelimited_8);
										if (filetFileOutputDelimited_8.exists()) {
											isFileGenerated_tFileOutputDelimited_8 = false;
										}

										String[] headColutFileOutputDelimited_8 = new String[19];
										class CSVBasicSet_tFileOutputDelimited_8 {
											private char field_Delim;
											private char row_Delim;
											private char escape;
											private char textEnclosure;
											private boolean useCRLFRecordDelimiter;

											public boolean isUseCRLFRecordDelimiter() {
												return useCRLFRecordDelimiter;
											}

											public void setFieldSeparator(
													String fieldSep)
													throws IllegalArgumentException {
												char field_Delim_tFileOutputDelimited_8[] = null;

												// support passing value
												// (property: Field Separator)
												// by 'context.fs' or
												// 'globalMap.get("fs")'.
												if (fieldSep.length() > 0) {
													field_Delim_tFileOutputDelimited_8 = fieldSep
															.toCharArray();
												} else {
													throw new IllegalArgumentException(
															"Field Separator must be assigned a char.");
												}
												this.field_Delim = field_Delim_tFileOutputDelimited_8[0];
											}

											public char getFieldDelim() {
												if (this.field_Delim == 0) {
													setFieldSeparator("\t");
												}
												return this.field_Delim;
											}

											public void setRowSeparator(
													String rowSep) {
												if ("\r\n".equals(rowSep)) {
													useCRLFRecordDelimiter = true;
													return;
												}
												char row_DelimtFileOutputDelimited_8[] = null;

												// support passing value
												// (property: Row Separator) by
												// 'context.rs' or
												// 'globalMap.get("rs")'.
												if (rowSep.length() > 0) {
													row_DelimtFileOutputDelimited_8 = rowSep
															.toCharArray();
												} else {
													throw new IllegalArgumentException(
															"Row Separator must be assigned a char.");
												}
												this.row_Delim = row_DelimtFileOutputDelimited_8[0];
											}

											public char getRowDelim() {
												if (this.row_Delim == 0) {
													setRowSeparator("\n");
												}
												return this.row_Delim;
											}

											public void setEscapeAndTextEnclosure(
													String strEscape,
													String strTextEnclosure)
													throws IllegalArgumentException {
												if (strEscape.length() <= 0) {
													throw new IllegalArgumentException(
															"Escape Char must be assigned a char.");
												}

												if ("".equals(strTextEnclosure))
													strTextEnclosure = "\0";
												char textEnclosure_tFileOutputDelimited_8[] = null;

												if (strTextEnclosure.length() > 0) {
													textEnclosure_tFileOutputDelimited_8 = strTextEnclosure
															.toCharArray();
												} else {
													throw new IllegalArgumentException(
															"Text Enclosure must be assigned a char.");
												}

												this.textEnclosure = textEnclosure_tFileOutputDelimited_8[0];

												if (("\\").equals(strEscape)) {
													this.escape = '\\';
												} else if (strEscape
														.equals(strTextEnclosure)) {
													this.escape = this.textEnclosure;
												} else {
													// the default escape mode
													// is double escape
													this.escape = this.textEnclosure;
												}

											}

											public char getEscapeChar() {
												return (char) this.escape;
											}

											public char getTextEnclosure() {
												return this.textEnclosure;
											}
										}

										int nb_line_tFileOutputDelimited_8 = 0;
										int splitEvery_tFileOutputDelimited_8 = 1000;
										int splitedFileNo_tFileOutputDelimited_8 = 0;
										int currentRow_tFileOutputDelimited_8 = 0;

										CSVBasicSet_tFileOutputDelimited_8 csvSettings_tFileOutputDelimited_8 = new CSVBasicSet_tFileOutputDelimited_8();
										csvSettings_tFileOutputDelimited_8
												.setFieldSeparator("\t");
										csvSettings_tFileOutputDelimited_8
												.setRowSeparator("\n");
										csvSettings_tFileOutputDelimited_8
												.setEscapeAndTextEnclosure(
														"\"", "\"");
										// create directory only if not exists
										if (directory_tFileOutputDelimited_8 != null
												&& directory_tFileOutputDelimited_8
														.trim().length() != 0) {
											java.io.File dir_tFileOutputDelimited_8 = new java.io.File(
													directory_tFileOutputDelimited_8);
											if (!dir_tFileOutputDelimited_8
													.exists()) {
												dir_tFileOutputDelimited_8
														.mkdirs();
											}
										}
										com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_8 = null;
										try {
											CsvWritertFileOutputDelimited_8 = new com.talend.csv.CSVWriter(
													new java.io.BufferedWriter(
															new java.io.OutputStreamWriter(
																	new java.io.FileOutputStream(
																			fileName_tFileOutputDelimited_8,
																			true),
																	"ISO-8859-15")));
											CsvWritertFileOutputDelimited_8
													.setSeparator(csvSettings_tFileOutputDelimited_8
															.getFieldDelim());

											if (!csvSettings_tFileOutputDelimited_8
													.isUseCRLFRecordDelimiter()
													&& csvSettings_tFileOutputDelimited_8
															.getRowDelim() != '\r'
													&& csvSettings_tFileOutputDelimited_8
															.getRowDelim() != '\n') {
												CsvWritertFileOutputDelimited_8
														.setLineEnd(""
																+ csvSettings_tFileOutputDelimited_8
																		.getRowDelim());
											}

											CsvWritertFileOutputDelimited_8
													.setEscapeChar(csvSettings_tFileOutputDelimited_8
															.getEscapeChar());
											CsvWritertFileOutputDelimited_8
													.setQuoteChar(csvSettings_tFileOutputDelimited_8
															.getTextEnclosure());
											CsvWritertFileOutputDelimited_8
													.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

											/**
											 * [tFileOutputDelimited_8 begin ]
											 * stop
											 */

											/**
											 * [tFileOutputDelimited_10 begin ]
											 * start
											 */

											ok_Hash.put(
													"tFileOutputDelimited_10",
													false);
											start_Hash.put(
													"tFileOutputDelimited_10",
													System.currentTimeMillis());
											currentComponent = "tFileOutputDelimited_10";

											int tos_count_tFileOutputDelimited_10 = 0;

											String fileName_tFileOutputDelimited_10 = "";
											fileName_tFileOutputDelimited_10 = (new java.io.File(
													((String) globalMap
															.get("tCreateTemporaryFile_12_FILEPATH"))))
													.getAbsolutePath().replace(
															"\\", "/");
											String fullName_tFileOutputDelimited_10 = null;
											String extension_tFileOutputDelimited_10 = null;
											String directory_tFileOutputDelimited_10 = null;
											if ((fileName_tFileOutputDelimited_10
													.indexOf("/") != -1)) {
												if (fileName_tFileOutputDelimited_10
														.lastIndexOf(".") < fileName_tFileOutputDelimited_10
														.lastIndexOf("/")) {
													fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10;
													extension_tFileOutputDelimited_10 = "";
												} else {
													fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
															.substring(
																	0,
																	fileName_tFileOutputDelimited_10
																			.lastIndexOf("."));
													extension_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
															.substring(fileName_tFileOutputDelimited_10
																	.lastIndexOf("."));
												}
												directory_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
														.substring(
																0,
																fileName_tFileOutputDelimited_10
																		.lastIndexOf("/"));
											} else {
												if (fileName_tFileOutputDelimited_10
														.lastIndexOf(".") != -1) {
													fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
															.substring(
																	0,
																	fileName_tFileOutputDelimited_10
																			.lastIndexOf("."));
													extension_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
															.substring(fileName_tFileOutputDelimited_10
																	.lastIndexOf("."));
												} else {
													fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10;
													extension_tFileOutputDelimited_10 = "";
												}
												directory_tFileOutputDelimited_10 = "";
											}
											boolean isFileGenerated_tFileOutputDelimited_10 = true;
											java.io.File filetFileOutputDelimited_10 = new java.io.File(
													fileName_tFileOutputDelimited_10);
											globalMap
													.put("tFileOutputDelimited_10_FILE_NAME",
															fileName_tFileOutputDelimited_10);
											if (filetFileOutputDelimited_10
													.exists()) {
												isFileGenerated_tFileOutputDelimited_10 = false;
											}

											String[] headColutFileOutputDelimited_10 = new String[15];
											class CSVBasicSet_tFileOutputDelimited_10 {
												private char field_Delim;
												private char row_Delim;
												private char escape;
												private char textEnclosure;
												private boolean useCRLFRecordDelimiter;

												public boolean isUseCRLFRecordDelimiter() {
													return useCRLFRecordDelimiter;
												}

												public void setFieldSeparator(
														String fieldSep)
														throws IllegalArgumentException {
													char field_Delim_tFileOutputDelimited_10[] = null;

													// support passing value
													// (property: Field
													// Separator) by
													// 'context.fs' or
													// 'globalMap.get("fs")'.
													if (fieldSep.length() > 0) {
														field_Delim_tFileOutputDelimited_10 = fieldSep
																.toCharArray();
													} else {
														throw new IllegalArgumentException(
																"Field Separator must be assigned a char.");
													}
													this.field_Delim = field_Delim_tFileOutputDelimited_10[0];
												}

												public char getFieldDelim() {
													if (this.field_Delim == 0) {
														setFieldSeparator("\t");
													}
													return this.field_Delim;
												}

												public void setRowSeparator(
														String rowSep) {
													if ("\r\n".equals(rowSep)) {
														useCRLFRecordDelimiter = true;
														return;
													}
													char row_DelimtFileOutputDelimited_10[] = null;

													// support passing value
													// (property: Row Separator)
													// by 'context.rs' or
													// 'globalMap.get("rs")'.
													if (rowSep.length() > 0) {
														row_DelimtFileOutputDelimited_10 = rowSep
																.toCharArray();
													} else {
														throw new IllegalArgumentException(
																"Row Separator must be assigned a char.");
													}
													this.row_Delim = row_DelimtFileOutputDelimited_10[0];
												}

												public char getRowDelim() {
													if (this.row_Delim == 0) {
														setRowSeparator("\n");
													}
													return this.row_Delim;
												}

												public void setEscapeAndTextEnclosure(
														String strEscape,
														String strTextEnclosure)
														throws IllegalArgumentException {
													if (strEscape.length() <= 0) {
														throw new IllegalArgumentException(
																"Escape Char must be assigned a char.");
													}

													if ("".equals(strTextEnclosure))
														strTextEnclosure = "\0";
													char textEnclosure_tFileOutputDelimited_10[] = null;

													if (strTextEnclosure
															.length() > 0) {
														textEnclosure_tFileOutputDelimited_10 = strTextEnclosure
																.toCharArray();
													} else {
														throw new IllegalArgumentException(
																"Text Enclosure must be assigned a char.");
													}

													this.textEnclosure = textEnclosure_tFileOutputDelimited_10[0];

													if (("\\")
															.equals(strEscape)) {
														this.escape = '\\';
													} else if (strEscape
															.equals(strTextEnclosure)) {
														this.escape = this.textEnclosure;
													} else {
														// the default escape
														// mode is double escape
														this.escape = this.textEnclosure;
													}

												}

												public char getEscapeChar() {
													return (char) this.escape;
												}

												public char getTextEnclosure() {
													return this.textEnclosure;
												}
											}

											int nb_line_tFileOutputDelimited_10 = 0;
											int splitEvery_tFileOutputDelimited_10 = 1000;
											int splitedFileNo_tFileOutputDelimited_10 = 0;
											int currentRow_tFileOutputDelimited_10 = 0;

											CSVBasicSet_tFileOutputDelimited_10 csvSettings_tFileOutputDelimited_10 = new CSVBasicSet_tFileOutputDelimited_10();
											csvSettings_tFileOutputDelimited_10
													.setFieldSeparator("\t");
											csvSettings_tFileOutputDelimited_10
													.setRowSeparator("\n");
											csvSettings_tFileOutputDelimited_10
													.setEscapeAndTextEnclosure(
															"\"", "\"");
											// create directory only if not
											// exists
											if (directory_tFileOutputDelimited_10 != null
													&& directory_tFileOutputDelimited_10
															.trim().length() != 0) {
												java.io.File dir_tFileOutputDelimited_10 = new java.io.File(
														directory_tFileOutputDelimited_10);
												if (!dir_tFileOutputDelimited_10
														.exists()) {
													dir_tFileOutputDelimited_10
															.mkdirs();
												}
											}
											com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_10 = null;
											try {
												CsvWritertFileOutputDelimited_10 = new com.talend.csv.CSVWriter(
														new java.io.BufferedWriter(
																new java.io.OutputStreamWriter(
																		new java.io.FileOutputStream(
																				fileName_tFileOutputDelimited_10,
																				true),
																		"ISO-8859-15")));
												CsvWritertFileOutputDelimited_10
														.setSeparator(csvSettings_tFileOutputDelimited_10
																.getFieldDelim());

												if (!csvSettings_tFileOutputDelimited_10
														.isUseCRLFRecordDelimiter()
														&& csvSettings_tFileOutputDelimited_10
																.getRowDelim() != '\r'
														&& csvSettings_tFileOutputDelimited_10
																.getRowDelim() != '\n') {
													CsvWritertFileOutputDelimited_10
															.setLineEnd(""
																	+ csvSettings_tFileOutputDelimited_10
																			.getRowDelim());
												}

												CsvWritertFileOutputDelimited_10
														.setEscapeChar(csvSettings_tFileOutputDelimited_10
																.getEscapeChar());
												CsvWritertFileOutputDelimited_10
														.setQuoteChar(csvSettings_tFileOutputDelimited_10
																.getTextEnclosure());
												CsvWritertFileOutputDelimited_10
														.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

												/**
												 * [tFileOutputDelimited_10
												 * begin ] stop
												 */

												/**
												 * [tMap_8 begin ] start
												 */

												ok_Hash.put("tMap_8", false);
												start_Hash.put("tMap_8", System
														.currentTimeMillis());
												currentComponent = "tMap_8";

												int tos_count_tMap_8 = 0;

												// ###############################
												// # Lookup's keys
												// initialization

												org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) globalMap
														.get("tHash_Lookup_row7"));

												row7Struct row7HashKey = new row7Struct();
												row7Struct row7Default = new row7Struct();
												// ###############################

												// ###############################
												// # Vars initialization
												class Var__tMap_8__Struct {
												}
												Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
												// ###############################

												// ###############################
												// # Outputs initialization
												out5Struct out5_tmp = new out5Struct();
												out6Struct out6_tmp = new out6Struct();
												// ###############################

												/**
												 * [tMap_8 begin ] stop
												 */

												/**
												 * [tJavaRow_11 begin ] start
												 */

												ok_Hash.put("tJavaRow_11",
														false);
												start_Hash
														.put("tJavaRow_11",
																System.currentTimeMillis());
												currentComponent = "tJavaRow_11";

												int tos_count_tJavaRow_11 = 0;

												int nb_line_tJavaRow_11 = 0;

												/**
												 * [tJavaRow_11 begin ] stop
												 */

												/**
												 * [tMap_6 begin ] start
												 */

												ok_Hash.put("tMap_6", false);
												start_Hash.put("tMap_6", System
														.currentTimeMillis());
												currentComponent = "tMap_6";

												int tos_count_tMap_6 = 0;

												// ###############################
												// # Lookup's keys
												// initialization
												// ###############################

												// ###############################
												// # Vars initialization
												class Var__tMap_6__Struct {
												}
												Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
												// ###############################

												// ###############################
												// # Outputs initialization
												outt123Struct outt123_tmp = new outt123Struct();
												out4Struct out4_tmp = new out4Struct();
												// ###############################

												/**
												 * [tMap_6 begin ] stop
												 */

												/**
												 * [tJavaRow_2 begin ] start
												 */

												ok_Hash.put("tJavaRow_2", false);
												start_Hash
														.put("tJavaRow_2",
																System.currentTimeMillis());
												currentComponent = "tJavaRow_2";

												int tos_count_tJavaRow_2 = 0;

												int nb_line_tJavaRow_2 = 0;

												/**
												 * [tJavaRow_2 begin ] stop
												 */

												/**
												 * [tLogRow_3 begin ] start
												 */

												ok_Hash.put("tLogRow_3", false);
												start_Hash
														.put("tLogRow_3",
																System.currentTimeMillis());
												currentComponent = "tLogRow_3";

												int tos_count_tLogRow_3 = 0;

												/**
												 * [tLogRow_3 begin ] stop
												 */

												/**
												 * [tMap_2 begin ] start
												 */

												ok_Hash.put("tMap_2", false);
												start_Hash.put("tMap_2", System
														.currentTimeMillis());
												currentComponent = "tMap_2";

												int tos_count_tMap_2 = 0;

												// ###############################
												// # Lookup's keys
												// initialization

												org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<fromOntStruct> tHash_Lookup_fromOnt = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<fromOntStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<fromOntStruct>) globalMap
														.get("tHash_Lookup_fromOnt"));

												fromOntStruct fromOntHashKey = new fromOntStruct();
												fromOntStruct fromOntDefault = new fromOntStruct();

												org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<fromCodeStruct> tHash_Lookup_fromCode = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<fromCodeStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<fromCodeStruct>) globalMap
														.get("tHash_Lookup_fromCode"));

												fromCodeStruct fromCodeHashKey = new fromCodeStruct();
												fromCodeStruct fromCodeDefault = new fromCodeStruct();
												// ###############################

												// ###############################
												// # Vars initialization
												class Var__tMap_2__Struct {
												}
												Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
												// ###############################

												// ###############################
												// # Outputs initialization
												out2Struct out2_tmp = new out2Struct();
												// ###############################

												/**
												 * [tMap_2 begin ] stop
												 */

												/**
												 * [tFileOutputDelimited_12
												 * begin ] start
												 */

												ok_Hash.put(
														"tFileOutputDelimited_12",
														false);
												start_Hash
														.put("tFileOutputDelimited_12",
																System.currentTimeMillis());
												currentComponent = "tFileOutputDelimited_12";

												int tos_count_tFileOutputDelimited_12 = 0;

												String fileName_tFileOutputDelimited_12 = "";
												fileName_tFileOutputDelimited_12 = (new java.io.File(
														((String) globalMap
																.get("tCreateTemporaryFile_17_FILEPATH"))))
														.getAbsolutePath()
														.replace("\\", "/");
												String fullName_tFileOutputDelimited_12 = null;
												String extension_tFileOutputDelimited_12 = null;
												String directory_tFileOutputDelimited_12 = null;
												if ((fileName_tFileOutputDelimited_12
														.indexOf("/") != -1)) {
													if (fileName_tFileOutputDelimited_12
															.lastIndexOf(".") < fileName_tFileOutputDelimited_12
															.lastIndexOf("/")) {
														fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12;
														extension_tFileOutputDelimited_12 = "";
													} else {
														fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12
																.substring(
																		0,
																		fileName_tFileOutputDelimited_12
																				.lastIndexOf("."));
														extension_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12
																.substring(fileName_tFileOutputDelimited_12
																		.lastIndexOf("."));
													}
													directory_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12
															.substring(
																	0,
																	fileName_tFileOutputDelimited_12
																			.lastIndexOf("/"));
												} else {
													if (fileName_tFileOutputDelimited_12
															.lastIndexOf(".") != -1) {
														fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12
																.substring(
																		0,
																		fileName_tFileOutputDelimited_12
																				.lastIndexOf("."));
														extension_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12
																.substring(fileName_tFileOutputDelimited_12
																		.lastIndexOf("."));
													} else {
														fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12;
														extension_tFileOutputDelimited_12 = "";
													}
													directory_tFileOutputDelimited_12 = "";
												}
												boolean isFileGenerated_tFileOutputDelimited_12 = true;
												java.io.File filetFileOutputDelimited_12 = new java.io.File(
														fileName_tFileOutputDelimited_12);
												globalMap
														.put("tFileOutputDelimited_12_FILE_NAME",
																fileName_tFileOutputDelimited_12);
												if (filetFileOutputDelimited_12
														.exists()) {
													isFileGenerated_tFileOutputDelimited_12 = false;
												}

												int nb_line_tFileOutputDelimited_12 = 0;
												int splitEvery_tFileOutputDelimited_12 = 1000;
												int splitedFileNo_tFileOutputDelimited_12 = 0;
												int currentRow_tFileOutputDelimited_12 = 0;

												final String OUT_DELIM_tFileOutputDelimited_12 = /**
												 * 
												 * Start field
												 * tFileOutputDelimited_12
												 * :FIELDSEPARATOR
												 */
												"\t"/**
												 * End field
												 * tFileOutputDelimited_12
												 * :FIELDSEPARATOR
												 */
												;

												final String OUT_DELIM_ROWSEP_tFileOutputDelimited_12 = /**
												 * 
												 * Start field
												 * tFileOutputDelimited_12
												 * :ROWSEPARATOR
												 */
												"\n"/**
												 * End field
												 * tFileOutputDelimited_12
												 * :ROWSEPARATOR
												 */
												;

												// create directory only if not
												// exists
												if (directory_tFileOutputDelimited_12 != null
														&& directory_tFileOutputDelimited_12
																.trim()
																.length() != 0) {
													java.io.File dir_tFileOutputDelimited_12 = new java.io.File(
															directory_tFileOutputDelimited_12);
													if (!dir_tFileOutputDelimited_12
															.exists()) {
														dir_tFileOutputDelimited_12
																.mkdirs();
													}
												}

												// routines.system.Row
												java.io.Writer outtFileOutputDelimited_12 = null;
												try {
													outtFileOutputDelimited_12 = new java.io.BufferedWriter(
															new java.io.OutputStreamWriter(
																	new java.io.FileOutputStream(
																			fileName_tFileOutputDelimited_12,
																			true),
																	"ISO-8859-15"));

													/**
													 * [tFileOutputDelimited_12
													 * begin ] stop
													 */

													/**
													 * [tLogRow_5 begin ] start
													 */

													ok_Hash.put("tLogRow_5",
															false);
													start_Hash
															.put("tLogRow_5",
																	System.currentTimeMillis());
													currentComponent = "tLogRow_5";

													int tos_count_tLogRow_5 = 0;

													/**
													 * [tLogRow_5 begin ] stop
													 */

													/**
													 * [tUniqRow_3 begin ] start
													 */

													ok_Hash.put("tUniqRow_3",
															false);
													start_Hash
															.put("tUniqRow_3",
																	System.currentTimeMillis());
													currentComponent = "tUniqRow_3";

													int tos_count_tUniqRow_3 = 0;

													class KeyStruct_tUniqRow_3 {

														private static final int DEFAULT_HASHCODE = 1;
														private static final int PRIME = 31;
														private int hashCode = DEFAULT_HASHCODE;
														public boolean hashCodeDirty = true;

														String EncounterNum;

														@Override
														public int hashCode() {
															if (this.hashCodeDirty) {
																final int prime = PRIME;
																int result = DEFAULT_HASHCODE;

																result = prime
																		* result
																		+ ((this.EncounterNum == null) ? 0
																				: this.EncounterNum
																						.hashCode());

																this.hashCode = result;
																this.hashCodeDirty = false;
															}
															return this.hashCode;
														}

														@Override
														public boolean equals(
																Object obj) {
															if (this == obj)
																return true;
															if (obj == null)
																return false;
															if (getClass() != obj
																	.getClass())
																return false;
															final KeyStruct_tUniqRow_3 other = (KeyStruct_tUniqRow_3) obj;

															if (this.EncounterNum == null) {
																if (other.EncounterNum != null)
																	return false;
															} else if (!this.EncounterNum
																	.equals(other.EncounterNum))
																return false;

															return true;
														}

													}

													int nb_uniques_tUniqRow_3 = 0;
													int nb_duplicates_tUniqRow_3 = 0;
													KeyStruct_tUniqRow_3 finder_tUniqRow_3 = new KeyStruct_tUniqRow_3();
													java.util.Set<KeyStruct_tUniqRow_3> keystUniqRow_3 = new java.util.HashSet<KeyStruct_tUniqRow_3>();

													/**
													 * [tUniqRow_3 begin ] stop
													 */

													/**
													 * [tMap_1 begin ] start
													 */

													ok_Hash.put("tMap_1", false);
													start_Hash
															.put("tMap_1",
																	System.currentTimeMillis());
													currentComponent = "tMap_1";

													int tos_count_tMap_1 = 0;

													// ###############################
													// # Lookup's keys
													// initialization
													// ###############################

													// ###############################
													// # Vars initialization
													class Var__tMap_1__Struct {
														boolean var1;
														boolean var2;
														boolean var3;
														boolean var4;
													}
													Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
													// ###############################

													// ###############################
													// # Outputs initialization
													toTempStruct toTemp_tmp = new toTempStruct();
													fromPatientStruct fromPatient_tmp = new fromPatientStruct();
													toEncNumStruct toEncNum_tmp = new toEncNumStruct();
													// ###############################

													/**
													 * [tMap_1 begin ] stop
													 */

													/**
													 * [tJavaRow_9 begin ] start
													 */

													ok_Hash.put("tJavaRow_9",
															false);
													start_Hash
															.put("tJavaRow_9",
																	System.currentTimeMillis());
													currentComponent = "tJavaRow_9";

													int tos_count_tJavaRow_9 = 0;

													int nb_line_tJavaRow_9 = 0;

													/**
													 * [tJavaRow_9 begin ] stop
													 */

													/**
													 * [tFileInputXML_2 begin ]
													 * start
													 */

													ok_Hash.put(
															"tFileInputXML_2",
															false);
													start_Hash
															.put("tFileInputXML_2",
																	System.currentTimeMillis());
													currentComponent = "tFileInputXML_2";

													int tos_count_tFileInputXML_2 = 0;

													int nb_line_tFileInputXML_2 = 0;

													String os_tFileInputXML_2 = System
															.getProperty(
																	"os.name")
															.toLowerCase();
													boolean isWindows_tFileInputXML_2 = false;
													if (os_tFileInputXML_2
															.indexOf("windows") > -1
															|| os_tFileInputXML_2
																	.indexOf("nt") > -1) {
														isWindows_tFileInputXML_2 = true;
													}
													class XML_API_tFileInputXML_2 {
														public boolean isDefNull(
																String[] node)
																throws javax.xml.transform.TransformerException {
															if (node[0] != null
																	&& node[1] != null
																	&& ("true")
																			.equals(node[1])) {
																return true;
															}
															return false;
														}

														public boolean isMissing(
																String[] node)
																throws javax.xml.transform.TransformerException {
															return node[0] == null ? true
																	: false;
														}

														public boolean isEmpty(
																String[] node)
																throws javax.xml.transform.TransformerException {
															if (node[0] != null) {
																return node[0]
																		.length() == 0;
															}
															return false;
														}
													}
													XML_API_tFileInputXML_2 xml_api_tFileInputXML_2 = new XML_API_tFileInputXML_2();

													String[] queryPaths_tFileInputXML_2 = new String[] {
															"@ItemOID",
															".",
															"." + "/@xsi:nil",
															"@ItemGroupOID",
															"@FormOID",
															"@SubjectKey",
															"@StudyEventOID",
															"@StudyEventRepeatKey",
															"@FormRepeatKey",
															"@ItemGroupRepeatKey",
															"@MetaDataVersionOID",
															"@TransactionType",
															"@IsNull" };

													boolean[] asXMLs_tFileInputXML_2 = new boolean[] {
															false, false,
															false, false,
															false, false,
															false, false,
															false, false,
															false, false, false };

													String str_tFileInputXML_2 = "";
													String[] node_tFileInputXML_2 = null;
													org.talend.xml.sax.SAXLooper looper_tFileInputXML_2 = new org.talend.xml.sax.SAXLooper(
															((String) globalMap
																	.get("tForeach_1_CURRENT_VALUE")),
															queryPaths_tFileInputXML_2,
															asXMLs_tFileInputXML_2);
													looper_tFileInputXML_2
															.setEncoding("UTF-8");
													Object filename_tFileInputXML_2 = null;
													try {
														filename_tFileInputXML_2 = context.folderMain
																+ context.folderOutput
																+ "Only_PD.xml";
													} catch (java.lang.Exception e) {

														System.err.println(e
																.getMessage());

													}
													if (filename_tFileInputXML_2 != null
															&& filename_tFileInputXML_2 instanceof String
															&& filename_tFileInputXML_2
																	.toString()
																	.startsWith(
																			"//")) {
														if (!isWindows_tFileInputXML_2) {
															filename_tFileInputXML_2 = filename_tFileInputXML_2
																	.toString()
																	.replaceFirst(
																			"//",
																			"/");
														}
													}
													if (filename_tFileInputXML_2 instanceof java.io.InputStream) {
														looper_tFileInputXML_2
																.parse((java.io.InputStream) filename_tFileInputXML_2);
													} else {
														looper_tFileInputXML_2
																.parse(String
																		.valueOf(filename_tFileInputXML_2));
													}
													java.util.Iterator<java.util.Map<String, String>> it_tFileInputXML_2 = looper_tFileInputXML_2
															.iterator();
													while (it_tFileInputXML_2
															.hasNext()) {
														java.util.Map<String, String> row_tFileInputXML_2 = it_tFileInputXML_2
																.next();
														nb_line_tFileInputXML_2++;
														row1 = null;
														boolean whetherReject_tFileInputXML_2 = false;
														row1 = new row1Struct();
														try {
															str_tFileInputXML_2 = row_tFileInputXML_2
																	.get("@ItemOID");
															node_tFileInputXML_2 = new String[] {
																	str_tFileInputXML_2,
																	null };
															if (xml_api_tFileInputXML_2
																	.isDefNull(node_tFileInputXML_2)) {
																row1.itemID = null;
															} else if (xml_api_tFileInputXML_2
																	.isEmpty(node_tFileInputXML_2)) {
																row1.itemID = "";
															} else if (xml_api_tFileInputXML_2
																	.isMissing(node_tFileInputXML_2)) {
																row1.itemID = null;
															} else {
																row1.itemID = str_tFileInputXML_2;
															}
															str_tFileInputXML_2 = row_tFileInputXML_2
																	.get(".");
															node_tFileInputXML_2 = new String[] {
																	str_tFileInputXML_2,
																	row_tFileInputXML_2
																			.get("."
																					+ "/@xsi:nil") };
															if (xml_api_tFileInputXML_2
																	.isDefNull(node_tFileInputXML_2)) {
																row1.Value = null;
															} else if (xml_api_tFileInputXML_2
																	.isEmpty(node_tFileInputXML_2)) {
																row1.Value = "";
															} else if (xml_api_tFileInputXML_2
																	.isMissing(node_tFileInputXML_2)) {
																row1.Value = null;
															} else {
																row1.Value = str_tFileInputXML_2;
															}
															str_tFileInputXML_2 = row_tFileInputXML_2
																	.get("@ItemGroupOID");
															node_tFileInputXML_2 = new String[] {
																	str_tFileInputXML_2,
																	null };
															if (xml_api_tFileInputXML_2
																	.isDefNull(node_tFileInputXML_2)) {
																row1.itemGroupOID = null;
															} else if (xml_api_tFileInputXML_2
																	.isEmpty(node_tFileInputXML_2)) {
																row1.itemGroupOID = "";
															} else if (xml_api_tFileInputXML_2
																	.isMissing(node_tFileInputXML_2)) {
																row1.itemGroupOID = null;
															} else {
																row1.itemGroupOID = str_tFileInputXML_2;
															}
															str_tFileInputXML_2 = row_tFileInputXML_2
																	.get("@FormOID");
															node_tFileInputXML_2 = new String[] {
																	str_tFileInputXML_2,
																	null };
															if (xml_api_tFileInputXML_2
																	.isDefNull(node_tFileInputXML_2)) {
																row1.FormID = null;
															} else if (xml_api_tFileInputXML_2
																	.isEmpty(node_tFileInputXML_2)) {
																row1.FormID = "";
															} else if (xml_api_tFileInputXML_2
																	.isMissing(node_tFileInputXML_2)) {
																row1.FormID = null;
															} else {
																row1.FormID = str_tFileInputXML_2;
															}
															str_tFileInputXML_2 = row_tFileInputXML_2
																	.get("@SubjectKey");
															node_tFileInputXML_2 = new String[] {
																	str_tFileInputXML_2,
																	null };
															if (xml_api_tFileInputXML_2
																	.isDefNull(node_tFileInputXML_2)) {
																row1.SubjectKey = null;
															} else if (xml_api_tFileInputXML_2
																	.isEmpty(node_tFileInputXML_2)) {
																row1.SubjectKey = "";
															} else if (xml_api_tFileInputXML_2
																	.isMissing(node_tFileInputXML_2)) {
																row1.SubjectKey = null;
															} else {
																row1.SubjectKey = str_tFileInputXML_2;
															}
															str_tFileInputXML_2 = row_tFileInputXML_2
																	.get("@StudyEventOID");
															node_tFileInputXML_2 = new String[] {
																	str_tFileInputXML_2,
																	null };
															if (xml_api_tFileInputXML_2
																	.isDefNull(node_tFileInputXML_2)) {
																row1.VisitID = null;
															} else if (xml_api_tFileInputXML_2
																	.isEmpty(node_tFileInputXML_2)) {
																row1.VisitID = "";
															} else if (xml_api_tFileInputXML_2
																	.isMissing(node_tFileInputXML_2)) {
																row1.VisitID = null;
															} else {
																row1.VisitID = str_tFileInputXML_2;
															}
															str_tFileInputXML_2 = row_tFileInputXML_2
																	.get("@StudyEventRepeatKey");
															node_tFileInputXML_2 = new String[] {
																	str_tFileInputXML_2,
																	null };
															if (xml_api_tFileInputXML_2
																	.isDefNull(node_tFileInputXML_2)) {
																row1.StudyEventRepeatKey = null;
															} else if (xml_api_tFileInputXML_2
																	.isEmpty(node_tFileInputXML_2)) {
																row1.StudyEventRepeatKey = "";
															} else if (xml_api_tFileInputXML_2
																	.isMissing(node_tFileInputXML_2)) {
																row1.StudyEventRepeatKey = null;
															} else {
																row1.StudyEventRepeatKey = str_tFileInputXML_2;
															}
															str_tFileInputXML_2 = row_tFileInputXML_2
																	.get("@FormRepeatKey");
															node_tFileInputXML_2 = new String[] {
																	str_tFileInputXML_2,
																	null };
															if (xml_api_tFileInputXML_2
																	.isDefNull(node_tFileInputXML_2)) {
																row1.FormRepeatKey = null;
															} else if (xml_api_tFileInputXML_2
																	.isEmpty(node_tFileInputXML_2)) {
																row1.FormRepeatKey = "";
															} else if (xml_api_tFileInputXML_2
																	.isMissing(node_tFileInputXML_2)) {
																row1.FormRepeatKey = null;
															} else {
																row1.FormRepeatKey = str_tFileInputXML_2;
															}
															str_tFileInputXML_2 = row_tFileInputXML_2
																	.get("@ItemGroupRepeatKey");
															node_tFileInputXML_2 = new String[] {
																	str_tFileInputXML_2,
																	null };
															if (xml_api_tFileInputXML_2
																	.isDefNull(node_tFileInputXML_2)) {
																row1.ItemGroupRepeatKey = null;
															} else if (xml_api_tFileInputXML_2
																	.isEmpty(node_tFileInputXML_2)) {
																row1.ItemGroupRepeatKey = "";
															} else if (xml_api_tFileInputXML_2
																	.isMissing(node_tFileInputXML_2)) {
																row1.ItemGroupRepeatKey = null;
															} else {
																row1.ItemGroupRepeatKey = str_tFileInputXML_2;
															}
															str_tFileInputXML_2 = row_tFileInputXML_2
																	.get("@MetaDataVersionOID");
															node_tFileInputXML_2 = new String[] {
																	str_tFileInputXML_2,
																	null };
															if (xml_api_tFileInputXML_2
																	.isDefNull(node_tFileInputXML_2)) {
																row1.MetaDataVersionOID = null;
															} else if (xml_api_tFileInputXML_2
																	.isEmpty(node_tFileInputXML_2)) {
																row1.MetaDataVersionOID = "";
															} else if (xml_api_tFileInputXML_2
																	.isMissing(node_tFileInputXML_2)) {
																row1.MetaDataVersionOID = null;
															} else {
																row1.MetaDataVersionOID = str_tFileInputXML_2;
															}
															str_tFileInputXML_2 = row_tFileInputXML_2
																	.get("@TransactionType");
															node_tFileInputXML_2 = new String[] {
																	str_tFileInputXML_2,
																	null };
															if (xml_api_tFileInputXML_2
																	.isDefNull(node_tFileInputXML_2)) {
																row1.TransactionType = null;
															} else if (xml_api_tFileInputXML_2
																	.isEmpty(node_tFileInputXML_2)) {
																row1.TransactionType = "";
															} else if (xml_api_tFileInputXML_2
																	.isMissing(node_tFileInputXML_2)) {
																row1.TransactionType = null;
															} else {
																row1.TransactionType = str_tFileInputXML_2;
															}
															str_tFileInputXML_2 = row_tFileInputXML_2
																	.get("@IsNull");
															node_tFileInputXML_2 = new String[] {
																	str_tFileInputXML_2,
																	null };
															if (xml_api_tFileInputXML_2
																	.isDefNull(node_tFileInputXML_2)) {
																row1.IsNull = null;
															} else if (xml_api_tFileInputXML_2
																	.isEmpty(node_tFileInputXML_2)) {
																row1.IsNull = "";
															} else if (xml_api_tFileInputXML_2
																	.isMissing(node_tFileInputXML_2)) {
																row1.IsNull = null;
															} else {
																row1.IsNull = str_tFileInputXML_2;
															}

														} catch (java.lang.Exception e) {
															whetherReject_tFileInputXML_2 = true;
															System.err
																	.println(e
																			.getMessage());
															row1 = null;
														}

														/**
														 * [tFileInputXML_2
														 * begin ] stop
														 */
														/**
														 * [tFileInputXML_2 main
														 * ] start
														 */

														currentComponent = "tFileInputXML_2";

														tos_count_tFileInputXML_2++;

														/**
														 * [tFileInputXML_2 main
														 * ] stop
														 */
														// Start of branch
														// "row1"
														if (row1 != null) {

															/**
															 * [tJavaRow_9 main
															 * ] start
															 */

															currentComponent = "tJavaRow_9";

															// Code generated
															// according to
															// input schema and
															// output schema
															row27.itemID = row1.itemID;
															row27.Value = row1.Value
																	.replaceAll(
																			"\\\\",
																			"/");
															row27.itemGroupOID = row1.itemGroupOID;
															row27.FormID = row1.FormID;
															row27.SubjectKey = row1.SubjectKey;
															row27.VisitID = row1.VisitID;
															row27.MetaDataVersionOID = row1.MetaDataVersionOID;
															row27.TransactionType = row1.TransactionType;
															row27.IsNull = row1.IsNull;
															if (row1.FormRepeatKey != null
																	&& row1.FormRepeatKey
																			.length() > 0)
																row27.FormRepeatKey = row1.FormRepeatKey;
															else
																row27.FormRepeatKey = "0";

															if (row1.StudyEventRepeatKey != null
																	&& row1.StudyEventRepeatKey
																			.length() > 0)
																row27.StudyEventRepeatKey = row1.StudyEventRepeatKey;
															else
																row27.StudyEventRepeatKey = "0";

															if (row1.ItemGroupRepeatKey != null
																	&& row1.ItemGroupRepeatKey
																			.length() > 0)
																row27.ItemGroupRepeatKey = row1.ItemGroupRepeatKey;
															else
																row27.ItemGroupRepeatKey = "0";

															nb_line_tJavaRow_9++;

															tos_count_tJavaRow_9++;

															/**
															 * [tJavaRow_9 main
															 * ] stop
															 */

															/**
															 * [tMap_1 main ]
															 * start
															 */

															currentComponent = "tMap_1";

															boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

															// ###############################
															// # Input tables
															// (lookups)
															boolean rejectedInnerJoin_tMap_1 = false;
															boolean mainRowRejected_tMap_1 = false;

															if (

															(

															!row27.IsNull
																	.equals("Yes")

															)

															) { // G_TM_M_280

																// CALL close
																// main tMap
																// filter for
																// table 'row27'
																// ###############################
																{ // start of
																	// Var scope

																	// ###############################
																	// # Vars
																	// tables

																	Var__tMap_1__Struct Var = Var__tMap_1;
																	Var.var1 = row27.itemID
																			.equals(context.subjid);
																	Var.var2 = row27.TransactionType
																			.equals("Insert")
																			|| row27.TransactionType
																					.isEmpty();
																	Var.var3 = row27.TransactionType
																			.equals("Update");
																	Var.var4 = row27.itemID
																			.equals(context.encounterItem);// ###############################
																	// ###############################
																	// # Output
																	// tables

																	toTemp = null;
																	fromPatient = null;
																	toEncNum = null;

																	// # Output
																	// table :
																	// 'toTemp'
																	// # Filter
																	// conditions
																	if (

																	Var.var1

																	) {
																		toTemp_tmp.PID = row27.Value;
																		toTemp_tmp.SubjectKey = row27.SubjectKey;
																		toTemp = toTemp_tmp;
																	} // closing
																		// filter/reject

																	// # Output
																	// table :
																	// 'fromPatient'
																	// # Filter
																	// conditions
																	if (

																	(context.includePids || !Var.var1)
																			&& Var.var2

																	) {
																		fromPatient_tmp.itemID = row27.itemID;
																		fromPatient_tmp.Value = StringHandling
																				.EREPLACE(
																						row27.Value,
																						"\n",
																						" ");
																		fromPatient_tmp.itemGroupOID = row27.itemGroupOID;
																		fromPatient_tmp.VisitID = row27.VisitID;
																		fromPatient_tmp.FormID = row27.FormID;
																		fromPatient_tmp.SubjectKey = row27.SubjectKey;
																		fromPatient_tmp.DataType = null;
																		fromPatient_tmp.StudyEventRepeatKey = row27.StudyEventRepeatKey;
																		fromPatient_tmp.FormRepeatKey = row27.FormRepeatKey;
																		fromPatient_tmp.ItemGroupRepeatKey = row27.ItemGroupRepeatKey;
																		fromPatient_tmp.MetaDataVersionOID = row27.MetaDataVersionOID;
																		fromPatient = fromPatient_tmp;
																	} // closing
																		// filter/reject

																	// # Output
																	// table :
																	// 'toEncNum'
																	// # Filter
																	// conditions
																	if (

																	Var.var4

																	) {
																		toEncNum_tmp.PatientID = row27.SubjectKey;
																		toEncNum_tmp.EncounterNum = row27.Value;
																		toEncNum_tmp.VisitID = row27.VisitID;
																		toEncNum = toEncNum_tmp;
																	} // closing
																		// filter/reject
																		// ###############################

																} // end of Var
																	// scope

																rejectedInnerJoin_tMap_1 = false;

																tos_count_tMap_1++;

																/**
																 * [tMap_1 main
																 * ] stop
																 */
																// Start of
																// branch
																// "toTemp"
																if (toTemp != null) {

																	/**
																	 * [
																	 * tUniqRow_1
																	 * main ]
																	 * start
																	 */

																	currentComponent = "tUniqRow_1";

																	row2 = null;
																	if (toTemp.SubjectKey == null) {
																		finder_tUniqRow_1.SubjectKey = null;
																	} else {
																		finder_tUniqRow_1.SubjectKey = toTemp.SubjectKey
																				.toLowerCase();
																	}
																	finder_tUniqRow_1.hashCodeDirty = true;
																	if (!keystUniqRow_1
																			.contains(finder_tUniqRow_1)) {
																		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

																		if (toTemp.SubjectKey == null) {
																			new_tUniqRow_1.SubjectKey = null;
																		} else {
																			new_tUniqRow_1.SubjectKey = toTemp.SubjectKey
																					.toLowerCase();
																		}

																		keystUniqRow_1
																				.add(new_tUniqRow_1);
																		if (row2 == null) {
																			row2 = new row2Struct();
																		}
																		row2.PID = toTemp.PID;
																		row2.SubjectKey = toTemp.SubjectKey;
																		nb_uniques_tUniqRow_1++;
																	} else {
																		nb_duplicates_tUniqRow_1++;
																	}

																	tos_count_tUniqRow_1++;

																	/**
																	 * [
																	 * tUniqRow_1
																	 * main ]
																	 * stop
																	 */
																	// Start of
																	// branch
																	// "row2"
																	if (row2 != null) {

																		/**
																		 * [
																		 * tFileOutputDelimited_2
																		 * main
																		 * ]
																		 * start
																		 */

																		currentComponent = "tFileOutputDelimited_2";

																		StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();

																		if (row2.PID != null) {

																			sb_tFileOutputDelimited_2
																					.append(

																					row2.PID

																					);

																		}

																		sb_tFileOutputDelimited_2
																				.append(OUT_DELIM_tFileOutputDelimited_2);

																		if (row2.SubjectKey != null) {

																			sb_tFileOutputDelimited_2
																					.append(

																					row2.SubjectKey

																					);

																		}

																		sb_tFileOutputDelimited_2
																				.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

																		nb_line_tFileOutputDelimited_2++;

																		outtFileOutputDelimited_2
																				.write(sb_tFileOutputDelimited_2
																						.toString());

																		tos_count_tFileOutputDelimited_2++;

																		/**
																		 * [
																		 * tFileOutputDelimited_2
																		 * main
																		 * ]
																		 * stop
																		 */

																	} // End of
																		// branch
																		// "row2"

																} // End of
																	// branch
																	// "toTemp"

																// Start of
																// branch
																// "fromPatient"
																if (fromPatient != null) {

																	/**
																	 * [tMap_2
																	 * main ]
																	 * start
																	 */

																	currentComponent = "tMap_2";

																	boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

																	// ###############################
																	// # Input
																	// tables
																	// (lookups)
																	boolean rejectedInnerJoin_tMap_2 = false;
																	boolean mainRowRejected_tMap_2 = false;

																	// /////////////////////////////////////////////
																	// Starting
																	// Lookup
																	// Table
																	// "fromOnt"
																	// /////////////////////////////////////////////

																	boolean forceLoopfromOnt = false;

																	fromOntStruct fromOntObjectFromLookup = null;

																	if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

																		hasCasePrimitiveKeyWithNull_tMap_2 = false;

																		fromOntHashKey.PathID = fromPatient.MetaDataVersionOID
																				+ "|"
																				+ fromPatient.VisitID
																				+ "|"
																				+ fromPatient.FormID
																				+ "|"
																				+ fromPatient.itemGroupOID
																				+ "|"
																				+ fromPatient.itemID;

																		fromOntHashKey.hashCodeDirty = true;

																		tHash_Lookup_fromOnt
																				.lookup(fromOntHashKey);

																	} // G_TM_M_020

																	if (tHash_Lookup_fromOnt != null
																			&& tHash_Lookup_fromOnt
																					.getCount(fromOntHashKey) > 1) { // G
																														// 071

																		// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'fromOnt' and it contains more one result from keys :  fromOnt.PathID = '"
																		// +
																		// fromOntHashKey.PathID
																		// +
																		// "'");
																	} // G 071

																	fromOntStruct fromOnt = null;

																	fromOntStruct fromLookup_fromOnt = null;
																	fromOnt = fromOntDefault;

																	if (tHash_Lookup_fromOnt != null
																			&& tHash_Lookup_fromOnt
																					.hasNext()) { // G
																									// 099

																		fromLookup_fromOnt = tHash_Lookup_fromOnt
																				.next();

																	} // G 099

																	if (fromLookup_fromOnt != null) {
																		fromOnt = fromLookup_fromOnt;
																	}

																	// /////////////////////////////////////////////
																	// Starting
																	// Lookup
																	// Table
																	// "fromCode"
																	// /////////////////////////////////////////////

																	boolean forceLoopfromCode = false;

																	fromCodeStruct fromCodeObjectFromLookup = null;

																	if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

																		hasCasePrimitiveKeyWithNull_tMap_2 = false;

																		fromCodeHashKey.ItemGroupOID = fromPatient.itemID;

																		fromCodeHashKey.hashCodeDirty = true;

																		tHash_Lookup_fromCode
																				.lookup(fromCodeHashKey);

																	} // G_TM_M_020

																	if (tHash_Lookup_fromCode != null
																			&& tHash_Lookup_fromCode
																					.getCount(fromCodeHashKey) > 1) { // G
																														// 071

																		// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'fromCode' and it contains more one result from keys :  fromCode.ItemGroupOID = '"
																		// +
																		// fromCodeHashKey.ItemGroupOID
																		// +
																		// "'");
																	} // G 071

																	fromCodeStruct fromCode = null;

																	fromCodeStruct fromLookup_fromCode = null;
																	fromCode = fromCodeDefault;

																	if (tHash_Lookup_fromCode != null
																			&& tHash_Lookup_fromCode
																					.hasNext()) { // G
																									// 099

																		fromLookup_fromCode = tHash_Lookup_fromCode
																				.next();

																	} // G 099

																	if (fromLookup_fromCode != null) {
																		fromCode = fromLookup_fromCode;
																	}

																	// ###############################
																	{ // start
																		// of
																		// Var
																		// scope

																		// ###############################
																		// #
																		// Vars
																		// tables

																		Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
																		// ###############################
																		// #
																		// Output
																		// tables

																		out2 = null;

																		// #
																		// Output
																		// table
																		// :
																		// 'out2'
																		// #
																		// Filter
																		// conditions
																		if (

																		fromOnt.DataType != null

																		) {
																			out2_tmp.HLEVEL = fromOnt.HLEVEL;
																			out2_tmp.itemID = fromPatient.itemID;
																			out2_tmp.Value = fromPatient.Value;
																			out2_tmp.VisitID = fromPatient.VisitID;
																			out2_tmp.FormID = fromPatient.FormID;
																			out2_tmp.SubjectKey = fromPatient.SubjectKey;
																			out2_tmp.Path = fromOnt.Path;
																			out2_tmp.PathID = fromOnt.PathID;
																			out2_tmp.DataType = fromCode.Datatype != null ? fromCode.Datatype
																					: fromOnt.DataType;
																			out2_tmp.Update_Date = fromOnt.Update_Date;
																			out2_tmp.Import_Date = fromOnt.Import_Date;
																			out2_tmp.Download_Date = fromOnt.Download_Date;
																			out2_tmp.StudyEventRepeatKey = fromPatient.StudyEventRepeatKey;
																			out2_tmp.FormRepeatKey = fromPatient.FormRepeatKey;
																			out2_tmp.ItemGroupRepeatKey = fromPatient.ItemGroupRepeatKey;
																			out2_tmp.itemCode = fromCode.OID;
																			out2_tmp.name = fromOnt.Name;
																			out2_tmp.m_applied_path = fromOnt.m_applied_path;
																			out2_tmp.mod_path = fromOnt.Path;
																			out2 = out2_tmp;
																		} // closing
																			// filter/reject
																			// ###############################

																	} // end of
																		// Var
																		// scope

																	rejectedInnerJoin_tMap_2 = false;

																	tos_count_tMap_2++;

																	/**
																	 * [tMap_2
																	 * main ]
																	 * stop
																	 */
																	// Start of
																	// branch
																	// "out2"
																	if (out2 != null) {

																		/**
																		 * [
																		 * tLogRow_3
																		 * main
																		 * ]
																		 * start
																		 */

																		currentComponent = "tLogRow_3";

																		row26 = out2;

																		tos_count_tLogRow_3++;

																		/**
																		 * [
																		 * tLogRow_3
																		 * main
																		 * ]
																		 * stop
																		 */

																		/**
																		 * [
																		 * tJavaRow_2
																		 * main
																		 * ]
																		 * start
																		 */

																		currentComponent = "tJavaRow_2";

																		// Code
																		// generated
																		// according
																		// to
																		// input
																		// schema
																		// and
																		// output
																		// schema
																		row5.HLEVEL = row26.HLEVEL;
																		// Code
																		// generated
																		// according
																		// to
																		// input
																		// schema
																		// and
																		// output
																		// schema
																		row5.itemID = row26.itemID;
																		row5.Value = row26.Value;
																		row5.VisitID = row26.VisitID;
																		row5.FormID = row26.FormID;
																		row5.SubjectKey = row26.SubjectKey;
																		row5.Path = row26.Path
																				+ row26.Value
																				+ "\\";
																		row5.mod_item = ""
																				+ row26.Value;
																		row5.FormRepeatKey = row26.FormRepeatKey;
																		if (row26.DataType
																				.length() < 1) {
																			row26.DataType = "string";
																		}
																		if (row26.itemCode == null) {
																			row26.itemCode = "";
																		}
																		if (row26.itemCode
																				.length() < 1) {
																			// if
																			// (row26.itemCode
																			// ==
																			// null){
																			if (row26.DataType
																					.equalsIgnoreCase("string")) {
																				String hash = row26.Path
																						+ row26.Value;
																				row5.Path = row26.Path
																						+ hash.hashCode()
																						+ "\\";
																				row5.mod_item = ""
																						+ hash.hashCode();
																				if (row26.Value
																						.length() < 20) {
																					row5.Path = row26.Path
																							+ row26.Value
																							+ "\\";
																					row5.mod_item = ""
																							+ row26.Value;
																				}

																			} else if (row26.DataType
																					.equalsIgnoreCase("float")) {
																				row5.Path = row26.Path
																						+ "xml\\";
																				row5.mod_item = "xml";
																			} else if (row26.DataType
																					.equalsIgnoreCase("integer")) {
																				row5.Path = row26.Path
																						+ "xml\\";
																				row5.mod_item = "xml";
																			} else if (row26.DataType
																					.toLowerCase()
																					.contains(
																							"date")) {
																				row5.Path = row26.Path
																						+ "date\\";
																				row5.mod_item = "date";
																			}

																			// else
																			// if
																			// (row26.DataType.toLowerCase().trim().equals("date")||row26.DataType.toLowerCase().trim().equals("partialDate"))
																			// row5.Path
																			// =
																			// row26.Path
																			// +
																			// "date\\";
																			else {
																				String hash = row26.Path
																						+ row26.Value;
																				row5.Path = row26.Path
																						+ hash.hashCode()
																						+ "\\";
																				row5.mod_item = ""
																						+ hash.hashCode();
																			}
																		} else {
																			// if
																			// (row26.DataType.equalsIgnoreCase("string")){
																			String hash = row26.Path
																					+ row26.Value;
																			row5.Path = row26.Path
																					+ hash.hashCode()
																					+ "\\";
																			row5.mod_item = ""
																					+ hash.hashCode();
																			if (row26.Value
																					.length() < 20) {
																				row5.Path = row26.Path
																						+ row26.Value
																						+ "\\";
																				row5.mod_item = row26.Value;
																			} else {
																				hash = row26.Path
																						+ row26.Value;
																				row5.Path = row26.Path
																						+ hash.hashCode()
																						+ "\\";
																				row5.mod_item = ""
																						+ hash.hashCode();
																			}
																			// }
																		}

																		row5.PathID = row26.PathID;
																		row5.DataType = row26.DataType;
																		row5.Update_Date = row26.Update_Date;
																		row5.Import_Date = row26.Import_Date;
																		row5.Download_Date = row26.Download_Date;
																		// TODO
																		row5.StudyEventRepeatKey = row26.StudyEventRepeatKey;
																		if (row26.ItemGroupRepeatKey != null)
																			row5.ItemGroupRepeatKey = row26.ItemGroupRepeatKey;
																		else
																			row5.ItemGroupRepeatKey = "0";
																		row5.itemCode = row26.itemCode;

																		row5.name = row26.name;

																		row5.m_applied_path = row26.m_applied_path;

																		row5.mod_path = row26.mod_path;

																		nb_line_tJavaRow_2++;

																		tos_count_tJavaRow_2++;

																		/**
																		 * [
																		 * tJavaRow_2
																		 * main
																		 * ]
																		 * stop
																		 */

																		/**
																		 * [
																		 * tMap_6
																		 * main
																		 * ]
																		 * start
																		 */

																		currentComponent = "tMap_6";

																		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

																		// ###############################
																		// #
																		// Input
																		// tables
																		// (lookups)
																		boolean rejectedInnerJoin_tMap_6 = false;
																		boolean mainRowRejected_tMap_6 = false;

																		// ###############################
																		{ // start
																			// of
																			// Var
																			// scope

																			// ###############################
																			// #
																			// Vars
																			// tables

																			Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
																			// ###############################
																			// #
																			// Output
																			// tables

																			outt123 = null;
																			out4 = null;

																			// #
																			// Output
																			// table
																			// :
																			// 'outt123'
																			// #
																			// Filter
																			// conditions
																			if (

																			row5.itemCode
																					.length() < 1

																			) {
																				outt123_tmp.HLEVEL = row5.HLEVEL;
																				outt123_tmp.itemID = row5.itemID;
																				outt123_tmp.Value = row5.Value;
																				outt123_tmp.VisitID = row5.VisitID;
																				outt123_tmp.FormID = row5.FormID;
																				outt123_tmp.SubjectKey = row5.SubjectKey;
																				outt123_tmp.Path = row5.Path;
																				outt123_tmp.PathID = row5.PathID;
																				outt123_tmp.DataType = row5.DataType;
																				outt123_tmp.Update_Date = row5.Update_Date;
																				outt123_tmp.Import_Date = row5.Import_Date;
																				outt123_tmp.Download_Date = row5.Download_Date;
																				outt123_tmp.StudyEventRepeatKey = row5.StudyEventRepeatKey;
																				outt123_tmp.FormRepeatKey = row5.FormRepeatKey;
																				outt123_tmp.itemGroupRepeatKey = row5.ItemGroupRepeatKey;
																				outt123_tmp.itemCode = row5.itemCode;
																				outt123_tmp.name = row5.name;
																				outt123_tmp.m_applied_path = row5.m_applied_path;
																				outt123_tmp.mod_path = row5.mod_path;
																				outt123_tmp.mod_item = row5.mod_item;
																				outt123 = outt123_tmp;
																			} // closing
																				// filter/reject

																			// #
																			// Output
																			// table
																			// :
																			// 'out4'
																			// #
																			// Filter
																			// conditions
																			if (

																			row5.itemCode
																					.length() > 0

																			) {
																				out4_tmp.HLEVEL = row5.HLEVEL;
																				out4_tmp.itemID = row5.itemID;
																				out4_tmp.Value = row5.Value;
																				out4_tmp.VisitID = row5.VisitID;
																				out4_tmp.FormID = row5.FormID;
																				out4_tmp.SubjectKey = row5.SubjectKey;
																				out4_tmp.Path = row5.Path;
																				out4_tmp.PathID = row5.PathID;
																				out4_tmp.DataType = row5.DataType;
																				out4_tmp.Update_Date = row5.Update_Date;
																				out4_tmp.Import_Date = row5.Import_Date;
																				out4_tmp.Download_Date = row5.Download_Date;
																				out4_tmp.StudyEventRepeatKey = row5.StudyEventRepeatKey;
																				out4_tmp.FormRepeatKey = row5.FormRepeatKey;
																				out4_tmp.itemGroupRepeatKey = row5.ItemGroupRepeatKey;
																				out4_tmp.itemCode = row5.itemCode;
																				out4_tmp.name = row5.name;
																				out4_tmp.m_applied_path = row5.m_applied_path;
																				out4_tmp.mod_path = row5.mod_path;
																				out4_tmp.mod_item = row5.mod_item;
																				out4 = out4_tmp;
																			} // closing
																				// filter/reject
																				// ###############################

																		} // end
																			// of
																			// Var
																			// scope

																		rejectedInnerJoin_tMap_6 = false;

																		tos_count_tMap_6++;

																		/**
																		 * [
																		 * tMap_6
																		 * main
																		 * ]
																		 * stop
																		 */
																		// Start
																		// of
																		// branch
																		// "outt123"
																		if (outt123 != null) {

																			/**
																			 * [
																			 * tMap_4
																			 * main
																			 * ]
																			 * start
																			 */

																			currentComponent = "tMap_4";

																			boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

																			// ###############################
																			// #
																			// Input
																			// tables
																			// (lookups)
																			boolean rejectedInnerJoin_tMap_4 = false;
																			boolean mainRowRejected_tMap_4 = false;

																			// ###############################
																			{ // start
																				// of
																				// Var
																				// scope

																				// ###############################
																				// #
																				// Vars
																				// tables

																				Var__tMap_4__Struct Var = Var__tMap_4;
																				Var.var1 = outt123.DataType
																						.equals("float");
																				Var.var2 = outt123.DataType
																						.equals("integer");
																				Var.var3 = outt123.DataType
																						.toLowerCase()
																						.contains(
																								"date")
																						&& !outt123.DataType
																								.equalsIgnoreCase("durationdatetime");// ###############################
																				// ###############################
																				// #
																				// Output
																				// tables

																				out3 = null;
																				to_ont_xml = null;
																				to_ont = null;
																				out7 = null;

																				// #
																				// Output
																				// table
																				// :
																				// 'out3'
																				out3_tmp.itemID = outt123.itemID;
																				out3_tmp.Value = outt123.Value
																						.replace(
																								";",
																								",");
																				out3_tmp.VisitID = outt123.VisitID;
																				out3_tmp.FormID = outt123.FormID;
																				out3_tmp.SubjectKey = outt123.SubjectKey;
																				out3_tmp.Path = !outt123.m_applied_path
																						.equalsIgnoreCase("@") ? "\\"
																						+ outt123.itemID
																						+ "\\"
																						+ outt123.mod_item
																						+ "\\"
																						: outt123.Path;
																				out3_tmp.PathID = outt123.PathID;
																				out3_tmp.DataType = outt123.DataType;
																				out3_tmp.Update_Date = outt123.Update_Date;
																				out3_tmp.Import_Date = outt123.Import_Date;
																				out3_tmp.Download_Date = outt123.Download_Date;
																				out3_tmp.StudyEventRepeatKey = outt123.StudyEventRepeatKey;
																				out3_tmp.FormRepeatKey = outt123.FormRepeatKey;
																				out3_tmp.itemGroupRepeatKey = outt123.itemGroupRepeatKey;
																				out3_tmp.itemCode = outt123.itemCode;
																				out3_tmp.startDate = (Var.var3 && outt123.Value
																						.length() >= 4) ? outt123.Value
																						: "";
																				out3_tmp.m_applied_path = !outt123.m_applied_path
																						.equalsIgnoreCase("@") ? outt123.m_applied_path
																						: "@";
																				out3_tmp.mod_path = outt123.mod_path;
																				out3_tmp.mod_item = outt123.mod_item;
																				out3 = out3_tmp;

																				// #
																				// Output
																				// table
																				// :
																				// 'to_ont_xml'
																				// #
																				// Filter
																				// conditions
																				if (

																				Var.var1
																						|| Var.var2

																				) {
																					to_ont_xml_tmp.HLEVEL = outt123.HLEVEL + 1;
																					to_ont_xml_tmp.Name = outt123.name
																							+ " (Numerical Query)";
																					to_ont_xml_tmp.Path = !outt123.m_applied_path
																							.equalsIgnoreCase("@") ? "\\"
																							+ outt123.itemID
																							+ "\\"
																							+ outt123.mod_item
																							+ "\\"
																							: outt123.Path;
																					to_ont_xml_tmp.DataType = outt123.DataType;
																					to_ont_xml_tmp.Update_Date = outt123.Update_Date;
																					to_ont_xml_tmp.Import_Date = outt123.Import_Date;
																					to_ont_xml_tmp.Download_Date = outt123.Download_Date;
																					to_ont_xml_tmp.PathID = outt123.PathID;
																					to_ont_xml_tmp.visual = outt123.m_applied_path
																							.equalsIgnoreCase("@") ? "LAE"
																							: "RAE";
																					to_ont_xml_tmp.codeList = "";
																					to_ont_xml_tmp.source = "";
																					to_ont_xml_tmp.xml = "xml";
																					to_ont_xml_tmp.m_applied_path = !outt123.m_applied_path
																							.equalsIgnoreCase("@") ? outt123.m_applied_path
																							: "@";
																					to_ont_xml = to_ont_xml_tmp;
																				} // closing
																					// filter/reject

																				// #
																				// Output
																				// table
																				// :
																				// 'to_ont'
																				// #
																				// Filter
																				// conditions
																				if (

																				!(Var.var2
																						|| Var.var1 || Var.var3)

																				) {
																					to_ont_tmp.HLEVEL = outt123.HLEVEL + 1;
																					to_ont_tmp.Name = outt123.Value
																							.replace(
																									";",
																									",");
																					to_ont_tmp.Path = !outt123.m_applied_path
																							.equalsIgnoreCase("@") ? "\\"
																							+ outt123.itemID
																							+ "\\"
																							+ outt123.mod_item
																							+ "\\"
																							: outt123.Path;
																					to_ont_tmp.DataType = outt123.DataType;
																					to_ont_tmp.Update_Date = outt123.Update_Date;
																					to_ont_tmp.Import_Date = outt123.Import_Date;
																					to_ont_tmp.Download_Date = outt123.Download_Date;
																					to_ont_tmp.PathID = outt123.PathID;
																					to_ont_tmp.visual = outt123.m_applied_path
																							.equalsIgnoreCase("@") ? "LAE"
																							: "RAE";
																					to_ont_tmp.codeList = "";
																					to_ont_tmp.source = "";
																					to_ont_tmp.xml = "";
																					to_ont_tmp.m_applied_path = !outt123.m_applied_path
																							.equalsIgnoreCase("@") ? outt123.m_applied_path
																							: "@";
																					to_ont = to_ont_tmp;
																				} // closing
																					// filter/reject

																				// #
																				// Output
																				// table
																				// :
																				// 'out7'
																				// #
																				// Filter
																				// conditions
																				if (

																				Var.var3

																				) {
																					out7_tmp.HLEVEL = outt123.HLEVEL + 1;
																					out7_tmp.Name = outt123.name
																							+ " (Date)";
																					out7_tmp.Path = !outt123.m_applied_path
																							.equalsIgnoreCase("@") ? "\\"
																							+ outt123.itemID
																							+ "\\"
																							+ outt123.mod_item
																							+ "\\"
																							: outt123.Path;
																					out7_tmp.DataType = outt123.DataType;
																					out7_tmp.Update_Date = outt123.Update_Date;
																					out7_tmp.Import_Date = outt123.Import_Date;
																					out7_tmp.Download_Date = outt123.Download_Date;
																					out7_tmp.PathID = outt123.PathID;
																					out7_tmp.visual = outt123.m_applied_path
																							.equalsIgnoreCase("@") ? "LAE"
																							: "RAE";
																					out7_tmp.codeList = "";
																					out7_tmp.source = "";
																					out7_tmp.xml = "";
																					out7_tmp.m_applied_path = !outt123.m_applied_path
																							.equalsIgnoreCase("@") ? outt123.m_applied_path
																							: "@";
																					out7 = out7_tmp;
																				} // closing
																					// filter/reject
																					// ###############################

																			} // end
																				// of
																				// Var
																				// scope

																			rejectedInnerJoin_tMap_4 = false;

																			tos_count_tMap_4++;

																			/**
																			 * [
																			 * tMap_4
																			 * main
																			 * ]
																			 * stop
																			 */
																			// Start
																			// of
																			// branch
																			// "out3"
																			if (out3 != null) {

																				/**
																				 * [
																				 * tJavaRow_6
																				 * main
																				 * ]
																				 * start
																				 */

																				currentComponent = "tJavaRow_6";

																				// Code
																				// generated
																				// according
																				// to
																				// input
																				// schema
																				// and
																				// output
																				// schema
																				row24.itemID = out3.itemID;
																				row24.Value = out3.Value;
																				row24.VisitID = out3.VisitID;
																				row24.FormID = out3.FormID;
																				row24.SubjectKey = out3.SubjectKey;
																				row24.Path = out3.Path;
																				row24.PathID = out3.PathID;
																				row24.DataType = out3.DataType;
																				row24.Update_Date = out3.Update_Date;
																				row24.Import_Date = out3.Import_Date;
																				row24.Download_Date = out3.Download_Date;
																				row24.StudyEventRepeatKey = out3.StudyEventRepeatKey;
																				row24.itemGroupRepeatKey = out3.itemGroupRepeatKey;
																				row24.itemCode = out3.itemCode;
																				row24.FormRepeatKey = out3.FormRepeatKey;
																				if (out3.startDate
																						.toLowerCase()
																						.contains(
																								"t")) {
																					row24.startDate = out3.startDate
																							.substring(
																									0,
																									out3.startDate
																											.toLowerCase()
																											.indexOf(
																													"t"));
																				} else
																					row24.startDate = out3.startDate;
																				row24.m_applied_path = out3.m_applied_path;
																				row24.mod_path = out3.mod_path;
																				row24.mod_item = out3.mod_item;

																				nb_line_tJavaRow_6++;

																				tos_count_tJavaRow_6++;

																				/**
																				 * [
																				 * tJavaRow_6
																				 * main
																				 * ]
																				 * stop
																				 */

																				/**
																				 * [
																				 * tFileOutputDelimited_1
																				 * main
																				 * ]
																				 * start
																				 */

																				currentComponent = "tFileOutputDelimited_1";

																				String[] rowtFileOutputDelimited_1 = new String[19];

																				rowtFileOutputDelimited_1[0] = row24.itemID == null ? ""
																						: row24.itemID;

																				rowtFileOutputDelimited_1[1] = row24.Value == null ? ""
																						: row24.Value;

																				rowtFileOutputDelimited_1[2] = row24.VisitID == null ? ""
																						: row24.VisitID;

																				rowtFileOutputDelimited_1[3] = row24.FormID == null ? ""
																						: row24.FormID;

																				rowtFileOutputDelimited_1[4] = row24.SubjectKey == null ? ""
																						: row24.SubjectKey;

																				rowtFileOutputDelimited_1[5] = row24.Path == null ? ""
																						: row24.Path;

																				rowtFileOutputDelimited_1[6] = row24.PathID == null ? ""
																						: row24.PathID;

																				rowtFileOutputDelimited_1[7] = row24.DataType == null ? ""
																						: row24.DataType;

																				rowtFileOutputDelimited_1[8] = row24.Update_Date == null ? ""
																						: row24.Update_Date;

																				rowtFileOutputDelimited_1[9] = row24.Import_Date == null ? ""
																						: row24.Import_Date;

																				rowtFileOutputDelimited_1[10] = row24.Download_Date == null ? ""
																						: row24.Download_Date;

																				rowtFileOutputDelimited_1[11] = row24.StudyEventRepeatKey == null ? ""
																						: row24.StudyEventRepeatKey;

																				rowtFileOutputDelimited_1[12] = row24.FormRepeatKey == null ? ""
																						: row24.FormRepeatKey;

																				rowtFileOutputDelimited_1[13] = row24.itemGroupRepeatKey == null ? ""
																						: row24.itemGroupRepeatKey;

																				rowtFileOutputDelimited_1[14] = row24.itemCode == null ? ""
																						: row24.itemCode;

																				rowtFileOutputDelimited_1[15] = row24.startDate == null ? ""
																						: row24.startDate;

																				rowtFileOutputDelimited_1[16] = row24.m_applied_path == null ? ""
																						: row24.m_applied_path;

																				rowtFileOutputDelimited_1[17] = row24.mod_path == null ? ""
																						: row24.mod_path;

																				rowtFileOutputDelimited_1[18] = row24.mod_item == null ? ""
																						: row24.mod_item;

																				nb_line_tFileOutputDelimited_1++;
																				CsvWritertFileOutputDelimited_1
																						.writeNext(rowtFileOutputDelimited_1);

																				tos_count_tFileOutputDelimited_1++;

																				/**
																				 * [
																				 * tFileOutputDelimited_1
																				 * main
																				 * ]
																				 * stop
																				 */

																			} // End
																				// of
																				// branch
																				// "out3"

																			// Start
																			// of
																			// branch
																			// "to_ont_xml"
																			if (to_ont_xml != null) {

																				/**
																				 * [
																				 * tFileOutputDelimited_5
																				 * main
																				 * ]
																				 * start
																				 */

																				currentComponent = "tFileOutputDelimited_5";

																				String[] rowtFileOutputDelimited_5 = new String[13];

																				rowtFileOutputDelimited_5[0] = to_ont_xml.HLEVEL == null ? ""
																						: String.valueOf(to_ont_xml.HLEVEL);

																				rowtFileOutputDelimited_5[1] = to_ont_xml.Name == null ? ""
																						: to_ont_xml.Name;

																				rowtFileOutputDelimited_5[2] = to_ont_xml.Path == null ? ""
																						: to_ont_xml.Path;

																				rowtFileOutputDelimited_5[3] = to_ont_xml.DataType == null ? ""
																						: to_ont_xml.DataType;

																				rowtFileOutputDelimited_5[4] = to_ont_xml.Update_Date == null ? ""
																						: to_ont_xml.Update_Date;

																				rowtFileOutputDelimited_5[5] = to_ont_xml.Import_Date == null ? ""
																						: to_ont_xml.Import_Date;

																				rowtFileOutputDelimited_5[6] = to_ont_xml.Download_Date == null ? ""
																						: to_ont_xml.Download_Date;

																				rowtFileOutputDelimited_5[7] = to_ont_xml.PathID == null ? ""
																						: to_ont_xml.PathID;

																				rowtFileOutputDelimited_5[8] = to_ont_xml.visual == null ? ""
																						: to_ont_xml.visual;

																				rowtFileOutputDelimited_5[9] = to_ont_xml.codeList == null ? ""
																						: to_ont_xml.codeList;

																				rowtFileOutputDelimited_5[10] = to_ont_xml.source == null ? ""
																						: to_ont_xml.source;

																				rowtFileOutputDelimited_5[11] = to_ont_xml.xml == null ? ""
																						: to_ont_xml.xml;

																				rowtFileOutputDelimited_5[12] = to_ont_xml.m_applied_path == null ? ""
																						: to_ont_xml.m_applied_path;

																				nb_line_tFileOutputDelimited_5++;
																				CsvWritertFileOutputDelimited_5
																						.writeNext(rowtFileOutputDelimited_5);

																				tos_count_tFileOutputDelimited_5++;

																				/**
																				 * [
																				 * tFileOutputDelimited_5
																				 * main
																				 * ]
																				 * stop
																				 */

																			} // End
																				// of
																				// branch
																				// "to_ont_xml"

																			// Start
																			// of
																			// branch
																			// "to_ont"
																			if (to_ont != null) {

																				/**
																				 * [
																				 * tFileOutputDelimited_9
																				 * main
																				 * ]
																				 * start
																				 */

																				currentComponent = "tFileOutputDelimited_9";

																				String[] rowtFileOutputDelimited_9 = new String[13];

																				rowtFileOutputDelimited_9[0] = to_ont.HLEVEL == null ? ""
																						: String.valueOf(to_ont.HLEVEL);

																				rowtFileOutputDelimited_9[1] = to_ont.Name == null ? ""
																						: to_ont.Name;

																				rowtFileOutputDelimited_9[2] = to_ont.Path == null ? ""
																						: to_ont.Path;

																				rowtFileOutputDelimited_9[3] = to_ont.DataType == null ? ""
																						: to_ont.DataType;

																				rowtFileOutputDelimited_9[4] = to_ont.Update_Date == null ? ""
																						: to_ont.Update_Date;

																				rowtFileOutputDelimited_9[5] = to_ont.Import_Date == null ? ""
																						: to_ont.Import_Date;

																				rowtFileOutputDelimited_9[6] = to_ont.Download_Date == null ? ""
																						: to_ont.Download_Date;

																				rowtFileOutputDelimited_9[7] = to_ont.PathID == null ? ""
																						: to_ont.PathID;

																				rowtFileOutputDelimited_9[8] = to_ont.visual == null ? ""
																						: to_ont.visual;

																				rowtFileOutputDelimited_9[9] = to_ont.codeList == null ? ""
																						: to_ont.codeList;

																				rowtFileOutputDelimited_9[10] = to_ont.source == null ? ""
																						: to_ont.source;

																				rowtFileOutputDelimited_9[11] = to_ont.xml == null ? ""
																						: to_ont.xml;

																				rowtFileOutputDelimited_9[12] = to_ont.m_applied_path == null ? ""
																						: to_ont.m_applied_path;

																				nb_line_tFileOutputDelimited_9++;
																				CsvWritertFileOutputDelimited_9
																						.writeNext(rowtFileOutputDelimited_9);

																				tos_count_tFileOutputDelimited_9++;

																				/**
																				 * [
																				 * tFileOutputDelimited_9
																				 * main
																				 * ]
																				 * stop
																				 */

																			} // End
																				// of
																				// branch
																				// "to_ont"

																			// Start
																			// of
																			// branch
																			// "out7"
																			if (out7 != null) {

																				/**
																				 * [
																				 * tFileOutputDelimited_15
																				 * main
																				 * ]
																				 * start
																				 */

																				currentComponent = "tFileOutputDelimited_15";

																				String[] rowtFileOutputDelimited_15 = new String[13];

																				rowtFileOutputDelimited_15[0] = out7.HLEVEL == null ? ""
																						: String.valueOf(out7.HLEVEL);

																				rowtFileOutputDelimited_15[1] = out7.Name == null ? ""
																						: out7.Name;

																				rowtFileOutputDelimited_15[2] = out7.Path == null ? ""
																						: out7.Path;

																				rowtFileOutputDelimited_15[3] = out7.DataType == null ? ""
																						: out7.DataType;

																				rowtFileOutputDelimited_15[4] = out7.Update_Date == null ? ""
																						: out7.Update_Date;

																				rowtFileOutputDelimited_15[5] = out7.Import_Date == null ? ""
																						: out7.Import_Date;

																				rowtFileOutputDelimited_15[6] = out7.Download_Date == null ? ""
																						: out7.Download_Date;

																				rowtFileOutputDelimited_15[7] = out7.PathID == null ? ""
																						: out7.PathID;

																				rowtFileOutputDelimited_15[8] = out7.visual == null ? ""
																						: out7.visual;

																				rowtFileOutputDelimited_15[9] = out7.codeList == null ? ""
																						: out7.codeList;

																				rowtFileOutputDelimited_15[10] = out7.source == null ? ""
																						: out7.source;

																				rowtFileOutputDelimited_15[11] = out7.xml == null ? ""
																						: out7.xml;

																				rowtFileOutputDelimited_15[12] = out7.m_applied_path == null ? ""
																						: out7.m_applied_path;

																				nb_line_tFileOutputDelimited_15++;
																				CsvWritertFileOutputDelimited_15
																						.writeNext(rowtFileOutputDelimited_15);

																				tos_count_tFileOutputDelimited_15++;

																				/**
																				 * [
																				 * tFileOutputDelimited_15
																				 * main
																				 * ]
																				 * stop
																				 */

																			} // End
																				// of
																				// branch
																				// "out7"

																		} // End
																			// of
																			// branch
																			// "outt123"

																		// Start
																		// of
																		// branch
																		// "out4"
																		if (out4 != null) {

																			/**
																			 * [
																			 * tJavaRow_11
																			 * main
																			 * ]
																			 * start
																			 */

																			currentComponent = "tJavaRow_11";

																			// Code
																			// generated
																			// according
																			// to
																			// input
																			// schema
																			// and
																			// output
																			// schema
																			row25.HLEVEL = out4.HLEVEL;
																			row25.itemID = out4.itemID;
																			row25.Value = out4.Value;
																			row25.VisitID = out4.VisitID;
																			row25.FormID = out4.FormID;
																			row25.SubjectKey = out4.SubjectKey;
																			row25.Path = out4.Path;
																			row25.PathID = out4.PathID;
																			row25.DataType = out4.DataType;
																			row25.Update_Date = out4.Update_Date;
																			row25.Import_Date = out4.Import_Date;
																			row25.Download_Date = out4.Download_Date;
																			row25.StudyEventRepeatKey = out4.StudyEventRepeatKey;
																			row25.itemGroupRepeatKey = out4.itemGroupRepeatKey;
																			row25.itemCode = out4.itemCode;
																			row25.name = out4.name;
																			row25.m_applied_path = out4.m_applied_path;
																			row25.mod_path = out4.mod_path;
																			row25.mod_item = out4.mod_item;
																			row25.FormRepeatKey = out4.FormRepeatKey;

																			nb_line_tJavaRow_11++;

																			tos_count_tJavaRow_11++;

																			/**
																			 * [
																			 * tJavaRow_11
																			 * main
																			 * ]
																			 * stop
																			 */

																			/**
																			 * [
																			 * tMap_8
																			 * main
																			 * ]
																			 * start
																			 */

																			currentComponent = "tMap_8";

																			boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;

																			// ###############################
																			// #
																			// Input
																			// tables
																			// (lookups)
																			boolean rejectedInnerJoin_tMap_8 = false;
																			boolean mainRowRejected_tMap_8 = false;

																			// /////////////////////////////////////////////
																			// Starting
																			// Lookup
																			// Table
																			// "row7"
																			// /////////////////////////////////////////////

																			boolean forceLooprow7 = false;

																			row7Struct row7ObjectFromLookup = null;

																			if (!rejectedInnerJoin_tMap_8) { // G_TM_M_020

																				hasCasePrimitiveKeyWithNull_tMap_8 = false;

																				row7HashKey.CodeListItem = row25.Value;

																				row7HashKey.ItemGroupOID = row25.itemID;

																				row7HashKey.hashCodeDirty = true;

																				tHash_Lookup_row7
																						.lookup(row7HashKey);

																			} // G_TM_M_020

																			if (tHash_Lookup_row7 != null
																					&& tHash_Lookup_row7
																							.getCount(row7HashKey) > 1) { // G
																															// 071

																				// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row7' and it contains more one result from keys :  row7.CodeListItem = '"
																				// +
																				// row7HashKey.CodeListItem
																				// +
																				// "', row7.ItemGroupOID = '"
																				// +
																				// row7HashKey.ItemGroupOID
																				// +
																				// "'");
																			} // G
																				// 071

																			row7Struct row7 = null;

																			row7Struct fromLookup_row7 = null;
																			row7 = row7Default;

																			if (tHash_Lookup_row7 != null
																					&& tHash_Lookup_row7
																							.hasNext()) { // G
																											// 099

																				fromLookup_row7 = tHash_Lookup_row7
																						.next();

																			} // G
																				// 099

																			if (fromLookup_row7 != null) {
																				row7 = fromLookup_row7;
																			}

																			// ###############################
																			{ // start
																				// of
																				// Var
																				// scope

																				// ###############################
																				// #
																				// Vars
																				// tables

																				Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
																				// ###############################
																				// #
																				// Output
																				// tables

																				out5 = null;
																				out6 = null;

																				// #
																				// Output
																				// table
																				// :
																				// 'out5'
																				out5_tmp.itemID = row25.itemID;
																				out5_tmp.Value = row7.TranslatedText;
																				out5_tmp.VisitID = row25.VisitID;
																				out5_tmp.FormID = row25.FormID;
																				out5_tmp.SubjectKey = row25.SubjectKey;
																				out5_tmp.Path = !row25.m_applied_path
																						.equalsIgnoreCase("@") ? "\\"
																						+ row7.ItemGroupOID
																						+ "\\"
																						+ row25.mod_item
																						+ "\\"
																						: row25.Path;
																				out5_tmp.PathID = row25.PathID;
																				out5_tmp.DataType = "String";
																				out5_tmp.Update_Date = row25.Update_Date;
																				out5_tmp.Import_Date = row25.Import_Date;
																				out5_tmp.Download_Date = row25.Download_Date;
																				out5_tmp.StudyEventRepeatKey = row25.StudyEventRepeatKey;
																				out5_tmp.FormRepeatKey = row25.FormRepeatKey;
																				out5_tmp.itemGroupRepeatKey = row25.itemGroupRepeatKey;
																				out5_tmp.itemCode = row25.itemCode;
																				out5_tmp.startDate = null;
																				out5_tmp.m_applied_path = !row25.m_applied_path
																						.equalsIgnoreCase("@") ? row25.m_applied_path
																						: "@";
																				out5_tmp.mod_path = row25.mod_path;
																				out5_tmp.mod_item = row25.mod_item;
																				out5 = out5_tmp;

																				// #
																				// Output
																				// table
																				// :
																				// 'out6'
																				out6_tmp.HLEVEL = row25.HLEVEL + 1;
																				out6_tmp.Name = row7.TranslatedText;
																				out6_tmp.Path = !row25.m_applied_path
																						.equalsIgnoreCase("@") ? "\\"
																						+ row7.ItemGroupOID
																						+ "\\"
																						+ row25.mod_item
																						+ "\\"
																						: row25.Path;
																				out6_tmp.DataType = "String";
																				out6_tmp.Update_Date = row25.Update_Date;
																				out6_tmp.Import_Date = row25.Import_Date;
																				out6_tmp.Download_Date = row25.Download_Date;
																				out6_tmp.PathID = row25.PathID;
																				out6_tmp.visual = row25.m_applied_path
																						.equalsIgnoreCase("@") ? "LAE"
																						: "RAE";
																				out6_tmp.codeList = "";
																				out6_tmp.source = "";
																				out6_tmp.xml = "";
																				out6_tmp.m_applied_path = !row25.m_applied_path
																						.equalsIgnoreCase("@") ? row25.m_applied_path
																						: "@";
																				out6_tmp.mod_path = row25.mod_path;
																				out6_tmp.mod_item = row25.mod_item;
																				out6 = out6_tmp;
																				// ###############################

																			} // end
																				// of
																				// Var
																				// scope

																			rejectedInnerJoin_tMap_8 = false;

																			tos_count_tMap_8++;

																			/**
																			 * [
																			 * tMap_8
																			 * main
																			 * ]
																			 * stop
																			 */
																			// Start
																			// of
																			// branch
																			// "out5"
																			if (out5 != null) {

																				/**
																				 * [
																				 * tFileOutputDelimited_8
																				 * main
																				 * ]
																				 * start
																				 */

																				currentComponent = "tFileOutputDelimited_8";

																				String[] rowtFileOutputDelimited_8 = new String[19];

																				rowtFileOutputDelimited_8[0] = out5.itemID == null ? ""
																						: out5.itemID;

																				rowtFileOutputDelimited_8[1] = out5.Value == null ? ""
																						: out5.Value;

																				rowtFileOutputDelimited_8[2] = out5.VisitID == null ? ""
																						: out5.VisitID;

																				rowtFileOutputDelimited_8[3] = out5.FormID == null ? ""
																						: out5.FormID;

																				rowtFileOutputDelimited_8[4] = out5.SubjectKey == null ? ""
																						: out5.SubjectKey;

																				rowtFileOutputDelimited_8[5] = out5.Path == null ? ""
																						: out5.Path;

																				rowtFileOutputDelimited_8[6] = out5.PathID == null ? ""
																						: out5.PathID;

																				rowtFileOutputDelimited_8[7] = out5.DataType == null ? ""
																						: out5.DataType;

																				rowtFileOutputDelimited_8[8] = out5.Update_Date == null ? ""
																						: out5.Update_Date;

																				rowtFileOutputDelimited_8[9] = out5.Import_Date == null ? ""
																						: out5.Import_Date;

																				rowtFileOutputDelimited_8[10] = out5.Download_Date == null ? ""
																						: out5.Download_Date;

																				rowtFileOutputDelimited_8[11] = out5.StudyEventRepeatKey == null ? ""
																						: out5.StudyEventRepeatKey;

																				rowtFileOutputDelimited_8[12] = out5.FormRepeatKey == null ? ""
																						: out5.FormRepeatKey;

																				rowtFileOutputDelimited_8[13] = out5.itemGroupRepeatKey == null ? ""
																						: out5.itemGroupRepeatKey;

																				rowtFileOutputDelimited_8[14] = out5.itemCode == null ? ""
																						: out5.itemCode;

																				rowtFileOutputDelimited_8[15] = out5.startDate == null ? ""
																						: out5.startDate;

																				rowtFileOutputDelimited_8[16] = out5.m_applied_path == null ? ""
																						: out5.m_applied_path;

																				rowtFileOutputDelimited_8[17] = out5.mod_path == null ? ""
																						: out5.mod_path;

																				rowtFileOutputDelimited_8[18] = out5.mod_item == null ? ""
																						: out5.mod_item;

																				nb_line_tFileOutputDelimited_8++;
																				CsvWritertFileOutputDelimited_8
																						.writeNext(rowtFileOutputDelimited_8);

																				tos_count_tFileOutputDelimited_8++;

																				/**
																				 * [
																				 * tFileOutputDelimited_8
																				 * main
																				 * ]
																				 * stop
																				 */

																			} // End
																				// of
																				// branch
																				// "out5"

																			// Start
																			// of
																			// branch
																			// "out6"
																			if (out6 != null) {

																				/**
																				 * [
																				 * tFileOutputDelimited_10
																				 * main
																				 * ]
																				 * start
																				 */

																				currentComponent = "tFileOutputDelimited_10";

																				String[] rowtFileOutputDelimited_10 = new String[15];

																				rowtFileOutputDelimited_10[0] = out6.HLEVEL == null ? ""
																						: String.valueOf(out6.HLEVEL);

																				rowtFileOutputDelimited_10[1] = out6.Name == null ? ""
																						: out6.Name;

																				rowtFileOutputDelimited_10[2] = out6.Path == null ? ""
																						: out6.Path;

																				rowtFileOutputDelimited_10[3] = out6.DataType == null ? ""
																						: out6.DataType;

																				rowtFileOutputDelimited_10[4] = out6.Update_Date == null ? ""
																						: out6.Update_Date;

																				rowtFileOutputDelimited_10[5] = out6.Import_Date == null ? ""
																						: out6.Import_Date;

																				rowtFileOutputDelimited_10[6] = out6.Download_Date == null ? ""
																						: out6.Download_Date;

																				rowtFileOutputDelimited_10[7] = out6.PathID == null ? ""
																						: out6.PathID;

																				rowtFileOutputDelimited_10[8] = out6.visual == null ? ""
																						: out6.visual;

																				rowtFileOutputDelimited_10[9] = out6.codeList == null ? ""
																						: out6.codeList;

																				rowtFileOutputDelimited_10[10] = out6.source == null ? ""
																						: out6.source;

																				rowtFileOutputDelimited_10[11] = out6.xml == null ? ""
																						: out6.xml;

																				rowtFileOutputDelimited_10[12] = out6.m_applied_path == null ? ""
																						: out6.m_applied_path;

																				rowtFileOutputDelimited_10[13] = out6.mod_path == null ? ""
																						: out6.mod_path;

																				rowtFileOutputDelimited_10[14] = out6.mod_item == null ? ""
																						: out6.mod_item;

																				nb_line_tFileOutputDelimited_10++;
																				CsvWritertFileOutputDelimited_10
																						.writeNext(rowtFileOutputDelimited_10);

																				tos_count_tFileOutputDelimited_10++;

																				/**
																				 * [
																				 * tFileOutputDelimited_10
																				 * main
																				 * ]
																				 * stop
																				 */

																			} // End
																				// of
																				// branch
																				// "out6"

																		} // End
																			// of
																			// branch
																			// "out4"

																	} // End of
																		// branch
																		// "out2"

																} // End of
																	// branch
																	// "fromPatient"

																// Start of
																// branch
																// "toEncNum"
																if (toEncNum != null) {

																	/**
																	 * [
																	 * tUniqRow_3
																	 * main ]
																	 * start
																	 */

																	currentComponent = "tUniqRow_3";

																	row3 = null;
																	if (toEncNum.EncounterNum == null) {
																		finder_tUniqRow_3.EncounterNum = null;
																	} else {
																		finder_tUniqRow_3.EncounterNum = toEncNum.EncounterNum
																				.toLowerCase();
																	}
																	finder_tUniqRow_3.hashCodeDirty = true;
																	if (!keystUniqRow_3
																			.contains(finder_tUniqRow_3)) {
																		KeyStruct_tUniqRow_3 new_tUniqRow_3 = new KeyStruct_tUniqRow_3();

																		if (toEncNum.EncounterNum == null) {
																			new_tUniqRow_3.EncounterNum = null;
																		} else {
																			new_tUniqRow_3.EncounterNum = toEncNum.EncounterNum
																					.toLowerCase();
																		}

																		keystUniqRow_3
																				.add(new_tUniqRow_3);
																		if (row3 == null) {
																			row3 = new row3Struct();
																		}
																		row3.PatientID = toEncNum.PatientID;
																		row3.EncounterNum = toEncNum.EncounterNum;
																		row3.VisitID = toEncNum.VisitID;
																		nb_uniques_tUniqRow_3++;
																	} else {
																		nb_duplicates_tUniqRow_3++;
																	}

																	tos_count_tUniqRow_3++;

																	/**
																	 * [
																	 * tUniqRow_3
																	 * main ]
																	 * stop
																	 */
																	// Start of
																	// branch
																	// "row3"
																	if (row3 != null) {

																		/**
																		 * [
																		 * tLogRow_5
																		 * main
																		 * ]
																		 * start
																		 */

																		currentComponent = "tLogRow_5";

																		row28 = row3;

																		tos_count_tLogRow_5++;

																		/**
																		 * [
																		 * tLogRow_5
																		 * main
																		 * ]
																		 * stop
																		 */

																		/**
																		 * [
																		 * tFileOutputDelimited_12
																		 * main
																		 * ]
																		 * start
																		 */

																		currentComponent = "tFileOutputDelimited_12";

																		StringBuilder sb_tFileOutputDelimited_12 = new StringBuilder();

																		if (row28.PatientID != null) {

																			sb_tFileOutputDelimited_12
																					.append(

																					row28.PatientID

																					);

																		}

																		sb_tFileOutputDelimited_12
																				.append(OUT_DELIM_tFileOutputDelimited_12);

																		if (row28.EncounterNum != null) {

																			sb_tFileOutputDelimited_12
																					.append(

																					row28.EncounterNum

																					);

																		}

																		sb_tFileOutputDelimited_12
																				.append(OUT_DELIM_tFileOutputDelimited_12);

																		if (row28.VisitID != null) {

																			sb_tFileOutputDelimited_12
																					.append(

																					row28.VisitID

																					);

																		}

																		sb_tFileOutputDelimited_12
																				.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_12);

																		nb_line_tFileOutputDelimited_12++;

																		outtFileOutputDelimited_12
																				.write(sb_tFileOutputDelimited_12
																						.toString());

																		tos_count_tFileOutputDelimited_12++;

																		/**
																		 * [
																		 * tFileOutputDelimited_12
																		 * main
																		 * ]
																		 * stop
																		 */

																	} // End of
																		// branch
																		// "row3"

																} // End of
																	// branch
																	// "toEncNum"

															} // G_TM_M_280
																// close main
																// tMap filter
																// for table
																// 'row27'

														} // End of branch
															// "row1"

														/**
														 * [tFileInputXML_2 end
														 * ] start
														 */

														currentComponent = "tFileInputXML_2";

													}
													try {
														looper_tFileInputXML_2
																.handleTaskResponse();
													} catch (java.lang.Exception e) {
														if (!(e.getCause() instanceof org.talend.xml.sax.exception.EnoughDataException))

															System.err
																	.println(e
																			.getMessage());

													}
													globalMap
															.put("tFileInputXML_2_NB_LINE",
																	nb_line_tFileInputXML_2);

													ok_Hash.put(
															"tFileInputXML_2",
															true);
													end_Hash.put(
															"tFileInputXML_2",
															System.currentTimeMillis());

													/**
													 * [tFileInputXML_2 end ]
													 * stop
													 */

													/**
													 * [tJavaRow_9 end ] start
													 */

													currentComponent = "tJavaRow_9";

													globalMap
															.put("tJavaRow_9_NB_LINE",
																	nb_line_tJavaRow_9);

													ok_Hash.put("tJavaRow_9",
															true);
													end_Hash.put(
															"tJavaRow_9",
															System.currentTimeMillis());

													/**
													 * [tJavaRow_9 end ] stop
													 */

													/**
													 * [tMap_1 end ] start
													 */

													currentComponent = "tMap_1";

													// ###############################
													// # Lookup hashes releasing
													// ###############################

													ok_Hash.put("tMap_1", true);
													end_Hash.put(
															"tMap_1",
															System.currentTimeMillis());

													/**
													 * [tMap_1 end ] stop
													 */

													/**
													 * [tUniqRow_3 end ] start
													 */

													currentComponent = "tUniqRow_3";

													globalMap
															.put("tUniqRow_3_NB_UNIQUES",
																	nb_uniques_tUniqRow_3);
													globalMap
															.put("tUniqRow_3_NB_DUPLICATES",
																	nb_duplicates_tUniqRow_3);

													ok_Hash.put("tUniqRow_3",
															true);
													end_Hash.put(
															"tUniqRow_3",
															System.currentTimeMillis());

													/**
													 * [tUniqRow_3 end ] stop
													 */

													/**
													 * [tLogRow_5 end ] start
													 */

													currentComponent = "tLogRow_5";

													ok_Hash.put("tLogRow_5",
															true);
													end_Hash.put(
															"tLogRow_5",
															System.currentTimeMillis());

													/**
													 * [tLogRow_5 end ] stop
													 */

													/**
													 * [tFileOutputDelimited_12
													 * end ] start
													 */

													currentComponent = "tFileOutputDelimited_12";

												} finally {
													if (outtFileOutputDelimited_12 != null) {
														outtFileOutputDelimited_12
																.flush();
														outtFileOutputDelimited_12
																.close();
													}
													globalMap
															.put("tFileOutputDelimited_12_NB_LINE",
																	nb_line_tFileOutputDelimited_12);
													globalMap
															.put("tFileOutputDelimited_12_FILE_NAME",
																	fileName_tFileOutputDelimited_12);
												} // finally

												ok_Hash.put(
														"tFileOutputDelimited_12",
														true);
												end_Hash.put(
														"tFileOutputDelimited_12",
														System.currentTimeMillis());

												/**
												 * [tFileOutputDelimited_12 end
												 * ] stop
												 */

												/**
												 * [tMap_2 end ] start
												 */

												currentComponent = "tMap_2";

												// ###############################
												// # Lookup hashes releasing
												// ###############################

												ok_Hash.put("tMap_2", true);
												end_Hash.put("tMap_2", System
														.currentTimeMillis());

												/**
												 * [tMap_2 end ] stop
												 */

												/**
												 * [tLogRow_3 end ] start
												 */

												currentComponent = "tLogRow_3";

												ok_Hash.put("tLogRow_3", true);
												end_Hash.put(
														"tLogRow_3",
														System.currentTimeMillis());

												/**
												 * [tLogRow_3 end ] stop
												 */

												/**
												 * [tJavaRow_2 end ] start
												 */

												currentComponent = "tJavaRow_2";

												globalMap.put(
														"tJavaRow_2_NB_LINE",
														nb_line_tJavaRow_2);

												ok_Hash.put("tJavaRow_2", true);
												end_Hash.put(
														"tJavaRow_2",
														System.currentTimeMillis());

												/**
												 * [tJavaRow_2 end ] stop
												 */

												/**
												 * [tMap_6 end ] start
												 */

												currentComponent = "tMap_6";

												// ###############################
												// # Lookup hashes releasing
												// ###############################

												ok_Hash.put("tMap_6", true);
												end_Hash.put("tMap_6", System
														.currentTimeMillis());

												/**
												 * [tMap_6 end ] stop
												 */

												/**
												 * [tJavaRow_11 end ] start
												 */

												currentComponent = "tJavaRow_11";

												globalMap.put(
														"tJavaRow_11_NB_LINE",
														nb_line_tJavaRow_11);

												ok_Hash.put("tJavaRow_11", true);
												end_Hash.put(
														"tJavaRow_11",
														System.currentTimeMillis());

												/**
												 * [tJavaRow_11 end ] stop
												 */

												/**
												 * [tMap_8 end ] start
												 */

												currentComponent = "tMap_8";

												// ###############################
												// # Lookup hashes releasing
												// ###############################

												ok_Hash.put("tMap_8", true);
												end_Hash.put("tMap_8", System
														.currentTimeMillis());

												/**
												 * [tMap_8 end ] stop
												 */

												/**
												 * [tFileOutputDelimited_10 end
												 * ] start
												 */

												currentComponent = "tFileOutputDelimited_10";

											} finally {

												if (CsvWritertFileOutputDelimited_10 != null) {
													CsvWritertFileOutputDelimited_10
															.close();
												}
												globalMap
														.put("tFileOutputDelimited_10_NB_LINE",
																nb_line_tFileOutputDelimited_10);
											} // finally

											ok_Hash.put(
													"tFileOutputDelimited_10",
													true);
											end_Hash.put(
													"tFileOutputDelimited_10",
													System.currentTimeMillis());

											/**
											 * [tFileOutputDelimited_10 end ]
											 * stop
											 */

											/**
											 * [tFileOutputDelimited_8 end ]
											 * start
											 */

											currentComponent = "tFileOutputDelimited_8";

										} finally {

											if (CsvWritertFileOutputDelimited_8 != null) {
												CsvWritertFileOutputDelimited_8
														.close();
											}
											globalMap
													.put("tFileOutputDelimited_8_NB_LINE",
															nb_line_tFileOutputDelimited_8);
										} // finally

										ok_Hash.put("tFileOutputDelimited_8",
												true);
										end_Hash.put("tFileOutputDelimited_8",
												System.currentTimeMillis());

										/**
										 * [tFileOutputDelimited_8 end ] stop
										 */

										/**
										 * [tMap_4 end ] start
										 */

										currentComponent = "tMap_4";

										// ###############################
										// # Lookup hashes releasing
										// ###############################

										ok_Hash.put("tMap_4", true);
										end_Hash.put("tMap_4",
												System.currentTimeMillis());

										/**
										 * [tMap_4 end ] stop
										 */

										/**
										 * [tFileOutputDelimited_15 end ] start
										 */

										currentComponent = "tFileOutputDelimited_15";

									} finally {

										if (CsvWritertFileOutputDelimited_15 != null) {
											CsvWritertFileOutputDelimited_15
													.close();
										}
										globalMap
												.put("tFileOutputDelimited_15_NB_LINE",
														nb_line_tFileOutputDelimited_15);
									} // finally

									ok_Hash.put("tFileOutputDelimited_15", true);
									end_Hash.put("tFileOutputDelimited_15",
											System.currentTimeMillis());

									/**
									 * [tFileOutputDelimited_15 end ] stop
									 */

									/**
									 * [tFileOutputDelimited_9 end ] start
									 */

									currentComponent = "tFileOutputDelimited_9";

								} finally {

									if (CsvWritertFileOutputDelimited_9 != null) {
										CsvWritertFileOutputDelimited_9.close();
									}
									globalMap.put(
											"tFileOutputDelimited_9_NB_LINE",
											nb_line_tFileOutputDelimited_9);
								} // finally

								ok_Hash.put("tFileOutputDelimited_9", true);
								end_Hash.put("tFileOutputDelimited_9",
										System.currentTimeMillis());

								/**
								 * [tFileOutputDelimited_9 end ] stop
								 */

								/**
								 * [tFileOutputDelimited_5 end ] start
								 */

								currentComponent = "tFileOutputDelimited_5";

							} finally {

								if (CsvWritertFileOutputDelimited_5 != null) {
									CsvWritertFileOutputDelimited_5.close();
								}
								globalMap.put("tFileOutputDelimited_5_NB_LINE",
										nb_line_tFileOutputDelimited_5);
							} // finally

							ok_Hash.put("tFileOutputDelimited_5", true);
							end_Hash.put("tFileOutputDelimited_5",
									System.currentTimeMillis());

							/**
							 * [tFileOutputDelimited_5 end ] stop
							 */

							/**
							 * [tJavaRow_6 end ] start
							 */

							currentComponent = "tJavaRow_6";

							globalMap.put("tJavaRow_6_NB_LINE",
									nb_line_tJavaRow_6);

							ok_Hash.put("tJavaRow_6", true);
							end_Hash.put("tJavaRow_6",
									System.currentTimeMillis());

							/**
							 * [tJavaRow_6 end ] stop
							 */

							/**
							 * [tFileOutputDelimited_1 end ] start
							 */

							currentComponent = "tFileOutputDelimited_1";

						} finally {

							if (CsvWritertFileOutputDelimited_1 != null) {
								CsvWritertFileOutputDelimited_1.close();
							}
							globalMap.put("tFileOutputDelimited_1_NB_LINE",
									nb_line_tFileOutputDelimited_1);
						} // finally

						ok_Hash.put("tFileOutputDelimited_1", true);
						end_Hash.put("tFileOutputDelimited_1",
								System.currentTimeMillis());

						/**
						 * [tFileOutputDelimited_1 end ] stop
						 */

						/**
						 * [tUniqRow_1 end ] start
						 */

						currentComponent = "tUniqRow_1";

						globalMap.put("tUniqRow_1_NB_UNIQUES",
								nb_uniques_tUniqRow_1);
						globalMap.put("tUniqRow_1_NB_DUPLICATES",
								nb_duplicates_tUniqRow_1);

						ok_Hash.put("tUniqRow_1", true);
						end_Hash.put("tUniqRow_1", System.currentTimeMillis());

						/**
						 * [tUniqRow_1 end ] stop
						 */

						/**
						 * [tFileOutputDelimited_2 end ] start
						 */

						currentComponent = "tFileOutputDelimited_2";

					} finally {
						if (outtFileOutputDelimited_2 != null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
						globalMap.put("tFileOutputDelimited_2_NB_LINE",
								nb_line_tFileOutputDelimited_2);
						globalMap.put("tFileOutputDelimited_2_FILE_NAME",
								fileName_tFileOutputDelimited_2);
					} // finally

					ok_Hash.put("tFileOutputDelimited_2", true);
					end_Hash.put("tFileOutputDelimited_2",
							System.currentTimeMillis());

					/**
					 * [tFileOutputDelimited_2 end ] stop
					 */

					/**
					 * [tJava_1 end ] start
					 */

					currentComponent = "tJava_1";

					ok_Hash.put("tJava_1", true);
					end_Hash.put("tJava_1", System.currentTimeMillis());

					/**
					 * [tJava_1 end ] stop
					 */

					/**
					 * [tForeach_1 end ] start
					 */

					currentComponent = "tForeach_1";

				}

				ok_Hash.put("tForeach_1", true);
				end_Hash.put("tForeach_1", System.currentTimeMillis());

				/**
				 * [tForeach_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tForeach_1:OnSubjobOk1",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_4Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tForeach_1:OnSubjobOk2",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_3Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		} finally {
			// free memory for "tMap_8"
			globalMap.remove("tHash_Lookup_row7");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_fromOnt");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_fromCode");

		}

		globalMap.put("tForeach_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_4 begin ] start
				 */

				ok_Hash.put("tJava_4", false);
				start_Hash.put("tJava_4", System.currentTimeMillis());
				currentComponent = "tJava_4";

				int tos_count_tJava_4 = 0;

				context.subStatus = 85.0f;
				StatusListener.setSubStatus(context.subStatus,
						(int) (float) (context.subStatus) + "%");

				/**
				 * [tJava_4 begin ] stop
				 */
				/**
				 * [tJava_4 main ] start
				 */

				currentComponent = "tJava_4";

				tos_count_tJava_4++;

				/**
				 * [tJava_4 main ] stop
				 */
				/**
				 * [tJava_4 end ] start
				 */

				currentComponent = "tJava_4";

				ok_Hash.put("tJava_4", true);
				end_Hash.put("tJava_4", System.currentTimeMillis());

				/**
				 * [tJava_4 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_4:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_6Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}

	public void tJava_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_6 begin ] start
				 */

				ok_Hash.put("tJava_6", false);
				start_Hash.put("tJava_6", System.currentTimeMillis());
				currentComponent = "tJava_6";

				int tos_count_tJava_6 = 0;

				if (context.importCodelist)
					System.out.println("Importing Codelists...");

				/**
				 * [tJava_6 begin ] stop
				 */
				/**
				 * [tJava_6 main ] start
				 */

				currentComponent = "tJava_6";

				tos_count_tJava_6++;

				/**
				 * [tJava_6 main ] stop
				 */
				/**
				 * [tJava_6 end ] start
				 */

				currentComponent = "tJava_6";

				ok_Hash.put("tJava_6", true);
				end_Hash.put("tJava_6", System.currentTimeMillis());

				if (context.importCodelist) {

					tFileInputDelimited_16Process(globalMap);
				}

				/**
				 * [tJava_6 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_6:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_10Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_6_SUBPROCESS_STATE", 1);
	}

	public static class out11Struct implements
			routines.system.IPersistableRow<out11Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row21Struct implements
			routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String itemCode;

		public String getItemCode() {
			return this.itemCode;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.itemCode = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.itemCode, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",itemCode=" + itemCode);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_16Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_16Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String itemCode;

		public String getItemCode() {
			return this.itemCode;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.itemCode = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.itemCode, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",itemCode=" + itemCode);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_16Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_17Process(globalMap);

				row21Struct row21 = new row21Struct();
				out11Struct out11 = new out11Struct();

				/**
				 * [tFileOutputDelimited_14 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_14", false);
				start_Hash.put("tFileOutputDelimited_14",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_14";

				int tos_count_tFileOutputDelimited_14 = 0;

				String fileName_tFileOutputDelimited_14 = "";
				fileName_tFileOutputDelimited_14 = (new java.io.File(
						((String) globalMap
								.get("tCreateTemporaryFile_4_FILEPATH"))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_14 = null;
				String extension_tFileOutputDelimited_14 = null;
				String directory_tFileOutputDelimited_14 = null;
				if ((fileName_tFileOutputDelimited_14.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_14.lastIndexOf(".") < fileName_tFileOutputDelimited_14
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14;
						extension_tFileOutputDelimited_14 = "";
					} else {
						fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14
								.substring(0, fileName_tFileOutputDelimited_14
										.lastIndexOf("."));
						extension_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14
								.substring(fileName_tFileOutputDelimited_14
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14
							.substring(0, fileName_tFileOutputDelimited_14
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_14.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14
								.substring(0, fileName_tFileOutputDelimited_14
										.lastIndexOf("."));
						extension_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14
								.substring(fileName_tFileOutputDelimited_14
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14;
						extension_tFileOutputDelimited_14 = "";
					}
					directory_tFileOutputDelimited_14 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_14 = true;
				java.io.File filetFileOutputDelimited_14 = new java.io.File(
						fileName_tFileOutputDelimited_14);
				globalMap.put("tFileOutputDelimited_14_FILE_NAME",
						fileName_tFileOutputDelimited_14);
				if (filetFileOutputDelimited_14.exists()) {
					isFileGenerated_tFileOutputDelimited_14 = false;
				}

				String[] headColutFileOutputDelimited_14 = new String[13];
				class CSVBasicSet_tFileOutputDelimited_14 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_14[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_14 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_14[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_14[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_14 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_14[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_14[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_14 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_14[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_14 = 0;
				int splitEvery_tFileOutputDelimited_14 = 1000;
				int splitedFileNo_tFileOutputDelimited_14 = 0;
				int currentRow_tFileOutputDelimited_14 = 0;

				CSVBasicSet_tFileOutputDelimited_14 csvSettings_tFileOutputDelimited_14 = new CSVBasicSet_tFileOutputDelimited_14();
				csvSettings_tFileOutputDelimited_14.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_14.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_14.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_14 != null
						&& directory_tFileOutputDelimited_14.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_14 = new java.io.File(
							directory_tFileOutputDelimited_14);
					if (!dir_tFileOutputDelimited_14.exists()) {
						dir_tFileOutputDelimited_14.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_14 = null;
				try {
					CsvWritertFileOutputDelimited_14 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_14,
													true), "ISO-8859-15")));
					CsvWritertFileOutputDelimited_14
							.setSeparator(csvSettings_tFileOutputDelimited_14
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_14
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_14
									.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_14
									.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_14.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_14
										.getRowDelim());
					}

					CsvWritertFileOutputDelimited_14
							.setEscapeChar(csvSettings_tFileOutputDelimited_14
									.getEscapeChar());
					CsvWritertFileOutputDelimited_14
							.setQuoteChar(csvSettings_tFileOutputDelimited_14
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_14
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_14 begin ] stop
					 */

					/**
					 * [tMap_10 begin ] start
					 */

					ok_Hash.put("tMap_10", false);
					start_Hash.put("tMap_10", System.currentTimeMillis());
					currentComponent = "tMap_10";

					int tos_count_tMap_10 = 0;

					// ###############################
					// # Lookup's keys initialization

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) globalMap
							.get("tHash_Lookup_row22"));

					row22Struct row22HashKey = new row22Struct();
					row22Struct row22Default = new row22Struct();
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_10__Struct {
					}
					Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					out11Struct out11_tmp = new out11Struct();
					// ###############################

					/**
					 * [tMap_10 begin ] stop
					 */

					/**
					 * [tFileInputDelimited_16 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_16", false);
					start_Hash.put("tFileInputDelimited_16",
							System.currentTimeMillis());
					currentComponent = "tFileInputDelimited_16";

					int tos_count_tFileInputDelimited_16 = 0;

					int nb_line_tFileInputDelimited_16 = 0;
					int footer_tFileInputDelimited_16 = 0;
					int totalLinetFileInputDelimited_16 = 0;
					int limittFileInputDelimited_16 = -1;
					int lastLinetFileInputDelimited_16 = -1;

					char fieldSeparator_tFileInputDelimited_16[] = null;

					// support passing value (property: Field Separator) by
					// 'context.fs' or 'globalMap.get("fs")'.
					if (((String) "\t").length() > 0) {
						fieldSeparator_tFileInputDelimited_16 = ((String) "\t")
								.toCharArray();
					} else {
						throw new IllegalArgumentException(
								"Field Separator must be assigned a char.");
					}

					char rowSeparator_tFileInputDelimited_16[] = null;

					// support passing value (property: Row Separator) by
					// 'context.rs' or 'globalMap.get("rs")'.
					if (((String) "\n").length() > 0) {
						rowSeparator_tFileInputDelimited_16 = ((String) "\n")
								.toCharArray();
					} else {
						throw new IllegalArgumentException(
								"Row Separator must be assigned a char.");
					}

					Object filename_tFileInputDelimited_16 = /**
					 * Start field
					 * tFileInputDelimited_16:FILENAME
					 */
					context.folderMain + context.folderOutput + "ont.csv"/**
					 * End
					 * field tFileInputDelimited_16:FILENAME
					 */
					;
					com.talend.csv.CSVReader csvReadertFileInputDelimited_16 = null;

					try {

						String[] rowtFileInputDelimited_16 = null;
						int currentLinetFileInputDelimited_16 = 0;
						int outputLinetFileInputDelimited_16 = 0;
						try {// TD110 begin
							if (filename_tFileInputDelimited_16 instanceof java.io.InputStream) {

								int footer_value_tFileInputDelimited_16 = 0;
								if (footer_value_tFileInputDelimited_16 > 0) {
									throw new java.lang.Exception(
											"When the input source is a stream,footer shouldn't be bigger than 0.");
								}

								csvReadertFileInputDelimited_16 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_16,
										fieldSeparator_tFileInputDelimited_16[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_16 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_16)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_16[0]);
							}

							csvReadertFileInputDelimited_16
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_16[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_16[0] != '\r'))
								csvReadertFileInputDelimited_16
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_16[0]);

							csvReadertFileInputDelimited_16.setQuoteChar('"');

							csvReadertFileInputDelimited_16
									.setEscapeChar(csvReadertFileInputDelimited_16
											.getQuoteChar());

							if (footer_tFileInputDelimited_16 > 0) {
								for (totalLinetFileInputDelimited_16 = 0; totalLinetFileInputDelimited_16 < 1; totalLinetFileInputDelimited_16++) {
									csvReadertFileInputDelimited_16.readNext();
								}
								csvReadertFileInputDelimited_16
										.setSkipEmptyRecords(true);
								while (csvReadertFileInputDelimited_16
										.readNext()) {

									rowtFileInputDelimited_16 = csvReadertFileInputDelimited_16
											.getValues();
									if (!(rowtFileInputDelimited_16.length == 1 && ("\015")
											.equals(rowtFileInputDelimited_16[0]))) {// empty
																						// line
																						// when
																						// row
																						// separator
																						// is
																						// '\n'

										totalLinetFileInputDelimited_16++;

									}

								}
								int lastLineTemptFileInputDelimited_16 = totalLinetFileInputDelimited_16
										- footer_tFileInputDelimited_16 < 0 ? 0
										: totalLinetFileInputDelimited_16
												- footer_tFileInputDelimited_16;
								if (lastLinetFileInputDelimited_16 > 0) {
									lastLinetFileInputDelimited_16 = lastLinetFileInputDelimited_16 < lastLineTemptFileInputDelimited_16 ? lastLinetFileInputDelimited_16
											: lastLineTemptFileInputDelimited_16;
								} else {
									lastLinetFileInputDelimited_16 = lastLineTemptFileInputDelimited_16;
								}

								csvReadertFileInputDelimited_16.close();
								if (filename_tFileInputDelimited_16 instanceof java.io.InputStream) {
									csvReadertFileInputDelimited_16 = new com.talend.csv.CSVReader(
											(java.io.InputStream) filename_tFileInputDelimited_16,
											fieldSeparator_tFileInputDelimited_16[0],
											"ISO-8859-15");
								} else {
									csvReadertFileInputDelimited_16 = new com.talend.csv.CSVReader(
											new java.io.BufferedReader(
													new java.io.InputStreamReader(
															new java.io.FileInputStream(
																	String.valueOf(filename_tFileInputDelimited_16)),
															"ISO-8859-15")),
											fieldSeparator_tFileInputDelimited_16[0]);
								}
								csvReadertFileInputDelimited_16
										.setTrimWhitespace(false);
								if ((rowSeparator_tFileInputDelimited_16[0] != '\n')
										&& (rowSeparator_tFileInputDelimited_16[0] != '\r'))
									csvReadertFileInputDelimited_16
											.setLineEnd(""
													+ rowSeparator_tFileInputDelimited_16[0]);

								csvReadertFileInputDelimited_16
										.setQuoteChar('"');

								csvReadertFileInputDelimited_16
										.setEscapeChar(csvReadertFileInputDelimited_16
												.getQuoteChar());

							}

							if (limittFileInputDelimited_16 != 0) {
								for (currentLinetFileInputDelimited_16 = 0; currentLinetFileInputDelimited_16 < 1; currentLinetFileInputDelimited_16++) {
									csvReadertFileInputDelimited_16.readNext();
								}
							}
							csvReadertFileInputDelimited_16
									.setSkipEmptyRecords(true);

						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());

						}// TD110 end

						while (limittFileInputDelimited_16 != 0
								&& csvReadertFileInputDelimited_16 != null
								&& csvReadertFileInputDelimited_16.readNext()) {

							rowtFileInputDelimited_16 = csvReadertFileInputDelimited_16
									.getValues();

							if (rowtFileInputDelimited_16.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_16[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
								continue;
							}

							currentLinetFileInputDelimited_16++;

							if (lastLinetFileInputDelimited_16 > -1
									&& currentLinetFileInputDelimited_16 > lastLinetFileInputDelimited_16) {
								break;
							}
							outputLinetFileInputDelimited_16++;
							if (limittFileInputDelimited_16 > 0
									&& outputLinetFileInputDelimited_16 > limittFileInputDelimited_16) {
								break;
							}

							row21 = null;

							boolean whetherReject_tFileInputDelimited_16 = false;
							row21 = new row21Struct();
							try {

								if (rowtFileInputDelimited_16.length == 1
										&& ("\015")
												.equals(rowtFileInputDelimited_16[0])) {// empty
																						// line
																						// when
																						// row
																						// separator
																						// is
																						// '\n'

									row21.HLEVEL = null;

									row21.Name = null;

									row21.Path = null;

									row21.DataType = null;

									row21.Update_Date = null;

									row21.Import_Date = null;

									row21.Download_Date = null;

									row21.PathID = null;

									row21.visual = null;

									row21.itemCode = null;

									row21.source = null;

									row21.xml = null;

									row21.m_applied_path = null;

								} else {

									int columnIndexWithD_tFileInputDelimited_16 = 0; // Column
																						// Index

									columnIndexWithD_tFileInputDelimited_16 = 0;

									if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

										if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
												.length() > 0) {

											row21.HLEVEL = ParserUtils
													.parseTo_Integer(rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]);

										} else {
											row21.HLEVEL = null;
										}

									} else {
										row21.HLEVEL = null;
									}

									columnIndexWithD_tFileInputDelimited_16 = 1;

									if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

										row21.Name = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

									} else {
										row21.Name = null;
									}

									columnIndexWithD_tFileInputDelimited_16 = 2;

									if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

										row21.Path = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

									} else {
										row21.Path = null;
									}

									columnIndexWithD_tFileInputDelimited_16 = 3;

									if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

										row21.DataType = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

									} else {
										row21.DataType = null;
									}

									columnIndexWithD_tFileInputDelimited_16 = 4;

									if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

										row21.Update_Date = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

									} else {
										row21.Update_Date = null;
									}

									columnIndexWithD_tFileInputDelimited_16 = 5;

									if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

										row21.Import_Date = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

									} else {
										row21.Import_Date = null;
									}

									columnIndexWithD_tFileInputDelimited_16 = 6;

									if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

										row21.Download_Date = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

									} else {
										row21.Download_Date = null;
									}

									columnIndexWithD_tFileInputDelimited_16 = 7;

									if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

										row21.PathID = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

									} else {
										row21.PathID = null;
									}

									columnIndexWithD_tFileInputDelimited_16 = 8;

									if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

										row21.visual = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

									} else {
										row21.visual = null;
									}

									columnIndexWithD_tFileInputDelimited_16 = 9;

									if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

										row21.itemCode = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

									} else {
										row21.itemCode = null;
									}

									columnIndexWithD_tFileInputDelimited_16 = 10;

									if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

										row21.source = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

									} else {
										row21.source = null;
									}

									columnIndexWithD_tFileInputDelimited_16 = 11;

									if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

										row21.xml = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

									} else {
										row21.xml = null;
									}

									columnIndexWithD_tFileInputDelimited_16 = 12;

									if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

										row21.m_applied_path = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

									} else {
										row21.m_applied_path = null;
									}

								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputDelimited_16 = true;

								System.err.println(e.getMessage());
								row21 = null;

							}

							/**
							 * [tFileInputDelimited_16 begin ] stop
							 */
							/**
							 * [tFileInputDelimited_16 main ] start
							 */

							currentComponent = "tFileInputDelimited_16";

							tos_count_tFileInputDelimited_16++;

							/**
							 * [tFileInputDelimited_16 main ] stop
							 */
							// Start of branch "row21"
							if (row21 != null) {

								/**
								 * [tMap_10 main ] start
								 */

								currentComponent = "tMap_10";

								boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_10 = false;
								boolean mainRowRejected_tMap_10 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row22"
								// /////////////////////////////////////////////

								boolean forceLooprow22 = false;

								row22Struct row22ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_10) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_10 = false;

									row22HashKey.OID = row21.itemCode;

									row22HashKey.hashCodeDirty = true;

									tHash_Lookup_row22.lookup(row22HashKey);

									if (!tHash_Lookup_row22.hasNext()) { // G_TM_M_090

										forceLooprow22 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								else { // G 20 - G 21
									forceLooprow22 = true;
								} // G 21

								row22Struct row22 = null;

								while ((tHash_Lookup_row22 != null && tHash_Lookup_row22
										.hasNext()) || forceLooprow22) { // G_TM_M_043

									// CALL close loop of lookup 'row22'

									row22Struct fromLookup_row22 = null;
									row22 = row22Default;

									if (!forceLooprow22) { // G 46

										fromLookup_row22 = tHash_Lookup_row22
												.next();

										if (fromLookup_row22 != null) {
											row22 = fromLookup_row22;
										}

									} // G 46

									forceLooprow22 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
										// ###############################
										// # Output tables

										out11 = null;

										// # Output table : 'out11'
										// # Filter conditions
										if (

										row21.Path != null
												&& row22.CodeListItem != null

										) {
											out11_tmp.HLEVEL = row21.HLEVEL + 1;
											out11_tmp.Name = row22.TranslatedText;
											out11_tmp.Path = !row21.m_applied_path
													.equalsIgnoreCase("@") ? "\\"
													+ row22.ItemGroupOID
													+ "\\"
													+ row22.CodeListItem + "\\"
													: row22.CodeListItem
															.length() < 20 ? row21.Path
															+ row22.CodeListItem
															+ "\\"
															: row21.Path
																	+ (row21.Path
																			+ "\\" + row22.CodeListItem)
																			.hashCode()
																	+ "\\";
											out11_tmp.DataType = "String";
											out11_tmp.Update_Date = row21.Update_Date;
											out11_tmp.Import_Date = row21.Import_Date;
											out11_tmp.Download_Date = row21.Download_Date;
											out11_tmp.PathID = row21.PathID;
											out11_tmp.visual = row21.m_applied_path
													.equalsIgnoreCase("@") ? "LAE"
													: "RAE";
											out11_tmp.codeList = "";
											out11_tmp.source = row21.source;
											out11_tmp.xml = "";
											out11_tmp.m_applied_path = row21.m_applied_path;
											out11 = out11_tmp;
										} // closing filter/reject
											// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_10 = false;

									tos_count_tMap_10++;

									/**
									 * [tMap_10 main ] stop
									 */
									// Start of branch "out11"
									if (out11 != null) {

										/**
										 * [tFileOutputDelimited_14 main ] start
										 */

										currentComponent = "tFileOutputDelimited_14";

										String[] rowtFileOutputDelimited_14 = new String[13];

										rowtFileOutputDelimited_14[0] = out11.HLEVEL == null ? ""
												: String.valueOf(out11.HLEVEL);

										rowtFileOutputDelimited_14[1] = out11.Name == null ? ""
												: out11.Name;

										rowtFileOutputDelimited_14[2] = out11.Path == null ? ""
												: out11.Path;

										rowtFileOutputDelimited_14[3] = out11.DataType == null ? ""
												: out11.DataType;

										rowtFileOutputDelimited_14[4] = out11.Update_Date == null ? ""
												: out11.Update_Date;

										rowtFileOutputDelimited_14[5] = out11.Import_Date == null ? ""
												: out11.Import_Date;

										rowtFileOutputDelimited_14[6] = out11.Download_Date == null ? ""
												: out11.Download_Date;

										rowtFileOutputDelimited_14[7] = out11.PathID == null ? ""
												: out11.PathID;

										rowtFileOutputDelimited_14[8] = out11.visual == null ? ""
												: out11.visual;

										rowtFileOutputDelimited_14[9] = out11.codeList == null ? ""
												: out11.codeList;

										rowtFileOutputDelimited_14[10] = out11.source == null ? ""
												: out11.source;

										rowtFileOutputDelimited_14[11] = out11.xml == null ? ""
												: out11.xml;

										rowtFileOutputDelimited_14[12] = out11.m_applied_path == null ? ""
												: out11.m_applied_path;

										nb_line_tFileOutputDelimited_14++;
										CsvWritertFileOutputDelimited_14
												.writeNext(rowtFileOutputDelimited_14);

										tos_count_tFileOutputDelimited_14++;

										/**
										 * [tFileOutputDelimited_14 main ] stop
										 */

									} // End of branch "out11"

								} // close loop of lookup 'row22' // G_TM_M_043

							} // End of branch "row21"

							/**
							 * [tFileInputDelimited_16 end ] start
							 */

							currentComponent = "tFileInputDelimited_16";

							nb_line_tFileInputDelimited_16++;
						}

					} finally {
						if (!(filename_tFileInputDelimited_16 instanceof java.io.InputStream)) {
							if (csvReadertFileInputDelimited_16 != null) {
								csvReadertFileInputDelimited_16.close();
							}
						}
						if (csvReadertFileInputDelimited_16 != null) {
							globalMap.put("tFileInputDelimited_16_NB_LINE",
									nb_line_tFileInputDelimited_16);
						}
					}

					ok_Hash.put("tFileInputDelimited_16", true);
					end_Hash.put("tFileInputDelimited_16",
							System.currentTimeMillis());

					/**
					 * [tFileInputDelimited_16 end ] stop
					 */

					/**
					 * [tMap_10 end ] start
					 */

					currentComponent = "tMap_10";

					// ###############################
					// # Lookup hashes releasing
					if (tHash_Lookup_row22 != null) {
						tHash_Lookup_row22.endGet();
					}
					globalMap.remove("tHash_Lookup_row22");

					// ###############################

					ok_Hash.put("tMap_10", true);
					end_Hash.put("tMap_10", System.currentTimeMillis());

					/**
					 * [tMap_10 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_14 end ] start
					 */

					currentComponent = "tFileOutputDelimited_14";

				} finally {

					if (CsvWritertFileOutputDelimited_14 != null) {
						CsvWritertFileOutputDelimited_14.close();
					}
					globalMap.put("tFileOutputDelimited_14_NB_LINE",
							nb_line_tFileOutputDelimited_14);
				} // finally

				ok_Hash.put("tFileOutputDelimited_14", true);
				end_Hash.put("tFileOutputDelimited_14",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_14 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		} finally {
			// free memory for "tMap_10"
			globalMap.remove("tHash_Lookup_row22");

		}

		globalMap.put("tFileInputDelimited_16_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row17Struct implements
			routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row23Struct implements
			routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements
			routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_10Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row10Struct row10 = new row10Struct();

				row6Struct row6 = new row6Struct();

				row15Struct row15 = new row15Struct();

				row17Struct row17 = new row17Struct();

				row23Struct row23 = new row23Struct();

				row11Struct row11 = new row11Struct();
				row12Struct row12 = new row12Struct();

				/**
				 * [tFileOutputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_7", false);
				start_Hash.put("tFileOutputDelimited_7",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_7";

				int tos_count_tFileOutputDelimited_7 = 0;

				String fileName_tFileOutputDelimited_7 = "";
				fileName_tFileOutputDelimited_7 = (new java.io.File(
						context.folderMain + context.folderOutput + "ont.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_7 = null;
				String extension_tFileOutputDelimited_7 = null;
				String directory_tFileOutputDelimited_7 = null;
				if ((fileName_tFileOutputDelimited_7.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_7.lastIndexOf(".") < fileName_tFileOutputDelimited_7
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
						extension_tFileOutputDelimited_7 = "";
					} else {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(0, fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
						extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
							.substring(0, fileName_tFileOutputDelimited_7
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_7.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(0, fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
						extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
						extension_tFileOutputDelimited_7 = "";
					}
					directory_tFileOutputDelimited_7 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_7 = true;
				java.io.File filetFileOutputDelimited_7 = new java.io.File(
						fileName_tFileOutputDelimited_7);
				globalMap.put("tFileOutputDelimited_7_FILE_NAME",
						fileName_tFileOutputDelimited_7);
				if (filetFileOutputDelimited_7.exists()) {
					isFileGenerated_tFileOutputDelimited_7 = false;
				}

				String[] headColutFileOutputDelimited_7 = new String[13];
				class CSVBasicSet_tFileOutputDelimited_7 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_7[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_7 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_7[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_7[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_7 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_7[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_7[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_7 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_7[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_7 = 0;
				int splitEvery_tFileOutputDelimited_7 = 1000;
				int splitedFileNo_tFileOutputDelimited_7 = 0;
				int currentRow_tFileOutputDelimited_7 = 0;

				CSVBasicSet_tFileOutputDelimited_7 csvSettings_tFileOutputDelimited_7 = new CSVBasicSet_tFileOutputDelimited_7();
				csvSettings_tFileOutputDelimited_7.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_7.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_7.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_7 != null
						&& directory_tFileOutputDelimited_7.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_7 = new java.io.File(
							directory_tFileOutputDelimited_7);
					if (!dir_tFileOutputDelimited_7.exists()) {
						dir_tFileOutputDelimited_7.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_7 = null;
				try {
					CsvWritertFileOutputDelimited_7 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_7,
													true), "ISO-8859-15")));
					CsvWritertFileOutputDelimited_7
							.setSeparator(csvSettings_tFileOutputDelimited_7
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_7
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_7.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_7.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_7.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_7
										.getRowDelim());
					}

					if (filetFileOutputDelimited_7.length() == 0) {

						headColutFileOutputDelimited_7[0] = "HLEVEL";

						headColutFileOutputDelimited_7[1] = "Name";

						headColutFileOutputDelimited_7[2] = "Path";

						headColutFileOutputDelimited_7[3] = "DataType";

						headColutFileOutputDelimited_7[4] = "Update_Date";

						headColutFileOutputDelimited_7[5] = "Import_Date";

						headColutFileOutputDelimited_7[6] = "Download_Date";

						headColutFileOutputDelimited_7[7] = "PathID";

						headColutFileOutputDelimited_7[8] = "visual";

						headColutFileOutputDelimited_7[9] = "codeList";

						headColutFileOutputDelimited_7[10] = "source";

						headColutFileOutputDelimited_7[11] = "xml";

						headColutFileOutputDelimited_7[12] = "m_applied_path";

						CsvWritertFileOutputDelimited_7
								.writeNext(headColutFileOutputDelimited_7);
						CsvWritertFileOutputDelimited_7.flush();

					}

					CsvWritertFileOutputDelimited_7
							.setEscapeChar(csvSettings_tFileOutputDelimited_7
									.getEscapeChar());
					CsvWritertFileOutputDelimited_7
							.setQuoteChar(csvSettings_tFileOutputDelimited_7
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_7
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_7 begin ] stop
					 */

					/**
					 * [tUniqRow_4 begin ] start
					 */

					ok_Hash.put("tUniqRow_4", false);
					start_Hash.put("tUniqRow_4", System.currentTimeMillis());
					currentComponent = "tUniqRow_4";

					int tos_count_tUniqRow_4 = 0;

					class KeyStruct_tUniqRow_4 {

						private static final int DEFAULT_HASHCODE = 1;
						private static final int PRIME = 31;
						private int hashCode = DEFAULT_HASHCODE;
						public boolean hashCodeDirty = true;

						String Path;

						@Override
						public int hashCode() {
							if (this.hashCodeDirty) {
								final int prime = PRIME;
								int result = DEFAULT_HASHCODE;

								result = prime
										* result
										+ ((this.Path == null) ? 0 : this.Path
												.hashCode());

								this.hashCode = result;
								this.hashCodeDirty = false;
							}
							return this.hashCode;
						}

						@Override
						public boolean equals(Object obj) {
							if (this == obj)
								return true;
							if (obj == null)
								return false;
							if (getClass() != obj.getClass())
								return false;
							final KeyStruct_tUniqRow_4 other = (KeyStruct_tUniqRow_4) obj;

							if (this.Path == null) {
								if (other.Path != null)
									return false;
							} else if (!this.Path.equals(other.Path))
								return false;

							return true;
						}

					}

					int nb_uniques_tUniqRow_4 = 0;
					int nb_duplicates_tUniqRow_4 = 0;
					KeyStruct_tUniqRow_4 finder_tUniqRow_4 = new KeyStruct_tUniqRow_4();
					java.util.Set<KeyStruct_tUniqRow_4> keystUniqRow_4 = new java.util.HashSet<KeyStruct_tUniqRow_4>();

					/**
					 * [tUniqRow_4 begin ] stop
					 */

					/**
					 * [tUnite_1 begin ] start
					 */

					ok_Hash.put("tUnite_1", false);
					start_Hash.put("tUnite_1", System.currentTimeMillis());
					currentComponent = "tUnite_1";

					int tos_count_tUnite_1 = 0;

					int nb_line_tUnite_1 = 0;

					/**
					 * [tUnite_1 begin ] stop
					 */
					/**
					 * [tFileInputDelimited_10 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_10", false);
					start_Hash.put("tFileInputDelimited_10",
							System.currentTimeMillis());
					currentComponent = "tFileInputDelimited_10";

					int tos_count_tFileInputDelimited_10 = 0;

					int nb_line_tFileInputDelimited_10 = 0;
					int footer_tFileInputDelimited_10 = 0;
					int totalLinetFileInputDelimited_10 = 0;
					int limittFileInputDelimited_10 = -1;
					int lastLinetFileInputDelimited_10 = -1;

					char fieldSeparator_tFileInputDelimited_10[] = null;

					// support passing value (property: Field Separator) by
					// 'context.fs' or 'globalMap.get("fs")'.
					if (((String) "\t").length() > 0) {
						fieldSeparator_tFileInputDelimited_10 = ((String) "\t")
								.toCharArray();
					} else {
						throw new IllegalArgumentException(
								"Field Separator must be assigned a char.");
					}

					char rowSeparator_tFileInputDelimited_10[] = null;

					// support passing value (property: Row Separator) by
					// 'context.rs' or 'globalMap.get("rs")'.
					if (((String) "\n").length() > 0) {
						rowSeparator_tFileInputDelimited_10 = ((String) "\n")
								.toCharArray();
					} else {
						throw new IllegalArgumentException(
								"Row Separator must be assigned a char.");
					}

					Object filename_tFileInputDelimited_10 = /**
					 * Start field
					 * tFileInputDelimited_10:FILENAME
					 */
					((String) globalMap.get("tCreateTemporaryFile_10_FILEPATH"))/**
					 * 
					 * End field tFileInputDelimited_10:FILENAME
					 */
					;
					com.talend.csv.CSVReader csvReadertFileInputDelimited_10 = null;

					try {

						String[] rowtFileInputDelimited_10 = null;
						int currentLinetFileInputDelimited_10 = 0;
						int outputLinetFileInputDelimited_10 = 0;
						try {// TD110 begin
							if (filename_tFileInputDelimited_10 instanceof java.io.InputStream) {

								int footer_value_tFileInputDelimited_10 = 0;
								if (footer_value_tFileInputDelimited_10 > 0) {
									throw new java.lang.Exception(
											"When the input source is a stream,footer shouldn't be bigger than 0.");
								}

								csvReadertFileInputDelimited_10 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_10,
										fieldSeparator_tFileInputDelimited_10[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_10 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_10)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_10[0]);
							}

							csvReadertFileInputDelimited_10
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_10[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_10[0] != '\r'))
								csvReadertFileInputDelimited_10
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_10[0]);

							csvReadertFileInputDelimited_10.setQuoteChar('"');

							csvReadertFileInputDelimited_10
									.setEscapeChar(csvReadertFileInputDelimited_10
											.getQuoteChar());

							if (footer_tFileInputDelimited_10 > 0) {
								for (totalLinetFileInputDelimited_10 = 0; totalLinetFileInputDelimited_10 < 0; totalLinetFileInputDelimited_10++) {
									csvReadertFileInputDelimited_10.readNext();
								}
								csvReadertFileInputDelimited_10
										.setSkipEmptyRecords(true);
								while (csvReadertFileInputDelimited_10
										.readNext()) {

									rowtFileInputDelimited_10 = csvReadertFileInputDelimited_10
											.getValues();
									if (!(rowtFileInputDelimited_10.length == 1 && ("\015")
											.equals(rowtFileInputDelimited_10[0]))) {// empty
																						// line
																						// when
																						// row
																						// separator
																						// is
																						// '\n'

										totalLinetFileInputDelimited_10++;

									}

								}
								int lastLineTemptFileInputDelimited_10 = totalLinetFileInputDelimited_10
										- footer_tFileInputDelimited_10 < 0 ? 0
										: totalLinetFileInputDelimited_10
												- footer_tFileInputDelimited_10;
								if (lastLinetFileInputDelimited_10 > 0) {
									lastLinetFileInputDelimited_10 = lastLinetFileInputDelimited_10 < lastLineTemptFileInputDelimited_10 ? lastLinetFileInputDelimited_10
											: lastLineTemptFileInputDelimited_10;
								} else {
									lastLinetFileInputDelimited_10 = lastLineTemptFileInputDelimited_10;
								}

								csvReadertFileInputDelimited_10.close();
								if (filename_tFileInputDelimited_10 instanceof java.io.InputStream) {
									csvReadertFileInputDelimited_10 = new com.talend.csv.CSVReader(
											(java.io.InputStream) filename_tFileInputDelimited_10,
											fieldSeparator_tFileInputDelimited_10[0],
											"ISO-8859-15");
								} else {
									csvReadertFileInputDelimited_10 = new com.talend.csv.CSVReader(
											new java.io.BufferedReader(
													new java.io.InputStreamReader(
															new java.io.FileInputStream(
																	String.valueOf(filename_tFileInputDelimited_10)),
															"ISO-8859-15")),
											fieldSeparator_tFileInputDelimited_10[0]);
								}
								csvReadertFileInputDelimited_10
										.setTrimWhitespace(false);
								if ((rowSeparator_tFileInputDelimited_10[0] != '\n')
										&& (rowSeparator_tFileInputDelimited_10[0] != '\r'))
									csvReadertFileInputDelimited_10
											.setLineEnd(""
													+ rowSeparator_tFileInputDelimited_10[0]);

								csvReadertFileInputDelimited_10
										.setQuoteChar('"');

								csvReadertFileInputDelimited_10
										.setEscapeChar(csvReadertFileInputDelimited_10
												.getQuoteChar());

							}

							if (limittFileInputDelimited_10 != 0) {
								for (currentLinetFileInputDelimited_10 = 0; currentLinetFileInputDelimited_10 < 0; currentLinetFileInputDelimited_10++) {
									csvReadertFileInputDelimited_10.readNext();
								}
							}
							csvReadertFileInputDelimited_10
									.setSkipEmptyRecords(true);

						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());

						}// TD110 end

						while (limittFileInputDelimited_10 != 0
								&& csvReadertFileInputDelimited_10 != null
								&& csvReadertFileInputDelimited_10.readNext()) {

							rowtFileInputDelimited_10 = csvReadertFileInputDelimited_10
									.getValues();

							if (rowtFileInputDelimited_10.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_10[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
								continue;
							}

							currentLinetFileInputDelimited_10++;

							if (lastLinetFileInputDelimited_10 > -1
									&& currentLinetFileInputDelimited_10 > lastLinetFileInputDelimited_10) {
								break;
							}
							outputLinetFileInputDelimited_10++;
							if (limittFileInputDelimited_10 > 0
									&& outputLinetFileInputDelimited_10 > limittFileInputDelimited_10) {
								break;
							}

							row10 = null;

							boolean whetherReject_tFileInputDelimited_10 = false;
							row10 = new row10Struct();
							try {

								if (rowtFileInputDelimited_10.length == 1
										&& ("\015")
												.equals(rowtFileInputDelimited_10[0])) {// empty
																						// line
																						// when
																						// row
																						// separator
																						// is
																						// '\n'

									row10.HLEVEL = null;

									row10.Name = null;

									row10.Path = null;

									row10.DataType = null;

									row10.Update_Date = null;

									row10.Import_Date = null;

									row10.Download_Date = null;

									row10.PathID = null;

									row10.visual = null;

									row10.codeList = null;

									row10.source = null;

									row10.xml = null;

									row10.m_applied_path = null;

								} else {

									int columnIndexWithD_tFileInputDelimited_10 = 0; // Column
																						// Index

									columnIndexWithD_tFileInputDelimited_10 = 0;

									if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

										if (rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10]
												.length() > 0) {

											row10.HLEVEL = ParserUtils
													.parseTo_Integer(rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10]);

										} else {
											row10.HLEVEL = null;
										}

									} else {
										row10.HLEVEL = null;
									}

									columnIndexWithD_tFileInputDelimited_10 = 1;

									if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

										row10.Name = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

									} else {
										row10.Name = null;
									}

									columnIndexWithD_tFileInputDelimited_10 = 2;

									if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

										row10.Path = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

									} else {
										row10.Path = null;
									}

									columnIndexWithD_tFileInputDelimited_10 = 3;

									if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

										row10.DataType = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

									} else {
										row10.DataType = null;
									}

									columnIndexWithD_tFileInputDelimited_10 = 4;

									if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

										row10.Update_Date = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

									} else {
										row10.Update_Date = null;
									}

									columnIndexWithD_tFileInputDelimited_10 = 5;

									if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

										row10.Import_Date = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

									} else {
										row10.Import_Date = null;
									}

									columnIndexWithD_tFileInputDelimited_10 = 6;

									if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

										row10.Download_Date = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

									} else {
										row10.Download_Date = null;
									}

									columnIndexWithD_tFileInputDelimited_10 = 7;

									if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

										row10.PathID = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

									} else {
										row10.PathID = null;
									}

									columnIndexWithD_tFileInputDelimited_10 = 8;

									if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

										row10.visual = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

									} else {
										row10.visual = null;
									}

									columnIndexWithD_tFileInputDelimited_10 = 9;

									if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

										row10.codeList = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

									} else {
										row10.codeList = null;
									}

									columnIndexWithD_tFileInputDelimited_10 = 10;

									if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

										row10.source = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

									} else {
										row10.source = null;
									}

									columnIndexWithD_tFileInputDelimited_10 = 11;

									if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

										row10.xml = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

									} else {
										row10.xml = null;
									}

									columnIndexWithD_tFileInputDelimited_10 = 12;

									if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

										row10.m_applied_path = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

									} else {
										row10.m_applied_path = null;
									}

								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputDelimited_10 = true;

								System.err.println(e.getMessage());
								row10 = null;

							}

							/**
							 * [tFileInputDelimited_10 begin ] stop
							 */
							/**
							 * [tFileInputDelimited_10 main ] start
							 */

							currentComponent = "tFileInputDelimited_10";

							tos_count_tFileInputDelimited_10++;

							/**
							 * [tFileInputDelimited_10 main ] stop
							 */
							// Start of branch "row10"
							if (row10 != null) {

								/**
								 * [tUnite_1 main ] start
								 */

								currentComponent = "tUnite_1";

								// ////////

								// for output
								row11 = new row11Struct();

								row11.HLEVEL = row10.HLEVEL;
								row11.Name = row10.Name;
								row11.Path = row10.Path;
								row11.DataType = row10.DataType;
								row11.Update_Date = row10.Update_Date;
								row11.Import_Date = row10.Import_Date;
								row11.Download_Date = row10.Download_Date;
								row11.PathID = row10.PathID;
								row11.visual = row10.visual;
								row11.codeList = row10.codeList;
								row11.source = row10.source;
								row11.xml = row10.xml;
								row11.m_applied_path = row10.m_applied_path;

								nb_line_tUnite_1++;

								// ////////

								tos_count_tUnite_1++;

								/**
								 * [tUnite_1 main ] stop
								 */

								/**
								 * [tUniqRow_4 main ] start
								 */

								currentComponent = "tUniqRow_4";

								row12 = null;
								if (row11.Path == null) {
									finder_tUniqRow_4.Path = null;
								} else {
									finder_tUniqRow_4.Path = row11.Path
											.toLowerCase();
								}
								finder_tUniqRow_4.hashCodeDirty = true;
								if (!keystUniqRow_4.contains(finder_tUniqRow_4)) {
									KeyStruct_tUniqRow_4 new_tUniqRow_4 = new KeyStruct_tUniqRow_4();

									if (row11.Path == null) {
										new_tUniqRow_4.Path = null;
									} else {
										new_tUniqRow_4.Path = row11.Path
												.toLowerCase();
									}

									keystUniqRow_4.add(new_tUniqRow_4);
									if (row12 == null) {
										row12 = new row12Struct();
									}
									row12.HLEVEL = row11.HLEVEL;
									row12.Name = row11.Name;
									row12.Path = row11.Path;
									row12.DataType = row11.DataType;
									row12.Update_Date = row11.Update_Date;
									row12.Import_Date = row11.Import_Date;
									row12.Download_Date = row11.Download_Date;
									row12.PathID = row11.PathID;
									row12.visual = row11.visual;
									row12.codeList = row11.codeList;
									row12.source = row11.source;
									row12.xml = row11.xml;
									row12.m_applied_path = row11.m_applied_path;
									nb_uniques_tUniqRow_4++;
								} else {
									nb_duplicates_tUniqRow_4++;
								}

								tos_count_tUniqRow_4++;

								/**
								 * [tUniqRow_4 main ] stop
								 */
								// Start of branch "row12"
								if (row12 != null) {

									/**
									 * [tFileOutputDelimited_7 main ] start
									 */

									currentComponent = "tFileOutputDelimited_7";

									String[] rowtFileOutputDelimited_7 = new String[13];

									rowtFileOutputDelimited_7[0] = row12.HLEVEL == null ? ""
											: String.valueOf(row12.HLEVEL);

									rowtFileOutputDelimited_7[1] = row12.Name == null ? ""
											: row12.Name;

									rowtFileOutputDelimited_7[2] = row12.Path == null ? ""
											: row12.Path;

									rowtFileOutputDelimited_7[3] = row12.DataType == null ? ""
											: row12.DataType;

									rowtFileOutputDelimited_7[4] = row12.Update_Date == null ? ""
											: row12.Update_Date;

									rowtFileOutputDelimited_7[5] = row12.Import_Date == null ? ""
											: row12.Import_Date;

									rowtFileOutputDelimited_7[6] = row12.Download_Date == null ? ""
											: row12.Download_Date;

									rowtFileOutputDelimited_7[7] = row12.PathID == null ? ""
											: row12.PathID;

									rowtFileOutputDelimited_7[8] = row12.visual == null ? ""
											: row12.visual;

									rowtFileOutputDelimited_7[9] = row12.codeList == null ? ""
											: row12.codeList;

									rowtFileOutputDelimited_7[10] = row12.source == null ? ""
											: row12.source;

									rowtFileOutputDelimited_7[11] = row12.xml == null ? ""
											: row12.xml;

									rowtFileOutputDelimited_7[12] = row12.m_applied_path == null ? ""
											: row12.m_applied_path;

									nb_line_tFileOutputDelimited_7++;
									CsvWritertFileOutputDelimited_7
											.writeNext(rowtFileOutputDelimited_7);

									tos_count_tFileOutputDelimited_7++;

									/**
									 * [tFileOutputDelimited_7 main ] stop
									 */

								} // End of branch "row12"

							} // End of branch "row10"

							/**
							 * [tFileInputDelimited_10 end ] start
							 */

							currentComponent = "tFileInputDelimited_10";

							nb_line_tFileInputDelimited_10++;
						}

					} finally {
						if (!(filename_tFileInputDelimited_10 instanceof java.io.InputStream)) {
							if (csvReadertFileInputDelimited_10 != null) {
								csvReadertFileInputDelimited_10.close();
							}
						}
						if (csvReadertFileInputDelimited_10 != null) {
							globalMap.put("tFileInputDelimited_10_NB_LINE",
									nb_line_tFileInputDelimited_10);
						}
					}

					ok_Hash.put("tFileInputDelimited_10", true);
					end_Hash.put("tFileInputDelimited_10",
							System.currentTimeMillis());

					/**
					 * [tFileInputDelimited_10 end ] stop
					 */
					/**
					 * [tFileInputDelimited_4 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_4", false);
					start_Hash.put("tFileInputDelimited_4",
							System.currentTimeMillis());
					currentComponent = "tFileInputDelimited_4";

					int tos_count_tFileInputDelimited_4 = 0;

					int nb_line_tFileInputDelimited_4 = 0;
					int footer_tFileInputDelimited_4 = 0;
					int totalLinetFileInputDelimited_4 = 0;
					int limittFileInputDelimited_4 = -1;
					int lastLinetFileInputDelimited_4 = -1;

					char fieldSeparator_tFileInputDelimited_4[] = null;

					// support passing value (property: Field Separator) by
					// 'context.fs' or 'globalMap.get("fs")'.
					if (((String) "\t").length() > 0) {
						fieldSeparator_tFileInputDelimited_4 = ((String) "\t")
								.toCharArray();
					} else {
						throw new IllegalArgumentException(
								"Field Separator must be assigned a char.");
					}

					char rowSeparator_tFileInputDelimited_4[] = null;

					// support passing value (property: Row Separator) by
					// 'context.rs' or 'globalMap.get("rs")'.
					if (((String) "\n").length() > 0) {
						rowSeparator_tFileInputDelimited_4 = ((String) "\n")
								.toCharArray();
					} else {
						throw new IllegalArgumentException(
								"Row Separator must be assigned a char.");
					}

					Object filename_tFileInputDelimited_4 = /**
					 * Start field
					 * tFileInputDelimited_4:FILENAME
					 */
					((String) globalMap.get("tCreateTemporaryFile_4_FILEPATH"))/**
					 * 
					 * End field tFileInputDelimited_4:FILENAME
					 */
					;
					com.talend.csv.CSVReader csvReadertFileInputDelimited_4 = null;

					try {

						String[] rowtFileInputDelimited_4 = null;
						int currentLinetFileInputDelimited_4 = 0;
						int outputLinetFileInputDelimited_4 = 0;
						try {// TD110 begin
							if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {

								int footer_value_tFileInputDelimited_4 = 0;
								if (footer_value_tFileInputDelimited_4 > 0) {
									throw new java.lang.Exception(
											"When the input source is a stream,footer shouldn't be bigger than 0.");
								}

								csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_4,
										fieldSeparator_tFileInputDelimited_4[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_4)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_4[0]);
							}

							csvReadertFileInputDelimited_4
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_4[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_4[0] != '\r'))
								csvReadertFileInputDelimited_4
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_4[0]);

							csvReadertFileInputDelimited_4.setQuoteChar('"');

							csvReadertFileInputDelimited_4
									.setEscapeChar(csvReadertFileInputDelimited_4
											.getQuoteChar());

							if (footer_tFileInputDelimited_4 > 0) {
								for (totalLinetFileInputDelimited_4 = 0; totalLinetFileInputDelimited_4 < 0; totalLinetFileInputDelimited_4++) {
									csvReadertFileInputDelimited_4.readNext();
								}
								csvReadertFileInputDelimited_4
										.setSkipEmptyRecords(true);
								while (csvReadertFileInputDelimited_4
										.readNext()) {

									rowtFileInputDelimited_4 = csvReadertFileInputDelimited_4
											.getValues();
									if (!(rowtFileInputDelimited_4.length == 1 && ("\015")
											.equals(rowtFileInputDelimited_4[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

										totalLinetFileInputDelimited_4++;

									}

								}
								int lastLineTemptFileInputDelimited_4 = totalLinetFileInputDelimited_4
										- footer_tFileInputDelimited_4 < 0 ? 0
										: totalLinetFileInputDelimited_4
												- footer_tFileInputDelimited_4;
								if (lastLinetFileInputDelimited_4 > 0) {
									lastLinetFileInputDelimited_4 = lastLinetFileInputDelimited_4 < lastLineTemptFileInputDelimited_4 ? lastLinetFileInputDelimited_4
											: lastLineTemptFileInputDelimited_4;
								} else {
									lastLinetFileInputDelimited_4 = lastLineTemptFileInputDelimited_4;
								}

								csvReadertFileInputDelimited_4.close();
								if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {
									csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
											(java.io.InputStream) filename_tFileInputDelimited_4,
											fieldSeparator_tFileInputDelimited_4[0],
											"ISO-8859-15");
								} else {
									csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
											new java.io.BufferedReader(
													new java.io.InputStreamReader(
															new java.io.FileInputStream(
																	String.valueOf(filename_tFileInputDelimited_4)),
															"ISO-8859-15")),
											fieldSeparator_tFileInputDelimited_4[0]);
								}
								csvReadertFileInputDelimited_4
										.setTrimWhitespace(false);
								if ((rowSeparator_tFileInputDelimited_4[0] != '\n')
										&& (rowSeparator_tFileInputDelimited_4[0] != '\r'))
									csvReadertFileInputDelimited_4
											.setLineEnd(""
													+ rowSeparator_tFileInputDelimited_4[0]);

								csvReadertFileInputDelimited_4
										.setQuoteChar('"');

								csvReadertFileInputDelimited_4
										.setEscapeChar(csvReadertFileInputDelimited_4
												.getQuoteChar());

							}

							if (limittFileInputDelimited_4 != 0) {
								for (currentLinetFileInputDelimited_4 = 0; currentLinetFileInputDelimited_4 < 0; currentLinetFileInputDelimited_4++) {
									csvReadertFileInputDelimited_4.readNext();
								}
							}
							csvReadertFileInputDelimited_4
									.setSkipEmptyRecords(true);

						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());

						}// TD110 end

						while (limittFileInputDelimited_4 != 0
								&& csvReadertFileInputDelimited_4 != null
								&& csvReadertFileInputDelimited_4.readNext()) {

							rowtFileInputDelimited_4 = csvReadertFileInputDelimited_4
									.getValues();

							if (rowtFileInputDelimited_4.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_4[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
								continue;
							}

							currentLinetFileInputDelimited_4++;

							if (lastLinetFileInputDelimited_4 > -1
									&& currentLinetFileInputDelimited_4 > lastLinetFileInputDelimited_4) {
								break;
							}
							outputLinetFileInputDelimited_4++;
							if (limittFileInputDelimited_4 > 0
									&& outputLinetFileInputDelimited_4 > limittFileInputDelimited_4) {
								break;
							}

							row6 = null;

							boolean whetherReject_tFileInputDelimited_4 = false;
							row6 = new row6Struct();
							try {

								if (rowtFileInputDelimited_4.length == 1
										&& ("\015")
												.equals(rowtFileInputDelimited_4[0])) {// empty
																						// line
																						// when
																						// row
																						// separator
																						// is
																						// '\n'

									row6.HLEVEL = null;

									row6.Name = null;

									row6.Path = null;

									row6.DataType = null;

									row6.Update_Date = null;

									row6.Import_Date = null;

									row6.Download_Date = null;

									row6.PathID = null;

									row6.visual = null;

									row6.codeList = null;

									row6.source = null;

									row6.xml = null;

									row6.m_applied_path = null;

								} else {

									int columnIndexWithD_tFileInputDelimited_4 = 0; // Column
																					// Index

									columnIndexWithD_tFileInputDelimited_4 = 0;

									if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

										if (rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]
												.length() > 0) {

											row6.HLEVEL = ParserUtils
													.parseTo_Integer(rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]);

										} else {
											row6.HLEVEL = null;
										}

									} else {
										row6.HLEVEL = null;
									}

									columnIndexWithD_tFileInputDelimited_4 = 1;

									if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

										row6.Name = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

									} else {
										row6.Name = null;
									}

									columnIndexWithD_tFileInputDelimited_4 = 2;

									if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

										row6.Path = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

									} else {
										row6.Path = null;
									}

									columnIndexWithD_tFileInputDelimited_4 = 3;

									if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

										row6.DataType = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

									} else {
										row6.DataType = null;
									}

									columnIndexWithD_tFileInputDelimited_4 = 4;

									if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

										row6.Update_Date = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

									} else {
										row6.Update_Date = null;
									}

									columnIndexWithD_tFileInputDelimited_4 = 5;

									if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

										row6.Import_Date = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

									} else {
										row6.Import_Date = null;
									}

									columnIndexWithD_tFileInputDelimited_4 = 6;

									if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

										row6.Download_Date = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

									} else {
										row6.Download_Date = null;
									}

									columnIndexWithD_tFileInputDelimited_4 = 7;

									if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

										row6.PathID = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

									} else {
										row6.PathID = null;
									}

									columnIndexWithD_tFileInputDelimited_4 = 8;

									if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

										row6.visual = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

									} else {
										row6.visual = null;
									}

									columnIndexWithD_tFileInputDelimited_4 = 9;

									if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

										row6.codeList = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

									} else {
										row6.codeList = null;
									}

									columnIndexWithD_tFileInputDelimited_4 = 10;

									if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

										row6.source = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

									} else {
										row6.source = null;
									}

									columnIndexWithD_tFileInputDelimited_4 = 11;

									if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

										row6.xml = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

									} else {
										row6.xml = null;
									}

									columnIndexWithD_tFileInputDelimited_4 = 12;

									if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

										row6.m_applied_path = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

									} else {
										row6.m_applied_path = null;
									}

								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputDelimited_4 = true;

								System.err.println(e.getMessage());
								row6 = null;

							}

							/**
							 * [tFileInputDelimited_4 begin ] stop
							 */
							/**
							 * [tFileInputDelimited_4 main ] start
							 */

							currentComponent = "tFileInputDelimited_4";

							tos_count_tFileInputDelimited_4++;

							/**
							 * [tFileInputDelimited_4 main ] stop
							 */
							// Start of branch "row6"
							if (row6 != null) {

								/**
								 * [tUnite_1 main ] start
								 */

								currentComponent = "tUnite_1";

								// ////////

								// for output
								row11 = new row11Struct();

								row11.HLEVEL = row6.HLEVEL;
								row11.Name = row6.Name;
								row11.Path = row6.Path;
								row11.DataType = row6.DataType;
								row11.Update_Date = row6.Update_Date;
								row11.Import_Date = row6.Import_Date;
								row11.Download_Date = row6.Download_Date;
								row11.PathID = row6.PathID;
								row11.visual = row6.visual;
								row11.codeList = row6.codeList;
								row11.source = row6.source;
								row11.xml = row6.xml;
								row11.m_applied_path = row6.m_applied_path;

								nb_line_tUnite_1++;

								// ////////

								tos_count_tUnite_1++;

								/**
								 * [tUnite_1 main ] stop
								 */

								/**
								 * [tUniqRow_4 main ] start
								 */

								currentComponent = "tUniqRow_4";

								row12 = null;
								if (row11.Path == null) {
									finder_tUniqRow_4.Path = null;
								} else {
									finder_tUniqRow_4.Path = row11.Path
											.toLowerCase();
								}
								finder_tUniqRow_4.hashCodeDirty = true;
								if (!keystUniqRow_4.contains(finder_tUniqRow_4)) {
									KeyStruct_tUniqRow_4 new_tUniqRow_4 = new KeyStruct_tUniqRow_4();

									if (row11.Path == null) {
										new_tUniqRow_4.Path = null;
									} else {
										new_tUniqRow_4.Path = row11.Path
												.toLowerCase();
									}

									keystUniqRow_4.add(new_tUniqRow_4);
									if (row12 == null) {
										row12 = new row12Struct();
									}
									row12.HLEVEL = row11.HLEVEL;
									row12.Name = row11.Name;
									row12.Path = row11.Path;
									row12.DataType = row11.DataType;
									row12.Update_Date = row11.Update_Date;
									row12.Import_Date = row11.Import_Date;
									row12.Download_Date = row11.Download_Date;
									row12.PathID = row11.PathID;
									row12.visual = row11.visual;
									row12.codeList = row11.codeList;
									row12.source = row11.source;
									row12.xml = row11.xml;
									row12.m_applied_path = row11.m_applied_path;
									nb_uniques_tUniqRow_4++;
								} else {
									nb_duplicates_tUniqRow_4++;
								}

								tos_count_tUniqRow_4++;

								/**
								 * [tUniqRow_4 main ] stop
								 */
								// Start of branch "row12"
								if (row12 != null) {

									/**
									 * [tFileOutputDelimited_7 main ] start
									 */

									currentComponent = "tFileOutputDelimited_7";

									String[] rowtFileOutputDelimited_7 = new String[13];

									rowtFileOutputDelimited_7[0] = row12.HLEVEL == null ? ""
											: String.valueOf(row12.HLEVEL);

									rowtFileOutputDelimited_7[1] = row12.Name == null ? ""
											: row12.Name;

									rowtFileOutputDelimited_7[2] = row12.Path == null ? ""
											: row12.Path;

									rowtFileOutputDelimited_7[3] = row12.DataType == null ? ""
											: row12.DataType;

									rowtFileOutputDelimited_7[4] = row12.Update_Date == null ? ""
											: row12.Update_Date;

									rowtFileOutputDelimited_7[5] = row12.Import_Date == null ? ""
											: row12.Import_Date;

									rowtFileOutputDelimited_7[6] = row12.Download_Date == null ? ""
											: row12.Download_Date;

									rowtFileOutputDelimited_7[7] = row12.PathID == null ? ""
											: row12.PathID;

									rowtFileOutputDelimited_7[8] = row12.visual == null ? ""
											: row12.visual;

									rowtFileOutputDelimited_7[9] = row12.codeList == null ? ""
											: row12.codeList;

									rowtFileOutputDelimited_7[10] = row12.source == null ? ""
											: row12.source;

									rowtFileOutputDelimited_7[11] = row12.xml == null ? ""
											: row12.xml;

									rowtFileOutputDelimited_7[12] = row12.m_applied_path == null ? ""
											: row12.m_applied_path;

									nb_line_tFileOutputDelimited_7++;
									CsvWritertFileOutputDelimited_7
											.writeNext(rowtFileOutputDelimited_7);

									tos_count_tFileOutputDelimited_7++;

									/**
									 * [tFileOutputDelimited_7 main ] stop
									 */

								} // End of branch "row12"

							} // End of branch "row6"

							/**
							 * [tFileInputDelimited_4 end ] start
							 */

							currentComponent = "tFileInputDelimited_4";

							nb_line_tFileInputDelimited_4++;
						}

					} finally {
						if (!(filename_tFileInputDelimited_4 instanceof java.io.InputStream)) {
							if (csvReadertFileInputDelimited_4 != null) {
								csvReadertFileInputDelimited_4.close();
							}
						}
						if (csvReadertFileInputDelimited_4 != null) {
							globalMap.put("tFileInputDelimited_4_NB_LINE",
									nb_line_tFileInputDelimited_4);
						}
					}

					ok_Hash.put("tFileInputDelimited_4", true);
					end_Hash.put("tFileInputDelimited_4",
							System.currentTimeMillis());

					/**
					 * [tFileInputDelimited_4 end ] stop
					 */
					/**
					 * [tFileInputDelimited_9 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_9", false);
					start_Hash.put("tFileInputDelimited_9",
							System.currentTimeMillis());
					currentComponent = "tFileInputDelimited_9";

					int tos_count_tFileInputDelimited_9 = 0;

					int nb_line_tFileInputDelimited_9 = 0;
					int footer_tFileInputDelimited_9 = 0;
					int totalLinetFileInputDelimited_9 = 0;
					int limittFileInputDelimited_9 = -1;
					int lastLinetFileInputDelimited_9 = -1;

					char fieldSeparator_tFileInputDelimited_9[] = null;

					// support passing value (property: Field Separator) by
					// 'context.fs' or 'globalMap.get("fs")'.
					if (((String) "\t").length() > 0) {
						fieldSeparator_tFileInputDelimited_9 = ((String) "\t")
								.toCharArray();
					} else {
						throw new IllegalArgumentException(
								"Field Separator must be assigned a char.");
					}

					char rowSeparator_tFileInputDelimited_9[] = null;

					// support passing value (property: Row Separator) by
					// 'context.rs' or 'globalMap.get("rs")'.
					if (((String) "\n").length() > 0) {
						rowSeparator_tFileInputDelimited_9 = ((String) "\n")
								.toCharArray();
					} else {
						throw new IllegalArgumentException(
								"Row Separator must be assigned a char.");
					}

					Object filename_tFileInputDelimited_9 = /**
					 * Start field
					 * tFileInputDelimited_9:FILENAME
					 */
					((String) globalMap.get("tCreateTemporaryFile_12_FILEPATH"))/**
					 * 
					 * End field tFileInputDelimited_9:FILENAME
					 */
					;
					com.talend.csv.CSVReader csvReadertFileInputDelimited_9 = null;

					try {

						String[] rowtFileInputDelimited_9 = null;
						int currentLinetFileInputDelimited_9 = 0;
						int outputLinetFileInputDelimited_9 = 0;
						try {// TD110 begin
							if (filename_tFileInputDelimited_9 instanceof java.io.InputStream) {

								int footer_value_tFileInputDelimited_9 = 0;
								if (footer_value_tFileInputDelimited_9 > 0) {
									throw new java.lang.Exception(
											"When the input source is a stream,footer shouldn't be bigger than 0.");
								}

								csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_9,
										fieldSeparator_tFileInputDelimited_9[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_9)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_9[0]);
							}

							csvReadertFileInputDelimited_9
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_9[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_9[0] != '\r'))
								csvReadertFileInputDelimited_9
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_9[0]);

							csvReadertFileInputDelimited_9.setQuoteChar('"');

							csvReadertFileInputDelimited_9
									.setEscapeChar(csvReadertFileInputDelimited_9
											.getQuoteChar());

							if (footer_tFileInputDelimited_9 > 0) {
								for (totalLinetFileInputDelimited_9 = 0; totalLinetFileInputDelimited_9 < 0; totalLinetFileInputDelimited_9++) {
									csvReadertFileInputDelimited_9.readNext();
								}
								csvReadertFileInputDelimited_9
										.setSkipEmptyRecords(true);
								while (csvReadertFileInputDelimited_9
										.readNext()) {

									rowtFileInputDelimited_9 = csvReadertFileInputDelimited_9
											.getValues();
									if (!(rowtFileInputDelimited_9.length == 1 && ("\015")
											.equals(rowtFileInputDelimited_9[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

										totalLinetFileInputDelimited_9++;

									}

								}
								int lastLineTemptFileInputDelimited_9 = totalLinetFileInputDelimited_9
										- footer_tFileInputDelimited_9 < 0 ? 0
										: totalLinetFileInputDelimited_9
												- footer_tFileInputDelimited_9;
								if (lastLinetFileInputDelimited_9 > 0) {
									lastLinetFileInputDelimited_9 = lastLinetFileInputDelimited_9 < lastLineTemptFileInputDelimited_9 ? lastLinetFileInputDelimited_9
											: lastLineTemptFileInputDelimited_9;
								} else {
									lastLinetFileInputDelimited_9 = lastLineTemptFileInputDelimited_9;
								}

								csvReadertFileInputDelimited_9.close();
								if (filename_tFileInputDelimited_9 instanceof java.io.InputStream) {
									csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
											(java.io.InputStream) filename_tFileInputDelimited_9,
											fieldSeparator_tFileInputDelimited_9[0],
											"ISO-8859-15");
								} else {
									csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
											new java.io.BufferedReader(
													new java.io.InputStreamReader(
															new java.io.FileInputStream(
																	String.valueOf(filename_tFileInputDelimited_9)),
															"ISO-8859-15")),
											fieldSeparator_tFileInputDelimited_9[0]);
								}
								csvReadertFileInputDelimited_9
										.setTrimWhitespace(false);
								if ((rowSeparator_tFileInputDelimited_9[0] != '\n')
										&& (rowSeparator_tFileInputDelimited_9[0] != '\r'))
									csvReadertFileInputDelimited_9
											.setLineEnd(""
													+ rowSeparator_tFileInputDelimited_9[0]);

								csvReadertFileInputDelimited_9
										.setQuoteChar('"');

								csvReadertFileInputDelimited_9
										.setEscapeChar(csvReadertFileInputDelimited_9
												.getQuoteChar());

							}

							if (limittFileInputDelimited_9 != 0) {
								for (currentLinetFileInputDelimited_9 = 0; currentLinetFileInputDelimited_9 < 0; currentLinetFileInputDelimited_9++) {
									csvReadertFileInputDelimited_9.readNext();
								}
							}
							csvReadertFileInputDelimited_9
									.setSkipEmptyRecords(true);

						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());

						}// TD110 end

						while (limittFileInputDelimited_9 != 0
								&& csvReadertFileInputDelimited_9 != null
								&& csvReadertFileInputDelimited_9.readNext()) {

							rowtFileInputDelimited_9 = csvReadertFileInputDelimited_9
									.getValues();

							if (rowtFileInputDelimited_9.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_9[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
								continue;
							}

							currentLinetFileInputDelimited_9++;

							if (lastLinetFileInputDelimited_9 > -1
									&& currentLinetFileInputDelimited_9 > lastLinetFileInputDelimited_9) {
								break;
							}
							outputLinetFileInputDelimited_9++;
							if (limittFileInputDelimited_9 > 0
									&& outputLinetFileInputDelimited_9 > limittFileInputDelimited_9) {
								break;
							}

							row15 = null;

							boolean whetherReject_tFileInputDelimited_9 = false;
							row15 = new row15Struct();
							try {

								if (rowtFileInputDelimited_9.length == 1
										&& ("\015")
												.equals(rowtFileInputDelimited_9[0])) {// empty
																						// line
																						// when
																						// row
																						// separator
																						// is
																						// '\n'

									row15.HLEVEL = null;

									row15.Name = null;

									row15.Path = null;

									row15.DataType = null;

									row15.Update_Date = null;

									row15.Import_Date = null;

									row15.Download_Date = null;

									row15.PathID = null;

									row15.visual = null;

									row15.codeList = null;

									row15.source = null;

									row15.xml = null;

									row15.m_applied_path = null;

								} else {

									int columnIndexWithD_tFileInputDelimited_9 = 0; // Column
																					// Index

									columnIndexWithD_tFileInputDelimited_9 = 0;

									if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

										if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
												.length() > 0) {

											row15.HLEVEL = ParserUtils
													.parseTo_Integer(rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]);

										} else {
											row15.HLEVEL = null;
										}

									} else {
										row15.HLEVEL = null;
									}

									columnIndexWithD_tFileInputDelimited_9 = 1;

									if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

										row15.Name = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

									} else {
										row15.Name = null;
									}

									columnIndexWithD_tFileInputDelimited_9 = 2;

									if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

										row15.Path = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

									} else {
										row15.Path = null;
									}

									columnIndexWithD_tFileInputDelimited_9 = 3;

									if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

										row15.DataType = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

									} else {
										row15.DataType = null;
									}

									columnIndexWithD_tFileInputDelimited_9 = 4;

									if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

										row15.Update_Date = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

									} else {
										row15.Update_Date = null;
									}

									columnIndexWithD_tFileInputDelimited_9 = 5;

									if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

										row15.Import_Date = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

									} else {
										row15.Import_Date = null;
									}

									columnIndexWithD_tFileInputDelimited_9 = 6;

									if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

										row15.Download_Date = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

									} else {
										row15.Download_Date = null;
									}

									columnIndexWithD_tFileInputDelimited_9 = 7;

									if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

										row15.PathID = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

									} else {
										row15.PathID = null;
									}

									columnIndexWithD_tFileInputDelimited_9 = 8;

									if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

										row15.visual = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

									} else {
										row15.visual = null;
									}

									columnIndexWithD_tFileInputDelimited_9 = 9;

									if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

										row15.codeList = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

									} else {
										row15.codeList = null;
									}

									columnIndexWithD_tFileInputDelimited_9 = 10;

									if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

										row15.source = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

									} else {
										row15.source = null;
									}

									columnIndexWithD_tFileInputDelimited_9 = 11;

									if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

										row15.xml = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

									} else {
										row15.xml = null;
									}

									columnIndexWithD_tFileInputDelimited_9 = 12;

									if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

										row15.m_applied_path = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

									} else {
										row15.m_applied_path = null;
									}

								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputDelimited_9 = true;

								System.err.println(e.getMessage());
								row15 = null;

							}

							/**
							 * [tFileInputDelimited_9 begin ] stop
							 */
							/**
							 * [tFileInputDelimited_9 main ] start
							 */

							currentComponent = "tFileInputDelimited_9";

							tos_count_tFileInputDelimited_9++;

							/**
							 * [tFileInputDelimited_9 main ] stop
							 */
							// Start of branch "row15"
							if (row15 != null) {

								/**
								 * [tUnite_1 main ] start
								 */

								currentComponent = "tUnite_1";

								// ////////

								// for output
								row11 = new row11Struct();

								row11.HLEVEL = row15.HLEVEL;
								row11.Name = row15.Name;
								row11.Path = row15.Path;
								row11.DataType = row15.DataType;
								row11.Update_Date = row15.Update_Date;
								row11.Import_Date = row15.Import_Date;
								row11.Download_Date = row15.Download_Date;
								row11.PathID = row15.PathID;
								row11.visual = row15.visual;
								row11.codeList = row15.codeList;
								row11.source = row15.source;
								row11.xml = row15.xml;
								row11.m_applied_path = row15.m_applied_path;

								nb_line_tUnite_1++;

								// ////////

								tos_count_tUnite_1++;

								/**
								 * [tUnite_1 main ] stop
								 */

								/**
								 * [tUniqRow_4 main ] start
								 */

								currentComponent = "tUniqRow_4";

								row12 = null;
								if (row11.Path == null) {
									finder_tUniqRow_4.Path = null;
								} else {
									finder_tUniqRow_4.Path = row11.Path
											.toLowerCase();
								}
								finder_tUniqRow_4.hashCodeDirty = true;
								if (!keystUniqRow_4.contains(finder_tUniqRow_4)) {
									KeyStruct_tUniqRow_4 new_tUniqRow_4 = new KeyStruct_tUniqRow_4();

									if (row11.Path == null) {
										new_tUniqRow_4.Path = null;
									} else {
										new_tUniqRow_4.Path = row11.Path
												.toLowerCase();
									}

									keystUniqRow_4.add(new_tUniqRow_4);
									if (row12 == null) {
										row12 = new row12Struct();
									}
									row12.HLEVEL = row11.HLEVEL;
									row12.Name = row11.Name;
									row12.Path = row11.Path;
									row12.DataType = row11.DataType;
									row12.Update_Date = row11.Update_Date;
									row12.Import_Date = row11.Import_Date;
									row12.Download_Date = row11.Download_Date;
									row12.PathID = row11.PathID;
									row12.visual = row11.visual;
									row12.codeList = row11.codeList;
									row12.source = row11.source;
									row12.xml = row11.xml;
									row12.m_applied_path = row11.m_applied_path;
									nb_uniques_tUniqRow_4++;
								} else {
									nb_duplicates_tUniqRow_4++;
								}

								tos_count_tUniqRow_4++;

								/**
								 * [tUniqRow_4 main ] stop
								 */
								// Start of branch "row12"
								if (row12 != null) {

									/**
									 * [tFileOutputDelimited_7 main ] start
									 */

									currentComponent = "tFileOutputDelimited_7";

									String[] rowtFileOutputDelimited_7 = new String[13];

									rowtFileOutputDelimited_7[0] = row12.HLEVEL == null ? ""
											: String.valueOf(row12.HLEVEL);

									rowtFileOutputDelimited_7[1] = row12.Name == null ? ""
											: row12.Name;

									rowtFileOutputDelimited_7[2] = row12.Path == null ? ""
											: row12.Path;

									rowtFileOutputDelimited_7[3] = row12.DataType == null ? ""
											: row12.DataType;

									rowtFileOutputDelimited_7[4] = row12.Update_Date == null ? ""
											: row12.Update_Date;

									rowtFileOutputDelimited_7[5] = row12.Import_Date == null ? ""
											: row12.Import_Date;

									rowtFileOutputDelimited_7[6] = row12.Download_Date == null ? ""
											: row12.Download_Date;

									rowtFileOutputDelimited_7[7] = row12.PathID == null ? ""
											: row12.PathID;

									rowtFileOutputDelimited_7[8] = row12.visual == null ? ""
											: row12.visual;

									rowtFileOutputDelimited_7[9] = row12.codeList == null ? ""
											: row12.codeList;

									rowtFileOutputDelimited_7[10] = row12.source == null ? ""
											: row12.source;

									rowtFileOutputDelimited_7[11] = row12.xml == null ? ""
											: row12.xml;

									rowtFileOutputDelimited_7[12] = row12.m_applied_path == null ? ""
											: row12.m_applied_path;

									nb_line_tFileOutputDelimited_7++;
									CsvWritertFileOutputDelimited_7
											.writeNext(rowtFileOutputDelimited_7);

									tos_count_tFileOutputDelimited_7++;

									/**
									 * [tFileOutputDelimited_7 main ] stop
									 */

								} // End of branch "row12"

							} // End of branch "row15"

							/**
							 * [tFileInputDelimited_9 end ] start
							 */

							currentComponent = "tFileInputDelimited_9";

							nb_line_tFileInputDelimited_9++;
						}

					} finally {
						if (!(filename_tFileInputDelimited_9 instanceof java.io.InputStream)) {
							if (csvReadertFileInputDelimited_9 != null) {
								csvReadertFileInputDelimited_9.close();
							}
						}
						if (csvReadertFileInputDelimited_9 != null) {
							globalMap.put("tFileInputDelimited_9_NB_LINE",
									nb_line_tFileInputDelimited_9);
						}
					}

					ok_Hash.put("tFileInputDelimited_9", true);
					end_Hash.put("tFileInputDelimited_9",
							System.currentTimeMillis());

					/**
					 * [tFileInputDelimited_9 end ] stop
					 */
					/**
					 * [tFileInputDelimited_11 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_11", false);
					start_Hash.put("tFileInputDelimited_11",
							System.currentTimeMillis());
					currentComponent = "tFileInputDelimited_11";

					int tos_count_tFileInputDelimited_11 = 0;

					int nb_line_tFileInputDelimited_11 = 0;
					int footer_tFileInputDelimited_11 = 0;
					int totalLinetFileInputDelimited_11 = 0;
					int limittFileInputDelimited_11 = -1;
					int lastLinetFileInputDelimited_11 = -1;

					char fieldSeparator_tFileInputDelimited_11[] = null;

					// support passing value (property: Field Separator) by
					// 'context.fs' or 'globalMap.get("fs")'.
					if (((String) "\t").length() > 0) {
						fieldSeparator_tFileInputDelimited_11 = ((String) "\t")
								.toCharArray();
					} else {
						throw new IllegalArgumentException(
								"Field Separator must be assigned a char.");
					}

					char rowSeparator_tFileInputDelimited_11[] = null;

					// support passing value (property: Row Separator) by
					// 'context.rs' or 'globalMap.get("rs")'.
					if (((String) "\n").length() > 0) {
						rowSeparator_tFileInputDelimited_11 = ((String) "\n")
								.toCharArray();
					} else {
						throw new IllegalArgumentException(
								"Row Separator must be assigned a char.");
					}

					Object filename_tFileInputDelimited_11 = /**
					 * Start field
					 * tFileInputDelimited_11:FILENAME
					 */
					((String) globalMap.get("tCreateTemporaryFile_13_FILEPATH"))/**
					 * 
					 * End field tFileInputDelimited_11:FILENAME
					 */
					;
					com.talend.csv.CSVReader csvReadertFileInputDelimited_11 = null;

					try {

						String[] rowtFileInputDelimited_11 = null;
						int currentLinetFileInputDelimited_11 = 0;
						int outputLinetFileInputDelimited_11 = 0;
						try {// TD110 begin
							if (filename_tFileInputDelimited_11 instanceof java.io.InputStream) {

								int footer_value_tFileInputDelimited_11 = 0;
								if (footer_value_tFileInputDelimited_11 > 0) {
									throw new java.lang.Exception(
											"When the input source is a stream,footer shouldn't be bigger than 0.");
								}

								csvReadertFileInputDelimited_11 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_11,
										fieldSeparator_tFileInputDelimited_11[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_11 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_11)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_11[0]);
							}

							csvReadertFileInputDelimited_11
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_11[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_11[0] != '\r'))
								csvReadertFileInputDelimited_11
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_11[0]);

							csvReadertFileInputDelimited_11.setQuoteChar('"');

							csvReadertFileInputDelimited_11
									.setEscapeChar(csvReadertFileInputDelimited_11
											.getQuoteChar());

							if (footer_tFileInputDelimited_11 > 0) {
								for (totalLinetFileInputDelimited_11 = 0; totalLinetFileInputDelimited_11 < 0; totalLinetFileInputDelimited_11++) {
									csvReadertFileInputDelimited_11.readNext();
								}
								csvReadertFileInputDelimited_11
										.setSkipEmptyRecords(true);
								while (csvReadertFileInputDelimited_11
										.readNext()) {

									rowtFileInputDelimited_11 = csvReadertFileInputDelimited_11
											.getValues();
									if (!(rowtFileInputDelimited_11.length == 1 && ("\015")
											.equals(rowtFileInputDelimited_11[0]))) {// empty
																						// line
																						// when
																						// row
																						// separator
																						// is
																						// '\n'

										totalLinetFileInputDelimited_11++;

									}

								}
								int lastLineTemptFileInputDelimited_11 = totalLinetFileInputDelimited_11
										- footer_tFileInputDelimited_11 < 0 ? 0
										: totalLinetFileInputDelimited_11
												- footer_tFileInputDelimited_11;
								if (lastLinetFileInputDelimited_11 > 0) {
									lastLinetFileInputDelimited_11 = lastLinetFileInputDelimited_11 < lastLineTemptFileInputDelimited_11 ? lastLinetFileInputDelimited_11
											: lastLineTemptFileInputDelimited_11;
								} else {
									lastLinetFileInputDelimited_11 = lastLineTemptFileInputDelimited_11;
								}

								csvReadertFileInputDelimited_11.close();
								if (filename_tFileInputDelimited_11 instanceof java.io.InputStream) {
									csvReadertFileInputDelimited_11 = new com.talend.csv.CSVReader(
											(java.io.InputStream) filename_tFileInputDelimited_11,
											fieldSeparator_tFileInputDelimited_11[0],
											"ISO-8859-15");
								} else {
									csvReadertFileInputDelimited_11 = new com.talend.csv.CSVReader(
											new java.io.BufferedReader(
													new java.io.InputStreamReader(
															new java.io.FileInputStream(
																	String.valueOf(filename_tFileInputDelimited_11)),
															"ISO-8859-15")),
											fieldSeparator_tFileInputDelimited_11[0]);
								}
								csvReadertFileInputDelimited_11
										.setTrimWhitespace(false);
								if ((rowSeparator_tFileInputDelimited_11[0] != '\n')
										&& (rowSeparator_tFileInputDelimited_11[0] != '\r'))
									csvReadertFileInputDelimited_11
											.setLineEnd(""
													+ rowSeparator_tFileInputDelimited_11[0]);

								csvReadertFileInputDelimited_11
										.setQuoteChar('"');

								csvReadertFileInputDelimited_11
										.setEscapeChar(csvReadertFileInputDelimited_11
												.getQuoteChar());

							}

							if (limittFileInputDelimited_11 != 0) {
								for (currentLinetFileInputDelimited_11 = 0; currentLinetFileInputDelimited_11 < 0; currentLinetFileInputDelimited_11++) {
									csvReadertFileInputDelimited_11.readNext();
								}
							}
							csvReadertFileInputDelimited_11
									.setSkipEmptyRecords(true);

						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());

						}// TD110 end

						while (limittFileInputDelimited_11 != 0
								&& csvReadertFileInputDelimited_11 != null
								&& csvReadertFileInputDelimited_11.readNext()) {

							rowtFileInputDelimited_11 = csvReadertFileInputDelimited_11
									.getValues();

							if (rowtFileInputDelimited_11.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_11[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
								continue;
							}

							currentLinetFileInputDelimited_11++;

							if (lastLinetFileInputDelimited_11 > -1
									&& currentLinetFileInputDelimited_11 > lastLinetFileInputDelimited_11) {
								break;
							}
							outputLinetFileInputDelimited_11++;
							if (limittFileInputDelimited_11 > 0
									&& outputLinetFileInputDelimited_11 > limittFileInputDelimited_11) {
								break;
							}

							row17 = null;

							boolean whetherReject_tFileInputDelimited_11 = false;
							row17 = new row17Struct();
							try {

								if (rowtFileInputDelimited_11.length == 1
										&& ("\015")
												.equals(rowtFileInputDelimited_11[0])) {// empty
																						// line
																						// when
																						// row
																						// separator
																						// is
																						// '\n'

									row17.HLEVEL = null;

									row17.Name = null;

									row17.Path = null;

									row17.DataType = null;

									row17.Update_Date = null;

									row17.Import_Date = null;

									row17.Download_Date = null;

									row17.PathID = null;

									row17.visual = null;

									row17.codeList = null;

									row17.source = null;

									row17.xml = null;

									row17.m_applied_path = null;

								} else {

									int columnIndexWithD_tFileInputDelimited_11 = 0; // Column
																						// Index

									columnIndexWithD_tFileInputDelimited_11 = 0;

									if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

										if (rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11]
												.length() > 0) {

											row17.HLEVEL = ParserUtils
													.parseTo_Integer(rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11]);

										} else {
											row17.HLEVEL = null;
										}

									} else {
										row17.HLEVEL = null;
									}

									columnIndexWithD_tFileInputDelimited_11 = 1;

									if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

										row17.Name = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

									} else {
										row17.Name = null;
									}

									columnIndexWithD_tFileInputDelimited_11 = 2;

									if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

										row17.Path = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

									} else {
										row17.Path = null;
									}

									columnIndexWithD_tFileInputDelimited_11 = 3;

									if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

										row17.DataType = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

									} else {
										row17.DataType = null;
									}

									columnIndexWithD_tFileInputDelimited_11 = 4;

									if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

										row17.Update_Date = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

									} else {
										row17.Update_Date = null;
									}

									columnIndexWithD_tFileInputDelimited_11 = 5;

									if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

										row17.Import_Date = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

									} else {
										row17.Import_Date = null;
									}

									columnIndexWithD_tFileInputDelimited_11 = 6;

									if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

										row17.Download_Date = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

									} else {
										row17.Download_Date = null;
									}

									columnIndexWithD_tFileInputDelimited_11 = 7;

									if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

										row17.PathID = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

									} else {
										row17.PathID = null;
									}

									columnIndexWithD_tFileInputDelimited_11 = 8;

									if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

										row17.visual = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

									} else {
										row17.visual = null;
									}

									columnIndexWithD_tFileInputDelimited_11 = 9;

									if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

										row17.codeList = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

									} else {
										row17.codeList = null;
									}

									columnIndexWithD_tFileInputDelimited_11 = 10;

									if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

										row17.source = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

									} else {
										row17.source = null;
									}

									columnIndexWithD_tFileInputDelimited_11 = 11;

									if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

										row17.xml = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

									} else {
										row17.xml = null;
									}

									columnIndexWithD_tFileInputDelimited_11 = 12;

									if (columnIndexWithD_tFileInputDelimited_11 < rowtFileInputDelimited_11.length) {

										row17.m_applied_path = rowtFileInputDelimited_11[columnIndexWithD_tFileInputDelimited_11];

									} else {
										row17.m_applied_path = null;
									}

								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputDelimited_11 = true;

								System.err.println(e.getMessage());
								row17 = null;

							}

							/**
							 * [tFileInputDelimited_11 begin ] stop
							 */
							/**
							 * [tFileInputDelimited_11 main ] start
							 */

							currentComponent = "tFileInputDelimited_11";

							tos_count_tFileInputDelimited_11++;

							/**
							 * [tFileInputDelimited_11 main ] stop
							 */
							// Start of branch "row17"
							if (row17 != null) {

								/**
								 * [tUnite_1 main ] start
								 */

								currentComponent = "tUnite_1";

								// ////////

								// for output
								row11 = new row11Struct();

								row11.HLEVEL = row17.HLEVEL;
								row11.Name = row17.Name;
								row11.Path = row17.Path;
								row11.DataType = row17.DataType;
								row11.Update_Date = row17.Update_Date;
								row11.Import_Date = row17.Import_Date;
								row11.Download_Date = row17.Download_Date;
								row11.PathID = row17.PathID;
								row11.visual = row17.visual;
								row11.codeList = row17.codeList;
								row11.source = row17.source;
								row11.xml = row17.xml;
								row11.m_applied_path = row17.m_applied_path;

								nb_line_tUnite_1++;

								// ////////

								tos_count_tUnite_1++;

								/**
								 * [tUnite_1 main ] stop
								 */

								/**
								 * [tUniqRow_4 main ] start
								 */

								currentComponent = "tUniqRow_4";

								row12 = null;
								if (row11.Path == null) {
									finder_tUniqRow_4.Path = null;
								} else {
									finder_tUniqRow_4.Path = row11.Path
											.toLowerCase();
								}
								finder_tUniqRow_4.hashCodeDirty = true;
								if (!keystUniqRow_4.contains(finder_tUniqRow_4)) {
									KeyStruct_tUniqRow_4 new_tUniqRow_4 = new KeyStruct_tUniqRow_4();

									if (row11.Path == null) {
										new_tUniqRow_4.Path = null;
									} else {
										new_tUniqRow_4.Path = row11.Path
												.toLowerCase();
									}

									keystUniqRow_4.add(new_tUniqRow_4);
									if (row12 == null) {
										row12 = new row12Struct();
									}
									row12.HLEVEL = row11.HLEVEL;
									row12.Name = row11.Name;
									row12.Path = row11.Path;
									row12.DataType = row11.DataType;
									row12.Update_Date = row11.Update_Date;
									row12.Import_Date = row11.Import_Date;
									row12.Download_Date = row11.Download_Date;
									row12.PathID = row11.PathID;
									row12.visual = row11.visual;
									row12.codeList = row11.codeList;
									row12.source = row11.source;
									row12.xml = row11.xml;
									row12.m_applied_path = row11.m_applied_path;
									nb_uniques_tUniqRow_4++;
								} else {
									nb_duplicates_tUniqRow_4++;
								}

								tos_count_tUniqRow_4++;

								/**
								 * [tUniqRow_4 main ] stop
								 */
								// Start of branch "row12"
								if (row12 != null) {

									/**
									 * [tFileOutputDelimited_7 main ] start
									 */

									currentComponent = "tFileOutputDelimited_7";

									String[] rowtFileOutputDelimited_7 = new String[13];

									rowtFileOutputDelimited_7[0] = row12.HLEVEL == null ? ""
											: String.valueOf(row12.HLEVEL);

									rowtFileOutputDelimited_7[1] = row12.Name == null ? ""
											: row12.Name;

									rowtFileOutputDelimited_7[2] = row12.Path == null ? ""
											: row12.Path;

									rowtFileOutputDelimited_7[3] = row12.DataType == null ? ""
											: row12.DataType;

									rowtFileOutputDelimited_7[4] = row12.Update_Date == null ? ""
											: row12.Update_Date;

									rowtFileOutputDelimited_7[5] = row12.Import_Date == null ? ""
											: row12.Import_Date;

									rowtFileOutputDelimited_7[6] = row12.Download_Date == null ? ""
											: row12.Download_Date;

									rowtFileOutputDelimited_7[7] = row12.PathID == null ? ""
											: row12.PathID;

									rowtFileOutputDelimited_7[8] = row12.visual == null ? ""
											: row12.visual;

									rowtFileOutputDelimited_7[9] = row12.codeList == null ? ""
											: row12.codeList;

									rowtFileOutputDelimited_7[10] = row12.source == null ? ""
											: row12.source;

									rowtFileOutputDelimited_7[11] = row12.xml == null ? ""
											: row12.xml;

									rowtFileOutputDelimited_7[12] = row12.m_applied_path == null ? ""
											: row12.m_applied_path;

									nb_line_tFileOutputDelimited_7++;
									CsvWritertFileOutputDelimited_7
											.writeNext(rowtFileOutputDelimited_7);

									tos_count_tFileOutputDelimited_7++;

									/**
									 * [tFileOutputDelimited_7 main ] stop
									 */

								} // End of branch "row12"

							} // End of branch "row17"

							/**
							 * [tFileInputDelimited_11 end ] start
							 */

							currentComponent = "tFileInputDelimited_11";

							nb_line_tFileInputDelimited_11++;
						}

					} finally {
						if (!(filename_tFileInputDelimited_11 instanceof java.io.InputStream)) {
							if (csvReadertFileInputDelimited_11 != null) {
								csvReadertFileInputDelimited_11.close();
							}
						}
						if (csvReadertFileInputDelimited_11 != null) {
							globalMap.put("tFileInputDelimited_11_NB_LINE",
									nb_line_tFileInputDelimited_11);
						}
					}

					ok_Hash.put("tFileInputDelimited_11", true);
					end_Hash.put("tFileInputDelimited_11",
							System.currentTimeMillis());

					/**
					 * [tFileInputDelimited_11 end ] stop
					 */
					/**
					 * [tFileInputDelimited_18 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_18", false);
					start_Hash.put("tFileInputDelimited_18",
							System.currentTimeMillis());
					currentComponent = "tFileInputDelimited_18";

					int tos_count_tFileInputDelimited_18 = 0;

					int nb_line_tFileInputDelimited_18 = 0;
					int footer_tFileInputDelimited_18 = 0;
					int totalLinetFileInputDelimited_18 = 0;
					int limittFileInputDelimited_18 = -1;
					int lastLinetFileInputDelimited_18 = -1;

					char fieldSeparator_tFileInputDelimited_18[] = null;

					// support passing value (property: Field Separator) by
					// 'context.fs' or 'globalMap.get("fs")'.
					if (((String) "\t").length() > 0) {
						fieldSeparator_tFileInputDelimited_18 = ((String) "\t")
								.toCharArray();
					} else {
						throw new IllegalArgumentException(
								"Field Separator must be assigned a char.");
					}

					char rowSeparator_tFileInputDelimited_18[] = null;

					// support passing value (property: Row Separator) by
					// 'context.rs' or 'globalMap.get("rs")'.
					if (((String) "\n").length() > 0) {
						rowSeparator_tFileInputDelimited_18 = ((String) "\n")
								.toCharArray();
					} else {
						throw new IllegalArgumentException(
								"Row Separator must be assigned a char.");
					}

					Object filename_tFileInputDelimited_18 = /**
					 * Start field
					 * tFileInputDelimited_18:FILENAME
					 */
					((String) globalMap.get("tCreateTemporaryFile_14_FILEPATH"))/**
					 * 
					 * End field tFileInputDelimited_18:FILENAME
					 */
					;
					com.talend.csv.CSVReader csvReadertFileInputDelimited_18 = null;

					try {

						String[] rowtFileInputDelimited_18 = null;
						int currentLinetFileInputDelimited_18 = 0;
						int outputLinetFileInputDelimited_18 = 0;
						try {// TD110 begin
							if (filename_tFileInputDelimited_18 instanceof java.io.InputStream) {

								int footer_value_tFileInputDelimited_18 = 0;
								if (footer_value_tFileInputDelimited_18 > 0) {
									throw new java.lang.Exception(
											"When the input source is a stream,footer shouldn't be bigger than 0.");
								}

								csvReadertFileInputDelimited_18 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_18,
										fieldSeparator_tFileInputDelimited_18[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_18 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_18)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_18[0]);
							}

							csvReadertFileInputDelimited_18
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_18[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_18[0] != '\r'))
								csvReadertFileInputDelimited_18
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_18[0]);

							csvReadertFileInputDelimited_18.setQuoteChar('"');

							csvReadertFileInputDelimited_18
									.setEscapeChar(csvReadertFileInputDelimited_18
											.getQuoteChar());

							if (footer_tFileInputDelimited_18 > 0) {
								for (totalLinetFileInputDelimited_18 = 0; totalLinetFileInputDelimited_18 < 0; totalLinetFileInputDelimited_18++) {
									csvReadertFileInputDelimited_18.readNext();
								}
								csvReadertFileInputDelimited_18
										.setSkipEmptyRecords(true);
								while (csvReadertFileInputDelimited_18
										.readNext()) {

									rowtFileInputDelimited_18 = csvReadertFileInputDelimited_18
											.getValues();
									if (!(rowtFileInputDelimited_18.length == 1 && ("\015")
											.equals(rowtFileInputDelimited_18[0]))) {// empty
																						// line
																						// when
																						// row
																						// separator
																						// is
																						// '\n'

										totalLinetFileInputDelimited_18++;

									}

								}
								int lastLineTemptFileInputDelimited_18 = totalLinetFileInputDelimited_18
										- footer_tFileInputDelimited_18 < 0 ? 0
										: totalLinetFileInputDelimited_18
												- footer_tFileInputDelimited_18;
								if (lastLinetFileInputDelimited_18 > 0) {
									lastLinetFileInputDelimited_18 = lastLinetFileInputDelimited_18 < lastLineTemptFileInputDelimited_18 ? lastLinetFileInputDelimited_18
											: lastLineTemptFileInputDelimited_18;
								} else {
									lastLinetFileInputDelimited_18 = lastLineTemptFileInputDelimited_18;
								}

								csvReadertFileInputDelimited_18.close();
								if (filename_tFileInputDelimited_18 instanceof java.io.InputStream) {
									csvReadertFileInputDelimited_18 = new com.talend.csv.CSVReader(
											(java.io.InputStream) filename_tFileInputDelimited_18,
											fieldSeparator_tFileInputDelimited_18[0],
											"ISO-8859-15");
								} else {
									csvReadertFileInputDelimited_18 = new com.talend.csv.CSVReader(
											new java.io.BufferedReader(
													new java.io.InputStreamReader(
															new java.io.FileInputStream(
																	String.valueOf(filename_tFileInputDelimited_18)),
															"ISO-8859-15")),
											fieldSeparator_tFileInputDelimited_18[0]);
								}
								csvReadertFileInputDelimited_18
										.setTrimWhitespace(false);
								if ((rowSeparator_tFileInputDelimited_18[0] != '\n')
										&& (rowSeparator_tFileInputDelimited_18[0] != '\r'))
									csvReadertFileInputDelimited_18
											.setLineEnd(""
													+ rowSeparator_tFileInputDelimited_18[0]);

								csvReadertFileInputDelimited_18
										.setQuoteChar('"');

								csvReadertFileInputDelimited_18
										.setEscapeChar(csvReadertFileInputDelimited_18
												.getQuoteChar());

							}

							if (limittFileInputDelimited_18 != 0) {
								for (currentLinetFileInputDelimited_18 = 0; currentLinetFileInputDelimited_18 < 0; currentLinetFileInputDelimited_18++) {
									csvReadertFileInputDelimited_18.readNext();
								}
							}
							csvReadertFileInputDelimited_18
									.setSkipEmptyRecords(true);

						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());

						}// TD110 end

						while (limittFileInputDelimited_18 != 0
								&& csvReadertFileInputDelimited_18 != null
								&& csvReadertFileInputDelimited_18.readNext()) {

							rowtFileInputDelimited_18 = csvReadertFileInputDelimited_18
									.getValues();

							if (rowtFileInputDelimited_18.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_18[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
								continue;
							}

							currentLinetFileInputDelimited_18++;

							if (lastLinetFileInputDelimited_18 > -1
									&& currentLinetFileInputDelimited_18 > lastLinetFileInputDelimited_18) {
								break;
							}
							outputLinetFileInputDelimited_18++;
							if (limittFileInputDelimited_18 > 0
									&& outputLinetFileInputDelimited_18 > limittFileInputDelimited_18) {
								break;
							}

							row23 = null;

							boolean whetherReject_tFileInputDelimited_18 = false;
							row23 = new row23Struct();
							try {

								if (rowtFileInputDelimited_18.length == 1
										&& ("\015")
												.equals(rowtFileInputDelimited_18[0])) {// empty
																						// line
																						// when
																						// row
																						// separator
																						// is
																						// '\n'

									row23.HLEVEL = null;

									row23.Name = null;

									row23.Path = null;

									row23.DataType = null;

									row23.Update_Date = null;

									row23.Import_Date = null;

									row23.Download_Date = null;

									row23.PathID = null;

									row23.visual = null;

									row23.codeList = null;

									row23.source = null;

									row23.xml = null;

									row23.m_applied_path = null;

								} else {

									int columnIndexWithD_tFileInputDelimited_18 = 0; // Column
																						// Index

									columnIndexWithD_tFileInputDelimited_18 = 0;

									if (columnIndexWithD_tFileInputDelimited_18 < rowtFileInputDelimited_18.length) {

										if (rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18]
												.length() > 0) {

											row23.HLEVEL = ParserUtils
													.parseTo_Integer(rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18]);

										} else {
											row23.HLEVEL = null;
										}

									} else {
										row23.HLEVEL = null;
									}

									columnIndexWithD_tFileInputDelimited_18 = 1;

									if (columnIndexWithD_tFileInputDelimited_18 < rowtFileInputDelimited_18.length) {

										row23.Name = rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18];

									} else {
										row23.Name = null;
									}

									columnIndexWithD_tFileInputDelimited_18 = 2;

									if (columnIndexWithD_tFileInputDelimited_18 < rowtFileInputDelimited_18.length) {

										row23.Path = rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18];

									} else {
										row23.Path = null;
									}

									columnIndexWithD_tFileInputDelimited_18 = 3;

									if (columnIndexWithD_tFileInputDelimited_18 < rowtFileInputDelimited_18.length) {

										row23.DataType = rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18];

									} else {
										row23.DataType = null;
									}

									columnIndexWithD_tFileInputDelimited_18 = 4;

									if (columnIndexWithD_tFileInputDelimited_18 < rowtFileInputDelimited_18.length) {

										row23.Update_Date = rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18];

									} else {
										row23.Update_Date = null;
									}

									columnIndexWithD_tFileInputDelimited_18 = 5;

									if (columnIndexWithD_tFileInputDelimited_18 < rowtFileInputDelimited_18.length) {

										row23.Import_Date = rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18];

									} else {
										row23.Import_Date = null;
									}

									columnIndexWithD_tFileInputDelimited_18 = 6;

									if (columnIndexWithD_tFileInputDelimited_18 < rowtFileInputDelimited_18.length) {

										row23.Download_Date = rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18];

									} else {
										row23.Download_Date = null;
									}

									columnIndexWithD_tFileInputDelimited_18 = 7;

									if (columnIndexWithD_tFileInputDelimited_18 < rowtFileInputDelimited_18.length) {

										row23.PathID = rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18];

									} else {
										row23.PathID = null;
									}

									columnIndexWithD_tFileInputDelimited_18 = 8;

									if (columnIndexWithD_tFileInputDelimited_18 < rowtFileInputDelimited_18.length) {

										row23.visual = rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18];

									} else {
										row23.visual = null;
									}

									columnIndexWithD_tFileInputDelimited_18 = 9;

									if (columnIndexWithD_tFileInputDelimited_18 < rowtFileInputDelimited_18.length) {

										row23.codeList = rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18];

									} else {
										row23.codeList = null;
									}

									columnIndexWithD_tFileInputDelimited_18 = 10;

									if (columnIndexWithD_tFileInputDelimited_18 < rowtFileInputDelimited_18.length) {

										row23.source = rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18];

									} else {
										row23.source = null;
									}

									columnIndexWithD_tFileInputDelimited_18 = 11;

									if (columnIndexWithD_tFileInputDelimited_18 < rowtFileInputDelimited_18.length) {

										row23.xml = rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18];

									} else {
										row23.xml = null;
									}

									columnIndexWithD_tFileInputDelimited_18 = 12;

									if (columnIndexWithD_tFileInputDelimited_18 < rowtFileInputDelimited_18.length) {

										row23.m_applied_path = rowtFileInputDelimited_18[columnIndexWithD_tFileInputDelimited_18];

									} else {
										row23.m_applied_path = null;
									}

								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputDelimited_18 = true;

								System.err.println(e.getMessage());
								row23 = null;

							}

							/**
							 * [tFileInputDelimited_18 begin ] stop
							 */
							/**
							 * [tFileInputDelimited_18 main ] start
							 */

							currentComponent = "tFileInputDelimited_18";

							tos_count_tFileInputDelimited_18++;

							/**
							 * [tFileInputDelimited_18 main ] stop
							 */
							// Start of branch "row23"
							if (row23 != null) {

								/**
								 * [tUnite_1 main ] start
								 */

								currentComponent = "tUnite_1";

								// ////////

								// for output
								row11 = new row11Struct();

								row11.HLEVEL = row23.HLEVEL;
								row11.Name = row23.Name;
								row11.Path = row23.Path;
								row11.DataType = row23.DataType;
								row11.Update_Date = row23.Update_Date;
								row11.Import_Date = row23.Import_Date;
								row11.Download_Date = row23.Download_Date;
								row11.PathID = row23.PathID;
								row11.visual = row23.visual;
								row11.codeList = row23.codeList;
								row11.source = row23.source;
								row11.xml = row23.xml;
								row11.m_applied_path = row23.m_applied_path;

								nb_line_tUnite_1++;

								// ////////

								tos_count_tUnite_1++;

								/**
								 * [tUnite_1 main ] stop
								 */

								/**
								 * [tUniqRow_4 main ] start
								 */

								currentComponent = "tUniqRow_4";

								row12 = null;
								if (row11.Path == null) {
									finder_tUniqRow_4.Path = null;
								} else {
									finder_tUniqRow_4.Path = row11.Path
											.toLowerCase();
								}
								finder_tUniqRow_4.hashCodeDirty = true;
								if (!keystUniqRow_4.contains(finder_tUniqRow_4)) {
									KeyStruct_tUniqRow_4 new_tUniqRow_4 = new KeyStruct_tUniqRow_4();

									if (row11.Path == null) {
										new_tUniqRow_4.Path = null;
									} else {
										new_tUniqRow_4.Path = row11.Path
												.toLowerCase();
									}

									keystUniqRow_4.add(new_tUniqRow_4);
									if (row12 == null) {
										row12 = new row12Struct();
									}
									row12.HLEVEL = row11.HLEVEL;
									row12.Name = row11.Name;
									row12.Path = row11.Path;
									row12.DataType = row11.DataType;
									row12.Update_Date = row11.Update_Date;
									row12.Import_Date = row11.Import_Date;
									row12.Download_Date = row11.Download_Date;
									row12.PathID = row11.PathID;
									row12.visual = row11.visual;
									row12.codeList = row11.codeList;
									row12.source = row11.source;
									row12.xml = row11.xml;
									row12.m_applied_path = row11.m_applied_path;
									nb_uniques_tUniqRow_4++;
								} else {
									nb_duplicates_tUniqRow_4++;
								}

								tos_count_tUniqRow_4++;

								/**
								 * [tUniqRow_4 main ] stop
								 */
								// Start of branch "row12"
								if (row12 != null) {

									/**
									 * [tFileOutputDelimited_7 main ] start
									 */

									currentComponent = "tFileOutputDelimited_7";

									String[] rowtFileOutputDelimited_7 = new String[13];

									rowtFileOutputDelimited_7[0] = row12.HLEVEL == null ? ""
											: String.valueOf(row12.HLEVEL);

									rowtFileOutputDelimited_7[1] = row12.Name == null ? ""
											: row12.Name;

									rowtFileOutputDelimited_7[2] = row12.Path == null ? ""
											: row12.Path;

									rowtFileOutputDelimited_7[3] = row12.DataType == null ? ""
											: row12.DataType;

									rowtFileOutputDelimited_7[4] = row12.Update_Date == null ? ""
											: row12.Update_Date;

									rowtFileOutputDelimited_7[5] = row12.Import_Date == null ? ""
											: row12.Import_Date;

									rowtFileOutputDelimited_7[6] = row12.Download_Date == null ? ""
											: row12.Download_Date;

									rowtFileOutputDelimited_7[7] = row12.PathID == null ? ""
											: row12.PathID;

									rowtFileOutputDelimited_7[8] = row12.visual == null ? ""
											: row12.visual;

									rowtFileOutputDelimited_7[9] = row12.codeList == null ? ""
											: row12.codeList;

									rowtFileOutputDelimited_7[10] = row12.source == null ? ""
											: row12.source;

									rowtFileOutputDelimited_7[11] = row12.xml == null ? ""
											: row12.xml;

									rowtFileOutputDelimited_7[12] = row12.m_applied_path == null ? ""
											: row12.m_applied_path;

									nb_line_tFileOutputDelimited_7++;
									CsvWritertFileOutputDelimited_7
											.writeNext(rowtFileOutputDelimited_7);

									tos_count_tFileOutputDelimited_7++;

									/**
									 * [tFileOutputDelimited_7 main ] stop
									 */

								} // End of branch "row12"

							} // End of branch "row23"

							/**
							 * [tFileInputDelimited_18 end ] start
							 */

							currentComponent = "tFileInputDelimited_18";

							nb_line_tFileInputDelimited_18++;
						}

					} finally {
						if (!(filename_tFileInputDelimited_18 instanceof java.io.InputStream)) {
							if (csvReadertFileInputDelimited_18 != null) {
								csvReadertFileInputDelimited_18.close();
							}
						}
						if (csvReadertFileInputDelimited_18 != null) {
							globalMap.put("tFileInputDelimited_18_NB_LINE",
									nb_line_tFileInputDelimited_18);
						}
					}

					ok_Hash.put("tFileInputDelimited_18", true);
					end_Hash.put("tFileInputDelimited_18",
							System.currentTimeMillis());

					/**
					 * [tFileInputDelimited_18 end ] stop
					 */
					/**
					 * [tUnite_1 end ] start
					 */

					currentComponent = "tUnite_1";

					globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);

					ok_Hash.put("tUnite_1", true);
					end_Hash.put("tUnite_1", System.currentTimeMillis());

					/**
					 * [tUnite_1 end ] stop
					 */

					/**
					 * [tUniqRow_4 end ] start
					 */

					currentComponent = "tUniqRow_4";

					globalMap.put("tUniqRow_4_NB_UNIQUES",
							nb_uniques_tUniqRow_4);
					globalMap.put("tUniqRow_4_NB_DUPLICATES",
							nb_duplicates_tUniqRow_4);

					ok_Hash.put("tUniqRow_4", true);
					end_Hash.put("tUniqRow_4", System.currentTimeMillis());

					/**
					 * [tUniqRow_4 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_7 end ] start
					 */

					currentComponent = "tFileOutputDelimited_7";

				} finally {

					if (CsvWritertFileOutputDelimited_7 != null) {
						CsvWritertFileOutputDelimited_7.close();
					}
					globalMap.put("tFileOutputDelimited_7_NB_LINE",
							nb_line_tFileOutputDelimited_7);
				} // finally

				ok_Hash.put("tFileOutputDelimited_7", true);
				end_Hash.put("tFileOutputDelimited_7",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_7 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_10:OnSubjobOk1",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_5Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_10:OnSubjobOk2",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_16Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_10_SUBPROCESS_STATE", 1);
	}

	public void tJava_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_5 begin ] start
				 */

				ok_Hash.put("tJava_5", false);
				start_Hash.put("tJava_5", System.currentTimeMillis());
				currentComponent = "tJava_5";

				int tos_count_tJava_5 = 0;

				context.subStatus = 100.0f;
				StatusListener.setSubStatus(context.subStatus,
						(int) (float) (context.subStatus) + "%");

				/**
				 * [tJava_5 begin ] stop
				 */
				/**
				 * [tJava_5 main ] start
				 */

				currentComponent = "tJava_5";

				tos_count_tJava_5++;

				/**
				 * [tJava_5 main ] stop
				 */
				/**
				 * [tJava_5 end ] start
				 */

				currentComponent = "tJava_5";

				ok_Hash.put("tJava_5", true);
				end_Hash.put("tJava_5", System.currentTimeMillis());

				/**
				 * [tJava_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_16Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_16 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_16", false);
				start_Hash.put("tCreateTemporaryFile_16",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_16";

				int tos_count_tCreateTemporaryFile_16 = 0;

				java.io.File dir_tCreateTemporaryFile_16 = new java.io.File(
						java.lang.System.getProperty("java.io.tmpdir"));
				dir_tCreateTemporaryFile_16.mkdirs();
				String name_tCreateTemporaryFile_16 = "talend_XXXX".replaceAll(
						"XXXX", routines.TalendString.getAsciiRandomString(4)
								.toUpperCase());
				String suffix_tCreateTemporaryFile_16 = ("tmp".replaceAll(
						"\\.", "").length() == 0) ? "tmp" : "tmp".replaceAll(
						"\\.", "");
				java.io.File file_tCreateTemporaryFile_16 = new java.io.File(
						dir_tCreateTemporaryFile_16,
						name_tCreateTemporaryFile_16 + "."
								+ suffix_tCreateTemporaryFile_16);
				if (file_tCreateTemporaryFile_16.createNewFile()) {
					file_tCreateTemporaryFile_16.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_16_FILEPATH",
						file_tCreateTemporaryFile_16.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_16 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_16 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_16";

				tos_count_tCreateTemporaryFile_16++;

				/**
				 * [tCreateTemporaryFile_16 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_16 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_16";

				ok_Hash.put("tCreateTemporaryFile_16", true);
				end_Hash.put("tCreateTemporaryFile_16",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_16 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_16:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputDelimited_21Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_16_SUBPROCESS_STATE", 1);
	}

	public static class asddStruct implements
			routines.system.IPersistableRow<asddStruct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(asddStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row29Struct implements
			routines.system.IPersistableRow<row29Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String itemCode;

		public String getItemCode() {
			return this.itemCode;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.itemCode = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.itemCode, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",itemCode=" + itemCode);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row29Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_21Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_21_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row29Struct row29 = new row29Struct();
				asddStruct asdd = new asddStruct();

				/**
				 * [tFileOutputDelimited_17 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_17", false);
				start_Hash.put("tFileOutputDelimited_17",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_17";

				int tos_count_tFileOutputDelimited_17 = 0;

				String fileName_tFileOutputDelimited_17 = "";
				fileName_tFileOutputDelimited_17 = (new java.io.File(
						((String) globalMap
								.get("tCreateTemporaryFile_16_FILEPATH"))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_17 = null;
				String extension_tFileOutputDelimited_17 = null;
				String directory_tFileOutputDelimited_17 = null;
				if ((fileName_tFileOutputDelimited_17.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_17.lastIndexOf(".") < fileName_tFileOutputDelimited_17
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17;
						extension_tFileOutputDelimited_17 = "";
					} else {
						fullName_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17
								.substring(0, fileName_tFileOutputDelimited_17
										.lastIndexOf("."));
						extension_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17
								.substring(fileName_tFileOutputDelimited_17
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17
							.substring(0, fileName_tFileOutputDelimited_17
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_17.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17
								.substring(0, fileName_tFileOutputDelimited_17
										.lastIndexOf("."));
						extension_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17
								.substring(fileName_tFileOutputDelimited_17
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17;
						extension_tFileOutputDelimited_17 = "";
					}
					directory_tFileOutputDelimited_17 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_17 = true;
				java.io.File filetFileOutputDelimited_17 = new java.io.File(
						fileName_tFileOutputDelimited_17);
				globalMap.put("tFileOutputDelimited_17_FILE_NAME",
						fileName_tFileOutputDelimited_17);

				String[] headColutFileOutputDelimited_17 = new String[13];
				class CSVBasicSet_tFileOutputDelimited_17 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_17[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_17 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_17[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_17[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_17 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_17[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_17[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_17 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_17[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_17 = 0;
				int splitEvery_tFileOutputDelimited_17 = 1000;
				int splitedFileNo_tFileOutputDelimited_17 = 0;
				int currentRow_tFileOutputDelimited_17 = 0;

				CSVBasicSet_tFileOutputDelimited_17 csvSettings_tFileOutputDelimited_17 = new CSVBasicSet_tFileOutputDelimited_17();
				csvSettings_tFileOutputDelimited_17.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_17.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_17.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_17 != null
						&& directory_tFileOutputDelimited_17.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_17 = new java.io.File(
							directory_tFileOutputDelimited_17);
					if (!dir_tFileOutputDelimited_17.exists()) {
						dir_tFileOutputDelimited_17.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_17 = null;
				try {
					CsvWritertFileOutputDelimited_17 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_17,
													false), "ISO-8859-15")));
					CsvWritertFileOutputDelimited_17
							.setSeparator(csvSettings_tFileOutputDelimited_17
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_17
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_17
									.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_17
									.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_17.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_17
										.getRowDelim());
					}

					CsvWritertFileOutputDelimited_17
							.setEscapeChar(csvSettings_tFileOutputDelimited_17
									.getEscapeChar());
					CsvWritertFileOutputDelimited_17
							.setQuoteChar(csvSettings_tFileOutputDelimited_17
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_17
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_17 begin ] stop
					 */

					/**
					 * [tMap_11 begin ] start
					 */

					ok_Hash.put("tMap_11", false);
					start_Hash.put("tMap_11", System.currentTimeMillis());
					currentComponent = "tMap_11";

					int tos_count_tMap_11 = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_11__Struct {
					}
					Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					asddStruct asdd_tmp = new asddStruct();
					// ###############################

					/**
					 * [tMap_11 begin ] stop
					 */

					/**
					 * [tFileInputDelimited_21 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_21", false);
					start_Hash.put("tFileInputDelimited_21",
							System.currentTimeMillis());
					currentComponent = "tFileInputDelimited_21";

					int tos_count_tFileInputDelimited_21 = 0;

					int nb_line_tFileInputDelimited_21 = 0;
					int footer_tFileInputDelimited_21 = 0;
					int totalLinetFileInputDelimited_21 = 0;
					int limittFileInputDelimited_21 = -1;
					int lastLinetFileInputDelimited_21 = -1;

					char fieldSeparator_tFileInputDelimited_21[] = null;

					// support passing value (property: Field Separator) by
					// 'context.fs' or 'globalMap.get("fs")'.
					if (((String) "\t").length() > 0) {
						fieldSeparator_tFileInputDelimited_21 = ((String) "\t")
								.toCharArray();
					} else {
						throw new IllegalArgumentException(
								"Field Separator must be assigned a char.");
					}

					char rowSeparator_tFileInputDelimited_21[] = null;

					// support passing value (property: Row Separator) by
					// 'context.rs' or 'globalMap.get("rs")'.
					if (((String) "\n").length() > 0) {
						rowSeparator_tFileInputDelimited_21 = ((String) "\n")
								.toCharArray();
					} else {
						throw new IllegalArgumentException(
								"Row Separator must be assigned a char.");
					}

					Object filename_tFileInputDelimited_21 = /**
					 * Start field
					 * tFileInputDelimited_21:FILENAME
					 */
					context.folderMain + context.folderOutput + "ont.csv"/**
					 * End
					 * field tFileInputDelimited_21:FILENAME
					 */
					;
					com.talend.csv.CSVReader csvReadertFileInputDelimited_21 = null;

					try {

						String[] rowtFileInputDelimited_21 = null;
						int currentLinetFileInputDelimited_21 = 0;
						int outputLinetFileInputDelimited_21 = 0;
						try {// TD110 begin
							if (filename_tFileInputDelimited_21 instanceof java.io.InputStream) {

								int footer_value_tFileInputDelimited_21 = 0;
								if (footer_value_tFileInputDelimited_21 > 0) {
									throw new java.lang.Exception(
											"When the input source is a stream,footer shouldn't be bigger than 0.");
								}

								csvReadertFileInputDelimited_21 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_21,
										fieldSeparator_tFileInputDelimited_21[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_21 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_21)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_21[0]);
							}

							csvReadertFileInputDelimited_21
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_21[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_21[0] != '\r'))
								csvReadertFileInputDelimited_21
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_21[0]);

							csvReadertFileInputDelimited_21.setQuoteChar('"');

							csvReadertFileInputDelimited_21
									.setEscapeChar(csvReadertFileInputDelimited_21
											.getQuoteChar());

							if (footer_tFileInputDelimited_21 > 0) {
								for (totalLinetFileInputDelimited_21 = 0; totalLinetFileInputDelimited_21 < 1; totalLinetFileInputDelimited_21++) {
									csvReadertFileInputDelimited_21.readNext();
								}
								csvReadertFileInputDelimited_21
										.setSkipEmptyRecords(true);
								while (csvReadertFileInputDelimited_21
										.readNext()) {

									rowtFileInputDelimited_21 = csvReadertFileInputDelimited_21
											.getValues();
									if (!(rowtFileInputDelimited_21.length == 1 && ("\015")
											.equals(rowtFileInputDelimited_21[0]))) {// empty
																						// line
																						// when
																						// row
																						// separator
																						// is
																						// '\n'

										totalLinetFileInputDelimited_21++;

									}

								}
								int lastLineTemptFileInputDelimited_21 = totalLinetFileInputDelimited_21
										- footer_tFileInputDelimited_21 < 0 ? 0
										: totalLinetFileInputDelimited_21
												- footer_tFileInputDelimited_21;
								if (lastLinetFileInputDelimited_21 > 0) {
									lastLinetFileInputDelimited_21 = lastLinetFileInputDelimited_21 < lastLineTemptFileInputDelimited_21 ? lastLinetFileInputDelimited_21
											: lastLineTemptFileInputDelimited_21;
								} else {
									lastLinetFileInputDelimited_21 = lastLineTemptFileInputDelimited_21;
								}

								csvReadertFileInputDelimited_21.close();
								if (filename_tFileInputDelimited_21 instanceof java.io.InputStream) {
									csvReadertFileInputDelimited_21 = new com.talend.csv.CSVReader(
											(java.io.InputStream) filename_tFileInputDelimited_21,
											fieldSeparator_tFileInputDelimited_21[0],
											"ISO-8859-15");
								} else {
									csvReadertFileInputDelimited_21 = new com.talend.csv.CSVReader(
											new java.io.BufferedReader(
													new java.io.InputStreamReader(
															new java.io.FileInputStream(
																	String.valueOf(filename_tFileInputDelimited_21)),
															"ISO-8859-15")),
											fieldSeparator_tFileInputDelimited_21[0]);
								}
								csvReadertFileInputDelimited_21
										.setTrimWhitespace(false);
								if ((rowSeparator_tFileInputDelimited_21[0] != '\n')
										&& (rowSeparator_tFileInputDelimited_21[0] != '\r'))
									csvReadertFileInputDelimited_21
											.setLineEnd(""
													+ rowSeparator_tFileInputDelimited_21[0]);

								csvReadertFileInputDelimited_21
										.setQuoteChar('"');

								csvReadertFileInputDelimited_21
										.setEscapeChar(csvReadertFileInputDelimited_21
												.getQuoteChar());

							}

							if (limittFileInputDelimited_21 != 0) {
								for (currentLinetFileInputDelimited_21 = 0; currentLinetFileInputDelimited_21 < 1; currentLinetFileInputDelimited_21++) {
									csvReadertFileInputDelimited_21.readNext();
								}
							}
							csvReadertFileInputDelimited_21
									.setSkipEmptyRecords(true);

						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());

						}// TD110 end

						while (limittFileInputDelimited_21 != 0
								&& csvReadertFileInputDelimited_21 != null
								&& csvReadertFileInputDelimited_21.readNext()) {

							rowtFileInputDelimited_21 = csvReadertFileInputDelimited_21
									.getValues();

							if (rowtFileInputDelimited_21.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_21[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
								continue;
							}

							currentLinetFileInputDelimited_21++;

							if (lastLinetFileInputDelimited_21 > -1
									&& currentLinetFileInputDelimited_21 > lastLinetFileInputDelimited_21) {
								break;
							}
							outputLinetFileInputDelimited_21++;
							if (limittFileInputDelimited_21 > 0
									&& outputLinetFileInputDelimited_21 > limittFileInputDelimited_21) {
								break;
							}

							row29 = null;

							boolean whetherReject_tFileInputDelimited_21 = false;
							row29 = new row29Struct();
							try {

								if (rowtFileInputDelimited_21.length == 1
										&& ("\015")
												.equals(rowtFileInputDelimited_21[0])) {// empty
																						// line
																						// when
																						// row
																						// separator
																						// is
																						// '\n'

									row29.HLEVEL = null;

									row29.Name = null;

									row29.Path = null;

									row29.DataType = null;

									row29.Update_Date = null;

									row29.Import_Date = null;

									row29.Download_Date = null;

									row29.PathID = null;

									row29.visual = null;

									row29.itemCode = null;

									row29.source = null;

									row29.xml = null;

									row29.m_applied_path = null;

								} else {

									int columnIndexWithD_tFileInputDelimited_21 = 0; // Column
																						// Index

									columnIndexWithD_tFileInputDelimited_21 = 0;

									if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

										if (rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21]
												.length() > 0) {

											row29.HLEVEL = ParserUtils
													.parseTo_Integer(rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21]);

										} else {
											row29.HLEVEL = null;
										}

									} else {
										row29.HLEVEL = null;
									}

									columnIndexWithD_tFileInputDelimited_21 = 1;

									if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

										row29.Name = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

									} else {
										row29.Name = null;
									}

									columnIndexWithD_tFileInputDelimited_21 = 2;

									if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

										row29.Path = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

									} else {
										row29.Path = null;
									}

									columnIndexWithD_tFileInputDelimited_21 = 3;

									if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

										row29.DataType = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

									} else {
										row29.DataType = null;
									}

									columnIndexWithD_tFileInputDelimited_21 = 4;

									if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

										row29.Update_Date = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

									} else {
										row29.Update_Date = null;
									}

									columnIndexWithD_tFileInputDelimited_21 = 5;

									if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

										row29.Import_Date = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

									} else {
										row29.Import_Date = null;
									}

									columnIndexWithD_tFileInputDelimited_21 = 6;

									if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

										row29.Download_Date = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

									} else {
										row29.Download_Date = null;
									}

									columnIndexWithD_tFileInputDelimited_21 = 7;

									if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

										row29.PathID = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

									} else {
										row29.PathID = null;
									}

									columnIndexWithD_tFileInputDelimited_21 = 8;

									if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

										row29.visual = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

									} else {
										row29.visual = null;
									}

									columnIndexWithD_tFileInputDelimited_21 = 9;

									if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

										row29.itemCode = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

									} else {
										row29.itemCode = null;
									}

									columnIndexWithD_tFileInputDelimited_21 = 10;

									if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

										row29.source = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

									} else {
										row29.source = null;
									}

									columnIndexWithD_tFileInputDelimited_21 = 11;

									if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

										row29.xml = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

									} else {
										row29.xml = null;
									}

									columnIndexWithD_tFileInputDelimited_21 = 12;

									if (columnIndexWithD_tFileInputDelimited_21 < rowtFileInputDelimited_21.length) {

										row29.m_applied_path = rowtFileInputDelimited_21[columnIndexWithD_tFileInputDelimited_21];

									} else {
										row29.m_applied_path = null;
									}

								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputDelimited_21 = true;

								System.err.println(e.getMessage());
								row29 = null;

							}

							/**
							 * [tFileInputDelimited_21 begin ] stop
							 */
							/**
							 * [tFileInputDelimited_21 main ] start
							 */

							currentComponent = "tFileInputDelimited_21";

							tos_count_tFileInputDelimited_21++;

							/**
							 * [tFileInputDelimited_21 main ] stop
							 */
							// Start of branch "row29"
							if (row29 != null) {

								/**
								 * [tMap_11 main ] start
								 */

								currentComponent = "tMap_11";

								boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_11 = false;
								boolean mainRowRejected_tMap_11 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
									// ###############################
									// # Output tables

									asdd = null;

									// # Output table : 'asdd'
									asdd_tmp.HLEVEL = row29.HLEVEL;
									asdd_tmp.Name = row29.Name;
									asdd_tmp.Path = row29.Path;
									asdd_tmp.DataType = row29.DataType;
									asdd_tmp.Update_Date = row29.Update_Date;
									asdd_tmp.Import_Date = row29.Import_Date;
									asdd_tmp.Download_Date = row29.Download_Date;
									asdd_tmp.PathID = row29.PathID;
									asdd_tmp.visual = row29.visual;
									asdd_tmp.codeList = row29.itemCode;
									asdd_tmp.source = row29.source;
									asdd_tmp.xml = row29.xml;
									asdd_tmp.m_applied_path = row29.m_applied_path
											.equalsIgnoreCase("@") ? "@"
											: row29.m_applied_path;
									asdd = asdd_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_11 = false;

								tos_count_tMap_11++;

								/**
								 * [tMap_11 main ] stop
								 */
								// Start of branch "asdd"
								if (asdd != null) {

									/**
									 * [tFileOutputDelimited_17 main ] start
									 */

									currentComponent = "tFileOutputDelimited_17";

									String[] rowtFileOutputDelimited_17 = new String[13];

									rowtFileOutputDelimited_17[0] = asdd.HLEVEL == null ? ""
											: String.valueOf(asdd.HLEVEL);

									rowtFileOutputDelimited_17[1] = asdd.Name == null ? ""
											: asdd.Name;

									rowtFileOutputDelimited_17[2] = asdd.Path == null ? ""
											: asdd.Path;

									rowtFileOutputDelimited_17[3] = asdd.DataType == null ? ""
											: asdd.DataType;

									rowtFileOutputDelimited_17[4] = asdd.Update_Date == null ? ""
											: asdd.Update_Date;

									rowtFileOutputDelimited_17[5] = asdd.Import_Date == null ? ""
											: asdd.Import_Date;

									rowtFileOutputDelimited_17[6] = asdd.Download_Date == null ? ""
											: asdd.Download_Date;

									rowtFileOutputDelimited_17[7] = asdd.PathID == null ? ""
											: asdd.PathID;

									rowtFileOutputDelimited_17[8] = asdd.visual == null ? ""
											: asdd.visual;

									rowtFileOutputDelimited_17[9] = asdd.codeList == null ? ""
											: asdd.codeList;

									rowtFileOutputDelimited_17[10] = asdd.source == null ? ""
											: asdd.source;

									rowtFileOutputDelimited_17[11] = asdd.xml == null ? ""
											: asdd.xml;

									rowtFileOutputDelimited_17[12] = asdd.m_applied_path == null ? ""
											: asdd.m_applied_path;

									nb_line_tFileOutputDelimited_17++;
									CsvWritertFileOutputDelimited_17
											.writeNext(rowtFileOutputDelimited_17);

									tos_count_tFileOutputDelimited_17++;

									/**
									 * [tFileOutputDelimited_17 main ] stop
									 */

								} // End of branch "asdd"

							} // End of branch "row29"

							/**
							 * [tFileInputDelimited_21 end ] start
							 */

							currentComponent = "tFileInputDelimited_21";

							nb_line_tFileInputDelimited_21++;
						}

					} finally {
						if (!(filename_tFileInputDelimited_21 instanceof java.io.InputStream)) {
							if (csvReadertFileInputDelimited_21 != null) {
								csvReadertFileInputDelimited_21.close();
							}
						}
						if (csvReadertFileInputDelimited_21 != null) {
							globalMap.put("tFileInputDelimited_21_NB_LINE",
									nb_line_tFileInputDelimited_21);
						}
					}

					ok_Hash.put("tFileInputDelimited_21", true);
					end_Hash.put("tFileInputDelimited_21",
							System.currentTimeMillis());

					/**
					 * [tFileInputDelimited_21 end ] stop
					 */

					/**
					 * [tMap_11 end ] start
					 */

					currentComponent = "tMap_11";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					ok_Hash.put("tMap_11", true);
					end_Hash.put("tMap_11", System.currentTimeMillis());

					/**
					 * [tMap_11 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_17 end ] start
					 */

					currentComponent = "tFileOutputDelimited_17";

				} finally {

					if (CsvWritertFileOutputDelimited_17 != null) {
						CsvWritertFileOutputDelimited_17.close();
					}
					globalMap.put("tFileOutputDelimited_17_NB_LINE",
							nb_line_tFileOutputDelimited_17);
				} // finally

				ok_Hash.put("tFileOutputDelimited_17", true);
				end_Hash.put("tFileOutputDelimited_17",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_17 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_21:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputDelimited_22Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_21_SUBPROCESS_STATE", 1);
	}

	public static class row30Struct implements
			routines.system.IPersistableRow<row30Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.codeList = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",codeList=" + codeList);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row30Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_22Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_22_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row30Struct row30 = new row30Struct();

				/**
				 * [tFileOutputDelimited_18 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_18", false);
				start_Hash.put("tFileOutputDelimited_18",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_18";

				int tos_count_tFileOutputDelimited_18 = 0;

				String fileName_tFileOutputDelimited_18 = "";
				fileName_tFileOutputDelimited_18 = (new java.io.File(
						context.folderMain + context.folderOutput + "ont.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_18 = null;
				String extension_tFileOutputDelimited_18 = null;
				String directory_tFileOutputDelimited_18 = null;
				if ((fileName_tFileOutputDelimited_18.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_18.lastIndexOf(".") < fileName_tFileOutputDelimited_18
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18;
						extension_tFileOutputDelimited_18 = "";
					} else {
						fullName_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18
								.substring(0, fileName_tFileOutputDelimited_18
										.lastIndexOf("."));
						extension_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18
								.substring(fileName_tFileOutputDelimited_18
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18
							.substring(0, fileName_tFileOutputDelimited_18
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_18.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18
								.substring(0, fileName_tFileOutputDelimited_18
										.lastIndexOf("."));
						extension_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18
								.substring(fileName_tFileOutputDelimited_18
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18;
						extension_tFileOutputDelimited_18 = "";
					}
					directory_tFileOutputDelimited_18 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_18 = true;
				java.io.File filetFileOutputDelimited_18 = new java.io.File(
						fileName_tFileOutputDelimited_18);
				globalMap.put("tFileOutputDelimited_18_FILE_NAME",
						fileName_tFileOutputDelimited_18);

				String[] headColutFileOutputDelimited_18 = new String[13];
				class CSVBasicSet_tFileOutputDelimited_18 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_18[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_18 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_18[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_18[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_18 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_18[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_18[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_18 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_18[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_18 = 0;
				int splitEvery_tFileOutputDelimited_18 = 1000;
				int splitedFileNo_tFileOutputDelimited_18 = 0;
				int currentRow_tFileOutputDelimited_18 = 0;

				CSVBasicSet_tFileOutputDelimited_18 csvSettings_tFileOutputDelimited_18 = new CSVBasicSet_tFileOutputDelimited_18();
				csvSettings_tFileOutputDelimited_18.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_18.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_18.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_18 != null
						&& directory_tFileOutputDelimited_18.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_18 = new java.io.File(
							directory_tFileOutputDelimited_18);
					if (!dir_tFileOutputDelimited_18.exists()) {
						dir_tFileOutputDelimited_18.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_18 = null;
				try {
					CsvWritertFileOutputDelimited_18 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_18,
													false), "ISO-8859-15")));
					CsvWritertFileOutputDelimited_18
							.setSeparator(csvSettings_tFileOutputDelimited_18
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_18
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_18
									.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_18
									.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_18.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_18
										.getRowDelim());
					}

					if (filetFileOutputDelimited_18.length() == 0) {

						headColutFileOutputDelimited_18[0] = "HLEVEL";

						headColutFileOutputDelimited_18[1] = "Name";

						headColutFileOutputDelimited_18[2] = "Path";

						headColutFileOutputDelimited_18[3] = "DataType";

						headColutFileOutputDelimited_18[4] = "Update_Date";

						headColutFileOutputDelimited_18[5] = "Import_Date";

						headColutFileOutputDelimited_18[6] = "Download_Date";

						headColutFileOutputDelimited_18[7] = "PathID";

						headColutFileOutputDelimited_18[8] = "visual";

						headColutFileOutputDelimited_18[9] = "codeList";

						headColutFileOutputDelimited_18[10] = "source";

						headColutFileOutputDelimited_18[11] = "xml";

						headColutFileOutputDelimited_18[12] = "m_applied_path";

						CsvWritertFileOutputDelimited_18
								.writeNext(headColutFileOutputDelimited_18);
						CsvWritertFileOutputDelimited_18.flush();

					}

					CsvWritertFileOutputDelimited_18
							.setEscapeChar(csvSettings_tFileOutputDelimited_18
									.getEscapeChar());
					CsvWritertFileOutputDelimited_18
							.setQuoteChar(csvSettings_tFileOutputDelimited_18
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_18
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_18 begin ] stop
					 */

					/**
					 * [tFileInputDelimited_22 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_22", false);
					start_Hash.put("tFileInputDelimited_22",
							System.currentTimeMillis());
					currentComponent = "tFileInputDelimited_22";

					int tos_count_tFileInputDelimited_22 = 0;

					int nb_line_tFileInputDelimited_22 = 0;
					int footer_tFileInputDelimited_22 = 0;
					int totalLinetFileInputDelimited_22 = 0;
					int limittFileInputDelimited_22 = -1;
					int lastLinetFileInputDelimited_22 = -1;

					char fieldSeparator_tFileInputDelimited_22[] = null;

					// support passing value (property: Field Separator) by
					// 'context.fs' or 'globalMap.get("fs")'.
					if (((String) "\t").length() > 0) {
						fieldSeparator_tFileInputDelimited_22 = ((String) "\t")
								.toCharArray();
					} else {
						throw new IllegalArgumentException(
								"Field Separator must be assigned a char.");
					}

					char rowSeparator_tFileInputDelimited_22[] = null;

					// support passing value (property: Row Separator) by
					// 'context.rs' or 'globalMap.get("rs")'.
					if (((String) "\n").length() > 0) {
						rowSeparator_tFileInputDelimited_22 = ((String) "\n")
								.toCharArray();
					} else {
						throw new IllegalArgumentException(
								"Row Separator must be assigned a char.");
					}

					Object filename_tFileInputDelimited_22 = /**
					 * Start field
					 * tFileInputDelimited_22:FILENAME
					 */
					((String) globalMap.get("tCreateTemporaryFile_16_FILEPATH"))/**
					 * 
					 * End field tFileInputDelimited_22:FILENAME
					 */
					;
					com.talend.csv.CSVReader csvReadertFileInputDelimited_22 = null;

					try {

						String[] rowtFileInputDelimited_22 = null;
						int currentLinetFileInputDelimited_22 = 0;
						int outputLinetFileInputDelimited_22 = 0;
						try {// TD110 begin
							if (filename_tFileInputDelimited_22 instanceof java.io.InputStream) {

								int footer_value_tFileInputDelimited_22 = 0;
								if (footer_value_tFileInputDelimited_22 > 0) {
									throw new java.lang.Exception(
											"When the input source is a stream,footer shouldn't be bigger than 0.");
								}

								csvReadertFileInputDelimited_22 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_22,
										fieldSeparator_tFileInputDelimited_22[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_22 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_22)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_22[0]);
							}

							csvReadertFileInputDelimited_22
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_22[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_22[0] != '\r'))
								csvReadertFileInputDelimited_22
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_22[0]);

							csvReadertFileInputDelimited_22.setQuoteChar('"');

							csvReadertFileInputDelimited_22
									.setEscapeChar(csvReadertFileInputDelimited_22
											.getQuoteChar());

							if (footer_tFileInputDelimited_22 > 0) {
								for (totalLinetFileInputDelimited_22 = 0; totalLinetFileInputDelimited_22 < 0; totalLinetFileInputDelimited_22++) {
									csvReadertFileInputDelimited_22.readNext();
								}
								csvReadertFileInputDelimited_22
										.setSkipEmptyRecords(true);
								while (csvReadertFileInputDelimited_22
										.readNext()) {

									rowtFileInputDelimited_22 = csvReadertFileInputDelimited_22
											.getValues();
									if (!(rowtFileInputDelimited_22.length == 1 && ("\015")
											.equals(rowtFileInputDelimited_22[0]))) {// empty
																						// line
																						// when
																						// row
																						// separator
																						// is
																						// '\n'

										totalLinetFileInputDelimited_22++;

									}

								}
								int lastLineTemptFileInputDelimited_22 = totalLinetFileInputDelimited_22
										- footer_tFileInputDelimited_22 < 0 ? 0
										: totalLinetFileInputDelimited_22
												- footer_tFileInputDelimited_22;
								if (lastLinetFileInputDelimited_22 > 0) {
									lastLinetFileInputDelimited_22 = lastLinetFileInputDelimited_22 < lastLineTemptFileInputDelimited_22 ? lastLinetFileInputDelimited_22
											: lastLineTemptFileInputDelimited_22;
								} else {
									lastLinetFileInputDelimited_22 = lastLineTemptFileInputDelimited_22;
								}

								csvReadertFileInputDelimited_22.close();
								if (filename_tFileInputDelimited_22 instanceof java.io.InputStream) {
									csvReadertFileInputDelimited_22 = new com.talend.csv.CSVReader(
											(java.io.InputStream) filename_tFileInputDelimited_22,
											fieldSeparator_tFileInputDelimited_22[0],
											"ISO-8859-15");
								} else {
									csvReadertFileInputDelimited_22 = new com.talend.csv.CSVReader(
											new java.io.BufferedReader(
													new java.io.InputStreamReader(
															new java.io.FileInputStream(
																	String.valueOf(filename_tFileInputDelimited_22)),
															"ISO-8859-15")),
											fieldSeparator_tFileInputDelimited_22[0]);
								}
								csvReadertFileInputDelimited_22
										.setTrimWhitespace(false);
								if ((rowSeparator_tFileInputDelimited_22[0] != '\n')
										&& (rowSeparator_tFileInputDelimited_22[0] != '\r'))
									csvReadertFileInputDelimited_22
											.setLineEnd(""
													+ rowSeparator_tFileInputDelimited_22[0]);

								csvReadertFileInputDelimited_22
										.setQuoteChar('"');

								csvReadertFileInputDelimited_22
										.setEscapeChar(csvReadertFileInputDelimited_22
												.getQuoteChar());

							}

							if (limittFileInputDelimited_22 != 0) {
								for (currentLinetFileInputDelimited_22 = 0; currentLinetFileInputDelimited_22 < 0; currentLinetFileInputDelimited_22++) {
									csvReadertFileInputDelimited_22.readNext();
								}
							}
							csvReadertFileInputDelimited_22
									.setSkipEmptyRecords(true);

						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());

						}// TD110 end

						while (limittFileInputDelimited_22 != 0
								&& csvReadertFileInputDelimited_22 != null
								&& csvReadertFileInputDelimited_22.readNext()) {

							rowtFileInputDelimited_22 = csvReadertFileInputDelimited_22
									.getValues();

							if (rowtFileInputDelimited_22.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_22[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
								continue;
							}

							currentLinetFileInputDelimited_22++;

							if (lastLinetFileInputDelimited_22 > -1
									&& currentLinetFileInputDelimited_22 > lastLinetFileInputDelimited_22) {
								break;
							}
							outputLinetFileInputDelimited_22++;
							if (limittFileInputDelimited_22 > 0
									&& outputLinetFileInputDelimited_22 > limittFileInputDelimited_22) {
								break;
							}

							row30 = null;

							boolean whetherReject_tFileInputDelimited_22 = false;
							row30 = new row30Struct();
							try {

								if (rowtFileInputDelimited_22.length == 1
										&& ("\015")
												.equals(rowtFileInputDelimited_22[0])) {// empty
																						// line
																						// when
																						// row
																						// separator
																						// is
																						// '\n'

									row30.HLEVEL = null;

									row30.Name = null;

									row30.Path = null;

									row30.DataType = null;

									row30.Update_Date = null;

									row30.Import_Date = null;

									row30.Download_Date = null;

									row30.PathID = null;

									row30.visual = null;

									row30.codeList = null;

									row30.source = null;

									row30.xml = null;

									row30.m_applied_path = null;

								} else {

									int columnIndexWithD_tFileInputDelimited_22 = 0; // Column
																						// Index

									columnIndexWithD_tFileInputDelimited_22 = 0;

									if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

										if (rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22]
												.length() > 0) {

											row30.HLEVEL = ParserUtils
													.parseTo_Integer(rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22]);

										} else {
											row30.HLEVEL = null;
										}

									} else {
										row30.HLEVEL = null;
									}

									columnIndexWithD_tFileInputDelimited_22 = 1;

									if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

										row30.Name = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

									} else {
										row30.Name = null;
									}

									columnIndexWithD_tFileInputDelimited_22 = 2;

									if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

										row30.Path = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

									} else {
										row30.Path = null;
									}

									columnIndexWithD_tFileInputDelimited_22 = 3;

									if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

										row30.DataType = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

									} else {
										row30.DataType = null;
									}

									columnIndexWithD_tFileInputDelimited_22 = 4;

									if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

										row30.Update_Date = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

									} else {
										row30.Update_Date = null;
									}

									columnIndexWithD_tFileInputDelimited_22 = 5;

									if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

										row30.Import_Date = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

									} else {
										row30.Import_Date = null;
									}

									columnIndexWithD_tFileInputDelimited_22 = 6;

									if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

										row30.Download_Date = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

									} else {
										row30.Download_Date = null;
									}

									columnIndexWithD_tFileInputDelimited_22 = 7;

									if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

										row30.PathID = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

									} else {
										row30.PathID = null;
									}

									columnIndexWithD_tFileInputDelimited_22 = 8;

									if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

										row30.visual = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

									} else {
										row30.visual = null;
									}

									columnIndexWithD_tFileInputDelimited_22 = 9;

									if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

										row30.codeList = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

									} else {
										row30.codeList = null;
									}

									columnIndexWithD_tFileInputDelimited_22 = 10;

									if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

										row30.source = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

									} else {
										row30.source = null;
									}

									columnIndexWithD_tFileInputDelimited_22 = 11;

									if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

										row30.xml = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

									} else {
										row30.xml = null;
									}

									columnIndexWithD_tFileInputDelimited_22 = 12;

									if (columnIndexWithD_tFileInputDelimited_22 < rowtFileInputDelimited_22.length) {

										row30.m_applied_path = rowtFileInputDelimited_22[columnIndexWithD_tFileInputDelimited_22];

									} else {
										row30.m_applied_path = null;
									}

								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputDelimited_22 = true;

								System.err.println(e.getMessage());
								row30 = null;

							}

							/**
							 * [tFileInputDelimited_22 begin ] stop
							 */
							/**
							 * [tFileInputDelimited_22 main ] start
							 */

							currentComponent = "tFileInputDelimited_22";

							tos_count_tFileInputDelimited_22++;

							/**
							 * [tFileInputDelimited_22 main ] stop
							 */
							// Start of branch "row30"
							if (row30 != null) {

								/**
								 * [tFileOutputDelimited_18 main ] start
								 */

								currentComponent = "tFileOutputDelimited_18";

								String[] rowtFileOutputDelimited_18 = new String[13];

								rowtFileOutputDelimited_18[0] = row30.HLEVEL == null ? ""
										: String.valueOf(row30.HLEVEL);

								rowtFileOutputDelimited_18[1] = row30.Name == null ? ""
										: row30.Name;

								rowtFileOutputDelimited_18[2] = row30.Path == null ? ""
										: row30.Path;

								rowtFileOutputDelimited_18[3] = row30.DataType == null ? ""
										: row30.DataType;

								rowtFileOutputDelimited_18[4] = row30.Update_Date == null ? ""
										: row30.Update_Date;

								rowtFileOutputDelimited_18[5] = row30.Import_Date == null ? ""
										: row30.Import_Date;

								rowtFileOutputDelimited_18[6] = row30.Download_Date == null ? ""
										: row30.Download_Date;

								rowtFileOutputDelimited_18[7] = row30.PathID == null ? ""
										: row30.PathID;

								rowtFileOutputDelimited_18[8] = row30.visual == null ? ""
										: row30.visual;

								rowtFileOutputDelimited_18[9] = row30.codeList == null ? ""
										: row30.codeList;

								rowtFileOutputDelimited_18[10] = row30.source == null ? ""
										: row30.source;

								rowtFileOutputDelimited_18[11] = row30.xml == null ? ""
										: row30.xml;

								rowtFileOutputDelimited_18[12] = row30.m_applied_path == null ? ""
										: row30.m_applied_path;

								nb_line_tFileOutputDelimited_18++;
								CsvWritertFileOutputDelimited_18
										.writeNext(rowtFileOutputDelimited_18);

								tos_count_tFileOutputDelimited_18++;

								/**
								 * [tFileOutputDelimited_18 main ] stop
								 */

							} // End of branch "row30"

							/**
							 * [tFileInputDelimited_22 end ] start
							 */

							currentComponent = "tFileInputDelimited_22";

							nb_line_tFileInputDelimited_22++;
						}

					} finally {
						if (!(filename_tFileInputDelimited_22 instanceof java.io.InputStream)) {
							if (csvReadertFileInputDelimited_22 != null) {
								csvReadertFileInputDelimited_22.close();
							}
						}
						if (csvReadertFileInputDelimited_22 != null) {
							globalMap.put("tFileInputDelimited_22_NB_LINE",
									nb_line_tFileInputDelimited_22);
						}
					}

					ok_Hash.put("tFileInputDelimited_22", true);
					end_Hash.put("tFileInputDelimited_22",
							System.currentTimeMillis());

					/**
					 * [tFileInputDelimited_22 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_18 end ] start
					 */

					currentComponent = "tFileOutputDelimited_18";

				} finally {

					if (CsvWritertFileOutputDelimited_18 != null) {
						CsvWritertFileOutputDelimited_18.close();
					}
					globalMap.put("tFileOutputDelimited_18_NB_LINE",
							nb_line_tFileOutputDelimited_18);
				} // finally

				ok_Hash.put("tFileOutputDelimited_18", true);
				end_Hash.put("tFileOutputDelimited_18",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_18 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_22_SUBPROCESS_STATE", 1);
	}

	public void tJava_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_3 begin ] start
				 */

				ok_Hash.put("tJava_3", false);
				start_Hash.put("tJava_3", System.currentTimeMillis());
				currentComponent = "tJava_3";

				int tos_count_tJava_3 = 0;

				context.subStatus = 95.0f;
				StatusListener.setSubStatus(context.subStatus,
						((int) (float) (context.subStatus)) + "%");

				/**
				 * [tJava_3 begin ] stop
				 */
				/**
				 * [tJava_3 main ] start
				 */

				currentComponent = "tJava_3";

				tos_count_tJava_3++;

				/**
				 * [tJava_3 main ] stop
				 */
				/**
				 * [tJava_3 end ] start
				 */

				currentComponent = "tJava_3";

				ok_Hash.put("tJava_3", true);
				end_Hash.put("tJava_3", System.currentTimeMillis());

				/**
				 * [tJava_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_3:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_2Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String StudyEventRepeatKey;

		public String getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public String FormRepeatKey;

		public String getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		public String itemGroupRepeatKey;

		public String getItemGroupRepeatKey() {
			return this.itemGroupRepeatKey;
		}

		public String startDate;

		public String getStartDate() {
			return this.startDate;
		}

		public String endDate;

		public String getEndDate() {
			return this.endDate;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String sic;

		public String getSic() {
			return this.sic;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String mod_path;

		public String getMod_path() {
			return this.mod_path;
		}

		public String mod_item;

		public String getMod_item() {
			return this.mod_item;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.itemID = readString(dis);

					this.Value = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.SubjectKey = readString(dis);

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.StudyEventRepeatKey = readString(dis);

					this.FormRepeatKey = readString(dis);

					this.itemGroupRepeatKey = readString(dis);

					this.startDate = readString(dis);

					this.endDate = readString(dis);

					this.source = readString(dis);

					this.sic = readString(dis);

					this.m_applied_path = readString(dis);

					this.mod_path = readString(dis);

					this.mod_item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.SubjectKey, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.StudyEventRepeatKey, dos);

				// String

				writeString(this.FormRepeatKey, dos);

				// String

				writeString(this.itemGroupRepeatKey, dos);

				// String

				writeString(this.startDate, dos);

				// String

				writeString(this.endDate, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.sic, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.mod_path, dos);

				// String

				writeString(this.mod_item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",StudyEventRepeatKey=" + StudyEventRepeatKey);
			sb.append(",FormRepeatKey=" + FormRepeatKey);
			sb.append(",itemGroupRepeatKey=" + itemGroupRepeatKey);
			sb.append(",startDate=" + startDate);
			sb.append(",endDate=" + endDate);
			sb.append(",source=" + source);
			sb.append(",sic=" + sic);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",mod_path=" + mod_path);
			sb.append(",mod_item=" + mod_item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class outt1Struct implements
			routines.system.IPersistableRow<outt1Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String StudyEventRepeatKey;

		public String getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public String FormRepeatKey;

		public String getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		public String itemGroupRepeatKey;

		public String getItemGroupRepeatKey() {
			return this.itemGroupRepeatKey;
		}

		public String startDate;

		public String getStartDate() {
			return this.startDate;
		}

		public String endDate;

		public String getEndDate() {
			return this.endDate;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String mod_path;

		public String getMod_path() {
			return this.mod_path;
		}

		public String mod_item;

		public String getMod_item() {
			return this.mod_item;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.itemID = readString(dis);

					this.Value = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.SubjectKey = readString(dis);

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.StudyEventRepeatKey = readString(dis);

					this.FormRepeatKey = readString(dis);

					this.itemGroupRepeatKey = readString(dis);

					this.startDate = readString(dis);

					this.endDate = readString(dis);

					this.source = readString(dis);

					this.m_applied_path = readString(dis);

					this.mod_path = readString(dis);

					this.mod_item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.SubjectKey, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.StudyEventRepeatKey, dos);

				// String

				writeString(this.FormRepeatKey, dos);

				// String

				writeString(this.itemGroupRepeatKey, dos);

				// String

				writeString(this.startDate, dos);

				// String

				writeString(this.endDate, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.mod_path, dos);

				// String

				writeString(this.mod_item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",StudyEventRepeatKey=" + StudyEventRepeatKey);
			sb.append(",FormRepeatKey=" + FormRepeatKey);
			sb.append(",itemGroupRepeatKey=" + itemGroupRepeatKey);
			sb.append(",startDate=" + startDate);
			sb.append(",endDate=" + endDate);
			sb.append(",source=" + source);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",mod_path=" + mod_path);
			sb.append(",mod_item=" + mod_item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(outt1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfout2Struct implements
			routines.system.IPersistableRow<copyOfout2Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String StudyEventRepeatKey;

		public String getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public String FormRepeatKey;

		public String getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		public String itemGroupRepeatKey;

		public String getItemGroupRepeatKey() {
			return this.itemGroupRepeatKey;
		}

		public String startDate;

		public String getStartDate() {
			return this.startDate;
		}

		public String endDate;

		public String getEndDate() {
			return this.endDate;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String mod_path;

		public String getMod_path() {
			return this.mod_path;
		}

		public String mod_item;

		public String getMod_item() {
			return this.mod_item;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.itemID = readString(dis);

					this.Value = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.SubjectKey = readString(dis);

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.StudyEventRepeatKey = readString(dis);

					this.FormRepeatKey = readString(dis);

					this.itemGroupRepeatKey = readString(dis);

					this.startDate = readString(dis);

					this.endDate = readString(dis);

					this.source = readString(dis);

					this.m_applied_path = readString(dis);

					this.mod_path = readString(dis);

					this.mod_item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.SubjectKey, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.StudyEventRepeatKey, dos);

				// String

				writeString(this.FormRepeatKey, dos);

				// String

				writeString(this.itemGroupRepeatKey, dos);

				// String

				writeString(this.startDate, dos);

				// String

				writeString(this.endDate, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.mod_path, dos);

				// String

				writeString(this.mod_item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",StudyEventRepeatKey=" + StudyEventRepeatKey);
			sb.append(",FormRepeatKey=" + FormRepeatKey);
			sb.append(",itemGroupRepeatKey=" + itemGroupRepeatKey);
			sb.append(",startDate=" + startDate);
			sb.append(",endDate=" + endDate);
			sb.append(",source=" + source);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",mod_path=" + mod_path);
			sb.append(",mod_item=" + mod_item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfout2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements
			routines.system.IPersistableComparableLookupRow<row13Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String StudyEventRepeatKey;

		public String getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public String FormRepeatKey;

		public String getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		public String itemGroupRepeatKey;

		public String getItemGroupRepeatKey() {
			return this.itemGroupRepeatKey;
		}

		public String itemCode;

		public String getItemCode() {
			return this.itemCode;
		}

		public String startDate;

		public String getStartDate() {
			return this.startDate;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String mod_path;

		public String getMod_path() {
			return this.mod_path;
		}

		public String mod_item;

		public String getMod_item() {
			return this.mod_item;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.SubjectKey == null) ? 0 : this.SubjectKey
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row13Struct other = (row13Struct) obj;

			if (this.SubjectKey == null) {
				if (other.SubjectKey != null)
					return false;
			} else if (!this.SubjectKey.equals(other.SubjectKey))
				return false;

			return true;
		}

		public void copyDataTo(row13Struct other) {

			other.itemID = this.itemID;
			other.Value = this.Value;
			other.VisitID = this.VisitID;
			other.FormID = this.FormID;
			other.SubjectKey = this.SubjectKey;
			other.Path = this.Path;
			other.PathID = this.PathID;
			other.DataType = this.DataType;
			other.Update_Date = this.Update_Date;
			other.Import_Date = this.Import_Date;
			other.Download_Date = this.Download_Date;
			other.StudyEventRepeatKey = this.StudyEventRepeatKey;
			other.FormRepeatKey = this.FormRepeatKey;
			other.itemGroupRepeatKey = this.itemGroupRepeatKey;
			other.itemCode = this.itemCode;
			other.startDate = this.startDate;
			other.m_applied_path = this.m_applied_path;
			other.mod_path = this.mod_path;
			other.mod_item = this.mod_item;

		}

		public void copyKeysDataTo(row13Struct other) {

			other.SubjectKey = this.SubjectKey;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.SubjectKey = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SubjectKey, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.itemID = readString(dis, ois);

				this.Value = readString(dis, ois);

				this.VisitID = readString(dis, ois);

				this.FormID = readString(dis, ois);

				this.Path = readString(dis, ois);

				this.PathID = readString(dis, ois);

				this.DataType = readString(dis, ois);

				this.Update_Date = readString(dis, ois);

				this.Import_Date = readString(dis, ois);

				this.Download_Date = readString(dis, ois);

				this.StudyEventRepeatKey = readString(dis, ois);

				this.FormRepeatKey = readString(dis, ois);

				this.itemGroupRepeatKey = readString(dis, ois);

				this.itemCode = readString(dis, ois);

				this.startDate = readString(dis, ois);

				this.m_applied_path = readString(dis, ois);

				this.mod_path = readString(dis, ois);

				this.mod_item = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.itemID, dos, oos);

				writeString(this.Value, dos, oos);

				writeString(this.VisitID, dos, oos);

				writeString(this.FormID, dos, oos);

				writeString(this.Path, dos, oos);

				writeString(this.PathID, dos, oos);

				writeString(this.DataType, dos, oos);

				writeString(this.Update_Date, dos, oos);

				writeString(this.Import_Date, dos, oos);

				writeString(this.Download_Date, dos, oos);

				writeString(this.StudyEventRepeatKey, dos, oos);

				writeString(this.FormRepeatKey, dos, oos);

				writeString(this.itemGroupRepeatKey, dos, oos);

				writeString(this.itemCode, dos, oos);

				writeString(this.startDate, dos, oos);

				writeString(this.m_applied_path, dos, oos);

				writeString(this.mod_path, dos, oos);

				writeString(this.mod_item, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",StudyEventRepeatKey=" + StudyEventRepeatKey);
			sb.append(",FormRepeatKey=" + FormRepeatKey);
			sb.append(",itemGroupRepeatKey=" + itemGroupRepeatKey);
			sb.append(",itemCode=" + itemCode);
			sb.append(",startDate=" + startDate);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",mod_path=" + mod_path);
			sb.append(",mod_item=" + mod_item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SubjectKey,
					other.SubjectKey);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String StudyEventRepeatKey;

		public String getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public String FormRepeatKey;

		public String getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		public String itemGroupRepeatKey;

		public String getItemGroupRepeatKey() {
			return this.itemGroupRepeatKey;
		}

		public String itemCode;

		public String getItemCode() {
			return this.itemCode;
		}

		public String startDate;

		public String getStartDate() {
			return this.startDate;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String mod_path;

		public String getMod_path() {
			return this.mod_path;
		}

		public String mod_item;

		public String getMod_item() {
			return this.mod_item;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.itemID = readString(dis);

					this.Value = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.SubjectKey = readString(dis);

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.StudyEventRepeatKey = readString(dis);

					this.FormRepeatKey = readString(dis);

					this.itemGroupRepeatKey = readString(dis);

					this.itemCode = readString(dis);

					this.startDate = readString(dis);

					this.m_applied_path = readString(dis);

					this.mod_path = readString(dis);

					this.mod_item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.SubjectKey, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.StudyEventRepeatKey, dos);

				// String

				writeString(this.FormRepeatKey, dos);

				// String

				writeString(this.itemGroupRepeatKey, dos);

				// String

				writeString(this.itemCode, dos);

				// String

				writeString(this.startDate, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.mod_path, dos);

				// String

				writeString(this.mod_item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",StudyEventRepeatKey=" + StudyEventRepeatKey);
			sb.append(",FormRepeatKey=" + FormRepeatKey);
			sb.append(",itemGroupRepeatKey=" + itemGroupRepeatKey);
			sb.append(",itemCode=" + itemCode);
			sb.append(",startDate=" + startDate);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",mod_path=" + mod_path);
			sb.append(",mod_item=" + mod_item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_2Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_2Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String StudyEventRepeatKey;

		public String getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public String FormRepeatKey;

		public String getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		public String itemGroupRepeatKey;

		public String getItemGroupRepeatKey() {
			return this.itemGroupRepeatKey;
		}

		public String itemCode;

		public String getItemCode() {
			return this.itemCode;
		}

		public String startDate;

		public String getStartDate() {
			return this.startDate;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String mod_path;

		public String getMod_path() {
			return this.mod_path;
		}

		public String mod_item;

		public String getMod_item() {
			return this.mod_item;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.itemID = readString(dis);

					this.Value = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.SubjectKey = readString(dis);

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.StudyEventRepeatKey = readString(dis);

					this.FormRepeatKey = readString(dis);

					this.itemGroupRepeatKey = readString(dis);

					this.itemCode = readString(dis);

					this.startDate = readString(dis);

					this.m_applied_path = readString(dis);

					this.mod_path = readString(dis);

					this.mod_item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.SubjectKey, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.StudyEventRepeatKey, dos);

				// String

				writeString(this.FormRepeatKey, dos);

				// String

				writeString(this.itemGroupRepeatKey, dos);

				// String

				writeString(this.itemCode, dos);

				// String

				writeString(this.startDate, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.mod_path, dos);

				// String

				writeString(this.mod_item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",StudyEventRepeatKey=" + StudyEventRepeatKey);
			sb.append(",FormRepeatKey=" + FormRepeatKey);
			sb.append(",itemGroupRepeatKey=" + itemGroupRepeatKey);
			sb.append(",itemCode=" + itemCode);
			sb.append(",startDate=" + startDate);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",mod_path=" + mod_path);
			sb.append(",mod_item=" + mod_item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements
			routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public String itemID;

		public String getItemID() {
			return this.itemID;
		}

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String StudyEventRepeatKey;

		public String getStudyEventRepeatKey() {
			return this.StudyEventRepeatKey;
		}

		public String FormRepeatKey;

		public String getFormRepeatKey() {
			return this.FormRepeatKey;
		}

		public String itemGroupRepeatKey;

		public String getItemGroupRepeatKey() {
			return this.itemGroupRepeatKey;
		}

		public String itemCode;

		public String getItemCode() {
			return this.itemCode;
		}

		public String startDate;

		public String getStartDate() {
			return this.startDate;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		public String mod_path;

		public String getMod_path() {
			return this.mod_path;
		}

		public String mod_item;

		public String getMod_item() {
			return this.mod_item;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.itemID = readString(dis);

					this.Value = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.SubjectKey = readString(dis);

					this.Path = readString(dis);

					this.PathID = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.StudyEventRepeatKey = readString(dis);

					this.FormRepeatKey = readString(dis);

					this.itemGroupRepeatKey = readString(dis);

					this.itemCode = readString(dis);

					this.startDate = readString(dis);

					this.m_applied_path = readString(dis);

					this.mod_path = readString(dis);

					this.mod_item = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.itemID, dos);

				// String

				writeString(this.Value, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.SubjectKey, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.StudyEventRepeatKey, dos);

				// String

				writeString(this.FormRepeatKey, dos);

				// String

				writeString(this.itemGroupRepeatKey, dos);

				// String

				writeString(this.itemCode, dos);

				// String

				writeString(this.startDate, dos);

				// String

				writeString(this.m_applied_path, dos);

				// String

				writeString(this.mod_path, dos);

				// String

				writeString(this.mod_item, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("itemID=" + itemID);
			sb.append(",Value=" + Value);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append(",Path=" + Path);
			sb.append(",PathID=" + PathID);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",StudyEventRepeatKey=" + StudyEventRepeatKey);
			sb.append(",FormRepeatKey=" + FormRepeatKey);
			sb.append(",itemGroupRepeatKey=" + itemGroupRepeatKey);
			sb.append(",itemCode=" + itemCode);
			sb.append(",startDate=" + startDate);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append(",mod_path=" + mod_path);
			sb.append(",mod_item=" + mod_item);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_3Process(globalMap);
				tFileInputDelimited_15Process(globalMap);

				row9Struct row9 = new row9Struct();

				row14Struct row14 = new row14Struct();

				row13Struct row13 = new row13Struct();
				copyOfout2Struct copyOfout2 = new copyOfout2Struct();
				outt1Struct outt1 = new outt1Struct();
				row4Struct row4 = new row4Struct();

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_3";

				int tos_count_tFileOutputDelimited_3 = 0;

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(
						context.folderMain + context.folderOutput + "data.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
							.substring(0, fileName_tFileOutputDelimited_3
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(
						fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",
						fileName_tFileOutputDelimited_3);

				String[] headColutFileOutputDelimited_3 = new String[21];
				class CSVBasicSet_tFileOutputDelimited_3 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_3[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_3 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_3[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("\t");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_3[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_3 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_3[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_3[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_3 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_3[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_3 = 0;
				int splitEvery_tFileOutputDelimited_3 = 1000;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				CSVBasicSet_tFileOutputDelimited_3 csvSettings_tFileOutputDelimited_3 = new CSVBasicSet_tFileOutputDelimited_3();
				csvSettings_tFileOutputDelimited_3.setFieldSeparator("\t");
				csvSettings_tFileOutputDelimited_3.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_3.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null
						&& directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(
							directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						dir_tFileOutputDelimited_3.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_3 = null;
				try {
					CsvWritertFileOutputDelimited_3 = new com.talend.csv.CSVWriter(
							new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_3,
													false), "ISO-8859-15")));
					CsvWritertFileOutputDelimited_3
							.setSeparator(csvSettings_tFileOutputDelimited_3
									.getFieldDelim());

					if (!csvSettings_tFileOutputDelimited_3
							.isUseCRLFRecordDelimiter()
							&& csvSettings_tFileOutputDelimited_3.getRowDelim() != '\r'
							&& csvSettings_tFileOutputDelimited_3.getRowDelim() != '\n') {
						CsvWritertFileOutputDelimited_3.setLineEnd(""
								+ csvSettings_tFileOutputDelimited_3
										.getRowDelim());
					}

					if (filetFileOutputDelimited_3.length() == 0) {

						headColutFileOutputDelimited_3[0] = "itemID";

						headColutFileOutputDelimited_3[1] = "Value";

						headColutFileOutputDelimited_3[2] = "VisitID";

						headColutFileOutputDelimited_3[3] = "FormID";

						headColutFileOutputDelimited_3[4] = "SubjectKey";

						headColutFileOutputDelimited_3[5] = "Path";

						headColutFileOutputDelimited_3[6] = "PathID";

						headColutFileOutputDelimited_3[7] = "DataType";

						headColutFileOutputDelimited_3[8] = "Update_Date";

						headColutFileOutputDelimited_3[9] = "Import_Date";

						headColutFileOutputDelimited_3[10] = "Download_Date";

						headColutFileOutputDelimited_3[11] = "StudyEventRepeatKey";

						headColutFileOutputDelimited_3[12] = "FormRepeatKey";

						headColutFileOutputDelimited_3[13] = "itemGroupRepeatKey";

						headColutFileOutputDelimited_3[14] = "startDate";

						headColutFileOutputDelimited_3[15] = "endDate";

						headColutFileOutputDelimited_3[16] = "source";

						headColutFileOutputDelimited_3[17] = "sic";

						headColutFileOutputDelimited_3[18] = "m_applied_path";

						headColutFileOutputDelimited_3[19] = "mod_path";

						headColutFileOutputDelimited_3[20] = "mod_item";

						CsvWritertFileOutputDelimited_3
								.writeNext(headColutFileOutputDelimited_3);
						CsvWritertFileOutputDelimited_3.flush();

					}

					CsvWritertFileOutputDelimited_3
							.setEscapeChar(csvSettings_tFileOutputDelimited_3
									.getEscapeChar());
					CsvWritertFileOutputDelimited_3
							.setQuoteChar(csvSettings_tFileOutputDelimited_3
									.getTextEnclosure());
					CsvWritertFileOutputDelimited_3
							.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

					/**
					 * [tFileOutputDelimited_3 begin ] stop
					 */

					/**
					 * [tJavaRow_1 begin ] start
					 */

					ok_Hash.put("tJavaRow_1", false);
					start_Hash.put("tJavaRow_1", System.currentTimeMillis());
					currentComponent = "tJavaRow_1";

					int tos_count_tJavaRow_1 = 0;

					int nb_line_tJavaRow_1 = 0;

					/**
					 * [tJavaRow_1 begin ] stop
					 */

					/**
					 * [tMap_9 begin ] start
					 */

					ok_Hash.put("tMap_9", false);
					start_Hash.put("tMap_9", System.currentTimeMillis());
					currentComponent = "tMap_9";

					int tos_count_tMap_9 = 0;

					// ###############################
					// # Lookup's keys initialization

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) globalMap
							.get("tHash_Lookup_row8"));

					row8Struct row8HashKey = new row8Struct();
					row8Struct row8Default = new row8Struct();
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_9__Struct {
					}
					Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					outt1Struct outt1_tmp = new outt1Struct();
					// ###############################

					List<outt1Struct> outt1_List = new java.util.ArrayList<outt1Struct>();

					/**
					 * [tMap_9 begin ] stop
					 */

					/**
					 * [tMap_3 begin ] start
					 */

					ok_Hash.put("tMap_3", false);
					start_Hash.put("tMap_3", System.currentTimeMillis());
					currentComponent = "tMap_3";

					int tos_count_tMap_3 = 0;

					// ###############################
					// # Lookup's keys initialization

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct> tHash_Lookup_row20 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct>) globalMap
							.get("tHash_Lookup_row20"));

					row20Struct row20HashKey = new row20Struct();
					row20Struct row20Default = new row20Struct();
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_3__Struct {
					}
					Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					copyOfout2Struct copyOfout2_tmp = new copyOfout2Struct();
					// ###############################

					List<copyOfout2Struct> copyOfout2_List = new java.util.ArrayList<copyOfout2Struct>();

					/**
					 * [tMap_3 begin ] stop
					 */

					/**
					 * [tUnite_3 begin ] start
					 */

					ok_Hash.put("tUnite_3", false);
					start_Hash.put("tUnite_3", System.currentTimeMillis());
					currentComponent = "tUnite_3";

					int tos_count_tUnite_3 = 0;

					int nb_line_tUnite_3 = 0;

					/**
					 * [tUnite_3 begin ] stop
					 */
					/**
					 * [tFileInputDelimited_2 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_2", false);
					start_Hash.put("tFileInputDelimited_2",
							System.currentTimeMillis());
					currentComponent = "tFileInputDelimited_2";

					int tos_count_tFileInputDelimited_2 = 0;

					int nb_line_tFileInputDelimited_2 = 0;
					int footer_tFileInputDelimited_2 = 0;
					int totalLinetFileInputDelimited_2 = 0;
					int limittFileInputDelimited_2 = -1;
					int lastLinetFileInputDelimited_2 = -1;

					char fieldSeparator_tFileInputDelimited_2[] = null;

					// support passing value (property: Field Separator) by
					// 'context.fs' or 'globalMap.get("fs")'.
					if (((String) "\t").length() > 0) {
						fieldSeparator_tFileInputDelimited_2 = ((String) "\t")
								.toCharArray();
					} else {
						throw new IllegalArgumentException(
								"Field Separator must be assigned a char.");
					}

					char rowSeparator_tFileInputDelimited_2[] = null;

					// support passing value (property: Row Separator) by
					// 'context.rs' or 'globalMap.get("rs")'.
					if (((String) "\n").length() > 0) {
						rowSeparator_tFileInputDelimited_2 = ((String) "\n")
								.toCharArray();
					} else {
						throw new IllegalArgumentException(
								"Row Separator must be assigned a char.");
					}

					Object filename_tFileInputDelimited_2 = /**
					 * Start field
					 * tFileInputDelimited_2:FILENAME
					 */
					((String) globalMap.get("tCreateTemporaryFile_1_FILEPATH"))/**
					 * 
					 * End field tFileInputDelimited_2:FILENAME
					 */
					;
					com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;

					try {

						String[] rowtFileInputDelimited_2 = null;
						int currentLinetFileInputDelimited_2 = 0;
						int outputLinetFileInputDelimited_2 = 0;
						try {// TD110 begin
							if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

								int footer_value_tFileInputDelimited_2 = 0;
								if (footer_value_tFileInputDelimited_2 > 0) {
									throw new java.lang.Exception(
											"When the input source is a stream,footer shouldn't be bigger than 0.");
								}

								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_2,
										fieldSeparator_tFileInputDelimited_2[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_2)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_2[0]);
							}

							csvReadertFileInputDelimited_2
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
								csvReadertFileInputDelimited_2
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_2[0]);

							csvReadertFileInputDelimited_2.setQuoteChar('"');

							csvReadertFileInputDelimited_2
									.setEscapeChar(csvReadertFileInputDelimited_2
											.getQuoteChar());

							if (footer_tFileInputDelimited_2 > 0) {
								for (totalLinetFileInputDelimited_2 = 0; totalLinetFileInputDelimited_2 < 0; totalLinetFileInputDelimited_2++) {
									csvReadertFileInputDelimited_2.readNext();
								}
								csvReadertFileInputDelimited_2
										.setSkipEmptyRecords(true);
								while (csvReadertFileInputDelimited_2
										.readNext()) {

									rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
											.getValues();
									if (!(rowtFileInputDelimited_2.length == 1 && ("\015")
											.equals(rowtFileInputDelimited_2[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

										totalLinetFileInputDelimited_2++;

									}

								}
								int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2
										- footer_tFileInputDelimited_2 < 0 ? 0
										: totalLinetFileInputDelimited_2
												- footer_tFileInputDelimited_2;
								if (lastLinetFileInputDelimited_2 > 0) {
									lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2
											: lastLineTemptFileInputDelimited_2;
								} else {
									lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
								}

								csvReadertFileInputDelimited_2.close();
								if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {
									csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
											(java.io.InputStream) filename_tFileInputDelimited_2,
											fieldSeparator_tFileInputDelimited_2[0],
											"ISO-8859-15");
								} else {
									csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
											new java.io.BufferedReader(
													new java.io.InputStreamReader(
															new java.io.FileInputStream(
																	String.valueOf(filename_tFileInputDelimited_2)),
															"ISO-8859-15")),
											fieldSeparator_tFileInputDelimited_2[0]);
								}
								csvReadertFileInputDelimited_2
										.setTrimWhitespace(false);
								if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
										&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
									csvReadertFileInputDelimited_2
											.setLineEnd(""
													+ rowSeparator_tFileInputDelimited_2[0]);

								csvReadertFileInputDelimited_2
										.setQuoteChar('"');

								csvReadertFileInputDelimited_2
										.setEscapeChar(csvReadertFileInputDelimited_2
												.getQuoteChar());

							}

							if (limittFileInputDelimited_2 != 0) {
								for (currentLinetFileInputDelimited_2 = 0; currentLinetFileInputDelimited_2 < 0; currentLinetFileInputDelimited_2++) {
									csvReadertFileInputDelimited_2.readNext();
								}
							}
							csvReadertFileInputDelimited_2
									.setSkipEmptyRecords(true);

						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());

						}// TD110 end

						while (limittFileInputDelimited_2 != 0
								&& csvReadertFileInputDelimited_2 != null
								&& csvReadertFileInputDelimited_2.readNext()) {

							rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
									.getValues();

							if (rowtFileInputDelimited_2.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_2[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
								continue;
							}

							currentLinetFileInputDelimited_2++;

							if (lastLinetFileInputDelimited_2 > -1
									&& currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
								break;
							}
							outputLinetFileInputDelimited_2++;
							if (limittFileInputDelimited_2 > 0
									&& outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
								break;
							}

							row9 = null;

							boolean whetherReject_tFileInputDelimited_2 = false;
							row9 = new row9Struct();
							try {

								if (rowtFileInputDelimited_2.length == 1
										&& ("\015")
												.equals(rowtFileInputDelimited_2[0])) {// empty
																						// line
																						// when
																						// row
																						// separator
																						// is
																						// '\n'

									row9.itemID = null;

									row9.Value = null;

									row9.VisitID = null;

									row9.FormID = null;

									row9.SubjectKey = null;

									row9.Path = null;

									row9.PathID = null;

									row9.DataType = null;

									row9.Update_Date = null;

									row9.Import_Date = null;

									row9.Download_Date = null;

									row9.StudyEventRepeatKey = null;

									row9.FormRepeatKey = null;

									row9.itemGroupRepeatKey = null;

									row9.itemCode = null;

									row9.startDate = null;

									row9.m_applied_path = null;

									row9.mod_path = null;

									row9.mod_item = null;

								} else {

									int columnIndexWithD_tFileInputDelimited_2 = 0; // Column
																					// Index

									columnIndexWithD_tFileInputDelimited_2 = 0;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row9.itemID = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row9.itemID = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 1;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row9.Value = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row9.Value = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 2;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row9.VisitID = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row9.VisitID = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 3;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row9.FormID = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row9.FormID = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 4;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row9.SubjectKey = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row9.SubjectKey = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 5;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row9.Path = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row9.Path = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 6;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row9.PathID = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row9.PathID = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 7;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row9.DataType = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row9.DataType = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 8;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row9.Update_Date = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row9.Update_Date = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 9;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row9.Import_Date = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row9.Import_Date = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 10;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row9.Download_Date = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row9.Download_Date = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 11;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row9.StudyEventRepeatKey = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row9.StudyEventRepeatKey = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 12;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row9.FormRepeatKey = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row9.FormRepeatKey = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 13;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row9.itemGroupRepeatKey = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row9.itemGroupRepeatKey = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 14;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row9.itemCode = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row9.itemCode = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 15;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row9.startDate = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row9.startDate = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 16;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row9.m_applied_path = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row9.m_applied_path = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 17;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row9.mod_path = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row9.mod_path = null;
									}

									columnIndexWithD_tFileInputDelimited_2 = 18;

									if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

										row9.mod_item = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

									} else {
										row9.mod_item = null;
									}

								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputDelimited_2 = true;

								System.err.println(e.getMessage());
								row9 = null;

							}

							/**
							 * [tFileInputDelimited_2 begin ] stop
							 */
							/**
							 * [tFileInputDelimited_2 main ] start
							 */

							currentComponent = "tFileInputDelimited_2";

							tos_count_tFileInputDelimited_2++;

							/**
							 * [tFileInputDelimited_2 main ] stop
							 */
							// Start of branch "row9"
							if (row9 != null) {

								/**
								 * [tUnite_3 main ] start
								 */

								currentComponent = "tUnite_3";

								// ////////

								// for output
								row13 = new row13Struct();

								row13.itemID = row9.itemID;
								row13.Value = row9.Value;
								row13.VisitID = row9.VisitID;
								row13.FormID = row9.FormID;
								row13.SubjectKey = row9.SubjectKey;
								row13.Path = row9.Path;
								row13.PathID = row9.PathID;
								row13.DataType = row9.DataType;
								row13.Update_Date = row9.Update_Date;
								row13.Import_Date = row9.Import_Date;
								row13.Download_Date = row9.Download_Date;
								row13.StudyEventRepeatKey = row9.StudyEventRepeatKey;
								row13.FormRepeatKey = row9.FormRepeatKey;
								row13.itemGroupRepeatKey = row9.itemGroupRepeatKey;
								row13.itemCode = row9.itemCode;
								row13.startDate = row9.startDate;
								row13.m_applied_path = row9.m_applied_path;
								row13.mod_path = row9.mod_path;
								row13.mod_item = row9.mod_item;

								nb_line_tUnite_3++;

								// ////////

								tos_count_tUnite_3++;

								/**
								 * [tUnite_3 main ] stop
								 */

								/**
								 * [tMap_3 main ] start
								 */

								currentComponent = "tMap_3";

								boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_3 = false;
								boolean mainRowRejected_tMap_3 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row20"
								// /////////////////////////////////////////////

								boolean forceLooprow20 = false;

								row20Struct row20ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_3 = false;

									row20HashKey.PatientID = row13.SubjectKey;

									row20HashKey.hashCodeDirty = true;

									tHash_Lookup_row20.lookup(row20HashKey);

									if (!tHash_Lookup_row20.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_3 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								if (tHash_Lookup_row20 != null
										&& tHash_Lookup_row20
												.getCount(row20HashKey) > 1) { // G
																				// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row20' and it contains more one result from keys :  row20.PatientID = '"
									// + row20HashKey.PatientID + "'");
								} // G 071

								row20Struct row20 = null;

								row20Struct fromLookup_row20 = null;
								row20 = row20Default;

								if (tHash_Lookup_row20 != null
										&& tHash_Lookup_row20.hasNext()) { // G
																			// 099

									fromLookup_row20 = tHash_Lookup_row20
											.next();

								} // G 099

								if (fromLookup_row20 != null) {
									row20 = fromLookup_row20;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
									// ###############################
									// # Output tables

									copyOfout2 = null;
									copyOfout2_List.clear();

									if (!rejectedInnerJoin_tMap_3) {

										// # Output table : 'copyOfout2'
										copyOfout2_tmp.itemID = row13.itemID;
										copyOfout2_tmp.Value = row13.Value;
										copyOfout2_tmp.VisitID = row13.VisitID;
										copyOfout2_tmp.FormID = row13.FormID;
										copyOfout2_tmp.SubjectKey = row13.SubjectKey;
										copyOfout2_tmp.Path = row13.Path;
										copyOfout2_tmp.PathID = row13.PathID;
										copyOfout2_tmp.DataType = row13.DataType;
										copyOfout2_tmp.Update_Date = row13.Update_Date;
										copyOfout2_tmp.Import_Date = row13.Import_Date;
										copyOfout2_tmp.Download_Date = row13.Download_Date;
										copyOfout2_tmp.StudyEventRepeatKey = row13.StudyEventRepeatKey;
										copyOfout2_tmp.FormRepeatKey = row13.FormRepeatKey;
										copyOfout2_tmp.itemGroupRepeatKey = row13.itemGroupRepeatKey;
										copyOfout2_tmp.startDate = row13.startDate;
										copyOfout2_tmp.endDate = null;
										copyOfout2_tmp.source = context.source;
										copyOfout2_tmp.m_applied_path = row13.m_applied_path;
										copyOfout2_tmp.mod_path = row13.mod_path;
										copyOfout2_tmp.mod_item = row13.mod_item;
										copyOfout2_List.add(copyOfout2_tmp);
										copyOfout2 = copyOfout2_tmp;
									} // closing inner join bracket (1)
										// ###### START REJECTS #####

									// # Output reject table : 'out9'
									// # Filter conditions
									if (rejectedInnerJoin_tMap_3) {
										copyOfout2_tmp = new copyOfout2Struct();

										copyOfout2_tmp.itemID = row13.itemID;
										copyOfout2_tmp.Value = row13.Value;
										copyOfout2_tmp.VisitID = row13.VisitID;
										copyOfout2_tmp.FormID = row13.FormID;
										copyOfout2_tmp.SubjectKey = row13.SubjectKey;
										copyOfout2_tmp.Path = row13.Path;
										copyOfout2_tmp.PathID = row13.PathID;
										copyOfout2_tmp.DataType = row13.DataType;
										copyOfout2_tmp.Update_Date = row13.Update_Date;
										copyOfout2_tmp.Import_Date = row13.Import_Date;
										copyOfout2_tmp.Download_Date = row13.Download_Date;
										copyOfout2_tmp.StudyEventRepeatKey = row13.StudyEventRepeatKey;
										copyOfout2_tmp.FormRepeatKey = row13.FormRepeatKey;
										copyOfout2_tmp.itemGroupRepeatKey = row13.itemGroupRepeatKey;
										copyOfout2_tmp.startDate = row13.startDate;
										copyOfout2_tmp.endDate = null;
										copyOfout2_tmp.source = context.source;
										copyOfout2_tmp.m_applied_path = row13.m_applied_path;
										copyOfout2_tmp.mod_path = row13.mod_path;
										copyOfout2_tmp.mod_item = row13.mod_item;
										copyOfout2_List.add(copyOfout2_tmp);
										copyOfout2 = copyOfout2_tmp;
									} // closing filter/reject
										// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_3 = false;

								tos_count_tMap_3++;

								/**
								 * [tMap_3 main ] stop
								 */
								// Start of branch "copyOfout2"
								if (copyOfout2 != null) {
									// start of joined table loop
									for (copyOfout2Struct cur_copyOfout2 : copyOfout2_List) {
										copyOfout2 = cur_copyOfout2;

										/**
										 * [tMap_9 main ] start
										 */

										currentComponent = "tMap_9";

										boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;

										// ###############################
										// # Input tables (lookups)
										boolean rejectedInnerJoin_tMap_9 = false;
										boolean mainRowRejected_tMap_9 = false;

										// /////////////////////////////////////////////
										// Starting Lookup Table "row8"
										// /////////////////////////////////////////////

										boolean forceLooprow8 = false;

										row8Struct row8ObjectFromLookup = null;

										if (!rejectedInnerJoin_tMap_9) { // G_TM_M_020

											hasCasePrimitiveKeyWithNull_tMap_9 = false;

											row8HashKey.SubjectKey = copyOfout2.SubjectKey;

											row8HashKey.hashCodeDirty = true;

											tHash_Lookup_row8
													.lookup(row8HashKey);

											if (!tHash_Lookup_row8.hasNext()) { // G_TM_M_090

												rejectedInnerJoin_tMap_9 = true;

											} // G_TM_M_090

										} // G_TM_M_020

										if (tHash_Lookup_row8 != null
												&& tHash_Lookup_row8
														.getCount(row8HashKey) > 1) { // G
																						// 071

											// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row8' and it contains more one result from keys :  row8.SubjectKey = '"
											// + row8HashKey.SubjectKey + "'");
										} // G 071

										row8Struct row8 = null;

										row8Struct fromLookup_row8 = null;
										row8 = row8Default;

										if (tHash_Lookup_row8 != null
												&& tHash_Lookup_row8.hasNext()) { // G
																					// 099

											fromLookup_row8 = tHash_Lookup_row8
													.next();

										} // G 099

										if (fromLookup_row8 != null) {
											row8 = fromLookup_row8;
										}

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
											// ###############################
											// # Output tables

											outt1 = null;
											outt1_List.clear();

											if (!rejectedInnerJoin_tMap_9) {

												// # Output table : 'outt1'
												outt1_tmp.itemID = copyOfout2.itemID;
												outt1_tmp.Value = copyOfout2.Value;
												outt1_tmp.VisitID = copyOfout2.VisitID;
												outt1_tmp.FormID = copyOfout2.FormID;
												outt1_tmp.SubjectKey = row8.Value;
												outt1_tmp.Path = copyOfout2.Path;
												outt1_tmp.PathID = copyOfout2.PathID;
												outt1_tmp.DataType = copyOfout2.DataType;
												outt1_tmp.Update_Date = copyOfout2.Update_Date;
												outt1_tmp.Import_Date = copyOfout2.Import_Date;
												outt1_tmp.Download_Date = copyOfout2.Download_Date;
												outt1_tmp.StudyEventRepeatKey = copyOfout2.StudyEventRepeatKey;
												outt1_tmp.FormRepeatKey = copyOfout2.FormRepeatKey;
												outt1_tmp.itemGroupRepeatKey = copyOfout2.itemGroupRepeatKey;
												outt1_tmp.startDate = copyOfout2.startDate;
												outt1_tmp.endDate = copyOfout2.endDate;
												outt1_tmp.source = copyOfout2.source;
												outt1_tmp.m_applied_path = copyOfout2.m_applied_path;
												outt1_tmp.mod_path = copyOfout2.mod_path;
												outt1_tmp.mod_item = copyOfout2.mod_item;
												outt1_List.add(outt1_tmp);
												outt1 = outt1_tmp;
											} // closing inner join bracket (1)
												// ###### START REJECTS #####

											// # Output reject table : 'out1'
											// # Filter conditions
											if (rejectedInnerJoin_tMap_9) {
												outt1_tmp = new outt1Struct();

												outt1_tmp.itemID = copyOfout2.itemID;
												outt1_tmp.Value = copyOfout2.Value;
												outt1_tmp.VisitID = copyOfout2.VisitID;
												outt1_tmp.FormID = copyOfout2.FormID;
												outt1_tmp.SubjectKey = copyOfout2.SubjectKey;
												outt1_tmp.Path = copyOfout2.Path;
												outt1_tmp.PathID = copyOfout2.PathID;
												outt1_tmp.DataType = copyOfout2.DataType;
												outt1_tmp.Update_Date = copyOfout2.Update_Date;
												outt1_tmp.Import_Date = copyOfout2.Import_Date;
												outt1_tmp.Download_Date = copyOfout2.Download_Date;
												outt1_tmp.StudyEventRepeatKey = copyOfout2.StudyEventRepeatKey;
												outt1_tmp.FormRepeatKey = copyOfout2.FormRepeatKey;
												outt1_tmp.itemGroupRepeatKey = copyOfout2.itemGroupRepeatKey;
												outt1_tmp.startDate = copyOfout2.startDate;
												outt1_tmp.endDate = copyOfout2.endDate;
												outt1_tmp.source = copyOfout2.source;
												outt1_tmp.m_applied_path = copyOfout2.m_applied_path;
												outt1_tmp.mod_path = copyOfout2.mod_path;
												outt1_tmp.mod_item = copyOfout2.mod_item;
												outt1_List.add(outt1_tmp);
												outt1 = outt1_tmp;
											} // closing filter/reject
												// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_9 = false;

										tos_count_tMap_9++;

										/**
										 * [tMap_9 main ] stop
										 */
										// Start of branch "outt1"
										if (outt1 != null) {
											// start of joined table loop
											for (outt1Struct cur_outt1 : outt1_List) {
												outt1 = cur_outt1;

												/**
												 * [tJavaRow_1 main ] start
												 */

												currentComponent = "tJavaRow_1";

												// Code generated according to
												// input schema and output
												// schema
												row4.itemID = outt1.itemID;
												row4.Value = outt1.Value
														.replace(';', '.')
														.replace('\t', '.');
												row4.VisitID = outt1.VisitID;
												row4.FormID = outt1.FormID;
												row4.SubjectKey = outt1.SubjectKey;
												row4.Path = outt1.Path;
												row4.PathID = outt1.PathID;
												row4.DataType = outt1.DataType;
												row4.FormRepeatKey = outt1.FormRepeatKey;
												if (outt1.Update_Date
														.contains("T"))
													row4.Update_Date = outt1.Update_Date
															.substring(
																	0,
																	outt1.Update_Date
																			.lastIndexOf("T"));
												else
													row4.Update_Date = outt1.Update_Date;
												if (outt1.Import_Date
														.contains("T"))
													row4.Import_Date = outt1.Import_Date
															.substring(
																	0,
																	outt1.Import_Date
																			.lastIndexOf("T"));
												else
													row4.Import_Date = outt1.Import_Date;
												if (outt1.Download_Date
														.contains("T"))
													row4.Download_Date = outt1.Download_Date
															.substring(
																	0,
																	outt1.Download_Date
																			.lastIndexOf("T"));
												else
													row4.Download_Date = outt1.Download_Date;

												// TODO
												row4.StudyEventRepeatKey = outt1.StudyEventRepeatKey;
												row4.startDate = outt1.startDate;
												row4.endDate = outt1.endDate;
												row4.itemGroupRepeatKey = ""
														+ outt1.itemGroupRepeatKey;
												// if (((HashMap<String,
												// BigDecimal>)
												// context.instanceMap).get(outt1.SubjectKey)
												// != null){

												// row4.itemGroupRepeatKey =
												// ""+((HashMap<String,
												// BigDecimal>)
												// context.instanceMap).get(outt1.SubjectKey)+outt1.itemGroupRepeatKey;
												// System.out.println("IF REPEATKEY: "
												// + row4.itemGroupRepeatKey +
												// " FOR PID: " +
												// outt1.SubjectKey);
												// }
												// else{
												// context.maxInstance =
												// context.maxInstance.add(new
												// BigDecimal(1));
												// row4.itemGroupRepeatKey =
												// ""+context.maxInstance;
												// ((HashMap<String,
												// BigDecimal>)
												// context.instanceMap).put(outt1.SubjectKey,context.maxInstance);
												// System.out.println("ELSE REPEATKEY: "
												// + row4.itemGroupRepeatKey +
												// " FOR PID: " +
												// outt1.SubjectKey);
												// }

												row4.source = outt1.source;

												row4.sic = "";

												row4.m_applied_path = outt1.m_applied_path;
												row4.mod_path = outt1.mod_path;
												row4.mod_item = outt1.mod_item;

												nb_line_tJavaRow_1++;

												tos_count_tJavaRow_1++;

												/**
												 * [tJavaRow_1 main ] stop
												 */

												/**
												 * [tFileOutputDelimited_3 main
												 * ] start
												 */

												currentComponent = "tFileOutputDelimited_3";

												String[] rowtFileOutputDelimited_3 = new String[21];

												rowtFileOutputDelimited_3[0] = row4.itemID == null ? ""
														: row4.itemID;

												rowtFileOutputDelimited_3[1] = row4.Value == null ? ""
														: row4.Value;

												rowtFileOutputDelimited_3[2] = row4.VisitID == null ? ""
														: row4.VisitID;

												rowtFileOutputDelimited_3[3] = row4.FormID == null ? ""
														: row4.FormID;

												rowtFileOutputDelimited_3[4] = row4.SubjectKey == null ? ""
														: row4.SubjectKey;

												rowtFileOutputDelimited_3[5] = row4.Path == null ? ""
														: row4.Path;

												rowtFileOutputDelimited_3[6] = row4.PathID == null ? ""
														: row4.PathID;

												rowtFileOutputDelimited_3[7] = row4.DataType == null ? ""
														: row4.DataType;

												rowtFileOutputDelimited_3[8] = row4.Update_Date == null ? ""
														: row4.Update_Date;

												rowtFileOutputDelimited_3[9] = row4.Import_Date == null ? ""
														: row4.Import_Date;

												rowtFileOutputDelimited_3[10] = row4.Download_Date == null ? ""
														: row4.Download_Date;

												rowtFileOutputDelimited_3[11] = row4.StudyEventRepeatKey == null ? ""
														: row4.StudyEventRepeatKey;

												rowtFileOutputDelimited_3[12] = row4.FormRepeatKey == null ? ""
														: row4.FormRepeatKey;

												rowtFileOutputDelimited_3[13] = row4.itemGroupRepeatKey == null ? ""
														: row4.itemGroupRepeatKey;

												rowtFileOutputDelimited_3[14] = row4.startDate == null ? ""
														: row4.startDate;

												rowtFileOutputDelimited_3[15] = row4.endDate == null ? ""
														: row4.endDate;

												rowtFileOutputDelimited_3[16] = row4.source == null ? ""
														: row4.source;

												rowtFileOutputDelimited_3[17] = row4.sic == null ? ""
														: row4.sic;

												rowtFileOutputDelimited_3[18] = row4.m_applied_path == null ? ""
														: row4.m_applied_path;

												rowtFileOutputDelimited_3[19] = row4.mod_path == null ? ""
														: row4.mod_path;

												rowtFileOutputDelimited_3[20] = row4.mod_item == null ? ""
														: row4.mod_item;

												nb_line_tFileOutputDelimited_3++;
												CsvWritertFileOutputDelimited_3
														.writeNext(rowtFileOutputDelimited_3);

												tos_count_tFileOutputDelimited_3++;

												/**
												 * [tFileOutputDelimited_3 main
												 * ] stop
												 */

											} // end of joined table loop
											outt1_List.clear();

										} // End of branch "outt1"

									} // end of joined table loop
									copyOfout2_List.clear();

								} // End of branch "copyOfout2"

							} // End of branch "row9"

							/**
							 * [tFileInputDelimited_2 end ] start
							 */

							currentComponent = "tFileInputDelimited_2";

							nb_line_tFileInputDelimited_2++;
						}

					} finally {
						if (!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)) {
							if (csvReadertFileInputDelimited_2 != null) {
								csvReadertFileInputDelimited_2.close();
							}
						}
						if (csvReadertFileInputDelimited_2 != null) {
							globalMap.put("tFileInputDelimited_2_NB_LINE",
									nb_line_tFileInputDelimited_2);
						}
					}

					ok_Hash.put("tFileInputDelimited_2", true);
					end_Hash.put("tFileInputDelimited_2",
							System.currentTimeMillis());

					/**
					 * [tFileInputDelimited_2 end ] stop
					 */
					/**
					 * [tFileInputDelimited_8 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_8", false);
					start_Hash.put("tFileInputDelimited_8",
							System.currentTimeMillis());
					currentComponent = "tFileInputDelimited_8";

					int tos_count_tFileInputDelimited_8 = 0;

					int nb_line_tFileInputDelimited_8 = 0;
					int footer_tFileInputDelimited_8 = 0;
					int totalLinetFileInputDelimited_8 = 0;
					int limittFileInputDelimited_8 = -1;
					int lastLinetFileInputDelimited_8 = -1;

					char fieldSeparator_tFileInputDelimited_8[] = null;

					// support passing value (property: Field Separator) by
					// 'context.fs' or 'globalMap.get("fs")'.
					if (((String) "\t").length() > 0) {
						fieldSeparator_tFileInputDelimited_8 = ((String) "\t")
								.toCharArray();
					} else {
						throw new IllegalArgumentException(
								"Field Separator must be assigned a char.");
					}

					char rowSeparator_tFileInputDelimited_8[] = null;

					// support passing value (property: Row Separator) by
					// 'context.rs' or 'globalMap.get("rs")'.
					if (((String) "\n").length() > 0) {
						rowSeparator_tFileInputDelimited_8 = ((String) "\n")
								.toCharArray();
					} else {
						throw new IllegalArgumentException(
								"Row Separator must be assigned a char.");
					}

					Object filename_tFileInputDelimited_8 = /**
					 * Start field
					 * tFileInputDelimited_8:FILENAME
					 */
					((String) globalMap.get("tCreateTemporaryFile_8_FILEPATH"))/**
					 * 
					 * End field tFileInputDelimited_8:FILENAME
					 */
					;
					com.talend.csv.CSVReader csvReadertFileInputDelimited_8 = null;

					try {

						String[] rowtFileInputDelimited_8 = null;
						int currentLinetFileInputDelimited_8 = 0;
						int outputLinetFileInputDelimited_8 = 0;
						try {// TD110 begin
							if (filename_tFileInputDelimited_8 instanceof java.io.InputStream) {

								int footer_value_tFileInputDelimited_8 = 0;
								if (footer_value_tFileInputDelimited_8 > 0) {
									throw new java.lang.Exception(
											"When the input source is a stream,footer shouldn't be bigger than 0.");
								}

								csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_8,
										fieldSeparator_tFileInputDelimited_8[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_8)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_8[0]);
							}

							csvReadertFileInputDelimited_8
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_8[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_8[0] != '\r'))
								csvReadertFileInputDelimited_8
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_8[0]);

							csvReadertFileInputDelimited_8.setQuoteChar('"');

							csvReadertFileInputDelimited_8
									.setEscapeChar(csvReadertFileInputDelimited_8
											.getQuoteChar());

							if (footer_tFileInputDelimited_8 > 0) {
								for (totalLinetFileInputDelimited_8 = 0; totalLinetFileInputDelimited_8 < 0; totalLinetFileInputDelimited_8++) {
									csvReadertFileInputDelimited_8.readNext();
								}
								csvReadertFileInputDelimited_8
										.setSkipEmptyRecords(true);
								while (csvReadertFileInputDelimited_8
										.readNext()) {

									rowtFileInputDelimited_8 = csvReadertFileInputDelimited_8
											.getValues();
									if (!(rowtFileInputDelimited_8.length == 1 && ("\015")
											.equals(rowtFileInputDelimited_8[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

										totalLinetFileInputDelimited_8++;

									}

								}
								int lastLineTemptFileInputDelimited_8 = totalLinetFileInputDelimited_8
										- footer_tFileInputDelimited_8 < 0 ? 0
										: totalLinetFileInputDelimited_8
												- footer_tFileInputDelimited_8;
								if (lastLinetFileInputDelimited_8 > 0) {
									lastLinetFileInputDelimited_8 = lastLinetFileInputDelimited_8 < lastLineTemptFileInputDelimited_8 ? lastLinetFileInputDelimited_8
											: lastLineTemptFileInputDelimited_8;
								} else {
									lastLinetFileInputDelimited_8 = lastLineTemptFileInputDelimited_8;
								}

								csvReadertFileInputDelimited_8.close();
								if (filename_tFileInputDelimited_8 instanceof java.io.InputStream) {
									csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
											(java.io.InputStream) filename_tFileInputDelimited_8,
											fieldSeparator_tFileInputDelimited_8[0],
											"ISO-8859-15");
								} else {
									csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
											new java.io.BufferedReader(
													new java.io.InputStreamReader(
															new java.io.FileInputStream(
																	String.valueOf(filename_tFileInputDelimited_8)),
															"ISO-8859-15")),
											fieldSeparator_tFileInputDelimited_8[0]);
								}
								csvReadertFileInputDelimited_8
										.setTrimWhitespace(false);
								if ((rowSeparator_tFileInputDelimited_8[0] != '\n')
										&& (rowSeparator_tFileInputDelimited_8[0] != '\r'))
									csvReadertFileInputDelimited_8
											.setLineEnd(""
													+ rowSeparator_tFileInputDelimited_8[0]);

								csvReadertFileInputDelimited_8
										.setQuoteChar('"');

								csvReadertFileInputDelimited_8
										.setEscapeChar(csvReadertFileInputDelimited_8
												.getQuoteChar());

							}

							if (limittFileInputDelimited_8 != 0) {
								for (currentLinetFileInputDelimited_8 = 0; currentLinetFileInputDelimited_8 < 0; currentLinetFileInputDelimited_8++) {
									csvReadertFileInputDelimited_8.readNext();
								}
							}
							csvReadertFileInputDelimited_8
									.setSkipEmptyRecords(true);

						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());

						}// TD110 end

						while (limittFileInputDelimited_8 != 0
								&& csvReadertFileInputDelimited_8 != null
								&& csvReadertFileInputDelimited_8.readNext()) {

							rowtFileInputDelimited_8 = csvReadertFileInputDelimited_8
									.getValues();

							if (rowtFileInputDelimited_8.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_8[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
								continue;
							}

							currentLinetFileInputDelimited_8++;

							if (lastLinetFileInputDelimited_8 > -1
									&& currentLinetFileInputDelimited_8 > lastLinetFileInputDelimited_8) {
								break;
							}
							outputLinetFileInputDelimited_8++;
							if (limittFileInputDelimited_8 > 0
									&& outputLinetFileInputDelimited_8 > limittFileInputDelimited_8) {
								break;
							}

							row14 = null;

							boolean whetherReject_tFileInputDelimited_8 = false;
							row14 = new row14Struct();
							try {

								if (rowtFileInputDelimited_8.length == 1
										&& ("\015")
												.equals(rowtFileInputDelimited_8[0])) {// empty
																						// line
																						// when
																						// row
																						// separator
																						// is
																						// '\n'

									row14.itemID = null;

									row14.Value = null;

									row14.VisitID = null;

									row14.FormID = null;

									row14.SubjectKey = null;

									row14.Path = null;

									row14.PathID = null;

									row14.DataType = null;

									row14.Update_Date = null;

									row14.Import_Date = null;

									row14.Download_Date = null;

									row14.StudyEventRepeatKey = null;

									row14.FormRepeatKey = null;

									row14.itemGroupRepeatKey = null;

									row14.itemCode = null;

									row14.startDate = null;

									row14.m_applied_path = null;

									row14.mod_path = null;

									row14.mod_item = null;

								} else {

									int columnIndexWithD_tFileInputDelimited_8 = 0; // Column
																					// Index

									columnIndexWithD_tFileInputDelimited_8 = 0;

									if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

										row14.itemID = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

									} else {
										row14.itemID = null;
									}

									columnIndexWithD_tFileInputDelimited_8 = 1;

									if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

										row14.Value = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

									} else {
										row14.Value = null;
									}

									columnIndexWithD_tFileInputDelimited_8 = 2;

									if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

										row14.VisitID = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

									} else {
										row14.VisitID = null;
									}

									columnIndexWithD_tFileInputDelimited_8 = 3;

									if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

										row14.FormID = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

									} else {
										row14.FormID = null;
									}

									columnIndexWithD_tFileInputDelimited_8 = 4;

									if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

										row14.SubjectKey = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

									} else {
										row14.SubjectKey = null;
									}

									columnIndexWithD_tFileInputDelimited_8 = 5;

									if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

										row14.Path = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

									} else {
										row14.Path = null;
									}

									columnIndexWithD_tFileInputDelimited_8 = 6;

									if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

										row14.PathID = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

									} else {
										row14.PathID = null;
									}

									columnIndexWithD_tFileInputDelimited_8 = 7;

									if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

										row14.DataType = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

									} else {
										row14.DataType = null;
									}

									columnIndexWithD_tFileInputDelimited_8 = 8;

									if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

										row14.Update_Date = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

									} else {
										row14.Update_Date = null;
									}

									columnIndexWithD_tFileInputDelimited_8 = 9;

									if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

										row14.Import_Date = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

									} else {
										row14.Import_Date = null;
									}

									columnIndexWithD_tFileInputDelimited_8 = 10;

									if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

										row14.Download_Date = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

									} else {
										row14.Download_Date = null;
									}

									columnIndexWithD_tFileInputDelimited_8 = 11;

									if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

										row14.StudyEventRepeatKey = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

									} else {
										row14.StudyEventRepeatKey = null;
									}

									columnIndexWithD_tFileInputDelimited_8 = 12;

									if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

										row14.FormRepeatKey = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

									} else {
										row14.FormRepeatKey = null;
									}

									columnIndexWithD_tFileInputDelimited_8 = 13;

									if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

										row14.itemGroupRepeatKey = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

									} else {
										row14.itemGroupRepeatKey = null;
									}

									columnIndexWithD_tFileInputDelimited_8 = 14;

									if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

										row14.itemCode = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

									} else {
										row14.itemCode = null;
									}

									columnIndexWithD_tFileInputDelimited_8 = 15;

									if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

										row14.startDate = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

									} else {
										row14.startDate = null;
									}

									columnIndexWithD_tFileInputDelimited_8 = 16;

									if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

										row14.m_applied_path = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

									} else {
										row14.m_applied_path = null;
									}

									columnIndexWithD_tFileInputDelimited_8 = 17;

									if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

										row14.mod_path = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

									} else {
										row14.mod_path = null;
									}

									columnIndexWithD_tFileInputDelimited_8 = 18;

									if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

										row14.mod_item = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

									} else {
										row14.mod_item = null;
									}

								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputDelimited_8 = true;

								System.err.println(e.getMessage());
								row14 = null;

							}

							/**
							 * [tFileInputDelimited_8 begin ] stop
							 */
							/**
							 * [tFileInputDelimited_8 main ] start
							 */

							currentComponent = "tFileInputDelimited_8";

							tos_count_tFileInputDelimited_8++;

							/**
							 * [tFileInputDelimited_8 main ] stop
							 */
							// Start of branch "row14"
							if (row14 != null) {

								/**
								 * [tUnite_3 main ] start
								 */

								currentComponent = "tUnite_3";

								// ////////

								// for output
								row13 = new row13Struct();

								row13.itemID = row14.itemID;
								row13.Value = row14.Value;
								row13.VisitID = row14.VisitID;
								row13.FormID = row14.FormID;
								row13.SubjectKey = row14.SubjectKey;
								row13.Path = row14.Path;
								row13.PathID = row14.PathID;
								row13.DataType = row14.DataType;
								row13.Update_Date = row14.Update_Date;
								row13.Import_Date = row14.Import_Date;
								row13.Download_Date = row14.Download_Date;
								row13.StudyEventRepeatKey = row14.StudyEventRepeatKey;
								row13.FormRepeatKey = row14.FormRepeatKey;
								row13.itemGroupRepeatKey = row14.itemGroupRepeatKey;
								row13.itemCode = row14.itemCode;
								row13.startDate = row14.startDate;
								row13.m_applied_path = row14.m_applied_path;
								row13.mod_path = row14.mod_path;
								row13.mod_item = row14.mod_item;

								nb_line_tUnite_3++;

								// ////////

								tos_count_tUnite_3++;

								/**
								 * [tUnite_3 main ] stop
								 */

								/**
								 * [tMap_3 main ] start
								 */

								currentComponent = "tMap_3";

								boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_3 = false;
								boolean mainRowRejected_tMap_3 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row20"
								// /////////////////////////////////////////////

								boolean forceLooprow20 = false;

								row20Struct row20ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_3 = false;

									row20HashKey.PatientID = row13.SubjectKey;

									row20HashKey.hashCodeDirty = true;

									tHash_Lookup_row20.lookup(row20HashKey);

									if (!tHash_Lookup_row20.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_3 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								if (tHash_Lookup_row20 != null
										&& tHash_Lookup_row20
												.getCount(row20HashKey) > 1) { // G
																				// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row20' and it contains more one result from keys :  row20.PatientID = '"
									// + row20HashKey.PatientID + "'");
								} // G 071

								row20Struct row20 = null;

								row20Struct fromLookup_row20 = null;
								row20 = row20Default;

								if (tHash_Lookup_row20 != null
										&& tHash_Lookup_row20.hasNext()) { // G
																			// 099

									fromLookup_row20 = tHash_Lookup_row20
											.next();

								} // G 099

								if (fromLookup_row20 != null) {
									row20 = fromLookup_row20;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
									// ###############################
									// # Output tables

									copyOfout2 = null;
									copyOfout2_List.clear();

									if (!rejectedInnerJoin_tMap_3) {

										// # Output table : 'copyOfout2'
										copyOfout2_tmp.itemID = row13.itemID;
										copyOfout2_tmp.Value = row13.Value;
										copyOfout2_tmp.VisitID = row13.VisitID;
										copyOfout2_tmp.FormID = row13.FormID;
										copyOfout2_tmp.SubjectKey = row13.SubjectKey;
										copyOfout2_tmp.Path = row13.Path;
										copyOfout2_tmp.PathID = row13.PathID;
										copyOfout2_tmp.DataType = row13.DataType;
										copyOfout2_tmp.Update_Date = row13.Update_Date;
										copyOfout2_tmp.Import_Date = row13.Import_Date;
										copyOfout2_tmp.Download_Date = row13.Download_Date;
										copyOfout2_tmp.StudyEventRepeatKey = row13.StudyEventRepeatKey;
										copyOfout2_tmp.FormRepeatKey = row13.FormRepeatKey;
										copyOfout2_tmp.itemGroupRepeatKey = row13.itemGroupRepeatKey;
										copyOfout2_tmp.startDate = row13.startDate;
										copyOfout2_tmp.endDate = null;
										copyOfout2_tmp.source = context.source;
										copyOfout2_tmp.m_applied_path = row13.m_applied_path;
										copyOfout2_tmp.mod_path = row13.mod_path;
										copyOfout2_tmp.mod_item = row13.mod_item;
										copyOfout2_List.add(copyOfout2_tmp);
										copyOfout2 = copyOfout2_tmp;
									} // closing inner join bracket (1)
										// ###### START REJECTS #####

									// # Output reject table : 'out9'
									// # Filter conditions
									if (rejectedInnerJoin_tMap_3) {
										copyOfout2_tmp = new copyOfout2Struct();

										copyOfout2_tmp.itemID = row13.itemID;
										copyOfout2_tmp.Value = row13.Value;
										copyOfout2_tmp.VisitID = row13.VisitID;
										copyOfout2_tmp.FormID = row13.FormID;
										copyOfout2_tmp.SubjectKey = row13.SubjectKey;
										copyOfout2_tmp.Path = row13.Path;
										copyOfout2_tmp.PathID = row13.PathID;
										copyOfout2_tmp.DataType = row13.DataType;
										copyOfout2_tmp.Update_Date = row13.Update_Date;
										copyOfout2_tmp.Import_Date = row13.Import_Date;
										copyOfout2_tmp.Download_Date = row13.Download_Date;
										copyOfout2_tmp.StudyEventRepeatKey = row13.StudyEventRepeatKey;
										copyOfout2_tmp.FormRepeatKey = row13.FormRepeatKey;
										copyOfout2_tmp.itemGroupRepeatKey = row13.itemGroupRepeatKey;
										copyOfout2_tmp.startDate = row13.startDate;
										copyOfout2_tmp.endDate = null;
										copyOfout2_tmp.source = context.source;
										copyOfout2_tmp.m_applied_path = row13.m_applied_path;
										copyOfout2_tmp.mod_path = row13.mod_path;
										copyOfout2_tmp.mod_item = row13.mod_item;
										copyOfout2_List.add(copyOfout2_tmp);
										copyOfout2 = copyOfout2_tmp;
									} // closing filter/reject
										// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_3 = false;

								tos_count_tMap_3++;

								/**
								 * [tMap_3 main ] stop
								 */
								// Start of branch "copyOfout2"
								if (copyOfout2 != null) {
									// start of joined table loop
									for (copyOfout2Struct cur_copyOfout2 : copyOfout2_List) {
										copyOfout2 = cur_copyOfout2;

										/**
										 * [tMap_9 main ] start
										 */

										currentComponent = "tMap_9";

										boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;

										// ###############################
										// # Input tables (lookups)
										boolean rejectedInnerJoin_tMap_9 = false;
										boolean mainRowRejected_tMap_9 = false;

										// /////////////////////////////////////////////
										// Starting Lookup Table "row8"
										// /////////////////////////////////////////////

										boolean forceLooprow8 = false;

										row8Struct row8ObjectFromLookup = null;

										if (!rejectedInnerJoin_tMap_9) { // G_TM_M_020

											hasCasePrimitiveKeyWithNull_tMap_9 = false;

											row8HashKey.SubjectKey = copyOfout2.SubjectKey;

											row8HashKey.hashCodeDirty = true;

											tHash_Lookup_row8
													.lookup(row8HashKey);

											if (!tHash_Lookup_row8.hasNext()) { // G_TM_M_090

												rejectedInnerJoin_tMap_9 = true;

											} // G_TM_M_090

										} // G_TM_M_020

										if (tHash_Lookup_row8 != null
												&& tHash_Lookup_row8
														.getCount(row8HashKey) > 1) { // G
																						// 071

											// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row8' and it contains more one result from keys :  row8.SubjectKey = '"
											// + row8HashKey.SubjectKey + "'");
										} // G 071

										row8Struct row8 = null;

										row8Struct fromLookup_row8 = null;
										row8 = row8Default;

										if (tHash_Lookup_row8 != null
												&& tHash_Lookup_row8.hasNext()) { // G
																					// 099

											fromLookup_row8 = tHash_Lookup_row8
													.next();

										} // G 099

										if (fromLookup_row8 != null) {
											row8 = fromLookup_row8;
										}

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
											// ###############################
											// # Output tables

											outt1 = null;
											outt1_List.clear();

											if (!rejectedInnerJoin_tMap_9) {

												// # Output table : 'outt1'
												outt1_tmp.itemID = copyOfout2.itemID;
												outt1_tmp.Value = copyOfout2.Value;
												outt1_tmp.VisitID = copyOfout2.VisitID;
												outt1_tmp.FormID = copyOfout2.FormID;
												outt1_tmp.SubjectKey = row8.Value;
												outt1_tmp.Path = copyOfout2.Path;
												outt1_tmp.PathID = copyOfout2.PathID;
												outt1_tmp.DataType = copyOfout2.DataType;
												outt1_tmp.Update_Date = copyOfout2.Update_Date;
												outt1_tmp.Import_Date = copyOfout2.Import_Date;
												outt1_tmp.Download_Date = copyOfout2.Download_Date;
												outt1_tmp.StudyEventRepeatKey = copyOfout2.StudyEventRepeatKey;
												outt1_tmp.FormRepeatKey = copyOfout2.FormRepeatKey;
												outt1_tmp.itemGroupRepeatKey = copyOfout2.itemGroupRepeatKey;
												outt1_tmp.startDate = copyOfout2.startDate;
												outt1_tmp.endDate = copyOfout2.endDate;
												outt1_tmp.source = copyOfout2.source;
												outt1_tmp.m_applied_path = copyOfout2.m_applied_path;
												outt1_tmp.mod_path = copyOfout2.mod_path;
												outt1_tmp.mod_item = copyOfout2.mod_item;
												outt1_List.add(outt1_tmp);
												outt1 = outt1_tmp;
											} // closing inner join bracket (1)
												// ###### START REJECTS #####

											// # Output reject table : 'out1'
											// # Filter conditions
											if (rejectedInnerJoin_tMap_9) {
												outt1_tmp = new outt1Struct();

												outt1_tmp.itemID = copyOfout2.itemID;
												outt1_tmp.Value = copyOfout2.Value;
												outt1_tmp.VisitID = copyOfout2.VisitID;
												outt1_tmp.FormID = copyOfout2.FormID;
												outt1_tmp.SubjectKey = copyOfout2.SubjectKey;
												outt1_tmp.Path = copyOfout2.Path;
												outt1_tmp.PathID = copyOfout2.PathID;
												outt1_tmp.DataType = copyOfout2.DataType;
												outt1_tmp.Update_Date = copyOfout2.Update_Date;
												outt1_tmp.Import_Date = copyOfout2.Import_Date;
												outt1_tmp.Download_Date = copyOfout2.Download_Date;
												outt1_tmp.StudyEventRepeatKey = copyOfout2.StudyEventRepeatKey;
												outt1_tmp.FormRepeatKey = copyOfout2.FormRepeatKey;
												outt1_tmp.itemGroupRepeatKey = copyOfout2.itemGroupRepeatKey;
												outt1_tmp.startDate = copyOfout2.startDate;
												outt1_tmp.endDate = copyOfout2.endDate;
												outt1_tmp.source = copyOfout2.source;
												outt1_tmp.m_applied_path = copyOfout2.m_applied_path;
												outt1_tmp.mod_path = copyOfout2.mod_path;
												outt1_tmp.mod_item = copyOfout2.mod_item;
												outt1_List.add(outt1_tmp);
												outt1 = outt1_tmp;
											} // closing filter/reject
												// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_9 = false;

										tos_count_tMap_9++;

										/**
										 * [tMap_9 main ] stop
										 */
										// Start of branch "outt1"
										if (outt1 != null) {
											// start of joined table loop
											for (outt1Struct cur_outt1 : outt1_List) {
												outt1 = cur_outt1;

												/**
												 * [tJavaRow_1 main ] start
												 */

												currentComponent = "tJavaRow_1";

												// Code generated according to
												// input schema and output
												// schema
												row4.itemID = outt1.itemID;
												row4.Value = outt1.Value
														.replace(';', '.')
														.replace('\t', '.');
												row4.VisitID = outt1.VisitID;
												row4.FormID = outt1.FormID;
												row4.SubjectKey = outt1.SubjectKey;
												row4.Path = outt1.Path;
												row4.PathID = outt1.PathID;
												row4.DataType = outt1.DataType;
												row4.FormRepeatKey = outt1.FormRepeatKey;
												if (outt1.Update_Date
														.contains("T"))
													row4.Update_Date = outt1.Update_Date
															.substring(
																	0,
																	outt1.Update_Date
																			.lastIndexOf("T"));
												else
													row4.Update_Date = outt1.Update_Date;
												if (outt1.Import_Date
														.contains("T"))
													row4.Import_Date = outt1.Import_Date
															.substring(
																	0,
																	outt1.Import_Date
																			.lastIndexOf("T"));
												else
													row4.Import_Date = outt1.Import_Date;
												if (outt1.Download_Date
														.contains("T"))
													row4.Download_Date = outt1.Download_Date
															.substring(
																	0,
																	outt1.Download_Date
																			.lastIndexOf("T"));
												else
													row4.Download_Date = outt1.Download_Date;

												// TODO
												row4.StudyEventRepeatKey = outt1.StudyEventRepeatKey;
												row4.startDate = outt1.startDate;
												row4.endDate = outt1.endDate;
												row4.itemGroupRepeatKey = ""
														+ outt1.itemGroupRepeatKey;
												// if (((HashMap<String,
												// BigDecimal>)
												// context.instanceMap).get(outt1.SubjectKey)
												// != null){

												// row4.itemGroupRepeatKey =
												// ""+((HashMap<String,
												// BigDecimal>)
												// context.instanceMap).get(outt1.SubjectKey)+outt1.itemGroupRepeatKey;
												// System.out.println("IF REPEATKEY: "
												// + row4.itemGroupRepeatKey +
												// " FOR PID: " +
												// outt1.SubjectKey);
												// }
												// else{
												// context.maxInstance =
												// context.maxInstance.add(new
												// BigDecimal(1));
												// row4.itemGroupRepeatKey =
												// ""+context.maxInstance;
												// ((HashMap<String,
												// BigDecimal>)
												// context.instanceMap).put(outt1.SubjectKey,context.maxInstance);
												// System.out.println("ELSE REPEATKEY: "
												// + row4.itemGroupRepeatKey +
												// " FOR PID: " +
												// outt1.SubjectKey);
												// }

												row4.source = outt1.source;

												row4.sic = "";

												row4.m_applied_path = outt1.m_applied_path;
												row4.mod_path = outt1.mod_path;
												row4.mod_item = outt1.mod_item;

												nb_line_tJavaRow_1++;

												tos_count_tJavaRow_1++;

												/**
												 * [tJavaRow_1 main ] stop
												 */

												/**
												 * [tFileOutputDelimited_3 main
												 * ] start
												 */

												currentComponent = "tFileOutputDelimited_3";

												String[] rowtFileOutputDelimited_3 = new String[21];

												rowtFileOutputDelimited_3[0] = row4.itemID == null ? ""
														: row4.itemID;

												rowtFileOutputDelimited_3[1] = row4.Value == null ? ""
														: row4.Value;

												rowtFileOutputDelimited_3[2] = row4.VisitID == null ? ""
														: row4.VisitID;

												rowtFileOutputDelimited_3[3] = row4.FormID == null ? ""
														: row4.FormID;

												rowtFileOutputDelimited_3[4] = row4.SubjectKey == null ? ""
														: row4.SubjectKey;

												rowtFileOutputDelimited_3[5] = row4.Path == null ? ""
														: row4.Path;

												rowtFileOutputDelimited_3[6] = row4.PathID == null ? ""
														: row4.PathID;

												rowtFileOutputDelimited_3[7] = row4.DataType == null ? ""
														: row4.DataType;

												rowtFileOutputDelimited_3[8] = row4.Update_Date == null ? ""
														: row4.Update_Date;

												rowtFileOutputDelimited_3[9] = row4.Import_Date == null ? ""
														: row4.Import_Date;

												rowtFileOutputDelimited_3[10] = row4.Download_Date == null ? ""
														: row4.Download_Date;

												rowtFileOutputDelimited_3[11] = row4.StudyEventRepeatKey == null ? ""
														: row4.StudyEventRepeatKey;

												rowtFileOutputDelimited_3[12] = row4.FormRepeatKey == null ? ""
														: row4.FormRepeatKey;

												rowtFileOutputDelimited_3[13] = row4.itemGroupRepeatKey == null ? ""
														: row4.itemGroupRepeatKey;

												rowtFileOutputDelimited_3[14] = row4.startDate == null ? ""
														: row4.startDate;

												rowtFileOutputDelimited_3[15] = row4.endDate == null ? ""
														: row4.endDate;

												rowtFileOutputDelimited_3[16] = row4.source == null ? ""
														: row4.source;

												rowtFileOutputDelimited_3[17] = row4.sic == null ? ""
														: row4.sic;

												rowtFileOutputDelimited_3[18] = row4.m_applied_path == null ? ""
														: row4.m_applied_path;

												rowtFileOutputDelimited_3[19] = row4.mod_path == null ? ""
														: row4.mod_path;

												rowtFileOutputDelimited_3[20] = row4.mod_item == null ? ""
														: row4.mod_item;

												nb_line_tFileOutputDelimited_3++;
												CsvWritertFileOutputDelimited_3
														.writeNext(rowtFileOutputDelimited_3);

												tos_count_tFileOutputDelimited_3++;

												/**
												 * [tFileOutputDelimited_3 main
												 * ] stop
												 */

											} // end of joined table loop
											outt1_List.clear();

										} // End of branch "outt1"

									} // end of joined table loop
									copyOfout2_List.clear();

								} // End of branch "copyOfout2"

							} // End of branch "row14"

							/**
							 * [tFileInputDelimited_8 end ] start
							 */

							currentComponent = "tFileInputDelimited_8";

							nb_line_tFileInputDelimited_8++;
						}

					} finally {
						if (!(filename_tFileInputDelimited_8 instanceof java.io.InputStream)) {
							if (csvReadertFileInputDelimited_8 != null) {
								csvReadertFileInputDelimited_8.close();
							}
						}
						if (csvReadertFileInputDelimited_8 != null) {
							globalMap.put("tFileInputDelimited_8_NB_LINE",
									nb_line_tFileInputDelimited_8);
						}
					}

					ok_Hash.put("tFileInputDelimited_8", true);
					end_Hash.put("tFileInputDelimited_8",
							System.currentTimeMillis());

					/**
					 * [tFileInputDelimited_8 end ] stop
					 */
					/**
					 * [tUnite_3 end ] start
					 */

					currentComponent = "tUnite_3";

					globalMap.put("tUnite_3_NB_LINE", nb_line_tUnite_3);

					ok_Hash.put("tUnite_3", true);
					end_Hash.put("tUnite_3", System.currentTimeMillis());

					/**
					 * [tUnite_3 end ] stop
					 */

					/**
					 * [tMap_3 end ] start
					 */

					currentComponent = "tMap_3";

					// ###############################
					// # Lookup hashes releasing
					if (tHash_Lookup_row20 != null) {
						tHash_Lookup_row20.endGet();
					}
					globalMap.remove("tHash_Lookup_row20");

					// ###############################

					ok_Hash.put("tMap_3", true);
					end_Hash.put("tMap_3", System.currentTimeMillis());

					/**
					 * [tMap_3 end ] stop
					 */

					/**
					 * [tMap_9 end ] start
					 */

					currentComponent = "tMap_9";

					// ###############################
					// # Lookup hashes releasing
					if (tHash_Lookup_row8 != null) {
						tHash_Lookup_row8.endGet();
					}
					globalMap.remove("tHash_Lookup_row8");

					// ###############################

					ok_Hash.put("tMap_9", true);
					end_Hash.put("tMap_9", System.currentTimeMillis());

					/**
					 * [tMap_9 end ] stop
					 */

					/**
					 * [tJavaRow_1 end ] start
					 */

					currentComponent = "tJavaRow_1";

					globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

					ok_Hash.put("tJavaRow_1", true);
					end_Hash.put("tJavaRow_1", System.currentTimeMillis());

					/**
					 * [tJavaRow_1 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_3 end ] start
					 */

					currentComponent = "tFileOutputDelimited_3";

				} finally {

					if (CsvWritertFileOutputDelimited_3 != null) {
						CsvWritertFileOutputDelimited_3.close();
					}
					globalMap.put("tFileOutputDelimited_3_NB_LINE",
							nb_line_tFileOutputDelimited_3);
				} // finally

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		} finally {
			// free memory for "tMap_9"
			globalMap.remove("tHash_Lookup_row8");

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row20");

		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_2 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_2", false);
				start_Hash.put("tCreateTemporaryFile_2",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_2";

				int tos_count_tCreateTemporaryFile_2 = 0;

				java.io.File dir_tCreateTemporaryFile_2 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_2.mkdirs();
				String name_tCreateTemporaryFile_2 = "talendPIDS_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_2 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_2 = new java.io.File(
						dir_tCreateTemporaryFile_2, name_tCreateTemporaryFile_2
								+ "." + suffix_tCreateTemporaryFile_2);
				if (file_tCreateTemporaryFile_2.createNewFile()) {
				}
				globalMap.put("tCreateTemporaryFile_2_FILEPATH",
						file_tCreateTemporaryFile_2.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_2 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_2 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_2";

				tos_count_tCreateTemporaryFile_2++;

				/**
				 * [tCreateTemporaryFile_2 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_2 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_2";

				ok_Hash.put("tCreateTemporaryFile_2", true);
				end_Hash.put("tCreateTemporaryFile_2",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_14Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_2_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_14Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_14 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_14", false);
				start_Hash.put("tCreateTemporaryFile_14",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_14";

				int tos_count_tCreateTemporaryFile_14 = 0;

				java.io.File dir_tCreateTemporaryFile_14 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_14.mkdirs();
				String name_tCreateTemporaryFile_14 = "talend1asdasd_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_14 = ("tmp".replaceAll(
						"\\.", "").length() == 0) ? "tmp" : "tmp".replaceAll(
						"\\.", "");
				java.io.File file_tCreateTemporaryFile_14 = new java.io.File(
						dir_tCreateTemporaryFile_14,
						name_tCreateTemporaryFile_14 + "."
								+ suffix_tCreateTemporaryFile_14);
				if (file_tCreateTemporaryFile_14.createNewFile()) {
					file_tCreateTemporaryFile_14.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_14_FILEPATH",
						file_tCreateTemporaryFile_14.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_14 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_14 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_14";

				tos_count_tCreateTemporaryFile_14++;

				/**
				 * [tCreateTemporaryFile_14 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_14 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_14";

				ok_Hash.put("tCreateTemporaryFile_14", true);
				end_Hash.put("tCreateTemporaryFile_14",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_14 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_14:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_14_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_3 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_3", false);
				start_Hash.put("tCreateTemporaryFile_3",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_3";

				int tos_count_tCreateTemporaryFile_3 = 0;

				java.io.File dir_tCreateTemporaryFile_3 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_3.mkdirs();
				String name_tCreateTemporaryFile_3 = "talend1_XXXX".replaceAll(
						"XXXX", routines.TalendString.getAsciiRandomString(4)
								.toUpperCase());
				String suffix_tCreateTemporaryFile_3 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_3 = new java.io.File(
						dir_tCreateTemporaryFile_3, name_tCreateTemporaryFile_3
								+ "." + suffix_tCreateTemporaryFile_3);
				if (file_tCreateTemporaryFile_3.createNewFile()) {
					file_tCreateTemporaryFile_3.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_3_FILEPATH",
						file_tCreateTemporaryFile_3.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_3 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_3 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_3";

				tos_count_tCreateTemporaryFile_3++;

				/**
				 * [tCreateTemporaryFile_3 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_3 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_3";

				ok_Hash.put("tCreateTemporaryFile_3", true);
				end_Hash.put("tCreateTemporaryFile_3",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_3:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_2Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_3_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements
			routines.system.IPersistableComparableLookupRow<row8Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Value;

		public String getValue() {
			return this.Value;
		}

		public String SubjectKey;

		public String getSubjectKey() {
			return this.SubjectKey;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.SubjectKey == null) ? 0 : this.SubjectKey
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row8Struct other = (row8Struct) obj;

			if (this.SubjectKey == null) {
				if (other.SubjectKey != null)
					return false;
			} else if (!this.SubjectKey.equals(other.SubjectKey))
				return false;

			return true;
		}

		public void copyDataTo(row8Struct other) {

			other.Value = this.Value;
			other.SubjectKey = this.SubjectKey;

		}

		public void copyKeysDataTo(row8Struct other) {

			other.SubjectKey = this.SubjectKey;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.SubjectKey = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SubjectKey, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Value = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Value, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Value=" + Value);
			sb.append(",SubjectKey=" + SubjectKey);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SubjectKey,
					other.SubjectKey);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();

				/**
				 * [tAdvancedHash_row8 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row8", false);
				start_Hash
						.put("tAdvancedHash_row8", System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row8";

				int tos_count_tAdvancedHash_row8 = 0;

				// connection name:row8
				// source node:tFileInputDelimited_3 -
				// inputs:(after_tFileInputDelimited_2) outputs:(row8,row8) |
				// target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
				// linked node: tMap_9 - inputs:(copyOfout2,row8)
				// outputs:(outt1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row8Struct> getLookup(matchingModeEnum_row8);

				globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);

				/**
				 * [tAdvancedHash_row8 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				try {

					Object filename_tFileInputDelimited_3 = ((String) globalMap
							.get("tCreateTemporaryFile_2_FILEPATH"));
					if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
						if (footer_value_tFileInputDelimited_3 > 0
								|| random_value_tFileInputDelimited_3 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(
								((String) globalMap
										.get("tCreateTemporaryFile_2_FILEPATH")),
								"ISO-8859-15", "\t", "\n", true, 0, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_3 != null
							&& fid_tFileInputDelimited_3.nextRecord()) {

						row8 = null;

						row8 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row8 = new row8Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_3 = 0;

							columnIndexWithD_tFileInputDelimited_3 = 0;

							row8.Value = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 1;

							row8.SubjectKey = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row8 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */
						// Start of branch "row8"
						if (row8 != null) {

							/**
							 * [tAdvancedHash_row8 main ] start
							 */

							currentComponent = "tAdvancedHash_row8";

							row8Struct row8_HashRow = new row8Struct();

							row8_HashRow.Value = row8.Value;

							row8_HashRow.SubjectKey = row8.SubjectKey;

							tHash_Lookup_row8.put(row8_HashRow);

							tos_count_tAdvancedHash_row8++;

							/**
							 * [tAdvancedHash_row8 main ] stop
							 */

						} // End of branch "row8"

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

					}
				} finally {
					if (!((Object) (((String) globalMap
							.get("tCreateTemporaryFile_2_FILEPATH"))) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_3 != null) {
							fid_tFileInputDelimited_3.close();
						}
					}
					if (fid_tFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE",
								fid_tFileInputDelimited_3.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row8 end ] start
				 */

				currentComponent = "tAdvancedHash_row8";

				tHash_Lookup_row8.endPut();

				ok_Hash.put("tAdvancedHash_row8", true);
				end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public static class row20Struct implements
			routines.system.IPersistableComparableLookupRow<row20Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String PatientID;

		public String getPatientID() {
			return this.PatientID;
		}

		public String EncounterNum;

		public String getEncounterNum() {
			return this.EncounterNum;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.PatientID == null) ? 0 : this.PatientID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row20Struct other = (row20Struct) obj;

			if (this.PatientID == null) {
				if (other.PatientID != null)
					return false;
			} else if (!this.PatientID.equals(other.PatientID))
				return false;

			return true;
		}

		public void copyDataTo(row20Struct other) {

			other.PatientID = this.PatientID;
			other.EncounterNum = this.EncounterNum;
			other.VisitID = this.VisitID;

		}

		public void copyKeysDataTo(row20Struct other) {

			other.PatientID = this.PatientID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.PatientID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PatientID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.EncounterNum = readString(dis, ois);

				this.VisitID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.EncounterNum, dos, oos);

				writeString(this.VisitID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PatientID=" + PatientID);
			sb.append(",EncounterNum=" + EncounterNum);
			sb.append(",VisitID=" + VisitID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PatientID, other.PatientID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_15Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row20Struct row20 = new row20Struct();

				/**
				 * [tAdvancedHash_row20 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row20", false);
				start_Hash.put("tAdvancedHash_row20",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row20";

				int tos_count_tAdvancedHash_row20 = 0;

				// connection name:row20
				// source node:tFileInputDelimited_15 -
				// inputs:(after_tFileInputDelimited_2) outputs:(row20,row20) |
				// target node:tAdvancedHash_row20 - inputs:(row20) outputs:()
				// linked node: tMap_3 - inputs:(row13,row20)
				// outputs:(copyOfout2)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row20 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct> tHash_Lookup_row20 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row20Struct> getLookup(matchingModeEnum_row20);

				globalMap.put("tHash_Lookup_row20", tHash_Lookup_row20);

				/**
				 * [tAdvancedHash_row20 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_15 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_15", false);
				start_Hash.put("tFileInputDelimited_15",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_15";

				int tos_count_tFileInputDelimited_15 = 0;

				int nb_line_tFileInputDelimited_15 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_15 = null;
				try {

					Object filename_tFileInputDelimited_15 = ((String) globalMap
							.get("tCreateTemporaryFile_17_FILEPATH"));
					if (filename_tFileInputDelimited_15 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_15 = 0, random_value_tFileInputDelimited_15 = -1;
						if (footer_value_tFileInputDelimited_15 > 0
								|| random_value_tFileInputDelimited_15 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_15 = new org.talend.fileprocess.FileInputDelimited(
								((String) globalMap
										.get("tCreateTemporaryFile_17_FILEPATH")),
								"ISO-8859-15", "\t", "\n", true, 0, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_15 != null
							&& fid_tFileInputDelimited_15.nextRecord()) {

						row20 = null;

						row20 = null;

						boolean whetherReject_tFileInputDelimited_15 = false;
						row20 = new row20Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_15 = 0;

							columnIndexWithD_tFileInputDelimited_15 = 0;

							row20.PatientID = fid_tFileInputDelimited_15
									.get(columnIndexWithD_tFileInputDelimited_15);

							columnIndexWithD_tFileInputDelimited_15 = 1;

							row20.EncounterNum = fid_tFileInputDelimited_15
									.get(columnIndexWithD_tFileInputDelimited_15);

							columnIndexWithD_tFileInputDelimited_15 = 2;

							row20.VisitID = fid_tFileInputDelimited_15
									.get(columnIndexWithD_tFileInputDelimited_15);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_15 = true;

							System.err.println(e.getMessage());
							row20 = null;

						}

						/**
						 * [tFileInputDelimited_15 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_15 main ] start
						 */

						currentComponent = "tFileInputDelimited_15";

						tos_count_tFileInputDelimited_15++;

						/**
						 * [tFileInputDelimited_15 main ] stop
						 */
						// Start of branch "row20"
						if (row20 != null) {

							/**
							 * [tAdvancedHash_row20 main ] start
							 */

							currentComponent = "tAdvancedHash_row20";

							row20Struct row20_HashRow = new row20Struct();

							row20_HashRow.PatientID = row20.PatientID;

							row20_HashRow.EncounterNum = row20.EncounterNum;

							row20_HashRow.VisitID = row20.VisitID;

							tHash_Lookup_row20.put(row20_HashRow);

							tos_count_tAdvancedHash_row20++;

							/**
							 * [tAdvancedHash_row20 main ] stop
							 */

						} // End of branch "row20"

						/**
						 * [tFileInputDelimited_15 end ] start
						 */

						currentComponent = "tFileInputDelimited_15";

					}
				} finally {
					if (!((Object) (((String) globalMap
							.get("tCreateTemporaryFile_17_FILEPATH"))) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_15 != null) {
							fid_tFileInputDelimited_15.close();
						}
					}
					if (fid_tFileInputDelimited_15 != null) {
						globalMap.put("tFileInputDelimited_15_NB_LINE",
								fid_tFileInputDelimited_15.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_15", true);
				end_Hash.put("tFileInputDelimited_15",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_15 end ] stop
				 */

				/**
				 * [tAdvancedHash_row20 end ] start
				 */

				currentComponent = "tAdvancedHash_row20";

				tHash_Lookup_row20.endPut();

				ok_Hash.put("tAdvancedHash_row20", true);
				end_Hash.put("tAdvancedHash_row20", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row20 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_15_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_4 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_4", false);
				start_Hash.put("tCreateTemporaryFile_4",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_4";

				int tos_count_tCreateTemporaryFile_4 = 0;

				java.io.File dir_tCreateTemporaryFile_4 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_4.mkdirs();
				String name_tCreateTemporaryFile_4 = "talend232323231_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_4 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_4 = new java.io.File(
						dir_tCreateTemporaryFile_4, name_tCreateTemporaryFile_4
								+ "." + suffix_tCreateTemporaryFile_4);
				if (file_tCreateTemporaryFile_4.createNewFile()) {
					file_tCreateTemporaryFile_4.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_4_FILEPATH",
						file_tCreateTemporaryFile_4.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_4 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_4 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_4";

				tos_count_tCreateTemporaryFile_4++;

				/**
				 * [tCreateTemporaryFile_4 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_4 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_4";

				ok_Hash.put("tCreateTemporaryFile_4", true);
				end_Hash.put("tCreateTemporaryFile_4",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_4 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_4:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_3Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_4_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_9Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_9 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_9", false);
				start_Hash.put("tCreateTemporaryFile_9",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_9";

				int tos_count_tCreateTemporaryFile_9 = 0;

				java.io.File dir_tCreateTemporaryFile_9 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_9.mkdirs();
				String name_tCreateTemporaryFile_9 = "talend232323231_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_9 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_9 = new java.io.File(
						dir_tCreateTemporaryFile_9, name_tCreateTemporaryFile_9
								+ "." + suffix_tCreateTemporaryFile_9);
				if (file_tCreateTemporaryFile_9.createNewFile()) {
					file_tCreateTemporaryFile_9.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_9_FILEPATH",
						file_tCreateTemporaryFile_9.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_9 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_9 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_9";

				tos_count_tCreateTemporaryFile_9++;

				/**
				 * [tCreateTemporaryFile_9 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_9 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_9";

				ok_Hash.put("tCreateTemporaryFile_9", true);
				end_Hash.put("tCreateTemporaryFile_9",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_9 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_9:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_4Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_9_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_10Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_10 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_10", false);
				start_Hash.put("tCreateTemporaryFile_10",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_10";

				int tos_count_tCreateTemporaryFile_10 = 0;

				java.io.File dir_tCreateTemporaryFile_10 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_10.mkdirs();
				String name_tCreateTemporaryFile_10 = "talend232323231_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_10 = ("tmp".replaceAll(
						"\\.", "").length() == 0) ? "tmp" : "tmp".replaceAll(
						"\\.", "");
				java.io.File file_tCreateTemporaryFile_10 = new java.io.File(
						dir_tCreateTemporaryFile_10,
						name_tCreateTemporaryFile_10 + "."
								+ suffix_tCreateTemporaryFile_10);
				if (file_tCreateTemporaryFile_10.createNewFile()) {
					file_tCreateTemporaryFile_10.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_10_FILEPATH",
						file_tCreateTemporaryFile_10.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_10 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_10 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_10";

				tos_count_tCreateTemporaryFile_10++;

				/**
				 * [tCreateTemporaryFile_10 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_10 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_10";

				ok_Hash.put("tCreateTemporaryFile_10", true);
				end_Hash.put("tCreateTemporaryFile_10",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_10 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_10:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_9Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_10_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_11Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_11 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_11", false);
				start_Hash.put("tCreateTemporaryFile_11",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_11";

				int tos_count_tCreateTemporaryFile_11 = 0;

				java.io.File dir_tCreateTemporaryFile_11 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_11.mkdirs();
				String name_tCreateTemporaryFile_11 = "talend232323231_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_11 = ("tmp".replaceAll(
						"\\.", "").length() == 0) ? "tmp" : "tmp".replaceAll(
						"\\.", "");
				java.io.File file_tCreateTemporaryFile_11 = new java.io.File(
						dir_tCreateTemporaryFile_11,
						name_tCreateTemporaryFile_11 + "."
								+ suffix_tCreateTemporaryFile_11);
				if (file_tCreateTemporaryFile_11.createNewFile()) {
					file_tCreateTemporaryFile_11.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_11_FILEPATH",
						file_tCreateTemporaryFile_11.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_11 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_11 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_11";

				tos_count_tCreateTemporaryFile_11++;

				/**
				 * [tCreateTemporaryFile_11 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_11 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_11";

				ok_Hash.put("tCreateTemporaryFile_11", true);
				end_Hash.put("tCreateTemporaryFile_11",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_11 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_11:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_10Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_11_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_8Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_8 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_8", false);
				start_Hash.put("tCreateTemporaryFile_8",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_8";

				int tos_count_tCreateTemporaryFile_8 = 0;

				java.io.File dir_tCreateTemporaryFile_8 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_8.mkdirs();
				String name_tCreateTemporaryFile_8 = "talend232323231_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_8 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_8 = new java.io.File(
						dir_tCreateTemporaryFile_8, name_tCreateTemporaryFile_8
								+ "." + suffix_tCreateTemporaryFile_8);
				if (file_tCreateTemporaryFile_8.createNewFile()) {
					file_tCreateTemporaryFile_8.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_8_FILEPATH",
						file_tCreateTemporaryFile_8.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_8 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_8 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_8";

				tos_count_tCreateTemporaryFile_8++;

				/**
				 * [tCreateTemporaryFile_8 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_8 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_8";

				ok_Hash.put("tCreateTemporaryFile_8", true);
				end_Hash.put("tCreateTemporaryFile_8",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_8 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_8:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_11Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_8_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_12Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_12 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_12", false);
				start_Hash.put("tCreateTemporaryFile_12",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_12";

				int tos_count_tCreateTemporaryFile_12 = 0;

				java.io.File dir_tCreateTemporaryFile_12 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_12.mkdirs();
				String name_tCreateTemporaryFile_12 = "talend232323231_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_12 = ("tmp".replaceAll(
						"\\.", "").length() == 0) ? "tmp" : "tmp".replaceAll(
						"\\.", "");
				java.io.File file_tCreateTemporaryFile_12 = new java.io.File(
						dir_tCreateTemporaryFile_12,
						name_tCreateTemporaryFile_12 + "."
								+ suffix_tCreateTemporaryFile_12);
				if (file_tCreateTemporaryFile_12.createNewFile()) {
				}
				globalMap.put("tCreateTemporaryFile_12_FILEPATH",
						file_tCreateTemporaryFile_12.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_12 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_12 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_12";

				tos_count_tCreateTemporaryFile_12++;

				/**
				 * [tCreateTemporaryFile_12 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_12 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_12";

				ok_Hash.put("tCreateTemporaryFile_12", true);
				end_Hash.put("tCreateTemporaryFile_12",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_12 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_12:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_8Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_12_SUBPROCESS_STATE", 1);
	}

	public static class row16Struct implements
			routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public String ItemGroupOID;

		public String getItemGroupOID() {
			return this.ItemGroupOID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String TransText;

		public String getTransText() {
			return this.TransText;
		}

		public String dataType;

		public String getDataType() {
			return this.dataType;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		public String subjid;

		public String getSubjid() {
			return this.subjid;
		}

		public String encounterNum;

		public String getEncounterNum() {
			return this.encounterNum;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.ItemGroupOID = readString(dis);

					this.Name = readString(dis);

					this.TransText = readString(dis);

					this.dataType = readString(dis);

					this.codeList = readString(dis);

					this.subjid = readString(dis);

					this.encounterNum = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ItemGroupOID, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.TransText, dos);

				// String

				writeString(this.dataType, dos);

				// String

				writeString(this.codeList, dos);

				// String

				writeString(this.subjid, dos);

				// String

				writeString(this.encounterNum, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ItemGroupOID=" + ItemGroupOID);
			sb.append(",Name=" + Name);
			sb.append(",TransText=" + TransText);
			sb.append(",dataType=" + dataType);
			sb.append(",codeList=" + codeList);
			sb.append(",subjid=" + subjid);
			sb.append(",encounterNum=" + encounterNum);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputXML_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputXML_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row16Struct row16 = new row16Struct();

				/**
				 * [tJavaRow_3 begin ] start
				 */

				ok_Hash.put("tJavaRow_3", false);
				start_Hash.put("tJavaRow_3", System.currentTimeMillis());
				currentComponent = "tJavaRow_3";

				int tos_count_tJavaRow_3 = 0;

				int nb_line_tJavaRow_3 = 0;

				/**
				 * [tJavaRow_3 begin ] stop
				 */

				/**
				 * [tFileInputXML_3 begin ] start
				 */

				ok_Hash.put("tFileInputXML_3", false);
				start_Hash.put("tFileInputXML_3", System.currentTimeMillis());
				currentComponent = "tFileInputXML_3";

				int tos_count_tFileInputXML_3 = 0;

				int nb_line_tFileInputXML_3 = 0;

				class IgnoreDTDEntityResolver_tFileInputXML_3 implements
						org.xml.sax.EntityResolver {

					public org.xml.sax.InputSource resolveEntity(
							String publicId, String systemId)
							throws org.xml.sax.SAXException,
							java.io.IOException {
						return new org.xml.sax.InputSource(
								new java.io.ByteArrayInputStream(
										"<?xml version='1.0' encoding='UTF-8'?>"
												.getBytes()));
					}

				}
				String os_tFileInputXML_3 = System.getProperty("os.name")
						.toLowerCase();
				boolean isWindows_tFileInputXML_3 = false;
				if (os_tFileInputXML_3.indexOf("windows") > -1
						|| os_tFileInputXML_3.indexOf("nt") > -1) {
					isWindows_tFileInputXML_3 = true;
				}
				class NameSpaceTool_tFileInputXML_3 {

					public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

					private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

					public void countNSMap(org.dom4j.Element el) {
						for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
								.declaredNamespaces()) {
							if (ns.getPrefix().trim().length() == 0) {
								xmlNameSpaceMap.put(
										"pre" + defualtNSPath.size(),
										ns.getURI());
								String path = "";
								org.dom4j.Element elTmp = el;
								while (elTmp != null) {
									if (elTmp.getNamespacePrefix() != null
											&& elTmp.getNamespacePrefix()
													.length() > 0) {
										path = "/" + elTmp.getNamespacePrefix()
												+ ":" + elTmp.getName() + path;
									} else {
										path = "/" + elTmp.getName() + path;
									}
									elTmp = elTmp.getParent();
								}
								defualtNSPath.add(path);
							} else {
								xmlNameSpaceMap
										.put(ns.getPrefix(), ns.getURI());
							}

						}
						for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
								.elements()) {
							countNSMap(e);
						}
					}

					public String addDefaultNSPrefix(String path,
							String loopPath) {
						if (defualtNSPath.size() > 0) {
							String fullPath = loopPath;
							if (!path.equals(fullPath)) {
								for (String tmp : path.split("/")) {
									if (("..").equals(tmp)) {
										fullPath = fullPath.substring(0,
												fullPath.lastIndexOf("/"));
									} else {
										fullPath += "/" + tmp;
									}
								}
							}
							int size = fullPath.split("/").length - 1;
							if (size < 0) {
								return fullPath;
							}
							int[] indexs = new int[size];
							java.util.Arrays.fill(indexs, -1);
							int length = 0;
							for (int i = 0; i < defualtNSPath.size(); i++) {
								if (defualtNSPath.get(i).length() > length
										&& fullPath.startsWith(defualtNSPath
												.get(i))) {
									java.util.Arrays.fill(indexs, defualtNSPath
											.get(i).split("/").length - 2,
											indexs.length, i);
									length = defualtNSPath.get(i).length();
								}
							}

							StringBuilder newPath = new StringBuilder();
							String[] pathStrs = path.split("/");
							for (int i = 0; i < pathStrs.length; i++) {
								String tmp = pathStrs[i];
								if (newPath.length() > 0) {
									newPath.append("/");
								}
								if (tmp.length() > 0 && tmp.indexOf(":") == -1
										&& tmp.indexOf(".") == -1 /*
																 * &&
																 * tmp.indexOf
																 * ("@") == -1
																 */) {
									int index = indexs[i + indexs.length
											- pathStrs.length];
									if (index >= 0) {
										// ==== add by wliu to support both
										// filter and functions==
										if (tmp.indexOf("[") > 0
												&& tmp.indexOf("]") > tmp
														.indexOf("[")) {// include
																		// filter
											String tmpStr = replaceElementWithNS(
													tmp, "pre" + index + ":");
											newPath.append(tmpStr);
										} else {
											if (tmp.indexOf("@") != -1
													|| tmp.indexOf("(") < tmp
															.indexOf(")")) { // include
																				// attribute
												newPath.append(tmp);
											} else {
												// ==add end=======
												newPath.append("pre")
														.append(index)
														.append(":")
														.append(tmp);
											}
										}
									} else {
										newPath.append(tmp);
									}
								} else {
									newPath.append(tmp);
								}
							}
							return newPath.toString();
						}
						return path;
					}

					private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
					private java.util.regex.Pattern pattern = java.util.regex.Pattern
							.compile(matches);

					private String replaceElementWithNS(String global,
							String pre) {

						java.util.regex.Matcher match = pattern.matcher(global);
						StringBuffer sb = new StringBuffer();
						match.reset();
						while (match.find()) {
							String group = match.group();
							String tmp = "";
							if (group.toLowerCase().matches(
									"\\b(div|mod|and|or)\\b.*")
									|| group.matches("@.*")) {
								tmp = group;
							} else {
								tmp = tmp + pre + group;
							}
							match.appendReplacement(sb, tmp);
						}
						match.appendTail(sb);

						return sb.toString();
					}

				}

				class XML_API_tFileInputXML_3 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				org.dom4j.io.SAXReader reader_tFileInputXML_3 = new org.dom4j.io.SAXReader();
				reader_tFileInputXML_3
						.setEntityResolver(new IgnoreDTDEntityResolver_tFileInputXML_3());
				Object filename_tFileInputXML_3 = null;
				try {
					filename_tFileInputXML_3 = context.currentFile;
				} catch (java.lang.Exception e) {

					System.err.println(e.getMessage());

				}
				if (filename_tFileInputXML_3 != null
						&& filename_tFileInputXML_3 instanceof String
						&& filename_tFileInputXML_3.toString().startsWith("//")) {
					if (!isWindows_tFileInputXML_3) {
						filename_tFileInputXML_3 = filename_tFileInputXML_3
								.toString().replaceFirst("//", "/");
					}
				}

				boolean isValidFile_tFileInputXML_3 = true;
				org.dom4j.Document doc_tFileInputXML_3 = null;
				java.io.Closeable toClose_tFileInputXML_3 = null;
				try {
					if (filename_tFileInputXML_3 instanceof java.io.InputStream) {
						java.io.InputStream inputStream_tFileInputXML_3 = (java.io.InputStream) filename_tFileInputXML_3;
						toClose_tFileInputXML_3 = inputStream_tFileInputXML_3;
						doc_tFileInputXML_3 = reader_tFileInputXML_3
								.read(inputStream_tFileInputXML_3);
					} else {
						java.io.Reader unicodeReader_tFileInputXML_3 = new UnicodeReader(
								new java.io.FileInputStream(String
										.valueOf(filename_tFileInputXML_3)),
								context.encoding);
						toClose_tFileInputXML_3 = unicodeReader_tFileInputXML_3;
						org.xml.sax.InputSource in_tFileInputXML_3 = new org.xml.sax.InputSource(
								unicodeReader_tFileInputXML_3);
						doc_tFileInputXML_3 = reader_tFileInputXML_3
								.read(in_tFileInputXML_3);
					}
				} catch (java.lang.Exception e) {
					System.err.println(e.getMessage());
					isValidFile_tFileInputXML_3 = false;
				} finally {
					if (toClose_tFileInputXML_3 != null) {
						toClose_tFileInputXML_3.close();
					}
				}
				if (isValidFile_tFileInputXML_3) {
					NameSpaceTool_tFileInputXML_3 nsTool_tFileInputXML_3 = new NameSpaceTool_tFileInputXML_3();
					nsTool_tFileInputXML_3.countNSMap(doc_tFileInputXML_3
							.getRootElement());
					java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_3 = nsTool_tFileInputXML_3.xmlNameSpaceMap;

					org.dom4j.XPath x_tFileInputXML_3 = doc_tFileInputXML_3
							.createXPath(nsTool_tFileInputXML_3
									.addDefaultNSPrefix(
											"/ODM/Study/MetaDataVersion/ItemDef",
											"/ODM/Study/MetaDataVersion/ItemDef"));
					x_tFileInputXML_3
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_3);

					java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_3 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tFileInputXML_3
							.selectNodes(doc_tFileInputXML_3);
					XML_API_tFileInputXML_3 xml_api_tFileInputXML_3 = new XML_API_tFileInputXML_3();
					String str_tFileInputXML_3 = "";
					org.dom4j.Node node_tFileInputXML_3 = null;

					// init all mapping xpaths
					org.dom4j.XPath xTmp0_tFileInputXML_3 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_3
									.addDefaultNSPrefix("@OID",
											"/ODM/Study/MetaDataVersion/ItemDef"));
					xTmp0_tFileInputXML_3
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_3);
					org.dom4j.XPath xTmp1_tFileInputXML_3 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_3
									.addDefaultNSPrefix("@Name",
											"/ODM/Study/MetaDataVersion/ItemDef"));
					xTmp1_tFileInputXML_3
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_3);
					org.dom4j.XPath xTmp2_tFileInputXML_3 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_3
									.addDefaultNSPrefix(
											"/Question/TranslatedText",
											"/ODM/Study/MetaDataVersion/ItemDef"));
					xTmp2_tFileInputXML_3
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_3);
					org.dom4j.XPath xTmp3_tFileInputXML_3 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_3
									.addDefaultNSPrefix("@DataType",
											"/ODM/Study/MetaDataVersion/ItemDef"));
					xTmp3_tFileInputXML_3
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_3);
					org.dom4j.XPath xTmp4_tFileInputXML_3 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_3
									.addDefaultNSPrefix(
											"/CodeListRef/@CodeListOID",
											"/ODM/Study/MetaDataVersion/ItemDef"));
					xTmp4_tFileInputXML_3
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_3);
					org.dom4j.XPath xTmp5_tFileInputXML_3 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_3
									.addDefaultNSPrefix(
											".[@SDSVarName =\"SUBJID\" or @SDSVarName =\"USUBJID\" ]/@OID",
											"/ODM/Study/MetaDataVersion/ItemDef"));
					xTmp5_tFileInputXML_3
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_3);
					org.dom4j.XPath xTmp6_tFileInputXML_3 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_3
									.addDefaultNSPrefix(
											".[@SDSVarName =\"VISITNUM\"]/@OID",
											"/ODM/Study/MetaDataVersion/ItemDef"));
					xTmp6_tFileInputXML_3
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_3);

					for (org.dom4j.tree.AbstractNode temp_tFileInputXML_3 : nodeList_tFileInputXML_3) {
						nb_line_tFileInputXML_3++;
						row16 = null;
						boolean whetherReject_tFileInputXML_3 = false;
						row16 = new row16Struct();
						try {
							Object obj0_tFileInputXML_3 = xTmp0_tFileInputXML_3
									.evaluate(temp_tFileInputXML_3);
							if (obj0_tFileInputXML_3 == null) {
								node_tFileInputXML_3 = null;
								str_tFileInputXML_3 = "";

							} else if (obj0_tFileInputXML_3 instanceof org.dom4j.Node) {
								node_tFileInputXML_3 = (org.dom4j.Node) obj0_tFileInputXML_3;
								str_tFileInputXML_3 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_3,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj0_tFileInputXML_3 instanceof String
									|| obj0_tFileInputXML_3 instanceof Number) {
								node_tFileInputXML_3 = temp_tFileInputXML_3;
								str_tFileInputXML_3 = String
										.valueOf(obj0_tFileInputXML_3);
							} else if (obj0_tFileInputXML_3 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_3 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_3;
								node_tFileInputXML_3 = nodes_tFileInputXML_3
										.size() > 0 ? nodes_tFileInputXML_3
										.get(0) : null;
								str_tFileInputXML_3 = node_tFileInputXML_3 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_3,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_3
									.isDefNull(node_tFileInputXML_3)) {
								row16.ItemGroupOID = null;
							} else if (xml_api_tFileInputXML_3
									.isEmpty(node_tFileInputXML_3)) {
								row16.ItemGroupOID = "";
							} else if (xml_api_tFileInputXML_3
									.isMissing(node_tFileInputXML_3)) {
								row16.ItemGroupOID = null;
							} else {
								row16.ItemGroupOID = str_tFileInputXML_3;
							}
							Object obj1_tFileInputXML_3 = xTmp1_tFileInputXML_3
									.evaluate(temp_tFileInputXML_3);
							if (obj1_tFileInputXML_3 == null) {
								node_tFileInputXML_3 = null;
								str_tFileInputXML_3 = "";

							} else if (obj1_tFileInputXML_3 instanceof org.dom4j.Node) {
								node_tFileInputXML_3 = (org.dom4j.Node) obj1_tFileInputXML_3;
								str_tFileInputXML_3 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_3,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj1_tFileInputXML_3 instanceof String
									|| obj1_tFileInputXML_3 instanceof Number) {
								node_tFileInputXML_3 = temp_tFileInputXML_3;
								str_tFileInputXML_3 = String
										.valueOf(obj1_tFileInputXML_3);
							} else if (obj1_tFileInputXML_3 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_3 = (java.util.List<org.dom4j.Node>) obj1_tFileInputXML_3;
								node_tFileInputXML_3 = nodes_tFileInputXML_3
										.size() > 0 ? nodes_tFileInputXML_3
										.get(0) : null;
								str_tFileInputXML_3 = node_tFileInputXML_3 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_3,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_3
									.isDefNull(node_tFileInputXML_3)) {
								row16.Name = null;
							} else if (xml_api_tFileInputXML_3
									.isEmpty(node_tFileInputXML_3)) {
								row16.Name = "";
							} else if (xml_api_tFileInputXML_3
									.isMissing(node_tFileInputXML_3)) {
								row16.Name = null;
							} else {
								row16.Name = str_tFileInputXML_3;
							}
							Object obj2_tFileInputXML_3 = xTmp2_tFileInputXML_3
									.evaluate(temp_tFileInputXML_3);
							if (obj2_tFileInputXML_3 == null) {
								node_tFileInputXML_3 = null;
								str_tFileInputXML_3 = "";

							} else if (obj2_tFileInputXML_3 instanceof org.dom4j.Node) {
								node_tFileInputXML_3 = (org.dom4j.Node) obj2_tFileInputXML_3;
								str_tFileInputXML_3 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_3,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj2_tFileInputXML_3 instanceof String
									|| obj2_tFileInputXML_3 instanceof Number) {
								node_tFileInputXML_3 = temp_tFileInputXML_3;
								str_tFileInputXML_3 = String
										.valueOf(obj2_tFileInputXML_3);
							} else if (obj2_tFileInputXML_3 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_3 = (java.util.List<org.dom4j.Node>) obj2_tFileInputXML_3;
								node_tFileInputXML_3 = nodes_tFileInputXML_3
										.size() > 0 ? nodes_tFileInputXML_3
										.get(0) : null;
								str_tFileInputXML_3 = node_tFileInputXML_3 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_3,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_3
									.isDefNull(node_tFileInputXML_3)) {
								row16.TransText = null;
							} else if (xml_api_tFileInputXML_3
									.isEmpty(node_tFileInputXML_3)) {
								row16.TransText = "";
							} else if (xml_api_tFileInputXML_3
									.isMissing(node_tFileInputXML_3)) {
								row16.TransText = null;
							} else {
								row16.TransText = str_tFileInputXML_3;
							}
							Object obj3_tFileInputXML_3 = xTmp3_tFileInputXML_3
									.evaluate(temp_tFileInputXML_3);
							if (obj3_tFileInputXML_3 == null) {
								node_tFileInputXML_3 = null;
								str_tFileInputXML_3 = "";

							} else if (obj3_tFileInputXML_3 instanceof org.dom4j.Node) {
								node_tFileInputXML_3 = (org.dom4j.Node) obj3_tFileInputXML_3;
								str_tFileInputXML_3 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_3,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj3_tFileInputXML_3 instanceof String
									|| obj3_tFileInputXML_3 instanceof Number) {
								node_tFileInputXML_3 = temp_tFileInputXML_3;
								str_tFileInputXML_3 = String
										.valueOf(obj3_tFileInputXML_3);
							} else if (obj3_tFileInputXML_3 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_3 = (java.util.List<org.dom4j.Node>) obj3_tFileInputXML_3;
								node_tFileInputXML_3 = nodes_tFileInputXML_3
										.size() > 0 ? nodes_tFileInputXML_3
										.get(0) : null;
								str_tFileInputXML_3 = node_tFileInputXML_3 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_3,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_3
									.isDefNull(node_tFileInputXML_3)) {
								row16.dataType = null;
							} else if (xml_api_tFileInputXML_3
									.isEmpty(node_tFileInputXML_3)) {
								row16.dataType = "";
							} else if (xml_api_tFileInputXML_3
									.isMissing(node_tFileInputXML_3)) {
								row16.dataType = null;
							} else {
								row16.dataType = str_tFileInputXML_3;
							}
							Object obj4_tFileInputXML_3 = xTmp4_tFileInputXML_3
									.evaluate(temp_tFileInputXML_3);
							if (obj4_tFileInputXML_3 == null) {
								node_tFileInputXML_3 = null;
								str_tFileInputXML_3 = "";

							} else if (obj4_tFileInputXML_3 instanceof org.dom4j.Node) {
								node_tFileInputXML_3 = (org.dom4j.Node) obj4_tFileInputXML_3;
								str_tFileInputXML_3 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_3,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj4_tFileInputXML_3 instanceof String
									|| obj4_tFileInputXML_3 instanceof Number) {
								node_tFileInputXML_3 = temp_tFileInputXML_3;
								str_tFileInputXML_3 = String
										.valueOf(obj4_tFileInputXML_3);
							} else if (obj4_tFileInputXML_3 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_3 = (java.util.List<org.dom4j.Node>) obj4_tFileInputXML_3;
								node_tFileInputXML_3 = nodes_tFileInputXML_3
										.size() > 0 ? nodes_tFileInputXML_3
										.get(0) : null;
								str_tFileInputXML_3 = node_tFileInputXML_3 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_3,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_3
									.isDefNull(node_tFileInputXML_3)) {
								row16.codeList = null;
							} else if (xml_api_tFileInputXML_3
									.isEmpty(node_tFileInputXML_3)) {
								row16.codeList = "";
							} else if (xml_api_tFileInputXML_3
									.isMissing(node_tFileInputXML_3)) {
								row16.codeList = null;
							} else {
								row16.codeList = str_tFileInputXML_3;
							}
							Object obj5_tFileInputXML_3 = xTmp5_tFileInputXML_3
									.evaluate(temp_tFileInputXML_3);
							if (obj5_tFileInputXML_3 == null) {
								node_tFileInputXML_3 = null;
								str_tFileInputXML_3 = "";

							} else if (obj5_tFileInputXML_3 instanceof org.dom4j.Node) {
								node_tFileInputXML_3 = (org.dom4j.Node) obj5_tFileInputXML_3;
								str_tFileInputXML_3 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_3,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj5_tFileInputXML_3 instanceof String
									|| obj5_tFileInputXML_3 instanceof Number) {
								node_tFileInputXML_3 = temp_tFileInputXML_3;
								str_tFileInputXML_3 = String
										.valueOf(obj5_tFileInputXML_3);
							} else if (obj5_tFileInputXML_3 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_3 = (java.util.List<org.dom4j.Node>) obj5_tFileInputXML_3;
								node_tFileInputXML_3 = nodes_tFileInputXML_3
										.size() > 0 ? nodes_tFileInputXML_3
										.get(0) : null;
								str_tFileInputXML_3 = node_tFileInputXML_3 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_3,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_3
									.isDefNull(node_tFileInputXML_3)) {
								row16.subjid = null;
							} else if (xml_api_tFileInputXML_3
									.isEmpty(node_tFileInputXML_3)) {
								row16.subjid = "";
							} else if (xml_api_tFileInputXML_3
									.isMissing(node_tFileInputXML_3)) {
								row16.subjid = null;
							} else {
								row16.subjid = str_tFileInputXML_3;
							}
							Object obj6_tFileInputXML_3 = xTmp6_tFileInputXML_3
									.evaluate(temp_tFileInputXML_3);
							if (obj6_tFileInputXML_3 == null) {
								node_tFileInputXML_3 = null;
								str_tFileInputXML_3 = "";

							} else if (obj6_tFileInputXML_3 instanceof org.dom4j.Node) {
								node_tFileInputXML_3 = (org.dom4j.Node) obj6_tFileInputXML_3;
								str_tFileInputXML_3 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_3,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj6_tFileInputXML_3 instanceof String
									|| obj6_tFileInputXML_3 instanceof Number) {
								node_tFileInputXML_3 = temp_tFileInputXML_3;
								str_tFileInputXML_3 = String
										.valueOf(obj6_tFileInputXML_3);
							} else if (obj6_tFileInputXML_3 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_3 = (java.util.List<org.dom4j.Node>) obj6_tFileInputXML_3;
								node_tFileInputXML_3 = nodes_tFileInputXML_3
										.size() > 0 ? nodes_tFileInputXML_3
										.get(0) : null;
								str_tFileInputXML_3 = node_tFileInputXML_3 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_3,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_3
									.isDefNull(node_tFileInputXML_3)) {
								row16.encounterNum = null;
							} else if (xml_api_tFileInputXML_3
									.isEmpty(node_tFileInputXML_3)) {
								row16.encounterNum = "";
							} else if (xml_api_tFileInputXML_3
									.isMissing(node_tFileInputXML_3)) {
								row16.encounterNum = null;
							} else {
								row16.encounterNum = str_tFileInputXML_3;
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputXML_3 = true;
							System.err.println(e.getMessage());
							row16 = null;
						}

						/**
						 * [tFileInputXML_3 begin ] stop
						 */
						/**
						 * [tFileInputXML_3 main ] start
						 */

						currentComponent = "tFileInputXML_3";

						tos_count_tFileInputXML_3++;

						/**
						 * [tFileInputXML_3 main ] stop
						 */
						// Start of branch "row16"
						if (row16 != null) {

							/**
							 * [tJavaRow_3 main ] start
							 */

							currentComponent = "tJavaRow_3";

							// Code generated according to input schema and
							// output schema
							if (row16.subjid != null) {
								if (row16.subjid.length() > 0) {
									System.out.println("SUBJID="
											+ row16.ItemGroupOID);
									context.subjid = row16.ItemGroupOID;
									// System.out.println("1 "+context.subjid);
								}
							}
							if (row16.encounterNum != null) {
								if (row16.encounterNum.length() > 0) {
									context.encounterItem = row16.encounterNum;
									System.out.println("ENC: "
											+ context.encounterItem);
								}
							}
							// context.subjid = "FF.SUBJID";
							// System.out.println("2 " +context.subjid);
							nb_line_tJavaRow_3++;

							tos_count_tJavaRow_3++;

							/**
							 * [tJavaRow_3 main ] stop
							 */

						} // End of branch "row16"

						/**
						 * [tFileInputXML_3 end ] start
						 */

						currentComponent = "tFileInputXML_3";

					}
				}
				globalMap.put("tFileInputXML_3_NB_LINE",
						nb_line_tFileInputXML_3);

				ok_Hash.put("tFileInputXML_3", true);
				end_Hash.put("tFileInputXML_3", System.currentTimeMillis());

				/**
				 * [tFileInputXML_3 end ] stop
				 */

				/**
				 * [tJavaRow_3 end ] start
				 */

				currentComponent = "tJavaRow_3";

				globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);

				ok_Hash.put("tJavaRow_3", true);
				end_Hash.put("tJavaRow_3", System.currentTimeMillis());

				/**
				 * [tJavaRow_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputXML_3:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_17Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputXML_3_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_17Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_17_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_17 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_17", false);
				start_Hash.put("tCreateTemporaryFile_17",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_17";

				int tos_count_tCreateTemporaryFile_17 = 0;

				java.io.File dir_tCreateTemporaryFile_17 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_17.mkdirs();
				String name_tCreateTemporaryFile_17 = "talend2_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_17 = ("tmp".replaceAll(
						"\\.", "").length() == 0) ? "tmp" : "tmp".replaceAll(
						"\\.", "");
				java.io.File file_tCreateTemporaryFile_17 = new java.io.File(
						dir_tCreateTemporaryFile_17,
						name_tCreateTemporaryFile_17 + "."
								+ suffix_tCreateTemporaryFile_17);
				if (file_tCreateTemporaryFile_17.createNewFile()) {
					file_tCreateTemporaryFile_17.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_17_FILEPATH",
						file_tCreateTemporaryFile_17.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_17 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_17 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_17";

				tos_count_tCreateTemporaryFile_17++;

				/**
				 * [tCreateTemporaryFile_17 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_17 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_17";

				ok_Hash.put("tCreateTemporaryFile_17", true);
				end_Hash.put("tCreateTemporaryFile_17",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_17 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_17:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_15Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_17_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_15Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_15 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_15", false);
				start_Hash.put("tCreateTemporaryFile_15",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_15";

				int tos_count_tCreateTemporaryFile_15 = 0;

				java.io.File dir_tCreateTemporaryFile_15 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_15.mkdirs();
				String name_tCreateTemporaryFile_15 = "talend2_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_15 = ("tmp".replaceAll(
						"\\.", "").length() == 0) ? "tmp" : "tmp".replaceAll(
						"\\.", "");
				java.io.File file_tCreateTemporaryFile_15 = new java.io.File(
						dir_tCreateTemporaryFile_15,
						name_tCreateTemporaryFile_15 + "."
								+ suffix_tCreateTemporaryFile_15);
				if (file_tCreateTemporaryFile_15.createNewFile()) {
					file_tCreateTemporaryFile_15.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_15_FILEPATH",
						file_tCreateTemporaryFile_15.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_15 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_15 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_15";

				tos_count_tCreateTemporaryFile_15++;

				/**
				 * [tCreateTemporaryFile_15 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_15 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_15";

				ok_Hash.put("tCreateTemporaryFile_15", true);
				end_Hash.put("tCreateTemporaryFile_15",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_15 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_15:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_13Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_15_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_13Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_13 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_13", false);
				start_Hash.put("tCreateTemporaryFile_13",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_13";

				int tos_count_tCreateTemporaryFile_13 = 0;

				java.io.File dir_tCreateTemporaryFile_13 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_13.mkdirs();
				String name_tCreateTemporaryFile_13 = "talend232323231_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_13 = ("tmp".replaceAll(
						"\\.", "").length() == 0) ? "tmp" : "tmp".replaceAll(
						"\\.", "");
				java.io.File file_tCreateTemporaryFile_13 = new java.io.File(
						dir_tCreateTemporaryFile_13,
						name_tCreateTemporaryFile_13 + "."
								+ suffix_tCreateTemporaryFile_13);
				if (file_tCreateTemporaryFile_13.createNewFile()) {
					file_tCreateTemporaryFile_13.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_13_FILEPATH",
						file_tCreateTemporaryFile_13.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_13 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_13 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_13";

				tos_count_tCreateTemporaryFile_13++;

				/**
				 * [tCreateTemporaryFile_13 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_13 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_13";

				ok_Hash.put("tCreateTemporaryFile_13", true);
				end_Hash.put("tCreateTemporaryFile_13",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_13 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_13:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_12Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tCreateTemporaryFile_13_SUBPROCESS_STATE", 1);
	}

	public static class fromOntStruct implements
			routines.system.IPersistableComparableLookupRow<fromOntStruct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String itemCode;

		public String getItemCode() {
			return this.itemCode;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.PathID == null) ? 0 : this.PathID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final fromOntStruct other = (fromOntStruct) obj;

			if (this.PathID == null) {
				if (other.PathID != null)
					return false;
			} else if (!this.PathID.equals(other.PathID))
				return false;

			return true;
		}

		public void copyDataTo(fromOntStruct other) {

			other.HLEVEL = this.HLEVEL;
			other.Name = this.Name;
			other.Path = this.Path;
			other.DataType = this.DataType;
			other.Update_Date = this.Update_Date;
			other.Import_Date = this.Import_Date;
			other.Download_Date = this.Download_Date;
			other.PathID = this.PathID;
			other.visual = this.visual;
			other.itemCode = this.itemCode;
			other.source = this.source;
			other.xml = this.xml;
			other.m_applied_path = this.m_applied_path;

		}

		public void copyKeysDataTo(fromOntStruct other) {

			other.PathID = this.PathID;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.PathID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PathID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.HLEVEL = readInteger(dis, ois);

				this.Name = readString(dis, ois);

				this.Path = readString(dis, ois);

				this.DataType = readString(dis, ois);

				this.Update_Date = readString(dis, ois);

				this.Import_Date = readString(dis, ois);

				this.Download_Date = readString(dis, ois);

				this.visual = readString(dis, ois);

				this.itemCode = readString(dis, ois);

				this.source = readString(dis, ois);

				this.xml = readString(dis, ois);

				this.m_applied_path = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.HLEVEL, dos, oos);

				writeString(this.Name, dos, oos);

				writeString(this.Path, dos, oos);

				writeString(this.DataType, dos, oos);

				writeString(this.Update_Date, dos, oos);

				writeString(this.Import_Date, dos, oos);

				writeString(this.Download_Date, dos, oos);

				writeString(this.visual, dos, oos);

				writeString(this.itemCode, dos, oos);

				writeString(this.source, dos, oos);

				writeString(this.xml, dos, oos);

				writeString(this.m_applied_path, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",itemCode=" + itemCode);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(fromOntStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PathID, other.PathID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				fromOntStruct fromOnt = new fromOntStruct();

				/**
				 * [tAdvancedHash_fromOnt begin ] start
				 */

				ok_Hash.put("tAdvancedHash_fromOnt", false);
				start_Hash.put("tAdvancedHash_fromOnt",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_fromOnt";

				int tos_count_tAdvancedHash_fromOnt = 0;

				// connection name:fromOnt
				// source node:tFileInputDelimited_1 - inputs:(after_tForeach_1)
				// outputs:(fromOnt,fromOnt) | target node:tAdvancedHash_fromOnt
				// - inputs:(fromOnt) outputs:()
				// linked node: tMap_2 - inputs:(fromPatient,fromOnt,fromCode)
				// outputs:(out2)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_fromOnt = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<fromOntStruct> tHash_Lookup_fromOnt = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<fromOntStruct> getLookup(matchingModeEnum_fromOnt);

				globalMap.put("tHash_Lookup_fromOnt", tHash_Lookup_fromOnt);

				/**
				 * [tAdvancedHash_fromOnt begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;

				char fieldSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_1 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_1 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_1 = /**
				 * Start field
				 * tFileInputDelimited_1:FILENAME
				 */
				context.folderMain + context.folderOutput + "ont.csv"/**
				 * End field
				 * tFileInputDelimited_1:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

				try {

					String[] rowtFileInputDelimited_1 = null;
					int currentLinetFileInputDelimited_1 = 0;
					int outputLinetFileInputDelimited_1 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0;
							if (footer_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_1,
									fieldSeparator_tFileInputDelimited_1[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_1)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_1[0]);
						}

						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
							csvReadertFileInputDelimited_1.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_1[0]);

						csvReadertFileInputDelimited_1.setQuoteChar('"');

						csvReadertFileInputDelimited_1
								.setEscapeChar(csvReadertFileInputDelimited_1
										.getQuoteChar());

						if (footer_tFileInputDelimited_1 > 0) {
							for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
							csvReadertFileInputDelimited_1
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_1.readNext()) {

								rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
										.getValues();
								if (!(rowtFileInputDelimited_1.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_1[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_1++;

								}

							}
							int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
									- footer_tFileInputDelimited_1 < 0 ? 0
									: totalLinetFileInputDelimited_1
											- footer_tFileInputDelimited_1;
							if (lastLinetFileInputDelimited_1 > 0) {
								lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1
										: lastLineTemptFileInputDelimited_1;
							} else {
								lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
							}

							csvReadertFileInputDelimited_1.close();
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_1)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_1[0]);
							}
							csvReadertFileInputDelimited_1
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('"');

							csvReadertFileInputDelimited_1
									.setEscapeChar(csvReadertFileInputDelimited_1
											.getQuoteChar());

						}

						if (limittFileInputDelimited_1 != 0) {
							for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 1; currentLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
						}
						csvReadertFileInputDelimited_1
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_1 != 0
							&& csvReadertFileInputDelimited_1 != null
							&& csvReadertFileInputDelimited_1.readNext()) {

						rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
								.getValues();

						if (rowtFileInputDelimited_1.length == 1
								&& ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_1++;

						if (lastLinetFileInputDelimited_1 > -1
								&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
							break;
						}
						outputLinetFileInputDelimited_1++;
						if (limittFileInputDelimited_1 > 0
								&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
							break;
						}

						fromOnt = null;

						fromOnt = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						fromOnt = new fromOntStruct();
						try {

							if (rowtFileInputDelimited_1.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								fromOnt.HLEVEL = null;

								fromOnt.Name = null;

								fromOnt.Path = null;

								fromOnt.DataType = null;

								fromOnt.Update_Date = null;

								fromOnt.Import_Date = null;

								fromOnt.Download_Date = null;

								fromOnt.PathID = null;

								fromOnt.visual = null;

								fromOnt.itemCode = null;

								fromOnt.source = null;

								fromOnt.xml = null;

								fromOnt.m_applied_path = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_1 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_1 = 0;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {

										fromOnt.HLEVEL = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

									} else {
										fromOnt.HLEVEL = null;
									}

								} else {
									fromOnt.HLEVEL = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 1;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									fromOnt.Name = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									fromOnt.Name = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 2;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									fromOnt.Path = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									fromOnt.Path = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 3;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									fromOnt.DataType = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									fromOnt.DataType = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 4;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									fromOnt.Update_Date = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									fromOnt.Update_Date = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 5;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									fromOnt.Import_Date = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									fromOnt.Import_Date = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 6;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									fromOnt.Download_Date = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									fromOnt.Download_Date = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 7;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									fromOnt.PathID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									fromOnt.PathID = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 8;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									fromOnt.visual = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									fromOnt.visual = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 9;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									fromOnt.itemCode = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									fromOnt.itemCode = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 10;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									fromOnt.source = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									fromOnt.source = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 11;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									fromOnt.xml = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									fromOnt.xml = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 12;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									fromOnt.m_applied_path = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									fromOnt.m_applied_path = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							fromOnt = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "fromOnt"
						if (fromOnt != null) {

							/**
							 * [tAdvancedHash_fromOnt main ] start
							 */

							currentComponent = "tAdvancedHash_fromOnt";

							fromOntStruct fromOnt_HashRow = new fromOntStruct();

							fromOnt_HashRow.HLEVEL = fromOnt.HLEVEL;

							fromOnt_HashRow.Name = fromOnt.Name;

							fromOnt_HashRow.Path = fromOnt.Path;

							fromOnt_HashRow.DataType = fromOnt.DataType;

							fromOnt_HashRow.Update_Date = fromOnt.Update_Date;

							fromOnt_HashRow.Import_Date = fromOnt.Import_Date;

							fromOnt_HashRow.Download_Date = fromOnt.Download_Date;

							fromOnt_HashRow.PathID = fromOnt.PathID;

							fromOnt_HashRow.visual = fromOnt.visual;

							fromOnt_HashRow.itemCode = fromOnt.itemCode;

							fromOnt_HashRow.source = fromOnt.source;

							fromOnt_HashRow.xml = fromOnt.xml;

							fromOnt_HashRow.m_applied_path = fromOnt.m_applied_path;

							tHash_Lookup_fromOnt.put(fromOnt_HashRow);

							tos_count_tAdvancedHash_fromOnt++;

							/**
							 * [tAdvancedHash_fromOnt main ] stop
							 */

						} // End of branch "fromOnt"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						nb_line_tFileInputDelimited_1++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_1 != null) {
							csvReadertFileInputDelimited_1.close();
						}
					}
					if (csvReadertFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								nb_line_tFileInputDelimited_1);
					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_fromOnt end ] start
				 */

				currentComponent = "tAdvancedHash_fromOnt";

				tHash_Lookup_fromOnt.endPut();

				ok_Hash.put("tAdvancedHash_fromOnt", true);
				end_Hash.put("tAdvancedHash_fromOnt",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_fromOnt end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class fromCodeStruct implements
			routines.system.IPersistableComparableLookupRow<fromCodeStruct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String OID;

		public String getOID() {
			return this.OID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String CodeListItem;

		public String getCodeListItem() {
			return this.CodeListItem;
		}

		public String TranslatedText;

		public String getTranslatedText() {
			return this.TranslatedText;
		}

		public String ItemGroupOID;

		public String getItemGroupOID() {
			return this.ItemGroupOID;
		}

		public String Datatype;

		public String getDatatype() {
			return this.Datatype;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.ItemGroupOID == null) ? 0 : this.ItemGroupOID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final fromCodeStruct other = (fromCodeStruct) obj;

			if (this.ItemGroupOID == null) {
				if (other.ItemGroupOID != null)
					return false;
			} else if (!this.ItemGroupOID.equals(other.ItemGroupOID))
				return false;

			return true;
		}

		public void copyDataTo(fromCodeStruct other) {

			other.OID = this.OID;
			other.Name = this.Name;
			other.CodeListItem = this.CodeListItem;
			other.TranslatedText = this.TranslatedText;
			other.ItemGroupOID = this.ItemGroupOID;
			other.Datatype = this.Datatype;

		}

		public void copyKeysDataTo(fromCodeStruct other) {

			other.ItemGroupOID = this.ItemGroupOID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.ItemGroupOID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ItemGroupOID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.OID = readString(dis, ois);

				this.Name = readString(dis, ois);

				this.CodeListItem = readString(dis, ois);

				this.TranslatedText = readString(dis, ois);

				this.Datatype = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.OID, dos, oos);

				writeString(this.Name, dos, oos);

				writeString(this.CodeListItem, dos, oos);

				writeString(this.TranslatedText, dos, oos);

				writeString(this.Datatype, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OID=" + OID);
			sb.append(",Name=" + Name);
			sb.append(",CodeListItem=" + CodeListItem);
			sb.append(",TranslatedText=" + TranslatedText);
			sb.append(",ItemGroupOID=" + ItemGroupOID);
			sb.append(",Datatype=" + Datatype);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(fromCodeStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ItemGroupOID,
					other.ItemGroupOID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_14Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				fromCodeStruct fromCode = new fromCodeStruct();

				/**
				 * [tAdvancedHash_fromCode begin ] start
				 */

				ok_Hash.put("tAdvancedHash_fromCode", false);
				start_Hash.put("tAdvancedHash_fromCode",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_fromCode";

				int tos_count_tAdvancedHash_fromCode = 0;

				// connection name:fromCode
				// source node:tFileInputDelimited_14 -
				// inputs:(after_tForeach_1) outputs:(fromCode,fromCode) |
				// target node:tAdvancedHash_fromCode - inputs:(fromCode)
				// outputs:()
				// linked node: tMap_2 - inputs:(fromPatient,fromOnt,fromCode)
				// outputs:(out2)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_fromCode = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<fromCodeStruct> tHash_Lookup_fromCode = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<fromCodeStruct> getLookup(matchingModeEnum_fromCode);

				globalMap.put("tHash_Lookup_fromCode", tHash_Lookup_fromCode);

				/**
				 * [tAdvancedHash_fromCode begin ] stop
				 */

				/**
				 * [tFileInputDelimited_14 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_14", false);
				start_Hash.put("tFileInputDelimited_14",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_14";

				int tos_count_tFileInputDelimited_14 = 0;

				int nb_line_tFileInputDelimited_14 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_14 = null;
				try {

					Object filename_tFileInputDelimited_14 = context.folderMain
							+ context.folderOutput + "codelist.csv";
					if (filename_tFileInputDelimited_14 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_14 = 0, random_value_tFileInputDelimited_14 = -1;
						if (footer_value_tFileInputDelimited_14 > 0
								|| random_value_tFileInputDelimited_14 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_14 = new org.talend.fileprocess.FileInputDelimited(
								context.folderMain + context.folderOutput
										+ "codelist.csv", "ISO-8859-15", "\t",
								"\n", true, 1, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_14 != null
							&& fid_tFileInputDelimited_14.nextRecord()) {

						fromCode = null;

						fromCode = null;

						boolean whetherReject_tFileInputDelimited_14 = false;
						fromCode = new fromCodeStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_14 = 0;

							columnIndexWithD_tFileInputDelimited_14 = 0;

							fromCode.OID = fid_tFileInputDelimited_14
									.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 1;

							fromCode.Name = fid_tFileInputDelimited_14
									.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 2;

							fromCode.CodeListItem = fid_tFileInputDelimited_14
									.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 3;

							fromCode.TranslatedText = fid_tFileInputDelimited_14
									.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 4;

							fromCode.ItemGroupOID = fid_tFileInputDelimited_14
									.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 5;

							fromCode.Datatype = fid_tFileInputDelimited_14
									.get(columnIndexWithD_tFileInputDelimited_14);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_14 = true;

							System.err.println(e.getMessage());
							fromCode = null;

						}

						/**
						 * [tFileInputDelimited_14 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_14 main ] start
						 */

						currentComponent = "tFileInputDelimited_14";

						tos_count_tFileInputDelimited_14++;

						/**
						 * [tFileInputDelimited_14 main ] stop
						 */
						// Start of branch "fromCode"
						if (fromCode != null) {

							/**
							 * [tAdvancedHash_fromCode main ] start
							 */

							currentComponent = "tAdvancedHash_fromCode";

							fromCodeStruct fromCode_HashRow = new fromCodeStruct();

							fromCode_HashRow.OID = fromCode.OID;

							fromCode_HashRow.Name = fromCode.Name;

							fromCode_HashRow.CodeListItem = fromCode.CodeListItem;

							fromCode_HashRow.TranslatedText = fromCode.TranslatedText;

							fromCode_HashRow.ItemGroupOID = fromCode.ItemGroupOID;

							fromCode_HashRow.Datatype = fromCode.Datatype;

							tHash_Lookup_fromCode.put(fromCode_HashRow);

							tos_count_tAdvancedHash_fromCode++;

							/**
							 * [tAdvancedHash_fromCode main ] stop
							 */

						} // End of branch "fromCode"

						/**
						 * [tFileInputDelimited_14 end ] start
						 */

						currentComponent = "tFileInputDelimited_14";

					}
				} finally {
					if (!((Object) (context.folderMain + context.folderOutput + "codelist.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_14 != null) {
							fid_tFileInputDelimited_14.close();
						}
					}
					if (fid_tFileInputDelimited_14 != null) {
						globalMap.put("tFileInputDelimited_14_NB_LINE",
								fid_tFileInputDelimited_14.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_14", true);
				end_Hash.put("tFileInputDelimited_14",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_14 end ] stop
				 */

				/**
				 * [tAdvancedHash_fromCode end ] start
				 */

				currentComponent = "tAdvancedHash_fromCode";

				tHash_Lookup_fromCode.endPut();

				ok_Hash.put("tAdvancedHash_fromCode", true);
				end_Hash.put("tAdvancedHash_fromCode",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_fromCode end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_14_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements
			routines.system.IPersistableComparableLookupRow<row7Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String OID;

		public String getOID() {
			return this.OID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String CodeListItem;

		public String getCodeListItem() {
			return this.CodeListItem;
		}

		public String TranslatedText;

		public String getTranslatedText() {
			return this.TranslatedText;
		}

		public String ItemGroupOID;

		public String getItemGroupOID() {
			return this.ItemGroupOID;
		}

		public String Datatype;

		public String getDatatype() {
			return this.Datatype;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.CodeListItem == null) ? 0 : this.CodeListItem
								.hashCode());

				result = prime
						* result
						+ ((this.ItemGroupOID == null) ? 0 : this.ItemGroupOID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.CodeListItem == null) {
				if (other.CodeListItem != null)
					return false;
			} else if (!this.CodeListItem.equals(other.CodeListItem))
				return false;

			if (this.ItemGroupOID == null) {
				if (other.ItemGroupOID != null)
					return false;
			} else if (!this.ItemGroupOID.equals(other.ItemGroupOID))
				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.OID = this.OID;
			other.Name = this.Name;
			other.CodeListItem = this.CodeListItem;
			other.TranslatedText = this.TranslatedText;
			other.ItemGroupOID = this.ItemGroupOID;
			other.Datatype = this.Datatype;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.CodeListItem = this.CodeListItem;
			other.ItemGroupOID = this.ItemGroupOID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.CodeListItem = readString(dis);

					this.ItemGroupOID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CodeListItem, dos);

				// String

				writeString(this.ItemGroupOID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.OID = readString(dis, ois);

				this.Name = readString(dis, ois);

				this.TranslatedText = readString(dis, ois);

				this.Datatype = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.OID, dos, oos);

				writeString(this.Name, dos, oos);

				writeString(this.TranslatedText, dos, oos);

				writeString(this.Datatype, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OID=" + OID);
			sb.append(",Name=" + Name);
			sb.append(",CodeListItem=" + CodeListItem);
			sb.append(",TranslatedText=" + TranslatedText);
			sb.append(",ItemGroupOID=" + ItemGroupOID);
			sb.append(",Datatype=" + Datatype);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CodeListItem,
					other.CodeListItem);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ItemGroupOID,
					other.ItemGroupOID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tAdvancedHash_row7 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row7", false);
				start_Hash
						.put("tAdvancedHash_row7", System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row7";

				int tos_count_tAdvancedHash_row7 = 0;

				// connection name:row7
				// source node:tFileInputDelimited_7 - inputs:(after_tForeach_1)
				// outputs:(row7,row7) | target node:tAdvancedHash_row7 -
				// inputs:(row7) outputs:()
				// linked node: tMap_8 - inputs:(row25,row7) outputs:(out5,out6)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row7Struct> getLookup(matchingModeEnum_row7);

				globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);

				/**
				 * [tAdvancedHash_row7 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_7", false);
				start_Hash.put("tFileInputDelimited_7",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_7";

				int tos_count_tFileInputDelimited_7 = 0;

				int nb_line_tFileInputDelimited_7 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_7 = null;
				try {

					Object filename_tFileInputDelimited_7 = context.folderMain
							+ context.folderOutput + "codelist.csv";
					if (filename_tFileInputDelimited_7 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_7 = 0, random_value_tFileInputDelimited_7 = -1;
						if (footer_value_tFileInputDelimited_7 > 0
								|| random_value_tFileInputDelimited_7 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_7 = new org.talend.fileprocess.FileInputDelimited(
								context.folderMain + context.folderOutput
										+ "codelist.csv", "ISO-8859-15", "\t",
								"\n", true, 1, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_7 != null
							&& fid_tFileInputDelimited_7.nextRecord()) {

						row7 = null;

						row7 = null;

						boolean whetherReject_tFileInputDelimited_7 = false;
						row7 = new row7Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_7 = 0;

							columnIndexWithD_tFileInputDelimited_7 = 0;

							row7.OID = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 1;

							row7.Name = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 2;

							row7.CodeListItem = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 3;

							row7.TranslatedText = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 4;

							row7.ItemGroupOID = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 5;

							row7.Datatype = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_7 = true;

							System.err.println(e.getMessage());
							row7 = null;

						}

						/**
						 * [tFileInputDelimited_7 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_7 main ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						tos_count_tFileInputDelimited_7++;

						/**
						 * [tFileInputDelimited_7 main ] stop
						 */
						// Start of branch "row7"
						if (row7 != null) {

							/**
							 * [tAdvancedHash_row7 main ] start
							 */

							currentComponent = "tAdvancedHash_row7";

							row7Struct row7_HashRow = new row7Struct();

							row7_HashRow.OID = row7.OID;

							row7_HashRow.Name = row7.Name;

							row7_HashRow.CodeListItem = row7.CodeListItem;

							row7_HashRow.TranslatedText = row7.TranslatedText;

							row7_HashRow.ItemGroupOID = row7.ItemGroupOID;

							row7_HashRow.Datatype = row7.Datatype;

							tHash_Lookup_row7.put(row7_HashRow);

							tos_count_tAdvancedHash_row7++;

							/**
							 * [tAdvancedHash_row7 main ] stop
							 */

						} // End of branch "row7"

						/**
						 * [tFileInputDelimited_7 end ] start
						 */

						currentComponent = "tFileInputDelimited_7";

					}
				} finally {
					if (!((Object) (context.folderMain + context.folderOutput + "codelist.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_7 != null) {
							fid_tFileInputDelimited_7.close();
						}
					}
					if (fid_tFileInputDelimited_7 != null) {
						globalMap.put("tFileInputDelimited_7_NB_LINE",
								fid_tFileInputDelimited_7.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_7", true);
				end_Hash.put("tFileInputDelimited_7",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_7 end ] stop
				 */

				/**
				 * [tAdvancedHash_row7 end ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				tHash_Lookup_row7.endPut();

				ok_Hash.put("tAdvancedHash_row7", true);
				end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 1);
	}

	public void tJava_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());
				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				StatusListener.setSubStatus(0.0f, (int) (0.0f) + "%");
				context.subStatus = 0.0f;

				/**
				 * [tJava_2 begin ] stop
				 */
				/**
				 * [tJava_2 main ] start
				 */

				currentComponent = "tJava_2";

				tos_count_tJava_2++;

				/**
				 * [tJava_2 main ] stop
				 */
				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				/**
				 * [tJava_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputXML_3Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}

	public void tLibraryLoad_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLibraryLoad_1 begin ] start
				 */

				ok_Hash.put("tLibraryLoad_1", false);
				start_Hash.put("tLibraryLoad_1", System.currentTimeMillis());
				currentComponent = "tLibraryLoad_1";

				int tos_count_tLibraryLoad_1 = 0;

				/**
				 * [tLibraryLoad_1 begin ] stop
				 */
				/**
				 * [tLibraryLoad_1 main ] start
				 */

				currentComponent = "tLibraryLoad_1";

				tos_count_tLibraryLoad_1++;

				/**
				 * [tLibraryLoad_1 main ] stop
				 */
				/**
				 * [tLibraryLoad_1 end ] start
				 */

				currentComponent = "tLibraryLoad_1";

				ok_Hash.put("tLibraryLoad_1", true);
				end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				/**
				 * [tLibraryLoad_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tLibraryLoad_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_2Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 1);
	}

	public static class row22Struct implements
			routines.system.IPersistableComparableLookupRow<row22Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String OID;

		public String getOID() {
			return this.OID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String CodeListItem;

		public String getCodeListItem() {
			return this.CodeListItem;
		}

		public String TranslatedText;

		public String getTranslatedText() {
			return this.TranslatedText;
		}

		public String ItemGroupOID;

		public String getItemGroupOID() {
			return this.ItemGroupOID;
		}

		public String Datatype;

		public String getDatatype() {
			return this.Datatype;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.OID == null) ? 0 : this.OID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row22Struct other = (row22Struct) obj;

			if (this.OID == null) {
				if (other.OID != null)
					return false;
			} else if (!this.OID.equals(other.OID))
				return false;

			return true;
		}

		public void copyDataTo(row22Struct other) {

			other.OID = this.OID;
			other.Name = this.Name;
			other.CodeListItem = this.CodeListItem;
			other.TranslatedText = this.TranslatedText;
			other.ItemGroupOID = this.ItemGroupOID;
			other.Datatype = this.Datatype;

		}

		public void copyKeysDataTo(row22Struct other) {

			other.OID = this.OID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_ODM_Extract_PD.length) {
					if (length < 1024
							&& commonByteArray_TOS_ODM_Extract_PD.length == 0) {
						commonByteArray_TOS_ODM_Extract_PD = new byte[1024];
					} else {
						commonByteArray_TOS_ODM_Extract_PD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_ODM_Extract_PD, 0, length);
				strReturn = new String(commonByteArray_TOS_ODM_Extract_PD, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.OID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.OID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Name = readString(dis, ois);

				this.CodeListItem = readString(dis, ois);

				this.TranslatedText = readString(dis, ois);

				this.ItemGroupOID = readString(dis, ois);

				this.Datatype = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Name, dos, oos);

				writeString(this.CodeListItem, dos, oos);

				writeString(this.TranslatedText, dos, oos);

				writeString(this.ItemGroupOID, dos, oos);

				writeString(this.Datatype, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OID=" + OID);
			sb.append(",Name=" + Name);
			sb.append(",CodeListItem=" + CodeListItem);
			sb.append(",TranslatedText=" + TranslatedText);
			sb.append(",ItemGroupOID=" + ItemGroupOID);
			sb.append(",Datatype=" + Datatype);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.OID, other.OID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_17Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_17_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row22Struct row22 = new row22Struct();

				/**
				 * [tAdvancedHash_row22 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row22", false);
				start_Hash.put("tAdvancedHash_row22",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row22";

				int tos_count_tAdvancedHash_row22 = 0;

				// connection name:row22
				// source node:tFileInputDelimited_17 -
				// inputs:(after_tFileInputDelimited_16) outputs:(row22,row22) |
				// target node:tAdvancedHash_row22 - inputs:(row22) outputs:()
				// linked node: tMap_10 - inputs:(row21,row22) outputs:(out11)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row22 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row22Struct> getLookup(matchingModeEnum_row22);

				globalMap.put("tHash_Lookup_row22", tHash_Lookup_row22);

				/**
				 * [tAdvancedHash_row22 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_17 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_17", false);
				start_Hash.put("tFileInputDelimited_17",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_17";

				int tos_count_tFileInputDelimited_17 = 0;

				int nb_line_tFileInputDelimited_17 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_17 = null;
				try {

					Object filename_tFileInputDelimited_17 = context.folderMain
							+ context.folderOutput + "codelist.csv";
					if (filename_tFileInputDelimited_17 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_17 = 0, random_value_tFileInputDelimited_17 = -1;
						if (footer_value_tFileInputDelimited_17 > 0
								|| random_value_tFileInputDelimited_17 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_17 = new org.talend.fileprocess.FileInputDelimited(
								context.folderMain + context.folderOutput
										+ "codelist.csv", "ISO-8859-15", "\t",
								"\n", true, 1, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_17 != null
							&& fid_tFileInputDelimited_17.nextRecord()) {

						row22 = null;

						row22 = null;

						boolean whetherReject_tFileInputDelimited_17 = false;
						row22 = new row22Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_17 = 0;

							columnIndexWithD_tFileInputDelimited_17 = 0;

							row22.OID = fid_tFileInputDelimited_17
									.get(columnIndexWithD_tFileInputDelimited_17);

							columnIndexWithD_tFileInputDelimited_17 = 1;

							row22.Name = fid_tFileInputDelimited_17
									.get(columnIndexWithD_tFileInputDelimited_17);

							columnIndexWithD_tFileInputDelimited_17 = 2;

							row22.CodeListItem = fid_tFileInputDelimited_17
									.get(columnIndexWithD_tFileInputDelimited_17);

							columnIndexWithD_tFileInputDelimited_17 = 3;

							row22.TranslatedText = fid_tFileInputDelimited_17
									.get(columnIndexWithD_tFileInputDelimited_17);

							columnIndexWithD_tFileInputDelimited_17 = 4;

							row22.ItemGroupOID = fid_tFileInputDelimited_17
									.get(columnIndexWithD_tFileInputDelimited_17);

							columnIndexWithD_tFileInputDelimited_17 = 5;

							row22.Datatype = fid_tFileInputDelimited_17
									.get(columnIndexWithD_tFileInputDelimited_17);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_17 = true;

							System.err.println(e.getMessage());
							row22 = null;

						}

						/**
						 * [tFileInputDelimited_17 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_17 main ] start
						 */

						currentComponent = "tFileInputDelimited_17";

						tos_count_tFileInputDelimited_17++;

						/**
						 * [tFileInputDelimited_17 main ] stop
						 */
						// Start of branch "row22"
						if (row22 != null) {

							/**
							 * [tAdvancedHash_row22 main ] start
							 */

							currentComponent = "tAdvancedHash_row22";

							row22Struct row22_HashRow = new row22Struct();

							row22_HashRow.OID = row22.OID;

							row22_HashRow.Name = row22.Name;

							row22_HashRow.CodeListItem = row22.CodeListItem;

							row22_HashRow.TranslatedText = row22.TranslatedText;

							row22_HashRow.ItemGroupOID = row22.ItemGroupOID;

							row22_HashRow.Datatype = row22.Datatype;

							tHash_Lookup_row22.put(row22_HashRow);

							tos_count_tAdvancedHash_row22++;

							/**
							 * [tAdvancedHash_row22 main ] stop
							 */

						} // End of branch "row22"

						/**
						 * [tFileInputDelimited_17 end ] start
						 */

						currentComponent = "tFileInputDelimited_17";

					}
				} finally {
					if (!((Object) (context.folderMain + context.folderOutput + "codelist.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_17 != null) {
							fid_tFileInputDelimited_17.close();
						}
					}
					if (fid_tFileInputDelimited_17 != null) {
						globalMap.put("tFileInputDelimited_17_NB_LINE",
								fid_tFileInputDelimited_17.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_17", true);
				end_Hash.put("tFileInputDelimited_17",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_17 end ] stop
				 */

				/**
				 * [tAdvancedHash_row22 end ] start
				 */

				currentComponent = "tAdvancedHash_row22";

				tHash_Lookup_row22.endPut();

				ok_Hash.put("tAdvancedHash_row22", true);
				end_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row22 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_17_SUBPROCESS_STATE", 1);
	}

	public void tJava_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_7 begin ] start
				 */

				ok_Hash.put("tJava_7", false);
				start_Hash.put("tJava_7", System.currentTimeMillis());
				currentComponent = "tJava_7";

				int tos_count_tJava_7 = 0;

				context.DB_StagingI2B2_jdbcurl = "jdbc:oracle:thin:@"
						+ context.DBHost + ":" + context.DBPort + ":"
						+ context.DBInstance;
				context.DB_StagingI2B2_sqlclassname = "oracle.jdbc.driver.OracleDriver";
				context.instanceMap = new HashMap<String, BigDecimal>();

				// jdbc:oracle:thin:@134.76.113.224:1521:i2b2t

				/**
				 * [tJava_7 begin ] stop
				 */
				/**
				 * [tJava_7 main ] start
				 */

				currentComponent = "tJava_7";

				tos_count_tJava_7++;

				/**
				 * [tJava_7 main ] stop
				 */
				/**
				 * [tJava_7 end ] start
				 */

				currentComponent = "tJava_7";

				ok_Hash.put("tJava_7", true);
				end_Hash.put("tJava_7", System.currentTimeMillis());

				/**
				 * [tJava_7 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_7:OnSubjobOk1", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCConnection_1Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_7:OnSubjobOk2", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tLibraryLoad_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_7_SUBPROCESS_STATE", 1);
	}

	public void tJDBCConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCConnection_1 begin ] start
				 */

				ok_Hash.put("tJDBCConnection_1", false);
				start_Hash.put("tJDBCConnection_1", System.currentTimeMillis());
				currentComponent = "tJDBCConnection_1";

				int tos_count_tJDBCConnection_1 = 0;

				String url_tJDBCConnection_1 = context.DB_StagingI2B2_jdbcurl;

				String userName_tJDBCConnection_1 = context.DBUsername;
				String password_tJDBCConnection_1 = context.DBPassword;

				java.sql.Connection conn_tJDBCConnection_1 = null;

				if ((null == globalMap.get(KEY_DB_DATASOURCES))
						|| "".equals("")) {

					java.lang.Class
							.forName(context.DB_StagingI2B2_sqlclassname);

					conn_tJDBCConnection_1 = java.sql.DriverManager
							.getConnection(url_tJDBCConnection_1,
									userName_tJDBCConnection_1,
									password_tJDBCConnection_1);
					globalMap.put("conn_tJDBCConnection_1",
							conn_tJDBCConnection_1);
				}
				if (null != conn_tJDBCConnection_1) {

				}

				globalMap.put("conn_tJDBCConnection_1", conn_tJDBCConnection_1);
				globalMap.put("url_tJDBCConnection_1", url_tJDBCConnection_1);
				// globalMap.put("user_tJDBCConnection_1",
				// userName_tJDBCConnection_1);
				// globalMap.put("pass_tJDBCConnection_1",
				// password_tJDBCConnection_1);

				/**
				 * [tJDBCConnection_1 begin ] stop
				 */
				/**
				 * [tJDBCConnection_1 main ] start
				 */

				currentComponent = "tJDBCConnection_1";

				tos_count_tJDBCConnection_1++;

				/**
				 * [tJDBCConnection_1 main ] stop
				 */
				/**
				 * [tJDBCConnection_1 end ] start
				 */

				currentComponent = "tJDBCConnection_1";

				ok_Hash.put("tJDBCConnection_1", true);
				end_Hash.put("tJDBCConnection_1", System.currentTimeMillis());

				/**
				 * [tJDBCConnection_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJDBCConnection_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tJDBCInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class row36Struct implements
			routines.system.IPersistableRow<row36Struct> {
		final static byte[] commonByteArrayLock_TOS_ODM_Extract_PD = new byte[0];
		static byte[] commonByteArray_TOS_ODM_Extract_PD = new byte[0];

		public BigDecimal instance_num;

		public BigDecimal getInstance_num() {
			return this.instance_num;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_ODM_Extract_PD) {

				try {

					int length = 0;

					this.instance_num = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.instance_num);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("instance_num=" + String.valueOf(instance_num));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row36Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row36Struct row36 = new row36Struct();

				/**
				 * [tJavaRow_8 begin ] start
				 */

				ok_Hash.put("tJavaRow_8", false);
				start_Hash.put("tJavaRow_8", System.currentTimeMillis());
				currentComponent = "tJavaRow_8";

				int tos_count_tJavaRow_8 = 0;

				int nb_line_tJavaRow_8 = 0;

				/**
				 * [tJavaRow_8 begin ] stop
				 */

				/**
				 * [tJDBCInput_1 begin ] start
				 */

				ok_Hash.put("tJDBCInput_1", false);
				start_Hash.put("tJDBCInput_1", System.currentTimeMillis());
				currentComponent = "tJDBCInput_1";

				int tos_count_tJDBCInput_1 = 0;

				int nb_line_tJDBCInput_1 = 0;
				java.sql.Connection conn_tJDBCInput_1 = null;
				conn_tJDBCInput_1 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");
				if (null == conn_tJDBCInput_1) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCInput_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tJDBCInput_1 = dataSources_tJDBCInput_1.get("")
							.getConnection();
					// globalMap.put("conn_tJDBCConnection_1",
					// conn_tJDBCInput_1);
				}

				java.sql.Statement stmt_tJDBCInput_1 = conn_tJDBCInput_1
						.createStatement();

				String dbquery_tJDBCInput_1 = "select max(instance_num) from "
						+ context.DBSchema + ".observation_fact";

				globalMap.put("tJDBCInput_1_QUERY", dbquery_tJDBCInput_1);

				java.sql.ResultSet rs_tJDBCInput_1 = stmt_tJDBCInput_1
						.executeQuery(dbquery_tJDBCInput_1);
				java.sql.ResultSetMetaData rsmd_tJDBCInput_1 = rs_tJDBCInput_1
						.getMetaData();
				int colQtyInRs_tJDBCInput_1 = rsmd_tJDBCInput_1
						.getColumnCount();

				String tmpContent_tJDBCInput_1 = null;
				int column_index_tJDBCInput_1 = 1;
				while (rs_tJDBCInput_1.next()) {
					nb_line_tJDBCInput_1++;

					column_index_tJDBCInput_1 = 1;

					if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
						row36.instance_num = null;
					} else {

						if (rs_tJDBCInput_1
								.getObject(column_index_tJDBCInput_1) != null) {
							row36.instance_num = rs_tJDBCInput_1
									.getBigDecimal(column_index_tJDBCInput_1);
						} else {
							row36.instance_num = null;
						}

						if (rs_tJDBCInput_1.wasNull()) {
							row36.instance_num = null;
						}
					}

					/**
					 * [tJDBCInput_1 begin ] stop
					 */
					/**
					 * [tJDBCInput_1 main ] start
					 */

					currentComponent = "tJDBCInput_1";

					tos_count_tJDBCInput_1++;

					/**
					 * [tJDBCInput_1 main ] stop
					 */

					/**
					 * [tJavaRow_8 main ] start
					 */

					currentComponent = "tJavaRow_8";

					if (row36.instance_num != null)
						context.maxInstance = row36.instance_num;
					else
						context.maxInstance = new BigDecimal(0);
					System.out.println("maxInstance: " + row36.instance_num);
					nb_line_tJavaRow_8++;

					tos_count_tJavaRow_8++;

					/**
					 * [tJavaRow_8 main ] stop
					 */

					/**
					 * [tJDBCInput_1 end ] start
					 */

					currentComponent = "tJDBCInput_1";

				}
				rs_tJDBCInput_1.close();
				stmt_tJDBCInput_1.close();

				globalMap.put("tJDBCInput_1_NB_LINE", nb_line_tJDBCInput_1);

				ok_Hash.put("tJDBCInput_1", true);
				end_Hash.put("tJDBCInput_1", System.currentTimeMillis());

				/**
				 * [tJDBCInput_1 end ] stop
				 */

				/**
				 * [tJavaRow_8 end ] start
				 */

				currentComponent = "tJavaRow_8";

				globalMap.put("tJavaRow_8_NB_LINE", nb_line_tJavaRow_8);

				ok_Hash.put("tJavaRow_8", true);
				end_Hash.put("tJavaRow_8", System.currentTimeMillis());

				/**
				 * [tJavaRow_8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCInput_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final ODM_Extract_PD ODM_Extract_PDClass = new ODM_Extract_PD();

		int exitCode = ODM_Extract_PDClass.runJobInTOS(args);
		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = ODM_Extract_PD.class
					.getClassLoader().getResourceAsStream(
							"tos/odm_extract_pd_0_1/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.source = (String) context.getProperty("source");
			try {
				context.startDate = routines.system.ParserUtils
						.parseTo_Long(context.getProperty("startDate"));
			} catch (NumberFormatException e) {
				context.startDate = null;
			}
			context.subjid = (String) context.getProperty("subjid");
			context.encounterItem = (String) context
					.getProperty("encounterItem");
			try {
				context.subStatus = routines.system.ParserUtils
						.parseTo_Float(context.getProperty("subStatus"));
			} catch (NumberFormatException e) {
				context.subStatus = null;
			}
			context.instanceMap = (Object) context.getProperty("instanceMap");
			try {
				context.maxInstance = routines.system.ParserUtils
						.parseTo_BigDecimal(context.getProperty("maxInstance"));
			} catch (NumberFormatException e) {
				context.maxInstance = null;
			}
			context.DBHost = (String) context.getProperty("DBHost");
			context.DBInstance = (String) context.getProperty("DBInstance");
			context.DBPassword = (java.lang.String) context
					.getProperty("DBPassword");
			context.DBPort = (String) context.getProperty("DBPort");
			context.DBSchema = (String) context.getProperty("DBSchema");
			context.DBUsername = (String) context.getProperty("DBUsername");
			context.DB_StagingI2B2_jdbcurl = (String) context
					.getProperty("DB_StagingI2B2_jdbcurl");
			context.DB_StagingI2B2_sqlclassname = (String) context
					.getProperty("DB_StagingI2B2_sqlclassname");
			context.concept_cd = (String) context.getProperty("concept_cd");
			context.concept_path = (String) context.getProperty("concept_path");
			context.currentFile = (String) context.getProperty("currentFile");
			context.encoding = (String) context.getProperty("encoding");
			context.folderMain = (String) context.getProperty("folderMain");
			context.folderODM = (String) context.getProperty("folderODM");
			context.folderOutput = (String) context.getProperty("folderOutput");
			context.folderTmp = (String) context.getProperty("folderTmp");
			context.i2b2HeadNode = (String) context.getProperty("i2b2HeadNode");
			context.i2b2HeadNodeName = (String) context
					.getProperty("i2b2HeadNodeName");
			try {
				context.importCodelist = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("importCodelist"));
			} catch (NumberFormatException e) {
				context.importCodelist = null;
			}
			try {
				context.includePids = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("includePids"));
			} catch (NumberFormatException e) {
				context.includePids = null;
			}
			context.ItemData = (String) context.getProperty("ItemData");
			context.ItemDataAny = (String) context.getProperty("ItemDataAny");
			context.ItemDataBase64Binary = (String) context
					.getProperty("ItemDataBase64Binary");
			context.ItemDataBase64Float = (String) context
					.getProperty("ItemDataBase64Float");
			context.ItemDataBoolean = (String) context
					.getProperty("ItemDataBoolean");
			context.ItemDataDate = (String) context.getProperty("ItemDataDate");
			context.ItemDataDatetime = (String) context
					.getProperty("ItemDataDatetime");
			context.ItemDataDouble = (String) context
					.getProperty("ItemDataDouble");
			context.ItemDataDurationDatetime = (String) context
					.getProperty("ItemDataDurationDatetime");
			context.ItemDataFloat = (String) context
					.getProperty("ItemDataFloat");
			context.ItemDataHexBinary = (String) context
					.getProperty("ItemDataHexBinary");
			context.ItemDataHexFloat = (String) context
					.getProperty("ItemDataHexFloat");
			context.ItemDataIncompleteDatetime = (String) context
					.getProperty("ItemDataIncompleteDatetime");
			context.ItemDataInteger = (String) context
					.getProperty("ItemDataInteger");
			context.ItemDataIntervalDatetime = (String) context
					.getProperty("ItemDataIntervalDatetime");
			context.ItemDataPartialDate = (String) context
					.getProperty("ItemDataPartialDate");
			context.ItemDataPartialDatetime = (String) context
					.getProperty("ItemDataPartialDatetime");
			context.ItemDataPartialTime = (String) context
					.getProperty("ItemDataPartialTime");
			context.ItemDataString = (String) context
					.getProperty("ItemDataString");
			context.ItemDataTime = (String) context.getProperty("ItemDataTime");
			context.ItemDataURI = (String) context.getProperty("ItemDataURI");
			context.MDPD = (String) context.getProperty("MDPD");
			context.MDPDName = (String) context.getProperty("MDPDName");
			context.xslt = (String) context.getProperty("xslt");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("source")) {
				context.source = (String) parentContextMap.get("source");
			}
			if (parentContextMap.containsKey("startDate")) {
				context.startDate = (Long) parentContextMap.get("startDate");
			}
			if (parentContextMap.containsKey("subjid")) {
				context.subjid = (String) parentContextMap.get("subjid");
			}
			if (parentContextMap.containsKey("encounterItem")) {
				context.encounterItem = (String) parentContextMap
						.get("encounterItem");
			}
			if (parentContextMap.containsKey("subStatus")) {
				context.subStatus = (Float) parentContextMap.get("subStatus");
			}
			if (parentContextMap.containsKey("instanceMap")) {
				context.instanceMap = (Object) parentContextMap
						.get("instanceMap");
			}
			if (parentContextMap.containsKey("maxInstance")) {
				context.maxInstance = (BigDecimal) parentContextMap
						.get("maxInstance");
			}
			if (parentContextMap.containsKey("DBHost")) {
				context.DBHost = (String) parentContextMap.get("DBHost");
			}
			if (parentContextMap.containsKey("DBInstance")) {
				context.DBInstance = (String) parentContextMap
						.get("DBInstance");
			}
			if (parentContextMap.containsKey("DBPassword")) {
				context.DBPassword = (java.lang.String) parentContextMap
						.get("DBPassword");
			}
			if (parentContextMap.containsKey("DBPort")) {
				context.DBPort = (String) parentContextMap.get("DBPort");
			}
			if (parentContextMap.containsKey("DBSchema")) {
				context.DBSchema = (String) parentContextMap.get("DBSchema");
			}
			if (parentContextMap.containsKey("DBUsername")) {
				context.DBUsername = (String) parentContextMap
						.get("DBUsername");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_jdbcurl")) {
				context.DB_StagingI2B2_jdbcurl = (String) parentContextMap
						.get("DB_StagingI2B2_jdbcurl");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_sqlclassname")) {
				context.DB_StagingI2B2_sqlclassname = (String) parentContextMap
						.get("DB_StagingI2B2_sqlclassname");
			}
			if (parentContextMap.containsKey("concept_cd")) {
				context.concept_cd = (String) parentContextMap
						.get("concept_cd");
			}
			if (parentContextMap.containsKey("concept_path")) {
				context.concept_path = (String) parentContextMap
						.get("concept_path");
			}
			if (parentContextMap.containsKey("currentFile")) {
				context.currentFile = (String) parentContextMap
						.get("currentFile");
			}
			if (parentContextMap.containsKey("encoding")) {
				context.encoding = (String) parentContextMap.get("encoding");
			}
			if (parentContextMap.containsKey("folderMain")) {
				context.folderMain = (String) parentContextMap
						.get("folderMain");
			}
			if (parentContextMap.containsKey("folderODM")) {
				context.folderODM = (String) parentContextMap.get("folderODM");
			}
			if (parentContextMap.containsKey("folderOutput")) {
				context.folderOutput = (String) parentContextMap
						.get("folderOutput");
			}
			if (parentContextMap.containsKey("folderTmp")) {
				context.folderTmp = (String) parentContextMap.get("folderTmp");
			}
			if (parentContextMap.containsKey("i2b2HeadNode")) {
				context.i2b2HeadNode = (String) parentContextMap
						.get("i2b2HeadNode");
			}
			if (parentContextMap.containsKey("i2b2HeadNodeName")) {
				context.i2b2HeadNodeName = (String) parentContextMap
						.get("i2b2HeadNodeName");
			}
			if (parentContextMap.containsKey("importCodelist")) {
				context.importCodelist = (Boolean) parentContextMap
						.get("importCodelist");
			}
			if (parentContextMap.containsKey("includePids")) {
				context.includePids = (Boolean) parentContextMap
						.get("includePids");
			}
			if (parentContextMap.containsKey("ItemData")) {
				context.ItemData = (String) parentContextMap.get("ItemData");
			}
			if (parentContextMap.containsKey("ItemDataAny")) {
				context.ItemDataAny = (String) parentContextMap
						.get("ItemDataAny");
			}
			if (parentContextMap.containsKey("ItemDataBase64Binary")) {
				context.ItemDataBase64Binary = (String) parentContextMap
						.get("ItemDataBase64Binary");
			}
			if (parentContextMap.containsKey("ItemDataBase64Float")) {
				context.ItemDataBase64Float = (String) parentContextMap
						.get("ItemDataBase64Float");
			}
			if (parentContextMap.containsKey("ItemDataBoolean")) {
				context.ItemDataBoolean = (String) parentContextMap
						.get("ItemDataBoolean");
			}
			if (parentContextMap.containsKey("ItemDataDate")) {
				context.ItemDataDate = (String) parentContextMap
						.get("ItemDataDate");
			}
			if (parentContextMap.containsKey("ItemDataDatetime")) {
				context.ItemDataDatetime = (String) parentContextMap
						.get("ItemDataDatetime");
			}
			if (parentContextMap.containsKey("ItemDataDouble")) {
				context.ItemDataDouble = (String) parentContextMap
						.get("ItemDataDouble");
			}
			if (parentContextMap.containsKey("ItemDataDurationDatetime")) {
				context.ItemDataDurationDatetime = (String) parentContextMap
						.get("ItemDataDurationDatetime");
			}
			if (parentContextMap.containsKey("ItemDataFloat")) {
				context.ItemDataFloat = (String) parentContextMap
						.get("ItemDataFloat");
			}
			if (parentContextMap.containsKey("ItemDataHexBinary")) {
				context.ItemDataHexBinary = (String) parentContextMap
						.get("ItemDataHexBinary");
			}
			if (parentContextMap.containsKey("ItemDataHexFloat")) {
				context.ItemDataHexFloat = (String) parentContextMap
						.get("ItemDataHexFloat");
			}
			if (parentContextMap.containsKey("ItemDataIncompleteDatetime")) {
				context.ItemDataIncompleteDatetime = (String) parentContextMap
						.get("ItemDataIncompleteDatetime");
			}
			if (parentContextMap.containsKey("ItemDataInteger")) {
				context.ItemDataInteger = (String) parentContextMap
						.get("ItemDataInteger");
			}
			if (parentContextMap.containsKey("ItemDataIntervalDatetime")) {
				context.ItemDataIntervalDatetime = (String) parentContextMap
						.get("ItemDataIntervalDatetime");
			}
			if (parentContextMap.containsKey("ItemDataPartialDate")) {
				context.ItemDataPartialDate = (String) parentContextMap
						.get("ItemDataPartialDate");
			}
			if (parentContextMap.containsKey("ItemDataPartialDatetime")) {
				context.ItemDataPartialDatetime = (String) parentContextMap
						.get("ItemDataPartialDatetime");
			}
			if (parentContextMap.containsKey("ItemDataPartialTime")) {
				context.ItemDataPartialTime = (String) parentContextMap
						.get("ItemDataPartialTime");
			}
			if (parentContextMap.containsKey("ItemDataString")) {
				context.ItemDataString = (String) parentContextMap
						.get("ItemDataString");
			}
			if (parentContextMap.containsKey("ItemDataTime")) {
				context.ItemDataTime = (String) parentContextMap
						.get("ItemDataTime");
			}
			if (parentContextMap.containsKey("ItemDataURI")) {
				context.ItemDataURI = (String) parentContextMap
						.get("ItemDataURI");
			}
			if (parentContextMap.containsKey("MDPD")) {
				context.MDPD = (String) parentContextMap.get("MDPD");
			}
			if (parentContextMap.containsKey("MDPDName")) {
				context.MDPDName = (String) parentContextMap.get("MDPDName");
			}
			if (parentContextMap.containsKey("xslt")) {
				context.xslt = (String) parentContextMap.get("xslt");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tJava_7Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_7) {

			e_tJava_7.printStackTrace();
			globalMap.put("tJava_7_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : ODM_Extract_PD");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 1014940 characters generated by Talend Open Studio for Data Integration on
 * the May 25, 2014 7:32:36 PM CEST
 ************************************************************************************************/
