// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package tos.copy_of_idrt_jdbc_upload_1_0;

import routines.IIT;
import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tLibraryLoad_1
import de.goettingen.i2b2.importtool.idrt.StatusListener.StatusListener;

//the import part of tJava_3
//import java.util.List;

//the import part of tJava_4
//import java.util.List;

//the import part of tJava_5
//import java.util.List;

//the import part of tJava_6
//import java.util.List;

//the import part of tJava_7
//import java.util.List;

//the import part of tJavaRow_2
//import java.util.List;

//the import part of tJava_1
//import java.util.List;

//the import part of tJava_8
//import java.util.List;

//the import part of tJava_9
//import java.util.List;

//the import part of tJava_10
//import java.util.List;

//the import part of tJavaRow_3
//import java.util.List;

//the import part of tJava_11
//import java.util.List;

//the import part of tJava_12
//import java.util.List;

//the import part of tJava_13
//import java.util.List;

//the import part of tJava_14
//import java.util.List;

//the import part of tJavaRow_4
//import java.util.List;

//the import part of tJava_2
//import java.util.List;

//the import part of tJava_17
//import java.util.List;

//the import part of tJava_16
//import java.util.List;

//the import part of tJavaRow_5
//import java.util.List;

//the import part of tJava_15
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: Copy_of_IDRT_JDBC_Upload Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.3.1.r104014
 * @status 
 */
public class Copy_of_IDRT_JDBC_Upload implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (patientDataFolder != null) {

				this.setProperty("patientDataFolder",
						patientDataFolder.toString());

			}

			if (counter != null) {

				this.setProperty("counter", counter.toString());

			}

			if (DB_StagingI2B2_sqlclassname != null) {

				this.setProperty("DB_StagingI2B2_sqlclassname",
						DB_StagingI2B2_sqlclassname.toString());

			}

			if (currentTable != null) {

				this.setProperty("currentTable", currentTable.toString());

			}

			if (fileName != null) {

				this.setProperty("fileName", fileName.toString());

			}

			if (coding != null) {

				this.setProperty("coding", coding.toString());

			}

			if (truncateProject != null) {

				this.setProperty("truncateProject", truncateProject.toString());

			}

			if (DB_StagingI2B2_DatabaseType != null) {

				this.setProperty("DB_StagingI2B2_DatabaseType",
						DB_StagingI2B2_DatabaseType.toString());

			}

			if (DB_StagingI2B2_DriverClass != null) {

				this.setProperty("DB_StagingI2B2_DriverClass",
						DB_StagingI2B2_DriverClass.toString());

			}

			if (DB_StagingI2B2_Host != null) {

				this.setProperty("DB_StagingI2B2_Host",
						DB_StagingI2B2_Host.toString());

			}

			if (DB_StagingI2B2_Instance != null) {

				this.setProperty("DB_StagingI2B2_Instance",
						DB_StagingI2B2_Instance.toString());

			}

			if (DB_StagingI2B2_jdbcurl != null) {

				this.setProperty("DB_StagingI2B2_jdbcurl",
						DB_StagingI2B2_jdbcurl.toString());

			}

			if (DB_StagingI2B2_Password != null) {

				this.setProperty("DB_StagingI2B2_Password",
						DB_StagingI2B2_Password.toString());

			}

			if (DB_StagingI2B2_Port != null) {

				this.setProperty("DB_StagingI2B2_Port",
						DB_StagingI2B2_Port.toString());

			}

			if (DB_StagingI2B2_Schema != null) {

				this.setProperty("DB_StagingI2B2_Schema",
						DB_StagingI2B2_Schema.toString());

			}

			if (DB_StagingI2B2_Username != null) {

				this.setProperty("DB_StagingI2B2_Username",
						DB_StagingI2B2_Username.toString());

			}

			if (concept_cd != null) {

				this.setProperty("concept_cd", concept_cd.toString());

			}

			if (concept_path != null) {

				this.setProperty("concept_path", concept_path.toString());

			}

			if (currentFile != null) {

				this.setProperty("currentFile", currentFile.toString());

			}

			if (folderMain != null) {

				this.setProperty("folderMain", folderMain.toString());

			}

			if (folderOutput != null) {

				this.setProperty("folderOutput", folderOutput.toString());

			}

			if (folderTmp != null) {

				this.setProperty("folderTmp", folderTmp.toString());

			}

			if (i2b2HeadNode != null) {

				this.setProperty("i2b2HeadNode", i2b2HeadNode.toString());

			}

			if (i2b2HeadNodeName != null) {

				this.setProperty("i2b2HeadNodeName",
						i2b2HeadNodeName.toString());

			}

			if (includePids != null) {

				this.setProperty("includePids", includePids.toString());

			}

			if (ItemDataAny != null) {

				this.setProperty("ItemDataAny", ItemDataAny.toString());

			}

			if (ItemDataBase64Binary != null) {

				this.setProperty("ItemDataBase64Binary",
						ItemDataBase64Binary.toString());

			}

			if (ItemDataBase64Float != null) {

				this.setProperty("ItemDataBase64Float",
						ItemDataBase64Float.toString());

			}

			if (ItemDataBoolean != null) {

				this.setProperty("ItemDataBoolean", ItemDataBoolean.toString());

			}

			if (ItemDataDate != null) {

				this.setProperty("ItemDataDate", ItemDataDate.toString());

			}

			if (ItemDataDatetime != null) {

				this.setProperty("ItemDataDatetime",
						ItemDataDatetime.toString());

			}

			if (ItemDataDouble != null) {

				this.setProperty("ItemDataDouble", ItemDataDouble.toString());

			}

			if (ItemDataDurationDatetime != null) {

				this.setProperty("ItemDataDurationDatetime",
						ItemDataDurationDatetime.toString());

			}

			if (ItemDataFloat != null) {

				this.setProperty("ItemDataFloat", ItemDataFloat.toString());

			}

			if (ItemDataHexBinary != null) {

				this.setProperty("ItemDataHexBinary",
						ItemDataHexBinary.toString());

			}

			if (ItemDataHexFloat != null) {

				this.setProperty("ItemDataHexFloat",
						ItemDataHexFloat.toString());

			}

			if (ItemDataIncompleteDatetime != null) {

				this.setProperty("ItemDataIncompleteDatetime",
						ItemDataIncompleteDatetime.toString());

			}

			if (ItemDataInteger != null) {

				this.setProperty("ItemDataInteger", ItemDataInteger.toString());

			}

			if (ItemDataIntervalDatetime != null) {

				this.setProperty("ItemDataIntervalDatetime",
						ItemDataIntervalDatetime.toString());

			}

			if (ItemDataPartialDate != null) {

				this.setProperty("ItemDataPartialDate",
						ItemDataPartialDate.toString());

			}

			if (ItemDataPartialDatetime != null) {

				this.setProperty("ItemDataPartialDatetime",
						ItemDataPartialDatetime.toString());

			}

			if (ItemDataPartialTime != null) {

				this.setProperty("ItemDataPartialTime",
						ItemDataPartialTime.toString());

			}

			if (ItemDataString != null) {

				this.setProperty("ItemDataString", ItemDataString.toString());

			}

			if (ItemDataTime != null) {

				this.setProperty("ItemDataTime", ItemDataTime.toString());

			}

			if (ItemDataURI != null) {

				this.setProperty("ItemDataURI", ItemDataURI.toString());

			}

			if (MDPD != null) {

				this.setProperty("MDPD", MDPD.toString());

			}

			if (MDPDName != null) {

				this.setProperty("MDPDName", MDPDName.toString());

			}

		}

		public String patientDataFolder;

		public String getPatientDataFolder() {
			return this.patientDataFolder;
		}

		public Integer counter;

		public Integer getCounter() {
			return this.counter;
		}

		public String DB_StagingI2B2_sqlclassname;

		public String getDB_StagingI2B2_sqlclassname() {
			return this.DB_StagingI2B2_sqlclassname;
		}

		public String currentTable;

		public String getCurrentTable() {
			return this.currentTable;
		}

		public String fileName;

		public String getFileName() {
			return this.fileName;
		}

		public String coding;

		public String getCoding() {
			return this.coding;
		}

		public Boolean truncateProject;

		public Boolean getTruncateProject() {
			return this.truncateProject;
		}

		public String DB_StagingI2B2_DatabaseType;

		public String getDB_StagingI2B2_DatabaseType() {
			return this.DB_StagingI2B2_DatabaseType;
		}

		public String DB_StagingI2B2_DriverClass;

		public String getDB_StagingI2B2_DriverClass() {
			return this.DB_StagingI2B2_DriverClass;
		}

		public String DB_StagingI2B2_Host;

		public String getDB_StagingI2B2_Host() {
			return this.DB_StagingI2B2_Host;
		}

		public String DB_StagingI2B2_Instance;

		public String getDB_StagingI2B2_Instance() {
			return this.DB_StagingI2B2_Instance;
		}

		public String DB_StagingI2B2_jdbcurl;

		public String getDB_StagingI2B2_jdbcurl() {
			return this.DB_StagingI2B2_jdbcurl;
		}

		public java.lang.String DB_StagingI2B2_Password;

		public java.lang.String getDB_StagingI2B2_Password() {
			return this.DB_StagingI2B2_Password;
		}

		public String DB_StagingI2B2_Port;

		public String getDB_StagingI2B2_Port() {
			return this.DB_StagingI2B2_Port;
		}

		public String DB_StagingI2B2_Schema;

		public String getDB_StagingI2B2_Schema() {
			return this.DB_StagingI2B2_Schema;
		}

		public String DB_StagingI2B2_Username;

		public String getDB_StagingI2B2_Username() {
			return this.DB_StagingI2B2_Username;
		}

		public String concept_cd;

		public String getConcept_cd() {
			return this.concept_cd;
		}

		public String concept_path;

		public String getConcept_path() {
			return this.concept_path;
		}

		public String currentFile;

		public String getCurrentFile() {
			return this.currentFile;
		}

		public String folderMain;

		public String getFolderMain() {
			return this.folderMain;
		}

		public String folderOutput;

		public String getFolderOutput() {
			return this.folderOutput;
		}

		public String folderTmp;

		public String getFolderTmp() {
			return this.folderTmp;
		}

		public String i2b2HeadNode;

		public String getI2b2HeadNode() {
			return this.i2b2HeadNode;
		}

		public String i2b2HeadNodeName;

		public String getI2b2HeadNodeName() {
			return this.i2b2HeadNodeName;
		}

		public Boolean includePids;

		public Boolean getIncludePids() {
			return this.includePids;
		}

		public String ItemDataAny;

		public String getItemDataAny() {
			return this.ItemDataAny;
		}

		public String ItemDataBase64Binary;

		public String getItemDataBase64Binary() {
			return this.ItemDataBase64Binary;
		}

		public String ItemDataBase64Float;

		public String getItemDataBase64Float() {
			return this.ItemDataBase64Float;
		}

		public String ItemDataBoolean;

		public String getItemDataBoolean() {
			return this.ItemDataBoolean;
		}

		public String ItemDataDate;

		public String getItemDataDate() {
			return this.ItemDataDate;
		}

		public String ItemDataDatetime;

		public String getItemDataDatetime() {
			return this.ItemDataDatetime;
		}

		public String ItemDataDouble;

		public String getItemDataDouble() {
			return this.ItemDataDouble;
		}

		public String ItemDataDurationDatetime;

		public String getItemDataDurationDatetime() {
			return this.ItemDataDurationDatetime;
		}

		public String ItemDataFloat;

		public String getItemDataFloat() {
			return this.ItemDataFloat;
		}

		public String ItemDataHexBinary;

		public String getItemDataHexBinary() {
			return this.ItemDataHexBinary;
		}

		public String ItemDataHexFloat;

		public String getItemDataHexFloat() {
			return this.ItemDataHexFloat;
		}

		public String ItemDataIncompleteDatetime;

		public String getItemDataIncompleteDatetime() {
			return this.ItemDataIncompleteDatetime;
		}

		public String ItemDataInteger;

		public String getItemDataInteger() {
			return this.ItemDataInteger;
		}

		public String ItemDataIntervalDatetime;

		public String getItemDataIntervalDatetime() {
			return this.ItemDataIntervalDatetime;
		}

		public String ItemDataPartialDate;

		public String getItemDataPartialDate() {
			return this.ItemDataPartialDate;
		}

		public String ItemDataPartialDatetime;

		public String getItemDataPartialDatetime() {
			return this.ItemDataPartialDatetime;
		}

		public String ItemDataPartialTime;

		public String getItemDataPartialTime() {
			return this.ItemDataPartialTime;
		}

		public String ItemDataString;

		public String getItemDataString() {
			return this.ItemDataString;
		}

		public String ItemDataTime;

		public String getItemDataTime() {
			return this.ItemDataTime;
		}

		public String ItemDataURI;

		public String getItemDataURI() {
			return this.ItemDataURI;
		}

		public String MDPD;

		public String getMDPD() {
			return this.MDPD;
		}

		public String MDPDName;

		public String getMDPDName() {
			return this.MDPDName;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "1.0";
	private final String jobName = "Copy_of_IDRT_JDBC_Upload";
	private final String projectName = "TOS";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Copy_of_IDRT_JDBC_Upload.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Copy_of_IDRT_JDBC_Upload.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tLibraryLoad_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

		status = "failure";

		tLibraryLoad_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_3", System.currentTimeMillis());

		status = "failure";

		tJava_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCConnection_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCConnection_1", System.currentTimeMillis());

		status = "failure";

		tJDBCConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_4", System.currentTimeMillis());

		status = "failure";

		tJava_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tForeach_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tForeach_2", System.currentTimeMillis());

		status = "failure";

		tForeach_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_5", System.currentTimeMillis());

		status = "failure";

		tForeach_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCRow_2", System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_6Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tJDBCRow_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_6", System.currentTimeMillis());

		status = "failure";

		tJava_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_7", System.currentTimeMillis());

		status = "failure";

		tJava_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_8", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJDBCOutput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_1", System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_1", System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_8", System.currentTimeMillis());

		status = "failure";

		tJava_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_10", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_6", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJDBCOutput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_2", System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_9", System.currentTimeMillis());

		status = "failure";

		tJava_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_12", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_12_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_12_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJDBCOutput_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_3", System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_12_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_10", System.currentTimeMillis());

		status = "failure";

		tJava_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJDBCOutput_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_4", System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_11", System.currentTimeMillis());

		status = "failure";

		tJava_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJDBCOutput_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_5", System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJDBCOutput_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_9", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_12", System.currentTimeMillis());

		status = "failure";

		tJava_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJDBCOutput_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_6", System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_13", System.currentTimeMillis());

		status = "failure";

		tJava_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_14", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_14_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_14_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJDBCOutput_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_7", System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_14_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_14", System.currentTimeMillis());

		status = "failure";

		tJava_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_16", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJDBCOutput_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_8", System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tForeach_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tForeach_1", System.currentTimeMillis());

		status = "failure";

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_2", System.currentTimeMillis());

		status = "failure";

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCRow_1", System.currentTimeMillis());

		status = "failure";

		tJDBCRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCRow_3", System.currentTimeMillis());

		status = "failure";

		tJDBCRow_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_17", System.currentTimeMillis());

		status = "failure";

		tJava_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_15", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_15_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_15_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_9", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_15_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJDBCOutput_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_13", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_15_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_16", System.currentTimeMillis());

		status = "failure";

		tJava_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRowGenerator_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRowGenerator_1", System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_3", System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_12", System.currentTimeMillis());

		try {

			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_1", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_5", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_5", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_14", System.currentTimeMillis());

		status = "failure";

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_15", System.currentTimeMillis());

		status = "failure";

		tJava_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLibraryLoad_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCConnection_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tForeach_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCRow_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_6_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_7_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_9_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_8_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_10_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_9_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_12_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_10_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_6_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_11_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_7_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_12_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_8_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_13_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_14_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_14_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_16_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tForeach_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCRow_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCRow_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_17_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_15_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_16_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRowGenerator_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_15_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLibraryLoad_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLibraryLoad_1 begin ] start
				 */

				ok_Hash.put("tLibraryLoad_1", false);
				start_Hash.put("tLibraryLoad_1", System.currentTimeMillis());
				currentComponent = "tLibraryLoad_1";

				int tos_count_tLibraryLoad_1 = 0;

				/**
				 * [tLibraryLoad_1 begin ] stop
				 */
				/**
				 * [tLibraryLoad_1 main ] start
				 */

				currentComponent = "tLibraryLoad_1";

				tos_count_tLibraryLoad_1++;

				/**
				 * [tLibraryLoad_1 main ] stop
				 */
				/**
				 * [tLibraryLoad_1 end ] start
				 */

				currentComponent = "tLibraryLoad_1";

				ok_Hash.put("tLibraryLoad_1", true);
				end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				/**
				 * [tLibraryLoad_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tLibraryLoad_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_3Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_3 begin ] start
				 */

				ok_Hash.put("tJava_3", false);
				start_Hash.put("tJava_3", System.currentTimeMillis());
				currentComponent = "tJava_3";

				int tos_count_tJava_3 = 0;

				// System.out.println("context.DB_StagingI2B2_jdbcurl " +
				// context.DB_StagingI2B2_jdbcurl);
				// System.out.println("context.DB_StagingI2B2_DriverClass " +
				// context.DB_StagingI2B2_DriverClass);
				// System.out.println("context.DB_StagingI2B2_Username " +
				// context.DB_StagingI2B2_Username);
				// System.out.println("context.DB_StagingI2B2_Password " +
				// context.DB_StagingI2B2_Password);

				/**
				 * [tJava_3 begin ] stop
				 */
				/**
				 * [tJava_3 main ] start
				 */

				currentComponent = "tJava_3";

				tos_count_tJava_3++;

				/**
				 * [tJava_3 main ] stop
				 */
				/**
				 * [tJava_3 end ] start
				 */

				currentComponent = "tJava_3";

				ok_Hash.put("tJava_3", true);
				end_Hash.put("tJava_3", System.currentTimeMillis());

				/**
				 * [tJava_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_3:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCConnection_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}

	public void tJDBCConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCConnection_1 begin ] start
				 */

				ok_Hash.put("tJDBCConnection_1", false);
				start_Hash.put("tJDBCConnection_1", System.currentTimeMillis());
				currentComponent = "tJDBCConnection_1";

				int tos_count_tJDBCConnection_1 = 0;

				String url_tJDBCConnection_1 = context.DB_StagingI2B2_jdbcurl;

				String userName_tJDBCConnection_1 = context.DB_StagingI2B2_Username;
				String password_tJDBCConnection_1 = context.DB_StagingI2B2_Password;

				java.sql.Connection conn_tJDBCConnection_1 = null;

				if ((null == globalMap.get(KEY_DB_DATASOURCES))
						|| "".equals("")) {

					java.lang.Class.forName(context.DB_StagingI2B2_DriverClass);

					conn_tJDBCConnection_1 = java.sql.DriverManager
							.getConnection(url_tJDBCConnection_1,
									userName_tJDBCConnection_1,
									password_tJDBCConnection_1);
					globalMap.put("conn_tJDBCConnection_1",
							conn_tJDBCConnection_1);
				}
				if (null != conn_tJDBCConnection_1) {

					conn_tJDBCConnection_1.setAutoCommit(true);
				}

				globalMap.put("conn_tJDBCConnection_1", conn_tJDBCConnection_1);
				globalMap.put("url_tJDBCConnection_1", url_tJDBCConnection_1);
				// globalMap.put("user_tJDBCConnection_1",
				// userName_tJDBCConnection_1);
				// globalMap.put("pass_tJDBCConnection_1",
				// password_tJDBCConnection_1);

				/**
				 * [tJDBCConnection_1 begin ] stop
				 */
				/**
				 * [tJDBCConnection_1 main ] start
				 */

				currentComponent = "tJDBCConnection_1";

				tos_count_tJDBCConnection_1++;

				/**
				 * [tJDBCConnection_1 main ] stop
				 */
				/**
				 * [tJDBCConnection_1 end ] start
				 */

				currentComponent = "tJDBCConnection_1";

				ok_Hash.put("tJDBCConnection_1", true);
				end_Hash.put("tJDBCConnection_1", System.currentTimeMillis());

				/**
				 * [tJDBCConnection_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJDBCConnection_1:OnSubjobOk1",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tJava_4Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJDBCConnection_1:OnSubjobOk2",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tJava_15Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_4 begin ] start
				 */

				ok_Hash.put("tJava_4", false);
				start_Hash.put("tJava_4", System.currentTimeMillis());
				currentComponent = "tJava_4";

				int tos_count_tJava_4 = 0;

				/**
				 * [tJava_4 begin ] stop
				 */
				/**
				 * [tJava_4 main ] start
				 */

				currentComponent = "tJava_4";

				tos_count_tJava_4++;

				/**
				 * [tJava_4 main ] stop
				 */
				/**
				 * [tJava_4 end ] start
				 */

				currentComponent = "tJava_4";

				ok_Hash.put("tJava_4", true);
				end_Hash.put("tJava_4", System.currentTimeMillis());

				if (!context.DB_StagingI2B2_DatabaseType
						.equalsIgnoreCase("postgres")) {

					tForeach_2Process(globalMap);
				}

				if (context.DB_StagingI2B2_DatabaseType
						.equalsIgnoreCase("postgres")) {

					tForeach_1Process(globalMap);
				}

				/**
				 * [tJava_4 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_4:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_7Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}

	public void tForeach_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tForeach_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tForeach_2 begin ] start
				 */

				int NB_ITERATE_tJava_5 = 0; // for statistics

				ok_Hash.put("tForeach_2", false);
				start_Hash.put("tForeach_2", System.currentTimeMillis());
				currentComponent = "tForeach_2";

				int tos_count_tForeach_2 = 0;

				Object[] values_tForeach_2 = new Object[] {
						"drop index  " + context.DB_StagingI2B2_Schema
								+ ".FACT_CNPT_PAT_ENCT_IDX",
						"drop index  " + context.DB_StagingI2B2_Schema
								+ ".FACT_PATCON_DATE_PRVD_IDX",
						"drop index  " + context.DB_StagingI2B2_Schema
								+ ".FACT_NOLOB",
						"drop index  " + context.DB_StagingI2B2_Schema
								+ ".OF_CTX_BLOB",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".OBSERVATION_FACT DISABLE constraint OBSERVATION_FACT_PK",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".I2B2 MODIFY  C_FULLNAME  VARCHAR2(3500 BYTE)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".I2B2 MODIFY  C_BASECODE  VARCHAR2(3500 BYTE)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".I2B2 MODIFY  C_DIMCODE  VARCHAR2(3500 BYTE)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".CONCEPT_DIMENSION MODIFY  CONCEPT_PATH  VARCHAR2(3500 BYTE)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".CONCEPT_DIMENSION MODIFY  CONCEPT_CD  VARCHAR2(3500 BYTE)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".MODIFIER_DIMENSION MODIFY  MODIFIER_PATH  VARCHAR2(3500 BYTE)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".MODIFIER_DIMENSION MODIFY  MODIFIER_CD  VARCHAR2(3500 BYTE)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".OBSERVATION_FACT MODIFY  MODIFIER_CD  VARCHAR2(2800 BYTE)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".OBSERVATION_FACT MODIFY  CONCEPT_CD  VARCHAR2(2800 BYTE)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".patient_mapping MODIFY  PATIENT_NUM  NUMBER(38)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".patient_dimension MODIFY  PATIENT_NUM  NUMBER(38)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".observation_fact MODIFY  PATIENT_NUM  NUMBER(38)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".qt_patient_enc_collection MODIFY  PATIENT_NUM  NUMBER(38)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".qt_patient_set_collection MODIFY  PATIENT_NUM  NUMBER(38)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".qt_patient_set_collection MODIFY  PATIENT_NUM NUMBER(38)",
						"ALTER TABLE " + context.DB_StagingI2B2_Schema
								+ ".DX MODIFY ENCOUNTER_NUM  NUMBER(38)",
						"ALTER TABLE " + context.DB_StagingI2B2_Schema
								+ ".DX MODIFY PATIENT_NUM  NUMBER(38)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".QUERY_GLOBAL_TEMP MODIFY CONCEPT_CD VARCHAR2(3500 BYTE)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".QUERY_GLOBAL_TEMP MODIFY  PATIENT_NUM  NUMBER(38)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".QUERY_GLOBAL_TEMP MODIFY ENCOUNTER_NUM  NUMBER(38)",
						"ALTER TABLE "
								+ context.DB_StagingI2B2_Schema
								+ ".OBSERVATION_FACT ENABLE constraint OBSERVATION_FACT_PK",
						"CREATE INDEX "
								+ context.DB_StagingI2B2_Schema
								+ ".FACT_CNPT_PAT_ENCT_IDX ON "
								+ context.DB_StagingI2B2_Schema
								+ ".OBSERVATION_FACT (CONCEPT_CD, INSTANCE_NUM, PATIENT_NUM, ENCOUNTER_NUM)PCTFREE 10 INITRANS 2 MAXTRANS 255 STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645 PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT) TABLESPACE USERS",
						"CREATE INDEX "
								+ context.DB_StagingI2B2_Schema
								+ ".FACT_NOLOB ON "
								+ context.DB_StagingI2B2_Schema
								+ ".OBSERVATION_FACT (PATIENT_NUM, START_DATE, CONCEPT_CD, ENCOUNTER_NUM, INSTANCE_NUM, NVAL_NUM, TVAL_CHAR, VALTYPE_CD, MODIFIER_CD, VALUEFLAG_CD, PROVIDER_ID, QUANTITY_NUM, UNITS_CD, END_DATE, LOCATION_CD, CONFIDENCE_NUM, UPDATE_DATE, DOWNLOAD_DATE, IMPORT_DATE, SOURCESYSTEM_CD, UPLOAD_ID) PCTFREE 10 INITRANS 2 MAXTRANS 255 STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT) TABLESPACE USERS",
						"CREATE INDEX "
								+ context.DB_StagingI2B2_Schema
								+ ".FACT_PATCON_DATE_PRVD_IDX ON "
								+ context.DB_StagingI2B2_Schema
								+ ".OBSERVATION_FACT (PATIENT_NUM, CONCEPT_CD, START_DATE, END_DATE, ENCOUNTER_NUM, INSTANCE_NUM, PROVIDER_ID, NVAL_NUM, VALTYPE_CD) PCTFREE 10 INITRANS 2 MAXTRANS 255 STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645 PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT) TABLESPACE USERS",
						"CREATE INDEX "
								+ context.DB_StagingI2B2_Schema
								+ ".OF_CTX_BLOB ON "
								+ context.DB_StagingI2B2_Schema
								+ ".OBSERVATION_FACT (OBSERVATION_BLOB) INDEXTYPE IS CTXSYS.CONTEXT PARAMETERS ('SYNC (on commit)')", };

				for (Object tmp_tForeach_2 : values_tForeach_2) {
					globalMap.put("tForeach_2_CURRENT_VALUE", tmp_tForeach_2);

					/**
					 * [tForeach_2 begin ] stop
					 */
					/**
					 * [tForeach_2 main ] start
					 */

					currentComponent = "tForeach_2";

					tos_count_tForeach_2++;

					/**
					 * [tForeach_2 main ] stop
					 */
					NB_ITERATE_tJava_5++;
					iterateLoop++;

					/**
					 * [tJava_5 begin ] start
					 */

					ok_Hash.put("tJava_5", false);
					start_Hash.put("tJava_5", System.currentTimeMillis());
					currentComponent = "tJava_5";

					int tos_count_tJava_5 = 0;

					System.out.println(((String) globalMap
							.get("tForeach_2_CURRENT_VALUE")));

					/**
					 * [tJava_5 begin ] stop
					 */
					/**
					 * [tJava_5 main ] start
					 */

					currentComponent = "tJava_5";

					tos_count_tJava_5++;

					/**
					 * [tJava_5 main ] stop
					 */
					/**
					 * [tJava_5 end ] start
					 */

					currentComponent = "tJava_5";

					ok_Hash.put("tJava_5", true);
					end_Hash.put("tJava_5", System.currentTimeMillis());

					tJDBCRow_2Process(globalMap);

					/**
					 * [tJava_5 end ] stop
					 */

					/**
					 * [tForeach_2 end ] start
					 */

					currentComponent = "tForeach_2";

				}

				ok_Hash.put("tForeach_2", true);
				end_Hash.put("tForeach_2", System.currentTimeMillis());

				/**
				 * [tForeach_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tForeach_2_SUBPROCESS_STATE", 1);
	}

	public void tJDBCRow_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCRow_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCRow_2 begin ] start
				 */

				ok_Hash.put("tJDBCRow_2", false);
				start_Hash.put("tJDBCRow_2", System.currentTimeMillis());
				currentComponent = "tJDBCRow_2";

				int tos_count_tJDBCRow_2 = 0;

				java.sql.Connection connection_tJDBCRow_2 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");
				if (null == connection_tJDBCRow_2) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCRow_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					connection_tJDBCRow_2 = dataSources_tJDBCRow_2.get("")
							.getConnection();
				}

				java.sql.Statement stmt_tJDBCRow_2 = connection_tJDBCRow_2
						.createStatement();
				String query_tJDBCRow_2 = "";
				boolean whetherReject_tJDBCRow_2 = false;

				/**
				 * [tJDBCRow_2 begin ] stop
				 */
				/**
				 * [tJDBCRow_2 main ] start
				 */

				currentComponent = "tJDBCRow_2";

				query_tJDBCRow_2 = ((String) globalMap
						.get("tForeach_2_CURRENT_VALUE"));
				whetherReject_tJDBCRow_2 = false;
				globalMap.put("tJDBCRow_2_QUERY", query_tJDBCRow_2);
				try {
					stmt_tJDBCRow_2.execute(query_tJDBCRow_2);

				} catch (java.lang.Exception e) {
					whetherReject_tJDBCRow_2 = true;
					System.err.print(e.getMessage());
				}

				if (!whetherReject_tJDBCRow_2) {
				}

				tos_count_tJDBCRow_2++;

				/**
				 * [tJDBCRow_2 main ] stop
				 */
				/**
				 * [tJDBCRow_2 end ] start
				 */

				currentComponent = "tJDBCRow_2";

				stmt_tJDBCRow_2.close();

				ok_Hash.put("tJDBCRow_2", true);
				end_Hash.put("tJDBCRow_2", System.currentTimeMillis());

				/**
				 * [tJDBCRow_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCRow_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_6 begin ] start
				 */

				ok_Hash.put("tJava_6", false);
				start_Hash.put("tJava_6", System.currentTimeMillis());
				currentComponent = "tJava_6";

				int tos_count_tJava_6 = 0;

				System.out.println("ERROR: "
						+ ((String) globalMap.get("tOracleRow_1_QUERY")));

				/**
				 * [tJava_6 begin ] stop
				 */
				/**
				 * [tJava_6 main ] start
				 */

				currentComponent = "tJava_6";

				tos_count_tJava_6++;

				/**
				 * [tJava_6 main ] stop
				 */
				/**
				 * [tJava_6 end ] start
				 */

				currentComponent = "tJava_6";

				ok_Hash.put("tJava_6", true);
				end_Hash.put("tJava_6", System.currentTimeMillis());

				/**
				 * [tJava_6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_6_SUBPROCESS_STATE", 1);
	}

	public void tJava_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_7 begin ] start
				 */

				ok_Hash.put("tJava_7", false);
				start_Hash.put("tJava_7", System.currentTimeMillis());
				currentComponent = "tJava_7";

				int tos_count_tJava_7 = 0;

				context.currentTable = context.DB_StagingI2B2_DatabaseType
						.equalsIgnoreCase("postgres") ? "i2b2demodata.observation_fact"
						: (context.DB_StagingI2B2_Schema + ".observation_fact");
				System.out.println("Starting Import: Observation Fact; table: "
						+ context.currentTable);
				StatusListener.setSubStatus(0.0f, (int) (float) (0.0f) + "%");

				/**
				 * [tJava_7 begin ] stop
				 */
				/**
				 * [tJava_7 main ] start
				 */

				currentComponent = "tJava_7";

				tos_count_tJava_7++;

				/**
				 * [tJava_7 main ] stop
				 */
				/**
				 * [tJava_7 end ] start
				 */

				currentComponent = "tJava_7";

				ok_Hash.put("tJava_7", true);
				end_Hash.put("tJava_7", System.currentTimeMillis());

				/**
				 * [tJava_7 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_7:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_9Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_7_SUBPROCESS_STATE", 1);
	}

	public static class row25Struct implements
			routines.system.IPersistableRow<row25Struct> {
		final static byte[] commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public Float QUANTITY_NUM;

		public Float getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public Float CONFIDENCE_NUM;

		public Float getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length);
				strReturn = new String(
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readDate(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.QUANTITY_NUM = null;
					} else {
						this.QUANTITY_NUM = dis.readFloat();
					}

					this.UNITS_CD = readString(dis);

					this.END_DATE = readDate(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CONFIDENCE_NUM = null;
					} else {
						this.CONFIDENCE_NUM = dis.readFloat();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// Float

				if (this.QUANTITY_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.QUANTITY_NUM);
				}

				// String

				writeString(this.UNITS_CD, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// Float

				if (this.CONFIDENCE_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CONFIDENCE_NUM);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + String.valueOf(QUANTITY_NUM));
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + String.valueOf(CONFIDENCE_NUM));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row23Struct implements
			routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public Float QUANTITY_NUM;

		public Float getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public Float CONFIDENCE_NUM;

		public Float getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length);
				strReturn = new String(
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readDate(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.QUANTITY_NUM = null;
					} else {
						this.QUANTITY_NUM = dis.readFloat();
					}

					this.UNITS_CD = readString(dis);

					this.END_DATE = readDate(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CONFIDENCE_NUM = null;
					} else {
						this.CONFIDENCE_NUM = dis.readFloat();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// Float

				if (this.QUANTITY_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.QUANTITY_NUM);
				}

				// String

				writeString(this.UNITS_CD, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// Float

				if (this.CONFIDENCE_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CONFIDENCE_NUM);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + String.valueOf(QUANTITY_NUM));
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + String.valueOf(CONFIDENCE_NUM));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String PROVIDER_ID;

		public String getPROVIDER_ID() {
			return this.PROVIDER_ID;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String INSTANCE_NUM;

		public String getINSTANCE_NUM() {
			return this.INSTANCE_NUM;
		}

		public String VALTYPE_CD;

		public String getVALTYPE_CD() {
			return this.VALTYPE_CD;
		}

		public String TVAL_CHAR;

		public String getTVAL_CHAR() {
			return this.TVAL_CHAR;
		}

		public Float NVAL_NUM;

		public Float getNVAL_NUM() {
			return this.NVAL_NUM;
		}

		public String VALUEFLAG_CD;

		public String getVALUEFLAG_CD() {
			return this.VALUEFLAG_CD;
		}

		public Float QUANTITY_NUM;

		public Float getQUANTITY_NUM() {
			return this.QUANTITY_NUM;
		}

		public String UNITS_CD;

		public String getUNITS_CD() {
			return this.UNITS_CD;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String OBSERVATION_BLOB;

		public String getOBSERVATION_BLOB() {
			return this.OBSERVATION_BLOB;
		}

		public Float CONFIDENCE_NUM;

		public Float getCONFIDENCE_NUM() {
			return this.CONFIDENCE_NUM;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length);
				strReturn = new String(
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.CONCEPT_CD = readString(dis);

					this.PROVIDER_ID = readString(dis);

					this.START_DATE = readDate(dis);

					this.MODIFIER_CD = readString(dis);

					this.INSTANCE_NUM = readString(dis);

					this.VALTYPE_CD = readString(dis);

					this.TVAL_CHAR = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NVAL_NUM = null;
					} else {
						this.NVAL_NUM = dis.readFloat();
					}

					this.VALUEFLAG_CD = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.QUANTITY_NUM = null;
					} else {
						this.QUANTITY_NUM = dis.readFloat();
					}

					this.UNITS_CD = readString(dis);

					this.END_DATE = readDate(dis);

					this.LOCATION_CD = readString(dis);

					this.OBSERVATION_BLOB = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CONFIDENCE_NUM = null;
					} else {
						this.CONFIDENCE_NUM = dis.readFloat();
					}

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.PROVIDER_ID, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.INSTANCE_NUM, dos);

				// String

				writeString(this.VALTYPE_CD, dos);

				// String

				writeString(this.TVAL_CHAR, dos);

				// Float

				if (this.NVAL_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.NVAL_NUM);
				}

				// String

				writeString(this.VALUEFLAG_CD, dos);

				// Float

				if (this.QUANTITY_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.QUANTITY_NUM);
				}

				// String

				writeString(this.UNITS_CD, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.OBSERVATION_BLOB, dos);

				// Float

				if (this.CONFIDENCE_NUM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CONFIDENCE_NUM);
				}

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",PROVIDER_ID=" + PROVIDER_ID);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",INSTANCE_NUM=" + INSTANCE_NUM);
			sb.append(",VALTYPE_CD=" + VALTYPE_CD);
			sb.append(",TVAL_CHAR=" + TVAL_CHAR);
			sb.append(",NVAL_NUM=" + String.valueOf(NVAL_NUM));
			sb.append(",VALUEFLAG_CD=" + VALUEFLAG_CD);
			sb.append(",QUANTITY_NUM=" + String.valueOf(QUANTITY_NUM));
			sb.append(",UNITS_CD=" + UNITS_CD);
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",OBSERVATION_BLOB=" + OBSERVATION_BLOB);
			sb.append(",CONFIDENCE_NUM=" + String.valueOf(CONFIDENCE_NUM));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_9Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row10Struct row10 = new row10Struct();
				row23Struct row23 = new row23Struct();
				row25Struct row25 = new row25Struct();

				/**
				 * [tJDBCOutput_1 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_1", false);
				start_Hash.put("tJDBCOutput_1", System.currentTimeMillis());
				currentComponent = "tJDBCOutput_1";

				int tos_count_tJDBCOutput_1 = 0;

				int updateKeyCount_tJDBCOutput_1 = 6;
				if (updateKeyCount_tJDBCOutput_1 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tJDBCOutput_1 = 0;
				int nb_line_update_tJDBCOutput_1 = 0;
				int nb_line_inserted_tJDBCOutput_1 = 0;
				int nb_line_deleted_tJDBCOutput_1 = 0;
				int nb_line_rejected_tJDBCOutput_1 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_1 = 0;

				int deletedCount_tJDBCOutput_1 = 0;
				int updatedCount_tJDBCOutput_1 = 0;
				int insertedCount_tJDBCOutput_1 = 0;
				int rejectedCount_tJDBCOutput_1 = 0;

				boolean whetherReject_tJDBCOutput_1 = false;

				java.sql.Connection connection_tJDBCOutput_1 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCOutput_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tJDBCOutput_1) {
					connection_tJDBCOutput_1 = dataSources_tJDBCOutput_1
							.get("").getConnection();
				} else {
					java.lang.Class.forName(context.DB_StagingI2B2_DriverClass);
					String connectionString_tJDBCOutput_1 = context.DB_StagingI2B2_jdbcurl;
					connection_tJDBCOutput_1 = java.sql.DriverManager
							.getConnection(connectionString_tJDBCOutput_1,
									context.DB_StagingI2B2_Username,
									context.DB_StagingI2B2_Password);
				}
				connection_tJDBCOutput_1.setAutoCommit(false);
				int commitEvery_tJDBCOutput_1 = 100000;
				int commitCounter_tJDBCOutput_1 = 0;
				int batchSize_tJDBCOutput_1 = 10000;
				int batchSizeCounter_tJDBCOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tJDBCOutput_1 = connection_tJDBCOutput_1
						.prepareStatement("SELECT COUNT(1) FROM "
								+ context.currentTable
								+ " WHERE ENCOUNTER_NUM = ? AND CONCEPT_CD = ? AND PROVIDER_ID = ? AND START_DATE = ? AND MODIFIER_CD = ? AND INSTANCE_NUM = ?");
				String insert_tJDBCOutput_1 = "INSERT INTO "
						+ context.currentTable
						+ " (ENCOUNTER_NUM,PATIENT_NUM,CONCEPT_CD,PROVIDER_ID,START_DATE,MODIFIER_CD,INSTANCE_NUM,VALTYPE_CD,TVAL_CHAR,NVAL_NUM,VALUEFLAG_CD,QUANTITY_NUM,UNITS_CD,END_DATE,LOCATION_CD,OBSERVATION_BLOB,CONFIDENCE_NUM,UPDATE_DATE,DOWNLOAD_DATE,IMPORT_DATE,SOURCESYSTEM_CD,UPLOAD_ID) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tJDBCOutput_1 = connection_tJDBCOutput_1
						.prepareStatement(insert_tJDBCOutput_1);
				String update_tJDBCOutput_1 = "UPDATE "
						+ context.currentTable
						+ " SET PATIENT_NUM = ?,VALTYPE_CD = ?,TVAL_CHAR = ?,NVAL_NUM = ?,VALUEFLAG_CD = ?,QUANTITY_NUM = ?,UNITS_CD = ?,END_DATE = ?,LOCATION_CD = ?,OBSERVATION_BLOB = ?,CONFIDENCE_NUM = ?,UPDATE_DATE = ?,DOWNLOAD_DATE = ?,IMPORT_DATE = ?,SOURCESYSTEM_CD = ?,UPLOAD_ID = ? WHERE ENCOUNTER_NUM = ? AND CONCEPT_CD = ? AND PROVIDER_ID = ? AND START_DATE = ? AND MODIFIER_CD = ? AND INSTANCE_NUM = ?";
				java.sql.PreparedStatement pstmtUpdate_tJDBCOutput_1 = connection_tJDBCOutput_1
						.prepareStatement(update_tJDBCOutput_1);

				/**
				 * [tJDBCOutput_1 begin ] stop
				 */

				/**
				 * [tUniqRow_8 begin ] start
				 */

				ok_Hash.put("tUniqRow_8", false);
				start_Hash.put("tUniqRow_8", System.currentTimeMillis());
				currentComponent = "tUniqRow_8";

				int tos_count_tUniqRow_8 = 0;

				class KeyStruct_tUniqRow_8 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					BigDecimal ENCOUNTER_NUM;
					String CONCEPT_CD;
					String PROVIDER_ID;
					java.util.Date START_DATE;
					String MODIFIER_CD;
					String INSTANCE_NUM;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.ENCOUNTER_NUM == null) ? 0
											: this.ENCOUNTER_NUM.hashCode());

							result = prime
									* result
									+ ((this.CONCEPT_CD == null) ? 0
											: this.CONCEPT_CD.hashCode());

							result = prime
									* result
									+ ((this.PROVIDER_ID == null) ? 0
											: this.PROVIDER_ID.hashCode());

							result = prime
									* result
									+ ((this.START_DATE == null) ? 0
											: this.START_DATE.hashCode());

							result = prime
									* result
									+ ((this.MODIFIER_CD == null) ? 0
											: this.MODIFIER_CD.hashCode());

							result = prime
									* result
									+ ((this.INSTANCE_NUM == null) ? 0
											: this.INSTANCE_NUM.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_8 other = (KeyStruct_tUniqRow_8) obj;

						if (this.ENCOUNTER_NUM == null) {
							if (other.ENCOUNTER_NUM != null)
								return false;
						} else if (!this.ENCOUNTER_NUM
								.equals(other.ENCOUNTER_NUM))
							return false;

						if (this.CONCEPT_CD == null) {
							if (other.CONCEPT_CD != null)
								return false;
						} else if (!this.CONCEPT_CD.equals(other.CONCEPT_CD))
							return false;

						if (this.PROVIDER_ID == null) {
							if (other.PROVIDER_ID != null)
								return false;
						} else if (!this.PROVIDER_ID.equals(other.PROVIDER_ID))
							return false;

						if (this.START_DATE == null) {
							if (other.START_DATE != null)
								return false;
						} else if (!this.START_DATE.equals(other.START_DATE))
							return false;

						if (this.MODIFIER_CD == null) {
							if (other.MODIFIER_CD != null)
								return false;
						} else if (!this.MODIFIER_CD.equals(other.MODIFIER_CD))
							return false;

						if (this.INSTANCE_NUM == null) {
							if (other.INSTANCE_NUM != null)
								return false;
						} else if (!this.INSTANCE_NUM
								.equals(other.INSTANCE_NUM))
							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_8 = 0;
				int nb_duplicates_tUniqRow_8 = 0;
				KeyStruct_tUniqRow_8 finder_tUniqRow_8 = new KeyStruct_tUniqRow_8();
				java.util.Set<KeyStruct_tUniqRow_8> keystUniqRow_8 = new java.util.HashSet<KeyStruct_tUniqRow_8>();

				/**
				 * [tUniqRow_8 begin ] stop
				 */

				/**
				 * [tJavaRow_2 begin ] start
				 */

				ok_Hash.put("tJavaRow_2", false);
				start_Hash.put("tJavaRow_2", System.currentTimeMillis());
				currentComponent = "tJavaRow_2";

				int tos_count_tJavaRow_2 = 0;

				int nb_line_tJavaRow_2 = 0;

				/**
				 * [tJavaRow_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_9 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_9", false);
				start_Hash.put("tFileInputDelimited_9",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_9";

				int tos_count_tFileInputDelimited_9 = 0;

				int nb_line_tFileInputDelimited_9 = 0;
				int footer_tFileInputDelimited_9 = 0;
				int totalLinetFileInputDelimited_9 = 0;
				int limittFileInputDelimited_9 = -1;
				int lastLinetFileInputDelimited_9 = -1;

				char fieldSeparator_tFileInputDelimited_9[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_9 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_9[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_9 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_9 = /**
				 * Start field
				 * tFileInputDelimited_9:FILENAME
				 */
				context.folderMain + context.folderOutput + "patient_data.csv"/**
				 * 
				 * End field tFileInputDelimited_9:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_9 = null;

				try {

					String[] rowtFileInputDelimited_9 = null;
					int currentLinetFileInputDelimited_9 = 0;
					int outputLinetFileInputDelimited_9 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_9 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_9 = 0;
							if (footer_value_tFileInputDelimited_9 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_9,
									fieldSeparator_tFileInputDelimited_9[0],
									context.coding);
						} else {
							csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_9)),
													context.coding)),
									fieldSeparator_tFileInputDelimited_9[0]);
						}

						csvReadertFileInputDelimited_9.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_9[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_9[0] != '\r'))
							csvReadertFileInputDelimited_9.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_9[0]);

						csvReadertFileInputDelimited_9.setQuoteChar('"');

						csvReadertFileInputDelimited_9
								.setEscapeChar(csvReadertFileInputDelimited_9
										.getQuoteChar());

						if (footer_tFileInputDelimited_9 > 0) {
							for (totalLinetFileInputDelimited_9 = 0; totalLinetFileInputDelimited_9 < 1; totalLinetFileInputDelimited_9++) {
								csvReadertFileInputDelimited_9.readNext();
							}
							csvReadertFileInputDelimited_9
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_9.readNext()) {

								rowtFileInputDelimited_9 = csvReadertFileInputDelimited_9
										.getValues();
								if (!(rowtFileInputDelimited_9.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_9[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_9++;

								}

							}
							int lastLineTemptFileInputDelimited_9 = totalLinetFileInputDelimited_9
									- footer_tFileInputDelimited_9 < 0 ? 0
									: totalLinetFileInputDelimited_9
											- footer_tFileInputDelimited_9;
							if (lastLinetFileInputDelimited_9 > 0) {
								lastLinetFileInputDelimited_9 = lastLinetFileInputDelimited_9 < lastLineTemptFileInputDelimited_9 ? lastLinetFileInputDelimited_9
										: lastLineTemptFileInputDelimited_9;
							} else {
								lastLinetFileInputDelimited_9 = lastLineTemptFileInputDelimited_9;
							}

							csvReadertFileInputDelimited_9.close();
							if (filename_tFileInputDelimited_9 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_9,
										fieldSeparator_tFileInputDelimited_9[0],
										context.coding);
							} else {
								csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_9)),
														context.coding)),
										fieldSeparator_tFileInputDelimited_9[0]);
							}
							csvReadertFileInputDelimited_9
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_9[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_9[0] != '\r'))
								csvReadertFileInputDelimited_9
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_9[0]);

							csvReadertFileInputDelimited_9.setQuoteChar('"');

							csvReadertFileInputDelimited_9
									.setEscapeChar(csvReadertFileInputDelimited_9
											.getQuoteChar());

						}

						if (limittFileInputDelimited_9 != 0) {
							for (currentLinetFileInputDelimited_9 = 0; currentLinetFileInputDelimited_9 < 1; currentLinetFileInputDelimited_9++) {
								csvReadertFileInputDelimited_9.readNext();
							}
						}
						csvReadertFileInputDelimited_9
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_9 != 0
							&& csvReadertFileInputDelimited_9 != null
							&& csvReadertFileInputDelimited_9.readNext()) {

						rowtFileInputDelimited_9 = csvReadertFileInputDelimited_9
								.getValues();

						if (rowtFileInputDelimited_9.length == 1
								&& ("\015").equals(rowtFileInputDelimited_9[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_9++;

						if (lastLinetFileInputDelimited_9 > -1
								&& currentLinetFileInputDelimited_9 > lastLinetFileInputDelimited_9) {
							break;
						}
						outputLinetFileInputDelimited_9++;
						if (limittFileInputDelimited_9 > 0
								&& outputLinetFileInputDelimited_9 > limittFileInputDelimited_9) {
							break;
						}

						row10 = null;

						boolean whetherReject_tFileInputDelimited_9 = false;
						row10 = new row10Struct();
						try {

							if (rowtFileInputDelimited_9.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_9[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row10.ENCOUNTER_NUM = null;

								row10.PATIENT_NUM = null;

								row10.CONCEPT_CD = null;

								row10.PROVIDER_ID = null;

								row10.START_DATE = null;

								row10.MODIFIER_CD = null;

								row10.INSTANCE_NUM = null;

								row10.VALTYPE_CD = null;

								row10.TVAL_CHAR = null;

								row10.NVAL_NUM = null;

								row10.VALUEFLAG_CD = null;

								row10.QUANTITY_NUM = null;

								row10.UNITS_CD = null;

								row10.END_DATE = null;

								row10.LOCATION_CD = null;

								row10.OBSERVATION_BLOB = null;

								row10.CONFIDENCE_NUM = null;

								row10.UPDATE_DATE = null;

								row10.DOWNLOAD_DATE = null;

								row10.IMPORT_DATE = null;

								row10.SOURCESYSTEM_CD = null;

								row10.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_9 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_9 = 0;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row10.ENCOUNTER_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]);

									} else {
										row10.ENCOUNTER_NUM = null;
									}

								} else {
									row10.ENCOUNTER_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 1;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row10.PATIENT_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]);

									} else {
										row10.PATIENT_NUM = null;
									}

								} else {
									row10.PATIENT_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 2;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row10.CONCEPT_CD = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row10.CONCEPT_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 3;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row10.PROVIDER_ID = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row10.PROVIDER_ID = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 4;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row10.START_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9],
														"yyyy-MM-dd");

									} else {
										row10.START_DATE = null;
									}

								} else {
									row10.START_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 5;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row10.MODIFIER_CD = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row10.MODIFIER_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 6;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row10.INSTANCE_NUM = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row10.INSTANCE_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 7;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row10.VALTYPE_CD = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row10.VALTYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 8;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row10.TVAL_CHAR = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row10.TVAL_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 9;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row10.NVAL_NUM = ParserUtils
												.parseTo_Float(rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]);

									} else {
										row10.NVAL_NUM = null;
									}

								} else {
									row10.NVAL_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 10;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row10.VALUEFLAG_CD = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row10.VALUEFLAG_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 11;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row10.QUANTITY_NUM = ParserUtils
												.parseTo_Float(rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]);

									} else {
										row10.QUANTITY_NUM = null;
									}

								} else {
									row10.QUANTITY_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 12;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row10.UNITS_CD = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row10.UNITS_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 13;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row10.END_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9],
														"yyyy-MM-dd");

									} else {
										row10.END_DATE = null;
									}

								} else {
									row10.END_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 14;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row10.LOCATION_CD = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row10.LOCATION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 15;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row10.OBSERVATION_BLOB = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row10.OBSERVATION_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 16;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row10.CONFIDENCE_NUM = ParserUtils
												.parseTo_Float(rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]);

									} else {
										row10.CONFIDENCE_NUM = null;
									}

								} else {
									row10.CONFIDENCE_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 17;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row10.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9],
														"yyyy-MM-dd");

									} else {
										row10.UPDATE_DATE = null;
									}

								} else {
									row10.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 18;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row10.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9],
														"yyyy-MM-dd");

									} else {
										row10.DOWNLOAD_DATE = null;
									}

								} else {
									row10.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 19;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row10.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9],
														"yyyy-MM-dd");

									} else {
										row10.IMPORT_DATE = null;
									}

								} else {
									row10.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 20;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row10.SOURCESYSTEM_CD = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {
									row10.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_9 = 21;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]
											.length() > 0) {

										row10.UPLOAD_ID = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]);

									} else {
										row10.UPLOAD_ID = null;
									}

								} else {
									row10.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_9 = true;

							System.err.println(e.getMessage());
							row10 = null;

						}

						/**
						 * [tFileInputDelimited_9 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_9 main ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						tos_count_tFileInputDelimited_9++;

						/**
						 * [tFileInputDelimited_9 main ] stop
						 */
						// Start of branch "row10"
						if (row10 != null) {

							/**
							 * [tJavaRow_2 main ] start
							 */

							currentComponent = "tJavaRow_2";

							// Code generated according to input schema and
							// output schema

							row23.ENCOUNTER_NUM = row10.ENCOUNTER_NUM;
							row23.PATIENT_NUM = row10.PATIENT_NUM
									.add(new BigDecimal(10000));
							row23.CONCEPT_CD = row10.CONCEPT_CD;
							row23.PROVIDER_ID = row10.PROVIDER_ID;
							row23.START_DATE = row10.START_DATE;
							row23.MODIFIER_CD = row10.MODIFIER_CD;
							row23.INSTANCE_NUM = row10.INSTANCE_NUM;
							row23.VALTYPE_CD = row10.VALTYPE_CD;
							row23.TVAL_CHAR = row10.TVAL_CHAR;
							row23.NVAL_NUM = row10.NVAL_NUM;
							row23.VALUEFLAG_CD = row10.VALUEFLAG_CD;
							if (row10.QUANTITY_NUM == null)
								row10.QUANTITY_NUM = 0f;
							row23.QUANTITY_NUM = row10.QUANTITY_NUM;
							row23.UNITS_CD = row10.UNITS_CD;
							row23.END_DATE = row10.END_DATE;
							row23.LOCATION_CD = row10.LOCATION_CD;
							row23.OBSERVATION_BLOB = row10.OBSERVATION_BLOB;
							if (row10.CONFIDENCE_NUM == null)
								row10.CONFIDENCE_NUM = 0f;
							row23.CONFIDENCE_NUM = row10.CONFIDENCE_NUM;
							row23.UPDATE_DATE = row10.UPDATE_DATE;
							row23.DOWNLOAD_DATE = row10.DOWNLOAD_DATE;
							row23.IMPORT_DATE = row10.IMPORT_DATE;
							row23.SOURCESYSTEM_CD = row10.SOURCESYSTEM_CD;
							if (row10.UPLOAD_ID == null)
								row10.UPLOAD_ID = 0;
							row23.UPLOAD_ID = row10.UPLOAD_ID;

							nb_line_tJavaRow_2++;

							tos_count_tJavaRow_2++;

							/**
							 * [tJavaRow_2 main ] stop
							 */

							/**
							 * [tUniqRow_8 main ] start
							 */

							currentComponent = "tUniqRow_8";

							row25 = null;
							finder_tUniqRow_8.ENCOUNTER_NUM = row23.ENCOUNTER_NUM;
							if (row23.CONCEPT_CD == null) {
								finder_tUniqRow_8.CONCEPT_CD = null;
							} else {
								finder_tUniqRow_8.CONCEPT_CD = row23.CONCEPT_CD
										.toLowerCase();
							}
							if (row23.PROVIDER_ID == null) {
								finder_tUniqRow_8.PROVIDER_ID = null;
							} else {
								finder_tUniqRow_8.PROVIDER_ID = row23.PROVIDER_ID
										.toLowerCase();
							}
							finder_tUniqRow_8.START_DATE = row23.START_DATE;
							if (row23.MODIFIER_CD == null) {
								finder_tUniqRow_8.MODIFIER_CD = null;
							} else {
								finder_tUniqRow_8.MODIFIER_CD = row23.MODIFIER_CD
										.toLowerCase();
							}
							if (row23.INSTANCE_NUM == null) {
								finder_tUniqRow_8.INSTANCE_NUM = null;
							} else {
								finder_tUniqRow_8.INSTANCE_NUM = row23.INSTANCE_NUM
										.toLowerCase();
							}
							finder_tUniqRow_8.hashCodeDirty = true;
							if (!keystUniqRow_8.contains(finder_tUniqRow_8)) {
								KeyStruct_tUniqRow_8 new_tUniqRow_8 = new KeyStruct_tUniqRow_8();

								new_tUniqRow_8.ENCOUNTER_NUM = row23.ENCOUNTER_NUM;
								if (row23.CONCEPT_CD == null) {
									new_tUniqRow_8.CONCEPT_CD = null;
								} else {
									new_tUniqRow_8.CONCEPT_CD = row23.CONCEPT_CD
											.toLowerCase();
								}
								if (row23.PROVIDER_ID == null) {
									new_tUniqRow_8.PROVIDER_ID = null;
								} else {
									new_tUniqRow_8.PROVIDER_ID = row23.PROVIDER_ID
											.toLowerCase();
								}
								new_tUniqRow_8.START_DATE = row23.START_DATE;
								if (row23.MODIFIER_CD == null) {
									new_tUniqRow_8.MODIFIER_CD = null;
								} else {
									new_tUniqRow_8.MODIFIER_CD = row23.MODIFIER_CD
											.toLowerCase();
								}
								if (row23.INSTANCE_NUM == null) {
									new_tUniqRow_8.INSTANCE_NUM = null;
								} else {
									new_tUniqRow_8.INSTANCE_NUM = row23.INSTANCE_NUM
											.toLowerCase();
								}

								keystUniqRow_8.add(new_tUniqRow_8);
								if (row25 == null) {
									row25 = new row25Struct();
								}
								row25.ENCOUNTER_NUM = row23.ENCOUNTER_NUM;
								row25.PATIENT_NUM = row23.PATIENT_NUM;
								row25.CONCEPT_CD = row23.CONCEPT_CD;
								row25.PROVIDER_ID = row23.PROVIDER_ID;
								row25.START_DATE = row23.START_DATE;
								row25.MODIFIER_CD = row23.MODIFIER_CD;
								row25.INSTANCE_NUM = row23.INSTANCE_NUM;
								row25.VALTYPE_CD = row23.VALTYPE_CD;
								row25.TVAL_CHAR = row23.TVAL_CHAR;
								row25.NVAL_NUM = row23.NVAL_NUM;
								row25.VALUEFLAG_CD = row23.VALUEFLAG_CD;
								row25.QUANTITY_NUM = row23.QUANTITY_NUM;
								row25.UNITS_CD = row23.UNITS_CD;
								row25.END_DATE = row23.END_DATE;
								row25.LOCATION_CD = row23.LOCATION_CD;
								row25.OBSERVATION_BLOB = row23.OBSERVATION_BLOB;
								row25.CONFIDENCE_NUM = row23.CONFIDENCE_NUM;
								row25.UPDATE_DATE = row23.UPDATE_DATE;
								row25.DOWNLOAD_DATE = row23.DOWNLOAD_DATE;
								row25.IMPORT_DATE = row23.IMPORT_DATE;
								row25.SOURCESYSTEM_CD = row23.SOURCESYSTEM_CD;
								row25.UPLOAD_ID = row23.UPLOAD_ID;
								nb_uniques_tUniqRow_8++;
							} else {
								nb_duplicates_tUniqRow_8++;
							}

							tos_count_tUniqRow_8++;

							/**
							 * [tUniqRow_8 main ] stop
							 */
							// Start of branch "row25"
							if (row25 != null) {

								/**
								 * [tJDBCOutput_1 main ] start
								 */

								currentComponent = "tJDBCOutput_1";

								whetherReject_tJDBCOutput_1 = false;
								pstmt_tJDBCOutput_1.setBigDecimal(1,
										row25.ENCOUNTER_NUM);

								if (row25.CONCEPT_CD == null) {
									pstmt_tJDBCOutput_1.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_1.setString(2,
											row25.CONCEPT_CD);
								}

								if (row25.PROVIDER_ID == null) {
									pstmt_tJDBCOutput_1.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_1.setString(3,
											row25.PROVIDER_ID);
								}

								if (row25.START_DATE != null) {
									pstmt_tJDBCOutput_1
											.setTimestamp(
													4,
													new java.sql.Timestamp(
															row25.START_DATE
																	.getTime()));
								} else {
									pstmt_tJDBCOutput_1.setNull(4,
											java.sql.Types.DATE);
								}

								if (row25.MODIFIER_CD == null) {
									pstmt_tJDBCOutput_1.setNull(5,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_1.setString(5,
											row25.MODIFIER_CD);
								}

								if (row25.INSTANCE_NUM == null) {
									pstmt_tJDBCOutput_1.setNull(6,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_1.setString(6,
											row25.INSTANCE_NUM);
								}

								java.sql.ResultSet rs_tJDBCOutput_1 = pstmt_tJDBCOutput_1
										.executeQuery();
								int checkCount_tJDBCOutput_1 = -1;
								while (rs_tJDBCOutput_1.next()) {
									checkCount_tJDBCOutput_1 = rs_tJDBCOutput_1
											.getInt(1);
								}
								if (checkCount_tJDBCOutput_1 > 0) {
									pstmtUpdate_tJDBCOutput_1.setBigDecimal(1,
											row25.PATIENT_NUM);

									if (row25.VALTYPE_CD == null) {
										pstmtUpdate_tJDBCOutput_1.setNull(2,
												java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tJDBCOutput_1.setString(2,
												row25.VALTYPE_CD);
									}

									if (row25.TVAL_CHAR == null) {
										pstmtUpdate_tJDBCOutput_1.setNull(3,
												java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tJDBCOutput_1.setString(3,
												row25.TVAL_CHAR);
									}

									if (row25.NVAL_NUM == null) {
										pstmtUpdate_tJDBCOutput_1.setNull(4,
												java.sql.Types.FLOAT);
									} else {
										pstmtUpdate_tJDBCOutput_1.setFloat(4,
												row25.NVAL_NUM);
									}

									if (row25.VALUEFLAG_CD == null) {
										pstmtUpdate_tJDBCOutput_1.setNull(5,
												java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tJDBCOutput_1.setString(5,
												row25.VALUEFLAG_CD);
									}

									if (row25.QUANTITY_NUM == null) {
										pstmtUpdate_tJDBCOutput_1.setNull(6,
												java.sql.Types.FLOAT);
									} else {
										pstmtUpdate_tJDBCOutput_1.setFloat(6,
												row25.QUANTITY_NUM);
									}

									if (row25.UNITS_CD == null) {
										pstmtUpdate_tJDBCOutput_1.setNull(7,
												java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tJDBCOutput_1.setString(7,
												row25.UNITS_CD);
									}

									if (row25.END_DATE != null) {
										pstmtUpdate_tJDBCOutput_1.setTimestamp(
												8,
												new java.sql.Timestamp(
														row25.END_DATE
																.getTime()));
									} else {
										pstmtUpdate_tJDBCOutput_1.setNull(8,
												java.sql.Types.DATE);
									}

									if (row25.LOCATION_CD == null) {
										pstmtUpdate_tJDBCOutput_1.setNull(9,
												java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tJDBCOutput_1.setString(9,
												row25.LOCATION_CD);
									}

									if (row25.OBSERVATION_BLOB == null) {
										pstmtUpdate_tJDBCOutput_1.setNull(10,
												java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tJDBCOutput_1.setString(10,
												row25.OBSERVATION_BLOB);
									}

									if (row25.CONFIDENCE_NUM == null) {
										pstmtUpdate_tJDBCOutput_1.setNull(11,
												java.sql.Types.FLOAT);
									} else {
										pstmtUpdate_tJDBCOutput_1.setFloat(11,
												row25.CONFIDENCE_NUM);
									}

									if (row25.UPDATE_DATE != null) {
										pstmtUpdate_tJDBCOutput_1.setTimestamp(
												12,
												new java.sql.Timestamp(
														row25.UPDATE_DATE
																.getTime()));
									} else {
										pstmtUpdate_tJDBCOutput_1.setNull(12,
												java.sql.Types.DATE);
									}

									if (row25.DOWNLOAD_DATE != null) {
										pstmtUpdate_tJDBCOutput_1.setTimestamp(
												13,
												new java.sql.Timestamp(
														row25.DOWNLOAD_DATE
																.getTime()));
									} else {
										pstmtUpdate_tJDBCOutput_1.setNull(13,
												java.sql.Types.DATE);
									}

									if (row25.IMPORT_DATE != null) {
										pstmtUpdate_tJDBCOutput_1.setTimestamp(
												14,
												new java.sql.Timestamp(
														row25.IMPORT_DATE
																.getTime()));
									} else {
										pstmtUpdate_tJDBCOutput_1.setNull(14,
												java.sql.Types.DATE);
									}

									if (row25.SOURCESYSTEM_CD == null) {
										pstmtUpdate_tJDBCOutput_1.setNull(15,
												java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tJDBCOutput_1.setString(15,
												row25.SOURCESYSTEM_CD);
									}

									if (row25.UPLOAD_ID == null) {
										pstmtUpdate_tJDBCOutput_1.setNull(16,
												java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tJDBCOutput_1.setInt(16,
												row25.UPLOAD_ID);
									}

									pstmtUpdate_tJDBCOutput_1.setBigDecimal(17,
											row25.ENCOUNTER_NUM);

									if (row25.CONCEPT_CD == null) {
										pstmtUpdate_tJDBCOutput_1.setNull(18,
												java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tJDBCOutput_1.setString(18,
												row25.CONCEPT_CD);
									}

									if (row25.PROVIDER_ID == null) {
										pstmtUpdate_tJDBCOutput_1.setNull(19,
												java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tJDBCOutput_1.setString(19,
												row25.PROVIDER_ID);
									}

									if (row25.START_DATE != null) {
										pstmtUpdate_tJDBCOutput_1.setTimestamp(
												20,
												new java.sql.Timestamp(
														row25.START_DATE
																.getTime()));
									} else {
										pstmtUpdate_tJDBCOutput_1.setNull(20,
												java.sql.Types.DATE);
									}

									if (row25.MODIFIER_CD == null) {
										pstmtUpdate_tJDBCOutput_1.setNull(21,
												java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tJDBCOutput_1.setString(21,
												row25.MODIFIER_CD);
									}

									if (row25.INSTANCE_NUM == null) {
										pstmtUpdate_tJDBCOutput_1.setNull(22,
												java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tJDBCOutput_1.setString(22,
												row25.INSTANCE_NUM);
									}

									try {
										updatedCount_tJDBCOutput_1 = updatedCount_tJDBCOutput_1
												+ pstmtUpdate_tJDBCOutput_1
														.executeUpdate();
									} catch (java.lang.Exception e) {
										whetherReject_tJDBCOutput_1 = true;
										throw (e);
									}
								} else {
									pstmtInsert_tJDBCOutput_1.setBigDecimal(1,
											row25.ENCOUNTER_NUM);

									pstmtInsert_tJDBCOutput_1.setBigDecimal(2,
											row25.PATIENT_NUM);

									if (row25.CONCEPT_CD == null) {
										pstmtInsert_tJDBCOutput_1.setNull(3,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tJDBCOutput_1.setString(3,
												row25.CONCEPT_CD);
									}

									if (row25.PROVIDER_ID == null) {
										pstmtInsert_tJDBCOutput_1.setNull(4,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tJDBCOutput_1.setString(4,
												row25.PROVIDER_ID);
									}

									if (row25.START_DATE != null) {
										pstmtInsert_tJDBCOutput_1.setTimestamp(
												5,
												new java.sql.Timestamp(
														row25.START_DATE
																.getTime()));
									} else {
										pstmtInsert_tJDBCOutput_1.setNull(5,
												java.sql.Types.DATE);
									}

									if (row25.MODIFIER_CD == null) {
										pstmtInsert_tJDBCOutput_1.setNull(6,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tJDBCOutput_1.setString(6,
												row25.MODIFIER_CD);
									}

									if (row25.INSTANCE_NUM == null) {
										pstmtInsert_tJDBCOutput_1.setNull(7,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tJDBCOutput_1.setString(7,
												row25.INSTANCE_NUM);
									}

									if (row25.VALTYPE_CD == null) {
										pstmtInsert_tJDBCOutput_1.setNull(8,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tJDBCOutput_1.setString(8,
												row25.VALTYPE_CD);
									}

									if (row25.TVAL_CHAR == null) {
										pstmtInsert_tJDBCOutput_1.setNull(9,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tJDBCOutput_1.setString(9,
												row25.TVAL_CHAR);
									}

									if (row25.NVAL_NUM == null) {
										pstmtInsert_tJDBCOutput_1.setNull(10,
												java.sql.Types.FLOAT);
									} else {
										pstmtInsert_tJDBCOutput_1.setFloat(10,
												row25.NVAL_NUM);
									}

									if (row25.VALUEFLAG_CD == null) {
										pstmtInsert_tJDBCOutput_1.setNull(11,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tJDBCOutput_1.setString(11,
												row25.VALUEFLAG_CD);
									}

									if (row25.QUANTITY_NUM == null) {
										pstmtInsert_tJDBCOutput_1.setNull(12,
												java.sql.Types.FLOAT);
									} else {
										pstmtInsert_tJDBCOutput_1.setFloat(12,
												row25.QUANTITY_NUM);
									}

									if (row25.UNITS_CD == null) {
										pstmtInsert_tJDBCOutput_1.setNull(13,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tJDBCOutput_1.setString(13,
												row25.UNITS_CD);
									}

									if (row25.END_DATE != null) {
										pstmtInsert_tJDBCOutput_1.setTimestamp(
												14,
												new java.sql.Timestamp(
														row25.END_DATE
																.getTime()));
									} else {
										pstmtInsert_tJDBCOutput_1.setNull(14,
												java.sql.Types.DATE);
									}

									if (row25.LOCATION_CD == null) {
										pstmtInsert_tJDBCOutput_1.setNull(15,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tJDBCOutput_1.setString(15,
												row25.LOCATION_CD);
									}

									if (row25.OBSERVATION_BLOB == null) {
										pstmtInsert_tJDBCOutput_1.setNull(16,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tJDBCOutput_1.setString(16,
												row25.OBSERVATION_BLOB);
									}

									if (row25.CONFIDENCE_NUM == null) {
										pstmtInsert_tJDBCOutput_1.setNull(17,
												java.sql.Types.FLOAT);
									} else {
										pstmtInsert_tJDBCOutput_1.setFloat(17,
												row25.CONFIDENCE_NUM);
									}

									if (row25.UPDATE_DATE != null) {
										pstmtInsert_tJDBCOutput_1.setTimestamp(
												18,
												new java.sql.Timestamp(
														row25.UPDATE_DATE
																.getTime()));
									} else {
										pstmtInsert_tJDBCOutput_1.setNull(18,
												java.sql.Types.DATE);
									}

									if (row25.DOWNLOAD_DATE != null) {
										pstmtInsert_tJDBCOutput_1.setTimestamp(
												19,
												new java.sql.Timestamp(
														row25.DOWNLOAD_DATE
																.getTime()));
									} else {
										pstmtInsert_tJDBCOutput_1.setNull(19,
												java.sql.Types.DATE);
									}

									if (row25.IMPORT_DATE != null) {
										pstmtInsert_tJDBCOutput_1.setTimestamp(
												20,
												new java.sql.Timestamp(
														row25.IMPORT_DATE
																.getTime()));
									} else {
										pstmtInsert_tJDBCOutput_1.setNull(20,
												java.sql.Types.DATE);
									}

									if (row25.SOURCESYSTEM_CD == null) {
										pstmtInsert_tJDBCOutput_1.setNull(21,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tJDBCOutput_1.setString(21,
												row25.SOURCESYSTEM_CD);
									}

									if (row25.UPLOAD_ID == null) {
										pstmtInsert_tJDBCOutput_1.setNull(22,
												java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tJDBCOutput_1.setInt(22,
												row25.UPLOAD_ID);
									}

									try {
										insertedCount_tJDBCOutput_1 = insertedCount_tJDBCOutput_1
												+ pstmtInsert_tJDBCOutput_1
														.executeUpdate();
									} catch (java.lang.Exception e) {
										whetherReject_tJDBCOutput_1 = true;
										throw (e);
									}
								}
								nb_line_tJDBCOutput_1++;
								if (!whetherReject_tJDBCOutput_1) {
								}
								if (batchSize_tJDBCOutput_1 <= batchSizeCounter_tJDBCOutput_1) {

								}

								commitCounter_tJDBCOutput_1++;
								if (commitEvery_tJDBCOutput_1 <= commitCounter_tJDBCOutput_1) {
									connection_tJDBCOutput_1.commit();
									commitCounter_tJDBCOutput_1 = 0;
								}

								tos_count_tJDBCOutput_1++;

								/**
								 * [tJDBCOutput_1 main ] stop
								 */

							} // End of branch "row25"

						} // End of branch "row10"

						/**
						 * [tFileInputDelimited_9 end ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						nb_line_tFileInputDelimited_9++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_9 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_9 != null) {
							csvReadertFileInputDelimited_9.close();
						}
					}
					if (csvReadertFileInputDelimited_9 != null) {
						globalMap.put("tFileInputDelimited_9_NB_LINE",
								nb_line_tFileInputDelimited_9);
					}
				}

				ok_Hash.put("tFileInputDelimited_9", true);
				end_Hash.put("tFileInputDelimited_9",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_9 end ] stop
				 */

				/**
				 * [tJavaRow_2 end ] start
				 */

				currentComponent = "tJavaRow_2";

				globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);

				ok_Hash.put("tJavaRow_2", true);
				end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				/**
				 * [tJavaRow_2 end ] stop
				 */

				/**
				 * [tUniqRow_8 end ] start
				 */

				currentComponent = "tUniqRow_8";

				globalMap.put("tUniqRow_8_NB_UNIQUES", nb_uniques_tUniqRow_8);
				globalMap.put("tUniqRow_8_NB_DUPLICATES",
						nb_duplicates_tUniqRow_8);

				ok_Hash.put("tUniqRow_8", true);
				end_Hash.put("tUniqRow_8", System.currentTimeMillis());

				/**
				 * [tUniqRow_8 end ] stop
				 */

				/**
				 * [tJDBCOutput_1 end ] start
				 */

				currentComponent = "tJDBCOutput_1";

				if (pstmtUpdate_tJDBCOutput_1 != null) {

					pstmtUpdate_tJDBCOutput_1.close();

				}
				if (pstmtInsert_tJDBCOutput_1 != null) {

					pstmtInsert_tJDBCOutput_1.close();

				}
				if (pstmt_tJDBCOutput_1 != null) {

					pstmt_tJDBCOutput_1.close();

				}

				connection_tJDBCOutput_1.commit();

				connection_tJDBCOutput_1.close();

				nb_line_deleted_tJDBCOutput_1 = nb_line_deleted_tJDBCOutput_1
						+ deletedCount_tJDBCOutput_1;
				nb_line_update_tJDBCOutput_1 = nb_line_update_tJDBCOutput_1
						+ updatedCount_tJDBCOutput_1;
				nb_line_inserted_tJDBCOutput_1 = nb_line_inserted_tJDBCOutput_1
						+ insertedCount_tJDBCOutput_1;
				nb_line_rejected_tJDBCOutput_1 = nb_line_rejected_tJDBCOutput_1
						+ rejectedCount_tJDBCOutput_1;

				globalMap.put("tJDBCOutput_1_NB_LINE", nb_line_tJDBCOutput_1);
				globalMap.put("tJDBCOutput_1_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_1);
				globalMap.put("tJDBCOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_1);
				globalMap.put("tJDBCOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_1);
				globalMap.put("tJDBCOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_1);

				ok_Hash.put("tJDBCOutput_1", true);
				end_Hash.put("tJDBCOutput_1", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_9:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_8Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());
				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				System.out.println(((String) globalMap
						.get("tJDBCOutput_1_ERROR_MESSAGE")));
				System.out.println(((String) globalMap
						.get("tJDBCOutput_2_ERROR_MESSAGE")));
				System.out.println(((String) globalMap
						.get("tJDBCOutput_3_ERROR_MESSAGE")));
				System.out.println(((String) globalMap
						.get("tJDBCOutput_4_ERROR_MESSAGE")));
				System.out.println(((String) globalMap
						.get("tJDBCOutput_5_ERROR_MESSAGE")));
				System.out.println(((String) globalMap
						.get("tJDBCOutput_6_ERROR_MESSAGE")));
				System.out.println(((String) globalMap
						.get("tJDBCOutput_7_ERROR_MESSAGE")));
				System.out.println(((String) globalMap
						.get("tJDBCOutput_8_ERROR_MESSAGE")));
				System.out.println(((String) globalMap
						.get("tJDBCOutput_12_ERROR_MESSAGE")));

				/**
				 * [tJava_1 begin ] stop
				 */
				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */
				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_8Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_8 begin ] start
				 */

				ok_Hash.put("tJava_8", false);
				start_Hash.put("tJava_8", System.currentTimeMillis());
				currentComponent = "tJava_8";

				int tos_count_tJava_8 = 0;

				context.currentTable = context.DB_StagingI2B2_DatabaseType
						.equalsIgnoreCase("postgres") ? "i2b2metadata.i2b2"
						: context.DB_StagingI2B2_Schema + ".i2b2";
				System.out.println("Starting Import: Ontology");
				StatusListener.setSubStatus(20.0f, (int) (float) (20.0f) + "%");

				/**
				 * [tJava_8 begin ] stop
				 */
				/**
				 * [tJava_8 main ] start
				 */

				currentComponent = "tJava_8";

				tos_count_tJava_8++;

				/**
				 * [tJava_8 main ] stop
				 */
				/**
				 * [tJava_8 end ] start
				 */

				currentComponent = "tJava_8";

				ok_Hash.put("tJava_8", true);
				end_Hash.put("tJava_8", System.currentTimeMillis());

				/**
				 * [tJava_8 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_8:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_10Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_8_SUBPROCESS_STATE", 1);
	}

	public static class row24Struct implements
			routines.system.IPersistableRow<row24Struct> {
		final static byte[] commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];

		public int C_HLEVEL;

		public int getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String C_SYNONYM_CD;

		public String getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public BigDecimal C_TOTALNUM;

		public BigDecimal getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public String C_COLUMNDATATYPE;

		public String getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length);
				strReturn = new String(
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.C_HLEVEL = dis.readInt();

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					this.C_SYNONYM_CD = readString(dis);

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = (BigDecimal) dis.readObject();

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					this.C_COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.C_HLEVEL);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.C_SYNONYM_CD, dos);

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// BigDecimal

				dos.writeObject(this.C_TOTALNUM);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// String

				writeString(this.C_COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + C_SYNONYM_CD);
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + String.valueOf(C_TOTALNUM));
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + C_COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class outtStruct implements
			routines.system.IPersistableRow<outtStruct> {
		final static byte[] commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];

		public int C_HLEVEL;

		public int getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String C_SYNONYM_CD;

		public String getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public BigDecimal C_TOTALNUM;

		public BigDecimal getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public String C_COLUMNDATATYPE;

		public String getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length);
				strReturn = new String(
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.C_HLEVEL = dis.readInt();

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					this.C_SYNONYM_CD = readString(dis);

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = (BigDecimal) dis.readObject();

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					this.C_COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.C_HLEVEL);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.C_SYNONYM_CD, dos);

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// BigDecimal

				dos.writeObject(this.C_TOTALNUM);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// String

				writeString(this.C_COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + C_SYNONYM_CD);
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + String.valueOf(C_TOTALNUM));
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + C_COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(outtStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];

		public int C_HLEVEL;

		public int getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String C_SYNONYM_CD;

		public String getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public BigDecimal C_TOTALNUM;

		public BigDecimal getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public String C_COLUMNDATATYPE;

		public String getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length);
				strReturn = new String(
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.C_HLEVEL = dis.readInt();

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					this.C_SYNONYM_CD = readString(dis);

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = (BigDecimal) dis.readObject();

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					this.C_COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.C_HLEVEL);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.C_SYNONYM_CD, dos);

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// BigDecimal

				dos.writeObject(this.C_TOTALNUM);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// String

				writeString(this.C_COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + C_SYNONYM_CD);
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + String.valueOf(C_TOTALNUM));
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + C_COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_10Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();
				outtStruct outt = new outtStruct();
				row24Struct row24 = new row24Struct();

				/**
				 * [tJDBCOutput_2 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_2", false);
				start_Hash.put("tJDBCOutput_2", System.currentTimeMillis());
				currentComponent = "tJDBCOutput_2";

				int tos_count_tJDBCOutput_2 = 0;

				int updateKeyCount_tJDBCOutput_2 = 1;
				if (updateKeyCount_tJDBCOutput_2 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tJDBCOutput_2 = 0;
				int nb_line_update_tJDBCOutput_2 = 0;
				int nb_line_inserted_tJDBCOutput_2 = 0;
				int nb_line_deleted_tJDBCOutput_2 = 0;
				int nb_line_rejected_tJDBCOutput_2 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_2 = 0;

				int deletedCount_tJDBCOutput_2 = 0;
				int updatedCount_tJDBCOutput_2 = 0;
				int insertedCount_tJDBCOutput_2 = 0;
				int rejectedCount_tJDBCOutput_2 = 0;

				boolean whetherReject_tJDBCOutput_2 = false;

				java.sql.Connection connection_tJDBCOutput_2 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");
				if (null == connection_tJDBCOutput_2) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCOutput_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					connection_tJDBCOutput_2 = dataSources_tJDBCOutput_2
							.get("").getConnection();
				}

				int batchSize_tJDBCOutput_2 = 10000;
				int batchSizeCounter_tJDBCOutput_2 = 0;

				java.sql.PreparedStatement pstmt_tJDBCOutput_2 = connection_tJDBCOutput_2
						.prepareStatement("SELECT COUNT(1) FROM "
								+ context.currentTable
								+ " WHERE C_FULLNAME = ?");
				String insert_tJDBCOutput_2 = "INSERT INTO "
						+ context.currentTable
						+ " (C_HLEVEL,C_FULLNAME,C_NAME,C_SYNONYM_CD,C_VISUALATTRIBUTES,C_TOTALNUM,C_BASECODE,C_METADATAXML,C_FACTTABLECOLUMN,C_TABLENAME,C_COLUMNNAME,C_COLUMNDATATYPE,C_OPERATOR,C_DIMCODE,C_COMMENT,C_TOOLTIP,M_APPLIED_PATH,UPDATE_DATE,DOWNLOAD_DATE,IMPORT_DATE,SOURCESYSTEM_CD,VALUETYPE_CD,M_EXCLUSION_CD,C_PATH,C_SYMBOL) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tJDBCOutput_2 = connection_tJDBCOutput_2
						.prepareStatement(insert_tJDBCOutput_2);
				String update_tJDBCOutput_2 = "UPDATE "
						+ context.currentTable
						+ " SET C_HLEVEL = ?,C_NAME = ?,C_SYNONYM_CD = ?,C_VISUALATTRIBUTES = ?,C_TOTALNUM = ?,C_BASECODE = ?,C_METADATAXML = ?,C_FACTTABLECOLUMN = ?,C_TABLENAME = ?,C_COLUMNNAME = ?,C_COLUMNDATATYPE = ?,C_OPERATOR = ?,C_DIMCODE = ?,C_COMMENT = ?,C_TOOLTIP = ?,M_APPLIED_PATH = ?,UPDATE_DATE = ?,DOWNLOAD_DATE = ?,IMPORT_DATE = ?,SOURCESYSTEM_CD = ?,VALUETYPE_CD = ?,M_EXCLUSION_CD = ?,C_PATH = ?,C_SYMBOL = ? WHERE C_FULLNAME = ?";
				java.sql.PreparedStatement pstmtUpdate_tJDBCOutput_2 = connection_tJDBCOutput_2
						.prepareStatement(update_tJDBCOutput_2);

				/**
				 * [tJDBCOutput_2 begin ] stop
				 */

				/**
				 * [tUniqRow_6 begin ] start
				 */

				ok_Hash.put("tUniqRow_6", false);
				start_Hash.put("tUniqRow_6", System.currentTimeMillis());
				currentComponent = "tUniqRow_6";

				int tos_count_tUniqRow_6 = 0;

				class KeyStruct_tUniqRow_6 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					int C_HLEVEL;
					String C_FULLNAME;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + (int) this.C_HLEVEL;

							result = prime
									* result
									+ ((this.C_FULLNAME == null) ? 0
											: this.C_FULLNAME.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_6 other = (KeyStruct_tUniqRow_6) obj;

						if (this.C_HLEVEL != other.C_HLEVEL)
							return false;

						if (this.C_FULLNAME == null) {
							if (other.C_FULLNAME != null)
								return false;
						} else if (!this.C_FULLNAME.equals(other.C_FULLNAME))
							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_6 = 0;
				int nb_duplicates_tUniqRow_6 = 0;
				KeyStruct_tUniqRow_6 finder_tUniqRow_6 = new KeyStruct_tUniqRow_6();
				java.util.Set<KeyStruct_tUniqRow_6> keystUniqRow_6 = new java.util.HashSet<KeyStruct_tUniqRow_6>();

				/**
				 * [tUniqRow_6 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());
				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				outtStruct outt_tmp = new outtStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_10 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_10", false);
				start_Hash.put("tFileInputDelimited_10",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_10";

				int tos_count_tFileInputDelimited_10 = 0;

				int nb_line_tFileInputDelimited_10 = 0;
				int footer_tFileInputDelimited_10 = 0;
				int totalLinetFileInputDelimited_10 = 0;
				int limittFileInputDelimited_10 = -1;
				int lastLinetFileInputDelimited_10 = -1;

				char fieldSeparator_tFileInputDelimited_10[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_10 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_10[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_10 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_10 = /**
				 * Start field
				 * tFileInputDelimited_10:FILENAME
				 */
				context.folderMain + context.folderOutput + "ontology.csv"/**
				 * End
				 * field tFileInputDelimited_10:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_10 = null;

				try {

					String[] rowtFileInputDelimited_10 = null;
					int currentLinetFileInputDelimited_10 = 0;
					int outputLinetFileInputDelimited_10 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_10 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_10 = 0;
							if (footer_value_tFileInputDelimited_10 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_10 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_10,
									fieldSeparator_tFileInputDelimited_10[0],
									context.coding);
						} else {
							csvReadertFileInputDelimited_10 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_10)),
													context.coding)),
									fieldSeparator_tFileInputDelimited_10[0]);
						}

						csvReadertFileInputDelimited_10
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_10[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_10[0] != '\r'))
							csvReadertFileInputDelimited_10.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_10[0]);

						csvReadertFileInputDelimited_10.setQuoteChar('"');

						csvReadertFileInputDelimited_10
								.setEscapeChar(csvReadertFileInputDelimited_10
										.getQuoteChar());

						if (footer_tFileInputDelimited_10 > 0) {
							for (totalLinetFileInputDelimited_10 = 0; totalLinetFileInputDelimited_10 < 1; totalLinetFileInputDelimited_10++) {
								csvReadertFileInputDelimited_10.readNext();
							}
							csvReadertFileInputDelimited_10
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_10.readNext()) {

								rowtFileInputDelimited_10 = csvReadertFileInputDelimited_10
										.getValues();
								if (!(rowtFileInputDelimited_10.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_10[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_10++;

								}

							}
							int lastLineTemptFileInputDelimited_10 = totalLinetFileInputDelimited_10
									- footer_tFileInputDelimited_10 < 0 ? 0
									: totalLinetFileInputDelimited_10
											- footer_tFileInputDelimited_10;
							if (lastLinetFileInputDelimited_10 > 0) {
								lastLinetFileInputDelimited_10 = lastLinetFileInputDelimited_10 < lastLineTemptFileInputDelimited_10 ? lastLinetFileInputDelimited_10
										: lastLineTemptFileInputDelimited_10;
							} else {
								lastLinetFileInputDelimited_10 = lastLineTemptFileInputDelimited_10;
							}

							csvReadertFileInputDelimited_10.close();
							if (filename_tFileInputDelimited_10 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_10 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_10,
										fieldSeparator_tFileInputDelimited_10[0],
										context.coding);
							} else {
								csvReadertFileInputDelimited_10 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_10)),
														context.coding)),
										fieldSeparator_tFileInputDelimited_10[0]);
							}
							csvReadertFileInputDelimited_10
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_10[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_10[0] != '\r'))
								csvReadertFileInputDelimited_10
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_10[0]);

							csvReadertFileInputDelimited_10.setQuoteChar('"');

							csvReadertFileInputDelimited_10
									.setEscapeChar(csvReadertFileInputDelimited_10
											.getQuoteChar());

						}

						if (limittFileInputDelimited_10 != 0) {
							for (currentLinetFileInputDelimited_10 = 0; currentLinetFileInputDelimited_10 < 1; currentLinetFileInputDelimited_10++) {
								csvReadertFileInputDelimited_10.readNext();
							}
						}
						csvReadertFileInputDelimited_10
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_10 != 0
							&& csvReadertFileInputDelimited_10 != null
							&& csvReadertFileInputDelimited_10.readNext()) {

						rowtFileInputDelimited_10 = csvReadertFileInputDelimited_10
								.getValues();

						if (rowtFileInputDelimited_10.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_10[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_10++;

						if (lastLinetFileInputDelimited_10 > -1
								&& currentLinetFileInputDelimited_10 > lastLinetFileInputDelimited_10) {
							break;
						}
						outputLinetFileInputDelimited_10++;
						if (limittFileInputDelimited_10 > 0
								&& outputLinetFileInputDelimited_10 > limittFileInputDelimited_10) {
							break;
						}

						row9 = null;

						boolean whetherReject_tFileInputDelimited_10 = false;
						row9 = new row9Struct();
						try {

							if (rowtFileInputDelimited_10.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_10[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row9.C_HLEVEL = 0;

								row9.C_FULLNAME = null;

								row9.C_NAME = null;

								row9.C_SYNONYM_CD = null;

								row9.C_VISUALATTRIBUTES = null;

								row9.C_TOTALNUM = null;

								row9.C_BASECODE = null;

								row9.C_METADATAXML = null;

								row9.C_FACTTABLECOLUMN = null;

								row9.C_TABLENAME = null;

								row9.C_COLUMNNAME = null;

								row9.C_COLUMNDATATYPE = null;

								row9.C_OPERATOR = null;

								row9.C_DIMCODE = null;

								row9.C_COMMENT = null;

								row9.C_TOOLTIP = null;

								row9.M_APPLIED_PATH = null;

								row9.UPDATE_DATE = null;

								row9.DOWNLOAD_DATE = null;

								row9.IMPORT_DATE = null;

								row9.SOURCESYSTEM_CD = null;

								row9.VALUETYPE_CD = null;

								row9.M_EXCLUSION_CD = null;

								row9.C_PATH = null;

								row9.C_SYMBOL = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_10 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_10 = 0;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									if (rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10]
											.length() > 0) {

										row9.C_HLEVEL = ParserUtils
												.parseTo_int(rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10]);

									} else {
										row9.C_HLEVEL = 0;
									}

								} else {
									row9.C_HLEVEL = 0;
								}

								columnIndexWithD_tFileInputDelimited_10 = 1;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_FULLNAME = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_FULLNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 2;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_NAME = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_NAME = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 3;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_SYNONYM_CD = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_SYNONYM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 4;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_VISUALATTRIBUTES = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_VISUALATTRIBUTES = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 5;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									if (rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10]
											.length() > 0) {

										row9.C_TOTALNUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10]);

									} else {
										row9.C_TOTALNUM = null;
									}

								} else {
									row9.C_TOTALNUM = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 6;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_BASECODE = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_BASECODE = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 7;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_METADATAXML = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_METADATAXML = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 8;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_FACTTABLECOLUMN = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_FACTTABLECOLUMN = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 9;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_TABLENAME = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_TABLENAME = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 10;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_COLUMNNAME = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_COLUMNNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 11;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_COLUMNDATATYPE = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_COLUMNDATATYPE = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 12;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_OPERATOR = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_OPERATOR = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 13;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_DIMCODE = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_DIMCODE = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 14;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_COMMENT = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_COMMENT = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 15;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_TOOLTIP = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_TOOLTIP = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 16;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.M_APPLIED_PATH = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.M_APPLIED_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 17;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									if (rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10]
											.length() > 0) {

										row9.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10],
														"dd-MM-yyyy");

									} else {
										row9.UPDATE_DATE = null;
									}

								} else {
									row9.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 18;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									if (rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10]
											.length() > 0) {

										row9.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10],
														"dd-MM-yyyy");

									} else {
										row9.DOWNLOAD_DATE = null;
									}

								} else {
									row9.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 19;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									if (rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10]
											.length() > 0) {

										row9.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10],
														"dd-MM-yyyy");

									} else {
										row9.IMPORT_DATE = null;
									}

								} else {
									row9.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 20;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.SOURCESYSTEM_CD = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 21;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.VALUETYPE_CD = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.VALUETYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 22;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.M_EXCLUSION_CD = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.M_EXCLUSION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 23;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_PATH = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_10 = 24;

								if (columnIndexWithD_tFileInputDelimited_10 < rowtFileInputDelimited_10.length) {

									row9.C_SYMBOL = rowtFileInputDelimited_10[columnIndexWithD_tFileInputDelimited_10];

								} else {
									row9.C_SYMBOL = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_10 = true;

							System.err.println(e.getMessage());
							row9 = null;

						}

						/**
						 * [tFileInputDelimited_10 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_10 main ] start
						 */

						currentComponent = "tFileInputDelimited_10";

						tos_count_tFileInputDelimited_10++;

						/**
						 * [tFileInputDelimited_10 main ] stop
						 */
						// Start of branch "row9"
						if (row9 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								outt = null;

								// # Output table : 'outt'
								// # Filter conditions
								if (

								row9.C_NAME.length() > 0

								) {
									outt_tmp.C_HLEVEL = context.DB_StagingI2B2_DatabaseType
											.equalsIgnoreCase("postgres") ? row9.C_HLEVEL - 1
											: row9.C_HLEVEL;
									outt_tmp.C_FULLNAME = row9.C_FULLNAME;
									outt_tmp.C_NAME = row9.C_NAME;
									outt_tmp.C_SYNONYM_CD = row9.C_SYNONYM_CD;
									outt_tmp.C_VISUALATTRIBUTES = row9.C_VISUALATTRIBUTES;
									outt_tmp.C_TOTALNUM = row9.C_TOTALNUM;
									outt_tmp.C_BASECODE = row9.C_BASECODE;
									outt_tmp.C_METADATAXML = row9.C_METADATAXML;
									outt_tmp.C_FACTTABLECOLUMN = row9.C_FACTTABLECOLUMN;
									outt_tmp.C_TABLENAME = row9.C_TABLENAME;
									outt_tmp.C_COLUMNNAME = row9.C_COLUMNNAME;
									outt_tmp.C_COLUMNDATATYPE = row9.C_COLUMNDATATYPE;
									outt_tmp.C_OPERATOR = row9.C_OPERATOR;
									outt_tmp.C_DIMCODE = row9.C_DIMCODE;
									outt_tmp.C_COMMENT = row9.C_COMMENT;
									outt_tmp.C_TOOLTIP = row9.C_TOOLTIP;
									outt_tmp.M_APPLIED_PATH = row9.M_APPLIED_PATH;
									outt_tmp.UPDATE_DATE = row9.UPDATE_DATE;
									outt_tmp.DOWNLOAD_DATE = row9.DOWNLOAD_DATE;
									outt_tmp.IMPORT_DATE = row9.IMPORT_DATE;
									outt_tmp.SOURCESYSTEM_CD = row9.SOURCESYSTEM_CD;
									outt_tmp.VALUETYPE_CD = row9.VALUETYPE_CD;
									outt_tmp.M_EXCLUSION_CD = row9.M_EXCLUSION_CD;
									outt_tmp.C_PATH = row9.C_PATH;
									outt_tmp.C_SYMBOL = row9.C_SYMBOL;
									outt = outt_tmp;
								} // closing filter/reject
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */
							// Start of branch "outt"
							if (outt != null) {

								/**
								 * [tUniqRow_6 main ] start
								 */

								currentComponent = "tUniqRow_6";

								row24 = null;
								finder_tUniqRow_6.C_HLEVEL = outt.C_HLEVEL;
								if (outt.C_FULLNAME == null) {
									finder_tUniqRow_6.C_FULLNAME = null;
								} else {
									finder_tUniqRow_6.C_FULLNAME = outt.C_FULLNAME
											.toLowerCase();
								}
								finder_tUniqRow_6.hashCodeDirty = true;
								if (!keystUniqRow_6.contains(finder_tUniqRow_6)) {
									KeyStruct_tUniqRow_6 new_tUniqRow_6 = new KeyStruct_tUniqRow_6();

									new_tUniqRow_6.C_HLEVEL = outt.C_HLEVEL;
									if (outt.C_FULLNAME == null) {
										new_tUniqRow_6.C_FULLNAME = null;
									} else {
										new_tUniqRow_6.C_FULLNAME = outt.C_FULLNAME
												.toLowerCase();
									}

									keystUniqRow_6.add(new_tUniqRow_6);
									if (row24 == null) {
										row24 = new row24Struct();
									}
									row24.C_HLEVEL = outt.C_HLEVEL;
									row24.C_FULLNAME = outt.C_FULLNAME;
									row24.C_NAME = outt.C_NAME;
									row24.C_SYNONYM_CD = outt.C_SYNONYM_CD;
									row24.C_VISUALATTRIBUTES = outt.C_VISUALATTRIBUTES;
									row24.C_TOTALNUM = outt.C_TOTALNUM;
									row24.C_BASECODE = outt.C_BASECODE;
									row24.C_METADATAXML = outt.C_METADATAXML;
									row24.C_FACTTABLECOLUMN = outt.C_FACTTABLECOLUMN;
									row24.C_TABLENAME = outt.C_TABLENAME;
									row24.C_COLUMNNAME = outt.C_COLUMNNAME;
									row24.C_COLUMNDATATYPE = outt.C_COLUMNDATATYPE;
									row24.C_OPERATOR = outt.C_OPERATOR;
									row24.C_DIMCODE = outt.C_DIMCODE;
									row24.C_COMMENT = outt.C_COMMENT;
									row24.C_TOOLTIP = outt.C_TOOLTIP;
									row24.M_APPLIED_PATH = outt.M_APPLIED_PATH;
									row24.UPDATE_DATE = outt.UPDATE_DATE;
									row24.DOWNLOAD_DATE = outt.DOWNLOAD_DATE;
									row24.IMPORT_DATE = outt.IMPORT_DATE;
									row24.SOURCESYSTEM_CD = outt.SOURCESYSTEM_CD;
									row24.VALUETYPE_CD = outt.VALUETYPE_CD;
									row24.M_EXCLUSION_CD = outt.M_EXCLUSION_CD;
									row24.C_PATH = outt.C_PATH;
									row24.C_SYMBOL = outt.C_SYMBOL;
									nb_uniques_tUniqRow_6++;
								} else {
									nb_duplicates_tUniqRow_6++;
								}

								tos_count_tUniqRow_6++;

								/**
								 * [tUniqRow_6 main ] stop
								 */
								// Start of branch "row24"
								if (row24 != null) {

									/**
									 * [tJDBCOutput_2 main ] start
									 */

									currentComponent = "tJDBCOutput_2";

									whetherReject_tJDBCOutput_2 = false;
									if (row24.C_FULLNAME == null) {
										pstmt_tJDBCOutput_2.setNull(1,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_2.setString(1,
												row24.C_FULLNAME);
									}

									java.sql.ResultSet rs_tJDBCOutput_2 = pstmt_tJDBCOutput_2
											.executeQuery();
									int checkCount_tJDBCOutput_2 = -1;
									while (rs_tJDBCOutput_2.next()) {
										checkCount_tJDBCOutput_2 = rs_tJDBCOutput_2
												.getInt(1);
									}
									if (checkCount_tJDBCOutput_2 > 0) {
										pstmtUpdate_tJDBCOutput_2.setInt(1,
												row24.C_HLEVEL);

										if (row24.C_NAME == null) {
											pstmtUpdate_tJDBCOutput_2.setNull(
													2, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_2
													.setString(2, row24.C_NAME);
										}

										if (row24.C_SYNONYM_CD == null) {
											pstmtUpdate_tJDBCOutput_2.setNull(
													3, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_2
													.setString(3,
															row24.C_SYNONYM_CD);
										}

										if (row24.C_VISUALATTRIBUTES == null) {
											pstmtUpdate_tJDBCOutput_2.setNull(
													4, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_2
													.setString(
															4,
															row24.C_VISUALATTRIBUTES);
										}

										pstmtUpdate_tJDBCOutput_2
												.setBigDecimal(5,
														row24.C_TOTALNUM);

										if (row24.C_BASECODE == null) {
											pstmtUpdate_tJDBCOutput_2.setNull(
													6, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_2
													.setString(6,
															row24.C_BASECODE);
										}

										if (row24.C_METADATAXML == null) {
											pstmtUpdate_tJDBCOutput_2.setNull(
													7, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_2
													.setString(7,
															row24.C_METADATAXML);
										}

										if (row24.C_FACTTABLECOLUMN == null) {
											pstmtUpdate_tJDBCOutput_2.setNull(
													8, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_2
													.setString(
															8,
															row24.C_FACTTABLECOLUMN);
										}

										if (row24.C_TABLENAME == null) {
											pstmtUpdate_tJDBCOutput_2.setNull(
													9, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_2
													.setString(9,
															row24.C_TABLENAME);
										}

										if (row24.C_COLUMNNAME == null) {
											pstmtUpdate_tJDBCOutput_2.setNull(
													10, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_2
													.setString(10,
															row24.C_COLUMNNAME);
										}

										if (row24.C_COLUMNDATATYPE == null) {
											pstmtUpdate_tJDBCOutput_2.setNull(
													11, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_2
													.setString(
															11,
															row24.C_COLUMNDATATYPE);
										}

										if (row24.C_OPERATOR == null) {
											pstmtUpdate_tJDBCOutput_2.setNull(
													12, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_2
													.setString(12,
															row24.C_OPERATOR);
										}

										if (row24.C_DIMCODE == null) {
											pstmtUpdate_tJDBCOutput_2.setNull(
													13, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_2
													.setString(13,
															row24.C_DIMCODE);
										}

										if (row24.C_COMMENT == null) {
											pstmtUpdate_tJDBCOutput_2.setNull(
													14, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_2
													.setString(14,
															row24.C_COMMENT);
										}

										if (row24.C_TOOLTIP == null) {
											pstmtUpdate_tJDBCOutput_2.setNull(
													15, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_2
													.setString(15,
															row24.C_TOOLTIP);
										}

										if (row24.M_APPLIED_PATH == null) {
											pstmtUpdate_tJDBCOutput_2.setNull(
													16, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_2
													.setString(
															16,
															row24.M_APPLIED_PATH);
										}

										if (row24.UPDATE_DATE != null) {
											pstmtUpdate_tJDBCOutput_2
													.setTimestamp(
															17,
															new java.sql.Timestamp(
																	row24.UPDATE_DATE
																			.getTime()));
										} else {
											pstmtUpdate_tJDBCOutput_2.setNull(
													17, java.sql.Types.DATE);
										}

										if (row24.DOWNLOAD_DATE != null) {
											pstmtUpdate_tJDBCOutput_2
													.setTimestamp(
															18,
															new java.sql.Timestamp(
																	row24.DOWNLOAD_DATE
																			.getTime()));
										} else {
											pstmtUpdate_tJDBCOutput_2.setNull(
													18, java.sql.Types.DATE);
										}

										if (row24.IMPORT_DATE != null) {
											pstmtUpdate_tJDBCOutput_2
													.setTimestamp(
															19,
															new java.sql.Timestamp(
																	row24.IMPORT_DATE
																			.getTime()));
										} else {
											pstmtUpdate_tJDBCOutput_2.setNull(
													19, java.sql.Types.DATE);
										}

										if (row24.SOURCESYSTEM_CD == null) {
											pstmtUpdate_tJDBCOutput_2.setNull(
													20, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_2
													.setString(
															20,
															row24.SOURCESYSTEM_CD);
										}

										if (row24.VALUETYPE_CD == null) {
											pstmtUpdate_tJDBCOutput_2.setNull(
													21, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_2
													.setString(21,
															row24.VALUETYPE_CD);
										}

										if (row24.M_EXCLUSION_CD == null) {
											pstmtUpdate_tJDBCOutput_2.setNull(
													22, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_2
													.setString(
															22,
															row24.M_EXCLUSION_CD);
										}

										if (row24.C_PATH == null) {
											pstmtUpdate_tJDBCOutput_2.setNull(
													23, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_2
													.setString(23, row24.C_PATH);
										}

										if (row24.C_SYMBOL == null) {
											pstmtUpdate_tJDBCOutput_2.setNull(
													24, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_2
													.setString(24,
															row24.C_SYMBOL);
										}

										if (row24.C_FULLNAME == null) {
											pstmtUpdate_tJDBCOutput_2.setNull(
													25, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_2
													.setString(25,
															row24.C_FULLNAME);
										}

										try {
											updatedCount_tJDBCOutput_2 = updatedCount_tJDBCOutput_2
													+ pstmtUpdate_tJDBCOutput_2
															.executeUpdate();
										} catch (java.lang.Exception e) {
											whetherReject_tJDBCOutput_2 = true;
											throw (e);
										}
									} else {
										pstmtInsert_tJDBCOutput_2.setInt(1,
												row24.C_HLEVEL);

										if (row24.C_FULLNAME == null) {
											pstmtInsert_tJDBCOutput_2.setNull(
													2, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_2
													.setString(2,
															row24.C_FULLNAME);
										}

										if (row24.C_NAME == null) {
											pstmtInsert_tJDBCOutput_2.setNull(
													3, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_2
													.setString(3, row24.C_NAME);
										}

										if (row24.C_SYNONYM_CD == null) {
											pstmtInsert_tJDBCOutput_2.setNull(
													4, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_2
													.setString(4,
															row24.C_SYNONYM_CD);
										}

										if (row24.C_VISUALATTRIBUTES == null) {
											pstmtInsert_tJDBCOutput_2.setNull(
													5, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_2
													.setString(
															5,
															row24.C_VISUALATTRIBUTES);
										}

										pstmtInsert_tJDBCOutput_2
												.setBigDecimal(6,
														row24.C_TOTALNUM);

										if (row24.C_BASECODE == null) {
											pstmtInsert_tJDBCOutput_2.setNull(
													7, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_2
													.setString(7,
															row24.C_BASECODE);
										}

										if (row24.C_METADATAXML == null) {
											pstmtInsert_tJDBCOutput_2.setNull(
													8, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_2
													.setString(8,
															row24.C_METADATAXML);
										}

										if (row24.C_FACTTABLECOLUMN == null) {
											pstmtInsert_tJDBCOutput_2.setNull(
													9, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_2
													.setString(
															9,
															row24.C_FACTTABLECOLUMN);
										}

										if (row24.C_TABLENAME == null) {
											pstmtInsert_tJDBCOutput_2.setNull(
													10, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_2
													.setString(10,
															row24.C_TABLENAME);
										}

										if (row24.C_COLUMNNAME == null) {
											pstmtInsert_tJDBCOutput_2.setNull(
													11, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_2
													.setString(11,
															row24.C_COLUMNNAME);
										}

										if (row24.C_COLUMNDATATYPE == null) {
											pstmtInsert_tJDBCOutput_2.setNull(
													12, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_2
													.setString(
															12,
															row24.C_COLUMNDATATYPE);
										}

										if (row24.C_OPERATOR == null) {
											pstmtInsert_tJDBCOutput_2.setNull(
													13, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_2
													.setString(13,
															row24.C_OPERATOR);
										}

										if (row24.C_DIMCODE == null) {
											pstmtInsert_tJDBCOutput_2.setNull(
													14, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_2
													.setString(14,
															row24.C_DIMCODE);
										}

										if (row24.C_COMMENT == null) {
											pstmtInsert_tJDBCOutput_2.setNull(
													15, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_2
													.setString(15,
															row24.C_COMMENT);
										}

										if (row24.C_TOOLTIP == null) {
											pstmtInsert_tJDBCOutput_2.setNull(
													16, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_2
													.setString(16,
															row24.C_TOOLTIP);
										}

										if (row24.M_APPLIED_PATH == null) {
											pstmtInsert_tJDBCOutput_2.setNull(
													17, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_2
													.setString(
															17,
															row24.M_APPLIED_PATH);
										}

										if (row24.UPDATE_DATE != null) {
											pstmtInsert_tJDBCOutput_2
													.setTimestamp(
															18,
															new java.sql.Timestamp(
																	row24.UPDATE_DATE
																			.getTime()));
										} else {
											pstmtInsert_tJDBCOutput_2.setNull(
													18, java.sql.Types.DATE);
										}

										if (row24.DOWNLOAD_DATE != null) {
											pstmtInsert_tJDBCOutput_2
													.setTimestamp(
															19,
															new java.sql.Timestamp(
																	row24.DOWNLOAD_DATE
																			.getTime()));
										} else {
											pstmtInsert_tJDBCOutput_2.setNull(
													19, java.sql.Types.DATE);
										}

										if (row24.IMPORT_DATE != null) {
											pstmtInsert_tJDBCOutput_2
													.setTimestamp(
															20,
															new java.sql.Timestamp(
																	row24.IMPORT_DATE
																			.getTime()));
										} else {
											pstmtInsert_tJDBCOutput_2.setNull(
													20, java.sql.Types.DATE);
										}

										if (row24.SOURCESYSTEM_CD == null) {
											pstmtInsert_tJDBCOutput_2.setNull(
													21, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_2
													.setString(
															21,
															row24.SOURCESYSTEM_CD);
										}

										if (row24.VALUETYPE_CD == null) {
											pstmtInsert_tJDBCOutput_2.setNull(
													22, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_2
													.setString(22,
															row24.VALUETYPE_CD);
										}

										if (row24.M_EXCLUSION_CD == null) {
											pstmtInsert_tJDBCOutput_2.setNull(
													23, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_2
													.setString(
															23,
															row24.M_EXCLUSION_CD);
										}

										if (row24.C_PATH == null) {
											pstmtInsert_tJDBCOutput_2.setNull(
													24, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_2
													.setString(24, row24.C_PATH);
										}

										if (row24.C_SYMBOL == null) {
											pstmtInsert_tJDBCOutput_2.setNull(
													25, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_2
													.setString(25,
															row24.C_SYMBOL);
										}

										try {
											insertedCount_tJDBCOutput_2 = insertedCount_tJDBCOutput_2
													+ pstmtInsert_tJDBCOutput_2
															.executeUpdate();
										} catch (java.lang.Exception e) {
											whetherReject_tJDBCOutput_2 = true;
											throw (e);
										}
									}
									nb_line_tJDBCOutput_2++;
									if (!whetherReject_tJDBCOutput_2) {
									}

									tos_count_tJDBCOutput_2++;

									/**
									 * [tJDBCOutput_2 main ] stop
									 */

								} // End of branch "row24"

							} // End of branch "outt"

						} // End of branch "row9"

						/**
						 * [tFileInputDelimited_10 end ] start
						 */

						currentComponent = "tFileInputDelimited_10";

						nb_line_tFileInputDelimited_10++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_10 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_10 != null) {
							csvReadertFileInputDelimited_10.close();
						}
					}
					if (csvReadertFileInputDelimited_10 != null) {
						globalMap.put("tFileInputDelimited_10_NB_LINE",
								nb_line_tFileInputDelimited_10);
					}
				}

				ok_Hash.put("tFileInputDelimited_10", true);
				end_Hash.put("tFileInputDelimited_10",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_10 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tUniqRow_6 end ] start
				 */

				currentComponent = "tUniqRow_6";

				globalMap.put("tUniqRow_6_NB_UNIQUES", nb_uniques_tUniqRow_6);
				globalMap.put("tUniqRow_6_NB_DUPLICATES",
						nb_duplicates_tUniqRow_6);

				ok_Hash.put("tUniqRow_6", true);
				end_Hash.put("tUniqRow_6", System.currentTimeMillis());

				/**
				 * [tUniqRow_6 end ] stop
				 */

				/**
				 * [tJDBCOutput_2 end ] start
				 */

				currentComponent = "tJDBCOutput_2";

				if (pstmtUpdate_tJDBCOutput_2 != null) {

					pstmtUpdate_tJDBCOutput_2.close();

				}
				if (pstmtInsert_tJDBCOutput_2 != null) {

					pstmtInsert_tJDBCOutput_2.close();

				}
				if (pstmt_tJDBCOutput_2 != null) {

					pstmt_tJDBCOutput_2.close();

				}

				nb_line_deleted_tJDBCOutput_2 = nb_line_deleted_tJDBCOutput_2
						+ deletedCount_tJDBCOutput_2;
				nb_line_update_tJDBCOutput_2 = nb_line_update_tJDBCOutput_2
						+ updatedCount_tJDBCOutput_2;
				nb_line_inserted_tJDBCOutput_2 = nb_line_inserted_tJDBCOutput_2
						+ insertedCount_tJDBCOutput_2;
				nb_line_rejected_tJDBCOutput_2 = nb_line_rejected_tJDBCOutput_2
						+ rejectedCount_tJDBCOutput_2;

				globalMap.put("tJDBCOutput_2_NB_LINE", nb_line_tJDBCOutput_2);
				globalMap.put("tJDBCOutput_2_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_2);
				globalMap.put("tJDBCOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_2);
				globalMap.put("tJDBCOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_2);
				globalMap.put("tJDBCOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_2);

				ok_Hash.put("tJDBCOutput_2", true);
				end_Hash.put("tJDBCOutput_2", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_10:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_9Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_10_SUBPROCESS_STATE", 1);
	}

	public void tJava_9Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_9 begin ] start
				 */

				ok_Hash.put("tJava_9", false);
				start_Hash.put("tJava_9", System.currentTimeMillis());
				currentComponent = "tJava_9";

				int tos_count_tJava_9 = 0;

				context.currentTable = context.DB_StagingI2B2_DatabaseType
						.equalsIgnoreCase("postgres") ? "i2b2demodata.encounter_mapping"
						: (context.DB_StagingI2B2_Schema + ".encounter_mapping");
				System.out
						.println("Starting Import: Patient/Encounter Mapping/Dimension");
				StatusListener.setSubStatus(30.0f, (int) (float) (30.0f) + "%");

				/**
				 * [tJava_9 begin ] stop
				 */
				/**
				 * [tJava_9 main ] start
				 */

				currentComponent = "tJava_9";

				tos_count_tJava_9++;

				/**
				 * [tJava_9 main ] stop
				 */
				/**
				 * [tJava_9 end ] start
				 */

				currentComponent = "tJava_9";

				ok_Hash.put("tJava_9", true);
				end_Hash.put("tJava_9", System.currentTimeMillis());

				/**
				 * [tJava_9 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_9:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_12Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_9_SUBPROCESS_STATE", 1);
	}

	public static class row21Struct implements
			routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];

		public String ENCOUNTER_IDE;

		public String getENCOUNTER_IDE() {
			return this.ENCOUNTER_IDE;
		}

		public String ENCOUNTER_IDE_SOURCE;

		public String getENCOUNTER_IDE_SOURCE() {
			return this.ENCOUNTER_IDE_SOURCE;
		}

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public String ENCOUNTER_IDE_STATUS;

		public String getENCOUNTER_IDE_STATUS() {
			return this.ENCOUNTER_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length);
				strReturn = new String(
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_IDE = readString(dis);

					this.ENCOUNTER_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ENCOUNTER_IDE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_IDE=" + ENCOUNTER_IDE);
			sb.append(",ENCOUNTER_IDE_SOURCE=" + ENCOUNTER_IDE_SOURCE);
			sb.append(",ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",ENCOUNTER_IDE_STATUS=" + ENCOUNTER_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];

		public String ENCOUNTER_IDE;

		public String getENCOUNTER_IDE() {
			return this.ENCOUNTER_IDE;
		}

		public String ENCOUNTER_IDE_SOURCE;

		public String getENCOUNTER_IDE_SOURCE() {
			return this.ENCOUNTER_IDE_SOURCE;
		}

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public String ENCOUNTER_IDE_STATUS;

		public String getENCOUNTER_IDE_STATUS() {
			return this.ENCOUNTER_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length);
				strReturn = new String(
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_IDE = readString(dis);

					this.ENCOUNTER_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.ENCOUNTER_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ENCOUNTER_IDE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// String

				writeString(this.ENCOUNTER_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_IDE=" + ENCOUNTER_IDE);
			sb.append(",ENCOUNTER_IDE_SOURCE=" + ENCOUNTER_IDE_SOURCE);
			sb.append(",ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",ENCOUNTER_IDE_STATUS=" + ENCOUNTER_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_12Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row13Struct row13 = new row13Struct();
				row21Struct row21 = new row21Struct();

				/**
				 * [tJDBCOutput_3 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_3", false);
				start_Hash.put("tJDBCOutput_3", System.currentTimeMillis());
				currentComponent = "tJDBCOutput_3";

				int tos_count_tJDBCOutput_3 = 0;

				int updateKeyCount_tJDBCOutput_3 = 2;
				if (updateKeyCount_tJDBCOutput_3 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tJDBCOutput_3 = 0;
				int nb_line_update_tJDBCOutput_3 = 0;
				int nb_line_inserted_tJDBCOutput_3 = 0;
				int nb_line_deleted_tJDBCOutput_3 = 0;
				int nb_line_rejected_tJDBCOutput_3 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_3 = 0;

				int deletedCount_tJDBCOutput_3 = 0;
				int updatedCount_tJDBCOutput_3 = 0;
				int insertedCount_tJDBCOutput_3 = 0;
				int rejectedCount_tJDBCOutput_3 = 0;

				boolean whetherReject_tJDBCOutput_3 = false;

				java.sql.Connection connection_tJDBCOutput_3 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");
				if (null == connection_tJDBCOutput_3) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCOutput_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					connection_tJDBCOutput_3 = dataSources_tJDBCOutput_3
							.get("").getConnection();
				}

				int batchSize_tJDBCOutput_3 = 10000;
				int batchSizeCounter_tJDBCOutput_3 = 0;

				java.sql.PreparedStatement pstmt_tJDBCOutput_3 = connection_tJDBCOutput_3
						.prepareStatement("SELECT COUNT(1) FROM "
								+ context.currentTable
								+ " WHERE ENCOUNTER_IDE = ? AND ENCOUNTER_IDE_SOURCE = ?");
				String insert_tJDBCOutput_3 = "INSERT INTO "
						+ context.currentTable
						+ " (ENCOUNTER_IDE,ENCOUNTER_IDE_SOURCE,ENCOUNTER_NUM,PATIENT_IDE,PATIENT_IDE_SOURCE,ENCOUNTER_IDE_STATUS,UPLOAD_DATE,UPDATE_DATE,DOWNLOAD_DATE,IMPORT_DATE,SOURCESYSTEM_CD,UPLOAD_ID) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tJDBCOutput_3 = connection_tJDBCOutput_3
						.prepareStatement(insert_tJDBCOutput_3);
				String update_tJDBCOutput_3 = "UPDATE "
						+ context.currentTable
						+ " SET ENCOUNTER_NUM = ?,PATIENT_IDE = ?,PATIENT_IDE_SOURCE = ?,ENCOUNTER_IDE_STATUS = ?,UPLOAD_DATE = ?,UPDATE_DATE = ?,DOWNLOAD_DATE = ?,IMPORT_DATE = ?,SOURCESYSTEM_CD = ?,UPLOAD_ID = ? WHERE ENCOUNTER_IDE = ? AND ENCOUNTER_IDE_SOURCE = ?";
				java.sql.PreparedStatement pstmtUpdate_tJDBCOutput_3 = connection_tJDBCOutput_3
						.prepareStatement(update_tJDBCOutput_3);

				/**
				 * [tJDBCOutput_3 begin ] stop
				 */

				/**
				 * [tUniqRow_4 begin ] start
				 */

				ok_Hash.put("tUniqRow_4", false);
				start_Hash.put("tUniqRow_4", System.currentTimeMillis());
				currentComponent = "tUniqRow_4";

				int tos_count_tUniqRow_4 = 0;

				class KeyStruct_tUniqRow_4 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String ENCOUNTER_IDE;
					String ENCOUNTER_IDE_SOURCE;
					BigDecimal ENCOUNTER_NUM;
					String PATIENT_IDE;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.ENCOUNTER_IDE == null) ? 0
											: this.ENCOUNTER_IDE.hashCode());

							result = prime
									* result
									+ ((this.ENCOUNTER_IDE_SOURCE == null) ? 0
											: this.ENCOUNTER_IDE_SOURCE
													.hashCode());

							result = prime
									* result
									+ ((this.ENCOUNTER_NUM == null) ? 0
											: this.ENCOUNTER_NUM.hashCode());

							result = prime
									* result
									+ ((this.PATIENT_IDE == null) ? 0
											: this.PATIENT_IDE.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_4 other = (KeyStruct_tUniqRow_4) obj;

						if (this.ENCOUNTER_IDE == null) {
							if (other.ENCOUNTER_IDE != null)
								return false;
						} else if (!this.ENCOUNTER_IDE
								.equals(other.ENCOUNTER_IDE))
							return false;

						if (this.ENCOUNTER_IDE_SOURCE == null) {
							if (other.ENCOUNTER_IDE_SOURCE != null)
								return false;
						} else if (!this.ENCOUNTER_IDE_SOURCE
								.equals(other.ENCOUNTER_IDE_SOURCE))
							return false;

						if (this.ENCOUNTER_NUM == null) {
							if (other.ENCOUNTER_NUM != null)
								return false;
						} else if (!this.ENCOUNTER_NUM
								.equals(other.ENCOUNTER_NUM))
							return false;

						if (this.PATIENT_IDE == null) {
							if (other.PATIENT_IDE != null)
								return false;
						} else if (!this.PATIENT_IDE.equals(other.PATIENT_IDE))
							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_4 = 0;
				int nb_duplicates_tUniqRow_4 = 0;
				KeyStruct_tUniqRow_4 finder_tUniqRow_4 = new KeyStruct_tUniqRow_4();
				java.util.Set<KeyStruct_tUniqRow_4> keystUniqRow_4 = new java.util.HashSet<KeyStruct_tUniqRow_4>();

				/**
				 * [tUniqRow_4 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_12 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_12", false);
				start_Hash.put("tFileInputDelimited_12",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_12";

				int tos_count_tFileInputDelimited_12 = 0;

				int nb_line_tFileInputDelimited_12 = 0;
				int footer_tFileInputDelimited_12 = 0;
				int totalLinetFileInputDelimited_12 = 0;
				int limittFileInputDelimited_12 = -1;
				int lastLinetFileInputDelimited_12 = -1;

				char fieldSeparator_tFileInputDelimited_12[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_12 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_12[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_12 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_12 = /**
				 * Start field
				 * tFileInputDelimited_12:FILENAME
				 */
				context.folderMain + context.folderOutput
						+ "encounter_mapping.csv"/**
				 * End field
				 * tFileInputDelimited_12:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_12 = null;

				try {

					String[] rowtFileInputDelimited_12 = null;
					int currentLinetFileInputDelimited_12 = 0;
					int outputLinetFileInputDelimited_12 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_12 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_12 = 0;
							if (footer_value_tFileInputDelimited_12 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_12 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_12,
									fieldSeparator_tFileInputDelimited_12[0],
									context.coding);
						} else {
							csvReadertFileInputDelimited_12 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_12)),
													context.coding)),
									fieldSeparator_tFileInputDelimited_12[0]);
						}

						csvReadertFileInputDelimited_12
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_12[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_12[0] != '\r'))
							csvReadertFileInputDelimited_12.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_12[0]);

						csvReadertFileInputDelimited_12.setQuoteChar('"');

						csvReadertFileInputDelimited_12
								.setEscapeChar(csvReadertFileInputDelimited_12
										.getQuoteChar());

						if (footer_tFileInputDelimited_12 > 0) {
							for (totalLinetFileInputDelimited_12 = 0; totalLinetFileInputDelimited_12 < 1; totalLinetFileInputDelimited_12++) {
								csvReadertFileInputDelimited_12.readNext();
							}
							csvReadertFileInputDelimited_12
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_12.readNext()) {

								rowtFileInputDelimited_12 = csvReadertFileInputDelimited_12
										.getValues();
								if (!(rowtFileInputDelimited_12.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_12[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_12++;

								}

							}
							int lastLineTemptFileInputDelimited_12 = totalLinetFileInputDelimited_12
									- footer_tFileInputDelimited_12 < 0 ? 0
									: totalLinetFileInputDelimited_12
											- footer_tFileInputDelimited_12;
							if (lastLinetFileInputDelimited_12 > 0) {
								lastLinetFileInputDelimited_12 = lastLinetFileInputDelimited_12 < lastLineTemptFileInputDelimited_12 ? lastLinetFileInputDelimited_12
										: lastLineTemptFileInputDelimited_12;
							} else {
								lastLinetFileInputDelimited_12 = lastLineTemptFileInputDelimited_12;
							}

							csvReadertFileInputDelimited_12.close();
							if (filename_tFileInputDelimited_12 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_12 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_12,
										fieldSeparator_tFileInputDelimited_12[0],
										context.coding);
							} else {
								csvReadertFileInputDelimited_12 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_12)),
														context.coding)),
										fieldSeparator_tFileInputDelimited_12[0]);
							}
							csvReadertFileInputDelimited_12
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_12[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_12[0] != '\r'))
								csvReadertFileInputDelimited_12
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_12[0]);

							csvReadertFileInputDelimited_12.setQuoteChar('"');

							csvReadertFileInputDelimited_12
									.setEscapeChar(csvReadertFileInputDelimited_12
											.getQuoteChar());

						}

						if (limittFileInputDelimited_12 != 0) {
							for (currentLinetFileInputDelimited_12 = 0; currentLinetFileInputDelimited_12 < 1; currentLinetFileInputDelimited_12++) {
								csvReadertFileInputDelimited_12.readNext();
							}
						}
						csvReadertFileInputDelimited_12
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_12 != 0
							&& csvReadertFileInputDelimited_12 != null
							&& csvReadertFileInputDelimited_12.readNext()) {

						rowtFileInputDelimited_12 = csvReadertFileInputDelimited_12
								.getValues();

						if (rowtFileInputDelimited_12.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_12[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_12++;

						if (lastLinetFileInputDelimited_12 > -1
								&& currentLinetFileInputDelimited_12 > lastLinetFileInputDelimited_12) {
							break;
						}
						outputLinetFileInputDelimited_12++;
						if (limittFileInputDelimited_12 > 0
								&& outputLinetFileInputDelimited_12 > limittFileInputDelimited_12) {
							break;
						}

						row13 = null;

						boolean whetherReject_tFileInputDelimited_12 = false;
						row13 = new row13Struct();
						try {

							if (rowtFileInputDelimited_12.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_12[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row13.ENCOUNTER_IDE = null;

								row13.ENCOUNTER_IDE_SOURCE = null;

								row13.ENCOUNTER_NUM = null;

								row13.PATIENT_IDE = null;

								row13.PATIENT_IDE_SOURCE = null;

								row13.ENCOUNTER_IDE_STATUS = null;

								row13.UPLOAD_DATE = null;

								row13.UPDATE_DATE = null;

								row13.DOWNLOAD_DATE = null;

								row13.IMPORT_DATE = null;

								row13.SOURCESYSTEM_CD = null;

								row13.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_12 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_12 = 0;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row13.ENCOUNTER_IDE = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row13.ENCOUNTER_IDE = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 1;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row13.ENCOUNTER_IDE_SOURCE = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row13.ENCOUNTER_IDE_SOURCE = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 2;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									if (rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]
											.length() > 0) {

										row13.ENCOUNTER_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]);

									} else {
										row13.ENCOUNTER_NUM = null;
									}

								} else {
									row13.ENCOUNTER_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 3;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row13.PATIENT_IDE = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row13.PATIENT_IDE = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 4;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row13.PATIENT_IDE_SOURCE = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row13.PATIENT_IDE_SOURCE = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 5;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row13.ENCOUNTER_IDE_STATUS = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row13.ENCOUNTER_IDE_STATUS = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 6;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									if (rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]
											.length() > 0) {

										row13.UPLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12],
														"dd-MM-yyyy");

									} else {
										row13.UPLOAD_DATE = null;
									}

								} else {
									row13.UPLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 7;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									if (rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]
											.length() > 0) {

										row13.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12],
														"dd-MM-yyyy");

									} else {
										row13.UPDATE_DATE = null;
									}

								} else {
									row13.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 8;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									if (rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]
											.length() > 0) {

										row13.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12],
														"dd-MM-yyyy");

									} else {
										row13.DOWNLOAD_DATE = null;
									}

								} else {
									row13.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 9;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									if (rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]
											.length() > 0) {

										row13.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12],
														"dd-MM-yyyy");

									} else {
										row13.IMPORT_DATE = null;
									}

								} else {
									row13.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 10;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row13.SOURCESYSTEM_CD = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {
									row13.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_12 = 11;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									if (rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]
											.length() > 0) {

										row13.UPLOAD_ID = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]);

									} else {
										row13.UPLOAD_ID = null;
									}

								} else {
									row13.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_12 = true;

							System.err.println(e.getMessage());
							row13 = null;

						}

						/**
						 * [tFileInputDelimited_12 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_12 main ] start
						 */

						currentComponent = "tFileInputDelimited_12";

						tos_count_tFileInputDelimited_12++;

						/**
						 * [tFileInputDelimited_12 main ] stop
						 */
						// Start of branch "row13"
						if (row13 != null) {

							/**
							 * [tUniqRow_4 main ] start
							 */

							currentComponent = "tUniqRow_4";

							row21 = null;
							if (row13.ENCOUNTER_IDE == null) {
								finder_tUniqRow_4.ENCOUNTER_IDE = null;
							} else {
								finder_tUniqRow_4.ENCOUNTER_IDE = row13.ENCOUNTER_IDE
										.toLowerCase();
							}
							if (row13.ENCOUNTER_IDE_SOURCE == null) {
								finder_tUniqRow_4.ENCOUNTER_IDE_SOURCE = null;
							} else {
								finder_tUniqRow_4.ENCOUNTER_IDE_SOURCE = row13.ENCOUNTER_IDE_SOURCE
										.toLowerCase();
							}
							finder_tUniqRow_4.ENCOUNTER_NUM = row13.ENCOUNTER_NUM;
							if (row13.PATIENT_IDE == null) {
								finder_tUniqRow_4.PATIENT_IDE = null;
							} else {
								finder_tUniqRow_4.PATIENT_IDE = row13.PATIENT_IDE
										.toLowerCase();
							}
							finder_tUniqRow_4.hashCodeDirty = true;
							if (!keystUniqRow_4.contains(finder_tUniqRow_4)) {
								KeyStruct_tUniqRow_4 new_tUniqRow_4 = new KeyStruct_tUniqRow_4();

								if (row13.ENCOUNTER_IDE == null) {
									new_tUniqRow_4.ENCOUNTER_IDE = null;
								} else {
									new_tUniqRow_4.ENCOUNTER_IDE = row13.ENCOUNTER_IDE
											.toLowerCase();
								}
								if (row13.ENCOUNTER_IDE_SOURCE == null) {
									new_tUniqRow_4.ENCOUNTER_IDE_SOURCE = null;
								} else {
									new_tUniqRow_4.ENCOUNTER_IDE_SOURCE = row13.ENCOUNTER_IDE_SOURCE
											.toLowerCase();
								}
								new_tUniqRow_4.ENCOUNTER_NUM = row13.ENCOUNTER_NUM;
								if (row13.PATIENT_IDE == null) {
									new_tUniqRow_4.PATIENT_IDE = null;
								} else {
									new_tUniqRow_4.PATIENT_IDE = row13.PATIENT_IDE
											.toLowerCase();
								}

								keystUniqRow_4.add(new_tUniqRow_4);
								if (row21 == null) {
									row21 = new row21Struct();
								}
								row21.ENCOUNTER_IDE = row13.ENCOUNTER_IDE;
								row21.ENCOUNTER_IDE_SOURCE = row13.ENCOUNTER_IDE_SOURCE;
								row21.ENCOUNTER_NUM = row13.ENCOUNTER_NUM;
								row21.PATIENT_IDE = row13.PATIENT_IDE;
								row21.PATIENT_IDE_SOURCE = row13.PATIENT_IDE_SOURCE;
								row21.ENCOUNTER_IDE_STATUS = row13.ENCOUNTER_IDE_STATUS;
								row21.UPLOAD_DATE = row13.UPLOAD_DATE;
								row21.UPDATE_DATE = row13.UPDATE_DATE;
								row21.DOWNLOAD_DATE = row13.DOWNLOAD_DATE;
								row21.IMPORT_DATE = row13.IMPORT_DATE;
								row21.SOURCESYSTEM_CD = row13.SOURCESYSTEM_CD;
								row21.UPLOAD_ID = row13.UPLOAD_ID;
								nb_uniques_tUniqRow_4++;
							} else {
								nb_duplicates_tUniqRow_4++;
							}

							tos_count_tUniqRow_4++;

							/**
							 * [tUniqRow_4 main ] stop
							 */
							// Start of branch "row21"
							if (row21 != null) {

								/**
								 * [tJDBCOutput_3 main ] start
								 */

								currentComponent = "tJDBCOutput_3";

								whetherReject_tJDBCOutput_3 = false;
								if (row21.ENCOUNTER_IDE == null) {
									pstmt_tJDBCOutput_3.setNull(1,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_3.setString(1,
											row21.ENCOUNTER_IDE);
								}

								if (row21.ENCOUNTER_IDE_SOURCE == null) {
									pstmt_tJDBCOutput_3.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_3.setString(2,
											row21.ENCOUNTER_IDE_SOURCE);
								}

								java.sql.ResultSet rs_tJDBCOutput_3 = pstmt_tJDBCOutput_3
										.executeQuery();
								int checkCount_tJDBCOutput_3 = -1;
								while (rs_tJDBCOutput_3.next()) {
									checkCount_tJDBCOutput_3 = rs_tJDBCOutput_3
											.getInt(1);
								}
								if (checkCount_tJDBCOutput_3 > 0) {
									pstmtUpdate_tJDBCOutput_3.setBigDecimal(1,
											row21.ENCOUNTER_NUM);

									if (row21.PATIENT_IDE == null) {
										pstmtUpdate_tJDBCOutput_3.setNull(2,
												java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tJDBCOutput_3.setString(2,
												row21.PATIENT_IDE);
									}

									if (row21.PATIENT_IDE_SOURCE == null) {
										pstmtUpdate_tJDBCOutput_3.setNull(3,
												java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tJDBCOutput_3.setString(3,
												row21.PATIENT_IDE_SOURCE);
									}

									if (row21.ENCOUNTER_IDE_STATUS == null) {
										pstmtUpdate_tJDBCOutput_3.setNull(4,
												java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tJDBCOutput_3.setString(4,
												row21.ENCOUNTER_IDE_STATUS);
									}

									if (row21.UPLOAD_DATE != null) {
										pstmtUpdate_tJDBCOutput_3.setTimestamp(
												5,
												new java.sql.Timestamp(
														row21.UPLOAD_DATE
																.getTime()));
									} else {
										pstmtUpdate_tJDBCOutput_3.setNull(5,
												java.sql.Types.DATE);
									}

									if (row21.UPDATE_DATE != null) {
										pstmtUpdate_tJDBCOutput_3.setTimestamp(
												6,
												new java.sql.Timestamp(
														row21.UPDATE_DATE
																.getTime()));
									} else {
										pstmtUpdate_tJDBCOutput_3.setNull(6,
												java.sql.Types.DATE);
									}

									if (row21.DOWNLOAD_DATE != null) {
										pstmtUpdate_tJDBCOutput_3.setTimestamp(
												7,
												new java.sql.Timestamp(
														row21.DOWNLOAD_DATE
																.getTime()));
									} else {
										pstmtUpdate_tJDBCOutput_3.setNull(7,
												java.sql.Types.DATE);
									}

									if (row21.IMPORT_DATE != null) {
										pstmtUpdate_tJDBCOutput_3.setTimestamp(
												8,
												new java.sql.Timestamp(
														row21.IMPORT_DATE
																.getTime()));
									} else {
										pstmtUpdate_tJDBCOutput_3.setNull(8,
												java.sql.Types.DATE);
									}

									if (row21.SOURCESYSTEM_CD == null) {
										pstmtUpdate_tJDBCOutput_3.setNull(9,
												java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tJDBCOutput_3.setString(9,
												row21.SOURCESYSTEM_CD);
									}

									if (row21.UPLOAD_ID == null) {
										pstmtUpdate_tJDBCOutput_3.setNull(10,
												java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tJDBCOutput_3.setInt(10,
												row21.UPLOAD_ID);
									}

									if (row21.ENCOUNTER_IDE == null) {
										pstmtUpdate_tJDBCOutput_3.setNull(11,
												java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tJDBCOutput_3.setString(11,
												row21.ENCOUNTER_IDE);
									}

									if (row21.ENCOUNTER_IDE_SOURCE == null) {
										pstmtUpdate_tJDBCOutput_3.setNull(12,
												java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tJDBCOutput_3.setString(12,
												row21.ENCOUNTER_IDE_SOURCE);
									}

									try {
										updatedCount_tJDBCOutput_3 = updatedCount_tJDBCOutput_3
												+ pstmtUpdate_tJDBCOutput_3
														.executeUpdate();
									} catch (java.lang.Exception e) {
										whetherReject_tJDBCOutput_3 = true;
										throw (e);
									}
								} else {
									if (row21.ENCOUNTER_IDE == null) {
										pstmtInsert_tJDBCOutput_3.setNull(1,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tJDBCOutput_3.setString(1,
												row21.ENCOUNTER_IDE);
									}

									if (row21.ENCOUNTER_IDE_SOURCE == null) {
										pstmtInsert_tJDBCOutput_3.setNull(2,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tJDBCOutput_3.setString(2,
												row21.ENCOUNTER_IDE_SOURCE);
									}

									pstmtInsert_tJDBCOutput_3.setBigDecimal(3,
											row21.ENCOUNTER_NUM);

									if (row21.PATIENT_IDE == null) {
										pstmtInsert_tJDBCOutput_3.setNull(4,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tJDBCOutput_3.setString(4,
												row21.PATIENT_IDE);
									}

									if (row21.PATIENT_IDE_SOURCE == null) {
										pstmtInsert_tJDBCOutput_3.setNull(5,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tJDBCOutput_3.setString(5,
												row21.PATIENT_IDE_SOURCE);
									}

									if (row21.ENCOUNTER_IDE_STATUS == null) {
										pstmtInsert_tJDBCOutput_3.setNull(6,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tJDBCOutput_3.setString(6,
												row21.ENCOUNTER_IDE_STATUS);
									}

									if (row21.UPLOAD_DATE != null) {
										pstmtInsert_tJDBCOutput_3.setTimestamp(
												7,
												new java.sql.Timestamp(
														row21.UPLOAD_DATE
																.getTime()));
									} else {
										pstmtInsert_tJDBCOutput_3.setNull(7,
												java.sql.Types.DATE);
									}

									if (row21.UPDATE_DATE != null) {
										pstmtInsert_tJDBCOutput_3.setTimestamp(
												8,
												new java.sql.Timestamp(
														row21.UPDATE_DATE
																.getTime()));
									} else {
										pstmtInsert_tJDBCOutput_3.setNull(8,
												java.sql.Types.DATE);
									}

									if (row21.DOWNLOAD_DATE != null) {
										pstmtInsert_tJDBCOutput_3.setTimestamp(
												9,
												new java.sql.Timestamp(
														row21.DOWNLOAD_DATE
																.getTime()));
									} else {
										pstmtInsert_tJDBCOutput_3.setNull(9,
												java.sql.Types.DATE);
									}

									if (row21.IMPORT_DATE != null) {
										pstmtInsert_tJDBCOutput_3.setTimestamp(
												10,
												new java.sql.Timestamp(
														row21.IMPORT_DATE
																.getTime()));
									} else {
										pstmtInsert_tJDBCOutput_3.setNull(10,
												java.sql.Types.DATE);
									}

									if (row21.SOURCESYSTEM_CD == null) {
										pstmtInsert_tJDBCOutput_3.setNull(11,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tJDBCOutput_3.setString(11,
												row21.SOURCESYSTEM_CD);
									}

									if (row21.UPLOAD_ID == null) {
										pstmtInsert_tJDBCOutput_3.setNull(12,
												java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tJDBCOutput_3.setInt(12,
												row21.UPLOAD_ID);
									}

									try {
										insertedCount_tJDBCOutput_3 = insertedCount_tJDBCOutput_3
												+ pstmtInsert_tJDBCOutput_3
														.executeUpdate();
									} catch (java.lang.Exception e) {
										whetherReject_tJDBCOutput_3 = true;
										throw (e);
									}
								}
								nb_line_tJDBCOutput_3++;
								if (!whetherReject_tJDBCOutput_3) {
								}

								tos_count_tJDBCOutput_3++;

								/**
								 * [tJDBCOutput_3 main ] stop
								 */

							} // End of branch "row21"

						} // End of branch "row13"

						/**
						 * [tFileInputDelimited_12 end ] start
						 */

						currentComponent = "tFileInputDelimited_12";

						nb_line_tFileInputDelimited_12++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_12 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_12 != null) {
							csvReadertFileInputDelimited_12.close();
						}
					}
					if (csvReadertFileInputDelimited_12 != null) {
						globalMap.put("tFileInputDelimited_12_NB_LINE",
								nb_line_tFileInputDelimited_12);
					}
				}

				ok_Hash.put("tFileInputDelimited_12", true);
				end_Hash.put("tFileInputDelimited_12",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_12 end ] stop
				 */

				/**
				 * [tUniqRow_4 end ] start
				 */

				currentComponent = "tUniqRow_4";

				globalMap.put("tUniqRow_4_NB_UNIQUES", nb_uniques_tUniqRow_4);
				globalMap.put("tUniqRow_4_NB_DUPLICATES",
						nb_duplicates_tUniqRow_4);

				ok_Hash.put("tUniqRow_4", true);
				end_Hash.put("tUniqRow_4", System.currentTimeMillis());

				/**
				 * [tUniqRow_4 end ] stop
				 */

				/**
				 * [tJDBCOutput_3 end ] start
				 */

				currentComponent = "tJDBCOutput_3";

				if (pstmtUpdate_tJDBCOutput_3 != null) {

					pstmtUpdate_tJDBCOutput_3.close();

				}
				if (pstmtInsert_tJDBCOutput_3 != null) {

					pstmtInsert_tJDBCOutput_3.close();

				}
				if (pstmt_tJDBCOutput_3 != null) {

					pstmt_tJDBCOutput_3.close();

				}

				nb_line_deleted_tJDBCOutput_3 = nb_line_deleted_tJDBCOutput_3
						+ deletedCount_tJDBCOutput_3;
				nb_line_update_tJDBCOutput_3 = nb_line_update_tJDBCOutput_3
						+ updatedCount_tJDBCOutput_3;
				nb_line_inserted_tJDBCOutput_3 = nb_line_inserted_tJDBCOutput_3
						+ insertedCount_tJDBCOutput_3;
				nb_line_rejected_tJDBCOutput_3 = nb_line_rejected_tJDBCOutput_3
						+ rejectedCount_tJDBCOutput_3;

				globalMap.put("tJDBCOutput_3_NB_LINE", nb_line_tJDBCOutput_3);
				globalMap.put("tJDBCOutput_3_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_3);
				globalMap.put("tJDBCOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_3);
				globalMap.put("tJDBCOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_3);
				globalMap.put("tJDBCOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_3);

				ok_Hash.put("tJDBCOutput_3", true);
				end_Hash.put("tJDBCOutput_3", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_12:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_10Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_12_SUBPROCESS_STATE", 1);
	}

	public void tJava_10Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_10 begin ] start
				 */

				ok_Hash.put("tJava_10", false);
				start_Hash.put("tJava_10", System.currentTimeMillis());
				currentComponent = "tJava_10";

				int tos_count_tJava_10 = 0;

				context.currentTable = context.DB_StagingI2B2_DatabaseType
						.equalsIgnoreCase("postgres") ? "i2b2demodata.patient_mapping"
						: (context.DB_StagingI2B2_Schema + ".patient_mapping");
				StatusListener.setSubStatus(40.0f, (int) (float) (40.0f) + "%");

				/**
				 * [tJava_10 begin ] stop
				 */
				/**
				 * [tJava_10 main ] start
				 */

				currentComponent = "tJava_10";

				tos_count_tJava_10++;

				/**
				 * [tJava_10 main ] stop
				 */
				/**
				 * [tJava_10 end ] start
				 */

				currentComponent = "tJava_10";

				ok_Hash.put("tJava_10", true);
				end_Hash.put("tJava_10", System.currentTimeMillis());

				/**
				 * [tJava_10 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_10:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_6Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_10_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length);
				strReturn = new String(
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.PATIENT_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];

		public String PATIENT_IDE;

		public String getPATIENT_IDE() {
			return this.PATIENT_IDE;
		}

		public String PATIENT_IDE_SOURCE;

		public String getPATIENT_IDE_SOURCE() {
			return this.PATIENT_IDE_SOURCE;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String PATIENT_IDE_STATUS;

		public String getPATIENT_IDE_STATUS() {
			return this.PATIENT_IDE_STATUS;
		}

		public java.util.Date UPLOAD_DATE;

		public java.util.Date getUPLOAD_DATE() {
			return this.UPLOAD_DATE;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length);
				strReturn = new String(
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.PATIENT_IDE = readString(dis);

					this.PATIENT_IDE_SOURCE = readString(dis);

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_IDE_STATUS = readString(dis);

					this.UPLOAD_DATE = readDate(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PATIENT_IDE, dos);

				// String

				writeString(this.PATIENT_IDE_SOURCE, dos);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.PATIENT_IDE_STATUS, dos);

				// java.util.Date

				writeDate(this.UPLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_IDE=" + PATIENT_IDE);
			sb.append(",PATIENT_IDE_SOURCE=" + PATIENT_IDE_SOURCE);
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",PATIENT_IDE_STATUS=" + PATIENT_IDE_STATUS);
			sb.append(",UPLOAD_DATE=" + String.valueOf(UPLOAD_DATE));
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();
				row1Struct row1 = new row1Struct();

				/**
				 * [tJDBCOutput_4 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_4", false);
				start_Hash.put("tJDBCOutput_4", System.currentTimeMillis());
				currentComponent = "tJDBCOutput_4";

				int tos_count_tJDBCOutput_4 = 0;

				int updateKeyCount_tJDBCOutput_4 = 2;
				if (updateKeyCount_tJDBCOutput_4 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tJDBCOutput_4 = 0;
				int nb_line_update_tJDBCOutput_4 = 0;
				int nb_line_inserted_tJDBCOutput_4 = 0;
				int nb_line_deleted_tJDBCOutput_4 = 0;
				int nb_line_rejected_tJDBCOutput_4 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_4 = 0;

				int deletedCount_tJDBCOutput_4 = 0;
				int updatedCount_tJDBCOutput_4 = 0;
				int insertedCount_tJDBCOutput_4 = 0;
				int rejectedCount_tJDBCOutput_4 = 0;

				boolean whetherReject_tJDBCOutput_4 = false;

				java.sql.Connection connection_tJDBCOutput_4 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");
				if (null == connection_tJDBCOutput_4) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCOutput_4 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					connection_tJDBCOutput_4 = dataSources_tJDBCOutput_4
							.get("").getConnection();
				}

				int batchSize_tJDBCOutput_4 = 10000;
				int batchSizeCounter_tJDBCOutput_4 = 0;

				java.sql.PreparedStatement pstmt_tJDBCOutput_4 = connection_tJDBCOutput_4
						.prepareStatement("SELECT COUNT(1) FROM "
								+ context.currentTable
								+ " WHERE PATIENT_IDE = ? AND PATIENT_IDE_SOURCE = ?");
				String insert_tJDBCOutput_4 = "INSERT INTO "
						+ context.currentTable
						+ " (PATIENT_IDE,PATIENT_IDE_SOURCE,PATIENT_NUM,PATIENT_IDE_STATUS,UPLOAD_DATE,UPDATE_DATE,DOWNLOAD_DATE,IMPORT_DATE,SOURCESYSTEM_CD,UPLOAD_ID) VALUES (?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tJDBCOutput_4 = connection_tJDBCOutput_4
						.prepareStatement(insert_tJDBCOutput_4);
				String update_tJDBCOutput_4 = "UPDATE "
						+ context.currentTable
						+ " SET PATIENT_NUM = ?,PATIENT_IDE_STATUS = ?,UPLOAD_DATE = ?,UPDATE_DATE = ?,DOWNLOAD_DATE = ?,IMPORT_DATE = ?,SOURCESYSTEM_CD = ?,UPLOAD_ID = ? WHERE PATIENT_IDE = ? AND PATIENT_IDE_SOURCE = ?";
				java.sql.PreparedStatement pstmtUpdate_tJDBCOutput_4 = connection_tJDBCOutput_4
						.prepareStatement(update_tJDBCOutput_4);

				/**
				 * [tJDBCOutput_4 begin ] stop
				 */

				/**
				 * [tJavaRow_3 begin ] start
				 */

				ok_Hash.put("tJavaRow_3", false);
				start_Hash.put("tJavaRow_3", System.currentTimeMillis());
				currentComponent = "tJavaRow_3";

				int tos_count_tJavaRow_3 = 0;

				int nb_line_tJavaRow_3 = 0;

				/**
				 * [tJavaRow_3 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_6", false);
				start_Hash.put("tFileInputDelimited_6",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_6";

				int tos_count_tFileInputDelimited_6 = 0;

				int nb_line_tFileInputDelimited_6 = 0;
				int footer_tFileInputDelimited_6 = 0;
				int totalLinetFileInputDelimited_6 = 0;
				int limittFileInputDelimited_6 = -1;
				int lastLinetFileInputDelimited_6 = -1;

				char fieldSeparator_tFileInputDelimited_6[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_6 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_6[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_6 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_6 = /**
				 * Start field
				 * tFileInputDelimited_6:FILENAME
				 */
				context.folderMain + context.folderOutput
						+ "patient_mapping.csv"/**
				 * End field
				 * tFileInputDelimited_6:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_6 = null;

				try {

					String[] rowtFileInputDelimited_6 = null;
					int currentLinetFileInputDelimited_6 = 0;
					int outputLinetFileInputDelimited_6 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_6 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_6 = 0;
							if (footer_value_tFileInputDelimited_6 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_6,
									fieldSeparator_tFileInputDelimited_6[0],
									context.coding);
						} else {
							csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_6)),
													context.coding)),
									fieldSeparator_tFileInputDelimited_6[0]);
						}

						csvReadertFileInputDelimited_6.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_6[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_6[0] != '\r'))
							csvReadertFileInputDelimited_6.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_6[0]);

						csvReadertFileInputDelimited_6.setQuoteChar('"');

						csvReadertFileInputDelimited_6
								.setEscapeChar(csvReadertFileInputDelimited_6
										.getQuoteChar());

						if (footer_tFileInputDelimited_6 > 0) {
							for (totalLinetFileInputDelimited_6 = 0; totalLinetFileInputDelimited_6 < 1; totalLinetFileInputDelimited_6++) {
								csvReadertFileInputDelimited_6.readNext();
							}
							csvReadertFileInputDelimited_6
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_6.readNext()) {

								rowtFileInputDelimited_6 = csvReadertFileInputDelimited_6
										.getValues();
								if (!(rowtFileInputDelimited_6.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_6[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_6++;

								}

							}
							int lastLineTemptFileInputDelimited_6 = totalLinetFileInputDelimited_6
									- footer_tFileInputDelimited_6 < 0 ? 0
									: totalLinetFileInputDelimited_6
											- footer_tFileInputDelimited_6;
							if (lastLinetFileInputDelimited_6 > 0) {
								lastLinetFileInputDelimited_6 = lastLinetFileInputDelimited_6 < lastLineTemptFileInputDelimited_6 ? lastLinetFileInputDelimited_6
										: lastLineTemptFileInputDelimited_6;
							} else {
								lastLinetFileInputDelimited_6 = lastLineTemptFileInputDelimited_6;
							}

							csvReadertFileInputDelimited_6.close();
							if (filename_tFileInputDelimited_6 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_6,
										fieldSeparator_tFileInputDelimited_6[0],
										context.coding);
							} else {
								csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_6)),
														context.coding)),
										fieldSeparator_tFileInputDelimited_6[0]);
							}
							csvReadertFileInputDelimited_6
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_6[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_6[0] != '\r'))
								csvReadertFileInputDelimited_6
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_6[0]);

							csvReadertFileInputDelimited_6.setQuoteChar('"');

							csvReadertFileInputDelimited_6
									.setEscapeChar(csvReadertFileInputDelimited_6
											.getQuoteChar());

						}

						if (limittFileInputDelimited_6 != 0) {
							for (currentLinetFileInputDelimited_6 = 0; currentLinetFileInputDelimited_6 < 1; currentLinetFileInputDelimited_6++) {
								csvReadertFileInputDelimited_6.readNext();
							}
						}
						csvReadertFileInputDelimited_6
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_6 != 0
							&& csvReadertFileInputDelimited_6 != null
							&& csvReadertFileInputDelimited_6.readNext()) {

						rowtFileInputDelimited_6 = csvReadertFileInputDelimited_6
								.getValues();

						if (rowtFileInputDelimited_6.length == 1
								&& ("\015").equals(rowtFileInputDelimited_6[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_6++;

						if (lastLinetFileInputDelimited_6 > -1
								&& currentLinetFileInputDelimited_6 > lastLinetFileInputDelimited_6) {
							break;
						}
						outputLinetFileInputDelimited_6++;
						if (limittFileInputDelimited_6 > 0
								&& outputLinetFileInputDelimited_6 > limittFileInputDelimited_6) {
							break;
						}

						row6 = null;

						boolean whetherReject_tFileInputDelimited_6 = false;
						row6 = new row6Struct();
						try {

							if (rowtFileInputDelimited_6.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_6[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row6.PATIENT_IDE = null;

								row6.PATIENT_IDE_SOURCE = null;

								row6.PATIENT_NUM = null;

								row6.PATIENT_IDE_STATUS = null;

								row6.UPLOAD_DATE = null;

								row6.UPDATE_DATE = null;

								row6.DOWNLOAD_DATE = null;

								row6.IMPORT_DATE = null;

								row6.SOURCESYSTEM_CD = null;

								row6.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_6 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_6 = 0;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row6.PATIENT_IDE = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row6.PATIENT_IDE = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 1;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row6.PATIENT_IDE_SOURCE = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row6.PATIENT_IDE_SOURCE = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 2;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									if (rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]
											.length() > 0) {

										row6.PATIENT_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]);

									} else {
										row6.PATIENT_NUM = null;
									}

								} else {
									row6.PATIENT_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 3;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row6.PATIENT_IDE_STATUS = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row6.PATIENT_IDE_STATUS = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 4;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									if (rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]
											.length() > 0) {

										row6.UPLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6],
														"dd-MM-yyyy");

									} else {
										row6.UPLOAD_DATE = null;
									}

								} else {
									row6.UPLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 5;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									if (rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]
											.length() > 0) {

										row6.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6],
														"dd-MM-yyyy");

									} else {
										row6.UPDATE_DATE = null;
									}

								} else {
									row6.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 6;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									if (rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]
											.length() > 0) {

										row6.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6],
														"dd-MM-yyyy");

									} else {
										row6.DOWNLOAD_DATE = null;
									}

								} else {
									row6.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 7;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									if (rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]
											.length() > 0) {

										row6.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6],
														"dd-MM-yyyy");

									} else {
										row6.IMPORT_DATE = null;
									}

								} else {
									row6.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 8;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row6.SOURCESYSTEM_CD = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {
									row6.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_6 = 9;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									if (rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]
											.length() > 0) {

										row6.UPLOAD_ID = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]);

									} else {
										row6.UPLOAD_ID = null;
									}

								} else {
									row6.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_6 = true;

							System.err.println(e.getMessage());
							row6 = null;

						}

						/**
						 * [tFileInputDelimited_6 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_6 main ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						tos_count_tFileInputDelimited_6++;

						/**
						 * [tFileInputDelimited_6 main ] stop
						 */
						// Start of branch "row6"
						if (row6 != null) {

							/**
							 * [tJavaRow_3 main ] start
							 */

							currentComponent = "tJavaRow_3";

							// Code generated according to input schema and
							// output schema
							row1.PATIENT_IDE = row6.PATIENT_IDE;
							row1.PATIENT_IDE_SOURCE = row6.PATIENT_IDE_SOURCE;
							row1.PATIENT_NUM = row6.PATIENT_NUM
									.add(new BigDecimal(10000));
							row1.PATIENT_IDE_STATUS = row6.PATIENT_IDE_STATUS;
							row1.UPLOAD_DATE = row6.UPLOAD_DATE;
							row1.UPDATE_DATE = row6.UPDATE_DATE;
							row1.DOWNLOAD_DATE = row6.DOWNLOAD_DATE;
							row1.IMPORT_DATE = row6.IMPORT_DATE;
							row1.SOURCESYSTEM_CD = row6.SOURCESYSTEM_CD;
							row1.UPLOAD_ID = row6.UPLOAD_ID;

							nb_line_tJavaRow_3++;

							tos_count_tJavaRow_3++;

							/**
							 * [tJavaRow_3 main ] stop
							 */

							/**
							 * [tJDBCOutput_4 main ] start
							 */

							currentComponent = "tJDBCOutput_4";

							whetherReject_tJDBCOutput_4 = false;
							if (row1.PATIENT_IDE == null) {
								pstmt_tJDBCOutput_4.setNull(1,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_4.setString(1,
										row1.PATIENT_IDE);
							}

							if (row1.PATIENT_IDE_SOURCE == null) {
								pstmt_tJDBCOutput_4.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_4.setString(2,
										row1.PATIENT_IDE_SOURCE);
							}

							java.sql.ResultSet rs_tJDBCOutput_4 = pstmt_tJDBCOutput_4
									.executeQuery();
							int checkCount_tJDBCOutput_4 = -1;
							while (rs_tJDBCOutput_4.next()) {
								checkCount_tJDBCOutput_4 = rs_tJDBCOutput_4
										.getInt(1);
							}
							if (checkCount_tJDBCOutput_4 > 0) {
								pstmtUpdate_tJDBCOutput_4.setBigDecimal(1,
										row1.PATIENT_NUM);

								if (row1.PATIENT_IDE_STATUS == null) {
									pstmtUpdate_tJDBCOutput_4.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tJDBCOutput_4.setString(2,
											row1.PATIENT_IDE_STATUS);
								}

								if (row1.UPLOAD_DATE != null) {
									pstmtUpdate_tJDBCOutput_4
											.setTimestamp(
													3,
													new java.sql.Timestamp(
															row1.UPLOAD_DATE
																	.getTime()));
								} else {
									pstmtUpdate_tJDBCOutput_4.setNull(3,
											java.sql.Types.DATE);
								}

								if (row1.UPDATE_DATE != null) {
									pstmtUpdate_tJDBCOutput_4
											.setTimestamp(
													4,
													new java.sql.Timestamp(
															row1.UPDATE_DATE
																	.getTime()));
								} else {
									pstmtUpdate_tJDBCOutput_4.setNull(4,
											java.sql.Types.DATE);
								}

								if (row1.DOWNLOAD_DATE != null) {
									pstmtUpdate_tJDBCOutput_4.setTimestamp(
											5,
											new java.sql.Timestamp(
													row1.DOWNLOAD_DATE
															.getTime()));
								} else {
									pstmtUpdate_tJDBCOutput_4.setNull(5,
											java.sql.Types.DATE);
								}

								if (row1.IMPORT_DATE != null) {
									pstmtUpdate_tJDBCOutput_4
											.setTimestamp(
													6,
													new java.sql.Timestamp(
															row1.IMPORT_DATE
																	.getTime()));
								} else {
									pstmtUpdate_tJDBCOutput_4.setNull(6,
											java.sql.Types.DATE);
								}

								if (row1.SOURCESYSTEM_CD == null) {
									pstmtUpdate_tJDBCOutput_4.setNull(7,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tJDBCOutput_4.setString(7,
											row1.SOURCESYSTEM_CD);
								}

								if (row1.UPLOAD_ID == null) {
									pstmtUpdate_tJDBCOutput_4.setNull(8,
											java.sql.Types.INTEGER);
								} else {
									pstmtUpdate_tJDBCOutput_4.setInt(8,
											row1.UPLOAD_ID);
								}

								if (row1.PATIENT_IDE == null) {
									pstmtUpdate_tJDBCOutput_4.setNull(9,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tJDBCOutput_4.setString(9,
											row1.PATIENT_IDE);
								}

								if (row1.PATIENT_IDE_SOURCE == null) {
									pstmtUpdate_tJDBCOutput_4.setNull(10,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tJDBCOutput_4.setString(10,
											row1.PATIENT_IDE_SOURCE);
								}

								try {
									updatedCount_tJDBCOutput_4 = updatedCount_tJDBCOutput_4
											+ pstmtUpdate_tJDBCOutput_4
													.executeUpdate();
								} catch (java.lang.Exception e) {
									whetherReject_tJDBCOutput_4 = true;
									throw (e);
								}
							} else {
								if (row1.PATIENT_IDE == null) {
									pstmtInsert_tJDBCOutput_4.setNull(1,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tJDBCOutput_4.setString(1,
											row1.PATIENT_IDE);
								}

								if (row1.PATIENT_IDE_SOURCE == null) {
									pstmtInsert_tJDBCOutput_4.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tJDBCOutput_4.setString(2,
											row1.PATIENT_IDE_SOURCE);
								}

								pstmtInsert_tJDBCOutput_4.setBigDecimal(3,
										row1.PATIENT_NUM);

								if (row1.PATIENT_IDE_STATUS == null) {
									pstmtInsert_tJDBCOutput_4.setNull(4,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tJDBCOutput_4.setString(4,
											row1.PATIENT_IDE_STATUS);
								}

								if (row1.UPLOAD_DATE != null) {
									pstmtInsert_tJDBCOutput_4
											.setTimestamp(
													5,
													new java.sql.Timestamp(
															row1.UPLOAD_DATE
																	.getTime()));
								} else {
									pstmtInsert_tJDBCOutput_4.setNull(5,
											java.sql.Types.DATE);
								}

								if (row1.UPDATE_DATE != null) {
									pstmtInsert_tJDBCOutput_4
											.setTimestamp(
													6,
													new java.sql.Timestamp(
															row1.UPDATE_DATE
																	.getTime()));
								} else {
									pstmtInsert_tJDBCOutput_4.setNull(6,
											java.sql.Types.DATE);
								}

								if (row1.DOWNLOAD_DATE != null) {
									pstmtInsert_tJDBCOutput_4.setTimestamp(
											7,
											new java.sql.Timestamp(
													row1.DOWNLOAD_DATE
															.getTime()));
								} else {
									pstmtInsert_tJDBCOutput_4.setNull(7,
											java.sql.Types.DATE);
								}

								if (row1.IMPORT_DATE != null) {
									pstmtInsert_tJDBCOutput_4
											.setTimestamp(
													8,
													new java.sql.Timestamp(
															row1.IMPORT_DATE
																	.getTime()));
								} else {
									pstmtInsert_tJDBCOutput_4.setNull(8,
											java.sql.Types.DATE);
								}

								if (row1.SOURCESYSTEM_CD == null) {
									pstmtInsert_tJDBCOutput_4.setNull(9,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tJDBCOutput_4.setString(9,
											row1.SOURCESYSTEM_CD);
								}

								if (row1.UPLOAD_ID == null) {
									pstmtInsert_tJDBCOutput_4.setNull(10,
											java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tJDBCOutput_4.setInt(10,
											row1.UPLOAD_ID);
								}

								try {
									insertedCount_tJDBCOutput_4 = insertedCount_tJDBCOutput_4
											+ pstmtInsert_tJDBCOutput_4
													.executeUpdate();
								} catch (java.lang.Exception e) {
									whetherReject_tJDBCOutput_4 = true;
									throw (e);
								}
							}
							nb_line_tJDBCOutput_4++;
							if (!whetherReject_tJDBCOutput_4) {
							}

							tos_count_tJDBCOutput_4++;

							/**
							 * [tJDBCOutput_4 main ] stop
							 */

						} // End of branch "row6"

						/**
						 * [tFileInputDelimited_6 end ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						nb_line_tFileInputDelimited_6++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_6 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_6 != null) {
							csvReadertFileInputDelimited_6.close();
						}
					}
					if (csvReadertFileInputDelimited_6 != null) {
						globalMap.put("tFileInputDelimited_6_NB_LINE",
								nb_line_tFileInputDelimited_6);
					}
				}

				ok_Hash.put("tFileInputDelimited_6", true);
				end_Hash.put("tFileInputDelimited_6",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_6 end ] stop
				 */

				/**
				 * [tJavaRow_3 end ] start
				 */

				currentComponent = "tJavaRow_3";

				globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);

				ok_Hash.put("tJavaRow_3", true);
				end_Hash.put("tJavaRow_3", System.currentTimeMillis());

				/**
				 * [tJavaRow_3 end ] stop
				 */

				/**
				 * [tJDBCOutput_4 end ] start
				 */

				currentComponent = "tJDBCOutput_4";

				if (pstmtUpdate_tJDBCOutput_4 != null) {

					pstmtUpdate_tJDBCOutput_4.close();

				}
				if (pstmtInsert_tJDBCOutput_4 != null) {

					pstmtInsert_tJDBCOutput_4.close();

				}
				if (pstmt_tJDBCOutput_4 != null) {

					pstmt_tJDBCOutput_4.close();

				}

				nb_line_deleted_tJDBCOutput_4 = nb_line_deleted_tJDBCOutput_4
						+ deletedCount_tJDBCOutput_4;
				nb_line_update_tJDBCOutput_4 = nb_line_update_tJDBCOutput_4
						+ updatedCount_tJDBCOutput_4;
				nb_line_inserted_tJDBCOutput_4 = nb_line_inserted_tJDBCOutput_4
						+ insertedCount_tJDBCOutput_4;
				nb_line_rejected_tJDBCOutput_4 = nb_line_rejected_tJDBCOutput_4
						+ rejectedCount_tJDBCOutput_4;

				globalMap.put("tJDBCOutput_4_NB_LINE", nb_line_tJDBCOutput_4);
				globalMap.put("tJDBCOutput_4_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_4);
				globalMap.put("tJDBCOutput_4_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_4);
				globalMap.put("tJDBCOutput_4_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_4);
				globalMap.put("tJDBCOutput_4_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_4);

				ok_Hash.put("tJDBCOutput_4", true);
				end_Hash.put("tJDBCOutput_4", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_4 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_6:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_11Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 1);
	}

	public void tJava_11Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_11 begin ] start
				 */

				ok_Hash.put("tJava_11", false);
				start_Hash.put("tJava_11", System.currentTimeMillis());
				currentComponent = "tJava_11";

				int tos_count_tJava_11 = 0;

				context.currentTable = context.DB_StagingI2B2_DatabaseType
						.equalsIgnoreCase("postgres") ? "i2b2demodata.patient_dimension"
						: (context.DB_StagingI2B2_Schema + ".patient_dimension");
				StatusListener.setSubStatus(50.0f, (int) (float) (50.0f) + "%");

				/**
				 * [tJava_11 begin ] stop
				 */
				/**
				 * [tJava_11 main ] start
				 */

				currentComponent = "tJava_11";

				tos_count_tJava_11++;

				/**
				 * [tJava_11 main ] stop
				 */
				/**
				 * [tJava_11 end ] start
				 */

				currentComponent = "tJava_11";

				ok_Hash.put("tJava_11", true);
				end_Hash.put("tJava_11", System.currentTimeMillis());

				/**
				 * [tJava_11 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_11:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_7Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_11_SUBPROCESS_STATE", 1);
	}

	public static class to_PMappingStruct implements
			routines.system.IPersistableRow<to_PMappingStruct> {
		final static byte[] commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String VITAL_STATUS_CD;

		public String getVITAL_STATUS_CD() {
			return this.VITAL_STATUS_CD;
		}

		public java.util.Date BIRTH_DATE;

		public java.util.Date getBIRTH_DATE() {
			return this.BIRTH_DATE;
		}

		public java.util.Date DEATH_DATE;

		public java.util.Date getDEATH_DATE() {
			return this.DEATH_DATE;
		}

		public String SEX_CD;

		public String getSEX_CD() {
			return this.SEX_CD;
		}

		public Integer AGE_IN_YEARS_NUM;

		public Integer getAGE_IN_YEARS_NUM() {
			return this.AGE_IN_YEARS_NUM;
		}

		public String LANGUAGE_CD;

		public String getLANGUAGE_CD() {
			return this.LANGUAGE_CD;
		}

		public String RACE_CD;

		public String getRACE_CD() {
			return this.RACE_CD;
		}

		public String MARITAL_STATUS_CD;

		public String getMARITAL_STATUS_CD() {
			return this.MARITAL_STATUS_CD;
		}

		public String RELIGION_CD;

		public String getRELIGION_CD() {
			return this.RELIGION_CD;
		}

		public String ZIP_CD;

		public String getZIP_CD() {
			return this.ZIP_CD;
		}

		public String STATECITYZIP_PATH;

		public String getSTATECITYZIP_PATH() {
			return this.STATECITYZIP_PATH;
		}

		public String INCOME_CD;

		public String getINCOME_CD() {
			return this.INCOME_CD;
		}

		public String PATIENT_BLOB;

		public String getPATIENT_BLOB() {
			return this.PATIENT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length);
				strReturn = new String(
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.VITAL_STATUS_CD = readString(dis);

					this.BIRTH_DATE = readDate(dis);

					this.DEATH_DATE = readDate(dis);

					this.SEX_CD = readString(dis);

					this.AGE_IN_YEARS_NUM = readInteger(dis);

					this.LANGUAGE_CD = readString(dis);

					this.RACE_CD = readString(dis);

					this.MARITAL_STATUS_CD = readString(dis);

					this.RELIGION_CD = readString(dis);

					this.ZIP_CD = readString(dis);

					this.STATECITYZIP_PATH = readString(dis);

					this.INCOME_CD = readString(dis);

					this.PATIENT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.VITAL_STATUS_CD, dos);

				// java.util.Date

				writeDate(this.BIRTH_DATE, dos);

				// java.util.Date

				writeDate(this.DEATH_DATE, dos);

				// String

				writeString(this.SEX_CD, dos);

				// Integer

				writeInteger(this.AGE_IN_YEARS_NUM, dos);

				// String

				writeString(this.LANGUAGE_CD, dos);

				// String

				writeString(this.RACE_CD, dos);

				// String

				writeString(this.MARITAL_STATUS_CD, dos);

				// String

				writeString(this.RELIGION_CD, dos);

				// String

				writeString(this.ZIP_CD, dos);

				// String

				writeString(this.STATECITYZIP_PATH, dos);

				// String

				writeString(this.INCOME_CD, dos);

				// String

				writeString(this.PATIENT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",VITAL_STATUS_CD=" + VITAL_STATUS_CD);
			sb.append(",BIRTH_DATE=" + String.valueOf(BIRTH_DATE));
			sb.append(",DEATH_DATE=" + String.valueOf(DEATH_DATE));
			sb.append(",SEX_CD=" + SEX_CD);
			sb.append(",AGE_IN_YEARS_NUM=" + String.valueOf(AGE_IN_YEARS_NUM));
			sb.append(",LANGUAGE_CD=" + LANGUAGE_CD);
			sb.append(",RACE_CD=" + RACE_CD);
			sb.append(",MARITAL_STATUS_CD=" + MARITAL_STATUS_CD);
			sb.append(",RELIGION_CD=" + RELIGION_CD);
			sb.append(",ZIP_CD=" + ZIP_CD);
			sb.append(",STATECITYZIP_PATH=" + STATECITYZIP_PATH);
			sb.append(",INCOME_CD=" + INCOME_CD);
			sb.append(",PATIENT_BLOB=" + PATIENT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(to_PMappingStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class to_PTrialStruct implements
			routines.system.IPersistableRow<to_PTrialStruct> {
		final static byte[] commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String SOURCESYSTEM_CD_1;

		public String getSOURCESYSTEM_CD_1() {
			return this.SOURCESYSTEM_CD_1;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length);
				strReturn = new String(
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.SOURCESYSTEM_CD = readString(dis);

					this.SOURCESYSTEM_CD_1 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.SOURCESYSTEM_CD_1, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",SOURCESYSTEM_CD_1=" + SOURCESYSTEM_CD_1);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(to_PTrialStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row22Struct implements
			routines.system.IPersistableRow<row22Struct> {
		final static byte[] commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String VITAL_STATUS_CD;

		public String getVITAL_STATUS_CD() {
			return this.VITAL_STATUS_CD;
		}

		public java.util.Date BIRTH_DATE;

		public java.util.Date getBIRTH_DATE() {
			return this.BIRTH_DATE;
		}

		public java.util.Date DEATH_DATE;

		public java.util.Date getDEATH_DATE() {
			return this.DEATH_DATE;
		}

		public String SEX_CD;

		public String getSEX_CD() {
			return this.SEX_CD;
		}

		public Integer AGE_IN_YEARS_NUM;

		public Integer getAGE_IN_YEARS_NUM() {
			return this.AGE_IN_YEARS_NUM;
		}

		public String LANGUAGE_CD;

		public String getLANGUAGE_CD() {
			return this.LANGUAGE_CD;
		}

		public String RACE_CD;

		public String getRACE_CD() {
			return this.RACE_CD;
		}

		public String MARITAL_STATUS_CD;

		public String getMARITAL_STATUS_CD() {
			return this.MARITAL_STATUS_CD;
		}

		public String RELIGION_CD;

		public String getRELIGION_CD() {
			return this.RELIGION_CD;
		}

		public String ZIP_CD;

		public String getZIP_CD() {
			return this.ZIP_CD;
		}

		public String STATECITYZIP_PATH;

		public String getSTATECITYZIP_PATH() {
			return this.STATECITYZIP_PATH;
		}

		public String INCOME_CD;

		public String getINCOME_CD() {
			return this.INCOME_CD;
		}

		public String PATIENT_BLOB;

		public String getPATIENT_BLOB() {
			return this.PATIENT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length);
				strReturn = new String(
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.VITAL_STATUS_CD = readString(dis);

					this.BIRTH_DATE = readDate(dis);

					this.DEATH_DATE = readDate(dis);

					this.SEX_CD = readString(dis);

					this.AGE_IN_YEARS_NUM = readInteger(dis);

					this.LANGUAGE_CD = readString(dis);

					this.RACE_CD = readString(dis);

					this.MARITAL_STATUS_CD = readString(dis);

					this.RELIGION_CD = readString(dis);

					this.ZIP_CD = readString(dis);

					this.STATECITYZIP_PATH = readString(dis);

					this.INCOME_CD = readString(dis);

					this.PATIENT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.VITAL_STATUS_CD, dos);

				// java.util.Date

				writeDate(this.BIRTH_DATE, dos);

				// java.util.Date

				writeDate(this.DEATH_DATE, dos);

				// String

				writeString(this.SEX_CD, dos);

				// Integer

				writeInteger(this.AGE_IN_YEARS_NUM, dos);

				// String

				writeString(this.LANGUAGE_CD, dos);

				// String

				writeString(this.RACE_CD, dos);

				// String

				writeString(this.MARITAL_STATUS_CD, dos);

				// String

				writeString(this.RELIGION_CD, dos);

				// String

				writeString(this.ZIP_CD, dos);

				// String

				writeString(this.STATECITYZIP_PATH, dos);

				// String

				writeString(this.INCOME_CD, dos);

				// String

				writeString(this.PATIENT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",VITAL_STATUS_CD=" + VITAL_STATUS_CD);
			sb.append(",BIRTH_DATE=" + String.valueOf(BIRTH_DATE));
			sb.append(",DEATH_DATE=" + String.valueOf(DEATH_DATE));
			sb.append(",SEX_CD=" + SEX_CD);
			sb.append(",AGE_IN_YEARS_NUM=" + String.valueOf(AGE_IN_YEARS_NUM));
			sb.append(",LANGUAGE_CD=" + LANGUAGE_CD);
			sb.append(",RACE_CD=" + RACE_CD);
			sb.append(",MARITAL_STATUS_CD=" + MARITAL_STATUS_CD);
			sb.append(",RELIGION_CD=" + RELIGION_CD);
			sb.append(",ZIP_CD=" + ZIP_CD);
			sb.append(",STATECITYZIP_PATH=" + STATECITYZIP_PATH);
			sb.append(",INCOME_CD=" + INCOME_CD);
			sb.append(",PATIENT_BLOB=" + PATIENT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String VITAL_STATUS_CD;

		public String getVITAL_STATUS_CD() {
			return this.VITAL_STATUS_CD;
		}

		public java.util.Date BIRTH_DATE;

		public java.util.Date getBIRTH_DATE() {
			return this.BIRTH_DATE;
		}

		public java.util.Date DEATH_DATE;

		public java.util.Date getDEATH_DATE() {
			return this.DEATH_DATE;
		}

		public String SEX_CD;

		public String getSEX_CD() {
			return this.SEX_CD;
		}

		public Integer AGE_IN_YEARS_NUM;

		public Integer getAGE_IN_YEARS_NUM() {
			return this.AGE_IN_YEARS_NUM;
		}

		public String LANGUAGE_CD;

		public String getLANGUAGE_CD() {
			return this.LANGUAGE_CD;
		}

		public String RACE_CD;

		public String getRACE_CD() {
			return this.RACE_CD;
		}

		public String MARITAL_STATUS_CD;

		public String getMARITAL_STATUS_CD() {
			return this.MARITAL_STATUS_CD;
		}

		public String RELIGION_CD;

		public String getRELIGION_CD() {
			return this.RELIGION_CD;
		}

		public String ZIP_CD;

		public String getZIP_CD() {
			return this.ZIP_CD;
		}

		public String STATECITYZIP_PATH;

		public String getSTATECITYZIP_PATH() {
			return this.STATECITYZIP_PATH;
		}

		public String INCOME_CD;

		public String getINCOME_CD() {
			return this.INCOME_CD;
		}

		public String PATIENT_BLOB;

		public String getPATIENT_BLOB() {
			return this.PATIENT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length);
				strReturn = new String(
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.VITAL_STATUS_CD = readString(dis);

					this.BIRTH_DATE = readDate(dis);

					this.DEATH_DATE = readDate(dis);

					this.SEX_CD = readString(dis);

					this.AGE_IN_YEARS_NUM = readInteger(dis);

					this.LANGUAGE_CD = readString(dis);

					this.RACE_CD = readString(dis);

					this.MARITAL_STATUS_CD = readString(dis);

					this.RELIGION_CD = readString(dis);

					this.ZIP_CD = readString(dis);

					this.STATECITYZIP_PATH = readString(dis);

					this.INCOME_CD = readString(dis);

					this.PATIENT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.VITAL_STATUS_CD, dos);

				// java.util.Date

				writeDate(this.BIRTH_DATE, dos);

				// java.util.Date

				writeDate(this.DEATH_DATE, dos);

				// String

				writeString(this.SEX_CD, dos);

				// Integer

				writeInteger(this.AGE_IN_YEARS_NUM, dos);

				// String

				writeString(this.LANGUAGE_CD, dos);

				// String

				writeString(this.RACE_CD, dos);

				// String

				writeString(this.MARITAL_STATUS_CD, dos);

				// String

				writeString(this.RELIGION_CD, dos);

				// String

				writeString(this.ZIP_CD, dos);

				// String

				writeString(this.STATECITYZIP_PATH, dos);

				// String

				writeString(this.INCOME_CD, dos);

				// String

				writeString(this.PATIENT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",VITAL_STATUS_CD=" + VITAL_STATUS_CD);
			sb.append(",BIRTH_DATE=" + String.valueOf(BIRTH_DATE));
			sb.append(",DEATH_DATE=" + String.valueOf(DEATH_DATE));
			sb.append(",SEX_CD=" + SEX_CD);
			sb.append(",AGE_IN_YEARS_NUM=" + String.valueOf(AGE_IN_YEARS_NUM));
			sb.append(",LANGUAGE_CD=" + LANGUAGE_CD);
			sb.append(",RACE_CD=" + RACE_CD);
			sb.append(",MARITAL_STATUS_CD=" + MARITAL_STATUS_CD);
			sb.append(",RELIGION_CD=" + RELIGION_CD);
			sb.append(",ZIP_CD=" + ZIP_CD);
			sb.append(",STATECITYZIP_PATH=" + STATECITYZIP_PATH);
			sb.append(",INCOME_CD=" + INCOME_CD);
			sb.append(",PATIENT_BLOB=" + PATIENT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();
				row22Struct row22 = new row22Struct();
				to_PMappingStruct to_PMapping = new to_PMappingStruct();
				to_PTrialStruct to_PTrial = new to_PTrialStruct();

				/**
				 * [tJDBCOutput_5 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_5", false);
				start_Hash.put("tJDBCOutput_5", System.currentTimeMillis());
				currentComponent = "tJDBCOutput_5";

				int tos_count_tJDBCOutput_5 = 0;

				int updateKeyCount_tJDBCOutput_5 = 1;
				if (updateKeyCount_tJDBCOutput_5 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tJDBCOutput_5 = 0;
				int nb_line_update_tJDBCOutput_5 = 0;
				int nb_line_inserted_tJDBCOutput_5 = 0;
				int nb_line_deleted_tJDBCOutput_5 = 0;
				int nb_line_rejected_tJDBCOutput_5 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_5 = 0;

				int deletedCount_tJDBCOutput_5 = 0;
				int updatedCount_tJDBCOutput_5 = 0;
				int insertedCount_tJDBCOutput_5 = 0;
				int rejectedCount_tJDBCOutput_5 = 0;

				boolean whetherReject_tJDBCOutput_5 = false;

				java.sql.Connection connection_tJDBCOutput_5 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");
				if (null == connection_tJDBCOutput_5) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCOutput_5 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					connection_tJDBCOutput_5 = dataSources_tJDBCOutput_5
							.get("").getConnection();
				}

				int batchSize_tJDBCOutput_5 = 10000;
				int batchSizeCounter_tJDBCOutput_5 = 0;

				java.sql.PreparedStatement pstmt_tJDBCOutput_5 = connection_tJDBCOutput_5
						.prepareStatement("SELECT COUNT(1) FROM "
								+ context.currentTable
								+ " WHERE PATIENT_NUM = ?");
				String insert_tJDBCOutput_5 = "INSERT INTO "
						+ context.currentTable
						+ " (PATIENT_NUM,VITAL_STATUS_CD,BIRTH_DATE,DEATH_DATE,SEX_CD,AGE_IN_YEARS_NUM,LANGUAGE_CD,RACE_CD,MARITAL_STATUS_CD,RELIGION_CD,ZIP_CD,STATECITYZIP_PATH,INCOME_CD,PATIENT_BLOB,UPDATE_DATE,DOWNLOAD_DATE,IMPORT_DATE,SOURCESYSTEM_CD,UPLOAD_ID) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tJDBCOutput_5 = connection_tJDBCOutput_5
						.prepareStatement(insert_tJDBCOutput_5);
				String update_tJDBCOutput_5 = "UPDATE "
						+ context.currentTable
						+ " SET VITAL_STATUS_CD = ?,BIRTH_DATE = ?,DEATH_DATE = ?,SEX_CD = ?,AGE_IN_YEARS_NUM = ?,LANGUAGE_CD = ?,RACE_CD = ?,MARITAL_STATUS_CD = ?,RELIGION_CD = ?,ZIP_CD = ?,STATECITYZIP_PATH = ?,INCOME_CD = ?,PATIENT_BLOB = ?,UPDATE_DATE = ?,DOWNLOAD_DATE = ?,IMPORT_DATE = ?,SOURCESYSTEM_CD = ?,UPLOAD_ID = ? WHERE PATIENT_NUM = ?";
				java.sql.PreparedStatement pstmtUpdate_tJDBCOutput_5 = connection_tJDBCOutput_5
						.prepareStatement(update_tJDBCOutput_5);

				/**
				 * [tJDBCOutput_5 begin ] stop
				 */

				/**
				 * [tJDBCOutput_9 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_9", false);
				start_Hash.put("tJDBCOutput_9", System.currentTimeMillis());
				currentComponent = "tJDBCOutput_9";

				int tos_count_tJDBCOutput_9 = 0;

				int nb_line_tJDBCOutput_9 = 0;
				int nb_line_update_tJDBCOutput_9 = 0;
				int nb_line_inserted_tJDBCOutput_9 = 0;
				int nb_line_deleted_tJDBCOutput_9 = 0;
				int nb_line_rejected_tJDBCOutput_9 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_9 = 0;

				int deletedCount_tJDBCOutput_9 = 0;
				int updatedCount_tJDBCOutput_9 = 0;
				int insertedCount_tJDBCOutput_9 = 0;
				int rejectedCount_tJDBCOutput_9 = 0;

				boolean whetherReject_tJDBCOutput_9 = false;

				java.sql.Connection connection_tJDBCOutput_9 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");
				if (null == connection_tJDBCOutput_9) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCOutput_9 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					connection_tJDBCOutput_9 = dataSources_tJDBCOutput_9
							.get("").getConnection();
				}

				int batchSize_tJDBCOutput_9 = 10000;
				int batchSizeCounter_tJDBCOutput_9 = 0;

				String insert_tJDBCOutput_9 = "INSERT INTO "
						+ "i2b2demodata.patient_trial"
						+ " (patient_num,trial,secure_obj_token) VALUES (?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_9 = connection_tJDBCOutput_9
						.prepareStatement(insert_tJDBCOutput_9);

				/**
				 * [tJDBCOutput_9 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());
				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				to_PMappingStruct to_PMapping_tmp = new to_PMappingStruct();
				to_PTrialStruct to_PTrial_tmp = new to_PTrialStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tUniqRow_3 begin ] start
				 */

				ok_Hash.put("tUniqRow_3", false);
				start_Hash.put("tUniqRow_3", System.currentTimeMillis());
				currentComponent = "tUniqRow_3";

				int tos_count_tUniqRow_3 = 0;

				class KeyStruct_tUniqRow_3 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					BigDecimal PATIENT_NUM;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.PATIENT_NUM == null) ? 0
											: this.PATIENT_NUM.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_3 other = (KeyStruct_tUniqRow_3) obj;

						if (this.PATIENT_NUM == null) {
							if (other.PATIENT_NUM != null)
								return false;
						} else if (!this.PATIENT_NUM.equals(other.PATIENT_NUM))
							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_3 = 0;
				int nb_duplicates_tUniqRow_3 = 0;
				KeyStruct_tUniqRow_3 finder_tUniqRow_3 = new KeyStruct_tUniqRow_3();
				java.util.Set<KeyStruct_tUniqRow_3> keystUniqRow_3 = new java.util.HashSet<KeyStruct_tUniqRow_3>();

				/**
				 * [tUniqRow_3 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_7", false);
				start_Hash.put("tFileInputDelimited_7",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_7";

				int tos_count_tFileInputDelimited_7 = 0;

				int nb_line_tFileInputDelimited_7 = 0;
				int footer_tFileInputDelimited_7 = 0;
				int totalLinetFileInputDelimited_7 = 0;
				int limittFileInputDelimited_7 = -1;
				int lastLinetFileInputDelimited_7 = -1;

				char fieldSeparator_tFileInputDelimited_7[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_7 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_7[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_7 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_7 = /**
				 * Start field
				 * tFileInputDelimited_7:FILENAME
				 */
				context.folderMain + context.folderOutput
						+ "patient_dimension.csv"/**
				 * End field
				 * tFileInputDelimited_7:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_7 = null;

				try {

					String[] rowtFileInputDelimited_7 = null;
					int currentLinetFileInputDelimited_7 = 0;
					int outputLinetFileInputDelimited_7 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_7 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_7 = 0;
							if (footer_value_tFileInputDelimited_7 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_7,
									fieldSeparator_tFileInputDelimited_7[0],
									context.coding);
						} else {
							csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_7)),
													context.coding)),
									fieldSeparator_tFileInputDelimited_7[0]);
						}

						csvReadertFileInputDelimited_7.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_7[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_7[0] != '\r'))
							csvReadertFileInputDelimited_7.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_7[0]);

						csvReadertFileInputDelimited_7.setQuoteChar('"');

						csvReadertFileInputDelimited_7
								.setEscapeChar(csvReadertFileInputDelimited_7
										.getQuoteChar());

						if (footer_tFileInputDelimited_7 > 0) {
							for (totalLinetFileInputDelimited_7 = 0; totalLinetFileInputDelimited_7 < 1; totalLinetFileInputDelimited_7++) {
								csvReadertFileInputDelimited_7.readNext();
							}
							csvReadertFileInputDelimited_7
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_7.readNext()) {

								rowtFileInputDelimited_7 = csvReadertFileInputDelimited_7
										.getValues();
								if (!(rowtFileInputDelimited_7.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_7[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_7++;

								}

							}
							int lastLineTemptFileInputDelimited_7 = totalLinetFileInputDelimited_7
									- footer_tFileInputDelimited_7 < 0 ? 0
									: totalLinetFileInputDelimited_7
											- footer_tFileInputDelimited_7;
							if (lastLinetFileInputDelimited_7 > 0) {
								lastLinetFileInputDelimited_7 = lastLinetFileInputDelimited_7 < lastLineTemptFileInputDelimited_7 ? lastLinetFileInputDelimited_7
										: lastLineTemptFileInputDelimited_7;
							} else {
								lastLinetFileInputDelimited_7 = lastLineTemptFileInputDelimited_7;
							}

							csvReadertFileInputDelimited_7.close();
							if (filename_tFileInputDelimited_7 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_7,
										fieldSeparator_tFileInputDelimited_7[0],
										context.coding);
							} else {
								csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_7)),
														context.coding)),
										fieldSeparator_tFileInputDelimited_7[0]);
							}
							csvReadertFileInputDelimited_7
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_7[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_7[0] != '\r'))
								csvReadertFileInputDelimited_7
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_7[0]);

							csvReadertFileInputDelimited_7.setQuoteChar('"');

							csvReadertFileInputDelimited_7
									.setEscapeChar(csvReadertFileInputDelimited_7
											.getQuoteChar());

						}

						if (limittFileInputDelimited_7 != 0) {
							for (currentLinetFileInputDelimited_7 = 0; currentLinetFileInputDelimited_7 < 1; currentLinetFileInputDelimited_7++) {
								csvReadertFileInputDelimited_7.readNext();
							}
						}
						csvReadertFileInputDelimited_7
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_7 != 0
							&& csvReadertFileInputDelimited_7 != null
							&& csvReadertFileInputDelimited_7.readNext()) {

						rowtFileInputDelimited_7 = csvReadertFileInputDelimited_7
								.getValues();

						if (rowtFileInputDelimited_7.length == 1
								&& ("\015").equals(rowtFileInputDelimited_7[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_7++;

						if (lastLinetFileInputDelimited_7 > -1
								&& currentLinetFileInputDelimited_7 > lastLinetFileInputDelimited_7) {
							break;
						}
						outputLinetFileInputDelimited_7++;
						if (limittFileInputDelimited_7 > 0
								&& outputLinetFileInputDelimited_7 > limittFileInputDelimited_7) {
							break;
						}

						row7 = null;

						boolean whetherReject_tFileInputDelimited_7 = false;
						row7 = new row7Struct();
						try {

							if (rowtFileInputDelimited_7.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_7[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row7.PATIENT_NUM = null;

								row7.VITAL_STATUS_CD = null;

								row7.BIRTH_DATE = null;

								row7.DEATH_DATE = null;

								row7.SEX_CD = null;

								row7.AGE_IN_YEARS_NUM = null;

								row7.LANGUAGE_CD = null;

								row7.RACE_CD = null;

								row7.MARITAL_STATUS_CD = null;

								row7.RELIGION_CD = null;

								row7.ZIP_CD = null;

								row7.STATECITYZIP_PATH = null;

								row7.INCOME_CD = null;

								row7.PATIENT_BLOB = null;

								row7.UPDATE_DATE = null;

								row7.DOWNLOAD_DATE = null;

								row7.IMPORT_DATE = null;

								row7.SOURCESYSTEM_CD = null;

								row7.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_7 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_7 = 0;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									if (rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]
											.length() > 0) {

										row7.PATIENT_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]);

									} else {
										row7.PATIENT_NUM = null;
									}

								} else {
									row7.PATIENT_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 1;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.VITAL_STATUS_CD = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.VITAL_STATUS_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 2;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									if (rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]
											.length() > 0) {

										row7.BIRTH_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7],
														"dd-MM-yyyy");

									} else {
										row7.BIRTH_DATE = null;
									}

								} else {
									row7.BIRTH_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 3;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									if (rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]
											.length() > 0) {

										row7.DEATH_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7],
														"dd-MM-yyyy");

									} else {
										row7.DEATH_DATE = null;
									}

								} else {
									row7.DEATH_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 4;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.SEX_CD = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.SEX_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 5;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									if (rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]
											.length() > 0) {

										row7.AGE_IN_YEARS_NUM = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]);

									} else {
										row7.AGE_IN_YEARS_NUM = null;
									}

								} else {
									row7.AGE_IN_YEARS_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 6;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.LANGUAGE_CD = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.LANGUAGE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 7;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.RACE_CD = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.RACE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 8;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.MARITAL_STATUS_CD = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.MARITAL_STATUS_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 9;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.RELIGION_CD = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.RELIGION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 10;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.ZIP_CD = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.ZIP_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 11;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.STATECITYZIP_PATH = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.STATECITYZIP_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 12;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.INCOME_CD = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.INCOME_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 13;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.PATIENT_BLOB = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.PATIENT_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 14;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									if (rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]
											.length() > 0) {

										row7.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7],
														"dd-MM-yyyy");

									} else {
										row7.UPDATE_DATE = null;
									}

								} else {
									row7.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 15;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									if (rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]
											.length() > 0) {

										row7.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7],
														"dd-MM-yyyy");

									} else {
										row7.DOWNLOAD_DATE = null;
									}

								} else {
									row7.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 16;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									if (rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]
											.length() > 0) {

										row7.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7],
														"dd-MM-yyyy");

									} else {
										row7.IMPORT_DATE = null;
									}

								} else {
									row7.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 17;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row7.SOURCESYSTEM_CD = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {
									row7.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_7 = 18;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									if (rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]
											.length() > 0) {

										row7.UPLOAD_ID = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]);

									} else {
										row7.UPLOAD_ID = null;
									}

								} else {
									row7.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_7 = true;

							System.err.println(e.getMessage());
							row7 = null;

						}

						/**
						 * [tFileInputDelimited_7 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_7 main ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						tos_count_tFileInputDelimited_7++;

						/**
						 * [tFileInputDelimited_7 main ] stop
						 */
						// Start of branch "row7"
						if (row7 != null) {

							/**
							 * [tUniqRow_3 main ] start
							 */

							currentComponent = "tUniqRow_3";

							row22 = null;
							finder_tUniqRow_3.PATIENT_NUM = row7.PATIENT_NUM;
							finder_tUniqRow_3.hashCodeDirty = true;
							if (!keystUniqRow_3.contains(finder_tUniqRow_3)) {
								KeyStruct_tUniqRow_3 new_tUniqRow_3 = new KeyStruct_tUniqRow_3();

								new_tUniqRow_3.PATIENT_NUM = row7.PATIENT_NUM;

								keystUniqRow_3.add(new_tUniqRow_3);
								if (row22 == null) {
									row22 = new row22Struct();
								}
								row22.PATIENT_NUM = row7.PATIENT_NUM;
								row22.VITAL_STATUS_CD = row7.VITAL_STATUS_CD;
								row22.BIRTH_DATE = row7.BIRTH_DATE;
								row22.DEATH_DATE = row7.DEATH_DATE;
								row22.SEX_CD = row7.SEX_CD;
								row22.AGE_IN_YEARS_NUM = row7.AGE_IN_YEARS_NUM;
								row22.LANGUAGE_CD = row7.LANGUAGE_CD;
								row22.RACE_CD = row7.RACE_CD;
								row22.MARITAL_STATUS_CD = row7.MARITAL_STATUS_CD;
								row22.RELIGION_CD = row7.RELIGION_CD;
								row22.ZIP_CD = row7.ZIP_CD;
								row22.STATECITYZIP_PATH = row7.STATECITYZIP_PATH;
								row22.INCOME_CD = row7.INCOME_CD;
								row22.PATIENT_BLOB = row7.PATIENT_BLOB;
								row22.UPDATE_DATE = row7.UPDATE_DATE;
								row22.DOWNLOAD_DATE = row7.DOWNLOAD_DATE;
								row22.IMPORT_DATE = row7.IMPORT_DATE;
								row22.SOURCESYSTEM_CD = row7.SOURCESYSTEM_CD;
								row22.UPLOAD_ID = row7.UPLOAD_ID;
								nb_uniques_tUniqRow_3++;
							} else {
								nb_duplicates_tUniqRow_3++;
							}

							tos_count_tUniqRow_3++;

							/**
							 * [tUniqRow_3 main ] stop
							 */
							// Start of branch "row22"
							if (row22 != null) {

								/**
								 * [tMap_2 main ] start
								 */

								currentComponent = "tMap_2";

								boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_2 = false;
								boolean mainRowRejected_tMap_2 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
									// ###############################
									// # Output tables

									to_PMapping = null;
									to_PTrial = null;

									// # Output table : 'to_PMapping'
									to_PMapping_tmp.PATIENT_NUM = row22.PATIENT_NUM
											.add(new BigDecimal(10000));
									to_PMapping_tmp.VITAL_STATUS_CD = row22.VITAL_STATUS_CD;
									to_PMapping_tmp.BIRTH_DATE = row22.BIRTH_DATE;
									to_PMapping_tmp.DEATH_DATE = row22.DEATH_DATE;
									to_PMapping_tmp.SEX_CD = row22.SEX_CD;
									to_PMapping_tmp.AGE_IN_YEARS_NUM = row22.AGE_IN_YEARS_NUM == null ? 0
											: row22.AGE_IN_YEARS_NUM;
									to_PMapping_tmp.LANGUAGE_CD = row22.LANGUAGE_CD;
									to_PMapping_tmp.RACE_CD = row22.RACE_CD;
									to_PMapping_tmp.MARITAL_STATUS_CD = row22.MARITAL_STATUS_CD;
									to_PMapping_tmp.RELIGION_CD = row22.RELIGION_CD;
									to_PMapping_tmp.ZIP_CD = row22.ZIP_CD;
									to_PMapping_tmp.STATECITYZIP_PATH = row22.STATECITYZIP_PATH;
									to_PMapping_tmp.INCOME_CD = row22.INCOME_CD;
									to_PMapping_tmp.PATIENT_BLOB = row22.PATIENT_BLOB;
									to_PMapping_tmp.UPDATE_DATE = row22.UPDATE_DATE;
									to_PMapping_tmp.DOWNLOAD_DATE = row22.DOWNLOAD_DATE;
									to_PMapping_tmp.IMPORT_DATE = row22.IMPORT_DATE;
									to_PMapping_tmp.SOURCESYSTEM_CD = row22.SOURCESYSTEM_CD;
									to_PMapping_tmp.UPLOAD_ID = row22.UPLOAD_ID;
									to_PMapping = to_PMapping_tmp;

									// # Output table : 'to_PTrial'
									// # Filter conditions
									if (

									context.DB_StagingI2B2_DatabaseType
											.equalsIgnoreCase("postgres")

									) {
										to_PTrial_tmp.PATIENT_NUM = row22.PATIENT_NUM
												.add(new BigDecimal(10000));
										to_PTrial_tmp.SOURCESYSTEM_CD = row22.SOURCESYSTEM_CD;
										to_PTrial_tmp.SOURCESYSTEM_CD_1 = row22.SOURCESYSTEM_CD;
										to_PTrial = to_PTrial_tmp;
									} // closing filter/reject
										// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_2 = false;

								tos_count_tMap_2++;

								/**
								 * [tMap_2 main ] stop
								 */
								// Start of branch "to_PMapping"
								if (to_PMapping != null) {

									/**
									 * [tJDBCOutput_5 main ] start
									 */

									currentComponent = "tJDBCOutput_5";

									whetherReject_tJDBCOutput_5 = false;
									pstmt_tJDBCOutput_5.setBigDecimal(1,
											to_PMapping.PATIENT_NUM);

									java.sql.ResultSet rs_tJDBCOutput_5 = pstmt_tJDBCOutput_5
											.executeQuery();
									int checkCount_tJDBCOutput_5 = -1;
									while (rs_tJDBCOutput_5.next()) {
										checkCount_tJDBCOutput_5 = rs_tJDBCOutput_5
												.getInt(1);
									}
									if (checkCount_tJDBCOutput_5 > 0) {
										if (to_PMapping.VITAL_STATUS_CD == null) {
											pstmtUpdate_tJDBCOutput_5.setNull(
													1, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_5
													.setString(
															1,
															to_PMapping.VITAL_STATUS_CD);
										}

										if (to_PMapping.BIRTH_DATE != null) {
											pstmtUpdate_tJDBCOutput_5
													.setTimestamp(
															2,
															new java.sql.Timestamp(
																	to_PMapping.BIRTH_DATE
																			.getTime()));
										} else {
											pstmtUpdate_tJDBCOutput_5.setNull(
													2, java.sql.Types.DATE);
										}

										if (to_PMapping.DEATH_DATE != null) {
											pstmtUpdate_tJDBCOutput_5
													.setTimestamp(
															3,
															new java.sql.Timestamp(
																	to_PMapping.DEATH_DATE
																			.getTime()));
										} else {
											pstmtUpdate_tJDBCOutput_5.setNull(
													3, java.sql.Types.DATE);
										}

										if (to_PMapping.SEX_CD == null) {
											pstmtUpdate_tJDBCOutput_5.setNull(
													4, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_5
													.setString(4,
															to_PMapping.SEX_CD);
										}

										if (to_PMapping.AGE_IN_YEARS_NUM == null) {
											pstmtUpdate_tJDBCOutput_5.setNull(
													5, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tJDBCOutput_5
													.setInt(5,
															to_PMapping.AGE_IN_YEARS_NUM);
										}

										if (to_PMapping.LANGUAGE_CD == null) {
											pstmtUpdate_tJDBCOutput_5.setNull(
													6, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_5
													.setString(
															6,
															to_PMapping.LANGUAGE_CD);
										}

										if (to_PMapping.RACE_CD == null) {
											pstmtUpdate_tJDBCOutput_5.setNull(
													7, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_5
													.setString(7,
															to_PMapping.RACE_CD);
										}

										if (to_PMapping.MARITAL_STATUS_CD == null) {
											pstmtUpdate_tJDBCOutput_5.setNull(
													8, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_5
													.setString(
															8,
															to_PMapping.MARITAL_STATUS_CD);
										}

										if (to_PMapping.RELIGION_CD == null) {
											pstmtUpdate_tJDBCOutput_5.setNull(
													9, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_5
													.setString(
															9,
															to_PMapping.RELIGION_CD);
										}

										if (to_PMapping.ZIP_CD == null) {
											pstmtUpdate_tJDBCOutput_5.setNull(
													10, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_5
													.setString(10,
															to_PMapping.ZIP_CD);
										}

										if (to_PMapping.STATECITYZIP_PATH == null) {
											pstmtUpdate_tJDBCOutput_5.setNull(
													11, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_5
													.setString(
															11,
															to_PMapping.STATECITYZIP_PATH);
										}

										if (to_PMapping.INCOME_CD == null) {
											pstmtUpdate_tJDBCOutput_5.setNull(
													12, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_5
													.setString(
															12,
															to_PMapping.INCOME_CD);
										}

										if (to_PMapping.PATIENT_BLOB == null) {
											pstmtUpdate_tJDBCOutput_5.setNull(
													13, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_5
													.setString(
															13,
															to_PMapping.PATIENT_BLOB);
										}

										if (to_PMapping.UPDATE_DATE != null) {
											pstmtUpdate_tJDBCOutput_5
													.setTimestamp(
															14,
															new java.sql.Timestamp(
																	to_PMapping.UPDATE_DATE
																			.getTime()));
										} else {
											pstmtUpdate_tJDBCOutput_5.setNull(
													14, java.sql.Types.DATE);
										}

										if (to_PMapping.DOWNLOAD_DATE != null) {
											pstmtUpdate_tJDBCOutput_5
													.setTimestamp(
															15,
															new java.sql.Timestamp(
																	to_PMapping.DOWNLOAD_DATE
																			.getTime()));
										} else {
											pstmtUpdate_tJDBCOutput_5.setNull(
													15, java.sql.Types.DATE);
										}

										if (to_PMapping.IMPORT_DATE != null) {
											pstmtUpdate_tJDBCOutput_5
													.setTimestamp(
															16,
															new java.sql.Timestamp(
																	to_PMapping.IMPORT_DATE
																			.getTime()));
										} else {
											pstmtUpdate_tJDBCOutput_5.setNull(
													16, java.sql.Types.DATE);
										}

										if (to_PMapping.SOURCESYSTEM_CD == null) {
											pstmtUpdate_tJDBCOutput_5.setNull(
													17, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_5
													.setString(
															17,
															to_PMapping.SOURCESYSTEM_CD);
										}

										if (to_PMapping.UPLOAD_ID == null) {
											pstmtUpdate_tJDBCOutput_5.setNull(
													18, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tJDBCOutput_5.setInt(
													18, to_PMapping.UPLOAD_ID);
										}

										pstmtUpdate_tJDBCOutput_5
												.setBigDecimal(19,
														to_PMapping.PATIENT_NUM);

										try {
											updatedCount_tJDBCOutput_5 = updatedCount_tJDBCOutput_5
													+ pstmtUpdate_tJDBCOutput_5
															.executeUpdate();
										} catch (java.lang.Exception e) {
											whetherReject_tJDBCOutput_5 = true;
											throw (e);
										}
									} else {
										pstmtInsert_tJDBCOutput_5
												.setBigDecimal(1,
														to_PMapping.PATIENT_NUM);

										if (to_PMapping.VITAL_STATUS_CD == null) {
											pstmtInsert_tJDBCOutput_5.setNull(
													2, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_5
													.setString(
															2,
															to_PMapping.VITAL_STATUS_CD);
										}

										if (to_PMapping.BIRTH_DATE != null) {
											pstmtInsert_tJDBCOutput_5
													.setTimestamp(
															3,
															new java.sql.Timestamp(
																	to_PMapping.BIRTH_DATE
																			.getTime()));
										} else {
											pstmtInsert_tJDBCOutput_5.setNull(
													3, java.sql.Types.DATE);
										}

										if (to_PMapping.DEATH_DATE != null) {
											pstmtInsert_tJDBCOutput_5
													.setTimestamp(
															4,
															new java.sql.Timestamp(
																	to_PMapping.DEATH_DATE
																			.getTime()));
										} else {
											pstmtInsert_tJDBCOutput_5.setNull(
													4, java.sql.Types.DATE);
										}

										if (to_PMapping.SEX_CD == null) {
											pstmtInsert_tJDBCOutput_5.setNull(
													5, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_5
													.setString(5,
															to_PMapping.SEX_CD);
										}

										if (to_PMapping.AGE_IN_YEARS_NUM == null) {
											pstmtInsert_tJDBCOutput_5.setNull(
													6, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tJDBCOutput_5
													.setInt(6,
															to_PMapping.AGE_IN_YEARS_NUM);
										}

										if (to_PMapping.LANGUAGE_CD == null) {
											pstmtInsert_tJDBCOutput_5.setNull(
													7, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_5
													.setString(
															7,
															to_PMapping.LANGUAGE_CD);
										}

										if (to_PMapping.RACE_CD == null) {
											pstmtInsert_tJDBCOutput_5.setNull(
													8, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_5
													.setString(8,
															to_PMapping.RACE_CD);
										}

										if (to_PMapping.MARITAL_STATUS_CD == null) {
											pstmtInsert_tJDBCOutput_5.setNull(
													9, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_5
													.setString(
															9,
															to_PMapping.MARITAL_STATUS_CD);
										}

										if (to_PMapping.RELIGION_CD == null) {
											pstmtInsert_tJDBCOutput_5.setNull(
													10, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_5
													.setString(
															10,
															to_PMapping.RELIGION_CD);
										}

										if (to_PMapping.ZIP_CD == null) {
											pstmtInsert_tJDBCOutput_5.setNull(
													11, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_5
													.setString(11,
															to_PMapping.ZIP_CD);
										}

										if (to_PMapping.STATECITYZIP_PATH == null) {
											pstmtInsert_tJDBCOutput_5.setNull(
													12, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_5
													.setString(
															12,
															to_PMapping.STATECITYZIP_PATH);
										}

										if (to_PMapping.INCOME_CD == null) {
											pstmtInsert_tJDBCOutput_5.setNull(
													13, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_5
													.setString(
															13,
															to_PMapping.INCOME_CD);
										}

										if (to_PMapping.PATIENT_BLOB == null) {
											pstmtInsert_tJDBCOutput_5.setNull(
													14, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_5
													.setString(
															14,
															to_PMapping.PATIENT_BLOB);
										}

										if (to_PMapping.UPDATE_DATE != null) {
											pstmtInsert_tJDBCOutput_5
													.setTimestamp(
															15,
															new java.sql.Timestamp(
																	to_PMapping.UPDATE_DATE
																			.getTime()));
										} else {
											pstmtInsert_tJDBCOutput_5.setNull(
													15, java.sql.Types.DATE);
										}

										if (to_PMapping.DOWNLOAD_DATE != null) {
											pstmtInsert_tJDBCOutput_5
													.setTimestamp(
															16,
															new java.sql.Timestamp(
																	to_PMapping.DOWNLOAD_DATE
																			.getTime()));
										} else {
											pstmtInsert_tJDBCOutput_5.setNull(
													16, java.sql.Types.DATE);
										}

										if (to_PMapping.IMPORT_DATE != null) {
											pstmtInsert_tJDBCOutput_5
													.setTimestamp(
															17,
															new java.sql.Timestamp(
																	to_PMapping.IMPORT_DATE
																			.getTime()));
										} else {
											pstmtInsert_tJDBCOutput_5.setNull(
													17, java.sql.Types.DATE);
										}

										if (to_PMapping.SOURCESYSTEM_CD == null) {
											pstmtInsert_tJDBCOutput_5.setNull(
													18, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_5
													.setString(
															18,
															to_PMapping.SOURCESYSTEM_CD);
										}

										if (to_PMapping.UPLOAD_ID == null) {
											pstmtInsert_tJDBCOutput_5.setNull(
													19, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tJDBCOutput_5.setInt(
													19, to_PMapping.UPLOAD_ID);
										}

										try {
											insertedCount_tJDBCOutput_5 = insertedCount_tJDBCOutput_5
													+ pstmtInsert_tJDBCOutput_5
															.executeUpdate();
										} catch (java.lang.Exception e) {
											whetherReject_tJDBCOutput_5 = true;
											throw (e);
										}
									}
									nb_line_tJDBCOutput_5++;
									if (!whetherReject_tJDBCOutput_5) {
									}

									tos_count_tJDBCOutput_5++;

									/**
									 * [tJDBCOutput_5 main ] stop
									 */

								} // End of branch "to_PMapping"

								// Start of branch "to_PTrial"
								if (to_PTrial != null) {

									/**
									 * [tJDBCOutput_9 main ] start
									 */

									currentComponent = "tJDBCOutput_9";

									whetherReject_tJDBCOutput_9 = false;
									pstmt_tJDBCOutput_9.setBigDecimal(1,
											to_PTrial.PATIENT_NUM);

									if (to_PTrial.SOURCESYSTEM_CD == null) {
										pstmt_tJDBCOutput_9.setNull(2,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_9.setString(2,
												to_PTrial.SOURCESYSTEM_CD);
									}

									if (to_PTrial.SOURCESYSTEM_CD_1 == null) {
										pstmt_tJDBCOutput_9.setNull(3,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_9.setString(3,
												to_PTrial.SOURCESYSTEM_CD_1);
									}

									try {
										insertedCount_tJDBCOutput_9 = insertedCount_tJDBCOutput_9
												+ pstmt_tJDBCOutput_9
														.executeUpdate();
										nb_line_tJDBCOutput_9++;
									} catch (java.lang.Exception e) {
										whetherReject_tJDBCOutput_9 = true;
										System.err.print(e.getMessage());
									}

									tos_count_tJDBCOutput_9++;

									/**
									 * [tJDBCOutput_9 main ] stop
									 */

								} // End of branch "to_PTrial"

							} // End of branch "row22"

						} // End of branch "row7"

						/**
						 * [tFileInputDelimited_7 end ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						nb_line_tFileInputDelimited_7++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_7 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_7 != null) {
							csvReadertFileInputDelimited_7.close();
						}
					}
					if (csvReadertFileInputDelimited_7 != null) {
						globalMap.put("tFileInputDelimited_7_NB_LINE",
								nb_line_tFileInputDelimited_7);
					}
				}

				ok_Hash.put("tFileInputDelimited_7", true);
				end_Hash.put("tFileInputDelimited_7",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_7 end ] stop
				 */

				/**
				 * [tUniqRow_3 end ] start
				 */

				currentComponent = "tUniqRow_3";

				globalMap.put("tUniqRow_3_NB_UNIQUES", nb_uniques_tUniqRow_3);
				globalMap.put("tUniqRow_3_NB_DUPLICATES",
						nb_duplicates_tUniqRow_3);

				ok_Hash.put("tUniqRow_3", true);
				end_Hash.put("tUniqRow_3", System.currentTimeMillis());

				/**
				 * [tUniqRow_3 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tJDBCOutput_9 end ] start
				 */

				currentComponent = "tJDBCOutput_9";

				if (pstmt_tJDBCOutput_9 != null) {

					pstmt_tJDBCOutput_9.close();

				}

				nb_line_deleted_tJDBCOutput_9 = nb_line_deleted_tJDBCOutput_9
						+ deletedCount_tJDBCOutput_9;
				nb_line_update_tJDBCOutput_9 = nb_line_update_tJDBCOutput_9
						+ updatedCount_tJDBCOutput_9;
				nb_line_inserted_tJDBCOutput_9 = nb_line_inserted_tJDBCOutput_9
						+ insertedCount_tJDBCOutput_9;
				nb_line_rejected_tJDBCOutput_9 = nb_line_rejected_tJDBCOutput_9
						+ rejectedCount_tJDBCOutput_9;

				globalMap.put("tJDBCOutput_9_NB_LINE", nb_line_tJDBCOutput_9);
				globalMap.put("tJDBCOutput_9_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_9);
				globalMap.put("tJDBCOutput_9_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_9);
				globalMap.put("tJDBCOutput_9_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_9);
				globalMap.put("tJDBCOutput_9_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_9);

				ok_Hash.put("tJDBCOutput_9", true);
				end_Hash.put("tJDBCOutput_9", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_9 end ] stop
				 */

				/**
				 * [tJDBCOutput_5 end ] start
				 */

				currentComponent = "tJDBCOutput_5";

				if (pstmtUpdate_tJDBCOutput_5 != null) {

					pstmtUpdate_tJDBCOutput_5.close();

				}
				if (pstmtInsert_tJDBCOutput_5 != null) {

					pstmtInsert_tJDBCOutput_5.close();

				}
				if (pstmt_tJDBCOutput_5 != null) {

					pstmt_tJDBCOutput_5.close();

				}

				nb_line_deleted_tJDBCOutput_5 = nb_line_deleted_tJDBCOutput_5
						+ deletedCount_tJDBCOutput_5;
				nb_line_update_tJDBCOutput_5 = nb_line_update_tJDBCOutput_5
						+ updatedCount_tJDBCOutput_5;
				nb_line_inserted_tJDBCOutput_5 = nb_line_inserted_tJDBCOutput_5
						+ insertedCount_tJDBCOutput_5;
				nb_line_rejected_tJDBCOutput_5 = nb_line_rejected_tJDBCOutput_5
						+ rejectedCount_tJDBCOutput_5;

				globalMap.put("tJDBCOutput_5_NB_LINE", nb_line_tJDBCOutput_5);
				globalMap.put("tJDBCOutput_5_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_5);
				globalMap.put("tJDBCOutput_5_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_5);
				globalMap.put("tJDBCOutput_5_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_5);
				globalMap.put("tJDBCOutput_5_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_5);

				ok_Hash.put("tJDBCOutput_5", true);
				end_Hash.put("tJDBCOutput_5", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_5 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_7:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_12Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 1);
	}

	public void tJava_12Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_12 begin ] start
				 */

				ok_Hash.put("tJava_12", false);
				start_Hash.put("tJava_12", System.currentTimeMillis());
				currentComponent = "tJava_12";

				int tos_count_tJava_12 = 0;

				context.currentTable = context.DB_StagingI2B2_DatabaseType
						.equalsIgnoreCase("postgres") ? "i2b2demodata.concept_dimension"
						: (context.DB_StagingI2B2_Schema + ".concept_dimension");
				StatusListener.setSubStatus(60.0f, (int) (float) (60.0f) + "%");

				/**
				 * [tJava_12 begin ] stop
				 */
				/**
				 * [tJava_12 main ] start
				 */

				currentComponent = "tJava_12";

				tos_count_tJava_12++;

				/**
				 * [tJava_12 main ] stop
				 */
				/**
				 * [tJava_12 end ] start
				 */

				currentComponent = "tJava_12";

				ok_Hash.put("tJava_12", true);
				end_Hash.put("tJava_12", System.currentTimeMillis());

				/**
				 * [tJava_12 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_12:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_8Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_12_SUBPROCESS_STATE", 1);
	}

	public static class row19Struct implements
			routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length);
				strReturn = new String(
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.CONCEPT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.CONCEPT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];

		public String CONCEPT_PATH;

		public String getCONCEPT_PATH() {
			return this.CONCEPT_PATH;
		}

		public String CONCEPT_CD;

		public String getCONCEPT_CD() {
			return this.CONCEPT_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String CONCEPT_BLOB;

		public String getCONCEPT_BLOB() {
			return this.CONCEPT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length);
				strReturn = new String(
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.CONCEPT_PATH = readString(dis);

					this.CONCEPT_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.CONCEPT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CONCEPT_PATH, dos);

				// String

				writeString(this.CONCEPT_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.CONCEPT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CONCEPT_PATH=" + CONCEPT_PATH);
			sb.append(",CONCEPT_CD=" + CONCEPT_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",CONCEPT_BLOB=" + CONCEPT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_8Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();
				row19Struct row19 = new row19Struct();

				/**
				 * [tJDBCOutput_6 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_6", false);
				start_Hash.put("tJDBCOutput_6", System.currentTimeMillis());
				currentComponent = "tJDBCOutput_6";

				int tos_count_tJDBCOutput_6 = 0;

				int updateKeyCount_tJDBCOutput_6 = 1;
				if (updateKeyCount_tJDBCOutput_6 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tJDBCOutput_6 = 0;
				int nb_line_update_tJDBCOutput_6 = 0;
				int nb_line_inserted_tJDBCOutput_6 = 0;
				int nb_line_deleted_tJDBCOutput_6 = 0;
				int nb_line_rejected_tJDBCOutput_6 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_6 = 0;

				int deletedCount_tJDBCOutput_6 = 0;
				int updatedCount_tJDBCOutput_6 = 0;
				int insertedCount_tJDBCOutput_6 = 0;
				int rejectedCount_tJDBCOutput_6 = 0;

				boolean whetherReject_tJDBCOutput_6 = false;

				java.sql.Connection connection_tJDBCOutput_6 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");
				if (null == connection_tJDBCOutput_6) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCOutput_6 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					connection_tJDBCOutput_6 = dataSources_tJDBCOutput_6
							.get("").getConnection();
				}

				int batchSize_tJDBCOutput_6 = 10000;
				int batchSizeCounter_tJDBCOutput_6 = 0;

				java.sql.PreparedStatement pstmt_tJDBCOutput_6 = connection_tJDBCOutput_6
						.prepareStatement("SELECT COUNT(1) FROM "
								+ context.currentTable
								+ " WHERE CONCEPT_PATH = ?");
				String insert_tJDBCOutput_6 = "INSERT INTO "
						+ context.currentTable
						+ " (CONCEPT_PATH,CONCEPT_CD,NAME_CHAR,CONCEPT_BLOB,UPDATE_DATE,DOWNLOAD_DATE,IMPORT_DATE,SOURCESYSTEM_CD,UPLOAD_ID) VALUES (?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tJDBCOutput_6 = connection_tJDBCOutput_6
						.prepareStatement(insert_tJDBCOutput_6);
				String update_tJDBCOutput_6 = "UPDATE "
						+ context.currentTable
						+ " SET CONCEPT_CD = ?,NAME_CHAR = ?,CONCEPT_BLOB = ?,UPDATE_DATE = ?,DOWNLOAD_DATE = ?,IMPORT_DATE = ?,SOURCESYSTEM_CD = ?,UPLOAD_ID = ? WHERE CONCEPT_PATH = ?";
				java.sql.PreparedStatement pstmtUpdate_tJDBCOutput_6 = connection_tJDBCOutput_6
						.prepareStatement(update_tJDBCOutput_6);

				/**
				 * [tJDBCOutput_6 begin ] stop
				 */

				/**
				 * [tUniqRow_1 begin ] start
				 */

				ok_Hash.put("tUniqRow_1", false);
				start_Hash.put("tUniqRow_1", System.currentTimeMillis());
				currentComponent = "tUniqRow_1";

				int tos_count_tUniqRow_1 = 0;

				class KeyStruct_tUniqRow_1 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String CONCEPT_PATH;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.CONCEPT_PATH == null) ? 0
											: this.CONCEPT_PATH.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;

						if (this.CONCEPT_PATH == null) {
							if (other.CONCEPT_PATH != null)
								return false;
						} else if (!this.CONCEPT_PATH
								.equals(other.CONCEPT_PATH))
							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_1 = 0;
				int nb_duplicates_tUniqRow_1 = 0;
				KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
				java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>();

				/**
				 * [tUniqRow_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_8 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_8", false);
				start_Hash.put("tFileInputDelimited_8",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_8";

				int tos_count_tFileInputDelimited_8 = 0;

				int nb_line_tFileInputDelimited_8 = 0;
				int footer_tFileInputDelimited_8 = 0;
				int totalLinetFileInputDelimited_8 = 0;
				int limittFileInputDelimited_8 = -1;
				int lastLinetFileInputDelimited_8 = -1;

				char fieldSeparator_tFileInputDelimited_8[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_8 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_8[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_8 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_8 = /**
				 * Start field
				 * tFileInputDelimited_8:FILENAME
				 */
				context.folderMain + context.folderOutput
						+ "concept_dimension.csv"/**
				 * End field
				 * tFileInputDelimited_8:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_8 = null;

				try {

					String[] rowtFileInputDelimited_8 = null;
					int currentLinetFileInputDelimited_8 = 0;
					int outputLinetFileInputDelimited_8 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_8 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_8 = 0;
							if (footer_value_tFileInputDelimited_8 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_8,
									fieldSeparator_tFileInputDelimited_8[0],
									context.coding);
						} else {
							csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_8)),
													context.coding)),
									fieldSeparator_tFileInputDelimited_8[0]);
						}

						csvReadertFileInputDelimited_8.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_8[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_8[0] != '\r'))
							csvReadertFileInputDelimited_8.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_8[0]);

						csvReadertFileInputDelimited_8.setQuoteChar('"');

						csvReadertFileInputDelimited_8
								.setEscapeChar(csvReadertFileInputDelimited_8
										.getQuoteChar());

						if (footer_tFileInputDelimited_8 > 0) {
							for (totalLinetFileInputDelimited_8 = 0; totalLinetFileInputDelimited_8 < 1; totalLinetFileInputDelimited_8++) {
								csvReadertFileInputDelimited_8.readNext();
							}
							csvReadertFileInputDelimited_8
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_8.readNext()) {

								rowtFileInputDelimited_8 = csvReadertFileInputDelimited_8
										.getValues();
								if (!(rowtFileInputDelimited_8.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_8[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_8++;

								}

							}
							int lastLineTemptFileInputDelimited_8 = totalLinetFileInputDelimited_8
									- footer_tFileInputDelimited_8 < 0 ? 0
									: totalLinetFileInputDelimited_8
											- footer_tFileInputDelimited_8;
							if (lastLinetFileInputDelimited_8 > 0) {
								lastLinetFileInputDelimited_8 = lastLinetFileInputDelimited_8 < lastLineTemptFileInputDelimited_8 ? lastLinetFileInputDelimited_8
										: lastLineTemptFileInputDelimited_8;
							} else {
								lastLinetFileInputDelimited_8 = lastLineTemptFileInputDelimited_8;
							}

							csvReadertFileInputDelimited_8.close();
							if (filename_tFileInputDelimited_8 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_8,
										fieldSeparator_tFileInputDelimited_8[0],
										context.coding);
							} else {
								csvReadertFileInputDelimited_8 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_8)),
														context.coding)),
										fieldSeparator_tFileInputDelimited_8[0]);
							}
							csvReadertFileInputDelimited_8
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_8[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_8[0] != '\r'))
								csvReadertFileInputDelimited_8
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_8[0]);

							csvReadertFileInputDelimited_8.setQuoteChar('"');

							csvReadertFileInputDelimited_8
									.setEscapeChar(csvReadertFileInputDelimited_8
											.getQuoteChar());

						}

						if (limittFileInputDelimited_8 != 0) {
							for (currentLinetFileInputDelimited_8 = 0; currentLinetFileInputDelimited_8 < 1; currentLinetFileInputDelimited_8++) {
								csvReadertFileInputDelimited_8.readNext();
							}
						}
						csvReadertFileInputDelimited_8
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_8 != 0
							&& csvReadertFileInputDelimited_8 != null
							&& csvReadertFileInputDelimited_8.readNext()) {

						rowtFileInputDelimited_8 = csvReadertFileInputDelimited_8
								.getValues();

						if (rowtFileInputDelimited_8.length == 1
								&& ("\015").equals(rowtFileInputDelimited_8[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_8++;

						if (lastLinetFileInputDelimited_8 > -1
								&& currentLinetFileInputDelimited_8 > lastLinetFileInputDelimited_8) {
							break;
						}
						outputLinetFileInputDelimited_8++;
						if (limittFileInputDelimited_8 > 0
								&& outputLinetFileInputDelimited_8 > limittFileInputDelimited_8) {
							break;
						}

						row8 = null;

						boolean whetherReject_tFileInputDelimited_8 = false;
						row8 = new row8Struct();
						try {

							if (rowtFileInputDelimited_8.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_8[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row8.CONCEPT_PATH = null;

								row8.CONCEPT_CD = null;

								row8.NAME_CHAR = null;

								row8.CONCEPT_BLOB = null;

								row8.UPDATE_DATE = null;

								row8.DOWNLOAD_DATE = null;

								row8.IMPORT_DATE = null;

								row8.SOURCESYSTEM_CD = null;

								row8.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_8 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_8 = 0;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row8.CONCEPT_PATH = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row8.CONCEPT_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 1;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row8.CONCEPT_CD = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row8.CONCEPT_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 2;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row8.NAME_CHAR = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row8.NAME_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 3;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row8.CONCEPT_BLOB = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row8.CONCEPT_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 4;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									if (rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8]
											.length() > 0) {

										row8.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8],
														"dd-MM-yyyy");

									} else {
										row8.UPDATE_DATE = null;
									}

								} else {
									row8.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 5;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									if (rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8]
											.length() > 0) {

										row8.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8],
														"dd-MM-yyyy");

									} else {
										row8.DOWNLOAD_DATE = null;
									}

								} else {
									row8.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 6;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									if (rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8]
											.length() > 0) {

										row8.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8],
														"dd-MM-yyyy");

									} else {
										row8.IMPORT_DATE = null;
									}

								} else {
									row8.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 7;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									row8.SOURCESYSTEM_CD = rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8];

								} else {
									row8.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_8 = 8;

								if (columnIndexWithD_tFileInputDelimited_8 < rowtFileInputDelimited_8.length) {

									if (rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8]
											.length() > 0) {

										row8.UPLOAD_ID = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_8[columnIndexWithD_tFileInputDelimited_8]);

									} else {
										row8.UPLOAD_ID = null;
									}

								} else {
									row8.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_8 = true;

							System.err.println(e.getMessage());
							row8 = null;

						}

						/**
						 * [tFileInputDelimited_8 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_8 main ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						tos_count_tFileInputDelimited_8++;

						/**
						 * [tFileInputDelimited_8 main ] stop
						 */
						// Start of branch "row8"
						if (row8 != null) {

							/**
							 * [tUniqRow_1 main ] start
							 */

							currentComponent = "tUniqRow_1";

							row19 = null;
							if (row8.CONCEPT_PATH == null) {
								finder_tUniqRow_1.CONCEPT_PATH = null;
							} else {
								finder_tUniqRow_1.CONCEPT_PATH = row8.CONCEPT_PATH
										.toLowerCase();
							}
							finder_tUniqRow_1.hashCodeDirty = true;
							if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
								KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

								if (row8.CONCEPT_PATH == null) {
									new_tUniqRow_1.CONCEPT_PATH = null;
								} else {
									new_tUniqRow_1.CONCEPT_PATH = row8.CONCEPT_PATH
											.toLowerCase();
								}

								keystUniqRow_1.add(new_tUniqRow_1);
								if (row19 == null) {
									row19 = new row19Struct();
								}
								row19.CONCEPT_PATH = row8.CONCEPT_PATH;
								row19.CONCEPT_CD = row8.CONCEPT_CD;
								row19.NAME_CHAR = row8.NAME_CHAR;
								row19.CONCEPT_BLOB = row8.CONCEPT_BLOB;
								row19.UPDATE_DATE = row8.UPDATE_DATE;
								row19.DOWNLOAD_DATE = row8.DOWNLOAD_DATE;
								row19.IMPORT_DATE = row8.IMPORT_DATE;
								row19.SOURCESYSTEM_CD = row8.SOURCESYSTEM_CD;
								row19.UPLOAD_ID = row8.UPLOAD_ID;
								nb_uniques_tUniqRow_1++;
							} else {
								nb_duplicates_tUniqRow_1++;
							}

							tos_count_tUniqRow_1++;

							/**
							 * [tUniqRow_1 main ] stop
							 */
							// Start of branch "row19"
							if (row19 != null) {

								/**
								 * [tJDBCOutput_6 main ] start
								 */

								currentComponent = "tJDBCOutput_6";

								whetherReject_tJDBCOutput_6 = false;
								if (row19.CONCEPT_PATH == null) {
									pstmt_tJDBCOutput_6.setNull(1,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_6.setString(1,
											row19.CONCEPT_PATH);
								}

								java.sql.ResultSet rs_tJDBCOutput_6 = pstmt_tJDBCOutput_6
										.executeQuery();
								int checkCount_tJDBCOutput_6 = -1;
								while (rs_tJDBCOutput_6.next()) {
									checkCount_tJDBCOutput_6 = rs_tJDBCOutput_6
											.getInt(1);
								}
								if (checkCount_tJDBCOutput_6 > 0) {
									if (row19.CONCEPT_CD == null) {
										pstmtUpdate_tJDBCOutput_6.setNull(1,
												java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tJDBCOutput_6.setString(1,
												row19.CONCEPT_CD);
									}

									if (row19.NAME_CHAR == null) {
										pstmtUpdate_tJDBCOutput_6.setNull(2,
												java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tJDBCOutput_6.setString(2,
												row19.NAME_CHAR);
									}

									if (row19.CONCEPT_BLOB == null) {
										pstmtUpdate_tJDBCOutput_6.setNull(3,
												java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tJDBCOutput_6.setString(3,
												row19.CONCEPT_BLOB);
									}

									if (row19.UPDATE_DATE != null) {
										pstmtUpdate_tJDBCOutput_6.setTimestamp(
												4,
												new java.sql.Timestamp(
														row19.UPDATE_DATE
																.getTime()));
									} else {
										pstmtUpdate_tJDBCOutput_6.setNull(4,
												java.sql.Types.DATE);
									}

									if (row19.DOWNLOAD_DATE != null) {
										pstmtUpdate_tJDBCOutput_6.setTimestamp(
												5,
												new java.sql.Timestamp(
														row19.DOWNLOAD_DATE
																.getTime()));
									} else {
										pstmtUpdate_tJDBCOutput_6.setNull(5,
												java.sql.Types.DATE);
									}

									if (row19.IMPORT_DATE != null) {
										pstmtUpdate_tJDBCOutput_6.setTimestamp(
												6,
												new java.sql.Timestamp(
														row19.IMPORT_DATE
																.getTime()));
									} else {
										pstmtUpdate_tJDBCOutput_6.setNull(6,
												java.sql.Types.DATE);
									}

									if (row19.SOURCESYSTEM_CD == null) {
										pstmtUpdate_tJDBCOutput_6.setNull(7,
												java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tJDBCOutput_6.setString(7,
												row19.SOURCESYSTEM_CD);
									}

									if (row19.UPLOAD_ID == null) {
										pstmtUpdate_tJDBCOutput_6.setNull(8,
												java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tJDBCOutput_6.setInt(8,
												row19.UPLOAD_ID);
									}

									if (row19.CONCEPT_PATH == null) {
										pstmtUpdate_tJDBCOutput_6.setNull(9,
												java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tJDBCOutput_6.setString(9,
												row19.CONCEPT_PATH);
									}

									try {
										updatedCount_tJDBCOutput_6 = updatedCount_tJDBCOutput_6
												+ pstmtUpdate_tJDBCOutput_6
														.executeUpdate();
									} catch (java.lang.Exception e) {
										whetherReject_tJDBCOutput_6 = true;
										throw (e);
									}
								} else {
									if (row19.CONCEPT_PATH == null) {
										pstmtInsert_tJDBCOutput_6.setNull(1,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tJDBCOutput_6.setString(1,
												row19.CONCEPT_PATH);
									}

									if (row19.CONCEPT_CD == null) {
										pstmtInsert_tJDBCOutput_6.setNull(2,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tJDBCOutput_6.setString(2,
												row19.CONCEPT_CD);
									}

									if (row19.NAME_CHAR == null) {
										pstmtInsert_tJDBCOutput_6.setNull(3,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tJDBCOutput_6.setString(3,
												row19.NAME_CHAR);
									}

									if (row19.CONCEPT_BLOB == null) {
										pstmtInsert_tJDBCOutput_6.setNull(4,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tJDBCOutput_6.setString(4,
												row19.CONCEPT_BLOB);
									}

									if (row19.UPDATE_DATE != null) {
										pstmtInsert_tJDBCOutput_6.setTimestamp(
												5,
												new java.sql.Timestamp(
														row19.UPDATE_DATE
																.getTime()));
									} else {
										pstmtInsert_tJDBCOutput_6.setNull(5,
												java.sql.Types.DATE);
									}

									if (row19.DOWNLOAD_DATE != null) {
										pstmtInsert_tJDBCOutput_6.setTimestamp(
												6,
												new java.sql.Timestamp(
														row19.DOWNLOAD_DATE
																.getTime()));
									} else {
										pstmtInsert_tJDBCOutput_6.setNull(6,
												java.sql.Types.DATE);
									}

									if (row19.IMPORT_DATE != null) {
										pstmtInsert_tJDBCOutput_6.setTimestamp(
												7,
												new java.sql.Timestamp(
														row19.IMPORT_DATE
																.getTime()));
									} else {
										pstmtInsert_tJDBCOutput_6.setNull(7,
												java.sql.Types.DATE);
									}

									if (row19.SOURCESYSTEM_CD == null) {
										pstmtInsert_tJDBCOutput_6.setNull(8,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tJDBCOutput_6.setString(8,
												row19.SOURCESYSTEM_CD);
									}

									if (row19.UPLOAD_ID == null) {
										pstmtInsert_tJDBCOutput_6.setNull(9,
												java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tJDBCOutput_6.setInt(9,
												row19.UPLOAD_ID);
									}

									try {
										insertedCount_tJDBCOutput_6 = insertedCount_tJDBCOutput_6
												+ pstmtInsert_tJDBCOutput_6
														.executeUpdate();
									} catch (java.lang.Exception e) {
										whetherReject_tJDBCOutput_6 = true;
										throw (e);
									}
								}
								nb_line_tJDBCOutput_6++;
								if (!whetherReject_tJDBCOutput_6) {
								}

								tos_count_tJDBCOutput_6++;

								/**
								 * [tJDBCOutput_6 main ] stop
								 */

							} // End of branch "row19"

						} // End of branch "row8"

						/**
						 * [tFileInputDelimited_8 end ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						nb_line_tFileInputDelimited_8++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_8 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_8 != null) {
							csvReadertFileInputDelimited_8.close();
						}
					}
					if (csvReadertFileInputDelimited_8 != null) {
						globalMap.put("tFileInputDelimited_8_NB_LINE",
								nb_line_tFileInputDelimited_8);
					}
				}

				ok_Hash.put("tFileInputDelimited_8", true);
				end_Hash.put("tFileInputDelimited_8",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_8 end ] stop
				 */

				/**
				 * [tUniqRow_1 end ] start
				 */

				currentComponent = "tUniqRow_1";

				globalMap.put("tUniqRow_1_NB_UNIQUES", nb_uniques_tUniqRow_1);
				globalMap.put("tUniqRow_1_NB_DUPLICATES",
						nb_duplicates_tUniqRow_1);

				ok_Hash.put("tUniqRow_1", true);
				end_Hash.put("tUniqRow_1", System.currentTimeMillis());

				/**
				 * [tUniqRow_1 end ] stop
				 */

				/**
				 * [tJDBCOutput_6 end ] start
				 */

				currentComponent = "tJDBCOutput_6";

				if (pstmtUpdate_tJDBCOutput_6 != null) {

					pstmtUpdate_tJDBCOutput_6.close();

				}
				if (pstmtInsert_tJDBCOutput_6 != null) {

					pstmtInsert_tJDBCOutput_6.close();

				}
				if (pstmt_tJDBCOutput_6 != null) {

					pstmt_tJDBCOutput_6.close();

				}

				nb_line_deleted_tJDBCOutput_6 = nb_line_deleted_tJDBCOutput_6
						+ deletedCount_tJDBCOutput_6;
				nb_line_update_tJDBCOutput_6 = nb_line_update_tJDBCOutput_6
						+ updatedCount_tJDBCOutput_6;
				nb_line_inserted_tJDBCOutput_6 = nb_line_inserted_tJDBCOutput_6
						+ insertedCount_tJDBCOutput_6;
				nb_line_rejected_tJDBCOutput_6 = nb_line_rejected_tJDBCOutput_6
						+ rejectedCount_tJDBCOutput_6;

				globalMap.put("tJDBCOutput_6_NB_LINE", nb_line_tJDBCOutput_6);
				globalMap.put("tJDBCOutput_6_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_6);
				globalMap.put("tJDBCOutput_6_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_6);
				globalMap.put("tJDBCOutput_6_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_6);
				globalMap.put("tJDBCOutput_6_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_6);

				ok_Hash.put("tJDBCOutput_6", true);
				end_Hash.put("tJDBCOutput_6", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_6 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_8:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_13Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 1);
	}

	public void tJava_13Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_13 begin ] start
				 */

				ok_Hash.put("tJava_13", false);
				start_Hash.put("tJava_13", System.currentTimeMillis());
				currentComponent = "tJava_13";

				int tos_count_tJava_13 = 0;

				context.currentTable = context.DB_StagingI2B2_DatabaseType
						.equalsIgnoreCase("postgres") ? "i2b2demodata.modifier_dimension"
						: (context.DB_StagingI2B2_Schema + ".modifier_dimension");
				System.out.println("Starting Import: Modifier/Visit Dimension");
				StatusListener.setSubStatus(80.0f, (int) (float) (80.0f) + "%");

				/**
				 * [tJava_13 begin ] stop
				 */
				/**
				 * [tJava_13 main ] start
				 */

				currentComponent = "tJava_13";

				tos_count_tJava_13++;

				/**
				 * [tJava_13 main ] stop
				 */
				/**
				 * [tJava_13 end ] start
				 */

				currentComponent = "tJava_13";

				ok_Hash.put("tJava_13", true);
				end_Hash.put("tJava_13", System.currentTimeMillis());

				/**
				 * [tJava_13 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_13:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_14Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_13_SUBPROCESS_STATE", 1);
	}

	public static class row20Struct implements
			routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];

		public String MODIFIER_PATH;

		public String getMODIFIER_PATH() {
			return this.MODIFIER_PATH;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String MODIFIER_BLOB;

		public String getMODIFIER_BLOB() {
			return this.MODIFIER_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length);
				strReturn = new String(
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.MODIFIER_PATH = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.MODIFIER_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MODIFIER_PATH, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.MODIFIER_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MODIFIER_PATH=" + MODIFIER_PATH);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",MODIFIER_BLOB=" + MODIFIER_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row17Struct implements
			routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];

		public String MODIFIER_PATH;

		public String getMODIFIER_PATH() {
			return this.MODIFIER_PATH;
		}

		public String MODIFIER_CD;

		public String getMODIFIER_CD() {
			return this.MODIFIER_CD;
		}

		public String NAME_CHAR;

		public String getNAME_CHAR() {
			return this.NAME_CHAR;
		}

		public String MODIFIER_BLOB;

		public String getMODIFIER_BLOB() {
			return this.MODIFIER_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length);
				strReturn = new String(
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.MODIFIER_PATH = readString(dis);

					this.MODIFIER_CD = readString(dis);

					this.NAME_CHAR = readString(dis);

					this.MODIFIER_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MODIFIER_PATH, dos);

				// String

				writeString(this.MODIFIER_CD, dos);

				// String

				writeString(this.NAME_CHAR, dos);

				// String

				writeString(this.MODIFIER_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MODIFIER_PATH=" + MODIFIER_PATH);
			sb.append(",MODIFIER_CD=" + MODIFIER_CD);
			sb.append(",NAME_CHAR=" + NAME_CHAR);
			sb.append(",MODIFIER_BLOB=" + MODIFIER_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_14Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row17Struct row17 = new row17Struct();
				row20Struct row20 = new row20Struct();

				/**
				 * [tJDBCOutput_7 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_7", false);
				start_Hash.put("tJDBCOutput_7", System.currentTimeMillis());
				currentComponent = "tJDBCOutput_7";

				int tos_count_tJDBCOutput_7 = 0;

				int updateKeyCount_tJDBCOutput_7 = 1;
				if (updateKeyCount_tJDBCOutput_7 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tJDBCOutput_7 = 0;
				int nb_line_update_tJDBCOutput_7 = 0;
				int nb_line_inserted_tJDBCOutput_7 = 0;
				int nb_line_deleted_tJDBCOutput_7 = 0;
				int nb_line_rejected_tJDBCOutput_7 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_7 = 0;

				int deletedCount_tJDBCOutput_7 = 0;
				int updatedCount_tJDBCOutput_7 = 0;
				int insertedCount_tJDBCOutput_7 = 0;
				int rejectedCount_tJDBCOutput_7 = 0;

				boolean whetherReject_tJDBCOutput_7 = false;

				java.sql.Connection connection_tJDBCOutput_7 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");
				if (null == connection_tJDBCOutput_7) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCOutput_7 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					connection_tJDBCOutput_7 = dataSources_tJDBCOutput_7
							.get("").getConnection();
				}

				int batchSize_tJDBCOutput_7 = 10000;
				int batchSizeCounter_tJDBCOutput_7 = 0;

				java.sql.PreparedStatement pstmt_tJDBCOutput_7 = connection_tJDBCOutput_7
						.prepareStatement("SELECT COUNT(1) FROM "
								+ context.currentTable
								+ " WHERE MODIFIER_PATH = ?");
				String insert_tJDBCOutput_7 = "INSERT INTO "
						+ context.currentTable
						+ " (MODIFIER_PATH,MODIFIER_CD,NAME_CHAR,MODIFIER_BLOB,UPDATE_DATE,DOWNLOAD_DATE,IMPORT_DATE,SOURCESYSTEM_CD,UPLOAD_ID) VALUES (?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tJDBCOutput_7 = connection_tJDBCOutput_7
						.prepareStatement(insert_tJDBCOutput_7);
				String update_tJDBCOutput_7 = "UPDATE "
						+ context.currentTable
						+ " SET MODIFIER_CD = ?,NAME_CHAR = ?,MODIFIER_BLOB = ?,UPDATE_DATE = ?,DOWNLOAD_DATE = ?,IMPORT_DATE = ?,SOURCESYSTEM_CD = ?,UPLOAD_ID = ? WHERE MODIFIER_PATH = ?";
				java.sql.PreparedStatement pstmtUpdate_tJDBCOutput_7 = connection_tJDBCOutput_7
						.prepareStatement(update_tJDBCOutput_7);

				/**
				 * [tJDBCOutput_7 begin ] stop
				 */

				/**
				 * [tUniqRow_2 begin ] start
				 */

				ok_Hash.put("tUniqRow_2", false);
				start_Hash.put("tUniqRow_2", System.currentTimeMillis());
				currentComponent = "tUniqRow_2";

				int tos_count_tUniqRow_2 = 0;

				class KeyStruct_tUniqRow_2 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String MODIFIER_PATH;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.MODIFIER_PATH == null) ? 0
											: this.MODIFIER_PATH.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;

						if (this.MODIFIER_PATH == null) {
							if (other.MODIFIER_PATH != null)
								return false;
						} else if (!this.MODIFIER_PATH
								.equals(other.MODIFIER_PATH))
							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_2 = 0;
				int nb_duplicates_tUniqRow_2 = 0;
				KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
				java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>();

				/**
				 * [tUniqRow_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_14 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_14", false);
				start_Hash.put("tFileInputDelimited_14",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_14";

				int tos_count_tFileInputDelimited_14 = 0;

				int nb_line_tFileInputDelimited_14 = 0;
				int footer_tFileInputDelimited_14 = 0;
				int totalLinetFileInputDelimited_14 = 0;
				int limittFileInputDelimited_14 = -1;
				int lastLinetFileInputDelimited_14 = -1;

				char fieldSeparator_tFileInputDelimited_14[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_14 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_14[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_14 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_14 = /**
				 * Start field
				 * tFileInputDelimited_14:FILENAME
				 */
				context.folderMain + context.folderOutput
						+ "modifier_dimension.csv"/**
				 * End field
				 * tFileInputDelimited_14:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_14 = null;

				try {

					String[] rowtFileInputDelimited_14 = null;
					int currentLinetFileInputDelimited_14 = 0;
					int outputLinetFileInputDelimited_14 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_14 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_14 = 0;
							if (footer_value_tFileInputDelimited_14 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_14 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_14,
									fieldSeparator_tFileInputDelimited_14[0],
									context.coding);
						} else {
							csvReadertFileInputDelimited_14 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_14)),
													context.coding)),
									fieldSeparator_tFileInputDelimited_14[0]);
						}

						csvReadertFileInputDelimited_14
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_14[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_14[0] != '\r'))
							csvReadertFileInputDelimited_14.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_14[0]);

						csvReadertFileInputDelimited_14.setQuoteChar('"');

						csvReadertFileInputDelimited_14
								.setEscapeChar(csvReadertFileInputDelimited_14
										.getQuoteChar());

						if (footer_tFileInputDelimited_14 > 0) {
							for (totalLinetFileInputDelimited_14 = 0; totalLinetFileInputDelimited_14 < 1; totalLinetFileInputDelimited_14++) {
								csvReadertFileInputDelimited_14.readNext();
							}
							csvReadertFileInputDelimited_14
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_14.readNext()) {

								rowtFileInputDelimited_14 = csvReadertFileInputDelimited_14
										.getValues();
								if (!(rowtFileInputDelimited_14.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_14[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_14++;

								}

							}
							int lastLineTemptFileInputDelimited_14 = totalLinetFileInputDelimited_14
									- footer_tFileInputDelimited_14 < 0 ? 0
									: totalLinetFileInputDelimited_14
											- footer_tFileInputDelimited_14;
							if (lastLinetFileInputDelimited_14 > 0) {
								lastLinetFileInputDelimited_14 = lastLinetFileInputDelimited_14 < lastLineTemptFileInputDelimited_14 ? lastLinetFileInputDelimited_14
										: lastLineTemptFileInputDelimited_14;
							} else {
								lastLinetFileInputDelimited_14 = lastLineTemptFileInputDelimited_14;
							}

							csvReadertFileInputDelimited_14.close();
							if (filename_tFileInputDelimited_14 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_14 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_14,
										fieldSeparator_tFileInputDelimited_14[0],
										context.coding);
							} else {
								csvReadertFileInputDelimited_14 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_14)),
														context.coding)),
										fieldSeparator_tFileInputDelimited_14[0]);
							}
							csvReadertFileInputDelimited_14
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_14[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_14[0] != '\r'))
								csvReadertFileInputDelimited_14
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_14[0]);

							csvReadertFileInputDelimited_14.setQuoteChar('"');

							csvReadertFileInputDelimited_14
									.setEscapeChar(csvReadertFileInputDelimited_14
											.getQuoteChar());

						}

						if (limittFileInputDelimited_14 != 0) {
							for (currentLinetFileInputDelimited_14 = 0; currentLinetFileInputDelimited_14 < 1; currentLinetFileInputDelimited_14++) {
								csvReadertFileInputDelimited_14.readNext();
							}
						}
						csvReadertFileInputDelimited_14
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_14 != 0
							&& csvReadertFileInputDelimited_14 != null
							&& csvReadertFileInputDelimited_14.readNext()) {

						rowtFileInputDelimited_14 = csvReadertFileInputDelimited_14
								.getValues();

						if (rowtFileInputDelimited_14.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_14[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_14++;

						if (lastLinetFileInputDelimited_14 > -1
								&& currentLinetFileInputDelimited_14 > lastLinetFileInputDelimited_14) {
							break;
						}
						outputLinetFileInputDelimited_14++;
						if (limittFileInputDelimited_14 > 0
								&& outputLinetFileInputDelimited_14 > limittFileInputDelimited_14) {
							break;
						}

						row17 = null;

						boolean whetherReject_tFileInputDelimited_14 = false;
						row17 = new row17Struct();
						try {

							if (rowtFileInputDelimited_14.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_14[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row17.MODIFIER_PATH = null;

								row17.MODIFIER_CD = null;

								row17.NAME_CHAR = null;

								row17.MODIFIER_BLOB = null;

								row17.UPDATE_DATE = null;

								row17.DOWNLOAD_DATE = null;

								row17.IMPORT_DATE = null;

								row17.SOURCESYSTEM_CD = null;

								row17.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_14 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_14 = 0;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									row17.MODIFIER_PATH = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									row17.MODIFIER_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 1;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									row17.MODIFIER_CD = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									row17.MODIFIER_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 2;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									row17.NAME_CHAR = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									row17.NAME_CHAR = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 3;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									row17.MODIFIER_BLOB = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									row17.MODIFIER_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 4;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									if (rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14]
											.length() > 0) {

										row17.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14],
														"yyyy-MM-dd");

									} else {
										row17.UPDATE_DATE = null;
									}

								} else {
									row17.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 5;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									if (rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14]
											.length() > 0) {

										row17.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14],
														"yyyy-MM-dd");

									} else {
										row17.DOWNLOAD_DATE = null;
									}

								} else {
									row17.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 6;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									if (rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14]
											.length() > 0) {

										row17.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14],
														"yyyy-MM-dd");

									} else {
										row17.IMPORT_DATE = null;
									}

								} else {
									row17.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 7;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									row17.SOURCESYSTEM_CD = rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14];

								} else {
									row17.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_14 = 8;

								if (columnIndexWithD_tFileInputDelimited_14 < rowtFileInputDelimited_14.length) {

									if (rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14]
											.length() > 0) {

										row17.UPLOAD_ID = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_14[columnIndexWithD_tFileInputDelimited_14]);

									} else {
										row17.UPLOAD_ID = null;
									}

								} else {
									row17.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_14 = true;

							System.err.println(e.getMessage());
							row17 = null;

						}

						/**
						 * [tFileInputDelimited_14 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_14 main ] start
						 */

						currentComponent = "tFileInputDelimited_14";

						tos_count_tFileInputDelimited_14++;

						/**
						 * [tFileInputDelimited_14 main ] stop
						 */
						// Start of branch "row17"
						if (row17 != null) {

							/**
							 * [tUniqRow_2 main ] start
							 */

							currentComponent = "tUniqRow_2";

							row20 = null;
							if (row17.MODIFIER_PATH == null) {
								finder_tUniqRow_2.MODIFIER_PATH = null;
							} else {
								finder_tUniqRow_2.MODIFIER_PATH = row17.MODIFIER_PATH
										.toLowerCase();
							}
							finder_tUniqRow_2.hashCodeDirty = true;
							if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
								KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

								if (row17.MODIFIER_PATH == null) {
									new_tUniqRow_2.MODIFIER_PATH = null;
								} else {
									new_tUniqRow_2.MODIFIER_PATH = row17.MODIFIER_PATH
											.toLowerCase();
								}

								keystUniqRow_2.add(new_tUniqRow_2);
								if (row20 == null) {
									row20 = new row20Struct();
								}
								row20.MODIFIER_PATH = row17.MODIFIER_PATH;
								row20.MODIFIER_CD = row17.MODIFIER_CD;
								row20.NAME_CHAR = row17.NAME_CHAR;
								row20.MODIFIER_BLOB = row17.MODIFIER_BLOB;
								row20.UPDATE_DATE = row17.UPDATE_DATE;
								row20.DOWNLOAD_DATE = row17.DOWNLOAD_DATE;
								row20.IMPORT_DATE = row17.IMPORT_DATE;
								row20.SOURCESYSTEM_CD = row17.SOURCESYSTEM_CD;
								row20.UPLOAD_ID = row17.UPLOAD_ID;
								nb_uniques_tUniqRow_2++;
							} else {
								nb_duplicates_tUniqRow_2++;
							}

							tos_count_tUniqRow_2++;

							/**
							 * [tUniqRow_2 main ] stop
							 */
							// Start of branch "row20"
							if (row20 != null) {

								/**
								 * [tJDBCOutput_7 main ] start
								 */

								currentComponent = "tJDBCOutput_7";

								whetherReject_tJDBCOutput_7 = false;
								if (row20.MODIFIER_PATH == null) {
									pstmt_tJDBCOutput_7.setNull(1,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_7.setString(1,
											row20.MODIFIER_PATH);
								}

								java.sql.ResultSet rs_tJDBCOutput_7 = pstmt_tJDBCOutput_7
										.executeQuery();
								int checkCount_tJDBCOutput_7 = -1;
								while (rs_tJDBCOutput_7.next()) {
									checkCount_tJDBCOutput_7 = rs_tJDBCOutput_7
											.getInt(1);
								}
								if (checkCount_tJDBCOutput_7 > 0) {
									if (row20.MODIFIER_CD == null) {
										pstmtUpdate_tJDBCOutput_7.setNull(1,
												java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tJDBCOutput_7.setString(1,
												row20.MODIFIER_CD);
									}

									if (row20.NAME_CHAR == null) {
										pstmtUpdate_tJDBCOutput_7.setNull(2,
												java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tJDBCOutput_7.setString(2,
												row20.NAME_CHAR);
									}

									if (row20.MODIFIER_BLOB == null) {
										pstmtUpdate_tJDBCOutput_7.setNull(3,
												java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tJDBCOutput_7.setString(3,
												row20.MODIFIER_BLOB);
									}

									if (row20.UPDATE_DATE != null) {
										pstmtUpdate_tJDBCOutput_7.setTimestamp(
												4,
												new java.sql.Timestamp(
														row20.UPDATE_DATE
																.getTime()));
									} else {
										pstmtUpdate_tJDBCOutput_7.setNull(4,
												java.sql.Types.DATE);
									}

									if (row20.DOWNLOAD_DATE != null) {
										pstmtUpdate_tJDBCOutput_7.setTimestamp(
												5,
												new java.sql.Timestamp(
														row20.DOWNLOAD_DATE
																.getTime()));
									} else {
										pstmtUpdate_tJDBCOutput_7.setNull(5,
												java.sql.Types.DATE);
									}

									if (row20.IMPORT_DATE != null) {
										pstmtUpdate_tJDBCOutput_7.setTimestamp(
												6,
												new java.sql.Timestamp(
														row20.IMPORT_DATE
																.getTime()));
									} else {
										pstmtUpdate_tJDBCOutput_7.setNull(6,
												java.sql.Types.DATE);
									}

									if (row20.SOURCESYSTEM_CD == null) {
										pstmtUpdate_tJDBCOutput_7.setNull(7,
												java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tJDBCOutput_7.setString(7,
												row20.SOURCESYSTEM_CD);
									}

									if (row20.UPLOAD_ID == null) {
										pstmtUpdate_tJDBCOutput_7.setNull(8,
												java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tJDBCOutput_7.setInt(8,
												row20.UPLOAD_ID);
									}

									if (row20.MODIFIER_PATH == null) {
										pstmtUpdate_tJDBCOutput_7.setNull(9,
												java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tJDBCOutput_7.setString(9,
												row20.MODIFIER_PATH);
									}

									try {
										updatedCount_tJDBCOutput_7 = updatedCount_tJDBCOutput_7
												+ pstmtUpdate_tJDBCOutput_7
														.executeUpdate();
									} catch (java.lang.Exception e) {
										whetherReject_tJDBCOutput_7 = true;
										throw (e);
									}
								} else {
									if (row20.MODIFIER_PATH == null) {
										pstmtInsert_tJDBCOutput_7.setNull(1,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tJDBCOutput_7.setString(1,
												row20.MODIFIER_PATH);
									}

									if (row20.MODIFIER_CD == null) {
										pstmtInsert_tJDBCOutput_7.setNull(2,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tJDBCOutput_7.setString(2,
												row20.MODIFIER_CD);
									}

									if (row20.NAME_CHAR == null) {
										pstmtInsert_tJDBCOutput_7.setNull(3,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tJDBCOutput_7.setString(3,
												row20.NAME_CHAR);
									}

									if (row20.MODIFIER_BLOB == null) {
										pstmtInsert_tJDBCOutput_7.setNull(4,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tJDBCOutput_7.setString(4,
												row20.MODIFIER_BLOB);
									}

									if (row20.UPDATE_DATE != null) {
										pstmtInsert_tJDBCOutput_7.setTimestamp(
												5,
												new java.sql.Timestamp(
														row20.UPDATE_DATE
																.getTime()));
									} else {
										pstmtInsert_tJDBCOutput_7.setNull(5,
												java.sql.Types.DATE);
									}

									if (row20.DOWNLOAD_DATE != null) {
										pstmtInsert_tJDBCOutput_7.setTimestamp(
												6,
												new java.sql.Timestamp(
														row20.DOWNLOAD_DATE
																.getTime()));
									} else {
										pstmtInsert_tJDBCOutput_7.setNull(6,
												java.sql.Types.DATE);
									}

									if (row20.IMPORT_DATE != null) {
										pstmtInsert_tJDBCOutput_7.setTimestamp(
												7,
												new java.sql.Timestamp(
														row20.IMPORT_DATE
																.getTime()));
									} else {
										pstmtInsert_tJDBCOutput_7.setNull(7,
												java.sql.Types.DATE);
									}

									if (row20.SOURCESYSTEM_CD == null) {
										pstmtInsert_tJDBCOutput_7.setNull(8,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tJDBCOutput_7.setString(8,
												row20.SOURCESYSTEM_CD);
									}

									if (row20.UPLOAD_ID == null) {
										pstmtInsert_tJDBCOutput_7.setNull(9,
												java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tJDBCOutput_7.setInt(9,
												row20.UPLOAD_ID);
									}

									try {
										insertedCount_tJDBCOutput_7 = insertedCount_tJDBCOutput_7
												+ pstmtInsert_tJDBCOutput_7
														.executeUpdate();
									} catch (java.lang.Exception e) {
										whetherReject_tJDBCOutput_7 = true;
										throw (e);
									}
								}
								nb_line_tJDBCOutput_7++;
								if (!whetherReject_tJDBCOutput_7) {
								}

								tos_count_tJDBCOutput_7++;

								/**
								 * [tJDBCOutput_7 main ] stop
								 */

							} // End of branch "row20"

						} // End of branch "row17"

						/**
						 * [tFileInputDelimited_14 end ] start
						 */

						currentComponent = "tFileInputDelimited_14";

						nb_line_tFileInputDelimited_14++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_14 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_14 != null) {
							csvReadertFileInputDelimited_14.close();
						}
					}
					if (csvReadertFileInputDelimited_14 != null) {
						globalMap.put("tFileInputDelimited_14_NB_LINE",
								nb_line_tFileInputDelimited_14);
					}
				}

				ok_Hash.put("tFileInputDelimited_14", true);
				end_Hash.put("tFileInputDelimited_14",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_14 end ] stop
				 */

				/**
				 * [tUniqRow_2 end ] start
				 */

				currentComponent = "tUniqRow_2";

				globalMap.put("tUniqRow_2_NB_UNIQUES", nb_uniques_tUniqRow_2);
				globalMap.put("tUniqRow_2_NB_DUPLICATES",
						nb_duplicates_tUniqRow_2);

				ok_Hash.put("tUniqRow_2", true);
				end_Hash.put("tUniqRow_2", System.currentTimeMillis());

				/**
				 * [tUniqRow_2 end ] stop
				 */

				/**
				 * [tJDBCOutput_7 end ] start
				 */

				currentComponent = "tJDBCOutput_7";

				if (pstmtUpdate_tJDBCOutput_7 != null) {

					pstmtUpdate_tJDBCOutput_7.close();

				}
				if (pstmtInsert_tJDBCOutput_7 != null) {

					pstmtInsert_tJDBCOutput_7.close();

				}
				if (pstmt_tJDBCOutput_7 != null) {

					pstmt_tJDBCOutput_7.close();

				}

				nb_line_deleted_tJDBCOutput_7 = nb_line_deleted_tJDBCOutput_7
						+ deletedCount_tJDBCOutput_7;
				nb_line_update_tJDBCOutput_7 = nb_line_update_tJDBCOutput_7
						+ updatedCount_tJDBCOutput_7;
				nb_line_inserted_tJDBCOutput_7 = nb_line_inserted_tJDBCOutput_7
						+ insertedCount_tJDBCOutput_7;
				nb_line_rejected_tJDBCOutput_7 = nb_line_rejected_tJDBCOutput_7
						+ rejectedCount_tJDBCOutput_7;

				globalMap.put("tJDBCOutput_7_NB_LINE", nb_line_tJDBCOutput_7);
				globalMap.put("tJDBCOutput_7_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_7);
				globalMap.put("tJDBCOutput_7_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_7);
				globalMap.put("tJDBCOutput_7_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_7);
				globalMap.put("tJDBCOutput_7_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_7);

				ok_Hash.put("tJDBCOutput_7", true);
				end_Hash.put("tJDBCOutput_7", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_7 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_14:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_14Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_14_SUBPROCESS_STATE", 1);
	}

	public void tJava_14Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_14 begin ] start
				 */

				ok_Hash.put("tJava_14", false);
				start_Hash.put("tJava_14", System.currentTimeMillis());
				currentComponent = "tJava_14";

				int tos_count_tJava_14 = 0;

				context.currentTable = context.DB_StagingI2B2_DatabaseType
						.equalsIgnoreCase("postgres") ? "i2b2demodata.visit_dimension"
						: (context.DB_StagingI2B2_Schema + ".visit_dimension");
				StatusListener.setSubStatus(90.0f, (int) (float) (90.0f) + "%");

				/**
				 * [tJava_14 begin ] stop
				 */
				/**
				 * [tJava_14 main ] start
				 */

				currentComponent = "tJava_14";

				tos_count_tJava_14++;

				/**
				 * [tJava_14 main ] stop
				 */
				/**
				 * [tJava_14 end ] start
				 */

				currentComponent = "tJava_14";

				ok_Hash.put("tJava_14", true);
				end_Hash.put("tJava_14", System.currentTimeMillis());

				/**
				 * [tJava_14 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_14:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_16Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_14_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String ACTIVE_STATUS_CD;

		public String getACTIVE_STATUS_CD() {
			return this.ACTIVE_STATUS_CD;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String INOUT_CD;

		public String getINOUT_CD() {
			return this.INOUT_CD;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String LOCATION_PATH;

		public String getLOCATION_PATH() {
			return this.LOCATION_PATH;
		}

		public Integer LENGTH_OF_STAY;

		public Integer getLENGTH_OF_STAY() {
			return this.LENGTH_OF_STAY;
		}

		public String VISIT_BLOB;

		public String getVISIT_BLOB() {
			return this.VISIT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length);
				strReturn = new String(
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.ACTIVE_STATUS_CD = readString(dis);

					this.START_DATE = readDate(dis);

					this.END_DATE = readDate(dis);

					this.INOUT_CD = readString(dis);

					this.LOCATION_CD = readString(dis);

					this.LOCATION_PATH = readString(dis);

					this.LENGTH_OF_STAY = readInteger(dis);

					this.VISIT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.ACTIVE_STATUS_CD, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.INOUT_CD, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.LOCATION_PATH, dos);

				// Integer

				writeInteger(this.LENGTH_OF_STAY, dos);

				// String

				writeString(this.VISIT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",ACTIVE_STATUS_CD=" + ACTIVE_STATUS_CD);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",INOUT_CD=" + INOUT_CD);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",LOCATION_PATH=" + LOCATION_PATH);
			sb.append(",LENGTH_OF_STAY=" + String.valueOf(LENGTH_OF_STAY));
			sb.append(",VISIT_BLOB=" + VISIT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row18Struct implements
			routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];

		public BigDecimal ENCOUNTER_NUM;

		public BigDecimal getENCOUNTER_NUM() {
			return this.ENCOUNTER_NUM;
		}

		public BigDecimal PATIENT_NUM;

		public BigDecimal getPATIENT_NUM() {
			return this.PATIENT_NUM;
		}

		public String ACTIVE_STATUS_CD;

		public String getACTIVE_STATUS_CD() {
			return this.ACTIVE_STATUS_CD;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String INOUT_CD;

		public String getINOUT_CD() {
			return this.INOUT_CD;
		}

		public String LOCATION_CD;

		public String getLOCATION_CD() {
			return this.LOCATION_CD;
		}

		public String LOCATION_PATH;

		public String getLOCATION_PATH() {
			return this.LOCATION_PATH;
		}

		public Integer LENGTH_OF_STAY;

		public Integer getLENGTH_OF_STAY() {
			return this.LENGTH_OF_STAY;
		}

		public String VISIT_BLOB;

		public String getVISIT_BLOB() {
			return this.VISIT_BLOB;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public Integer UPLOAD_ID;

		public Integer getUPLOAD_ID() {
			return this.UPLOAD_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length);
				strReturn = new String(
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.ENCOUNTER_NUM = (BigDecimal) dis.readObject();

					this.PATIENT_NUM = (BigDecimal) dis.readObject();

					this.ACTIVE_STATUS_CD = readString(dis);

					this.START_DATE = readDate(dis);

					this.END_DATE = readDate(dis);

					this.INOUT_CD = readString(dis);

					this.LOCATION_CD = readString(dis);

					this.LOCATION_PATH = readString(dis);

					this.LENGTH_OF_STAY = readInteger(dis);

					this.VISIT_BLOB = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.UPLOAD_ID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ENCOUNTER_NUM);

				// BigDecimal

				dos.writeObject(this.PATIENT_NUM);

				// String

				writeString(this.ACTIVE_STATUS_CD, dos);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.INOUT_CD, dos);

				// String

				writeString(this.LOCATION_CD, dos);

				// String

				writeString(this.LOCATION_PATH, dos);

				// Integer

				writeInteger(this.LENGTH_OF_STAY, dos);

				// String

				writeString(this.VISIT_BLOB, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// Integer

				writeInteger(this.UPLOAD_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENCOUNTER_NUM=" + String.valueOf(ENCOUNTER_NUM));
			sb.append(",PATIENT_NUM=" + String.valueOf(PATIENT_NUM));
			sb.append(",ACTIVE_STATUS_CD=" + ACTIVE_STATUS_CD);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",INOUT_CD=" + INOUT_CD);
			sb.append(",LOCATION_CD=" + LOCATION_CD);
			sb.append(",LOCATION_PATH=" + LOCATION_PATH);
			sb.append(",LENGTH_OF_STAY=" + String.valueOf(LENGTH_OF_STAY));
			sb.append(",VISIT_BLOB=" + VISIT_BLOB);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",UPLOAD_ID=" + String.valueOf(UPLOAD_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_16Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row18Struct row18 = new row18Struct();
				row2Struct row2 = new row2Struct();

				/**
				 * [tJDBCOutput_8 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_8", false);
				start_Hash.put("tJDBCOutput_8", System.currentTimeMillis());
				currentComponent = "tJDBCOutput_8";

				int tos_count_tJDBCOutput_8 = 0;

				int updateKeyCount_tJDBCOutput_8 = 2;
				if (updateKeyCount_tJDBCOutput_8 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tJDBCOutput_8 = 0;
				int nb_line_update_tJDBCOutput_8 = 0;
				int nb_line_inserted_tJDBCOutput_8 = 0;
				int nb_line_deleted_tJDBCOutput_8 = 0;
				int nb_line_rejected_tJDBCOutput_8 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_8 = 0;

				int deletedCount_tJDBCOutput_8 = 0;
				int updatedCount_tJDBCOutput_8 = 0;
				int insertedCount_tJDBCOutput_8 = 0;
				int rejectedCount_tJDBCOutput_8 = 0;

				boolean whetherReject_tJDBCOutput_8 = false;

				java.sql.Connection connection_tJDBCOutput_8 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");
				if (null == connection_tJDBCOutput_8) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCOutput_8 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					connection_tJDBCOutput_8 = dataSources_tJDBCOutput_8
							.get("").getConnection();
				}

				int batchSize_tJDBCOutput_8 = 10000;
				int batchSizeCounter_tJDBCOutput_8 = 0;

				java.sql.PreparedStatement pstmt_tJDBCOutput_8 = connection_tJDBCOutput_8
						.prepareStatement("SELECT COUNT(1) FROM "
								+ context.currentTable
								+ " WHERE ENCOUNTER_NUM = ? AND PATIENT_NUM = ?");
				String insert_tJDBCOutput_8 = "INSERT INTO "
						+ context.currentTable
						+ " (ENCOUNTER_NUM,PATIENT_NUM,ACTIVE_STATUS_CD,START_DATE,END_DATE,INOUT_CD,LOCATION_CD,LOCATION_PATH,LENGTH_OF_STAY,VISIT_BLOB,UPDATE_DATE,DOWNLOAD_DATE,IMPORT_DATE,SOURCESYSTEM_CD,UPLOAD_ID) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tJDBCOutput_8 = connection_tJDBCOutput_8
						.prepareStatement(insert_tJDBCOutput_8);
				String update_tJDBCOutput_8 = "UPDATE "
						+ context.currentTable
						+ " SET ACTIVE_STATUS_CD = ?,START_DATE = ?,END_DATE = ?,INOUT_CD = ?,LOCATION_CD = ?,LOCATION_PATH = ?,LENGTH_OF_STAY = ?,VISIT_BLOB = ?,UPDATE_DATE = ?,DOWNLOAD_DATE = ?,IMPORT_DATE = ?,SOURCESYSTEM_CD = ?,UPLOAD_ID = ? WHERE ENCOUNTER_NUM = ? AND PATIENT_NUM = ?";
				java.sql.PreparedStatement pstmtUpdate_tJDBCOutput_8 = connection_tJDBCOutput_8
						.prepareStatement(update_tJDBCOutput_8);

				/**
				 * [tJDBCOutput_8 begin ] stop
				 */

				/**
				 * [tJavaRow_4 begin ] start
				 */

				ok_Hash.put("tJavaRow_4", false);
				start_Hash.put("tJavaRow_4", System.currentTimeMillis());
				currentComponent = "tJavaRow_4";

				int tos_count_tJavaRow_4 = 0;

				int nb_line_tJavaRow_4 = 0;

				/**
				 * [tJavaRow_4 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_16 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_16", false);
				start_Hash.put("tFileInputDelimited_16",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_16";

				int tos_count_tFileInputDelimited_16 = 0;

				int nb_line_tFileInputDelimited_16 = 0;
				int footer_tFileInputDelimited_16 = 0;
				int totalLinetFileInputDelimited_16 = 0;
				int limittFileInputDelimited_16 = -1;
				int lastLinetFileInputDelimited_16 = -1;

				char fieldSeparator_tFileInputDelimited_16[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_16 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_16[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_16 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_16 = /**
				 * Start field
				 * tFileInputDelimited_16:FILENAME
				 */
				context.folderMain + context.folderOutput
						+ "visit_dimension.csv"/**
				 * End field
				 * tFileInputDelimited_16:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_16 = null;

				try {

					String[] rowtFileInputDelimited_16 = null;
					int currentLinetFileInputDelimited_16 = 0;
					int outputLinetFileInputDelimited_16 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_16 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_16 = 0;
							if (footer_value_tFileInputDelimited_16 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_16 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_16,
									fieldSeparator_tFileInputDelimited_16[0],
									context.coding);
						} else {
							csvReadertFileInputDelimited_16 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_16)),
													context.coding)),
									fieldSeparator_tFileInputDelimited_16[0]);
						}

						csvReadertFileInputDelimited_16
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_16[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_16[0] != '\r'))
							csvReadertFileInputDelimited_16.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_16[0]);

						csvReadertFileInputDelimited_16.setQuoteChar('"');

						csvReadertFileInputDelimited_16
								.setEscapeChar(csvReadertFileInputDelimited_16
										.getQuoteChar());

						if (footer_tFileInputDelimited_16 > 0) {
							for (totalLinetFileInputDelimited_16 = 0; totalLinetFileInputDelimited_16 < 1; totalLinetFileInputDelimited_16++) {
								csvReadertFileInputDelimited_16.readNext();
							}
							csvReadertFileInputDelimited_16
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_16.readNext()) {

								rowtFileInputDelimited_16 = csvReadertFileInputDelimited_16
										.getValues();
								if (!(rowtFileInputDelimited_16.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_16[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_16++;

								}

							}
							int lastLineTemptFileInputDelimited_16 = totalLinetFileInputDelimited_16
									- footer_tFileInputDelimited_16 < 0 ? 0
									: totalLinetFileInputDelimited_16
											- footer_tFileInputDelimited_16;
							if (lastLinetFileInputDelimited_16 > 0) {
								lastLinetFileInputDelimited_16 = lastLinetFileInputDelimited_16 < lastLineTemptFileInputDelimited_16 ? lastLinetFileInputDelimited_16
										: lastLineTemptFileInputDelimited_16;
							} else {
								lastLinetFileInputDelimited_16 = lastLineTemptFileInputDelimited_16;
							}

							csvReadertFileInputDelimited_16.close();
							if (filename_tFileInputDelimited_16 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_16 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_16,
										fieldSeparator_tFileInputDelimited_16[0],
										context.coding);
							} else {
								csvReadertFileInputDelimited_16 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_16)),
														context.coding)),
										fieldSeparator_tFileInputDelimited_16[0]);
							}
							csvReadertFileInputDelimited_16
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_16[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_16[0] != '\r'))
								csvReadertFileInputDelimited_16
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_16[0]);

							csvReadertFileInputDelimited_16.setQuoteChar('"');

							csvReadertFileInputDelimited_16
									.setEscapeChar(csvReadertFileInputDelimited_16
											.getQuoteChar());

						}

						if (limittFileInputDelimited_16 != 0) {
							for (currentLinetFileInputDelimited_16 = 0; currentLinetFileInputDelimited_16 < 1; currentLinetFileInputDelimited_16++) {
								csvReadertFileInputDelimited_16.readNext();
							}
						}
						csvReadertFileInputDelimited_16
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_16 != 0
							&& csvReadertFileInputDelimited_16 != null
							&& csvReadertFileInputDelimited_16.readNext()) {

						rowtFileInputDelimited_16 = csvReadertFileInputDelimited_16
								.getValues();

						if (rowtFileInputDelimited_16.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_16[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_16++;

						if (lastLinetFileInputDelimited_16 > -1
								&& currentLinetFileInputDelimited_16 > lastLinetFileInputDelimited_16) {
							break;
						}
						outputLinetFileInputDelimited_16++;
						if (limittFileInputDelimited_16 > 0
								&& outputLinetFileInputDelimited_16 > limittFileInputDelimited_16) {
							break;
						}

						row18 = null;

						boolean whetherReject_tFileInputDelimited_16 = false;
						row18 = new row18Struct();
						try {

							if (rowtFileInputDelimited_16.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_16[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row18.ENCOUNTER_NUM = null;

								row18.PATIENT_NUM = null;

								row18.ACTIVE_STATUS_CD = null;

								row18.START_DATE = null;

								row18.END_DATE = null;

								row18.INOUT_CD = null;

								row18.LOCATION_CD = null;

								row18.LOCATION_PATH = null;

								row18.LENGTH_OF_STAY = null;

								row18.VISIT_BLOB = null;

								row18.UPDATE_DATE = null;

								row18.DOWNLOAD_DATE = null;

								row18.IMPORT_DATE = null;

								row18.SOURCESYSTEM_CD = null;

								row18.UPLOAD_ID = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_16 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_16 = 0;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row18.ENCOUNTER_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]);

									} else {
										row18.ENCOUNTER_NUM = null;
									}

								} else {
									row18.ENCOUNTER_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 1;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row18.PATIENT_NUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]);

									} else {
										row18.PATIENT_NUM = null;
									}

								} else {
									row18.PATIENT_NUM = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 2;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row18.ACTIVE_STATUS_CD = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row18.ACTIVE_STATUS_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 3;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row18.START_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16],
														"dd-MM-yyyy");

									} else {
										row18.START_DATE = null;
									}

								} else {
									row18.START_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 4;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row18.END_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16],
														"dd-MM-yyyy");

									} else {
										row18.END_DATE = null;
									}

								} else {
									row18.END_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 5;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row18.INOUT_CD = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row18.INOUT_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 6;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row18.LOCATION_CD = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row18.LOCATION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 7;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row18.LOCATION_PATH = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row18.LOCATION_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 8;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row18.LENGTH_OF_STAY = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]);

									} else {
										row18.LENGTH_OF_STAY = null;
									}

								} else {
									row18.LENGTH_OF_STAY = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 9;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row18.VISIT_BLOB = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row18.VISIT_BLOB = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 10;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row18.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16],
														"dd-MM-yyyy");

									} else {
										row18.UPDATE_DATE = null;
									}

								} else {
									row18.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 11;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row18.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16],
														"dd-MM-yyyy");

									} else {
										row18.DOWNLOAD_DATE = null;
									}

								} else {
									row18.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 12;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row18.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16],
														"dd-MM-yyyy");

									} else {
										row18.IMPORT_DATE = null;
									}

								} else {
									row18.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 13;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row18.SOURCESYSTEM_CD = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {
									row18.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_16 = 14;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {

										row18.UPLOAD_ID = ParserUtils
												.parseTo_Integer(rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]);

									} else {
										row18.UPLOAD_ID = null;
									}

								} else {
									row18.UPLOAD_ID = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_16 = true;

							System.err.println(e.getMessage());
							row18 = null;

						}

						/**
						 * [tFileInputDelimited_16 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_16 main ] start
						 */

						currentComponent = "tFileInputDelimited_16";

						tos_count_tFileInputDelimited_16++;

						/**
						 * [tFileInputDelimited_16 main ] stop
						 */
						// Start of branch "row18"
						if (row18 != null) {

							/**
							 * [tJavaRow_4 main ] start
							 */

							currentComponent = "tJavaRow_4";

							// Code generated according to input schema and
							// output schema
							row2.ENCOUNTER_NUM = row18.ENCOUNTER_NUM;
							row2.PATIENT_NUM = row18.PATIENT_NUM
									.add(new BigDecimal(10000));
							row2.ACTIVE_STATUS_CD = row18.ACTIVE_STATUS_CD;
							row2.START_DATE = row18.START_DATE;
							row2.END_DATE = row18.END_DATE;
							row2.INOUT_CD = row18.INOUT_CD;
							row2.LOCATION_CD = row18.LOCATION_CD;
							row2.LOCATION_PATH = row18.LOCATION_PATH;
							row2.LENGTH_OF_STAY = row18.LENGTH_OF_STAY;
							row2.VISIT_BLOB = row18.VISIT_BLOB;
							row2.UPDATE_DATE = row18.UPDATE_DATE;
							row2.DOWNLOAD_DATE = row18.DOWNLOAD_DATE;
							row2.IMPORT_DATE = row18.IMPORT_DATE;
							row2.SOURCESYSTEM_CD = row18.SOURCESYSTEM_CD;
							row2.UPLOAD_ID = row18.UPLOAD_ID;

							nb_line_tJavaRow_4++;

							tos_count_tJavaRow_4++;

							/**
							 * [tJavaRow_4 main ] stop
							 */

							/**
							 * [tJDBCOutput_8 main ] start
							 */

							currentComponent = "tJDBCOutput_8";

							whetherReject_tJDBCOutput_8 = false;
							pstmt_tJDBCOutput_8.setBigDecimal(1,
									row2.ENCOUNTER_NUM);

							pstmt_tJDBCOutput_8.setBigDecimal(2,
									row2.PATIENT_NUM);

							java.sql.ResultSet rs_tJDBCOutput_8 = pstmt_tJDBCOutput_8
									.executeQuery();
							int checkCount_tJDBCOutput_8 = -1;
							while (rs_tJDBCOutput_8.next()) {
								checkCount_tJDBCOutput_8 = rs_tJDBCOutput_8
										.getInt(1);
							}
							if (checkCount_tJDBCOutput_8 > 0) {
								if (row2.ACTIVE_STATUS_CD == null) {
									pstmtUpdate_tJDBCOutput_8.setNull(1,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tJDBCOutput_8.setString(1,
											row2.ACTIVE_STATUS_CD);
								}

								if (row2.START_DATE != null) {
									pstmtUpdate_tJDBCOutput_8.setTimestamp(2,
											new java.sql.Timestamp(
													row2.START_DATE.getTime()));
								} else {
									pstmtUpdate_tJDBCOutput_8.setNull(2,
											java.sql.Types.DATE);
								}

								if (row2.END_DATE != null) {
									pstmtUpdate_tJDBCOutput_8.setTimestamp(3,
											new java.sql.Timestamp(
													row2.END_DATE.getTime()));
								} else {
									pstmtUpdate_tJDBCOutput_8.setNull(3,
											java.sql.Types.DATE);
								}

								if (row2.INOUT_CD == null) {
									pstmtUpdate_tJDBCOutput_8.setNull(4,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tJDBCOutput_8.setString(4,
											row2.INOUT_CD);
								}

								if (row2.LOCATION_CD == null) {
									pstmtUpdate_tJDBCOutput_8.setNull(5,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tJDBCOutput_8.setString(5,
											row2.LOCATION_CD);
								}

								if (row2.LOCATION_PATH == null) {
									pstmtUpdate_tJDBCOutput_8.setNull(6,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tJDBCOutput_8.setString(6,
											row2.LOCATION_PATH);
								}

								if (row2.LENGTH_OF_STAY == null) {
									pstmtUpdate_tJDBCOutput_8.setNull(7,
											java.sql.Types.INTEGER);
								} else {
									pstmtUpdate_tJDBCOutput_8.setInt(7,
											row2.LENGTH_OF_STAY);
								}

								if (row2.VISIT_BLOB == null) {
									pstmtUpdate_tJDBCOutput_8.setNull(8,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tJDBCOutput_8.setString(8,
											row2.VISIT_BLOB);
								}

								if (row2.UPDATE_DATE != null) {
									pstmtUpdate_tJDBCOutput_8
											.setTimestamp(
													9,
													new java.sql.Timestamp(
															row2.UPDATE_DATE
																	.getTime()));
								} else {
									pstmtUpdate_tJDBCOutput_8.setNull(9,
											java.sql.Types.DATE);
								}

								if (row2.DOWNLOAD_DATE != null) {
									pstmtUpdate_tJDBCOutput_8.setTimestamp(
											10,
											new java.sql.Timestamp(
													row2.DOWNLOAD_DATE
															.getTime()));
								} else {
									pstmtUpdate_tJDBCOutput_8.setNull(10,
											java.sql.Types.DATE);
								}

								if (row2.IMPORT_DATE != null) {
									pstmtUpdate_tJDBCOutput_8
											.setTimestamp(
													11,
													new java.sql.Timestamp(
															row2.IMPORT_DATE
																	.getTime()));
								} else {
									pstmtUpdate_tJDBCOutput_8.setNull(11,
											java.sql.Types.DATE);
								}

								if (row2.SOURCESYSTEM_CD == null) {
									pstmtUpdate_tJDBCOutput_8.setNull(12,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tJDBCOutput_8.setString(12,
											row2.SOURCESYSTEM_CD);
								}

								if (row2.UPLOAD_ID == null) {
									pstmtUpdate_tJDBCOutput_8.setNull(13,
											java.sql.Types.INTEGER);
								} else {
									pstmtUpdate_tJDBCOutput_8.setInt(13,
											row2.UPLOAD_ID);
								}

								pstmtUpdate_tJDBCOutput_8.setBigDecimal(14,
										row2.ENCOUNTER_NUM);

								pstmtUpdate_tJDBCOutput_8.setBigDecimal(15,
										row2.PATIENT_NUM);

								try {
									updatedCount_tJDBCOutput_8 = updatedCount_tJDBCOutput_8
											+ pstmtUpdate_tJDBCOutput_8
													.executeUpdate();
								} catch (java.lang.Exception e) {
									whetherReject_tJDBCOutput_8 = true;
									throw (e);
								}
							} else {
								pstmtInsert_tJDBCOutput_8.setBigDecimal(1,
										row2.ENCOUNTER_NUM);

								pstmtInsert_tJDBCOutput_8.setBigDecimal(2,
										row2.PATIENT_NUM);

								if (row2.ACTIVE_STATUS_CD == null) {
									pstmtInsert_tJDBCOutput_8.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tJDBCOutput_8.setString(3,
											row2.ACTIVE_STATUS_CD);
								}

								if (row2.START_DATE != null) {
									pstmtInsert_tJDBCOutput_8.setTimestamp(4,
											new java.sql.Timestamp(
													row2.START_DATE.getTime()));
								} else {
									pstmtInsert_tJDBCOutput_8.setNull(4,
											java.sql.Types.DATE);
								}

								if (row2.END_DATE != null) {
									pstmtInsert_tJDBCOutput_8.setTimestamp(5,
											new java.sql.Timestamp(
													row2.END_DATE.getTime()));
								} else {
									pstmtInsert_tJDBCOutput_8.setNull(5,
											java.sql.Types.DATE);
								}

								if (row2.INOUT_CD == null) {
									pstmtInsert_tJDBCOutput_8.setNull(6,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tJDBCOutput_8.setString(6,
											row2.INOUT_CD);
								}

								if (row2.LOCATION_CD == null) {
									pstmtInsert_tJDBCOutput_8.setNull(7,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tJDBCOutput_8.setString(7,
											row2.LOCATION_CD);
								}

								if (row2.LOCATION_PATH == null) {
									pstmtInsert_tJDBCOutput_8.setNull(8,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tJDBCOutput_8.setString(8,
											row2.LOCATION_PATH);
								}

								if (row2.LENGTH_OF_STAY == null) {
									pstmtInsert_tJDBCOutput_8.setNull(9,
											java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tJDBCOutput_8.setInt(9,
											row2.LENGTH_OF_STAY);
								}

								if (row2.VISIT_BLOB == null) {
									pstmtInsert_tJDBCOutput_8.setNull(10,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tJDBCOutput_8.setString(10,
											row2.VISIT_BLOB);
								}

								if (row2.UPDATE_DATE != null) {
									pstmtInsert_tJDBCOutput_8
											.setTimestamp(
													11,
													new java.sql.Timestamp(
															row2.UPDATE_DATE
																	.getTime()));
								} else {
									pstmtInsert_tJDBCOutput_8.setNull(11,
											java.sql.Types.DATE);
								}

								if (row2.DOWNLOAD_DATE != null) {
									pstmtInsert_tJDBCOutput_8.setTimestamp(
											12,
											new java.sql.Timestamp(
													row2.DOWNLOAD_DATE
															.getTime()));
								} else {
									pstmtInsert_tJDBCOutput_8.setNull(12,
											java.sql.Types.DATE);
								}

								if (row2.IMPORT_DATE != null) {
									pstmtInsert_tJDBCOutput_8
											.setTimestamp(
													13,
													new java.sql.Timestamp(
															row2.IMPORT_DATE
																	.getTime()));
								} else {
									pstmtInsert_tJDBCOutput_8.setNull(13,
											java.sql.Types.DATE);
								}

								if (row2.SOURCESYSTEM_CD == null) {
									pstmtInsert_tJDBCOutput_8.setNull(14,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tJDBCOutput_8.setString(14,
											row2.SOURCESYSTEM_CD);
								}

								if (row2.UPLOAD_ID == null) {
									pstmtInsert_tJDBCOutput_8.setNull(15,
											java.sql.Types.INTEGER);
								} else {
									pstmtInsert_tJDBCOutput_8.setInt(15,
											row2.UPLOAD_ID);
								}

								try {
									insertedCount_tJDBCOutput_8 = insertedCount_tJDBCOutput_8
											+ pstmtInsert_tJDBCOutput_8
													.executeUpdate();
								} catch (java.lang.Exception e) {
									whetherReject_tJDBCOutput_8 = true;
									throw (e);
								}
							}
							nb_line_tJDBCOutput_8++;
							if (!whetherReject_tJDBCOutput_8) {
							}

							tos_count_tJDBCOutput_8++;

							/**
							 * [tJDBCOutput_8 main ] stop
							 */

						} // End of branch "row18"

						/**
						 * [tFileInputDelimited_16 end ] start
						 */

						currentComponent = "tFileInputDelimited_16";

						nb_line_tFileInputDelimited_16++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_16 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_16 != null) {
							csvReadertFileInputDelimited_16.close();
						}
					}
					if (csvReadertFileInputDelimited_16 != null) {
						globalMap.put("tFileInputDelimited_16_NB_LINE",
								nb_line_tFileInputDelimited_16);
					}
				}

				ok_Hash.put("tFileInputDelimited_16", true);
				end_Hash.put("tFileInputDelimited_16",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_16 end ] stop
				 */

				/**
				 * [tJavaRow_4 end ] start
				 */

				currentComponent = "tJavaRow_4";

				globalMap.put("tJavaRow_4_NB_LINE", nb_line_tJavaRow_4);

				ok_Hash.put("tJavaRow_4", true);
				end_Hash.put("tJavaRow_4", System.currentTimeMillis());

				/**
				 * [tJavaRow_4 end ] stop
				 */

				/**
				 * [tJDBCOutput_8 end ] start
				 */

				currentComponent = "tJDBCOutput_8";

				if (pstmtUpdate_tJDBCOutput_8 != null) {

					pstmtUpdate_tJDBCOutput_8.close();

				}
				if (pstmtInsert_tJDBCOutput_8 != null) {

					pstmtInsert_tJDBCOutput_8.close();

				}
				if (pstmt_tJDBCOutput_8 != null) {

					pstmt_tJDBCOutput_8.close();

				}

				nb_line_deleted_tJDBCOutput_8 = nb_line_deleted_tJDBCOutput_8
						+ deletedCount_tJDBCOutput_8;
				nb_line_update_tJDBCOutput_8 = nb_line_update_tJDBCOutput_8
						+ updatedCount_tJDBCOutput_8;
				nb_line_inserted_tJDBCOutput_8 = nb_line_inserted_tJDBCOutput_8
						+ insertedCount_tJDBCOutput_8;
				nb_line_rejected_tJDBCOutput_8 = nb_line_rejected_tJDBCOutput_8
						+ rejectedCount_tJDBCOutput_8;

				globalMap.put("tJDBCOutput_8_NB_LINE", nb_line_tJDBCOutput_8);
				globalMap.put("tJDBCOutput_8_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_8);
				globalMap.put("tJDBCOutput_8_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_8);
				globalMap.put("tJDBCOutput_8_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_8);
				globalMap.put("tJDBCOutput_8_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_8);

				ok_Hash.put("tJDBCOutput_8", true);
				end_Hash.put("tJDBCOutput_8", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_16_SUBPROCESS_STATE", 1);
	}

	public void tForeach_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tForeach_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tForeach_1 begin ] start
				 */

				int NB_ITERATE_tJava_2 = 0; // for statistics

				ok_Hash.put("tForeach_1", false);
				start_Hash.put("tForeach_1", System.currentTimeMillis());
				currentComponent = "tForeach_1";

				int tos_count_tForeach_1 = 0;

				Object[] values_tForeach_1 = new Object[] {
						"ALTER TABLE i2b2metadata.I2B2 ALTER  C_FULLNAME TYPE character varying(2000)",
						"ALTER TABLE i2b2metadata.I2B2 ALTER  C_BASECODE TYPE character varying(2000)",
						"ALTER TABLE "
								+ " i2b2metadata"
								+ ".I2B2_secure ALTER  C_DIMCODE TYPE character varying(2000)",
						"ALTER TABLE "
								+ " i2b2metadata"
								+ ".I2B2_secure ALTER  C_FULLNAME TYPE character varying(2000)",
						"ALTER TABLE "
								+ " i2b2metadata"
								+ ".I2B2_secure ALTER  C_BASECODE TYPE character varying(2000)",
						"ALTER TABLE "
								+ " i2b2metadata"
								+ ".I2B2_secure ALTER  C_DIMCODE TYPE character varying(2000)",
						"ALTER TABLE "
								+ " i2b2metadata"
								+ ".I2B2 ALTER  C_DIMCODE TYPE character varying(2000)",
						"ALTER TABLE "
								+ " i2b2metadata"
								+ ".I2B2 ALTER  C_FULLNAME TYPE character varying(2000)",
						"ALTER TABLE "
								+ " i2b2metadata"
								+ ".I2B2 ALTER  C_BASECODE TYPE character varying(2000)",
						"ALTER TABLE "
								+ " i2b2metadata"
								+ ".I2B2 ALTER  C_DIMCODE TYPE character varying(2000)",
						"ALTER TABLE "
								+ " i2b2demodata"
								+ ".CONCEPT_DIMENSION ALTER  CONCEPT_PATH TYPE character varying(2000)",
						"ALTER TABLE "
								+ " i2b2demodata"
								+ ".CONCEPT_DIMENSION ALTER  CONCEPT_CD  TYPE character varying(2000)",
						"ALTER TABLE "
								+ " i2b2demodata"
								+ ".MODIFIER_DIMENSION ALTER  MODIFIER_PATH TYPE character varying(2000)",
						"ALTER TABLE "
								+ " i2b2demodata"
								+ ".MODIFIER_DIMENSION ALTER  MODIFIER_CD TYPE character varying(2000)",
						"ALTER TABLE "
								+ " i2b2demodata"
								+ ".OBSERVATION_FACT ALTER  MODIFIER_CD TYPE character varying(2000)",
						"ALTER TABLE "
								+ " i2b2demodata"
								+ ".OBSERVATION_FACT ALTER  CONCEPT_CD TYPE character varying(2000)",
						"ALTER TABLE "
								+ " i2b2demodata"
								+ ".patient_mapping ALTER PATIENT_NUM TYPE numeric(38,0)",
						"ALTER TABLE "
								+ " i2b2demodata"
								+ ".patient_dimension ALTER PATIENT_NUM TYPE numeric(38,0)",
						"ALTER TABLE "
								+ " i2b2demodata"
								+ ".observation_fact ALTER  PATIENT_NUM  TYPE numeric(38,0)",
						"ALTER TABLE "
								+ " i2b2demodata"
								+ ".qt_patient_enc_collection ALTER  PATIENT_NUM TYPE numeric(38,0)",
						"ALTER TABLE "
								+ " i2b2demodata"
								+ ".qt_patient_set_collection ALTER PATIENT_NUM TYPE numeric(38,0)",
						"ALTER TABLE "
								+ " i2b2demodata"
								+ ".qt_patient_set_collection ALTER  PATIENT_NUM TYPE numeric(38,0)", };

				for (Object tmp_tForeach_1 : values_tForeach_1) {
					globalMap.put("tForeach_1_CURRENT_VALUE", tmp_tForeach_1);

					/**
					 * [tForeach_1 begin ] stop
					 */
					/**
					 * [tForeach_1 main ] start
					 */

					currentComponent = "tForeach_1";

					tos_count_tForeach_1++;

					/**
					 * [tForeach_1 main ] stop
					 */
					NB_ITERATE_tJava_2++;
					iterateLoop++;

					/**
					 * [tJava_2 begin ] start
					 */

					ok_Hash.put("tJava_2", false);
					start_Hash.put("tJava_2", System.currentTimeMillis());
					currentComponent = "tJava_2";

					int tos_count_tJava_2 = 0;

					System.out.println(((String) globalMap
							.get("tForeach_1_CURRENT_VALUE")));

					/**
					 * [tJava_2 begin ] stop
					 */
					/**
					 * [tJava_2 main ] start
					 */

					currentComponent = "tJava_2";

					tos_count_tJava_2++;

					/**
					 * [tJava_2 main ] stop
					 */
					/**
					 * [tJava_2 end ] start
					 */

					currentComponent = "tJava_2";

					ok_Hash.put("tJava_2", true);
					end_Hash.put("tJava_2", System.currentTimeMillis());

					tJDBCRow_1Process(globalMap);

					/**
					 * [tJava_2 end ] stop
					 */

					/**
					 * [tForeach_1 end ] start
					 */

					currentComponent = "tForeach_1";

				}

				ok_Hash.put("tForeach_1", true);
				end_Hash.put("tForeach_1", System.currentTimeMillis());

				/**
				 * [tForeach_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tForeach_1:OnSubjobOk1",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCRow_3Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tForeach_1:OnSubjobOk2",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_17Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tForeach_1_SUBPROCESS_STATE", 1);
	}

	public void tJDBCRow_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCRow_1 begin ] start
				 */

				ok_Hash.put("tJDBCRow_1", false);
				start_Hash.put("tJDBCRow_1", System.currentTimeMillis());
				currentComponent = "tJDBCRow_1";

				int tos_count_tJDBCRow_1 = 0;

				java.sql.Connection connection_tJDBCRow_1 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");
				if (null == connection_tJDBCRow_1) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCRow_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					connection_tJDBCRow_1 = dataSources_tJDBCRow_1.get("")
							.getConnection();
				}

				java.sql.Statement stmt_tJDBCRow_1 = connection_tJDBCRow_1
						.createStatement();
				String query_tJDBCRow_1 = "";
				boolean whetherReject_tJDBCRow_1 = false;

				/**
				 * [tJDBCRow_1 begin ] stop
				 */
				/**
				 * [tJDBCRow_1 main ] start
				 */

				currentComponent = "tJDBCRow_1";

				query_tJDBCRow_1 = ((String) globalMap
						.get("tForeach_1_CURRENT_VALUE"));
				whetherReject_tJDBCRow_1 = false;
				globalMap.put("tJDBCRow_1_QUERY", query_tJDBCRow_1);
				try {
					stmt_tJDBCRow_1.execute(query_tJDBCRow_1);

				} catch (java.lang.Exception e) {
					whetherReject_tJDBCRow_1 = true;
					System.err.print(e.getMessage());
				}

				tos_count_tJDBCRow_1++;

				/**
				 * [tJDBCRow_1 main ] stop
				 */
				/**
				 * [tJDBCRow_1 end ] start
				 */

				currentComponent = "tJDBCRow_1";

				stmt_tJDBCRow_1.close();

				ok_Hash.put("tJDBCRow_1", true);
				end_Hash.put("tJDBCRow_1", System.currentTimeMillis());

				/**
				 * [tJDBCRow_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCRow_1_SUBPROCESS_STATE", 1);
	}

	public void tJDBCRow_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCRow_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCRow_3 begin ] start
				 */

				ok_Hash.put("tJDBCRow_3", false);
				start_Hash.put("tJDBCRow_3", System.currentTimeMillis());
				currentComponent = "tJDBCRow_3";

				int tos_count_tJDBCRow_3 = 0;

				java.sql.Connection connection_tJDBCRow_3 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");
				if (null == connection_tJDBCRow_3) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCRow_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					connection_tJDBCRow_3 = dataSources_tJDBCRow_3.get("")
							.getConnection();
				}

				java.sql.Statement stmt_tJDBCRow_3 = connection_tJDBCRow_3
						.createStatement();
				String query_tJDBCRow_3 = "";
				boolean whetherReject_tJDBCRow_3 = false;

				/**
				 * [tJDBCRow_3 begin ] stop
				 */
				/**
				 * [tJDBCRow_3 main ] start
				 */

				currentComponent = "tJDBCRow_3";

				query_tJDBCRow_3 = "insert into i2b2metadata.table_access values ('Private Studies','i2b2_secure','N',-1,'\\i2b2\\','Private Studies','N','CA ',0,'','','concept-cd','concept_dimension','concept_path','T','LIKE','\\i2b2\\','','\\Private Studies\\')";
				whetherReject_tJDBCRow_3 = false;
				globalMap.put("tJDBCRow_3_QUERY", query_tJDBCRow_3);
				try {
					stmt_tJDBCRow_3.execute(query_tJDBCRow_3);

				} catch (java.lang.Exception e) {
					whetherReject_tJDBCRow_3 = true;
					System.err.print(e.getMessage());
				}

				tos_count_tJDBCRow_3++;

				/**
				 * [tJDBCRow_3 main ] stop
				 */
				/**
				 * [tJDBCRow_3 end ] start
				 */

				currentComponent = "tJDBCRow_3";

				stmt_tJDBCRow_3.close();

				ok_Hash.put("tJDBCRow_3", true);
				end_Hash.put("tJDBCRow_3", System.currentTimeMillis());

				/**
				 * [tJDBCRow_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCRow_3_SUBPROCESS_STATE", 1);
	}

	public void tJava_17Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_17_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_17 begin ] start
				 */

				ok_Hash.put("tJava_17", false);
				start_Hash.put("tJava_17", System.currentTimeMillis());
				currentComponent = "tJava_17";

				int tos_count_tJava_17 = 0;

				context.currentTable = "i2b2metadata.i2b2_secure";
				StatusListener.setSubStatus(90.0f, (int) (float) (90.0f) + "%");

				/**
				 * [tJava_17 begin ] stop
				 */
				/**
				 * [tJava_17 main ] start
				 */

				currentComponent = "tJava_17";

				tos_count_tJava_17++;

				/**
				 * [tJava_17 main ] stop
				 */
				/**
				 * [tJava_17 end ] start
				 */

				currentComponent = "tJava_17";

				ok_Hash.put("tJava_17", true);
				end_Hash.put("tJava_17", System.currentTimeMillis());

				/**
				 * [tJava_17 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_17:OnSubjobOk1", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_15Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_17:OnSubjobOk2", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_16Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_17_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];

		public int C_HLEVEL;

		public int getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String C_SYNONYM_CD;

		public String getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public BigDecimal C_TOTALNUM;

		public BigDecimal getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public String C_COLUMNDATATYPE;

		public String getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		public String secure_obj_token;

		public String getSecure_obj_token() {
			return this.secure_obj_token;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length);
				strReturn = new String(
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.C_HLEVEL = dis.readInt();

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					this.C_SYNONYM_CD = readString(dis);

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = (BigDecimal) dis.readObject();

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					this.C_COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

					this.secure_obj_token = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.C_HLEVEL);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.C_SYNONYM_CD, dos);

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// BigDecimal

				dos.writeObject(this.C_TOTALNUM);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// String

				writeString(this.C_COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

				// String

				writeString(this.secure_obj_token, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + C_SYNONYM_CD);
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + String.valueOf(C_TOTALNUM));
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + C_COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append(",secure_obj_token=" + secure_obj_token);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfouttStruct implements
			routines.system.IPersistableRow<copyOfouttStruct> {
		final static byte[] commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];

		public int C_HLEVEL;

		public int getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String C_SYNONYM_CD;

		public String getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public BigDecimal C_TOTALNUM;

		public BigDecimal getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public String C_COLUMNDATATYPE;

		public String getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		public String secure_obj_token;

		public String getSecure_obj_token() {
			return this.secure_obj_token;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length);
				strReturn = new String(
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.C_HLEVEL = dis.readInt();

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					this.C_SYNONYM_CD = readString(dis);

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = (BigDecimal) dis.readObject();

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					this.C_COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

					this.secure_obj_token = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.C_HLEVEL);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.C_SYNONYM_CD, dos);

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// BigDecimal

				dos.writeObject(this.C_TOTALNUM);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// String

				writeString(this.C_COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

				// String

				writeString(this.secure_obj_token, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + C_SYNONYM_CD);
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + String.valueOf(C_TOTALNUM));
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + C_COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append(",secure_obj_token=" + secure_obj_token);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfouttStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];

		public int C_HLEVEL;

		public int getC_HLEVEL() {
			return this.C_HLEVEL;
		}

		public String C_FULLNAME;

		public String getC_FULLNAME() {
			return this.C_FULLNAME;
		}

		public String C_NAME;

		public String getC_NAME() {
			return this.C_NAME;
		}

		public String C_SYNONYM_CD;

		public String getC_SYNONYM_CD() {
			return this.C_SYNONYM_CD;
		}

		public String C_VISUALATTRIBUTES;

		public String getC_VISUALATTRIBUTES() {
			return this.C_VISUALATTRIBUTES;
		}

		public BigDecimal C_TOTALNUM;

		public BigDecimal getC_TOTALNUM() {
			return this.C_TOTALNUM;
		}

		public String C_BASECODE;

		public String getC_BASECODE() {
			return this.C_BASECODE;
		}

		public String C_METADATAXML;

		public String getC_METADATAXML() {
			return this.C_METADATAXML;
		}

		public String C_FACTTABLECOLUMN;

		public String getC_FACTTABLECOLUMN() {
			return this.C_FACTTABLECOLUMN;
		}

		public String C_TABLENAME;

		public String getC_TABLENAME() {
			return this.C_TABLENAME;
		}

		public String C_COLUMNNAME;

		public String getC_COLUMNNAME() {
			return this.C_COLUMNNAME;
		}

		public String C_COLUMNDATATYPE;

		public String getC_COLUMNDATATYPE() {
			return this.C_COLUMNDATATYPE;
		}

		public String C_OPERATOR;

		public String getC_OPERATOR() {
			return this.C_OPERATOR;
		}

		public String C_DIMCODE;

		public String getC_DIMCODE() {
			return this.C_DIMCODE;
		}

		public String C_COMMENT;

		public String getC_COMMENT() {
			return this.C_COMMENT;
		}

		public String C_TOOLTIP;

		public String getC_TOOLTIP() {
			return this.C_TOOLTIP;
		}

		public String M_APPLIED_PATH;

		public String getM_APPLIED_PATH() {
			return this.M_APPLIED_PATH;
		}

		public java.util.Date UPDATE_DATE;

		public java.util.Date getUPDATE_DATE() {
			return this.UPDATE_DATE;
		}

		public java.util.Date DOWNLOAD_DATE;

		public java.util.Date getDOWNLOAD_DATE() {
			return this.DOWNLOAD_DATE;
		}

		public java.util.Date IMPORT_DATE;

		public java.util.Date getIMPORT_DATE() {
			return this.IMPORT_DATE;
		}

		public String SOURCESYSTEM_CD;

		public String getSOURCESYSTEM_CD() {
			return this.SOURCESYSTEM_CD;
		}

		public String VALUETYPE_CD;

		public String getVALUETYPE_CD() {
			return this.VALUETYPE_CD;
		}

		public String M_EXCLUSION_CD;

		public String getM_EXCLUSION_CD() {
			return this.M_EXCLUSION_CD;
		}

		public String C_PATH;

		public String getC_PATH() {
			return this.C_PATH;
		}

		public String C_SYMBOL;

		public String getC_SYMBOL() {
			return this.C_SYMBOL;
		}

		public String secure_obj;

		public String getSecure_obj() {
			return this.secure_obj;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length);
				strReturn = new String(
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.C_HLEVEL = dis.readInt();

					this.C_FULLNAME = readString(dis);

					this.C_NAME = readString(dis);

					this.C_SYNONYM_CD = readString(dis);

					this.C_VISUALATTRIBUTES = readString(dis);

					this.C_TOTALNUM = (BigDecimal) dis.readObject();

					this.C_BASECODE = readString(dis);

					this.C_METADATAXML = readString(dis);

					this.C_FACTTABLECOLUMN = readString(dis);

					this.C_TABLENAME = readString(dis);

					this.C_COLUMNNAME = readString(dis);

					this.C_COLUMNDATATYPE = readString(dis);

					this.C_OPERATOR = readString(dis);

					this.C_DIMCODE = readString(dis);

					this.C_COMMENT = readString(dis);

					this.C_TOOLTIP = readString(dis);

					this.M_APPLIED_PATH = readString(dis);

					this.UPDATE_DATE = readDate(dis);

					this.DOWNLOAD_DATE = readDate(dis);

					this.IMPORT_DATE = readDate(dis);

					this.SOURCESYSTEM_CD = readString(dis);

					this.VALUETYPE_CD = readString(dis);

					this.M_EXCLUSION_CD = readString(dis);

					this.C_PATH = readString(dis);

					this.C_SYMBOL = readString(dis);

					this.secure_obj = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.C_HLEVEL);

				// String

				writeString(this.C_FULLNAME, dos);

				// String

				writeString(this.C_NAME, dos);

				// String

				writeString(this.C_SYNONYM_CD, dos);

				// String

				writeString(this.C_VISUALATTRIBUTES, dos);

				// BigDecimal

				dos.writeObject(this.C_TOTALNUM);

				// String

				writeString(this.C_BASECODE, dos);

				// String

				writeString(this.C_METADATAXML, dos);

				// String

				writeString(this.C_FACTTABLECOLUMN, dos);

				// String

				writeString(this.C_TABLENAME, dos);

				// String

				writeString(this.C_COLUMNNAME, dos);

				// String

				writeString(this.C_COLUMNDATATYPE, dos);

				// String

				writeString(this.C_OPERATOR, dos);

				// String

				writeString(this.C_DIMCODE, dos);

				// String

				writeString(this.C_COMMENT, dos);

				// String

				writeString(this.C_TOOLTIP, dos);

				// String

				writeString(this.M_APPLIED_PATH, dos);

				// java.util.Date

				writeDate(this.UPDATE_DATE, dos);

				// java.util.Date

				writeDate(this.DOWNLOAD_DATE, dos);

				// java.util.Date

				writeDate(this.IMPORT_DATE, dos);

				// String

				writeString(this.SOURCESYSTEM_CD, dos);

				// String

				writeString(this.VALUETYPE_CD, dos);

				// String

				writeString(this.M_EXCLUSION_CD, dos);

				// String

				writeString(this.C_PATH, dos);

				// String

				writeString(this.C_SYMBOL, dos);

				// String

				writeString(this.secure_obj, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("C_HLEVEL=" + String.valueOf(C_HLEVEL));
			sb.append(",C_FULLNAME=" + C_FULLNAME);
			sb.append(",C_NAME=" + C_NAME);
			sb.append(",C_SYNONYM_CD=" + C_SYNONYM_CD);
			sb.append(",C_VISUALATTRIBUTES=" + C_VISUALATTRIBUTES);
			sb.append(",C_TOTALNUM=" + String.valueOf(C_TOTALNUM));
			sb.append(",C_BASECODE=" + C_BASECODE);
			sb.append(",C_METADATAXML=" + C_METADATAXML);
			sb.append(",C_FACTTABLECOLUMN=" + C_FACTTABLECOLUMN);
			sb.append(",C_TABLENAME=" + C_TABLENAME);
			sb.append(",C_COLUMNNAME=" + C_COLUMNNAME);
			sb.append(",C_COLUMNDATATYPE=" + C_COLUMNDATATYPE);
			sb.append(",C_OPERATOR=" + C_OPERATOR);
			sb.append(",C_DIMCODE=" + C_DIMCODE);
			sb.append(",C_COMMENT=" + C_COMMENT);
			sb.append(",C_TOOLTIP=" + C_TOOLTIP);
			sb.append(",M_APPLIED_PATH=" + M_APPLIED_PATH);
			sb.append(",UPDATE_DATE=" + String.valueOf(UPDATE_DATE));
			sb.append(",DOWNLOAD_DATE=" + String.valueOf(DOWNLOAD_DATE));
			sb.append(",IMPORT_DATE=" + String.valueOf(IMPORT_DATE));
			sb.append(",SOURCESYSTEM_CD=" + SOURCESYSTEM_CD);
			sb.append(",VALUETYPE_CD=" + VALUETYPE_CD);
			sb.append(",M_EXCLUSION_CD=" + M_EXCLUSION_CD);
			sb.append(",C_PATH=" + C_PATH);
			sb.append(",C_SYMBOL=" + C_SYMBOL);
			sb.append(",secure_obj=" + secure_obj);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_15Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();
				copyOfouttStruct copyOfoutt = new copyOfouttStruct();
				row5Struct row5 = new row5Struct();

				/**
				 * [tJDBCOutput_13 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_13", false);
				start_Hash.put("tJDBCOutput_13", System.currentTimeMillis());
				currentComponent = "tJDBCOutput_13";

				int tos_count_tJDBCOutput_13 = 0;

				int updateKeyCount_tJDBCOutput_13 = 1;
				if (updateKeyCount_tJDBCOutput_13 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tJDBCOutput_13 = 0;
				int nb_line_update_tJDBCOutput_13 = 0;
				int nb_line_inserted_tJDBCOutput_13 = 0;
				int nb_line_deleted_tJDBCOutput_13 = 0;
				int nb_line_rejected_tJDBCOutput_13 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_13 = 0;

				int deletedCount_tJDBCOutput_13 = 0;
				int updatedCount_tJDBCOutput_13 = 0;
				int insertedCount_tJDBCOutput_13 = 0;
				int rejectedCount_tJDBCOutput_13 = 0;

				boolean whetherReject_tJDBCOutput_13 = false;

				java.sql.Connection connection_tJDBCOutput_13 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");
				if (null == connection_tJDBCOutput_13) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCOutput_13 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					connection_tJDBCOutput_13 = dataSources_tJDBCOutput_13.get(
							"").getConnection();
				}

				int batchSize_tJDBCOutput_13 = 10000;
				int batchSizeCounter_tJDBCOutput_13 = 0;

				java.sql.PreparedStatement pstmt_tJDBCOutput_13 = connection_tJDBCOutput_13
						.prepareStatement("SELECT COUNT(1) FROM "
								+ context.currentTable
								+ " WHERE C_FULLNAME = ?");
				String insert_tJDBCOutput_13 = "INSERT INTO "
						+ context.currentTable
						+ " (C_HLEVEL,C_FULLNAME,C_NAME,C_SYNONYM_CD,C_VISUALATTRIBUTES,C_TOTALNUM,C_BASECODE,C_METADATAXML,C_FACTTABLECOLUMN,C_TABLENAME,C_COLUMNNAME,C_COLUMNDATATYPE,C_OPERATOR,C_DIMCODE,C_COMMENT,C_TOOLTIP,M_APPLIED_PATH,UPDATE_DATE,DOWNLOAD_DATE,IMPORT_DATE,SOURCESYSTEM_CD,VALUETYPE_CD,M_EXCLUSION_CD,C_PATH,C_SYMBOL,secure_obj_token) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tJDBCOutput_13 = connection_tJDBCOutput_13
						.prepareStatement(insert_tJDBCOutput_13);
				String update_tJDBCOutput_13 = "UPDATE "
						+ context.currentTable
						+ " SET C_HLEVEL = ?,C_NAME = ?,C_SYNONYM_CD = ?,C_VISUALATTRIBUTES = ?,C_TOTALNUM = ?,C_BASECODE = ?,C_METADATAXML = ?,C_FACTTABLECOLUMN = ?,C_TABLENAME = ?,C_COLUMNNAME = ?,C_COLUMNDATATYPE = ?,C_OPERATOR = ?,C_DIMCODE = ?,C_COMMENT = ?,C_TOOLTIP = ?,M_APPLIED_PATH = ?,UPDATE_DATE = ?,DOWNLOAD_DATE = ?,IMPORT_DATE = ?,SOURCESYSTEM_CD = ?,VALUETYPE_CD = ?,M_EXCLUSION_CD = ?,C_PATH = ?,C_SYMBOL = ?,secure_obj_token = ? WHERE C_FULLNAME = ?";
				java.sql.PreparedStatement pstmtUpdate_tJDBCOutput_13 = connection_tJDBCOutput_13
						.prepareStatement(update_tJDBCOutput_13);

				/**
				 * [tJDBCOutput_13 begin ] stop
				 */

				/**
				 * [tUniqRow_9 begin ] start
				 */

				ok_Hash.put("tUniqRow_9", false);
				start_Hash.put("tUniqRow_9", System.currentTimeMillis());
				currentComponent = "tUniqRow_9";

				int tos_count_tUniqRow_9 = 0;

				class KeyStruct_tUniqRow_9 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					int C_HLEVEL;
					String C_FULLNAME;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + (int) this.C_HLEVEL;

							result = prime
									* result
									+ ((this.C_FULLNAME == null) ? 0
											: this.C_FULLNAME.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_9 other = (KeyStruct_tUniqRow_9) obj;

						if (this.C_HLEVEL != other.C_HLEVEL)
							return false;

						if (this.C_FULLNAME == null) {
							if (other.C_FULLNAME != null)
								return false;
						} else if (!this.C_FULLNAME.equals(other.C_FULLNAME))
							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_9 = 0;
				int nb_duplicates_tUniqRow_9 = 0;
				KeyStruct_tUniqRow_9 finder_tUniqRow_9 = new KeyStruct_tUniqRow_9();
				java.util.Set<KeyStruct_tUniqRow_9> keystUniqRow_9 = new java.util.HashSet<KeyStruct_tUniqRow_9>();

				/**
				 * [tUniqRow_9 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());
				currentComponent = "tMap_4";

				int tos_count_tMap_4 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfouttStruct copyOfoutt_tmp = new copyOfouttStruct();
				// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_15 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_15", false);
				start_Hash.put("tFileInputDelimited_15",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_15";

				int tos_count_tFileInputDelimited_15 = 0;

				int nb_line_tFileInputDelimited_15 = 0;
				int footer_tFileInputDelimited_15 = 0;
				int totalLinetFileInputDelimited_15 = 0;
				int limittFileInputDelimited_15 = -1;
				int lastLinetFileInputDelimited_15 = -1;

				char fieldSeparator_tFileInputDelimited_15[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_15 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_15[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_15 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_15 = /**
				 * Start field
				 * tFileInputDelimited_15:FILENAME
				 */
				context.folderMain + context.folderOutput + "ontology.csv"/**
				 * End
				 * field tFileInputDelimited_15:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_15 = null;

				try {

					String[] rowtFileInputDelimited_15 = null;
					int currentLinetFileInputDelimited_15 = 0;
					int outputLinetFileInputDelimited_15 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_15 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_15 = 0;
							if (footer_value_tFileInputDelimited_15 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_15 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_15,
									fieldSeparator_tFileInputDelimited_15[0],
									context.coding);
						} else {
							csvReadertFileInputDelimited_15 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_15)),
													context.coding)),
									fieldSeparator_tFileInputDelimited_15[0]);
						}

						csvReadertFileInputDelimited_15
								.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_15[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_15[0] != '\r'))
							csvReadertFileInputDelimited_15.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_15[0]);

						csvReadertFileInputDelimited_15.setQuoteChar('"');

						csvReadertFileInputDelimited_15
								.setEscapeChar(csvReadertFileInputDelimited_15
										.getQuoteChar());

						if (footer_tFileInputDelimited_15 > 0) {
							for (totalLinetFileInputDelimited_15 = 0; totalLinetFileInputDelimited_15 < 1; totalLinetFileInputDelimited_15++) {
								csvReadertFileInputDelimited_15.readNext();
							}
							csvReadertFileInputDelimited_15
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_15.readNext()) {

								rowtFileInputDelimited_15 = csvReadertFileInputDelimited_15
										.getValues();
								if (!(rowtFileInputDelimited_15.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_15[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

									totalLinetFileInputDelimited_15++;

								}

							}
							int lastLineTemptFileInputDelimited_15 = totalLinetFileInputDelimited_15
									- footer_tFileInputDelimited_15 < 0 ? 0
									: totalLinetFileInputDelimited_15
											- footer_tFileInputDelimited_15;
							if (lastLinetFileInputDelimited_15 > 0) {
								lastLinetFileInputDelimited_15 = lastLinetFileInputDelimited_15 < lastLineTemptFileInputDelimited_15 ? lastLinetFileInputDelimited_15
										: lastLineTemptFileInputDelimited_15;
							} else {
								lastLinetFileInputDelimited_15 = lastLineTemptFileInputDelimited_15;
							}

							csvReadertFileInputDelimited_15.close();
							if (filename_tFileInputDelimited_15 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_15 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_15,
										fieldSeparator_tFileInputDelimited_15[0],
										context.coding);
							} else {
								csvReadertFileInputDelimited_15 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_15)),
														context.coding)),
										fieldSeparator_tFileInputDelimited_15[0]);
							}
							csvReadertFileInputDelimited_15
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_15[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_15[0] != '\r'))
								csvReadertFileInputDelimited_15
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_15[0]);

							csvReadertFileInputDelimited_15.setQuoteChar('"');

							csvReadertFileInputDelimited_15
									.setEscapeChar(csvReadertFileInputDelimited_15
											.getQuoteChar());

						}

						if (limittFileInputDelimited_15 != 0) {
							for (currentLinetFileInputDelimited_15 = 0; currentLinetFileInputDelimited_15 < 1; currentLinetFileInputDelimited_15++) {
								csvReadertFileInputDelimited_15.readNext();
							}
						}
						csvReadertFileInputDelimited_15
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_15 != 0
							&& csvReadertFileInputDelimited_15 != null
							&& csvReadertFileInputDelimited_15.readNext()) {

						rowtFileInputDelimited_15 = csvReadertFileInputDelimited_15
								.getValues();

						if (rowtFileInputDelimited_15.length == 1
								&& ("\015")
										.equals(rowtFileInputDelimited_15[0])) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'
							continue;
						}

						currentLinetFileInputDelimited_15++;

						if (lastLinetFileInputDelimited_15 > -1
								&& currentLinetFileInputDelimited_15 > lastLinetFileInputDelimited_15) {
							break;
						}
						outputLinetFileInputDelimited_15++;
						if (limittFileInputDelimited_15 > 0
								&& outputLinetFileInputDelimited_15 > limittFileInputDelimited_15) {
							break;
						}

						row4 = null;

						boolean whetherReject_tFileInputDelimited_15 = false;
						row4 = new row4Struct();
						try {

							if (rowtFileInputDelimited_15.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_15[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row4.C_HLEVEL = 0;

								row4.C_FULLNAME = null;

								row4.C_NAME = null;

								row4.C_SYNONYM_CD = null;

								row4.C_VISUALATTRIBUTES = null;

								row4.C_TOTALNUM = null;

								row4.C_BASECODE = null;

								row4.C_METADATAXML = null;

								row4.C_FACTTABLECOLUMN = null;

								row4.C_TABLENAME = null;

								row4.C_COLUMNNAME = null;

								row4.C_COLUMNDATATYPE = null;

								row4.C_OPERATOR = null;

								row4.C_DIMCODE = null;

								row4.C_COMMENT = null;

								row4.C_TOOLTIP = null;

								row4.M_APPLIED_PATH = null;

								row4.UPDATE_DATE = null;

								row4.DOWNLOAD_DATE = null;

								row4.IMPORT_DATE = null;

								row4.SOURCESYSTEM_CD = null;

								row4.VALUETYPE_CD = null;

								row4.M_EXCLUSION_CD = null;

								row4.C_PATH = null;

								row4.C_SYMBOL = null;

								row4.secure_obj = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_15 = 0; // Column
																					// Index

								columnIndexWithD_tFileInputDelimited_15 = 0;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									if (rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]
											.length() > 0) {

										row4.C_HLEVEL = ParserUtils
												.parseTo_int(rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]);

									} else {
										row4.C_HLEVEL = 0;
									}

								} else {
									row4.C_HLEVEL = 0;
								}

								columnIndexWithD_tFileInputDelimited_15 = 1;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.C_FULLNAME = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.C_FULLNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 2;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.C_NAME = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.C_NAME = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 3;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.C_SYNONYM_CD = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.C_SYNONYM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 4;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.C_VISUALATTRIBUTES = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.C_VISUALATTRIBUTES = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 5;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									if (rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]
											.length() > 0) {

										row4.C_TOTALNUM = ParserUtils
												.parseTo_BigDecimal(rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]);

									} else {
										row4.C_TOTALNUM = null;
									}

								} else {
									row4.C_TOTALNUM = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 6;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.C_BASECODE = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.C_BASECODE = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 7;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.C_METADATAXML = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.C_METADATAXML = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 8;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.C_FACTTABLECOLUMN = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.C_FACTTABLECOLUMN = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 9;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.C_TABLENAME = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.C_TABLENAME = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 10;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.C_COLUMNNAME = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.C_COLUMNNAME = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 11;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.C_COLUMNDATATYPE = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.C_COLUMNDATATYPE = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 12;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.C_OPERATOR = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.C_OPERATOR = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 13;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.C_DIMCODE = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.C_DIMCODE = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 14;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.C_COMMENT = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.C_COMMENT = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 15;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.C_TOOLTIP = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.C_TOOLTIP = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 16;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.M_APPLIED_PATH = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.M_APPLIED_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 17;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									if (rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]
											.length() > 0) {

										row4.UPDATE_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15],
														"dd-MM-yyyy");

									} else {
										row4.UPDATE_DATE = null;
									}

								} else {
									row4.UPDATE_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 18;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									if (rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]
											.length() > 0) {

										row4.DOWNLOAD_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15],
														"dd-MM-yyyy");

									} else {
										row4.DOWNLOAD_DATE = null;
									}

								} else {
									row4.DOWNLOAD_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 19;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									if (rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15]
											.length() > 0) {

										row4.IMPORT_DATE = ParserUtils
												.parseTo_Date(
														rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15],
														"dd-MM-yyyy");

									} else {
										row4.IMPORT_DATE = null;
									}

								} else {
									row4.IMPORT_DATE = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 20;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.SOURCESYSTEM_CD = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.SOURCESYSTEM_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 21;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.VALUETYPE_CD = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.VALUETYPE_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 22;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.M_EXCLUSION_CD = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.M_EXCLUSION_CD = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 23;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.C_PATH = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.C_PATH = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 24;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.C_SYMBOL = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.C_SYMBOL = null;
								}

								columnIndexWithD_tFileInputDelimited_15 = 25;

								if (columnIndexWithD_tFileInputDelimited_15 < rowtFileInputDelimited_15.length) {

									row4.secure_obj = rowtFileInputDelimited_15[columnIndexWithD_tFileInputDelimited_15];

								} else {
									row4.secure_obj = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_15 = true;

							System.err.println(e.getMessage());
							row4 = null;

						}

						/**
						 * [tFileInputDelimited_15 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_15 main ] start
						 */

						currentComponent = "tFileInputDelimited_15";

						tos_count_tFileInputDelimited_15++;

						/**
						 * [tFileInputDelimited_15 main ] stop
						 */
						// Start of branch "row4"
						if (row4 != null) {

							/**
							 * [tMap_4 main ] start
							 */

							currentComponent = "tMap_4";

							boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_4 = false;
							boolean mainRowRejected_tMap_4 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
								// ###############################
								// # Output tables

								copyOfoutt = null;

								// # Output table : 'copyOfoutt'
								// # Filter conditions
								if (

								row4.C_NAME.length() > 0

								) {
									copyOfoutt_tmp.C_HLEVEL = row4.C_HLEVEL - 1;
									copyOfoutt_tmp.C_FULLNAME = row4.C_FULLNAME;
									copyOfoutt_tmp.C_NAME = row4.C_NAME;
									copyOfoutt_tmp.C_SYNONYM_CD = row4.C_SYNONYM_CD;
									copyOfoutt_tmp.C_VISUALATTRIBUTES = row4.C_VISUALATTRIBUTES;
									copyOfoutt_tmp.C_TOTALNUM = row4.C_TOTALNUM;
									copyOfoutt_tmp.C_BASECODE = row4.C_BASECODE;
									copyOfoutt_tmp.C_METADATAXML = row4.C_METADATAXML;
									copyOfoutt_tmp.C_FACTTABLECOLUMN = row4.C_FACTTABLECOLUMN;
									copyOfoutt_tmp.C_TABLENAME = row4.C_TABLENAME;
									copyOfoutt_tmp.C_COLUMNNAME = row4.C_COLUMNNAME;
									copyOfoutt_tmp.C_COLUMNDATATYPE = row4.C_COLUMNDATATYPE;
									copyOfoutt_tmp.C_OPERATOR = row4.C_OPERATOR;
									copyOfoutt_tmp.C_DIMCODE = row4.C_DIMCODE;
									copyOfoutt_tmp.C_COMMENT = row4.C_COMMENT;
									copyOfoutt_tmp.C_TOOLTIP = row4.C_TOOLTIP;
									copyOfoutt_tmp.M_APPLIED_PATH = row4.M_APPLIED_PATH;
									copyOfoutt_tmp.UPDATE_DATE = row4.UPDATE_DATE;
									copyOfoutt_tmp.DOWNLOAD_DATE = row4.DOWNLOAD_DATE;
									copyOfoutt_tmp.IMPORT_DATE = row4.IMPORT_DATE;
									copyOfoutt_tmp.SOURCESYSTEM_CD = row4.SOURCESYSTEM_CD;
									copyOfoutt_tmp.VALUETYPE_CD = row4.VALUETYPE_CD;
									copyOfoutt_tmp.M_EXCLUSION_CD = row4.M_EXCLUSION_CD;
									copyOfoutt_tmp.C_PATH = row4.C_PATH;
									copyOfoutt_tmp.C_SYMBOL = row4.C_SYMBOL;
									copyOfoutt_tmp.secure_obj_token = (row4.C_HLEVEL > 0) ? ("EXP:" + row4.secure_obj)
											: "";
									copyOfoutt = copyOfoutt_tmp;
								} // closing filter/reject
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_4 = false;

							tos_count_tMap_4++;

							/**
							 * [tMap_4 main ] stop
							 */
							// Start of branch "copyOfoutt"
							if (copyOfoutt != null) {

								/**
								 * [tUniqRow_9 main ] start
								 */

								currentComponent = "tUniqRow_9";

								row5 = null;
								finder_tUniqRow_9.C_HLEVEL = copyOfoutt.C_HLEVEL;
								if (copyOfoutt.C_FULLNAME == null) {
									finder_tUniqRow_9.C_FULLNAME = null;
								} else {
									finder_tUniqRow_9.C_FULLNAME = copyOfoutt.C_FULLNAME
											.toLowerCase();
								}
								finder_tUniqRow_9.hashCodeDirty = true;
								if (!keystUniqRow_9.contains(finder_tUniqRow_9)) {
									KeyStruct_tUniqRow_9 new_tUniqRow_9 = new KeyStruct_tUniqRow_9();

									new_tUniqRow_9.C_HLEVEL = copyOfoutt.C_HLEVEL;
									if (copyOfoutt.C_FULLNAME == null) {
										new_tUniqRow_9.C_FULLNAME = null;
									} else {
										new_tUniqRow_9.C_FULLNAME = copyOfoutt.C_FULLNAME
												.toLowerCase();
									}

									keystUniqRow_9.add(new_tUniqRow_9);
									if (row5 == null) {
										row5 = new row5Struct();
									}
									row5.C_HLEVEL = copyOfoutt.C_HLEVEL;
									row5.C_FULLNAME = copyOfoutt.C_FULLNAME;
									row5.C_NAME = copyOfoutt.C_NAME;
									row5.C_SYNONYM_CD = copyOfoutt.C_SYNONYM_CD;
									row5.C_VISUALATTRIBUTES = copyOfoutt.C_VISUALATTRIBUTES;
									row5.C_TOTALNUM = copyOfoutt.C_TOTALNUM;
									row5.C_BASECODE = copyOfoutt.C_BASECODE;
									row5.C_METADATAXML = copyOfoutt.C_METADATAXML;
									row5.C_FACTTABLECOLUMN = copyOfoutt.C_FACTTABLECOLUMN;
									row5.C_TABLENAME = copyOfoutt.C_TABLENAME;
									row5.C_COLUMNNAME = copyOfoutt.C_COLUMNNAME;
									row5.C_COLUMNDATATYPE = copyOfoutt.C_COLUMNDATATYPE;
									row5.C_OPERATOR = copyOfoutt.C_OPERATOR;
									row5.C_DIMCODE = copyOfoutt.C_DIMCODE;
									row5.C_COMMENT = copyOfoutt.C_COMMENT;
									row5.C_TOOLTIP = copyOfoutt.C_TOOLTIP;
									row5.M_APPLIED_PATH = copyOfoutt.M_APPLIED_PATH;
									row5.UPDATE_DATE = copyOfoutt.UPDATE_DATE;
									row5.DOWNLOAD_DATE = copyOfoutt.DOWNLOAD_DATE;
									row5.IMPORT_DATE = copyOfoutt.IMPORT_DATE;
									row5.SOURCESYSTEM_CD = copyOfoutt.SOURCESYSTEM_CD;
									row5.VALUETYPE_CD = copyOfoutt.VALUETYPE_CD;
									row5.M_EXCLUSION_CD = copyOfoutt.M_EXCLUSION_CD;
									row5.C_PATH = copyOfoutt.C_PATH;
									row5.C_SYMBOL = copyOfoutt.C_SYMBOL;
									row5.secure_obj_token = copyOfoutt.secure_obj_token;
									nb_uniques_tUniqRow_9++;
								} else {
									nb_duplicates_tUniqRow_9++;
								}

								tos_count_tUniqRow_9++;

								/**
								 * [tUniqRow_9 main ] stop
								 */
								// Start of branch "row5"
								if (row5 != null) {

									/**
									 * [tJDBCOutput_13 main ] start
									 */

									currentComponent = "tJDBCOutput_13";

									whetherReject_tJDBCOutput_13 = false;
									if (row5.C_FULLNAME == null) {
										pstmt_tJDBCOutput_13.setNull(1,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tJDBCOutput_13.setString(1,
												row5.C_FULLNAME);
									}

									java.sql.ResultSet rs_tJDBCOutput_13 = pstmt_tJDBCOutput_13
											.executeQuery();
									int checkCount_tJDBCOutput_13 = -1;
									while (rs_tJDBCOutput_13.next()) {
										checkCount_tJDBCOutput_13 = rs_tJDBCOutput_13
												.getInt(1);
									}
									if (checkCount_tJDBCOutput_13 > 0) {
										pstmtUpdate_tJDBCOutput_13.setInt(1,
												row5.C_HLEVEL);

										if (row5.C_NAME == null) {
											pstmtUpdate_tJDBCOutput_13.setNull(
													2, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_13
													.setString(2, row5.C_NAME);
										}

										if (row5.C_SYNONYM_CD == null) {
											pstmtUpdate_tJDBCOutput_13.setNull(
													3, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_13
													.setString(3,
															row5.C_SYNONYM_CD);
										}

										if (row5.C_VISUALATTRIBUTES == null) {
											pstmtUpdate_tJDBCOutput_13.setNull(
													4, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_13
													.setString(
															4,
															row5.C_VISUALATTRIBUTES);
										}

										pstmtUpdate_tJDBCOutput_13
												.setBigDecimal(5,
														row5.C_TOTALNUM);

										if (row5.C_BASECODE == null) {
											pstmtUpdate_tJDBCOutput_13.setNull(
													6, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_13
													.setString(6,
															row5.C_BASECODE);
										}

										if (row5.C_METADATAXML == null) {
											pstmtUpdate_tJDBCOutput_13.setNull(
													7, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_13
													.setString(7,
															row5.C_METADATAXML);
										}

										if (row5.C_FACTTABLECOLUMN == null) {
											pstmtUpdate_tJDBCOutput_13.setNull(
													8, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_13
													.setString(
															8,
															row5.C_FACTTABLECOLUMN);
										}

										if (row5.C_TABLENAME == null) {
											pstmtUpdate_tJDBCOutput_13.setNull(
													9, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_13
													.setString(9,
															row5.C_TABLENAME);
										}

										if (row5.C_COLUMNNAME == null) {
											pstmtUpdate_tJDBCOutput_13.setNull(
													10, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_13
													.setString(10,
															row5.C_COLUMNNAME);
										}

										if (row5.C_COLUMNDATATYPE == null) {
											pstmtUpdate_tJDBCOutput_13.setNull(
													11, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_13
													.setString(
															11,
															row5.C_COLUMNDATATYPE);
										}

										if (row5.C_OPERATOR == null) {
											pstmtUpdate_tJDBCOutput_13.setNull(
													12, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_13
													.setString(12,
															row5.C_OPERATOR);
										}

										if (row5.C_DIMCODE == null) {
											pstmtUpdate_tJDBCOutput_13.setNull(
													13, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_13
													.setString(13,
															row5.C_DIMCODE);
										}

										if (row5.C_COMMENT == null) {
											pstmtUpdate_tJDBCOutput_13.setNull(
													14, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_13
													.setString(14,
															row5.C_COMMENT);
										}

										if (row5.C_TOOLTIP == null) {
											pstmtUpdate_tJDBCOutput_13.setNull(
													15, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_13
													.setString(15,
															row5.C_TOOLTIP);
										}

										if (row5.M_APPLIED_PATH == null) {
											pstmtUpdate_tJDBCOutput_13.setNull(
													16, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_13
													.setString(16,
															row5.M_APPLIED_PATH);
										}

										if (row5.UPDATE_DATE != null) {
											pstmtUpdate_tJDBCOutput_13
													.setTimestamp(
															17,
															new java.sql.Timestamp(
																	row5.UPDATE_DATE
																			.getTime()));
										} else {
											pstmtUpdate_tJDBCOutput_13.setNull(
													17, java.sql.Types.DATE);
										}

										if (row5.DOWNLOAD_DATE != null) {
											pstmtUpdate_tJDBCOutput_13
													.setTimestamp(
															18,
															new java.sql.Timestamp(
																	row5.DOWNLOAD_DATE
																			.getTime()));
										} else {
											pstmtUpdate_tJDBCOutput_13.setNull(
													18, java.sql.Types.DATE);
										}

										if (row5.IMPORT_DATE != null) {
											pstmtUpdate_tJDBCOutput_13
													.setTimestamp(
															19,
															new java.sql.Timestamp(
																	row5.IMPORT_DATE
																			.getTime()));
										} else {
											pstmtUpdate_tJDBCOutput_13.setNull(
													19, java.sql.Types.DATE);
										}

										if (row5.SOURCESYSTEM_CD == null) {
											pstmtUpdate_tJDBCOutput_13.setNull(
													20, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_13
													.setString(
															20,
															row5.SOURCESYSTEM_CD);
										}

										if (row5.VALUETYPE_CD == null) {
											pstmtUpdate_tJDBCOutput_13.setNull(
													21, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_13
													.setString(21,
															row5.VALUETYPE_CD);
										}

										if (row5.M_EXCLUSION_CD == null) {
											pstmtUpdate_tJDBCOutput_13.setNull(
													22, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_13
													.setString(22,
															row5.M_EXCLUSION_CD);
										}

										if (row5.C_PATH == null) {
											pstmtUpdate_tJDBCOutput_13.setNull(
													23, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_13
													.setString(23, row5.C_PATH);
										}

										if (row5.C_SYMBOL == null) {
											pstmtUpdate_tJDBCOutput_13.setNull(
													24, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_13
													.setString(24,
															row5.C_SYMBOL);
										}

										if (row5.secure_obj_token == null) {
											pstmtUpdate_tJDBCOutput_13.setNull(
													25, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_13
													.setString(
															25,
															row5.secure_obj_token);
										}

										if (row5.C_FULLNAME == null) {
											pstmtUpdate_tJDBCOutput_13.setNull(
													26, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tJDBCOutput_13
													.setString(26,
															row5.C_FULLNAME);
										}

										try {
											updatedCount_tJDBCOutput_13 = updatedCount_tJDBCOutput_13
													+ pstmtUpdate_tJDBCOutput_13
															.executeUpdate();
										} catch (java.lang.Exception e) {
											whetherReject_tJDBCOutput_13 = true;
											throw (e);
										}
									} else {
										pstmtInsert_tJDBCOutput_13.setInt(1,
												row5.C_HLEVEL);

										if (row5.C_FULLNAME == null) {
											pstmtInsert_tJDBCOutput_13.setNull(
													2, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_13
													.setString(2,
															row5.C_FULLNAME);
										}

										if (row5.C_NAME == null) {
											pstmtInsert_tJDBCOutput_13.setNull(
													3, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_13
													.setString(3, row5.C_NAME);
										}

										if (row5.C_SYNONYM_CD == null) {
											pstmtInsert_tJDBCOutput_13.setNull(
													4, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_13
													.setString(4,
															row5.C_SYNONYM_CD);
										}

										if (row5.C_VISUALATTRIBUTES == null) {
											pstmtInsert_tJDBCOutput_13.setNull(
													5, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_13
													.setString(
															5,
															row5.C_VISUALATTRIBUTES);
										}

										pstmtInsert_tJDBCOutput_13
												.setBigDecimal(6,
														row5.C_TOTALNUM);

										if (row5.C_BASECODE == null) {
											pstmtInsert_tJDBCOutput_13.setNull(
													7, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_13
													.setString(7,
															row5.C_BASECODE);
										}

										if (row5.C_METADATAXML == null) {
											pstmtInsert_tJDBCOutput_13.setNull(
													8, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_13
													.setString(8,
															row5.C_METADATAXML);
										}

										if (row5.C_FACTTABLECOLUMN == null) {
											pstmtInsert_tJDBCOutput_13.setNull(
													9, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_13
													.setString(
															9,
															row5.C_FACTTABLECOLUMN);
										}

										if (row5.C_TABLENAME == null) {
											pstmtInsert_tJDBCOutput_13.setNull(
													10, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_13
													.setString(10,
															row5.C_TABLENAME);
										}

										if (row5.C_COLUMNNAME == null) {
											pstmtInsert_tJDBCOutput_13.setNull(
													11, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_13
													.setString(11,
															row5.C_COLUMNNAME);
										}

										if (row5.C_COLUMNDATATYPE == null) {
											pstmtInsert_tJDBCOutput_13.setNull(
													12, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_13
													.setString(
															12,
															row5.C_COLUMNDATATYPE);
										}

										if (row5.C_OPERATOR == null) {
											pstmtInsert_tJDBCOutput_13.setNull(
													13, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_13
													.setString(13,
															row5.C_OPERATOR);
										}

										if (row5.C_DIMCODE == null) {
											pstmtInsert_tJDBCOutput_13.setNull(
													14, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_13
													.setString(14,
															row5.C_DIMCODE);
										}

										if (row5.C_COMMENT == null) {
											pstmtInsert_tJDBCOutput_13.setNull(
													15, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_13
													.setString(15,
															row5.C_COMMENT);
										}

										if (row5.C_TOOLTIP == null) {
											pstmtInsert_tJDBCOutput_13.setNull(
													16, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_13
													.setString(16,
															row5.C_TOOLTIP);
										}

										if (row5.M_APPLIED_PATH == null) {
											pstmtInsert_tJDBCOutput_13.setNull(
													17, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_13
													.setString(17,
															row5.M_APPLIED_PATH);
										}

										if (row5.UPDATE_DATE != null) {
											pstmtInsert_tJDBCOutput_13
													.setTimestamp(
															18,
															new java.sql.Timestamp(
																	row5.UPDATE_DATE
																			.getTime()));
										} else {
											pstmtInsert_tJDBCOutput_13.setNull(
													18, java.sql.Types.DATE);
										}

										if (row5.DOWNLOAD_DATE != null) {
											pstmtInsert_tJDBCOutput_13
													.setTimestamp(
															19,
															new java.sql.Timestamp(
																	row5.DOWNLOAD_DATE
																			.getTime()));
										} else {
											pstmtInsert_tJDBCOutput_13.setNull(
													19, java.sql.Types.DATE);
										}

										if (row5.IMPORT_DATE != null) {
											pstmtInsert_tJDBCOutput_13
													.setTimestamp(
															20,
															new java.sql.Timestamp(
																	row5.IMPORT_DATE
																			.getTime()));
										} else {
											pstmtInsert_tJDBCOutput_13.setNull(
													20, java.sql.Types.DATE);
										}

										if (row5.SOURCESYSTEM_CD == null) {
											pstmtInsert_tJDBCOutput_13.setNull(
													21, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_13
													.setString(
															21,
															row5.SOURCESYSTEM_CD);
										}

										if (row5.VALUETYPE_CD == null) {
											pstmtInsert_tJDBCOutput_13.setNull(
													22, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_13
													.setString(22,
															row5.VALUETYPE_CD);
										}

										if (row5.M_EXCLUSION_CD == null) {
											pstmtInsert_tJDBCOutput_13.setNull(
													23, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_13
													.setString(23,
															row5.M_EXCLUSION_CD);
										}

										if (row5.C_PATH == null) {
											pstmtInsert_tJDBCOutput_13.setNull(
													24, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_13
													.setString(24, row5.C_PATH);
										}

										if (row5.C_SYMBOL == null) {
											pstmtInsert_tJDBCOutput_13.setNull(
													25, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_13
													.setString(25,
															row5.C_SYMBOL);
										}

										if (row5.secure_obj_token == null) {
											pstmtInsert_tJDBCOutput_13.setNull(
													26, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tJDBCOutput_13
													.setString(
															26,
															row5.secure_obj_token);
										}

										try {
											insertedCount_tJDBCOutput_13 = insertedCount_tJDBCOutput_13
													+ pstmtInsert_tJDBCOutput_13
															.executeUpdate();
										} catch (java.lang.Exception e) {
											whetherReject_tJDBCOutput_13 = true;
											throw (e);
										}
									}
									nb_line_tJDBCOutput_13++;

									tos_count_tJDBCOutput_13++;

									/**
									 * [tJDBCOutput_13 main ] stop
									 */

								} // End of branch "row5"

							} // End of branch "copyOfoutt"

						} // End of branch "row4"

						/**
						 * [tFileInputDelimited_15 end ] start
						 */

						currentComponent = "tFileInputDelimited_15";

						nb_line_tFileInputDelimited_15++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_15 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_15 != null) {
							csvReadertFileInputDelimited_15.close();
						}
					}
					if (csvReadertFileInputDelimited_15 != null) {
						globalMap.put("tFileInputDelimited_15_NB_LINE",
								nb_line_tFileInputDelimited_15);
					}
				}

				ok_Hash.put("tFileInputDelimited_15", true);
				end_Hash.put("tFileInputDelimited_15",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_15 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tUniqRow_9 end ] start
				 */

				currentComponent = "tUniqRow_9";

				globalMap.put("tUniqRow_9_NB_UNIQUES", nb_uniques_tUniqRow_9);
				globalMap.put("tUniqRow_9_NB_DUPLICATES",
						nb_duplicates_tUniqRow_9);

				ok_Hash.put("tUniqRow_9", true);
				end_Hash.put("tUniqRow_9", System.currentTimeMillis());

				/**
				 * [tUniqRow_9 end ] stop
				 */

				/**
				 * [tJDBCOutput_13 end ] start
				 */

				currentComponent = "tJDBCOutput_13";

				if (pstmtUpdate_tJDBCOutput_13 != null) {

					pstmtUpdate_tJDBCOutput_13.close();

				}
				if (pstmtInsert_tJDBCOutput_13 != null) {

					pstmtInsert_tJDBCOutput_13.close();

				}
				if (pstmt_tJDBCOutput_13 != null) {

					pstmt_tJDBCOutput_13.close();

				}

				nb_line_deleted_tJDBCOutput_13 = nb_line_deleted_tJDBCOutput_13
						+ deletedCount_tJDBCOutput_13;
				nb_line_update_tJDBCOutput_13 = nb_line_update_tJDBCOutput_13
						+ updatedCount_tJDBCOutput_13;
				nb_line_inserted_tJDBCOutput_13 = nb_line_inserted_tJDBCOutput_13
						+ insertedCount_tJDBCOutput_13;
				nb_line_rejected_tJDBCOutput_13 = nb_line_rejected_tJDBCOutput_13
						+ rejectedCount_tJDBCOutput_13;

				globalMap.put("tJDBCOutput_13_NB_LINE", nb_line_tJDBCOutput_13);
				globalMap.put("tJDBCOutput_13_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_13);
				globalMap.put("tJDBCOutput_13_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_13);
				globalMap.put("tJDBCOutput_13_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_13);
				globalMap.put("tJDBCOutput_13_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_13);

				ok_Hash.put("tJDBCOutput_13", true);
				end_Hash.put("tJDBCOutput_13", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_13 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_15_SUBPROCESS_STATE", 1);
	}

	public void tJava_16Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_16 begin ] start
				 */

				ok_Hash.put("tJava_16", false);
				start_Hash.put("tJava_16", System.currentTimeMillis());
				currentComponent = "tJava_16";

				int tos_count_tJava_16 = 0;

				context.currentTable = "i2b2metadata.table_access";
				StatusListener.setSubStatus(99.0f, (int) (float) (90.0f) + "%");

				/**
				 * [tJava_16 begin ] stop
				 */
				/**
				 * [tJava_16 main ] start
				 */

				currentComponent = "tJava_16";

				tos_count_tJava_16++;

				/**
				 * [tJava_16 main ] stop
				 */
				/**
				 * [tJava_16 end ] start
				 */

				currentComponent = "tJava_16";

				ok_Hash.put("tJava_16", true);
				end_Hash.put("tJava_16", System.currentTimeMillis());

				/**
				 * [tJava_16 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_16:OnSubjobOk1", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tRowGenerator_1Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_16:OnSubjobOk2", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJDBCInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_16_SUBPROCESS_STATE", 1);
	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];

		public String c_table_cd;

		public String getC_table_cd() {
			return this.c_table_cd;
		}

		public String c_table_name;

		public String getC_table_name() {
			return this.c_table_name;
		}

		public String c_protected_access;

		public String getC_protected_access() {
			return this.c_protected_access;
		}

		public Integer c_hlevel;

		public Integer getC_hlevel() {
			return this.c_hlevel;
		}

		public String c_fullname;

		public String getC_fullname() {
			return this.c_fullname;
		}

		public String c_name;

		public String getC_name() {
			return this.c_name;
		}

		public String c_synonym_cd;

		public String getC_synonym_cd() {
			return this.c_synonym_cd;
		}

		public String c_visualattributes;

		public String getC_visualattributes() {
			return this.c_visualattributes;
		}

		public Integer c_totalnum;

		public Integer getC_totalnum() {
			return this.c_totalnum;
		}

		public String c_basecode;

		public String getC_basecode() {
			return this.c_basecode;
		}

		public String c_metadataxml;

		public String getC_metadataxml() {
			return this.c_metadataxml;
		}

		public String c_facttablecolumn;

		public String getC_facttablecolumn() {
			return this.c_facttablecolumn;
		}

		public String c_dimtablename;

		public String getC_dimtablename() {
			return this.c_dimtablename;
		}

		public String c_columnname;

		public String getC_columnname() {
			return this.c_columnname;
		}

		public String c_columndatatype;

		public String getC_columndatatype() {
			return this.c_columndatatype;
		}

		public String c_operator;

		public String getC_operator() {
			return this.c_operator;
		}

		public String c_dimcode;

		public String getC_dimcode() {
			return this.c_dimcode;
		}

		public String c_comment;

		public String getC_comment() {
			return this.c_comment;
		}

		public String c_tooltip;

		public String getC_tooltip() {
			return this.c_tooltip;
		}

		public java.util.Date c_entry_date;

		public java.util.Date getC_entry_date() {
			return this.c_entry_date;
		}

		public java.util.Date c_change_date;

		public java.util.Date getC_change_date() {
			return this.c_change_date;
		}

		public String c_status_cd;

		public String getC_status_cd() {
			return this.c_status_cd;
		}

		public String valuetype_cd;

		public String getValuetype_cd() {
			return this.valuetype_cd;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length);
				strReturn = new String(
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.c_table_cd = readString(dis);

					this.c_table_name = readString(dis);

					this.c_protected_access = readString(dis);

					this.c_hlevel = readInteger(dis);

					this.c_fullname = readString(dis);

					this.c_name = readString(dis);

					this.c_synonym_cd = readString(dis);

					this.c_visualattributes = readString(dis);

					this.c_totalnum = readInteger(dis);

					this.c_basecode = readString(dis);

					this.c_metadataxml = readString(dis);

					this.c_facttablecolumn = readString(dis);

					this.c_dimtablename = readString(dis);

					this.c_columnname = readString(dis);

					this.c_columndatatype = readString(dis);

					this.c_operator = readString(dis);

					this.c_dimcode = readString(dis);

					this.c_comment = readString(dis);

					this.c_tooltip = readString(dis);

					this.c_entry_date = readDate(dis);

					this.c_change_date = readDate(dis);

					this.c_status_cd = readString(dis);

					this.valuetype_cd = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.c_table_cd, dos);

				// String

				writeString(this.c_table_name, dos);

				// String

				writeString(this.c_protected_access, dos);

				// Integer

				writeInteger(this.c_hlevel, dos);

				// String

				writeString(this.c_fullname, dos);

				// String

				writeString(this.c_name, dos);

				// String

				writeString(this.c_synonym_cd, dos);

				// String

				writeString(this.c_visualattributes, dos);

				// Integer

				writeInteger(this.c_totalnum, dos);

				// String

				writeString(this.c_basecode, dos);

				// String

				writeString(this.c_metadataxml, dos);

				// String

				writeString(this.c_facttablecolumn, dos);

				// String

				writeString(this.c_dimtablename, dos);

				// String

				writeString(this.c_columnname, dos);

				// String

				writeString(this.c_columndatatype, dos);

				// String

				writeString(this.c_operator, dos);

				// String

				writeString(this.c_dimcode, dos);

				// String

				writeString(this.c_comment, dos);

				// String

				writeString(this.c_tooltip, dos);

				// java.util.Date

				writeDate(this.c_entry_date, dos);

				// java.util.Date

				writeDate(this.c_change_date, dos);

				// String

				writeString(this.c_status_cd, dos);

				// String

				writeString(this.valuetype_cd, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("c_table_cd=" + c_table_cd);
			sb.append(",c_table_name=" + c_table_name);
			sb.append(",c_protected_access=" + c_protected_access);
			sb.append(",c_hlevel=" + String.valueOf(c_hlevel));
			sb.append(",c_fullname=" + c_fullname);
			sb.append(",c_name=" + c_name);
			sb.append(",c_synonym_cd=" + c_synonym_cd);
			sb.append(",c_visualattributes=" + c_visualattributes);
			sb.append(",c_totalnum=" + String.valueOf(c_totalnum));
			sb.append(",c_basecode=" + c_basecode);
			sb.append(",c_metadataxml=" + c_metadataxml);
			sb.append(",c_facttablecolumn=" + c_facttablecolumn);
			sb.append(",c_dimtablename=" + c_dimtablename);
			sb.append(",c_columnname=" + c_columnname);
			sb.append(",c_columndatatype=" + c_columndatatype);
			sb.append(",c_operator=" + c_operator);
			sb.append(",c_dimcode=" + c_dimcode);
			sb.append(",c_comment=" + c_comment);
			sb.append(",c_tooltip=" + c_tooltip);
			sb.append(",c_entry_date=" + String.valueOf(c_entry_date));
			sb.append(",c_change_date=" + String.valueOf(c_change_date));
			sb.append(",c_status_cd=" + c_status_cd);
			sb.append(",valuetype_cd=" + valuetype_cd);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];

		public String newColumn;

		public String getNewColumn() {
			return this.newColumn;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length);
				strReturn = new String(
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.newColumn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.newColumn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("newColumn=" + newColumn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRowGenerator_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				out1Struct out1 = new out1Struct();

				/**
				 * [tJDBCOutput_12 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_12", false);
				start_Hash.put("tJDBCOutput_12", System.currentTimeMillis());
				currentComponent = "tJDBCOutput_12";

				int tos_count_tJDBCOutput_12 = 0;

				int updateKeyCount_tJDBCOutput_12 = 1;
				if (updateKeyCount_tJDBCOutput_12 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tJDBCOutput_12 = 0;
				int nb_line_update_tJDBCOutput_12 = 0;
				int nb_line_inserted_tJDBCOutput_12 = 0;
				int nb_line_deleted_tJDBCOutput_12 = 0;
				int nb_line_rejected_tJDBCOutput_12 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_12 = 0;

				int deletedCount_tJDBCOutput_12 = 0;
				int updatedCount_tJDBCOutput_12 = 0;
				int insertedCount_tJDBCOutput_12 = 0;
				int rejectedCount_tJDBCOutput_12 = 0;

				boolean whetherReject_tJDBCOutput_12 = false;

				java.sql.Connection connection_tJDBCOutput_12 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");
				if (null == connection_tJDBCOutput_12) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCOutput_12 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					connection_tJDBCOutput_12 = dataSources_tJDBCOutput_12.get(
							"").getConnection();
				}

				int batchSize_tJDBCOutput_12 = 10000;
				int batchSizeCounter_tJDBCOutput_12 = 0;

				java.sql.PreparedStatement pstmt_tJDBCOutput_12 = connection_tJDBCOutput_12
						.prepareStatement("SELECT COUNT(1) FROM "
								+ context.currentTable
								+ " WHERE c_table_cd = ?");
				String insert_tJDBCOutput_12 = "INSERT INTO "
						+ context.currentTable
						+ " (c_table_cd,c_table_name,c_protected_access,c_hlevel,c_fullname,c_name,c_synonym_cd,c_visualattributes,c_totalnum,c_basecode,c_metadataxml,c_facttablecolumn,c_dimtablename,c_columnname,c_columndatatype,c_operator,c_dimcode,c_comment,c_tooltip,c_entry_date,c_change_date,c_status_cd,valuetype_cd) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tJDBCOutput_12 = connection_tJDBCOutput_12
						.prepareStatement(insert_tJDBCOutput_12);
				String update_tJDBCOutput_12 = "UPDATE "
						+ context.currentTable
						+ " SET c_table_name = ?,c_protected_access = ?,c_hlevel = ?,c_fullname = ?,c_name = ?,c_synonym_cd = ?,c_visualattributes = ?,c_totalnum = ?,c_basecode = ?,c_metadataxml = ?,c_facttablecolumn = ?,c_dimtablename = ?,c_columnname = ?,c_columndatatype = ?,c_operator = ?,c_dimcode = ?,c_comment = ?,c_tooltip = ?,c_entry_date = ?,c_change_date = ?,c_status_cd = ?,valuetype_cd = ? WHERE c_table_cd = ?";
				java.sql.PreparedStatement pstmtUpdate_tJDBCOutput_12 = connection_tJDBCOutput_12
						.prepareStatement(update_tJDBCOutput_12);

				/**
				 * [tJDBCOutput_12 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());
				currentComponent = "tMap_3";

				int tos_count_tMap_3 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tRowGenerator_1 begin ] start
				 */

				ok_Hash.put("tRowGenerator_1", false);
				start_Hash.put("tRowGenerator_1", System.currentTimeMillis());
				currentComponent = "tRowGenerator_1";

				int tos_count_tRowGenerator_1 = 0;

				int nb_line_tRowGenerator_1 = 0;
				int nb_max_row_tRowGenerator_1 = 1;

				class tRowGenerator_1Randomizer {
					public String getRandomnewColumn() {

						return TalendString.getAsciiRandomString(6);

					}
				}
				tRowGenerator_1Randomizer randtRowGenerator_1 = new tRowGenerator_1Randomizer();

				for (int itRowGenerator_1 = 0; itRowGenerator_1 < nb_max_row_tRowGenerator_1; itRowGenerator_1++) {
					row3.newColumn = randtRowGenerator_1.getRandomnewColumn();
					nb_line_tRowGenerator_1++;

					/**
					 * [tRowGenerator_1 begin ] stop
					 */
					/**
					 * [tRowGenerator_1 main ] start
					 */

					currentComponent = "tRowGenerator_1";

					tos_count_tRowGenerator_1++;

					/**
					 * [tRowGenerator_1 main ] stop
					 */

					/**
					 * [tMap_3 main ] start
					 */

					currentComponent = "tMap_3";

					boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_3 = false;
					boolean mainRowRejected_tMap_3 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
						// ###############################
						// # Output tables

						out1 = null;

						// # Output table : 'out1'
						out1_tmp.c_table_cd = "Private Studies";
						out1_tmp.c_table_name = "i2b2_secure";
						out1_tmp.c_protected_access = "N";
						out1_tmp.c_hlevel = -1;
						out1_tmp.c_fullname = "\\i2b2\\";
						out1_tmp.c_name = "Private Studies";
						out1_tmp.c_synonym_cd = "N";
						out1_tmp.c_visualattributes = "CA ";
						out1_tmp.c_totalnum = 0;
						out1_tmp.c_basecode = "";
						out1_tmp.c_metadataxml = "";
						out1_tmp.c_facttablecolumn = "concept-cd";
						out1_tmp.c_dimtablename = "concept_dimension";
						out1_tmp.c_columnname = "concept_path";
						out1_tmp.c_columndatatype = "T";
						out1_tmp.c_operator = "LIKE";
						out1_tmp.c_dimcode = "\\i2b2\\";
						out1_tmp.c_comment = "";
						out1_tmp.c_tooltip = "Private Studies";
						out1_tmp.c_entry_date = null;
						out1_tmp.c_change_date = null;
						out1_tmp.c_status_cd = null;
						out1_tmp.valuetype_cd = null;
						out1 = out1_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_3 = false;

					tos_count_tMap_3++;

					/**
					 * [tMap_3 main ] stop
					 */
					// Start of branch "out1"
					if (out1 != null) {

						/**
						 * [tJDBCOutput_12 main ] start
						 */

						currentComponent = "tJDBCOutput_12";

						whetherReject_tJDBCOutput_12 = false;
						if (out1.c_table_cd == null) {
							pstmt_tJDBCOutput_12.setNull(1,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tJDBCOutput_12.setString(1, out1.c_table_cd);
						}

						java.sql.ResultSet rs_tJDBCOutput_12 = pstmt_tJDBCOutput_12
								.executeQuery();
						int checkCount_tJDBCOutput_12 = -1;
						while (rs_tJDBCOutput_12.next()) {
							checkCount_tJDBCOutput_12 = rs_tJDBCOutput_12
									.getInt(1);
						}
						if (checkCount_tJDBCOutput_12 > 0) {
							if (out1.c_table_name == null) {
								pstmtUpdate_tJDBCOutput_12.setNull(1,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_12.setString(1,
										out1.c_table_name);
							}

							if (out1.c_protected_access == null) {
								pstmtUpdate_tJDBCOutput_12.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_12.setString(2,
										out1.c_protected_access);
							}

							if (out1.c_hlevel == null) {
								pstmtUpdate_tJDBCOutput_12.setNull(3,
										java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tJDBCOutput_12.setInt(3,
										out1.c_hlevel);
							}

							if (out1.c_fullname == null) {
								pstmtUpdate_tJDBCOutput_12.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_12.setString(4,
										out1.c_fullname);
							}

							if (out1.c_name == null) {
								pstmtUpdate_tJDBCOutput_12.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_12.setString(5,
										out1.c_name);
							}

							if (out1.c_synonym_cd == null) {
								pstmtUpdate_tJDBCOutput_12.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_12.setString(6,
										out1.c_synonym_cd);
							}

							if (out1.c_visualattributes == null) {
								pstmtUpdate_tJDBCOutput_12.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_12.setString(7,
										out1.c_visualattributes);
							}

							if (out1.c_totalnum == null) {
								pstmtUpdate_tJDBCOutput_12.setNull(8,
										java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tJDBCOutput_12.setInt(8,
										out1.c_totalnum);
							}

							if (out1.c_basecode == null) {
								pstmtUpdate_tJDBCOutput_12.setNull(9,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_12.setString(9,
										out1.c_basecode);
							}

							if (out1.c_metadataxml == null) {
								pstmtUpdate_tJDBCOutput_12.setNull(10,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_12.setString(10,
										out1.c_metadataxml);
							}

							if (out1.c_facttablecolumn == null) {
								pstmtUpdate_tJDBCOutput_12.setNull(11,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_12.setString(11,
										out1.c_facttablecolumn);
							}

							if (out1.c_dimtablename == null) {
								pstmtUpdate_tJDBCOutput_12.setNull(12,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_12.setString(12,
										out1.c_dimtablename);
							}

							if (out1.c_columnname == null) {
								pstmtUpdate_tJDBCOutput_12.setNull(13,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_12.setString(13,
										out1.c_columnname);
							}

							if (out1.c_columndatatype == null) {
								pstmtUpdate_tJDBCOutput_12.setNull(14,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_12.setString(14,
										out1.c_columndatatype);
							}

							if (out1.c_operator == null) {
								pstmtUpdate_tJDBCOutput_12.setNull(15,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_12.setString(15,
										out1.c_operator);
							}

							if (out1.c_dimcode == null) {
								pstmtUpdate_tJDBCOutput_12.setNull(16,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_12.setString(16,
										out1.c_dimcode);
							}

							if (out1.c_comment == null) {
								pstmtUpdate_tJDBCOutput_12.setNull(17,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_12.setString(17,
										out1.c_comment);
							}

							if (out1.c_tooltip == null) {
								pstmtUpdate_tJDBCOutput_12.setNull(18,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_12.setString(18,
										out1.c_tooltip);
							}

							if (out1.c_entry_date != null) {
								pstmtUpdate_tJDBCOutput_12.setTimestamp(19,
										new java.sql.Timestamp(
												out1.c_entry_date.getTime()));
							} else {
								pstmtUpdate_tJDBCOutput_12.setNull(19,
										java.sql.Types.DATE);
							}

							if (out1.c_change_date != null) {
								pstmtUpdate_tJDBCOutput_12.setTimestamp(20,
										new java.sql.Timestamp(
												out1.c_change_date.getTime()));
							} else {
								pstmtUpdate_tJDBCOutput_12.setNull(20,
										java.sql.Types.DATE);
							}

							if (out1.c_status_cd == null) {
								pstmtUpdate_tJDBCOutput_12.setNull(21,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_12.setString(21,
										out1.c_status_cd);
							}

							if (out1.valuetype_cd == null) {
								pstmtUpdate_tJDBCOutput_12.setNull(22,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_12.setString(22,
										out1.valuetype_cd);
							}

							if (out1.c_table_cd == null) {
								pstmtUpdate_tJDBCOutput_12.setNull(23,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_12.setString(23,
										out1.c_table_cd);
							}

							try {
								updatedCount_tJDBCOutput_12 = updatedCount_tJDBCOutput_12
										+ pstmtUpdate_tJDBCOutput_12
												.executeUpdate();
							} catch (java.lang.Exception e) {
								whetherReject_tJDBCOutput_12 = true;
								throw (e);
							}
						} else {
							if (out1.c_table_cd == null) {
								pstmtInsert_tJDBCOutput_12.setNull(1,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_12.setString(1,
										out1.c_table_cd);
							}

							if (out1.c_table_name == null) {
								pstmtInsert_tJDBCOutput_12.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_12.setString(2,
										out1.c_table_name);
							}

							if (out1.c_protected_access == null) {
								pstmtInsert_tJDBCOutput_12.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_12.setString(3,
										out1.c_protected_access);
							}

							if (out1.c_hlevel == null) {
								pstmtInsert_tJDBCOutput_12.setNull(4,
										java.sql.Types.INTEGER);
							} else {
								pstmtInsert_tJDBCOutput_12.setInt(4,
										out1.c_hlevel);
							}

							if (out1.c_fullname == null) {
								pstmtInsert_tJDBCOutput_12.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_12.setString(5,
										out1.c_fullname);
							}

							if (out1.c_name == null) {
								pstmtInsert_tJDBCOutput_12.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_12.setString(6,
										out1.c_name);
							}

							if (out1.c_synonym_cd == null) {
								pstmtInsert_tJDBCOutput_12.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_12.setString(7,
										out1.c_synonym_cd);
							}

							if (out1.c_visualattributes == null) {
								pstmtInsert_tJDBCOutput_12.setNull(8,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_12.setString(8,
										out1.c_visualattributes);
							}

							if (out1.c_totalnum == null) {
								pstmtInsert_tJDBCOutput_12.setNull(9,
										java.sql.Types.INTEGER);
							} else {
								pstmtInsert_tJDBCOutput_12.setInt(9,
										out1.c_totalnum);
							}

							if (out1.c_basecode == null) {
								pstmtInsert_tJDBCOutput_12.setNull(10,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_12.setString(10,
										out1.c_basecode);
							}

							if (out1.c_metadataxml == null) {
								pstmtInsert_tJDBCOutput_12.setNull(11,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_12.setString(11,
										out1.c_metadataxml);
							}

							if (out1.c_facttablecolumn == null) {
								pstmtInsert_tJDBCOutput_12.setNull(12,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_12.setString(12,
										out1.c_facttablecolumn);
							}

							if (out1.c_dimtablename == null) {
								pstmtInsert_tJDBCOutput_12.setNull(13,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_12.setString(13,
										out1.c_dimtablename);
							}

							if (out1.c_columnname == null) {
								pstmtInsert_tJDBCOutput_12.setNull(14,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_12.setString(14,
										out1.c_columnname);
							}

							if (out1.c_columndatatype == null) {
								pstmtInsert_tJDBCOutput_12.setNull(15,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_12.setString(15,
										out1.c_columndatatype);
							}

							if (out1.c_operator == null) {
								pstmtInsert_tJDBCOutput_12.setNull(16,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_12.setString(16,
										out1.c_operator);
							}

							if (out1.c_dimcode == null) {
								pstmtInsert_tJDBCOutput_12.setNull(17,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_12.setString(17,
										out1.c_dimcode);
							}

							if (out1.c_comment == null) {
								pstmtInsert_tJDBCOutput_12.setNull(18,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_12.setString(18,
										out1.c_comment);
							}

							if (out1.c_tooltip == null) {
								pstmtInsert_tJDBCOutput_12.setNull(19,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_12.setString(19,
										out1.c_tooltip);
							}

							if (out1.c_entry_date != null) {
								pstmtInsert_tJDBCOutput_12.setTimestamp(20,
										new java.sql.Timestamp(
												out1.c_entry_date.getTime()));
							} else {
								pstmtInsert_tJDBCOutput_12.setNull(20,
										java.sql.Types.DATE);
							}

							if (out1.c_change_date != null) {
								pstmtInsert_tJDBCOutput_12.setTimestamp(21,
										new java.sql.Timestamp(
												out1.c_change_date.getTime()));
							} else {
								pstmtInsert_tJDBCOutput_12.setNull(21,
										java.sql.Types.DATE);
							}

							if (out1.c_status_cd == null) {
								pstmtInsert_tJDBCOutput_12.setNull(22,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_12.setString(22,
										out1.c_status_cd);
							}

							if (out1.valuetype_cd == null) {
								pstmtInsert_tJDBCOutput_12.setNull(23,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_12.setString(23,
										out1.valuetype_cd);
							}

							try {
								insertedCount_tJDBCOutput_12 = insertedCount_tJDBCOutput_12
										+ pstmtInsert_tJDBCOutput_12
												.executeUpdate();
							} catch (java.lang.Exception e) {
								whetherReject_tJDBCOutput_12 = true;
								throw (e);
							}
						}
						nb_line_tJDBCOutput_12++;
						if (!whetherReject_tJDBCOutput_12) {
						}

						tos_count_tJDBCOutput_12++;

						/**
						 * [tJDBCOutput_12 main ] stop
						 */

					} // End of branch "out1"

					/**
					 * [tRowGenerator_1 end ] start
					 */

					currentComponent = "tRowGenerator_1";

				}
				globalMap.put("tRowGenerator_1_NB_LINE",
						nb_line_tRowGenerator_1);

				ok_Hash.put("tRowGenerator_1", true);
				end_Hash.put("tRowGenerator_1", System.currentTimeMillis());

				/**
				 * [tRowGenerator_1 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tJDBCOutput_12 end ] start
				 */

				currentComponent = "tJDBCOutput_12";

				if (pstmtUpdate_tJDBCOutput_12 != null) {

					pstmtUpdate_tJDBCOutput_12.close();

				}
				if (pstmtInsert_tJDBCOutput_12 != null) {

					pstmtInsert_tJDBCOutput_12.close();

				}
				if (pstmt_tJDBCOutput_12 != null) {

					pstmt_tJDBCOutput_12.close();

				}

				nb_line_deleted_tJDBCOutput_12 = nb_line_deleted_tJDBCOutput_12
						+ deletedCount_tJDBCOutput_12;
				nb_line_update_tJDBCOutput_12 = nb_line_update_tJDBCOutput_12
						+ updatedCount_tJDBCOutput_12;
				nb_line_inserted_tJDBCOutput_12 = nb_line_inserted_tJDBCOutput_12
						+ insertedCount_tJDBCOutput_12;
				nb_line_rejected_tJDBCOutput_12 = nb_line_rejected_tJDBCOutput_12
						+ rejectedCount_tJDBCOutput_12;

				globalMap.put("tJDBCOutput_12_NB_LINE", nb_line_tJDBCOutput_12);
				globalMap.put("tJDBCOutput_12_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_12);
				globalMap.put("tJDBCOutput_12_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_12);
				globalMap.put("tJDBCOutput_12_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_12);
				globalMap.put("tJDBCOutput_12_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_12);

				ok_Hash.put("tJDBCOutput_12", true);
				end_Hash.put("tJDBCOutput_12", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_12 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 1);
	}

	public static class copyOfout1Struct implements
			routines.system.IPersistableRow<copyOfout1Struct> {
		final static byte[] commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];

		public Integer bio_experiment_id;

		public Integer getBio_experiment_id() {
			return this.bio_experiment_id;
		}

		public String bio_experiment_type;

		public String getBio_experiment_type() {
			return this.bio_experiment_type;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String design;

		public String getDesign() {
			return this.design;
		}

		public java.util.Date start_date;

		public java.util.Date getStart_date() {
			return this.start_date;
		}

		public java.util.Date completion_date;

		public java.util.Date getCompletion_date() {
			return this.completion_date;
		}

		public String primary_investigator;

		public String getPrimary_investigator() {
			return this.primary_investigator;
		}

		public String contact_field;

		public String getContact_field() {
			return this.contact_field;
		}

		public String etl_id;

		public String getEtl_id() {
			return this.etl_id;
		}

		public String status;

		public String getStatus() {
			return this.status;
		}

		public String overall_design;

		public String getOverall_design() {
			return this.overall_design;
		}

		public String accession;

		public String getAccession() {
			return this.accession;
		}

		public java.util.Date entrydt;

		public java.util.Date getEntrydt() {
			return this.entrydt;
		}

		public java.util.Date updated;

		public java.util.Date getUpdated() {
			return this.updated;
		}

		public String institution;

		public String getInstitution() {
			return this.institution;
		}

		public String country;

		public String getCountry() {
			return this.country;
		}

		public String biomarker_type;

		public String getBiomarker_type() {
			return this.biomarker_type;
		}

		public String target;

		public String getTarget() {
			return this.target;
		}

		public String access_type;

		public String getAccess_type() {
			return this.access_type;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length) {
					if (length < 1024
							&& commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload.length == 0) {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[1024];
					} else {
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length);
				strReturn = new String(
						commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.bio_experiment_id = readInteger(dis);

					this.bio_experiment_type = readString(dis);

					this.title = readString(dis);

					this.description = readString(dis);

					this.design = readString(dis);

					this.start_date = readDate(dis);

					this.completion_date = readDate(dis);

					this.primary_investigator = readString(dis);

					this.contact_field = readString(dis);

					this.etl_id = readString(dis);

					this.status = readString(dis);

					this.overall_design = readString(dis);

					this.accession = readString(dis);

					this.entrydt = readDate(dis);

					this.updated = readDate(dis);

					this.institution = readString(dis);

					this.country = readString(dis);

					this.biomarker_type = readString(dis);

					this.target = readString(dis);

					this.access_type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.bio_experiment_id, dos);

				// String

				writeString(this.bio_experiment_type, dos);

				// String

				writeString(this.title, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.design, dos);

				// java.util.Date

				writeDate(this.start_date, dos);

				// java.util.Date

				writeDate(this.completion_date, dos);

				// String

				writeString(this.primary_investigator, dos);

				// String

				writeString(this.contact_field, dos);

				// String

				writeString(this.etl_id, dos);

				// String

				writeString(this.status, dos);

				// String

				writeString(this.overall_design, dos);

				// String

				writeString(this.accession, dos);

				// java.util.Date

				writeDate(this.entrydt, dos);

				// java.util.Date

				writeDate(this.updated, dos);

				// String

				writeString(this.institution, dos);

				// String

				writeString(this.country, dos);

				// String

				writeString(this.biomarker_type, dos);

				// String

				writeString(this.target, dos);

				// String

				writeString(this.access_type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("bio_experiment_id=" + String.valueOf(bio_experiment_id));
			sb.append(",bio_experiment_type=" + bio_experiment_type);
			sb.append(",title=" + title);
			sb.append(",description=" + description);
			sb.append(",design=" + design);
			sb.append(",start_date=" + String.valueOf(start_date));
			sb.append(",completion_date=" + String.valueOf(completion_date));
			sb.append(",primary_investigator=" + primary_investigator);
			sb.append(",contact_field=" + contact_field);
			sb.append(",etl_id=" + etl_id);
			sb.append(",status=" + status);
			sb.append(",overall_design=" + overall_design);
			sb.append(",accession=" + accession);
			sb.append(",entrydt=" + String.valueOf(entrydt));
			sb.append(",updated=" + String.valueOf(updated));
			sb.append(",institution=" + institution);
			sb.append(",country=" + country);
			sb.append(",biomarker_type=" + biomarker_type);
			sb.append(",target=" + target);
			sb.append(",access_type=" + access_type);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfout1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];

		public Integer bio_experiment_id;

		public Integer getBio_experiment_id() {
			return this.bio_experiment_id;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.bio_experiment_id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.bio_experiment_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("bio_experiment_id=" + String.valueOf(bio_experiment_id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];
		static byte[] commonByteArray_TOS_Copy_of_IDRT_JDBC_Upload = new byte[0];

		public Integer bio_experiment_id;

		public Integer getBio_experiment_id() {
			return this.bio_experiment_id;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TOS_Copy_of_IDRT_JDBC_Upload) {

				try {

					int length = 0;

					this.bio_experiment_id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.bio_experiment_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("bio_experiment_id=" + String.valueOf(bio_experiment_id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row12Struct row12 = new row12Struct();
				row11Struct row11 = new row11Struct();
				copyOfout1Struct copyOfout1 = new copyOfout1Struct();

				/**
				 * [tJDBCOutput_14 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_14", false);
				start_Hash.put("tJDBCOutput_14", System.currentTimeMillis());
				currentComponent = "tJDBCOutput_14";

				int tos_count_tJDBCOutput_14 = 0;

				int updateKeyCount_tJDBCOutput_14 = 1;
				if (updateKeyCount_tJDBCOutput_14 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tJDBCOutput_14 = 0;
				int nb_line_update_tJDBCOutput_14 = 0;
				int nb_line_inserted_tJDBCOutput_14 = 0;
				int nb_line_deleted_tJDBCOutput_14 = 0;
				int nb_line_rejected_tJDBCOutput_14 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_14 = 0;

				int deletedCount_tJDBCOutput_14 = 0;
				int updatedCount_tJDBCOutput_14 = 0;
				int insertedCount_tJDBCOutput_14 = 0;
				int rejectedCount_tJDBCOutput_14 = 0;

				boolean whetherReject_tJDBCOutput_14 = false;

				java.sql.Connection connection_tJDBCOutput_14 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");
				if (null == connection_tJDBCOutput_14) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCOutput_14 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					connection_tJDBCOutput_14 = dataSources_tJDBCOutput_14.get(
							"").getConnection();
				}

				int batchSize_tJDBCOutput_14 = 10000;
				int batchSizeCounter_tJDBCOutput_14 = 0;

				java.sql.PreparedStatement pstmt_tJDBCOutput_14 = connection_tJDBCOutput_14
						.prepareStatement("SELECT COUNT(1) FROM "
								+ "biomart.bio_experiment"
								+ " WHERE bio_experiment_id = ?");
				String insert_tJDBCOutput_14 = "INSERT INTO "
						+ "biomart.bio_experiment"
						+ " (bio_experiment_id,bio_experiment_type,title,description,design,start_date,completion_date,primary_investigator,contact_field,etl_id,status,overall_design,accession,entrydt,updated,institution,country,biomarker_type,target,access_type) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tJDBCOutput_14 = connection_tJDBCOutput_14
						.prepareStatement(insert_tJDBCOutput_14);
				String update_tJDBCOutput_14 = "UPDATE "
						+ "biomart.bio_experiment"
						+ " SET bio_experiment_type = ?,title = ?,description = ?,design = ?,start_date = ?,completion_date = ?,primary_investigator = ?,contact_field = ?,etl_id = ?,status = ?,overall_design = ?,accession = ?,entrydt = ?,updated = ?,institution = ?,country = ?,biomarker_type = ?,target = ?,access_type = ? WHERE bio_experiment_id = ?";
				java.sql.PreparedStatement pstmtUpdate_tJDBCOutput_14 = connection_tJDBCOutput_14
						.prepareStatement(update_tJDBCOutput_14);

				/**
				 * [tJDBCOutput_14 begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());
				currentComponent = "tMap_5";

				int tos_count_tMap_5 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_5__Struct {
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfout1Struct copyOfout1_tmp = new copyOfout1Struct();
				// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tJavaRow_5 begin ] start
				 */

				ok_Hash.put("tJavaRow_5", false);
				start_Hash.put("tJavaRow_5", System.currentTimeMillis());
				currentComponent = "tJavaRow_5";

				int tos_count_tJavaRow_5 = 0;

				int nb_line_tJavaRow_5 = 0;

				/**
				 * [tJavaRow_5 begin ] stop
				 */

				/**
				 * [tJDBCInput_1 begin ] start
				 */

				ok_Hash.put("tJDBCInput_1", false);
				start_Hash.put("tJDBCInput_1", System.currentTimeMillis());
				currentComponent = "tJDBCInput_1";

				int tos_count_tJDBCInput_1 = 0;

				int nb_line_tJDBCInput_1 = 0;
				java.sql.Connection conn_tJDBCInput_1 = null;
				conn_tJDBCInput_1 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");
				if (null == conn_tJDBCInput_1) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tJDBCInput_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tJDBCInput_1 = dataSources_tJDBCInput_1.get("")
							.getConnection();
					// globalMap.put("conn_tJDBCConnection_1",
					// conn_tJDBCInput_1);
				}

				java.sql.Statement stmt_tJDBCInput_1 = conn_tJDBCInput_1
						.createStatement();

				String dbquery_tJDBCInput_1 = "select max(bio_experiment_id) from biomart.bio_experiment";

				globalMap.put("tJDBCInput_1_QUERY", dbquery_tJDBCInput_1);

				java.sql.ResultSet rs_tJDBCInput_1 = stmt_tJDBCInput_1
						.executeQuery(dbquery_tJDBCInput_1);
				java.sql.ResultSetMetaData rsmd_tJDBCInput_1 = rs_tJDBCInput_1
						.getMetaData();
				int colQtyInRs_tJDBCInput_1 = rsmd_tJDBCInput_1
						.getColumnCount();

				String tmpContent_tJDBCInput_1 = null;
				int column_index_tJDBCInput_1 = 1;
				while (rs_tJDBCInput_1.next()) {
					nb_line_tJDBCInput_1++;

					column_index_tJDBCInput_1 = 1;

					if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
						row12.bio_experiment_id = null;
					} else {

						if (rs_tJDBCInput_1
								.getObject(column_index_tJDBCInput_1) != null) {
							row12.bio_experiment_id = rs_tJDBCInput_1
									.getInt(column_index_tJDBCInput_1);
						} else {
							row12.bio_experiment_id = null;
						}

						if (rs_tJDBCInput_1.wasNull()) {
							row12.bio_experiment_id = null;
						}
					}

					/**
					 * [tJDBCInput_1 begin ] stop
					 */
					/**
					 * [tJDBCInput_1 main ] start
					 */

					currentComponent = "tJDBCInput_1";

					tos_count_tJDBCInput_1++;

					/**
					 * [tJDBCInput_1 main ] stop
					 */

					/**
					 * [tJavaRow_5 main ] start
					 */

					currentComponent = "tJavaRow_5";

					// Code generated according to input schema and output
					// schema
					System.out.println("row12.bio_experiment_id "
							+ row12.bio_experiment_id);
					row11.bio_experiment_id = row12.bio_experiment_id;
					StatusListener.setSubStatus(99.0f, (int) (float) (90.0f)
							+ "%");

					nb_line_tJavaRow_5++;

					tos_count_tJavaRow_5++;

					/**
					 * [tJavaRow_5 main ] stop
					 */

					/**
					 * [tMap_5 main ] start
					 */

					currentComponent = "tMap_5";

					boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_5 = false;
					boolean mainRowRejected_tMap_5 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
						// ###############################
						// # Output tables

						copyOfout1 = null;

						// # Output table : 'copyOfout1'
						copyOfout1_tmp.bio_experiment_id = row11.bio_experiment_id + 1;
						copyOfout1_tmp.bio_experiment_type = "Experiment";
						copyOfout1_tmp.title = context.fileName;
						copyOfout1_tmp.description = context.fileName;
						copyOfout1_tmp.design = context.fileName;
						copyOfout1_tmp.start_date = null;
						copyOfout1_tmp.completion_date = null;
						copyOfout1_tmp.primary_investigator = null;
						copyOfout1_tmp.contact_field = null;
						copyOfout1_tmp.etl_id = null;
						copyOfout1_tmp.status = null;
						copyOfout1_tmp.overall_design = null;
						copyOfout1_tmp.accession = context.fileName;
						copyOfout1_tmp.entrydt = null;
						copyOfout1_tmp.updated = null;
						copyOfout1_tmp.institution = null;
						copyOfout1_tmp.country = null;
						copyOfout1_tmp.biomarker_type = null;
						copyOfout1_tmp.target = null;
						copyOfout1_tmp.access_type = null;
						copyOfout1 = copyOfout1_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_5 = false;

					tos_count_tMap_5++;

					/**
					 * [tMap_5 main ] stop
					 */
					// Start of branch "copyOfout1"
					if (copyOfout1 != null) {

						/**
						 * [tJDBCOutput_14 main ] start
						 */

						currentComponent = "tJDBCOutput_14";

						whetherReject_tJDBCOutput_14 = false;
						if (copyOfout1.bio_experiment_id == null) {
							pstmt_tJDBCOutput_14.setNull(1,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tJDBCOutput_14.setInt(1,
									copyOfout1.bio_experiment_id);
						}

						java.sql.ResultSet rs_tJDBCOutput_14 = pstmt_tJDBCOutput_14
								.executeQuery();
						int checkCount_tJDBCOutput_14 = -1;
						while (rs_tJDBCOutput_14.next()) {
							checkCount_tJDBCOutput_14 = rs_tJDBCOutput_14
									.getInt(1);
						}
						if (checkCount_tJDBCOutput_14 > 0) {
							if (copyOfout1.bio_experiment_type == null) {
								pstmtUpdate_tJDBCOutput_14.setNull(1,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_14.setString(1,
										copyOfout1.bio_experiment_type);
							}

							if (copyOfout1.title == null) {
								pstmtUpdate_tJDBCOutput_14.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_14.setString(2,
										copyOfout1.title);
							}

							if (copyOfout1.description == null) {
								pstmtUpdate_tJDBCOutput_14.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_14.setString(3,
										copyOfout1.description);
							}

							if (copyOfout1.design == null) {
								pstmtUpdate_tJDBCOutput_14.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_14.setString(4,
										copyOfout1.design);
							}

							if (copyOfout1.start_date != null) {
								pstmtUpdate_tJDBCOutput_14
										.setTimestamp(
												5,
												new java.sql.Timestamp(
														copyOfout1.start_date
																.getTime()));
							} else {
								pstmtUpdate_tJDBCOutput_14.setNull(5,
										java.sql.Types.DATE);
							}

							if (copyOfout1.completion_date != null) {
								pstmtUpdate_tJDBCOutput_14.setTimestamp(
										6,
										new java.sql.Timestamp(
												copyOfout1.completion_date
														.getTime()));
							} else {
								pstmtUpdate_tJDBCOutput_14.setNull(6,
										java.sql.Types.DATE);
							}

							if (copyOfout1.primary_investigator == null) {
								pstmtUpdate_tJDBCOutput_14.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_14.setString(7,
										copyOfout1.primary_investigator);
							}

							if (copyOfout1.contact_field == null) {
								pstmtUpdate_tJDBCOutput_14.setNull(8,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_14.setString(8,
										copyOfout1.contact_field);
							}

							if (copyOfout1.etl_id == null) {
								pstmtUpdate_tJDBCOutput_14.setNull(9,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_14.setString(9,
										copyOfout1.etl_id);
							}

							if (copyOfout1.status == null) {
								pstmtUpdate_tJDBCOutput_14.setNull(10,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_14.setString(10,
										copyOfout1.status);
							}

							if (copyOfout1.overall_design == null) {
								pstmtUpdate_tJDBCOutput_14.setNull(11,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_14.setString(11,
										copyOfout1.overall_design);
							}

							if (copyOfout1.accession == null) {
								pstmtUpdate_tJDBCOutput_14.setNull(12,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_14.setString(12,
										copyOfout1.accession);
							}

							if (copyOfout1.entrydt != null) {
								pstmtUpdate_tJDBCOutput_14.setTimestamp(13,
										new java.sql.Timestamp(
												copyOfout1.entrydt.getTime()));
							} else {
								pstmtUpdate_tJDBCOutput_14.setNull(13,
										java.sql.Types.DATE);
							}

							if (copyOfout1.updated != null) {
								pstmtUpdate_tJDBCOutput_14.setTimestamp(14,
										new java.sql.Timestamp(
												copyOfout1.updated.getTime()));
							} else {
								pstmtUpdate_tJDBCOutput_14.setNull(14,
										java.sql.Types.DATE);
							}

							if (copyOfout1.institution == null) {
								pstmtUpdate_tJDBCOutput_14.setNull(15,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_14.setString(15,
										copyOfout1.institution);
							}

							if (copyOfout1.country == null) {
								pstmtUpdate_tJDBCOutput_14.setNull(16,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_14.setString(16,
										copyOfout1.country);
							}

							if (copyOfout1.biomarker_type == null) {
								pstmtUpdate_tJDBCOutput_14.setNull(17,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_14.setString(17,
										copyOfout1.biomarker_type);
							}

							if (copyOfout1.target == null) {
								pstmtUpdate_tJDBCOutput_14.setNull(18,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_14.setString(18,
										copyOfout1.target);
							}

							if (copyOfout1.access_type == null) {
								pstmtUpdate_tJDBCOutput_14.setNull(19,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tJDBCOutput_14.setString(19,
										copyOfout1.access_type);
							}

							if (copyOfout1.bio_experiment_id == null) {
								pstmtUpdate_tJDBCOutput_14.setNull(20,
										java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tJDBCOutput_14.setInt(20,
										copyOfout1.bio_experiment_id);
							}

							try {
								updatedCount_tJDBCOutput_14 = updatedCount_tJDBCOutput_14
										+ pstmtUpdate_tJDBCOutput_14
												.executeUpdate();
							} catch (java.lang.Exception e) {
								whetherReject_tJDBCOutput_14 = true;
								throw (e);
							}
						} else {
							if (copyOfout1.bio_experiment_id == null) {
								pstmtInsert_tJDBCOutput_14.setNull(1,
										java.sql.Types.INTEGER);
							} else {
								pstmtInsert_tJDBCOutput_14.setInt(1,
										copyOfout1.bio_experiment_id);
							}

							if (copyOfout1.bio_experiment_type == null) {
								pstmtInsert_tJDBCOutput_14.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_14.setString(2,
										copyOfout1.bio_experiment_type);
							}

							if (copyOfout1.title == null) {
								pstmtInsert_tJDBCOutput_14.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_14.setString(3,
										copyOfout1.title);
							}

							if (copyOfout1.description == null) {
								pstmtInsert_tJDBCOutput_14.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_14.setString(4,
										copyOfout1.description);
							}

							if (copyOfout1.design == null) {
								pstmtInsert_tJDBCOutput_14.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_14.setString(5,
										copyOfout1.design);
							}

							if (copyOfout1.start_date != null) {
								pstmtInsert_tJDBCOutput_14
										.setTimestamp(
												6,
												new java.sql.Timestamp(
														copyOfout1.start_date
																.getTime()));
							} else {
								pstmtInsert_tJDBCOutput_14.setNull(6,
										java.sql.Types.DATE);
							}

							if (copyOfout1.completion_date != null) {
								pstmtInsert_tJDBCOutput_14.setTimestamp(
										7,
										new java.sql.Timestamp(
												copyOfout1.completion_date
														.getTime()));
							} else {
								pstmtInsert_tJDBCOutput_14.setNull(7,
										java.sql.Types.DATE);
							}

							if (copyOfout1.primary_investigator == null) {
								pstmtInsert_tJDBCOutput_14.setNull(8,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_14.setString(8,
										copyOfout1.primary_investigator);
							}

							if (copyOfout1.contact_field == null) {
								pstmtInsert_tJDBCOutput_14.setNull(9,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_14.setString(9,
										copyOfout1.contact_field);
							}

							if (copyOfout1.etl_id == null) {
								pstmtInsert_tJDBCOutput_14.setNull(10,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_14.setString(10,
										copyOfout1.etl_id);
							}

							if (copyOfout1.status == null) {
								pstmtInsert_tJDBCOutput_14.setNull(11,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_14.setString(11,
										copyOfout1.status);
							}

							if (copyOfout1.overall_design == null) {
								pstmtInsert_tJDBCOutput_14.setNull(12,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_14.setString(12,
										copyOfout1.overall_design);
							}

							if (copyOfout1.accession == null) {
								pstmtInsert_tJDBCOutput_14.setNull(13,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_14.setString(13,
										copyOfout1.accession);
							}

							if (copyOfout1.entrydt != null) {
								pstmtInsert_tJDBCOutput_14.setTimestamp(14,
										new java.sql.Timestamp(
												copyOfout1.entrydt.getTime()));
							} else {
								pstmtInsert_tJDBCOutput_14.setNull(14,
										java.sql.Types.DATE);
							}

							if (copyOfout1.updated != null) {
								pstmtInsert_tJDBCOutput_14.setTimestamp(15,
										new java.sql.Timestamp(
												copyOfout1.updated.getTime()));
							} else {
								pstmtInsert_tJDBCOutput_14.setNull(15,
										java.sql.Types.DATE);
							}

							if (copyOfout1.institution == null) {
								pstmtInsert_tJDBCOutput_14.setNull(16,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_14.setString(16,
										copyOfout1.institution);
							}

							if (copyOfout1.country == null) {
								pstmtInsert_tJDBCOutput_14.setNull(17,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_14.setString(17,
										copyOfout1.country);
							}

							if (copyOfout1.biomarker_type == null) {
								pstmtInsert_tJDBCOutput_14.setNull(18,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_14.setString(18,
										copyOfout1.biomarker_type);
							}

							if (copyOfout1.target == null) {
								pstmtInsert_tJDBCOutput_14.setNull(19,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_14.setString(19,
										copyOfout1.target);
							}

							if (copyOfout1.access_type == null) {
								pstmtInsert_tJDBCOutput_14.setNull(20,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tJDBCOutput_14.setString(20,
										copyOfout1.access_type);
							}

							try {
								insertedCount_tJDBCOutput_14 = insertedCount_tJDBCOutput_14
										+ pstmtInsert_tJDBCOutput_14
												.executeUpdate();
							} catch (java.lang.Exception e) {
								whetherReject_tJDBCOutput_14 = true;
								throw (e);
							}
						}
						nb_line_tJDBCOutput_14++;

						tos_count_tJDBCOutput_14++;

						/**
						 * [tJDBCOutput_14 main ] stop
						 */

					} // End of branch "copyOfout1"

					/**
					 * [tJDBCInput_1 end ] start
					 */

					currentComponent = "tJDBCInput_1";

				}
				rs_tJDBCInput_1.close();
				stmt_tJDBCInput_1.close();

				globalMap.put("tJDBCInput_1_NB_LINE", nb_line_tJDBCInput_1);

				ok_Hash.put("tJDBCInput_1", true);
				end_Hash.put("tJDBCInput_1", System.currentTimeMillis());

				/**
				 * [tJDBCInput_1 end ] stop
				 */

				/**
				 * [tJavaRow_5 end ] start
				 */

				currentComponent = "tJavaRow_5";

				globalMap.put("tJavaRow_5_NB_LINE", nb_line_tJavaRow_5);

				ok_Hash.put("tJavaRow_5", true);
				end_Hash.put("tJavaRow_5", System.currentTimeMillis());

				/**
				 * [tJavaRow_5 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tJDBCOutput_14 end ] start
				 */

				currentComponent = "tJDBCOutput_14";

				if (pstmtUpdate_tJDBCOutput_14 != null) {

					pstmtUpdate_tJDBCOutput_14.close();

				}
				if (pstmtInsert_tJDBCOutput_14 != null) {

					pstmtInsert_tJDBCOutput_14.close();

				}
				if (pstmt_tJDBCOutput_14 != null) {

					pstmt_tJDBCOutput_14.close();

				}

				nb_line_deleted_tJDBCOutput_14 = nb_line_deleted_tJDBCOutput_14
						+ deletedCount_tJDBCOutput_14;
				nb_line_update_tJDBCOutput_14 = nb_line_update_tJDBCOutput_14
						+ updatedCount_tJDBCOutput_14;
				nb_line_inserted_tJDBCOutput_14 = nb_line_inserted_tJDBCOutput_14
						+ insertedCount_tJDBCOutput_14;
				nb_line_rejected_tJDBCOutput_14 = nb_line_rejected_tJDBCOutput_14
						+ rejectedCount_tJDBCOutput_14;

				globalMap.put("tJDBCOutput_14_NB_LINE", nb_line_tJDBCOutput_14);
				globalMap.put("tJDBCOutput_14_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_14);
				globalMap.put("tJDBCOutput_14_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_14);
				globalMap.put("tJDBCOutput_14_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_14);
				globalMap.put("tJDBCOutput_14_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_14);

				ok_Hash.put("tJDBCOutput_14", true);
				end_Hash.put("tJDBCOutput_14", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_14 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJDBCInput_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_15Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_15 begin ] start
				 */

				ok_Hash.put("tJava_15", false);
				start_Hash.put("tJava_15", System.currentTimeMillis());
				currentComponent = "tJava_15";

				int tos_count_tJava_15 = 0;

				System.out.println("Upload complete!");
				StatusListener.setSubStatus(100.0f, (int) (float) (100.0f)
						+ "%");

				/**
				 * [tJava_15 begin ] stop
				 */
				/**
				 * [tJava_15 main ] start
				 */

				currentComponent = "tJava_15";

				tos_count_tJava_15++;

				/**
				 * [tJava_15 main ] stop
				 */
				/**
				 * [tJava_15 end ] start
				 */

				currentComponent = "tJava_15";

				ok_Hash.put("tJava_15", true);
				end_Hash.put("tJava_15", System.currentTimeMillis());

				/**
				 * [tJava_15 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tJava_15_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Copy_of_IDRT_JDBC_Upload Copy_of_IDRT_JDBC_UploadClass = new Copy_of_IDRT_JDBC_Upload();

		int exitCode = Copy_of_IDRT_JDBC_UploadClass.runJobInTOS(args);
		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Copy_of_IDRT_JDBC_Upload.class
					.getClassLoader().getResourceAsStream(
							"tos/copy_of_idrt_jdbc_upload_1_0/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.patientDataFolder = (String) context
					.getProperty("patientDataFolder");
			try {
				context.counter = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("counter"));
			} catch (NumberFormatException e) {
				context.counter = null;
			}
			context.DB_StagingI2B2_sqlclassname = (String) context
					.getProperty("DB_StagingI2B2_sqlclassname");
			context.currentTable = (String) context.getProperty("currentTable");
			context.fileName = (String) context.getProperty("fileName");
			context.coding = (String) context.getProperty("coding");
			try {
				context.truncateProject = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("truncateProject"));
			} catch (NumberFormatException e) {
				context.truncateProject = null;
			}
			context.DB_StagingI2B2_DatabaseType = (String) context
					.getProperty("DB_StagingI2B2_DatabaseType");
			context.DB_StagingI2B2_DriverClass = (String) context
					.getProperty("DB_StagingI2B2_DriverClass");
			context.DB_StagingI2B2_Host = (String) context
					.getProperty("DB_StagingI2B2_Host");
			context.DB_StagingI2B2_Instance = (String) context
					.getProperty("DB_StagingI2B2_Instance");
			context.DB_StagingI2B2_jdbcurl = (String) context
					.getProperty("DB_StagingI2B2_jdbcurl");
			context.DB_StagingI2B2_Password = (java.lang.String) context
					.getProperty("DB_StagingI2B2_Password");
			context.DB_StagingI2B2_Port = (String) context
					.getProperty("DB_StagingI2B2_Port");
			context.DB_StagingI2B2_Schema = (String) context
					.getProperty("DB_StagingI2B2_Schema");
			context.DB_StagingI2B2_Username = (String) context
					.getProperty("DB_StagingI2B2_Username");
			context.concept_cd = (String) context.getProperty("concept_cd");
			context.concept_path = (String) context.getProperty("concept_path");
			context.currentFile = (String) context.getProperty("currentFile");
			context.folderMain = (String) context.getProperty("folderMain");
			context.folderOutput = (String) context.getProperty("folderOutput");
			context.folderTmp = (String) context.getProperty("folderTmp");
			context.i2b2HeadNode = (String) context.getProperty("i2b2HeadNode");
			context.i2b2HeadNodeName = (String) context
					.getProperty("i2b2HeadNodeName");
			try {
				context.includePids = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("includePids"));
			} catch (NumberFormatException e) {
				context.includePids = null;
			}
			context.ItemDataAny = (String) context.getProperty("ItemDataAny");
			context.ItemDataBase64Binary = (String) context
					.getProperty("ItemDataBase64Binary");
			context.ItemDataBase64Float = (String) context
					.getProperty("ItemDataBase64Float");
			context.ItemDataBoolean = (String) context
					.getProperty("ItemDataBoolean");
			context.ItemDataDate = (String) context.getProperty("ItemDataDate");
			context.ItemDataDatetime = (String) context
					.getProperty("ItemDataDatetime");
			context.ItemDataDouble = (String) context
					.getProperty("ItemDataDouble");
			context.ItemDataDurationDatetime = (String) context
					.getProperty("ItemDataDurationDatetime");
			context.ItemDataFloat = (String) context
					.getProperty("ItemDataFloat");
			context.ItemDataHexBinary = (String) context
					.getProperty("ItemDataHexBinary");
			context.ItemDataHexFloat = (String) context
					.getProperty("ItemDataHexFloat");
			context.ItemDataIncompleteDatetime = (String) context
					.getProperty("ItemDataIncompleteDatetime");
			context.ItemDataInteger = (String) context
					.getProperty("ItemDataInteger");
			context.ItemDataIntervalDatetime = (String) context
					.getProperty("ItemDataIntervalDatetime");
			context.ItemDataPartialDate = (String) context
					.getProperty("ItemDataPartialDate");
			context.ItemDataPartialDatetime = (String) context
					.getProperty("ItemDataPartialDatetime");
			context.ItemDataPartialTime = (String) context
					.getProperty("ItemDataPartialTime");
			context.ItemDataString = (String) context
					.getProperty("ItemDataString");
			context.ItemDataTime = (String) context.getProperty("ItemDataTime");
			context.ItemDataURI = (String) context.getProperty("ItemDataURI");
			context.MDPD = (String) context.getProperty("MDPD");
			context.MDPDName = (String) context.getProperty("MDPDName");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("patientDataFolder")) {
				context.patientDataFolder = (String) parentContextMap
						.get("patientDataFolder");
			}
			if (parentContextMap.containsKey("counter")) {
				context.counter = (Integer) parentContextMap.get("counter");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_sqlclassname")) {
				context.DB_StagingI2B2_sqlclassname = (String) parentContextMap
						.get("DB_StagingI2B2_sqlclassname");
			}
			if (parentContextMap.containsKey("currentTable")) {
				context.currentTable = (String) parentContextMap
						.get("currentTable");
			}
			if (parentContextMap.containsKey("fileName")) {
				context.fileName = (String) parentContextMap.get("fileName");
			}
			if (parentContextMap.containsKey("coding")) {
				context.coding = (String) parentContextMap.get("coding");
			}
			if (parentContextMap.containsKey("truncateProject")) {
				context.truncateProject = (Boolean) parentContextMap
						.get("truncateProject");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_DatabaseType")) {
				context.DB_StagingI2B2_DatabaseType = (String) parentContextMap
						.get("DB_StagingI2B2_DatabaseType");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_DriverClass")) {
				context.DB_StagingI2B2_DriverClass = (String) parentContextMap
						.get("DB_StagingI2B2_DriverClass");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Host")) {
				context.DB_StagingI2B2_Host = (String) parentContextMap
						.get("DB_StagingI2B2_Host");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Instance")) {
				context.DB_StagingI2B2_Instance = (String) parentContextMap
						.get("DB_StagingI2B2_Instance");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_jdbcurl")) {
				context.DB_StagingI2B2_jdbcurl = (String) parentContextMap
						.get("DB_StagingI2B2_jdbcurl");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Password")) {
				context.DB_StagingI2B2_Password = (java.lang.String) parentContextMap
						.get("DB_StagingI2B2_Password");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Port")) {
				context.DB_StagingI2B2_Port = (String) parentContextMap
						.get("DB_StagingI2B2_Port");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Schema")) {
				context.DB_StagingI2B2_Schema = (String) parentContextMap
						.get("DB_StagingI2B2_Schema");
			}
			if (parentContextMap.containsKey("DB_StagingI2B2_Username")) {
				context.DB_StagingI2B2_Username = (String) parentContextMap
						.get("DB_StagingI2B2_Username");
			}
			if (parentContextMap.containsKey("concept_cd")) {
				context.concept_cd = (String) parentContextMap
						.get("concept_cd");
			}
			if (parentContextMap.containsKey("concept_path")) {
				context.concept_path = (String) parentContextMap
						.get("concept_path");
			}
			if (parentContextMap.containsKey("currentFile")) {
				context.currentFile = (String) parentContextMap
						.get("currentFile");
			}
			if (parentContextMap.containsKey("folderMain")) {
				context.folderMain = (String) parentContextMap
						.get("folderMain");
			}
			if (parentContextMap.containsKey("folderOutput")) {
				context.folderOutput = (String) parentContextMap
						.get("folderOutput");
			}
			if (parentContextMap.containsKey("folderTmp")) {
				context.folderTmp = (String) parentContextMap.get("folderTmp");
			}
			if (parentContextMap.containsKey("i2b2HeadNode")) {
				context.i2b2HeadNode = (String) parentContextMap
						.get("i2b2HeadNode");
			}
			if (parentContextMap.containsKey("i2b2HeadNodeName")) {
				context.i2b2HeadNodeName = (String) parentContextMap
						.get("i2b2HeadNodeName");
			}
			if (parentContextMap.containsKey("includePids")) {
				context.includePids = (Boolean) parentContextMap
						.get("includePids");
			}
			if (parentContextMap.containsKey("ItemDataAny")) {
				context.ItemDataAny = (String) parentContextMap
						.get("ItemDataAny");
			}
			if (parentContextMap.containsKey("ItemDataBase64Binary")) {
				context.ItemDataBase64Binary = (String) parentContextMap
						.get("ItemDataBase64Binary");
			}
			if (parentContextMap.containsKey("ItemDataBase64Float")) {
				context.ItemDataBase64Float = (String) parentContextMap
						.get("ItemDataBase64Float");
			}
			if (parentContextMap.containsKey("ItemDataBoolean")) {
				context.ItemDataBoolean = (String) parentContextMap
						.get("ItemDataBoolean");
			}
			if (parentContextMap.containsKey("ItemDataDate")) {
				context.ItemDataDate = (String) parentContextMap
						.get("ItemDataDate");
			}
			if (parentContextMap.containsKey("ItemDataDatetime")) {
				context.ItemDataDatetime = (String) parentContextMap
						.get("ItemDataDatetime");
			}
			if (parentContextMap.containsKey("ItemDataDouble")) {
				context.ItemDataDouble = (String) parentContextMap
						.get("ItemDataDouble");
			}
			if (parentContextMap.containsKey("ItemDataDurationDatetime")) {
				context.ItemDataDurationDatetime = (String) parentContextMap
						.get("ItemDataDurationDatetime");
			}
			if (parentContextMap.containsKey("ItemDataFloat")) {
				context.ItemDataFloat = (String) parentContextMap
						.get("ItemDataFloat");
			}
			if (parentContextMap.containsKey("ItemDataHexBinary")) {
				context.ItemDataHexBinary = (String) parentContextMap
						.get("ItemDataHexBinary");
			}
			if (parentContextMap.containsKey("ItemDataHexFloat")) {
				context.ItemDataHexFloat = (String) parentContextMap
						.get("ItemDataHexFloat");
			}
			if (parentContextMap.containsKey("ItemDataIncompleteDatetime")) {
				context.ItemDataIncompleteDatetime = (String) parentContextMap
						.get("ItemDataIncompleteDatetime");
			}
			if (parentContextMap.containsKey("ItemDataInteger")) {
				context.ItemDataInteger = (String) parentContextMap
						.get("ItemDataInteger");
			}
			if (parentContextMap.containsKey("ItemDataIntervalDatetime")) {
				context.ItemDataIntervalDatetime = (String) parentContextMap
						.get("ItemDataIntervalDatetime");
			}
			if (parentContextMap.containsKey("ItemDataPartialDate")) {
				context.ItemDataPartialDate = (String) parentContextMap
						.get("ItemDataPartialDate");
			}
			if (parentContextMap.containsKey("ItemDataPartialDatetime")) {
				context.ItemDataPartialDatetime = (String) parentContextMap
						.get("ItemDataPartialDatetime");
			}
			if (parentContextMap.containsKey("ItemDataPartialTime")) {
				context.ItemDataPartialTime = (String) parentContextMap
						.get("ItemDataPartialTime");
			}
			if (parentContextMap.containsKey("ItemDataString")) {
				context.ItemDataString = (String) parentContextMap
						.get("ItemDataString");
			}
			if (parentContextMap.containsKey("ItemDataTime")) {
				context.ItemDataTime = (String) parentContextMap
						.get("ItemDataTime");
			}
			if (parentContextMap.containsKey("ItemDataURI")) {
				context.ItemDataURI = (String) parentContextMap
						.get("ItemDataURI");
			}
			if (parentContextMap.containsKey("MDPD")) {
				context.MDPD = (String) parentContextMap.get("MDPD");
			}
			if (parentContextMap.containsKey("MDPDName")) {
				context.MDPDName = (String) parentContextMap.get("MDPDName");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tLibraryLoad_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tLibraryLoad_1) {

			e_tLibraryLoad_1.printStackTrace();
			globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : Copy_of_IDRT_JDBC_Upload");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 729461 characters generated by Talend Open Studio for Data Integration on the
 * August 6, 2014 10:10:06 AM CEST
 ************************************************************************************************/
