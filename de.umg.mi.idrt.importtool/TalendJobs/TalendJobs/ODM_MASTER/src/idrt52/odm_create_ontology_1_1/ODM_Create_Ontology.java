// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package idrt52.odm_create_ontology_1_1;

import routines.IIT;
import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_4
//import java.util.List;

//the import part of tJava_7
//import java.util.List;

//the import part of tJavaRow_3
//import java.util.List;

//the import part of tJava_8
//import java.util.List;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJava_9
//import java.util.List;

//the import part of tJavaRow_2
//import java.util.List;

//the import part of tJavaRow_10
//import java.util.List;

//the import part of tJava_2
//import java.util.List;

//the import part of tJava_10
//import java.util.List;

//the import part of tJava_6
//import java.util.List;

//the import part of tJava_5
//import java.util.List;

//the import part of tJava_3
//import java.util.List;

//the import part of tJava_4
//import java.util.List;

//the import part of tJavaRow_8
//import java.util.List;

//the import part of tJava_1
//import java.util.List;

//the import part of tLibraryLoad_1
import de.goettingen.i2b2.importtool.idrt.StatusListener.StatusListener;

@SuppressWarnings("unused")
/**
 * Job: ODM_Create_Ontology Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.3.0.r101800
 * @status 
 */
public class ODM_Create_Ontology implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (currentFile != null) {

				this.setProperty("currentFile", currentFile.toString());

			}

			if (startDate != null) {

				this.setProperty("startDate", startDate.toString());

			}

			if (concept_cd != null) {

				this.setProperty("concept_cd", concept_cd.toString());

			}

			if (concept_path != null) {

				this.setProperty("concept_path", concept_path.toString());

			}

			if (encoding != null) {

				this.setProperty("encoding", encoding.toString());

			}

			if (folderMain != null) {

				this.setProperty("folderMain", folderMain.toString());

			}

			if (folderODM != null) {

				this.setProperty("folderODM", folderODM.toString());

			}

			if (folderOutput != null) {

				this.setProperty("folderOutput", folderOutput.toString());

			}

			if (folderTmp != null) {

				this.setProperty("folderTmp", folderTmp.toString());

			}

			if (i2b2HeadNode != null) {

				this.setProperty("i2b2HeadNode", i2b2HeadNode.toString());

			}

			if (i2b2HeadNodeName != null) {

				this.setProperty("i2b2HeadNodeName",
						i2b2HeadNodeName.toString());

			}

			if (includePids != null) {

				this.setProperty("includePids", includePids.toString());

			}

			if (ItemData != null) {

				this.setProperty("ItemData", ItemData.toString());

			}

			if (ItemDataAny != null) {

				this.setProperty("ItemDataAny", ItemDataAny.toString());

			}

			if (ItemDataBase64Binary != null) {

				this.setProperty("ItemDataBase64Binary",
						ItemDataBase64Binary.toString());

			}

			if (ItemDataBase64Float != null) {

				this.setProperty("ItemDataBase64Float",
						ItemDataBase64Float.toString());

			}

			if (ItemDataBoolean != null) {

				this.setProperty("ItemDataBoolean", ItemDataBoolean.toString());

			}

			if (ItemDataDate != null) {

				this.setProperty("ItemDataDate", ItemDataDate.toString());

			}

			if (ItemDataDatetime != null) {

				this.setProperty("ItemDataDatetime",
						ItemDataDatetime.toString());

			}

			if (ItemDataDouble != null) {

				this.setProperty("ItemDataDouble", ItemDataDouble.toString());

			}

			if (ItemDataDurationDatetime != null) {

				this.setProperty("ItemDataDurationDatetime",
						ItemDataDurationDatetime.toString());

			}

			if (ItemDataFloat != null) {

				this.setProperty("ItemDataFloat", ItemDataFloat.toString());

			}

			if (ItemDataHexBinary != null) {

				this.setProperty("ItemDataHexBinary",
						ItemDataHexBinary.toString());

			}

			if (ItemDataHexFloat != null) {

				this.setProperty("ItemDataHexFloat",
						ItemDataHexFloat.toString());

			}

			if (ItemDataIncompleteDatetime != null) {

				this.setProperty("ItemDataIncompleteDatetime",
						ItemDataIncompleteDatetime.toString());

			}

			if (ItemDataInteger != null) {

				this.setProperty("ItemDataInteger", ItemDataInteger.toString());

			}

			if (ItemDataIntervalDatetime != null) {

				this.setProperty("ItemDataIntervalDatetime",
						ItemDataIntervalDatetime.toString());

			}

			if (ItemDataPartialDate != null) {

				this.setProperty("ItemDataPartialDate",
						ItemDataPartialDate.toString());

			}

			if (ItemDataPartialDatetime != null) {

				this.setProperty("ItemDataPartialDatetime",
						ItemDataPartialDatetime.toString());

			}

			if (ItemDataPartialTime != null) {

				this.setProperty("ItemDataPartialTime",
						ItemDataPartialTime.toString());

			}

			if (ItemDataString != null) {

				this.setProperty("ItemDataString", ItemDataString.toString());

			}

			if (ItemDataTime != null) {

				this.setProperty("ItemDataTime", ItemDataTime.toString());

			}

			if (ItemDataURI != null) {

				this.setProperty("ItemDataURI", ItemDataURI.toString());

			}

			if (MDPD != null) {

				this.setProperty("MDPD", MDPD.toString());

			}

			if (MDPDName != null) {

				this.setProperty("MDPDName", MDPDName.toString());

			}

			if (xslt != null) {

				this.setProperty("xslt", xslt.toString());

			}

		}

		public String currentFile;

		public String getCurrentFile() {
			return this.currentFile;
		}

		public Long startDate;

		public Long getStartDate() {
			return this.startDate;
		}

		public String concept_cd;

		public String getConcept_cd() {
			return this.concept_cd;
		}

		public String concept_path;

		public String getConcept_path() {
			return this.concept_path;
		}

		public String encoding;

		public String getEncoding() {
			return this.encoding;
		}

		public String folderMain;

		public String getFolderMain() {
			return this.folderMain;
		}

		public String folderODM;

		public String getFolderODM() {
			return this.folderODM;
		}

		public String folderOutput;

		public String getFolderOutput() {
			return this.folderOutput;
		}

		public String folderTmp;

		public String getFolderTmp() {
			return this.folderTmp;
		}

		public String i2b2HeadNode;

		public String getI2b2HeadNode() {
			return this.i2b2HeadNode;
		}

		public String i2b2HeadNodeName;

		public String getI2b2HeadNodeName() {
			return this.i2b2HeadNodeName;
		}

		public Boolean includePids;

		public Boolean getIncludePids() {
			return this.includePids;
		}

		public String ItemData;

		public String getItemData() {
			return this.ItemData;
		}

		public String ItemDataAny;

		public String getItemDataAny() {
			return this.ItemDataAny;
		}

		public String ItemDataBase64Binary;

		public String getItemDataBase64Binary() {
			return this.ItemDataBase64Binary;
		}

		public String ItemDataBase64Float;

		public String getItemDataBase64Float() {
			return this.ItemDataBase64Float;
		}

		public String ItemDataBoolean;

		public String getItemDataBoolean() {
			return this.ItemDataBoolean;
		}

		public String ItemDataDate;

		public String getItemDataDate() {
			return this.ItemDataDate;
		}

		public String ItemDataDatetime;

		public String getItemDataDatetime() {
			return this.ItemDataDatetime;
		}

		public String ItemDataDouble;

		public String getItemDataDouble() {
			return this.ItemDataDouble;
		}

		public String ItemDataDurationDatetime;

		public String getItemDataDurationDatetime() {
			return this.ItemDataDurationDatetime;
		}

		public String ItemDataFloat;

		public String getItemDataFloat() {
			return this.ItemDataFloat;
		}

		public String ItemDataHexBinary;

		public String getItemDataHexBinary() {
			return this.ItemDataHexBinary;
		}

		public String ItemDataHexFloat;

		public String getItemDataHexFloat() {
			return this.ItemDataHexFloat;
		}

		public String ItemDataIncompleteDatetime;

		public String getItemDataIncompleteDatetime() {
			return this.ItemDataIncompleteDatetime;
		}

		public String ItemDataInteger;

		public String getItemDataInteger() {
			return this.ItemDataInteger;
		}

		public String ItemDataIntervalDatetime;

		public String getItemDataIntervalDatetime() {
			return this.ItemDataIntervalDatetime;
		}

		public String ItemDataPartialDate;

		public String getItemDataPartialDate() {
			return this.ItemDataPartialDate;
		}

		public String ItemDataPartialDatetime;

		public String getItemDataPartialDatetime() {
			return this.ItemDataPartialDatetime;
		}

		public String ItemDataPartialTime;

		public String getItemDataPartialTime() {
			return this.ItemDataPartialTime;
		}

		public String ItemDataString;

		public String getItemDataString() {
			return this.ItemDataString;
		}

		public String ItemDataTime;

		public String getItemDataTime() {
			return this.ItemDataTime;
		}

		public String ItemDataURI;

		public String getItemDataURI() {
			return this.ItemDataURI;
		}

		public String MDPD;

		public String getMDPD() {
			return this.MDPD;
		}

		public String MDPDName;

		public String getMDPDName() {
			return this.MDPDName;
		}

		public String xslt;

		public String getXslt() {
			return this.xslt;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "1.1";
	private final String jobName = "ODM_Create_Ontology";
	private final String projectName = "IDRT52";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					ODM_Create_Ontology.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(ODM_Create_Ontology.this, new Object[] {
									e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			} else {

				status = "failure";

			}
		}
	}

	public void tFileInputXML_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputXML_3", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_4", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_9", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_4", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_13", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_7", System.currentTimeMillis());

		status = "failure";

		tJava_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputXML_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputXML_2", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_3", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_12", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_1", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_16", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_8", System.currentTimeMillis());

		status = "failure";

		tJava_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputXML_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputXML_15", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_1", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_14", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_2", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_22_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_22", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_9", System.currentTimeMillis());

		status = "failure";

		tJava_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputXML_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputXML_16", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_2", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_15", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_10", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_29_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_29", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_3", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_23_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_23", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRowGenerator_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRowGenerator_1", System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_17", System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUnite_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUnite_1", System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_10", System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_26_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_26", System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_2", System.currentTimeMillis());

		status = "failure";

		tJava_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_10", System.currentTimeMillis());

		status = "failure";

		tJava_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_11", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_11_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_10", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_12", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_12_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputXML_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputXML_8", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_7", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_5", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_12", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_6", System.currentTimeMillis());

		status = "failure";

		tJava_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputXML_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputXML_1", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_6", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_6", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_9", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_5", System.currentTimeMillis());

		status = "failure";

		tJava_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_13", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_13_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_14", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_14_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_15", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_15_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_23_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_23", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_23_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_16", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_17", System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_18_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_18", System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_18_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_18", System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_19_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_19", System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_19_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_19", System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_20_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_20", System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_20_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_20", System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_21_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_21", System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_21_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_21", System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_22_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_22", System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_22_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_22", System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_23_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_23", System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputXML_17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputXML_17", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRowGenerator_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRowGenerator_2", System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_27_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_27", System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tCreateTemporaryFile_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_3", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_4", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_3", System.currentTimeMillis());

		status = "failure";

		tJava_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputXML_29_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputXML_29", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_29_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_39_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_39", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_29_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_34_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_34", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_29_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_4", System.currentTimeMillis());

		status = "failure";

		tJava_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tCreateTemporaryFile_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_5", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_6", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_7", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_27_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_27", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_27_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_25_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_25", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_25_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_11", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_11_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_10", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_9", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_8", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_12", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_12_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCreateTemporaryFile_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_13", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_13_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputXML_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputXML_14", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_26_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_26", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_8", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_21_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_21", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputXML_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputXML_10", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_18_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_18", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputXML_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputXML_11", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_19_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_19", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputXML_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputXML_13", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_20_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_20", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_1", System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLibraryLoad_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

		status = "failure";

		tLibraryLoad_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tCreateTemporaryFile_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tCreateTemporaryFile_16", System.currentTimeMillis());

		status = "failure";

		tCreateTemporaryFile_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row22_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_11_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_Temp3Visit_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_Temp3Visit", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_10_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_FormNames_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_FormNames", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_12_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_fromTemp1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_fromTemp1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_temp4Forms_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_temp4Forms", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_13_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_ItemGroupNames_error(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_ItemGroupNames", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_14_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_fromTemp5ItemGroup_error(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_fromTemp5ItemGroup",
				System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_15_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_23_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_fromItemNames_error(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_fromItemNames", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_16_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_outasd_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_outasd", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputXML_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_7_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputXML_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_8_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputXML_15_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_9_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputXML_16_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRowGenerator_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_10_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_8_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_11_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_10_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_12_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputXML_8_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_6_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_7_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputXML_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_13_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_14_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_15_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_23_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_16_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputXML_17_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_3_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_4_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputXML_29_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_5_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_6_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_7_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_27_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_25_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_11_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_10_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_9_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_8_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_12_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_13_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputXML_14_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputXML_10_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputXML_11_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputXML_13_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLibraryLoad_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCreateTemporaryFile_16_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String StudyID;

		public String getStudyID() {
			return this.StudyID;
		}

		public String MetaID;

		public String getMetaID() {
			return this.MetaID;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String QuestionID;

		public String getQuestionID() {
			return this.QuestionID;
		}

		public String ItemID;

		public String getItemID() {
			return this.ItemID;
		}

		public String ParentItem;

		public String getParentItem() {
			return this.ParentItem;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String VisitNo;

		public String getVisitNo() {
			return this.VisitNo;
		}

		public String Sequence;

		public String getSequence() {
			return this.Sequence;
		}

		public String hidden;

		public String getHidden() {
			return this.hidden;
		}

		public String FormFamily;

		public String getFormFamily() {
			return this.FormFamily;
		}

		public String AdditionalData;

		public String getAdditionalData() {
			return this.AdditionalData;
		}

		public String item_Datatype;

		public String getItem_Datatype() {
			return this.item_Datatype;
		}

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.StudyID = readString(dis);

					this.MetaID = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.QuestionID = readString(dis);

					this.ItemID = readString(dis);

					this.ParentItem = readString(dis);

					this.Name = readString(dis);

					this.VisitNo = readString(dis);

					this.Sequence = readString(dis);

					this.hidden = readString(dis);

					this.FormFamily = readString(dis);

					this.AdditionalData = readString(dis);

					this.item_Datatype = readString(dis);

					this.HLEVEL = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.StudyID, dos);

				// String

				writeString(this.MetaID, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.QuestionID, dos);

				// String

				writeString(this.ItemID, dos);

				// String

				writeString(this.ParentItem, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.VisitNo, dos);

				// String

				writeString(this.Sequence, dos);

				// String

				writeString(this.hidden, dos);

				// String

				writeString(this.FormFamily, dos);

				// String

				writeString(this.AdditionalData, dos);

				// String

				writeString(this.item_Datatype, dos);

				// Integer

				writeInteger(this.HLEVEL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("StudyID=" + StudyID);
			sb.append(",MetaID=" + MetaID);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",QuestionID=" + QuestionID);
			sb.append(",ItemID=" + ItemID);
			sb.append(",ParentItem=" + ParentItem);
			sb.append(",Name=" + Name);
			sb.append(",VisitNo=" + VisitNo);
			sb.append(",Sequence=" + Sequence);
			sb.append(",hidden=" + hidden);
			sb.append(",FormFamily=" + FormFamily);
			sb.append(",AdditionalData=" + AdditionalData);
			sb.append(",item_Datatype=" + item_Datatype);
			sb.append(",HLEVEL=" + String.valueOf(HLEVEL));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out8Struct implements
			routines.system.IPersistableRow<out8Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String StudyID;

		public String getStudyID() {
			return this.StudyID;
		}

		public String MetaID;

		public String getMetaID() {
			return this.MetaID;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String QuestionID;

		public String getQuestionID() {
			return this.QuestionID;
		}

		public String ItemID;

		public String getItemID() {
			return this.ItemID;
		}

		public String ParentItem;

		public String getParentItem() {
			return this.ParentItem;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String VisitNo;

		public String getVisitNo() {
			return this.VisitNo;
		}

		public String Sequence;

		public String getSequence() {
			return this.Sequence;
		}

		public String hidden;

		public String getHidden() {
			return this.hidden;
		}

		public String FormFamily;

		public String getFormFamily() {
			return this.FormFamily;
		}

		public String AdditionalData;

		public String getAdditionalData() {
			return this.AdditionalData;
		}

		public String item_Datatype;

		public String getItem_Datatype() {
			return this.item_Datatype;
		}

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.StudyID = readString(dis);

					this.MetaID = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.QuestionID = readString(dis);

					this.ItemID = readString(dis);

					this.ParentItem = readString(dis);

					this.Name = readString(dis);

					this.VisitNo = readString(dis);

					this.Sequence = readString(dis);

					this.hidden = readString(dis);

					this.FormFamily = readString(dis);

					this.AdditionalData = readString(dis);

					this.item_Datatype = readString(dis);

					this.HLEVEL = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.StudyID, dos);

				// String

				writeString(this.MetaID, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.QuestionID, dos);

				// String

				writeString(this.ItemID, dos);

				// String

				writeString(this.ParentItem, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.VisitNo, dos);

				// String

				writeString(this.Sequence, dos);

				// String

				writeString(this.hidden, dos);

				// String

				writeString(this.FormFamily, dos);

				// String

				writeString(this.AdditionalData, dos);

				// String

				writeString(this.item_Datatype, dos);

				// Integer

				writeInteger(this.HLEVEL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("StudyID=" + StudyID);
			sb.append(",MetaID=" + MetaID);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",QuestionID=" + QuestionID);
			sb.append(",ItemID=" + ItemID);
			sb.append(",ParentItem=" + ParentItem);
			sb.append(",Name=" + Name);
			sb.append(",VisitNo=" + VisitNo);
			sb.append(",Sequence=" + Sequence);
			sb.append(",hidden=" + hidden);
			sb.append(",FormFamily=" + FormFamily);
			sb.append(",AdditionalData=" + AdditionalData);
			sb.append(",item_Datatype=" + item_Datatype);
			sb.append(",HLEVEL=" + String.valueOf(HLEVEL));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row21Struct implements
			routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String OID;

		public String getOID() {
			return this.OID;
		}

		public String order;

		public String getOrder() {
			return this.order;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.OID = readString(dis);

					this.order = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.OID, dos);

				// String

				writeString(this.order, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OID=" + OID);
			sb.append(",order=" + order);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String OID;

		public String getOID() {
			return this.OID;
		}

		public String order;

		public String getOrder() {
			return this.order;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.OID = readString(dis);

					this.order = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.OID, dos);

				// String

				writeString(this.order, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OID=" + OID);
			sb.append(",order=" + order);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputXML_3Struct implements
			routines.system.IPersistableRow<after_tFileInputXML_3Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String OID;

		public String getOID() {
			return this.OID;
		}

		public String order;

		public String getOrder() {
			return this.order;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.OID = readString(dis);

					this.order = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.OID, dos);

				// String

				writeString(this.order, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OID=" + OID);
			sb.append(",order=" + order);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputXML_3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputXML_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputXML_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_8Process(globalMap);
				tFileInputDelimited_11Process(globalMap);

				row3Struct row3 = new row3Struct();
				row21Struct row21 = new row21Struct();
				out8Struct out8 = new out8Struct();
				row10Struct row10 = new row10Struct();

				/**
				 * [tFileOutputDelimited_13 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_13", false);
				start_Hash.put("tFileOutputDelimited_13",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_13";

				int tos_count_tFileOutputDelimited_13 = 0;

				String fileName_tFileOutputDelimited_13 = "";
				fileName_tFileOutputDelimited_13 = (new java.io.File(
						((String) globalMap
								.get("tCreateTemporaryFile_16_FILEPATH"))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_13 = null;
				String extension_tFileOutputDelimited_13 = null;
				String directory_tFileOutputDelimited_13 = null;
				if ((fileName_tFileOutputDelimited_13.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_13.lastIndexOf(".") < fileName_tFileOutputDelimited_13
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13;
						extension_tFileOutputDelimited_13 = "";
					} else {
						fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13
								.substring(0, fileName_tFileOutputDelimited_13
										.lastIndexOf("."));
						extension_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13
								.substring(fileName_tFileOutputDelimited_13
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13
							.substring(0, fileName_tFileOutputDelimited_13
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_13.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13
								.substring(0, fileName_tFileOutputDelimited_13
										.lastIndexOf("."));
						extension_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13
								.substring(fileName_tFileOutputDelimited_13
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13;
						extension_tFileOutputDelimited_13 = "";
					}
					directory_tFileOutputDelimited_13 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_13 = true;
				java.io.File filetFileOutputDelimited_13 = new java.io.File(
						fileName_tFileOutputDelimited_13);
				globalMap.put("tFileOutputDelimited_13_FILE_NAME",
						fileName_tFileOutputDelimited_13);

				int nb_line_tFileOutputDelimited_13 = 0;
				int splitEvery_tFileOutputDelimited_13 = 1000;
				int splitedFileNo_tFileOutputDelimited_13 = 0;
				int currentRow_tFileOutputDelimited_13 = 0;

				final String OUT_DELIM_tFileOutputDelimited_13 = /**
				 * Start field
				 * tFileOutputDelimited_13:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_13:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_13 = /**
				 * Start
				 * field tFileOutputDelimited_13:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_13:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_13 != null
						&& directory_tFileOutputDelimited_13.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_13 = new java.io.File(
							directory_tFileOutputDelimited_13);
					if (!dir_tFileOutputDelimited_13.exists()) {
						dir_tFileOutputDelimited_13.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_13 = null;
				try {
					outtFileOutputDelimited_13 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_13,
											false), "ISO-8859-15"));

					if (filetFileOutputDelimited_13.length() == 0) {

						outtFileOutputDelimited_13.write("StudyID");

						outtFileOutputDelimited_13
								.write(OUT_DELIM_tFileOutputDelimited_13);

						outtFileOutputDelimited_13.write("MetaID");

						outtFileOutputDelimited_13
								.write(OUT_DELIM_tFileOutputDelimited_13);

						outtFileOutputDelimited_13.write("VisitID");

						outtFileOutputDelimited_13
								.write(OUT_DELIM_tFileOutputDelimited_13);

						outtFileOutputDelimited_13.write("FormID");

						outtFileOutputDelimited_13
								.write(OUT_DELIM_tFileOutputDelimited_13);

						outtFileOutputDelimited_13.write("QuestionID");

						outtFileOutputDelimited_13
								.write(OUT_DELIM_tFileOutputDelimited_13);

						outtFileOutputDelimited_13.write("ItemID");

						outtFileOutputDelimited_13
								.write(OUT_DELIM_tFileOutputDelimited_13);

						outtFileOutputDelimited_13.write("ParentItem");

						outtFileOutputDelimited_13
								.write(OUT_DELIM_tFileOutputDelimited_13);

						outtFileOutputDelimited_13.write("Name");

						outtFileOutputDelimited_13
								.write(OUT_DELIM_tFileOutputDelimited_13);

						outtFileOutputDelimited_13.write("VisitNo");

						outtFileOutputDelimited_13
								.write(OUT_DELIM_tFileOutputDelimited_13);

						outtFileOutputDelimited_13.write("Sequence");

						outtFileOutputDelimited_13
								.write(OUT_DELIM_tFileOutputDelimited_13);

						outtFileOutputDelimited_13.write("hidden");

						outtFileOutputDelimited_13
								.write(OUT_DELIM_tFileOutputDelimited_13);

						outtFileOutputDelimited_13.write("FormFamily");

						outtFileOutputDelimited_13
								.write(OUT_DELIM_tFileOutputDelimited_13);

						outtFileOutputDelimited_13.write("AdditionalData");

						outtFileOutputDelimited_13
								.write(OUT_DELIM_tFileOutputDelimited_13);

						outtFileOutputDelimited_13.write("item_Datatype");

						outtFileOutputDelimited_13
								.write(OUT_DELIM_tFileOutputDelimited_13);

						outtFileOutputDelimited_13.write("HLEVEL");

						outtFileOutputDelimited_13
								.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_13);
						outtFileOutputDelimited_13.flush();
					}

					/**
					 * [tFileOutputDelimited_13 begin ] stop
					 */

					/**
					 * [tUniqRow_4 begin ] start
					 */

					ok_Hash.put("tUniqRow_4", false);
					start_Hash.put("tUniqRow_4", System.currentTimeMillis());
					currentComponent = "tUniqRow_4";

					int tos_count_tUniqRow_4 = 0;

					class KeyStruct_tUniqRow_4 {

						private static final int DEFAULT_HASHCODE = 1;
						private static final int PRIME = 31;
						private int hashCode = DEFAULT_HASHCODE;
						public boolean hashCodeDirty = true;

						String StudyID;
						String MetaID;
						String VisitID;

						@Override
						public int hashCode() {
							if (this.hashCodeDirty) {
								final int prime = PRIME;
								int result = DEFAULT_HASHCODE;

								result = prime
										* result
										+ ((this.StudyID == null) ? 0
												: this.StudyID.hashCode());

								result = prime
										* result
										+ ((this.MetaID == null) ? 0
												: this.MetaID.hashCode());

								result = prime
										* result
										+ ((this.VisitID == null) ? 0
												: this.VisitID.hashCode());

								this.hashCode = result;
								this.hashCodeDirty = false;
							}
							return this.hashCode;
						}

						@Override
						public boolean equals(Object obj) {
							if (this == obj)
								return true;
							if (obj == null)
								return false;
							if (getClass() != obj.getClass())
								return false;
							final KeyStruct_tUniqRow_4 other = (KeyStruct_tUniqRow_4) obj;

							if (this.StudyID == null) {
								if (other.StudyID != null)
									return false;
							} else if (!this.StudyID.equals(other.StudyID))
								return false;

							if (this.MetaID == null) {
								if (other.MetaID != null)
									return false;
							} else if (!this.MetaID.equals(other.MetaID))
								return false;

							if (this.VisitID == null) {
								if (other.VisitID != null)
									return false;
							} else if (!this.VisitID.equals(other.VisitID))
								return false;

							return true;
						}

					}

					int nb_uniques_tUniqRow_4 = 0;
					int nb_duplicates_tUniqRow_4 = 0;
					KeyStruct_tUniqRow_4 finder_tUniqRow_4 = new KeyStruct_tUniqRow_4();
					java.util.Set<KeyStruct_tUniqRow_4> keystUniqRow_4 = new java.util.HashSet<KeyStruct_tUniqRow_4>();

					/**
					 * [tUniqRow_4 begin ] stop
					 */

					/**
					 * [tMap_9 begin ] start
					 */

					ok_Hash.put("tMap_9", false);
					start_Hash.put("tMap_9", System.currentTimeMillis());
					currentComponent = "tMap_9";

					int tos_count_tMap_9 = 0;

					// ###############################
					// # Lookup's keys initialization

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) globalMap
							.get("tHash_Lookup_row15"));

					tHash_Lookup_row15.initGet();

					row15Struct row15HashKey = new row15Struct();
					row15Struct row15Default = new row15Struct();

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) globalMap
							.get("tHash_Lookup_row22"));

					row22Struct row22HashKey = new row22Struct();
					row22Struct row22Default = new row22Struct();
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_9__Struct {
					}
					Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					out8Struct out8_tmp = new out8Struct();
					// ###############################

					/**
					 * [tMap_9 begin ] stop
					 */

					/**
					 * [tJavaRow_4 begin ] start
					 */

					ok_Hash.put("tJavaRow_4", false);
					start_Hash.put("tJavaRow_4", System.currentTimeMillis());
					currentComponent = "tJavaRow_4";

					int tos_count_tJavaRow_4 = 0;

					int nb_line_tJavaRow_4 = 0;

					/**
					 * [tJavaRow_4 begin ] stop
					 */

					/**
					 * [tFileInputXML_3 begin ] start
					 */

					ok_Hash.put("tFileInputXML_3", false);
					start_Hash.put("tFileInputXML_3",
							System.currentTimeMillis());
					currentComponent = "tFileInputXML_3";

					int tos_count_tFileInputXML_3 = 0;

					int nb_line_tFileInputXML_3 = 0;

					class IgnoreDTDEntityResolver_tFileInputXML_3 implements
							org.xml.sax.EntityResolver {

						public org.xml.sax.InputSource resolveEntity(
								String publicId, String systemId)
								throws org.xml.sax.SAXException,
								java.io.IOException {
							return new org.xml.sax.InputSource(
									new java.io.ByteArrayInputStream(
											"<?xml version='1.0' encoding='UTF-8'?>"
													.getBytes()));
						}

					}
					String os_tFileInputXML_3 = System.getProperty("os.name")
							.toLowerCase();
					boolean isWindows_tFileInputXML_3 = false;
					if (os_tFileInputXML_3.indexOf("windows") > -1
							|| os_tFileInputXML_3.indexOf("nt") > -1) {
						isWindows_tFileInputXML_3 = true;
					}
					class NameSpaceTool_tFileInputXML_3 {

						public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

						private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

						public void countNSMap(org.dom4j.Element el) {
							for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
									.declaredNamespaces()) {
								if (ns.getPrefix().trim().length() == 0) {
									xmlNameSpaceMap.put(
											"pre" + defualtNSPath.size(),
											ns.getURI());
									String path = "";
									org.dom4j.Element elTmp = el;
									while (elTmp != null) {
										if (elTmp.getNamespacePrefix() != null
												&& elTmp.getNamespacePrefix()
														.length() > 0) {
											path = "/"
													+ elTmp.getNamespacePrefix()
													+ ":" + elTmp.getName()
													+ path;
										} else {
											path = "/" + elTmp.getName() + path;
										}
										elTmp = elTmp.getParent();
									}
									defualtNSPath.add(path);
								} else {
									xmlNameSpaceMap.put(ns.getPrefix(),
											ns.getURI());
								}

							}
							for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
									.elements()) {
								countNSMap(e);
							}
						}

						public String addDefaultNSPrefix(String path,
								String loopPath) {
							if (defualtNSPath.size() > 0) {
								String fullPath = loopPath;
								if (!path.equals(fullPath)) {
									for (String tmp : path.split("/")) {
										if (("..").equals(tmp)) {
											fullPath = fullPath.substring(0,
													fullPath.lastIndexOf("/"));
										} else {
											fullPath += "/" + tmp;
										}
									}
								}
								int size = fullPath.split("/").length - 1;
								if (size < 0) {
									return fullPath;
								}
								int[] indexs = new int[size];
								java.util.Arrays.fill(indexs, -1);
								int length = 0;
								for (int i = 0; i < defualtNSPath.size(); i++) {
									if (defualtNSPath.get(i).length() > length
											&& fullPath
													.startsWith(defualtNSPath
															.get(i))) {
										java.util.Arrays
												.fill(indexs,
														defualtNSPath.get(i)
																.split("/").length - 2,
														indexs.length, i);
										length = defualtNSPath.get(i).length();
									}
								}

								StringBuilder newPath = new StringBuilder();
								String[] pathStrs = path.split("/");
								for (int i = 0; i < pathStrs.length; i++) {
									String tmp = pathStrs[i];
									if (newPath.length() > 0) {
										newPath.append("/");
									}
									if (tmp.length() > 0
											&& tmp.indexOf(":") == -1
											&& tmp.indexOf(".") == -1 /*
																	 * &&
																	 * tmp.indexOf
																	 * ("@") ==
																	 * -1
																	 */) {
										int index = indexs[i + indexs.length
												- pathStrs.length];
										if (index >= 0) {
											// ==== add by wliu to support both
											// filter and functions==
											if (tmp.indexOf("[") > 0
													&& tmp.indexOf("]") > tmp
															.indexOf("[")) {// include
																			// filter
												String tmpStr = replaceElementWithNS(
														tmp, "pre" + index
																+ ":");
												newPath.append(tmpStr);
											} else {
												if (tmp.indexOf("@") != -1
														|| tmp.indexOf("(") < tmp
																.indexOf(")")) { // include
																					// attribute
													newPath.append(tmp);
												} else {
													// ==add end=======
													newPath.append("pre")
															.append(index)
															.append(":")
															.append(tmp);
												}
											}
										} else {
											newPath.append(tmp);
										}
									} else {
										newPath.append(tmp);
									}
								}
								return newPath.toString();
							}
							return path;
						}

						private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
						private java.util.regex.Pattern pattern = java.util.regex.Pattern
								.compile(matches);

						private String replaceElementWithNS(String global,
								String pre) {

							java.util.regex.Matcher match = pattern
									.matcher(global);
							StringBuffer sb = new StringBuffer();
							match.reset();
							while (match.find()) {
								String group = match.group();
								String tmp = "";
								if (group.toLowerCase().matches(
										"\\b(div|mod|and|or)\\b.*")
										|| group.matches("@.*")) {
									tmp = group;
								} else {
									tmp = tmp + pre + group;
								}
								match.appendReplacement(sb, tmp);
							}
							match.appendTail(sb);

							return sb.toString();
						}

					}

					class XML_API_tFileInputXML_3 {
						public boolean isDefNull(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							if (node != null
									&& node instanceof org.dom4j.Element) {
								org.dom4j.Attribute attri = ((org.dom4j.Element) node)
										.attribute("nil");
								if (attri != null
										&& ("true").equals(attri.getText())) {
									return true;
								}
							}
							return false;
						}

						public boolean isMissing(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							return node == null ? true : false;
						}

						public boolean isEmpty(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							if (node != null) {
								return node.getText().length() == 0;
							}
							return false;
						}
					}

					org.dom4j.io.SAXReader reader_tFileInputXML_3 = new org.dom4j.io.SAXReader();
					reader_tFileInputXML_3
							.setEntityResolver(new IgnoreDTDEntityResolver_tFileInputXML_3());
					Object filename_tFileInputXML_3 = null;
					try {
						filename_tFileInputXML_3 = context.currentFile;
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}
					if (filename_tFileInputXML_3 != null
							&& filename_tFileInputXML_3 instanceof String
							&& filename_tFileInputXML_3.toString().startsWith(
									"//")) {
						if (!isWindows_tFileInputXML_3) {
							filename_tFileInputXML_3 = filename_tFileInputXML_3
									.toString().replaceFirst("//", "/");
						}
					}

					boolean isValidFile_tFileInputXML_3 = true;
					org.dom4j.Document doc_tFileInputXML_3 = null;
					java.io.Closeable toClose_tFileInputXML_3 = null;
					try {
						if (filename_tFileInputXML_3 instanceof java.io.InputStream) {
							java.io.InputStream inputStream_tFileInputXML_3 = (java.io.InputStream) filename_tFileInputXML_3;
							toClose_tFileInputXML_3 = inputStream_tFileInputXML_3;
							doc_tFileInputXML_3 = reader_tFileInputXML_3
									.read(inputStream_tFileInputXML_3);
						} else {
							java.io.Reader unicodeReader_tFileInputXML_3 = new UnicodeReader(
									new java.io.FileInputStream(String
											.valueOf(filename_tFileInputXML_3)),
									context.encoding);
							toClose_tFileInputXML_3 = unicodeReader_tFileInputXML_3;
							org.xml.sax.InputSource in_tFileInputXML_3 = new org.xml.sax.InputSource(
									unicodeReader_tFileInputXML_3);
							doc_tFileInputXML_3 = reader_tFileInputXML_3
									.read(in_tFileInputXML_3);
						}
					} catch (java.lang.Exception e) {
						System.err.println(e.getMessage());
						isValidFile_tFileInputXML_3 = false;
					} finally {
						if (toClose_tFileInputXML_3 != null) {
							toClose_tFileInputXML_3.close();
						}
					}
					if (isValidFile_tFileInputXML_3) {
						NameSpaceTool_tFileInputXML_3 nsTool_tFileInputXML_3 = new NameSpaceTool_tFileInputXML_3();
						nsTool_tFileInputXML_3.countNSMap(doc_tFileInputXML_3
								.getRootElement());
						java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_3 = nsTool_tFileInputXML_3.xmlNameSpaceMap;

						org.dom4j.XPath x_tFileInputXML_3 = doc_tFileInputXML_3
								.createXPath(nsTool_tFileInputXML_3
										.addDefaultNSPrefix(
												"/ODM/Study/MetaDataVersion/Protocol/StudyEventRef",
												"/ODM/Study/MetaDataVersion/Protocol/StudyEventRef"));
						x_tFileInputXML_3
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_3);

						java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_3 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tFileInputXML_3
								.selectNodes(doc_tFileInputXML_3);
						XML_API_tFileInputXML_3 xml_api_tFileInputXML_3 = new XML_API_tFileInputXML_3();
						String str_tFileInputXML_3 = "";
						org.dom4j.Node node_tFileInputXML_3 = null;

						// init all mapping xpaths
						org.dom4j.XPath xTmp0_tFileInputXML_3 = org.dom4j.DocumentHelper
								.createXPath(nsTool_tFileInputXML_3
										.addDefaultNSPrefix("@StudyEventOID",
												"/ODM/Study/MetaDataVersion/Protocol/StudyEventRef"));
						xTmp0_tFileInputXML_3
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_3);
						org.dom4j.XPath xTmp1_tFileInputXML_3 = org.dom4j.DocumentHelper
								.createXPath(nsTool_tFileInputXML_3
										.addDefaultNSPrefix("@OrderNumber",
												"/ODM/Study/MetaDataVersion/Protocol/StudyEventRef"));
						xTmp1_tFileInputXML_3
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_3);

						for (org.dom4j.tree.AbstractNode temp_tFileInputXML_3 : nodeList_tFileInputXML_3) {
							nb_line_tFileInputXML_3++;
							row3 = null;
							boolean whetherReject_tFileInputXML_3 = false;
							row3 = new row3Struct();
							try {
								Object obj0_tFileInputXML_3 = xTmp0_tFileInputXML_3
										.evaluate(temp_tFileInputXML_3);
								if (obj0_tFileInputXML_3 == null) {
									node_tFileInputXML_3 = null;
									str_tFileInputXML_3 = "";

								} else if (obj0_tFileInputXML_3 instanceof org.dom4j.Node) {
									node_tFileInputXML_3 = (org.dom4j.Node) obj0_tFileInputXML_3;
									str_tFileInputXML_3 = org.jaxen.function.StringFunction
											.evaluate(
													node_tFileInputXML_3,
													org.jaxen.dom4j.DocumentNavigator
															.getInstance());
								} else if (obj0_tFileInputXML_3 instanceof String
										|| obj0_tFileInputXML_3 instanceof Number) {
									node_tFileInputXML_3 = temp_tFileInputXML_3;
									str_tFileInputXML_3 = String
											.valueOf(obj0_tFileInputXML_3);
								} else if (obj0_tFileInputXML_3 instanceof java.util.List) {
									java.util.List<org.dom4j.Node> nodes_tFileInputXML_3 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_3;
									node_tFileInputXML_3 = nodes_tFileInputXML_3
											.size() > 0 ? nodes_tFileInputXML_3
											.get(0) : null;
									str_tFileInputXML_3 = node_tFileInputXML_3 == null ? ""
											: org.jaxen.function.StringFunction
													.evaluate(
															node_tFileInputXML_3,
															org.jaxen.dom4j.DocumentNavigator
																	.getInstance());
								}
								if (xml_api_tFileInputXML_3
										.isDefNull(node_tFileInputXML_3)) {
									row3.OID = null;
								} else if (xml_api_tFileInputXML_3
										.isEmpty(node_tFileInputXML_3)) {
									row3.OID = "";
								} else if (xml_api_tFileInputXML_3
										.isMissing(node_tFileInputXML_3)) {
									row3.OID = null;
								} else {
									row3.OID = str_tFileInputXML_3;
								}
								Object obj1_tFileInputXML_3 = xTmp1_tFileInputXML_3
										.evaluate(temp_tFileInputXML_3);
								if (obj1_tFileInputXML_3 == null) {
									node_tFileInputXML_3 = null;
									str_tFileInputXML_3 = "";

								} else if (obj1_tFileInputXML_3 instanceof org.dom4j.Node) {
									node_tFileInputXML_3 = (org.dom4j.Node) obj1_tFileInputXML_3;
									str_tFileInputXML_3 = org.jaxen.function.StringFunction
											.evaluate(
													node_tFileInputXML_3,
													org.jaxen.dom4j.DocumentNavigator
															.getInstance());
								} else if (obj1_tFileInputXML_3 instanceof String
										|| obj1_tFileInputXML_3 instanceof Number) {
									node_tFileInputXML_3 = temp_tFileInputXML_3;
									str_tFileInputXML_3 = String
											.valueOf(obj1_tFileInputXML_3);
								} else if (obj1_tFileInputXML_3 instanceof java.util.List) {
									java.util.List<org.dom4j.Node> nodes_tFileInputXML_3 = (java.util.List<org.dom4j.Node>) obj1_tFileInputXML_3;
									node_tFileInputXML_3 = nodes_tFileInputXML_3
											.size() > 0 ? nodes_tFileInputXML_3
											.get(0) : null;
									str_tFileInputXML_3 = node_tFileInputXML_3 == null ? ""
											: org.jaxen.function.StringFunction
													.evaluate(
															node_tFileInputXML_3,
															org.jaxen.dom4j.DocumentNavigator
																	.getInstance());
								}
								if (xml_api_tFileInputXML_3
										.isDefNull(node_tFileInputXML_3)) {
									row3.order = null;
								} else if (xml_api_tFileInputXML_3
										.isEmpty(node_tFileInputXML_3)) {
									row3.order = "";
								} else if (xml_api_tFileInputXML_3
										.isMissing(node_tFileInputXML_3)) {
									row3.order = null;
								} else {
									row3.order = str_tFileInputXML_3;
								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputXML_3 = true;
								System.err.println(e.getMessage());
								row3 = null;
							}

							if (nb_line_tFileInputXML_3 > 9999) {

								break;
							}

							/**
							 * [tFileInputXML_3 begin ] stop
							 */
							/**
							 * [tFileInputXML_3 main ] start
							 */

							currentComponent = "tFileInputXML_3";

							tos_count_tFileInputXML_3++;

							/**
							 * [tFileInputXML_3 main ] stop
							 */
							// Start of branch "row3"
							if (row3 != null) {

								/**
								 * [tJavaRow_4 main ] start
								 */

								currentComponent = "tJavaRow_4";

								// Code generated according to input schema and
								// output schema
								row21.OID = row3.OID;
								if (row3.order == null) {
									row3.order = "";
								} else {
									while (row3.order.length() < 3) {
										row3.order = "0" + row3.order;
									}
								}
								row21.order = row3.order;

								nb_line_tJavaRow_4++;

								tos_count_tJavaRow_4++;

								/**
								 * [tJavaRow_4 main ] stop
								 */

								/**
								 * [tMap_9 main ] start
								 */

								currentComponent = "tMap_9";

								boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_9 = false;
								boolean mainRowRejected_tMap_9 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row15"
								// /////////////////////////////////////////////

								boolean forceLooprow15 = false;

								row15Struct row15ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_9) { // G_TM_M_020

									tHash_Lookup_row15.lookup(row15HashKey);

									if (!tHash_Lookup_row15.hasNext()) { // G_TM_M_090

										forceLooprow15 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								else { // G 20 - G 21
									forceLooprow15 = true;
								} // G 21

								row15Struct row15 = null;

								while ((tHash_Lookup_row15 != null && tHash_Lookup_row15
										.hasNext()) || forceLooprow15) { // G_TM_M_043

									// CALL close loop of lookup 'row15'

									row15Struct fromLookup_row15 = null;
									row15 = row15Default;

									if (!forceLooprow15) { // G 46

										fromLookup_row15 = tHash_Lookup_row15
												.next();

										if (fromLookup_row15 != null) {
											row15 = fromLookup_row15;
										}

									} // G 46

									forceLooprow15 = false;

									// /////////////////////////////////////////////
									// Starting Lookup Table "row22"
									// /////////////////////////////////////////////

									boolean forceLooprow22 = false;

									row22Struct row22ObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_9) { // G_TM_M_020

										hasCasePrimitiveKeyWithNull_tMap_9 = false;

										row22HashKey.VisitOID = row21.OID;

										row22HashKey.hashCodeDirty = true;

										tHash_Lookup_row22.lookup(row22HashKey);

									} // G_TM_M_020

									if (tHash_Lookup_row22 != null
											&& tHash_Lookup_row22
													.getCount(row22HashKey) > 1) { // G
																					// 071

										// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row22' and it contains more one result from keys :  row22.VisitOID = '"
										// + row22HashKey.VisitOID + "'");
									} // G 071

									row22Struct row22 = null;

									row22Struct fromLookup_row22 = null;
									row22 = row22Default;

									if (tHash_Lookup_row22 != null
											&& tHash_Lookup_row22.hasNext()) { // G
																				// 099

										fromLookup_row22 = tHash_Lookup_row22
												.next();

									} // G 099

									if (fromLookup_row22 != null) {
										row22 = fromLookup_row22;
									}

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
										// ###############################
										// # Output tables

										out8 = null;

										// # Output table : 'out8'
										out8_tmp.StudyID = row15.StudyID;
										out8_tmp.MetaID = row15.MetaID;
										out8_tmp.VisitID = row21.OID;
										out8_tmp.FormID = null;
										out8_tmp.QuestionID = null;
										out8_tmp.ItemID = null;
										out8_tmp.ParentItem = null;
										out8_tmp.Name = row21.order + " "
												+ row22.Name;
										out8_tmp.VisitNo = null;
										out8_tmp.Sequence = null;
										out8_tmp.hidden = null;
										out8_tmp.FormFamily = null;
										out8_tmp.AdditionalData = null;
										out8_tmp.item_Datatype = row15.item_Datatype;
										out8_tmp.HLEVEL = 4;
										out8 = out8_tmp;
										// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_9 = false;

									tos_count_tMap_9++;

									/**
									 * [tMap_9 main ] stop
									 */
									// Start of branch "out8"
									if (out8 != null) {

										/**
										 * [tUniqRow_4 main ] start
										 */

										currentComponent = "tUniqRow_4";

										row10 = null;
										if (out8.StudyID == null) {
											finder_tUniqRow_4.StudyID = null;
										} else {
											finder_tUniqRow_4.StudyID = out8.StudyID
													.toLowerCase();
										}
										if (out8.MetaID == null) {
											finder_tUniqRow_4.MetaID = null;
										} else {
											finder_tUniqRow_4.MetaID = out8.MetaID
													.toLowerCase();
										}
										if (out8.VisitID == null) {
											finder_tUniqRow_4.VisitID = null;
										} else {
											finder_tUniqRow_4.VisitID = out8.VisitID
													.toLowerCase();
										}
										finder_tUniqRow_4.hashCodeDirty = true;
										if (!keystUniqRow_4
												.contains(finder_tUniqRow_4)) {
											KeyStruct_tUniqRow_4 new_tUniqRow_4 = new KeyStruct_tUniqRow_4();

											if (out8.StudyID == null) {
												new_tUniqRow_4.StudyID = null;
											} else {
												new_tUniqRow_4.StudyID = out8.StudyID
														.toLowerCase();
											}
											if (out8.MetaID == null) {
												new_tUniqRow_4.MetaID = null;
											} else {
												new_tUniqRow_4.MetaID = out8.MetaID
														.toLowerCase();
											}
											if (out8.VisitID == null) {
												new_tUniqRow_4.VisitID = null;
											} else {
												new_tUniqRow_4.VisitID = out8.VisitID
														.toLowerCase();
											}

											keystUniqRow_4.add(new_tUniqRow_4);
											if (row10 == null) {
												row10 = new row10Struct();
											}
											row10.StudyID = out8.StudyID;
											row10.MetaID = out8.MetaID;
											row10.VisitID = out8.VisitID;
											row10.FormID = out8.FormID;
											row10.QuestionID = out8.QuestionID;
											row10.ItemID = out8.ItemID;
											row10.ParentItem = out8.ParentItem;
											row10.Name = out8.Name;
											row10.VisitNo = out8.VisitNo;
											row10.Sequence = out8.Sequence;
											row10.hidden = out8.hidden;
											row10.FormFamily = out8.FormFamily;
											row10.AdditionalData = out8.AdditionalData;
											row10.item_Datatype = out8.item_Datatype;
											row10.HLEVEL = out8.HLEVEL;
											nb_uniques_tUniqRow_4++;
										} else {
											nb_duplicates_tUniqRow_4++;
										}

										tos_count_tUniqRow_4++;

										/**
										 * [tUniqRow_4 main ] stop
										 */
										// Start of branch "row10"
										if (row10 != null) {

											/**
											 * [tFileOutputDelimited_13 main ]
											 * start
											 */

											currentComponent = "tFileOutputDelimited_13";

											StringBuilder sb_tFileOutputDelimited_13 = new StringBuilder();

											if (row10.StudyID != null) {

												sb_tFileOutputDelimited_13
														.append(

														row10.StudyID

														);

											}

											sb_tFileOutputDelimited_13
													.append(OUT_DELIM_tFileOutputDelimited_13);

											if (row10.MetaID != null) {

												sb_tFileOutputDelimited_13
														.append(

														row10.MetaID

														);

											}

											sb_tFileOutputDelimited_13
													.append(OUT_DELIM_tFileOutputDelimited_13);

											if (row10.VisitID != null) {

												sb_tFileOutputDelimited_13
														.append(

														row10.VisitID

														);

											}

											sb_tFileOutputDelimited_13
													.append(OUT_DELIM_tFileOutputDelimited_13);

											if (row10.FormID != null) {

												sb_tFileOutputDelimited_13
														.append(

														row10.FormID

														);

											}

											sb_tFileOutputDelimited_13
													.append(OUT_DELIM_tFileOutputDelimited_13);

											if (row10.QuestionID != null) {

												sb_tFileOutputDelimited_13
														.append(

														row10.QuestionID

														);

											}

											sb_tFileOutputDelimited_13
													.append(OUT_DELIM_tFileOutputDelimited_13);

											if (row10.ItemID != null) {

												sb_tFileOutputDelimited_13
														.append(

														row10.ItemID

														);

											}

											sb_tFileOutputDelimited_13
													.append(OUT_DELIM_tFileOutputDelimited_13);

											if (row10.ParentItem != null) {

												sb_tFileOutputDelimited_13
														.append(

														row10.ParentItem

														);

											}

											sb_tFileOutputDelimited_13
													.append(OUT_DELIM_tFileOutputDelimited_13);

											if (row10.Name != null) {

												sb_tFileOutputDelimited_13
														.append(

														row10.Name

														);

											}

											sb_tFileOutputDelimited_13
													.append(OUT_DELIM_tFileOutputDelimited_13);

											if (row10.VisitNo != null) {

												sb_tFileOutputDelimited_13
														.append(

														row10.VisitNo

														);

											}

											sb_tFileOutputDelimited_13
													.append(OUT_DELIM_tFileOutputDelimited_13);

											if (row10.Sequence != null) {

												sb_tFileOutputDelimited_13
														.append(

														row10.Sequence

														);

											}

											sb_tFileOutputDelimited_13
													.append(OUT_DELIM_tFileOutputDelimited_13);

											if (row10.hidden != null) {

												sb_tFileOutputDelimited_13
														.append(

														row10.hidden

														);

											}

											sb_tFileOutputDelimited_13
													.append(OUT_DELIM_tFileOutputDelimited_13);

											if (row10.FormFamily != null) {

												sb_tFileOutputDelimited_13
														.append(

														row10.FormFamily

														);

											}

											sb_tFileOutputDelimited_13
													.append(OUT_DELIM_tFileOutputDelimited_13);

											if (row10.AdditionalData != null) {

												sb_tFileOutputDelimited_13
														.append(

														row10.AdditionalData

														);

											}

											sb_tFileOutputDelimited_13
													.append(OUT_DELIM_tFileOutputDelimited_13);

											if (row10.item_Datatype != null) {

												sb_tFileOutputDelimited_13
														.append(

														row10.item_Datatype

														);

											}

											sb_tFileOutputDelimited_13
													.append(OUT_DELIM_tFileOutputDelimited_13);

											if (row10.HLEVEL != null) {

												sb_tFileOutputDelimited_13
														.append(

														row10.HLEVEL

														);

											}

											sb_tFileOutputDelimited_13
													.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_13);

											nb_line_tFileOutputDelimited_13++;

											outtFileOutputDelimited_13
													.write(sb_tFileOutputDelimited_13
															.toString());

											tos_count_tFileOutputDelimited_13++;

											/**
											 * [tFileOutputDelimited_13 main ]
											 * stop
											 */

										} // End of branch "row10"

									} // End of branch "out8"

								} // close loop of lookup 'row15' // G_TM_M_043

							} // End of branch "row3"

							/**
							 * [tFileInputXML_3 end ] start
							 */

							currentComponent = "tFileInputXML_3";

						}
					}
					globalMap.put("tFileInputXML_3_NB_LINE",
							nb_line_tFileInputXML_3);

					ok_Hash.put("tFileInputXML_3", true);
					end_Hash.put("tFileInputXML_3", System.currentTimeMillis());

					/**
					 * [tFileInputXML_3 end ] stop
					 */

					/**
					 * [tJavaRow_4 end ] start
					 */

					currentComponent = "tJavaRow_4";

					globalMap.put("tJavaRow_4_NB_LINE", nb_line_tJavaRow_4);

					ok_Hash.put("tJavaRow_4", true);
					end_Hash.put("tJavaRow_4", System.currentTimeMillis());

					/**
					 * [tJavaRow_4 end ] stop
					 */

					/**
					 * [tMap_9 end ] start
					 */

					currentComponent = "tMap_9";

					// ###############################
					// # Lookup hashes releasing
					if (tHash_Lookup_row15 != null) {
						tHash_Lookup_row15.endGet();
					}
					globalMap.remove("tHash_Lookup_row15");

					if (tHash_Lookup_row22 != null) {
						tHash_Lookup_row22.endGet();
					}
					globalMap.remove("tHash_Lookup_row22");

					// ###############################

					ok_Hash.put("tMap_9", true);
					end_Hash.put("tMap_9", System.currentTimeMillis());

					/**
					 * [tMap_9 end ] stop
					 */

					/**
					 * [tUniqRow_4 end ] start
					 */

					currentComponent = "tUniqRow_4";

					globalMap.put("tUniqRow_4_NB_UNIQUES",
							nb_uniques_tUniqRow_4);
					globalMap.put("tUniqRow_4_NB_DUPLICATES",
							nb_duplicates_tUniqRow_4);

					ok_Hash.put("tUniqRow_4", true);
					end_Hash.put("tUniqRow_4", System.currentTimeMillis());

					/**
					 * [tUniqRow_4 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_13 end ] start
					 */

					currentComponent = "tFileOutputDelimited_13";

				} finally {
					if (outtFileOutputDelimited_13 != null) {
						outtFileOutputDelimited_13.flush();
						outtFileOutputDelimited_13.close();
					}
					globalMap.put("tFileOutputDelimited_13_NB_LINE",
							nb_line_tFileOutputDelimited_13);
					globalMap.put("tFileOutputDelimited_13_FILE_NAME",
							fileName_tFileOutputDelimited_13);
				} // finally

				ok_Hash.put("tFileOutputDelimited_13", true);
				end_Hash.put("tFileOutputDelimited_13",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_13 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputXML_3:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_7Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		} finally {
			// free memory for "tMap_9"
			globalMap.remove("tHash_Lookup_row15");

			// free memory for "tMap_9"
			globalMap.remove("tHash_Lookup_row22");

		}

		globalMap.put("tFileInputXML_3_SUBPROCESS_STATE", 1);
	}

	public void tJava_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_7 begin ] start
				 */

				ok_Hash.put("tJava_7", false);
				start_Hash.put("tJava_7", System.currentTimeMillis());
				currentComponent = "tJava_7";

				int tos_count_tJava_7 = 0;

				StatusListener.setSubStatus(70.0f, (int) (70.0f) + "%");

				/**
				 * [tJava_7 begin ] stop
				 */
				/**
				 * [tJava_7 main ] start
				 */

				currentComponent = "tJava_7";

				tos_count_tJava_7++;

				/**
				 * [tJava_7 main ] stop
				 */
				/**
				 * [tJava_7 end ] start
				 */

				currentComponent = "tJava_7";

				ok_Hash.put("tJava_7", true);
				end_Hash.put("tJava_7", System.currentTimeMillis());

				/**
				 * [tJava_7 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_7:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputXML_2Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJava_7_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String StudyID;

		public String getStudyID() {
			return this.StudyID;
		}

		public String MetaID;

		public String getMetaID() {
			return this.MetaID;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String QuestionID;

		public String getQuestionID() {
			return this.QuestionID;
		}

		public String ItemID;

		public String getItemID() {
			return this.ItemID;
		}

		public String ParentItem;

		public String getParentItem() {
			return this.ParentItem;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String VisitNo;

		public String getVisitNo() {
			return this.VisitNo;
		}

		public String Sequence;

		public String getSequence() {
			return this.Sequence;
		}

		public String hidden;

		public String getHidden() {
			return this.hidden;
		}

		public String FormFamily;

		public String getFormFamily() {
			return this.FormFamily;
		}

		public String AdditionalData;

		public String getAdditionalData() {
			return this.AdditionalData;
		}

		public String item_Datatype;

		public String getItem_Datatype() {
			return this.item_Datatype;
		}

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.StudyID = readString(dis);

					this.MetaID = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.QuestionID = readString(dis);

					this.ItemID = readString(dis);

					this.ParentItem = readString(dis);

					this.Name = readString(dis);

					this.VisitNo = readString(dis);

					this.Sequence = readString(dis);

					this.hidden = readString(dis);

					this.FormFamily = readString(dis);

					this.AdditionalData = readString(dis);

					this.item_Datatype = readString(dis);

					this.HLEVEL = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.StudyID, dos);

				// String

				writeString(this.MetaID, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.QuestionID, dos);

				// String

				writeString(this.ItemID, dos);

				// String

				writeString(this.ParentItem, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.VisitNo, dos);

				// String

				writeString(this.Sequence, dos);

				// String

				writeString(this.hidden, dos);

				// String

				writeString(this.FormFamily, dos);

				// String

				writeString(this.AdditionalData, dos);

				// String

				writeString(this.item_Datatype, dos);

				// Integer

				writeInteger(this.HLEVEL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("StudyID=" + StudyID);
			sb.append(",MetaID=" + MetaID);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",QuestionID=" + QuestionID);
			sb.append(",ItemID=" + ItemID);
			sb.append(",ParentItem=" + ParentItem);
			sb.append(",Name=" + Name);
			sb.append(",VisitNo=" + VisitNo);
			sb.append(",Sequence=" + Sequence);
			sb.append(",hidden=" + hidden);
			sb.append(",FormFamily=" + FormFamily);
			sb.append(",AdditionalData=" + AdditionalData);
			sb.append(",item_Datatype=" + item_Datatype);
			sb.append(",HLEVEL=" + String.valueOf(HLEVEL));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out9Struct implements
			routines.system.IPersistableRow<out9Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String StudyID;

		public String getStudyID() {
			return this.StudyID;
		}

		public String MetaID;

		public String getMetaID() {
			return this.MetaID;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String QuestionID;

		public String getQuestionID() {
			return this.QuestionID;
		}

		public String ItemID;

		public String getItemID() {
			return this.ItemID;
		}

		public String ParentItem;

		public String getParentItem() {
			return this.ParentItem;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String VisitNo;

		public String getVisitNo() {
			return this.VisitNo;
		}

		public String Sequence;

		public String getSequence() {
			return this.Sequence;
		}

		public String hidden;

		public String getHidden() {
			return this.hidden;
		}

		public String FormFamily;

		public String getFormFamily() {
			return this.FormFamily;
		}

		public String AdditionalData;

		public String getAdditionalData() {
			return this.AdditionalData;
		}

		public String item_Datatype;

		public String getItem_Datatype() {
			return this.item_Datatype;
		}

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.StudyID = readString(dis);

					this.MetaID = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.QuestionID = readString(dis);

					this.ItemID = readString(dis);

					this.ParentItem = readString(dis);

					this.Name = readString(dis);

					this.VisitNo = readString(dis);

					this.Sequence = readString(dis);

					this.hidden = readString(dis);

					this.FormFamily = readString(dis);

					this.AdditionalData = readString(dis);

					this.item_Datatype = readString(dis);

					this.HLEVEL = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.StudyID, dos);

				// String

				writeString(this.MetaID, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.QuestionID, dos);

				// String

				writeString(this.ItemID, dos);

				// String

				writeString(this.ParentItem, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.VisitNo, dos);

				// String

				writeString(this.Sequence, dos);

				// String

				writeString(this.hidden, dos);

				// String

				writeString(this.FormFamily, dos);

				// String

				writeString(this.AdditionalData, dos);

				// String

				writeString(this.item_Datatype, dos);

				// Integer

				writeInteger(this.HLEVEL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("StudyID=" + StudyID);
			sb.append(",MetaID=" + MetaID);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",QuestionID=" + QuestionID);
			sb.append(",ItemID=" + ItemID);
			sb.append(",ParentItem=" + ParentItem);
			sb.append(",Name=" + Name);
			sb.append(",VisitNo=" + VisitNo);
			sb.append(",Sequence=" + Sequence);
			sb.append(",hidden=" + hidden);
			sb.append(",FormFamily=" + FormFamily);
			sb.append(",AdditionalData=" + AdditionalData);
			sb.append(",item_Datatype=" + item_Datatype);
			sb.append(",HLEVEL=" + String.valueOf(HLEVEL));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row17Struct implements
			routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String FormOID;

		public String getFormOID() {
			return this.FormOID;
		}

		public String VisitOID;

		public String getVisitOID() {
			return this.VisitOID;
		}

		public String order;

		public String getOrder() {
			return this.order;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.FormOID = readString(dis);

					this.VisitOID = readString(dis);

					this.order = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FormOID, dos);

				// String

				writeString(this.VisitOID, dos);

				// String

				writeString(this.order, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FormOID=" + FormOID);
			sb.append(",VisitOID=" + VisitOID);
			sb.append(",order=" + order);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class FormsStruct implements
			routines.system.IPersistableRow<FormsStruct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String FormOID;

		public String getFormOID() {
			return this.FormOID;
		}

		public String VisitOID;

		public String getVisitOID() {
			return this.VisitOID;
		}

		public String order;

		public String getOrder() {
			return this.order;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.FormOID = readString(dis);

					this.VisitOID = readString(dis);

					this.order = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FormOID, dos);

				// String

				writeString(this.VisitOID, dos);

				// String

				writeString(this.order, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FormOID=" + FormOID);
			sb.append(",VisitOID=" + VisitOID);
			sb.append(",order=" + order);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(FormsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputXML_2Struct implements
			routines.system.IPersistableRow<after_tFileInputXML_2Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String FormOID;

		public String getFormOID() {
			return this.FormOID;
		}

		public String VisitOID;

		public String getVisitOID() {
			return this.VisitOID;
		}

		public String order;

		public String getOrder() {
			return this.order;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.FormOID = readString(dis);

					this.VisitOID = readString(dis);

					this.order = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FormOID, dos);

				// String

				writeString(this.VisitOID, dos);

				// String

				writeString(this.order, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FormOID=" + FormOID);
			sb.append(",VisitOID=" + VisitOID);
			sb.append(",order=" + order);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputXML_2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputXML_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_10Process(globalMap);
				tFileInputDelimited_12Process(globalMap);

				FormsStruct Forms = new FormsStruct();
				row17Struct row17 = new row17Struct();
				out9Struct out9 = new out9Struct();
				row7Struct row7 = new row7Struct();

				/**
				 * [tFileOutputDelimited_16 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_16", false);
				start_Hash.put("tFileOutputDelimited_16",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_16";

				int tos_count_tFileOutputDelimited_16 = 0;

				String fileName_tFileOutputDelimited_16 = "";
				fileName_tFileOutputDelimited_16 = (new java.io.File(
						((String) globalMap
								.get("tCreateTemporaryFile_6_FILEPATH"))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_16 = null;
				String extension_tFileOutputDelimited_16 = null;
				String directory_tFileOutputDelimited_16 = null;
				if ((fileName_tFileOutputDelimited_16.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_16.lastIndexOf(".") < fileName_tFileOutputDelimited_16
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16;
						extension_tFileOutputDelimited_16 = "";
					} else {
						fullName_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16
								.substring(0, fileName_tFileOutputDelimited_16
										.lastIndexOf("."));
						extension_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16
								.substring(fileName_tFileOutputDelimited_16
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16
							.substring(0, fileName_tFileOutputDelimited_16
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_16.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16
								.substring(0, fileName_tFileOutputDelimited_16
										.lastIndexOf("."));
						extension_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16
								.substring(fileName_tFileOutputDelimited_16
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16;
						extension_tFileOutputDelimited_16 = "";
					}
					directory_tFileOutputDelimited_16 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_16 = true;
				java.io.File filetFileOutputDelimited_16 = new java.io.File(
						fileName_tFileOutputDelimited_16);
				globalMap.put("tFileOutputDelimited_16_FILE_NAME",
						fileName_tFileOutputDelimited_16);

				int nb_line_tFileOutputDelimited_16 = 0;
				int splitEvery_tFileOutputDelimited_16 = 1000;
				int splitedFileNo_tFileOutputDelimited_16 = 0;
				int currentRow_tFileOutputDelimited_16 = 0;

				final String OUT_DELIM_tFileOutputDelimited_16 = /**
				 * Start field
				 * tFileOutputDelimited_16:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_16:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_16 = /**
				 * Start
				 * field tFileOutputDelimited_16:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_16:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_16 != null
						&& directory_tFileOutputDelimited_16.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_16 = new java.io.File(
							directory_tFileOutputDelimited_16);
					if (!dir_tFileOutputDelimited_16.exists()) {
						dir_tFileOutputDelimited_16.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_16 = null;
				try {
					outtFileOutputDelimited_16 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_16,
											false), "ISO-8859-15"));

					/**
					 * [tFileOutputDelimited_16 begin ] stop
					 */

					/**
					 * [tUniqRow_1 begin ] start
					 */

					ok_Hash.put("tUniqRow_1", false);
					start_Hash.put("tUniqRow_1", System.currentTimeMillis());
					currentComponent = "tUniqRow_1";

					int tos_count_tUniqRow_1 = 0;

					class KeyStruct_tUniqRow_1 {

						private static final int DEFAULT_HASHCODE = 1;
						private static final int PRIME = 31;
						private int hashCode = DEFAULT_HASHCODE;
						public boolean hashCodeDirty = true;

						String StudyID;
						String MetaID;
						String VisitID;
						String FormID;

						@Override
						public int hashCode() {
							if (this.hashCodeDirty) {
								final int prime = PRIME;
								int result = DEFAULT_HASHCODE;

								result = prime
										* result
										+ ((this.StudyID == null) ? 0
												: this.StudyID.hashCode());

								result = prime
										* result
										+ ((this.MetaID == null) ? 0
												: this.MetaID.hashCode());

								result = prime
										* result
										+ ((this.VisitID == null) ? 0
												: this.VisitID.hashCode());

								result = prime
										* result
										+ ((this.FormID == null) ? 0
												: this.FormID.hashCode());

								this.hashCode = result;
								this.hashCodeDirty = false;
							}
							return this.hashCode;
						}

						@Override
						public boolean equals(Object obj) {
							if (this == obj)
								return true;
							if (obj == null)
								return false;
							if (getClass() != obj.getClass())
								return false;
							final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;

							if (this.StudyID == null) {
								if (other.StudyID != null)
									return false;
							} else if (!this.StudyID.equals(other.StudyID))
								return false;

							if (this.MetaID == null) {
								if (other.MetaID != null)
									return false;
							} else if (!this.MetaID.equals(other.MetaID))
								return false;

							if (this.VisitID == null) {
								if (other.VisitID != null)
									return false;
							} else if (!this.VisitID.equals(other.VisitID))
								return false;

							if (this.FormID == null) {
								if (other.FormID != null)
									return false;
							} else if (!this.FormID.equals(other.FormID))
								return false;

							return true;
						}

					}

					int nb_uniques_tUniqRow_1 = 0;
					int nb_duplicates_tUniqRow_1 = 0;
					KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
					java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>();

					/**
					 * [tUniqRow_1 begin ] stop
					 */

					/**
					 * [tMap_12 begin ] start
					 */

					ok_Hash.put("tMap_12", false);
					start_Hash.put("tMap_12", System.currentTimeMillis());
					currentComponent = "tMap_12";

					int tos_count_tMap_12 = 0;

					// ###############################
					// # Lookup's keys initialization

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Temp3VisitStruct> tHash_Lookup_Temp3Visit = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Temp3VisitStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Temp3VisitStruct>) globalMap
							.get("tHash_Lookup_Temp3Visit"));

					Temp3VisitStruct Temp3VisitHashKey = new Temp3VisitStruct();
					Temp3VisitStruct Temp3VisitDefault = new Temp3VisitStruct();

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<FormNamesStruct> tHash_Lookup_FormNames = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<FormNamesStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<FormNamesStruct>) globalMap
							.get("tHash_Lookup_FormNames"));

					FormNamesStruct FormNamesHashKey = new FormNamesStruct();
					FormNamesStruct FormNamesDefault = new FormNamesStruct();
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_12__Struct {
					}
					Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					out9Struct out9_tmp = new out9Struct();
					// ###############################

					/**
					 * [tMap_12 begin ] stop
					 */

					/**
					 * [tJavaRow_3 begin ] start
					 */

					ok_Hash.put("tJavaRow_3", false);
					start_Hash.put("tJavaRow_3", System.currentTimeMillis());
					currentComponent = "tJavaRow_3";

					int tos_count_tJavaRow_3 = 0;

					int nb_line_tJavaRow_3 = 0;

					/**
					 * [tJavaRow_3 begin ] stop
					 */

					/**
					 * [tFileInputXML_2 begin ] start
					 */

					ok_Hash.put("tFileInputXML_2", false);
					start_Hash.put("tFileInputXML_2",
							System.currentTimeMillis());
					currentComponent = "tFileInputXML_2";

					int tos_count_tFileInputXML_2 = 0;

					int nb_line_tFileInputXML_2 = 0;

					class IgnoreDTDEntityResolver_tFileInputXML_2 implements
							org.xml.sax.EntityResolver {

						public org.xml.sax.InputSource resolveEntity(
								String publicId, String systemId)
								throws org.xml.sax.SAXException,
								java.io.IOException {
							return new org.xml.sax.InputSource(
									new java.io.ByteArrayInputStream(
											"<?xml version='1.0' encoding='UTF-8'?>"
													.getBytes()));
						}

					}
					String os_tFileInputXML_2 = System.getProperty("os.name")
							.toLowerCase();
					boolean isWindows_tFileInputXML_2 = false;
					if (os_tFileInputXML_2.indexOf("windows") > -1
							|| os_tFileInputXML_2.indexOf("nt") > -1) {
						isWindows_tFileInputXML_2 = true;
					}
					class NameSpaceTool_tFileInputXML_2 {

						public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

						private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

						public void countNSMap(org.dom4j.Element el) {
							for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
									.declaredNamespaces()) {
								if (ns.getPrefix().trim().length() == 0) {
									xmlNameSpaceMap.put(
											"pre" + defualtNSPath.size(),
											ns.getURI());
									String path = "";
									org.dom4j.Element elTmp = el;
									while (elTmp != null) {
										if (elTmp.getNamespacePrefix() != null
												&& elTmp.getNamespacePrefix()
														.length() > 0) {
											path = "/"
													+ elTmp.getNamespacePrefix()
													+ ":" + elTmp.getName()
													+ path;
										} else {
											path = "/" + elTmp.getName() + path;
										}
										elTmp = elTmp.getParent();
									}
									defualtNSPath.add(path);
								} else {
									xmlNameSpaceMap.put(ns.getPrefix(),
											ns.getURI());
								}

							}
							for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
									.elements()) {
								countNSMap(e);
							}
						}

						public String addDefaultNSPrefix(String path,
								String loopPath) {
							if (defualtNSPath.size() > 0) {
								String fullPath = loopPath;
								if (!path.equals(fullPath)) {
									for (String tmp : path.split("/")) {
										if (("..").equals(tmp)) {
											fullPath = fullPath.substring(0,
													fullPath.lastIndexOf("/"));
										} else {
											fullPath += "/" + tmp;
										}
									}
								}
								int size = fullPath.split("/").length - 1;
								if (size < 0) {
									return fullPath;
								}
								int[] indexs = new int[size];
								java.util.Arrays.fill(indexs, -1);
								int length = 0;
								for (int i = 0; i < defualtNSPath.size(); i++) {
									if (defualtNSPath.get(i).length() > length
											&& fullPath
													.startsWith(defualtNSPath
															.get(i))) {
										java.util.Arrays
												.fill(indexs,
														defualtNSPath.get(i)
																.split("/").length - 2,
														indexs.length, i);
										length = defualtNSPath.get(i).length();
									}
								}

								StringBuilder newPath = new StringBuilder();
								String[] pathStrs = path.split("/");
								for (int i = 0; i < pathStrs.length; i++) {
									String tmp = pathStrs[i];
									if (newPath.length() > 0) {
										newPath.append("/");
									}
									if (tmp.length() > 0
											&& tmp.indexOf(":") == -1
											&& tmp.indexOf(".") == -1 /*
																	 * &&
																	 * tmp.indexOf
																	 * ("@") ==
																	 * -1
																	 */) {
										int index = indexs[i + indexs.length
												- pathStrs.length];
										if (index >= 0) {
											// ==== add by wliu to support both
											// filter and functions==
											if (tmp.indexOf("[") > 0
													&& tmp.indexOf("]") > tmp
															.indexOf("[")) {// include
																			// filter
												String tmpStr = replaceElementWithNS(
														tmp, "pre" + index
																+ ":");
												newPath.append(tmpStr);
											} else {
												if (tmp.indexOf("@") != -1
														|| tmp.indexOf("(") < tmp
																.indexOf(")")) { // include
																					// attribute
													newPath.append(tmp);
												} else {
													// ==add end=======
													newPath.append("pre")
															.append(index)
															.append(":")
															.append(tmp);
												}
											}
										} else {
											newPath.append(tmp);
										}
									} else {
										newPath.append(tmp);
									}
								}
								return newPath.toString();
							}
							return path;
						}

						private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
						private java.util.regex.Pattern pattern = java.util.regex.Pattern
								.compile(matches);

						private String replaceElementWithNS(String global,
								String pre) {

							java.util.regex.Matcher match = pattern
									.matcher(global);
							StringBuffer sb = new StringBuffer();
							match.reset();
							while (match.find()) {
								String group = match.group();
								String tmp = "";
								if (group.toLowerCase().matches(
										"\\b(div|mod|and|or)\\b.*")
										|| group.matches("@.*")) {
									tmp = group;
								} else {
									tmp = tmp + pre + group;
								}
								match.appendReplacement(sb, tmp);
							}
							match.appendTail(sb);

							return sb.toString();
						}

					}

					class XML_API_tFileInputXML_2 {
						public boolean isDefNull(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							if (node != null
									&& node instanceof org.dom4j.Element) {
								org.dom4j.Attribute attri = ((org.dom4j.Element) node)
										.attribute("nil");
								if (attri != null
										&& ("true").equals(attri.getText())) {
									return true;
								}
							}
							return false;
						}

						public boolean isMissing(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							return node == null ? true : false;
						}

						public boolean isEmpty(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							if (node != null) {
								return node.getText().length() == 0;
							}
							return false;
						}
					}

					org.dom4j.io.SAXReader reader_tFileInputXML_2 = new org.dom4j.io.SAXReader();
					reader_tFileInputXML_2
							.setEntityResolver(new IgnoreDTDEntityResolver_tFileInputXML_2());
					Object filename_tFileInputXML_2 = null;
					try {
						filename_tFileInputXML_2 = context.currentFile;
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}
					if (filename_tFileInputXML_2 != null
							&& filename_tFileInputXML_2 instanceof String
							&& filename_tFileInputXML_2.toString().startsWith(
									"//")) {
						if (!isWindows_tFileInputXML_2) {
							filename_tFileInputXML_2 = filename_tFileInputXML_2
									.toString().replaceFirst("//", "/");
						}
					}

					boolean isValidFile_tFileInputXML_2 = true;
					org.dom4j.Document doc_tFileInputXML_2 = null;
					java.io.Closeable toClose_tFileInputXML_2 = null;
					try {
						if (filename_tFileInputXML_2 instanceof java.io.InputStream) {
							java.io.InputStream inputStream_tFileInputXML_2 = (java.io.InputStream) filename_tFileInputXML_2;
							toClose_tFileInputXML_2 = inputStream_tFileInputXML_2;
							doc_tFileInputXML_2 = reader_tFileInputXML_2
									.read(inputStream_tFileInputXML_2);
						} else {
							java.io.Reader unicodeReader_tFileInputXML_2 = new UnicodeReader(
									new java.io.FileInputStream(String
											.valueOf(filename_tFileInputXML_2)),
									context.encoding);
							toClose_tFileInputXML_2 = unicodeReader_tFileInputXML_2;
							org.xml.sax.InputSource in_tFileInputXML_2 = new org.xml.sax.InputSource(
									unicodeReader_tFileInputXML_2);
							doc_tFileInputXML_2 = reader_tFileInputXML_2
									.read(in_tFileInputXML_2);
						}
					} catch (java.lang.Exception e) {
						System.err.println(e.getMessage());
						isValidFile_tFileInputXML_2 = false;
					} finally {
						if (toClose_tFileInputXML_2 != null) {
							toClose_tFileInputXML_2.close();
						}
					}
					if (isValidFile_tFileInputXML_2) {
						NameSpaceTool_tFileInputXML_2 nsTool_tFileInputXML_2 = new NameSpaceTool_tFileInputXML_2();
						nsTool_tFileInputXML_2.countNSMap(doc_tFileInputXML_2
								.getRootElement());
						java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_2 = nsTool_tFileInputXML_2.xmlNameSpaceMap;

						org.dom4j.XPath x_tFileInputXML_2 = doc_tFileInputXML_2
								.createXPath(nsTool_tFileInputXML_2
										.addDefaultNSPrefix(
												"/ODM/Study/MetaDataVersion/StudyEventDef/FormRef",
												"/ODM/Study/MetaDataVersion/StudyEventDef/FormRef"));
						x_tFileInputXML_2
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_2);

						java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_2 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tFileInputXML_2
								.selectNodes(doc_tFileInputXML_2);
						XML_API_tFileInputXML_2 xml_api_tFileInputXML_2 = new XML_API_tFileInputXML_2();
						String str_tFileInputXML_2 = "";
						org.dom4j.Node node_tFileInputXML_2 = null;

						// init all mapping xpaths
						org.dom4j.XPath xTmp0_tFileInputXML_2 = org.dom4j.DocumentHelper
								.createXPath(nsTool_tFileInputXML_2
										.addDefaultNSPrefix("@FormOID",
												"/ODM/Study/MetaDataVersion/StudyEventDef/FormRef"));
						xTmp0_tFileInputXML_2
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_2);
						org.dom4j.XPath xTmp1_tFileInputXML_2 = org.dom4j.DocumentHelper
								.createXPath(nsTool_tFileInputXML_2
										.addDefaultNSPrefix("../@OID",
												"/ODM/Study/MetaDataVersion/StudyEventDef/FormRef"));
						xTmp1_tFileInputXML_2
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_2);
						org.dom4j.XPath xTmp2_tFileInputXML_2 = org.dom4j.DocumentHelper
								.createXPath(nsTool_tFileInputXML_2
										.addDefaultNSPrefix("@OrderNumber",
												"/ODM/Study/MetaDataVersion/StudyEventDef/FormRef"));
						xTmp2_tFileInputXML_2
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_2);

						for (org.dom4j.tree.AbstractNode temp_tFileInputXML_2 : nodeList_tFileInputXML_2) {
							nb_line_tFileInputXML_2++;
							Forms = null;
							boolean whetherReject_tFileInputXML_2 = false;
							Forms = new FormsStruct();
							try {
								Object obj0_tFileInputXML_2 = xTmp0_tFileInputXML_2
										.evaluate(temp_tFileInputXML_2);
								if (obj0_tFileInputXML_2 == null) {
									node_tFileInputXML_2 = null;
									str_tFileInputXML_2 = "";

								} else if (obj0_tFileInputXML_2 instanceof org.dom4j.Node) {
									node_tFileInputXML_2 = (org.dom4j.Node) obj0_tFileInputXML_2;
									str_tFileInputXML_2 = org.jaxen.function.StringFunction
											.evaluate(
													node_tFileInputXML_2,
													org.jaxen.dom4j.DocumentNavigator
															.getInstance());
								} else if (obj0_tFileInputXML_2 instanceof String
										|| obj0_tFileInputXML_2 instanceof Number) {
									node_tFileInputXML_2 = temp_tFileInputXML_2;
									str_tFileInputXML_2 = String
											.valueOf(obj0_tFileInputXML_2);
								} else if (obj0_tFileInputXML_2 instanceof java.util.List) {
									java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_2;
									node_tFileInputXML_2 = nodes_tFileInputXML_2
											.size() > 0 ? nodes_tFileInputXML_2
											.get(0) : null;
									str_tFileInputXML_2 = node_tFileInputXML_2 == null ? ""
											: org.jaxen.function.StringFunction
													.evaluate(
															node_tFileInputXML_2,
															org.jaxen.dom4j.DocumentNavigator
																	.getInstance());
								}
								if (xml_api_tFileInputXML_2
										.isDefNull(node_tFileInputXML_2)) {
									Forms.FormOID = null;
								} else if (xml_api_tFileInputXML_2
										.isEmpty(node_tFileInputXML_2)) {
									Forms.FormOID = "";
								} else if (xml_api_tFileInputXML_2
										.isMissing(node_tFileInputXML_2)) {
									Forms.FormOID = null;
								} else {
									Forms.FormOID = str_tFileInputXML_2;
								}
								Object obj1_tFileInputXML_2 = xTmp1_tFileInputXML_2
										.evaluate(temp_tFileInputXML_2);
								if (obj1_tFileInputXML_2 == null) {
									node_tFileInputXML_2 = null;
									str_tFileInputXML_2 = "";

								} else if (obj1_tFileInputXML_2 instanceof org.dom4j.Node) {
									node_tFileInputXML_2 = (org.dom4j.Node) obj1_tFileInputXML_2;
									str_tFileInputXML_2 = org.jaxen.function.StringFunction
											.evaluate(
													node_tFileInputXML_2,
													org.jaxen.dom4j.DocumentNavigator
															.getInstance());
								} else if (obj1_tFileInputXML_2 instanceof String
										|| obj1_tFileInputXML_2 instanceof Number) {
									node_tFileInputXML_2 = temp_tFileInputXML_2;
									str_tFileInputXML_2 = String
											.valueOf(obj1_tFileInputXML_2);
								} else if (obj1_tFileInputXML_2 instanceof java.util.List) {
									java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>) obj1_tFileInputXML_2;
									node_tFileInputXML_2 = nodes_tFileInputXML_2
											.size() > 0 ? nodes_tFileInputXML_2
											.get(0) : null;
									str_tFileInputXML_2 = node_tFileInputXML_2 == null ? ""
											: org.jaxen.function.StringFunction
													.evaluate(
															node_tFileInputXML_2,
															org.jaxen.dom4j.DocumentNavigator
																	.getInstance());
								}
								if (xml_api_tFileInputXML_2
										.isDefNull(node_tFileInputXML_2)) {
									Forms.VisitOID = null;
								} else if (xml_api_tFileInputXML_2
										.isEmpty(node_tFileInputXML_2)) {
									Forms.VisitOID = "";
								} else if (xml_api_tFileInputXML_2
										.isMissing(node_tFileInputXML_2)) {
									Forms.VisitOID = null;
								} else {
									Forms.VisitOID = str_tFileInputXML_2;
								}
								Object obj2_tFileInputXML_2 = xTmp2_tFileInputXML_2
										.evaluate(temp_tFileInputXML_2);
								if (obj2_tFileInputXML_2 == null) {
									node_tFileInputXML_2 = null;
									str_tFileInputXML_2 = "";

								} else if (obj2_tFileInputXML_2 instanceof org.dom4j.Node) {
									node_tFileInputXML_2 = (org.dom4j.Node) obj2_tFileInputXML_2;
									str_tFileInputXML_2 = org.jaxen.function.StringFunction
											.evaluate(
													node_tFileInputXML_2,
													org.jaxen.dom4j.DocumentNavigator
															.getInstance());
								} else if (obj2_tFileInputXML_2 instanceof String
										|| obj2_tFileInputXML_2 instanceof Number) {
									node_tFileInputXML_2 = temp_tFileInputXML_2;
									str_tFileInputXML_2 = String
											.valueOf(obj2_tFileInputXML_2);
								} else if (obj2_tFileInputXML_2 instanceof java.util.List) {
									java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>) obj2_tFileInputXML_2;
									node_tFileInputXML_2 = nodes_tFileInputXML_2
											.size() > 0 ? nodes_tFileInputXML_2
											.get(0) : null;
									str_tFileInputXML_2 = node_tFileInputXML_2 == null ? ""
											: org.jaxen.function.StringFunction
													.evaluate(
															node_tFileInputXML_2,
															org.jaxen.dom4j.DocumentNavigator
																	.getInstance());
								}
								if (xml_api_tFileInputXML_2
										.isDefNull(node_tFileInputXML_2)) {
									Forms.order = null;
								} else if (xml_api_tFileInputXML_2
										.isEmpty(node_tFileInputXML_2)) {
									Forms.order = "";
								} else if (xml_api_tFileInputXML_2
										.isMissing(node_tFileInputXML_2)) {
									Forms.order = null;
								} else {
									Forms.order = str_tFileInputXML_2;
								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputXML_2 = true;
								System.err.println(e.getMessage());
								Forms = null;
							}

							/**
							 * [tFileInputXML_2 begin ] stop
							 */
							/**
							 * [tFileInputXML_2 main ] start
							 */

							currentComponent = "tFileInputXML_2";

							tos_count_tFileInputXML_2++;

							/**
							 * [tFileInputXML_2 main ] stop
							 */
							// Start of branch "Forms"
							if (Forms != null) {

								/**
								 * [tJavaRow_3 main ] start
								 */

								currentComponent = "tJavaRow_3";

								// Code generated according to input schema and
								// output schema
								row17.FormOID = Forms.FormOID;
								row17.VisitOID = Forms.VisitOID;
								if (Forms.order == null) {
									Forms.order = "";
								} else {
									while (Forms.order.length() < 3) {
										Forms.order = "0" + Forms.order;
									}
								}
								row17.order = Forms.order;

								nb_line_tJavaRow_3++;

								tos_count_tJavaRow_3++;

								/**
								 * [tJavaRow_3 main ] stop
								 */

								/**
								 * [tMap_12 main ] start
								 */

								currentComponent = "tMap_12";

								boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_12 = false;
								boolean mainRowRejected_tMap_12 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "Temp3Visit"
								// /////////////////////////////////////////////

								boolean forceLoopTemp3Visit = false;

								Temp3VisitStruct Temp3VisitObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_12) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_12 = false;

									Temp3VisitHashKey.VisitID = row17.VisitOID;

									Temp3VisitHashKey.hashCodeDirty = true;

									tHash_Lookup_Temp3Visit
											.lookup(Temp3VisitHashKey);

									if (!tHash_Lookup_Temp3Visit.hasNext()) { // G_TM_M_090

										forceLoopTemp3Visit = true;

									} // G_TM_M_090

								} // G_TM_M_020

								else { // G 20 - G 21
									forceLoopTemp3Visit = true;
								} // G 21

								Temp3VisitStruct Temp3Visit = null;

								while ((tHash_Lookup_Temp3Visit != null && tHash_Lookup_Temp3Visit
										.hasNext()) || forceLoopTemp3Visit) { // G_TM_M_043

									// CALL close loop of lookup 'Temp3Visit'

									Temp3VisitStruct fromLookup_Temp3Visit = null;
									Temp3Visit = Temp3VisitDefault;

									if (!forceLoopTemp3Visit) { // G 46

										fromLookup_Temp3Visit = tHash_Lookup_Temp3Visit
												.next();

										if (fromLookup_Temp3Visit != null) {
											Temp3Visit = fromLookup_Temp3Visit;
										}

									} // G 46

									forceLoopTemp3Visit = false;

									// /////////////////////////////////////////////
									// Starting Lookup Table "FormNames"
									// /////////////////////////////////////////////

									boolean forceLoopFormNames = false;

									FormNamesStruct FormNamesObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_12) { // G_TM_M_020

										hasCasePrimitiveKeyWithNull_tMap_12 = false;

										FormNamesHashKey.FormOID = row17.FormOID;

										FormNamesHashKey.hashCodeDirty = true;

										tHash_Lookup_FormNames
												.lookup(FormNamesHashKey);

									} // G_TM_M_020

									if (tHash_Lookup_FormNames != null
											&& tHash_Lookup_FormNames
													.getCount(FormNamesHashKey) > 1) { // G
																						// 071

										// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'FormNames' and it contains more one result from keys :  FormNames.FormOID = '"
										// + FormNamesHashKey.FormOID + "'");
									} // G 071

									FormNamesStruct FormNames = null;

									FormNamesStruct fromLookup_FormNames = null;
									FormNames = FormNamesDefault;

									if (tHash_Lookup_FormNames != null
											&& tHash_Lookup_FormNames.hasNext()) { // G
																					// 099

										fromLookup_FormNames = tHash_Lookup_FormNames
												.next();

									} // G 099

									if (fromLookup_FormNames != null) {
										FormNames = fromLookup_FormNames;
									}

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
										// ###############################
										// # Output tables

										out9 = null;

										// # Output table : 'out9'
										out9_tmp.StudyID = Temp3Visit.StudyID;
										out9_tmp.MetaID = Temp3Visit.MetaID;
										out9_tmp.VisitID = Temp3Visit.VisitID;
										out9_tmp.FormID = row17.FormOID;
										out9_tmp.QuestionID = Temp3Visit.QuestionID;
										out9_tmp.ItemID = Temp3Visit.ItemID;
										out9_tmp.ParentItem = Temp3Visit.ParentItem;
										out9_tmp.Name = row17.order + " "
												+ FormNames.Name;
										out9_tmp.VisitNo = Temp3Visit.VisitNo;
										out9_tmp.Sequence = Temp3Visit.Sequence;
										out9_tmp.hidden = Temp3Visit.hidden;
										out9_tmp.FormFamily = Temp3Visit.FormFamily;
										out9_tmp.AdditionalData = Temp3Visit.AdditionalData;
										out9_tmp.item_Datatype = Temp3Visit.item_Datatype;
										out9_tmp.HLEVEL = 5;
										out9 = out9_tmp;
										// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_12 = false;

									tos_count_tMap_12++;

									/**
									 * [tMap_12 main ] stop
									 */
									// Start of branch "out9"
									if (out9 != null) {

										/**
										 * [tUniqRow_1 main ] start
										 */

										currentComponent = "tUniqRow_1";

										row7 = null;
										if (out9.StudyID == null) {
											finder_tUniqRow_1.StudyID = null;
										} else {
											finder_tUniqRow_1.StudyID = out9.StudyID
													.toLowerCase();
										}
										if (out9.MetaID == null) {
											finder_tUniqRow_1.MetaID = null;
										} else {
											finder_tUniqRow_1.MetaID = out9.MetaID
													.toLowerCase();
										}
										if (out9.VisitID == null) {
											finder_tUniqRow_1.VisitID = null;
										} else {
											finder_tUniqRow_1.VisitID = out9.VisitID
													.toLowerCase();
										}
										if (out9.FormID == null) {
											finder_tUniqRow_1.FormID = null;
										} else {
											finder_tUniqRow_1.FormID = out9.FormID
													.toLowerCase();
										}
										finder_tUniqRow_1.hashCodeDirty = true;
										if (!keystUniqRow_1
												.contains(finder_tUniqRow_1)) {
											KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

											if (out9.StudyID == null) {
												new_tUniqRow_1.StudyID = null;
											} else {
												new_tUniqRow_1.StudyID = out9.StudyID
														.toLowerCase();
											}
											if (out9.MetaID == null) {
												new_tUniqRow_1.MetaID = null;
											} else {
												new_tUniqRow_1.MetaID = out9.MetaID
														.toLowerCase();
											}
											if (out9.VisitID == null) {
												new_tUniqRow_1.VisitID = null;
											} else {
												new_tUniqRow_1.VisitID = out9.VisitID
														.toLowerCase();
											}
											if (out9.FormID == null) {
												new_tUniqRow_1.FormID = null;
											} else {
												new_tUniqRow_1.FormID = out9.FormID
														.toLowerCase();
											}

											keystUniqRow_1.add(new_tUniqRow_1);
											if (row7 == null) {
												row7 = new row7Struct();
											}
											row7.StudyID = out9.StudyID;
											row7.MetaID = out9.MetaID;
											row7.VisitID = out9.VisitID;
											row7.FormID = out9.FormID;
											row7.QuestionID = out9.QuestionID;
											row7.ItemID = out9.ItemID;
											row7.ParentItem = out9.ParentItem;
											row7.Name = out9.Name;
											row7.VisitNo = out9.VisitNo;
											row7.Sequence = out9.Sequence;
											row7.hidden = out9.hidden;
											row7.FormFamily = out9.FormFamily;
											row7.AdditionalData = out9.AdditionalData;
											row7.item_Datatype = out9.item_Datatype;
											row7.HLEVEL = out9.HLEVEL;
											nb_uniques_tUniqRow_1++;
										} else {
											nb_duplicates_tUniqRow_1++;
										}

										tos_count_tUniqRow_1++;

										/**
										 * [tUniqRow_1 main ] stop
										 */
										// Start of branch "row7"
										if (row7 != null) {

											/**
											 * [tFileOutputDelimited_16 main ]
											 * start
											 */

											currentComponent = "tFileOutputDelimited_16";

											StringBuilder sb_tFileOutputDelimited_16 = new StringBuilder();

											if (row7.StudyID != null) {

												sb_tFileOutputDelimited_16
														.append(

														row7.StudyID

														);

											}

											sb_tFileOutputDelimited_16
													.append(OUT_DELIM_tFileOutputDelimited_16);

											if (row7.MetaID != null) {

												sb_tFileOutputDelimited_16
														.append(

														row7.MetaID

														);

											}

											sb_tFileOutputDelimited_16
													.append(OUT_DELIM_tFileOutputDelimited_16);

											if (row7.VisitID != null) {

												sb_tFileOutputDelimited_16
														.append(

														row7.VisitID

														);

											}

											sb_tFileOutputDelimited_16
													.append(OUT_DELIM_tFileOutputDelimited_16);

											if (row7.FormID != null) {

												sb_tFileOutputDelimited_16
														.append(

														row7.FormID

														);

											}

											sb_tFileOutputDelimited_16
													.append(OUT_DELIM_tFileOutputDelimited_16);

											if (row7.QuestionID != null) {

												sb_tFileOutputDelimited_16
														.append(

														row7.QuestionID

														);

											}

											sb_tFileOutputDelimited_16
													.append(OUT_DELIM_tFileOutputDelimited_16);

											if (row7.ItemID != null) {

												sb_tFileOutputDelimited_16
														.append(

														row7.ItemID

														);

											}

											sb_tFileOutputDelimited_16
													.append(OUT_DELIM_tFileOutputDelimited_16);

											if (row7.ParentItem != null) {

												sb_tFileOutputDelimited_16
														.append(

														row7.ParentItem

														);

											}

											sb_tFileOutputDelimited_16
													.append(OUT_DELIM_tFileOutputDelimited_16);

											if (row7.Name != null) {

												sb_tFileOutputDelimited_16
														.append(

														row7.Name

														);

											}

											sb_tFileOutputDelimited_16
													.append(OUT_DELIM_tFileOutputDelimited_16);

											if (row7.VisitNo != null) {

												sb_tFileOutputDelimited_16
														.append(

														row7.VisitNo

														);

											}

											sb_tFileOutputDelimited_16
													.append(OUT_DELIM_tFileOutputDelimited_16);

											if (row7.Sequence != null) {

												sb_tFileOutputDelimited_16
														.append(

														row7.Sequence

														);

											}

											sb_tFileOutputDelimited_16
													.append(OUT_DELIM_tFileOutputDelimited_16);

											if (row7.hidden != null) {

												sb_tFileOutputDelimited_16
														.append(

														row7.hidden

														);

											}

											sb_tFileOutputDelimited_16
													.append(OUT_DELIM_tFileOutputDelimited_16);

											if (row7.FormFamily != null) {

												sb_tFileOutputDelimited_16
														.append(

														row7.FormFamily

														);

											}

											sb_tFileOutputDelimited_16
													.append(OUT_DELIM_tFileOutputDelimited_16);

											if (row7.AdditionalData != null) {

												sb_tFileOutputDelimited_16
														.append(

														row7.AdditionalData

														);

											}

											sb_tFileOutputDelimited_16
													.append(OUT_DELIM_tFileOutputDelimited_16);

											if (row7.item_Datatype != null) {

												sb_tFileOutputDelimited_16
														.append(

														row7.item_Datatype

														);

											}

											sb_tFileOutputDelimited_16
													.append(OUT_DELIM_tFileOutputDelimited_16);

											if (row7.HLEVEL != null) {

												sb_tFileOutputDelimited_16
														.append(

														row7.HLEVEL

														);

											}

											sb_tFileOutputDelimited_16
													.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_16);

											nb_line_tFileOutputDelimited_16++;

											outtFileOutputDelimited_16
													.write(sb_tFileOutputDelimited_16
															.toString());

											tos_count_tFileOutputDelimited_16++;

											/**
											 * [tFileOutputDelimited_16 main ]
											 * stop
											 */

										} // End of branch "row7"

									} // End of branch "out9"

								} // close loop of lookup 'Temp3Visit' //
									// G_TM_M_043

							} // End of branch "Forms"

							/**
							 * [tFileInputXML_2 end ] start
							 */

							currentComponent = "tFileInputXML_2";

						}
					}
					globalMap.put("tFileInputXML_2_NB_LINE",
							nb_line_tFileInputXML_2);

					ok_Hash.put("tFileInputXML_2", true);
					end_Hash.put("tFileInputXML_2", System.currentTimeMillis());

					/**
					 * [tFileInputXML_2 end ] stop
					 */

					/**
					 * [tJavaRow_3 end ] start
					 */

					currentComponent = "tJavaRow_3";

					globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);

					ok_Hash.put("tJavaRow_3", true);
					end_Hash.put("tJavaRow_3", System.currentTimeMillis());

					/**
					 * [tJavaRow_3 end ] stop
					 */

					/**
					 * [tMap_12 end ] start
					 */

					currentComponent = "tMap_12";

					// ###############################
					// # Lookup hashes releasing
					if (tHash_Lookup_Temp3Visit != null) {
						tHash_Lookup_Temp3Visit.endGet();
					}
					globalMap.remove("tHash_Lookup_Temp3Visit");

					if (tHash_Lookup_FormNames != null) {
						tHash_Lookup_FormNames.endGet();
					}
					globalMap.remove("tHash_Lookup_FormNames");

					// ###############################

					ok_Hash.put("tMap_12", true);
					end_Hash.put("tMap_12", System.currentTimeMillis());

					/**
					 * [tMap_12 end ] stop
					 */

					/**
					 * [tUniqRow_1 end ] start
					 */

					currentComponent = "tUniqRow_1";

					globalMap.put("tUniqRow_1_NB_UNIQUES",
							nb_uniques_tUniqRow_1);
					globalMap.put("tUniqRow_1_NB_DUPLICATES",
							nb_duplicates_tUniqRow_1);

					ok_Hash.put("tUniqRow_1", true);
					end_Hash.put("tUniqRow_1", System.currentTimeMillis());

					/**
					 * [tUniqRow_1 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_16 end ] start
					 */

					currentComponent = "tFileOutputDelimited_16";

				} finally {
					if (outtFileOutputDelimited_16 != null) {
						outtFileOutputDelimited_16.flush();
						outtFileOutputDelimited_16.close();
					}
					globalMap.put("tFileOutputDelimited_16_NB_LINE",
							nb_line_tFileOutputDelimited_16);
					globalMap.put("tFileOutputDelimited_16_FILE_NAME",
							fileName_tFileOutputDelimited_16);
				} // finally

				ok_Hash.put("tFileOutputDelimited_16", true);
				end_Hash.put("tFileOutputDelimited_16",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_16 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputXML_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_8Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		} finally {
			// free memory for "tMap_12"
			globalMap.remove("tHash_Lookup_Temp3Visit");

			// free memory for "tMap_12"
			globalMap.remove("tHash_Lookup_FormNames");

		}

		globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_8Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_8 begin ] start
				 */

				ok_Hash.put("tJava_8", false);
				start_Hash.put("tJava_8", System.currentTimeMillis());
				currentComponent = "tJava_8";

				int tos_count_tJava_8 = 0;

				StatusListener.setSubStatus(80.0f, (int) (80.0f) + "%");

				/**
				 * [tJava_8 begin ] stop
				 */
				/**
				 * [tJava_8 main ] start
				 */

				currentComponent = "tJava_8";

				tos_count_tJava_8++;

				/**
				 * [tJava_8 main ] stop
				 */
				/**
				 * [tJava_8 end ] start
				 */

				currentComponent = "tJava_8";

				ok_Hash.put("tJava_8", true);
				end_Hash.put("tJava_8", System.currentTimeMillis());

				/**
				 * [tJava_8 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_8:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputXML_15Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJava_8_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String StudyID;

		public String getStudyID() {
			return this.StudyID;
		}

		public String MetaID;

		public String getMetaID() {
			return this.MetaID;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String QuestionID;

		public String getQuestionID() {
			return this.QuestionID;
		}

		public String ItemID;

		public String getItemID() {
			return this.ItemID;
		}

		public String ParentItem;

		public String getParentItem() {
			return this.ParentItem;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String VisitNo;

		public String getVisitNo() {
			return this.VisitNo;
		}

		public String Sequence;

		public String getSequence() {
			return this.Sequence;
		}

		public String hidden;

		public String getHidden() {
			return this.hidden;
		}

		public String FormFamily;

		public String getFormFamily() {
			return this.FormFamily;
		}

		public String AdditionalData;

		public String getAdditionalData() {
			return this.AdditionalData;
		}

		public String item_Datatype;

		public String getItem_Datatype() {
			return this.item_Datatype;
		}

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.StudyID = readString(dis);

					this.MetaID = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.QuestionID = readString(dis);

					this.ItemID = readString(dis);

					this.ParentItem = readString(dis);

					this.Name = readString(dis);

					this.VisitNo = readString(dis);

					this.Sequence = readString(dis);

					this.hidden = readString(dis);

					this.FormFamily = readString(dis);

					this.AdditionalData = readString(dis);

					this.item_Datatype = readString(dis);

					this.HLEVEL = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.StudyID, dos);

				// String

				writeString(this.MetaID, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.QuestionID, dos);

				// String

				writeString(this.ItemID, dos);

				// String

				writeString(this.ParentItem, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.VisitNo, dos);

				// String

				writeString(this.Sequence, dos);

				// String

				writeString(this.hidden, dos);

				// String

				writeString(this.FormFamily, dos);

				// String

				writeString(this.AdditionalData, dos);

				// String

				writeString(this.item_Datatype, dos);

				// Integer

				writeInteger(this.HLEVEL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("StudyID=" + StudyID);
			sb.append(",MetaID=" + MetaID);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",QuestionID=" + QuestionID);
			sb.append(",ItemID=" + ItemID);
			sb.append(",ParentItem=" + ParentItem);
			sb.append(",Name=" + Name);
			sb.append(",VisitNo=" + VisitNo);
			sb.append(",Sequence=" + Sequence);
			sb.append(",hidden=" + hidden);
			sb.append(",FormFamily=" + FormFamily);
			sb.append(",AdditionalData=" + AdditionalData);
			sb.append(",item_Datatype=" + item_Datatype);
			sb.append(",HLEVEL=" + String.valueOf(HLEVEL));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out10Struct implements
			routines.system.IPersistableRow<out10Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String StudyID;

		public String getStudyID() {
			return this.StudyID;
		}

		public String MetaID;

		public String getMetaID() {
			return this.MetaID;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String QuestionID;

		public String getQuestionID() {
			return this.QuestionID;
		}

		public String ItemID;

		public String getItemID() {
			return this.ItemID;
		}

		public String ParentItem;

		public String getParentItem() {
			return this.ParentItem;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String VisitNo;

		public String getVisitNo() {
			return this.VisitNo;
		}

		public String Sequence;

		public String getSequence() {
			return this.Sequence;
		}

		public String hidden;

		public String getHidden() {
			return this.hidden;
		}

		public String FormFamily;

		public String getFormFamily() {
			return this.FormFamily;
		}

		public String AdditionalData;

		public String getAdditionalData() {
			return this.AdditionalData;
		}

		public String item_Datatype;

		public String getItem_Datatype() {
			return this.item_Datatype;
		}

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.StudyID = readString(dis);

					this.MetaID = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.QuestionID = readString(dis);

					this.ItemID = readString(dis);

					this.ParentItem = readString(dis);

					this.Name = readString(dis);

					this.VisitNo = readString(dis);

					this.Sequence = readString(dis);

					this.hidden = readString(dis);

					this.FormFamily = readString(dis);

					this.AdditionalData = readString(dis);

					this.item_Datatype = readString(dis);

					this.HLEVEL = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.StudyID, dos);

				// String

				writeString(this.MetaID, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.QuestionID, dos);

				// String

				writeString(this.ItemID, dos);

				// String

				writeString(this.ParentItem, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.VisitNo, dos);

				// String

				writeString(this.Sequence, dos);

				// String

				writeString(this.hidden, dos);

				// String

				writeString(this.FormFamily, dos);

				// String

				writeString(this.AdditionalData, dos);

				// String

				writeString(this.item_Datatype, dos);

				// Integer

				writeInteger(this.HLEVEL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("StudyID=" + StudyID);
			sb.append(",MetaID=" + MetaID);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",QuestionID=" + QuestionID);
			sb.append(",ItemID=" + ItemID);
			sb.append(",ParentItem=" + ParentItem);
			sb.append(",Name=" + Name);
			sb.append(",VisitNo=" + VisitNo);
			sb.append(",Sequence=" + Sequence);
			sb.append(",hidden=" + hidden);
			sb.append(",FormFamily=" + FormFamily);
			sb.append(",AdditionalData=" + AdditionalData);
			sb.append(",item_Datatype=" + item_Datatype);
			sb.append(",HLEVEL=" + String.valueOf(HLEVEL));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String ItemGroupOID;

		public String getItemGroupOID() {
			return this.ItemGroupOID;
		}

		public String FormOID;

		public String getFormOID() {
			return this.FormOID;
		}

		public String hidden;

		public String getHidden() {
			return this.hidden;
		}

		public String order;

		public String getOrder() {
			return this.order;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.ItemGroupOID = readString(dis);

					this.FormOID = readString(dis);

					this.hidden = readString(dis);

					this.order = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ItemGroupOID, dos);

				// String

				writeString(this.FormOID, dos);

				// String

				writeString(this.hidden, dos);

				// String

				writeString(this.order, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ItemGroupOID=" + ItemGroupOID);
			sb.append(",FormOID=" + FormOID);
			sb.append(",hidden=" + hidden);
			sb.append(",order=" + order);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class ItemGroupStruct implements
			routines.system.IPersistableRow<ItemGroupStruct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String ItemGroupOID;

		public String getItemGroupOID() {
			return this.ItemGroupOID;
		}

		public String FormOID;

		public String getFormOID() {
			return this.FormOID;
		}

		public String hidden;

		public String getHidden() {
			return this.hidden;
		}

		public String order;

		public String getOrder() {
			return this.order;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.ItemGroupOID = readString(dis);

					this.FormOID = readString(dis);

					this.hidden = readString(dis);

					this.order = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ItemGroupOID, dos);

				// String

				writeString(this.FormOID, dos);

				// String

				writeString(this.hidden, dos);

				// String

				writeString(this.order, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ItemGroupOID=" + ItemGroupOID);
			sb.append(",FormOID=" + FormOID);
			sb.append(",hidden=" + hidden);
			sb.append(",order=" + order);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ItemGroupStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputXML_15Struct implements
			routines.system.IPersistableRow<after_tFileInputXML_15Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String ItemGroupOID;

		public String getItemGroupOID() {
			return this.ItemGroupOID;
		}

		public String FormOID;

		public String getFormOID() {
			return this.FormOID;
		}

		public String hidden;

		public String getHidden() {
			return this.hidden;
		}

		public String order;

		public String getOrder() {
			return this.order;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.ItemGroupOID = readString(dis);

					this.FormOID = readString(dis);

					this.hidden = readString(dis);

					this.order = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ItemGroupOID, dos);

				// String

				writeString(this.FormOID, dos);

				// String

				writeString(this.hidden, dos);

				// String

				writeString(this.order, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ItemGroupOID=" + ItemGroupOID);
			sb.append(",FormOID=" + FormOID);
			sb.append(",hidden=" + hidden);
			sb.append(",order=" + order);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputXML_15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputXML_15Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputXML_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_13Process(globalMap);
				tFileInputDelimited_14Process(globalMap);

				ItemGroupStruct ItemGroup = new ItemGroupStruct();
				row13Struct row13 = new row13Struct();
				out10Struct out10 = new out10Struct();
				row8Struct row8 = new row8Struct();

				/**
				 * [tFileOutputDelimited_22 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_22", false);
				start_Hash.put("tFileOutputDelimited_22",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_22";

				int tos_count_tFileOutputDelimited_22 = 0;

				String fileName_tFileOutputDelimited_22 = "";
				fileName_tFileOutputDelimited_22 = (new java.io.File(
						((String) globalMap
								.get("tCreateTemporaryFile_7_FILEPATH"))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_22 = null;
				String extension_tFileOutputDelimited_22 = null;
				String directory_tFileOutputDelimited_22 = null;
				if ((fileName_tFileOutputDelimited_22.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_22.lastIndexOf(".") < fileName_tFileOutputDelimited_22
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_22 = fileName_tFileOutputDelimited_22;
						extension_tFileOutputDelimited_22 = "";
					} else {
						fullName_tFileOutputDelimited_22 = fileName_tFileOutputDelimited_22
								.substring(0, fileName_tFileOutputDelimited_22
										.lastIndexOf("."));
						extension_tFileOutputDelimited_22 = fileName_tFileOutputDelimited_22
								.substring(fileName_tFileOutputDelimited_22
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_22 = fileName_tFileOutputDelimited_22
							.substring(0, fileName_tFileOutputDelimited_22
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_22.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_22 = fileName_tFileOutputDelimited_22
								.substring(0, fileName_tFileOutputDelimited_22
										.lastIndexOf("."));
						extension_tFileOutputDelimited_22 = fileName_tFileOutputDelimited_22
								.substring(fileName_tFileOutputDelimited_22
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_22 = fileName_tFileOutputDelimited_22;
						extension_tFileOutputDelimited_22 = "";
					}
					directory_tFileOutputDelimited_22 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_22 = true;
				java.io.File filetFileOutputDelimited_22 = new java.io.File(
						fileName_tFileOutputDelimited_22);
				globalMap.put("tFileOutputDelimited_22_FILE_NAME",
						fileName_tFileOutputDelimited_22);

				int nb_line_tFileOutputDelimited_22 = 0;
				int splitEvery_tFileOutputDelimited_22 = 1000;
				int splitedFileNo_tFileOutputDelimited_22 = 0;
				int currentRow_tFileOutputDelimited_22 = 0;

				final String OUT_DELIM_tFileOutputDelimited_22 = /**
				 * Start field
				 * tFileOutputDelimited_22:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_22:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_22 = /**
				 * Start
				 * field tFileOutputDelimited_22:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_22:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_22 != null
						&& directory_tFileOutputDelimited_22.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_22 = new java.io.File(
							directory_tFileOutputDelimited_22);
					if (!dir_tFileOutputDelimited_22.exists()) {
						dir_tFileOutputDelimited_22.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_22 = null;
				try {
					outtFileOutputDelimited_22 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_22,
											false), "ISO-8859-15"));

					/**
					 * [tFileOutputDelimited_22 begin ] stop
					 */

					/**
					 * [tUniqRow_2 begin ] start
					 */

					ok_Hash.put("tUniqRow_2", false);
					start_Hash.put("tUniqRow_2", System.currentTimeMillis());
					currentComponent = "tUniqRow_2";

					int tos_count_tUniqRow_2 = 0;

					class KeyStruct_tUniqRow_2 {

						private static final int DEFAULT_HASHCODE = 1;
						private static final int PRIME = 31;
						private int hashCode = DEFAULT_HASHCODE;
						public boolean hashCodeDirty = true;

						String StudyID;
						String MetaID;
						String VisitID;
						String FormID;
						String QuestionID;

						@Override
						public int hashCode() {
							if (this.hashCodeDirty) {
								final int prime = PRIME;
								int result = DEFAULT_HASHCODE;

								result = prime
										* result
										+ ((this.StudyID == null) ? 0
												: this.StudyID.hashCode());

								result = prime
										* result
										+ ((this.MetaID == null) ? 0
												: this.MetaID.hashCode());

								result = prime
										* result
										+ ((this.VisitID == null) ? 0
												: this.VisitID.hashCode());

								result = prime
										* result
										+ ((this.FormID == null) ? 0
												: this.FormID.hashCode());

								result = prime
										* result
										+ ((this.QuestionID == null) ? 0
												: this.QuestionID.hashCode());

								this.hashCode = result;
								this.hashCodeDirty = false;
							}
							return this.hashCode;
						}

						@Override
						public boolean equals(Object obj) {
							if (this == obj)
								return true;
							if (obj == null)
								return false;
							if (getClass() != obj.getClass())
								return false;
							final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;

							if (this.StudyID == null) {
								if (other.StudyID != null)
									return false;
							} else if (!this.StudyID.equals(other.StudyID))
								return false;

							if (this.MetaID == null) {
								if (other.MetaID != null)
									return false;
							} else if (!this.MetaID.equals(other.MetaID))
								return false;

							if (this.VisitID == null) {
								if (other.VisitID != null)
									return false;
							} else if (!this.VisitID.equals(other.VisitID))
								return false;

							if (this.FormID == null) {
								if (other.FormID != null)
									return false;
							} else if (!this.FormID.equals(other.FormID))
								return false;

							if (this.QuestionID == null) {
								if (other.QuestionID != null)
									return false;
							} else if (!this.QuestionID
									.equals(other.QuestionID))
								return false;

							return true;
						}

					}

					int nb_uniques_tUniqRow_2 = 0;
					int nb_duplicates_tUniqRow_2 = 0;
					KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
					java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>();

					/**
					 * [tUniqRow_2 begin ] stop
					 */

					/**
					 * [tMap_14 begin ] start
					 */

					ok_Hash.put("tMap_14", false);
					start_Hash.put("tMap_14", System.currentTimeMillis());
					currentComponent = "tMap_14";

					int tos_count_tMap_14 = 0;

					// ###############################
					// # Lookup's keys initialization

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<temp4FormsStruct> tHash_Lookup_temp4Forms = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<temp4FormsStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<temp4FormsStruct>) globalMap
							.get("tHash_Lookup_temp4Forms"));

					temp4FormsStruct temp4FormsHashKey = new temp4FormsStruct();
					temp4FormsStruct temp4FormsDefault = new temp4FormsStruct();

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ItemGroupNamesStruct> tHash_Lookup_ItemGroupNames = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ItemGroupNamesStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ItemGroupNamesStruct>) globalMap
							.get("tHash_Lookup_ItemGroupNames"));

					ItemGroupNamesStruct ItemGroupNamesHashKey = new ItemGroupNamesStruct();
					ItemGroupNamesStruct ItemGroupNamesDefault = new ItemGroupNamesStruct();
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_14__Struct {
					}
					Var__tMap_14__Struct Var__tMap_14 = new Var__tMap_14__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					out10Struct out10_tmp = new out10Struct();
					// ###############################

					/**
					 * [tMap_14 begin ] stop
					 */

					/**
					 * [tJavaRow_1 begin ] start
					 */

					ok_Hash.put("tJavaRow_1", false);
					start_Hash.put("tJavaRow_1", System.currentTimeMillis());
					currentComponent = "tJavaRow_1";

					int tos_count_tJavaRow_1 = 0;

					int nb_line_tJavaRow_1 = 0;

					/**
					 * [tJavaRow_1 begin ] stop
					 */

					/**
					 * [tFileInputXML_15 begin ] start
					 */

					ok_Hash.put("tFileInputXML_15", false);
					start_Hash.put("tFileInputXML_15",
							System.currentTimeMillis());
					currentComponent = "tFileInputXML_15";

					int tos_count_tFileInputXML_15 = 0;

					int nb_line_tFileInputXML_15 = 0;

					class IgnoreDTDEntityResolver_tFileInputXML_15 implements
							org.xml.sax.EntityResolver {

						public org.xml.sax.InputSource resolveEntity(
								String publicId, String systemId)
								throws org.xml.sax.SAXException,
								java.io.IOException {
							return new org.xml.sax.InputSource(
									new java.io.ByteArrayInputStream(
											"<?xml version='1.0' encoding='UTF-8'?>"
													.getBytes()));
						}

					}
					String os_tFileInputXML_15 = System.getProperty("os.name")
							.toLowerCase();
					boolean isWindows_tFileInputXML_15 = false;
					if (os_tFileInputXML_15.indexOf("windows") > -1
							|| os_tFileInputXML_15.indexOf("nt") > -1) {
						isWindows_tFileInputXML_15 = true;
					}
					class NameSpaceTool_tFileInputXML_15 {

						public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

						private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

						public void countNSMap(org.dom4j.Element el) {
							for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
									.declaredNamespaces()) {
								if (ns.getPrefix().trim().length() == 0) {
									xmlNameSpaceMap.put(
											"pre" + defualtNSPath.size(),
											ns.getURI());
									String path = "";
									org.dom4j.Element elTmp = el;
									while (elTmp != null) {
										if (elTmp.getNamespacePrefix() != null
												&& elTmp.getNamespacePrefix()
														.length() > 0) {
											path = "/"
													+ elTmp.getNamespacePrefix()
													+ ":" + elTmp.getName()
													+ path;
										} else {
											path = "/" + elTmp.getName() + path;
										}
										elTmp = elTmp.getParent();
									}
									defualtNSPath.add(path);
								} else {
									xmlNameSpaceMap.put(ns.getPrefix(),
											ns.getURI());
								}

							}
							for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
									.elements()) {
								countNSMap(e);
							}
						}

						public String addDefaultNSPrefix(String path,
								String loopPath) {
							if (defualtNSPath.size() > 0) {
								String fullPath = loopPath;
								if (!path.equals(fullPath)) {
									for (String tmp : path.split("/")) {
										if (("..").equals(tmp)) {
											fullPath = fullPath.substring(0,
													fullPath.lastIndexOf("/"));
										} else {
											fullPath += "/" + tmp;
										}
									}
								}
								int size = fullPath.split("/").length - 1;
								if (size < 0) {
									return fullPath;
								}
								int[] indexs = new int[size];
								java.util.Arrays.fill(indexs, -1);
								int length = 0;
								for (int i = 0; i < defualtNSPath.size(); i++) {
									if (defualtNSPath.get(i).length() > length
											&& fullPath
													.startsWith(defualtNSPath
															.get(i))) {
										java.util.Arrays
												.fill(indexs,
														defualtNSPath.get(i)
																.split("/").length - 2,
														indexs.length, i);
										length = defualtNSPath.get(i).length();
									}
								}

								StringBuilder newPath = new StringBuilder();
								String[] pathStrs = path.split("/");
								for (int i = 0; i < pathStrs.length; i++) {
									String tmp = pathStrs[i];
									if (newPath.length() > 0) {
										newPath.append("/");
									}
									if (tmp.length() > 0
											&& tmp.indexOf(":") == -1
											&& tmp.indexOf(".") == -1 /*
																	 * &&
																	 * tmp.indexOf
																	 * ("@") ==
																	 * -1
																	 */) {
										int index = indexs[i + indexs.length
												- pathStrs.length];
										if (index >= 0) {
											// ==== add by wliu to support both
											// filter and functions==
											if (tmp.indexOf("[") > 0
													&& tmp.indexOf("]") > tmp
															.indexOf("[")) {// include
																			// filter
												String tmpStr = replaceElementWithNS(
														tmp, "pre" + index
																+ ":");
												newPath.append(tmpStr);
											} else {
												if (tmp.indexOf("@") != -1
														|| tmp.indexOf("(") < tmp
																.indexOf(")")) { // include
																					// attribute
													newPath.append(tmp);
												} else {
													// ==add end=======
													newPath.append("pre")
															.append(index)
															.append(":")
															.append(tmp);
												}
											}
										} else {
											newPath.append(tmp);
										}
									} else {
										newPath.append(tmp);
									}
								}
								return newPath.toString();
							}
							return path;
						}

						private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
						private java.util.regex.Pattern pattern = java.util.regex.Pattern
								.compile(matches);

						private String replaceElementWithNS(String global,
								String pre) {

							java.util.regex.Matcher match = pattern
									.matcher(global);
							StringBuffer sb = new StringBuffer();
							match.reset();
							while (match.find()) {
								String group = match.group();
								String tmp = "";
								if (group.toLowerCase().matches(
										"\\b(div|mod|and|or)\\b.*")
										|| group.matches("@.*")) {
									tmp = group;
								} else {
									tmp = tmp + pre + group;
								}
								match.appendReplacement(sb, tmp);
							}
							match.appendTail(sb);

							return sb.toString();
						}

					}

					class XML_API_tFileInputXML_15 {
						public boolean isDefNull(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							if (node != null
									&& node instanceof org.dom4j.Element) {
								org.dom4j.Attribute attri = ((org.dom4j.Element) node)
										.attribute("nil");
								if (attri != null
										&& ("true").equals(attri.getText())) {
									return true;
								}
							}
							return false;
						}

						public boolean isMissing(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							return node == null ? true : false;
						}

						public boolean isEmpty(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							if (node != null) {
								return node.getText().length() == 0;
							}
							return false;
						}
					}

					org.dom4j.io.SAXReader reader_tFileInputXML_15 = new org.dom4j.io.SAXReader();
					reader_tFileInputXML_15
							.setEntityResolver(new IgnoreDTDEntityResolver_tFileInputXML_15());
					Object filename_tFileInputXML_15 = null;
					try {
						filename_tFileInputXML_15 = context.currentFile;
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}
					if (filename_tFileInputXML_15 != null
							&& filename_tFileInputXML_15 instanceof String
							&& filename_tFileInputXML_15.toString().startsWith(
									"//")) {
						if (!isWindows_tFileInputXML_15) {
							filename_tFileInputXML_15 = filename_tFileInputXML_15
									.toString().replaceFirst("//", "/");
						}
					}

					boolean isValidFile_tFileInputXML_15 = true;
					org.dom4j.Document doc_tFileInputXML_15 = null;
					java.io.Closeable toClose_tFileInputXML_15 = null;
					try {
						if (filename_tFileInputXML_15 instanceof java.io.InputStream) {
							java.io.InputStream inputStream_tFileInputXML_15 = (java.io.InputStream) filename_tFileInputXML_15;
							toClose_tFileInputXML_15 = inputStream_tFileInputXML_15;
							doc_tFileInputXML_15 = reader_tFileInputXML_15
									.read(inputStream_tFileInputXML_15);
						} else {
							java.io.Reader unicodeReader_tFileInputXML_15 = new UnicodeReader(
									new java.io.FileInputStream(String
											.valueOf(filename_tFileInputXML_15)),
									context.encoding);
							toClose_tFileInputXML_15 = unicodeReader_tFileInputXML_15;
							org.xml.sax.InputSource in_tFileInputXML_15 = new org.xml.sax.InputSource(
									unicodeReader_tFileInputXML_15);
							doc_tFileInputXML_15 = reader_tFileInputXML_15
									.read(in_tFileInputXML_15);
						}
					} catch (java.lang.Exception e) {
						System.err.println(e.getMessage());
						isValidFile_tFileInputXML_15 = false;
					} finally {
						if (toClose_tFileInputXML_15 != null) {
							toClose_tFileInputXML_15.close();
						}
					}
					if (isValidFile_tFileInputXML_15) {
						NameSpaceTool_tFileInputXML_15 nsTool_tFileInputXML_15 = new NameSpaceTool_tFileInputXML_15();
						nsTool_tFileInputXML_15.countNSMap(doc_tFileInputXML_15
								.getRootElement());
						java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_15 = nsTool_tFileInputXML_15.xmlNameSpaceMap;

						org.dom4j.XPath x_tFileInputXML_15 = doc_tFileInputXML_15
								.createXPath(nsTool_tFileInputXML_15
										.addDefaultNSPrefix(
												"/ODM/Study/MetaDataVersion/FormDef/ItemGroupRef",
												"/ODM/Study/MetaDataVersion/FormDef/ItemGroupRef"));
						x_tFileInputXML_15
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_15);

						java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_15 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tFileInputXML_15
								.selectNodes(doc_tFileInputXML_15);
						XML_API_tFileInputXML_15 xml_api_tFileInputXML_15 = new XML_API_tFileInputXML_15();
						String str_tFileInputXML_15 = "";
						org.dom4j.Node node_tFileInputXML_15 = null;

						// init all mapping xpaths
						org.dom4j.XPath xTmp0_tFileInputXML_15 = org.dom4j.DocumentHelper
								.createXPath(nsTool_tFileInputXML_15
										.addDefaultNSPrefix("@ItemGroupOID",
												"/ODM/Study/MetaDataVersion/FormDef/ItemGroupRef"));
						xTmp0_tFileInputXML_15
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_15);
						org.dom4j.XPath xTmp1_tFileInputXML_15 = org.dom4j.DocumentHelper
								.createXPath(nsTool_tFileInputXML_15
										.addDefaultNSPrefix("../@OID",
												"/ODM/Study/MetaDataVersion/FormDef/ItemGroupRef"));
						xTmp1_tFileInputXML_15
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_15);
						org.dom4j.XPath xTmp2_tFileInputXML_15 = org.dom4j.DocumentHelper
								.createXPath(nsTool_tFileInputXML_15
										.addDefaultNSPrefix("../@hidden",
												"/ODM/Study/MetaDataVersion/FormDef/ItemGroupRef"));
						xTmp2_tFileInputXML_15
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_15);
						org.dom4j.XPath xTmp3_tFileInputXML_15 = org.dom4j.DocumentHelper
								.createXPath(nsTool_tFileInputXML_15
										.addDefaultNSPrefix("@OrderNumber",
												"/ODM/Study/MetaDataVersion/FormDef/ItemGroupRef"));
						xTmp3_tFileInputXML_15
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_15);

						for (org.dom4j.tree.AbstractNode temp_tFileInputXML_15 : nodeList_tFileInputXML_15) {
							nb_line_tFileInputXML_15++;
							ItemGroup = null;
							boolean whetherReject_tFileInputXML_15 = false;
							ItemGroup = new ItemGroupStruct();
							try {
								Object obj0_tFileInputXML_15 = xTmp0_tFileInputXML_15
										.evaluate(temp_tFileInputXML_15);
								if (obj0_tFileInputXML_15 == null) {
									node_tFileInputXML_15 = null;
									str_tFileInputXML_15 = "";

								} else if (obj0_tFileInputXML_15 instanceof org.dom4j.Node) {
									node_tFileInputXML_15 = (org.dom4j.Node) obj0_tFileInputXML_15;
									str_tFileInputXML_15 = org.jaxen.function.StringFunction
											.evaluate(
													node_tFileInputXML_15,
													org.jaxen.dom4j.DocumentNavigator
															.getInstance());
								} else if (obj0_tFileInputXML_15 instanceof String
										|| obj0_tFileInputXML_15 instanceof Number) {
									node_tFileInputXML_15 = temp_tFileInputXML_15;
									str_tFileInputXML_15 = String
											.valueOf(obj0_tFileInputXML_15);
								} else if (obj0_tFileInputXML_15 instanceof java.util.List) {
									java.util.List<org.dom4j.Node> nodes_tFileInputXML_15 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_15;
									node_tFileInputXML_15 = nodes_tFileInputXML_15
											.size() > 0 ? nodes_tFileInputXML_15
											.get(0) : null;
									str_tFileInputXML_15 = node_tFileInputXML_15 == null ? ""
											: org.jaxen.function.StringFunction
													.evaluate(
															node_tFileInputXML_15,
															org.jaxen.dom4j.DocumentNavigator
																	.getInstance());
								}
								if (xml_api_tFileInputXML_15
										.isDefNull(node_tFileInputXML_15)) {
									ItemGroup.ItemGroupOID = null;
								} else if (xml_api_tFileInputXML_15
										.isEmpty(node_tFileInputXML_15)) {
									ItemGroup.ItemGroupOID = "";
								} else if (xml_api_tFileInputXML_15
										.isMissing(node_tFileInputXML_15)) {
									ItemGroup.ItemGroupOID = null;
								} else {
									ItemGroup.ItemGroupOID = str_tFileInputXML_15;
								}
								Object obj1_tFileInputXML_15 = xTmp1_tFileInputXML_15
										.evaluate(temp_tFileInputXML_15);
								if (obj1_tFileInputXML_15 == null) {
									node_tFileInputXML_15 = null;
									str_tFileInputXML_15 = "";

								} else if (obj1_tFileInputXML_15 instanceof org.dom4j.Node) {
									node_tFileInputXML_15 = (org.dom4j.Node) obj1_tFileInputXML_15;
									str_tFileInputXML_15 = org.jaxen.function.StringFunction
											.evaluate(
													node_tFileInputXML_15,
													org.jaxen.dom4j.DocumentNavigator
															.getInstance());
								} else if (obj1_tFileInputXML_15 instanceof String
										|| obj1_tFileInputXML_15 instanceof Number) {
									node_tFileInputXML_15 = temp_tFileInputXML_15;
									str_tFileInputXML_15 = String
											.valueOf(obj1_tFileInputXML_15);
								} else if (obj1_tFileInputXML_15 instanceof java.util.List) {
									java.util.List<org.dom4j.Node> nodes_tFileInputXML_15 = (java.util.List<org.dom4j.Node>) obj1_tFileInputXML_15;
									node_tFileInputXML_15 = nodes_tFileInputXML_15
											.size() > 0 ? nodes_tFileInputXML_15
											.get(0) : null;
									str_tFileInputXML_15 = node_tFileInputXML_15 == null ? ""
											: org.jaxen.function.StringFunction
													.evaluate(
															node_tFileInputXML_15,
															org.jaxen.dom4j.DocumentNavigator
																	.getInstance());
								}
								if (xml_api_tFileInputXML_15
										.isDefNull(node_tFileInputXML_15)) {
									ItemGroup.FormOID = null;
								} else if (xml_api_tFileInputXML_15
										.isEmpty(node_tFileInputXML_15)) {
									ItemGroup.FormOID = "";
								} else if (xml_api_tFileInputXML_15
										.isMissing(node_tFileInputXML_15)) {
									ItemGroup.FormOID = null;
								} else {
									ItemGroup.FormOID = str_tFileInputXML_15;
								}
								Object obj2_tFileInputXML_15 = xTmp2_tFileInputXML_15
										.evaluate(temp_tFileInputXML_15);
								if (obj2_tFileInputXML_15 == null) {
									node_tFileInputXML_15 = null;
									str_tFileInputXML_15 = "";

								} else if (obj2_tFileInputXML_15 instanceof org.dom4j.Node) {
									node_tFileInputXML_15 = (org.dom4j.Node) obj2_tFileInputXML_15;
									str_tFileInputXML_15 = org.jaxen.function.StringFunction
											.evaluate(
													node_tFileInputXML_15,
													org.jaxen.dom4j.DocumentNavigator
															.getInstance());
								} else if (obj2_tFileInputXML_15 instanceof String
										|| obj2_tFileInputXML_15 instanceof Number) {
									node_tFileInputXML_15 = temp_tFileInputXML_15;
									str_tFileInputXML_15 = String
											.valueOf(obj2_tFileInputXML_15);
								} else if (obj2_tFileInputXML_15 instanceof java.util.List) {
									java.util.List<org.dom4j.Node> nodes_tFileInputXML_15 = (java.util.List<org.dom4j.Node>) obj2_tFileInputXML_15;
									node_tFileInputXML_15 = nodes_tFileInputXML_15
											.size() > 0 ? nodes_tFileInputXML_15
											.get(0) : null;
									str_tFileInputXML_15 = node_tFileInputXML_15 == null ? ""
											: org.jaxen.function.StringFunction
													.evaluate(
															node_tFileInputXML_15,
															org.jaxen.dom4j.DocumentNavigator
																	.getInstance());
								}
								if (xml_api_tFileInputXML_15
										.isDefNull(node_tFileInputXML_15)) {
									ItemGroup.hidden = null;
								} else if (xml_api_tFileInputXML_15
										.isEmpty(node_tFileInputXML_15)) {
									ItemGroup.hidden = "";
								} else if (xml_api_tFileInputXML_15
										.isMissing(node_tFileInputXML_15)) {
									ItemGroup.hidden = "false";
								} else {
									ItemGroup.hidden = str_tFileInputXML_15;
								}
								Object obj3_tFileInputXML_15 = xTmp3_tFileInputXML_15
										.evaluate(temp_tFileInputXML_15);
								if (obj3_tFileInputXML_15 == null) {
									node_tFileInputXML_15 = null;
									str_tFileInputXML_15 = "";

								} else if (obj3_tFileInputXML_15 instanceof org.dom4j.Node) {
									node_tFileInputXML_15 = (org.dom4j.Node) obj3_tFileInputXML_15;
									str_tFileInputXML_15 = org.jaxen.function.StringFunction
											.evaluate(
													node_tFileInputXML_15,
													org.jaxen.dom4j.DocumentNavigator
															.getInstance());
								} else if (obj3_tFileInputXML_15 instanceof String
										|| obj3_tFileInputXML_15 instanceof Number) {
									node_tFileInputXML_15 = temp_tFileInputXML_15;
									str_tFileInputXML_15 = String
											.valueOf(obj3_tFileInputXML_15);
								} else if (obj3_tFileInputXML_15 instanceof java.util.List) {
									java.util.List<org.dom4j.Node> nodes_tFileInputXML_15 = (java.util.List<org.dom4j.Node>) obj3_tFileInputXML_15;
									node_tFileInputXML_15 = nodes_tFileInputXML_15
											.size() > 0 ? nodes_tFileInputXML_15
											.get(0) : null;
									str_tFileInputXML_15 = node_tFileInputXML_15 == null ? ""
											: org.jaxen.function.StringFunction
													.evaluate(
															node_tFileInputXML_15,
															org.jaxen.dom4j.DocumentNavigator
																	.getInstance());
								}
								if (xml_api_tFileInputXML_15
										.isDefNull(node_tFileInputXML_15)) {
									ItemGroup.order = null;
								} else if (xml_api_tFileInputXML_15
										.isEmpty(node_tFileInputXML_15)) {
									ItemGroup.order = "";
								} else if (xml_api_tFileInputXML_15
										.isMissing(node_tFileInputXML_15)) {
									ItemGroup.order = null;
								} else {
									ItemGroup.order = str_tFileInputXML_15;
								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputXML_15 = true;
								System.err.println(e.getMessage());
								ItemGroup = null;
							}

							/**
							 * [tFileInputXML_15 begin ] stop
							 */
							/**
							 * [tFileInputXML_15 main ] start
							 */

							currentComponent = "tFileInputXML_15";

							tos_count_tFileInputXML_15++;

							/**
							 * [tFileInputXML_15 main ] stop
							 */
							// Start of branch "ItemGroup"
							if (ItemGroup != null) {

								/**
								 * [tJavaRow_1 main ] start
								 */

								currentComponent = "tJavaRow_1";

								// Code generated according to input schema and
								// output schema
								row13.ItemGroupOID = ItemGroup.ItemGroupOID;
								row13.FormOID = ItemGroup.FormOID;
								row13.hidden = ItemGroup.hidden;

								if (ItemGroup.order == null) {
									ItemGroup.order = "";
								} else {
									while (ItemGroup.order.length() < 3) {
										ItemGroup.order = "0" + ItemGroup.order;
									}
								}
								row13.order = ItemGroup.order;

								nb_line_tJavaRow_1++;

								tos_count_tJavaRow_1++;

								/**
								 * [tJavaRow_1 main ] stop
								 */

								/**
								 * [tMap_14 main ] start
								 */

								currentComponent = "tMap_14";

								boolean hasCasePrimitiveKeyWithNull_tMap_14 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_14 = false;
								boolean mainRowRejected_tMap_14 = false;

								if (

								(

								!row13.hidden.equals("true")

								)

								) { // G_TM_M_280

									// CALL close main tMap filter for table
									// 'row13'

									// /////////////////////////////////////////////
									// Starting Lookup Table "temp4Forms"
									// /////////////////////////////////////////////

									boolean forceLooptemp4Forms = false;

									temp4FormsStruct temp4FormsObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_14) { // G_TM_M_020

										hasCasePrimitiveKeyWithNull_tMap_14 = false;

										temp4FormsHashKey.FormID = row13.FormOID;

										temp4FormsHashKey.hashCodeDirty = true;

										tHash_Lookup_temp4Forms
												.lookup(temp4FormsHashKey);

										if (!tHash_Lookup_temp4Forms.hasNext()) { // G_TM_M_090

											rejectedInnerJoin_tMap_14 = true;

											forceLooptemp4Forms = true;

										} // G_TM_M_090

									} // G_TM_M_020

									else { // G 20 - G 21
										forceLooptemp4Forms = true;
									} // G 21

									temp4FormsStruct temp4Forms = null;

									while ((tHash_Lookup_temp4Forms != null && tHash_Lookup_temp4Forms
											.hasNext()) || forceLooptemp4Forms) { // G_TM_M_043

										// CALL close loop of lookup
										// 'temp4Forms'

										temp4FormsStruct fromLookup_temp4Forms = null;
										temp4Forms = temp4FormsDefault;

										if (!forceLooptemp4Forms) { // G 46

											fromLookup_temp4Forms = tHash_Lookup_temp4Forms
													.next();

											if (fromLookup_temp4Forms != null) {
												temp4Forms = fromLookup_temp4Forms;
											}

										} // G 46

										forceLooptemp4Forms = false;

										// /////////////////////////////////////////////
										// Starting Lookup Table
										// "ItemGroupNames"
										// /////////////////////////////////////////////

										boolean forceLoopItemGroupNames = false;

										ItemGroupNamesStruct ItemGroupNamesObjectFromLookup = null;

										if (!rejectedInnerJoin_tMap_14) { // G_TM_M_020

											hasCasePrimitiveKeyWithNull_tMap_14 = false;

											ItemGroupNamesHashKey.ItemGroupOID = row13.ItemGroupOID;

											ItemGroupNamesHashKey.hashCodeDirty = true;

											tHash_Lookup_ItemGroupNames
													.lookup(ItemGroupNamesHashKey);

										} // G_TM_M_020

										if (tHash_Lookup_ItemGroupNames != null
												&& tHash_Lookup_ItemGroupNames
														.getCount(ItemGroupNamesHashKey) > 1) { // G
																								// 071

											// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ItemGroupNames' and it contains more one result from keys :  ItemGroupNames.ItemGroupOID = '"
											// +
											// ItemGroupNamesHashKey.ItemGroupOID
											// + "'");
										} // G 071

										ItemGroupNamesStruct ItemGroupNames = null;

										ItemGroupNamesStruct fromLookup_ItemGroupNames = null;
										ItemGroupNames = ItemGroupNamesDefault;

										if (tHash_Lookup_ItemGroupNames != null
												&& tHash_Lookup_ItemGroupNames
														.hasNext()) { // G 099

											fromLookup_ItemGroupNames = tHash_Lookup_ItemGroupNames
													.next();

										} // G 099

										if (fromLookup_ItemGroupNames != null) {
											ItemGroupNames = fromLookup_ItemGroupNames;
										}

										if (!rejectedInnerJoin_tMap_14 &&

										!(

										!row13.hidden.equals("true")

										)

										) { // G 016

											fromLookup_ItemGroupNames = null;
											ItemGroupNames = ItemGroupNamesDefault;

										} // G 016

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_14__Struct Var = Var__tMap_14;// ###############################
											// ###############################
											// # Output tables

											out10 = null;

											if (!rejectedInnerJoin_tMap_14) {

												// # Output table : 'out10'
												out10_tmp.StudyID = temp4Forms.StudyID;
												out10_tmp.MetaID = temp4Forms.MetaID;
												out10_tmp.VisitID = temp4Forms.VisitID;
												out10_tmp.FormID = temp4Forms.FormID;
												out10_tmp.QuestionID = row13.ItemGroupOID;
												out10_tmp.ItemID = null;
												out10_tmp.ParentItem = null;
												out10_tmp.Name = row13.order
														+ " "
														+ ItemGroupNames.Name;
												out10_tmp.VisitNo = temp4Forms.VisitNo;
												out10_tmp.Sequence = temp4Forms.Sequence;
												out10_tmp.hidden = temp4Forms.hidden;
												out10_tmp.FormFamily = temp4Forms.FormFamily;
												out10_tmp.AdditionalData = temp4Forms.AdditionalData;
												out10_tmp.item_Datatype = temp4Forms.item_Datatype;
												out10_tmp.HLEVEL = 6;
												out10 = out10_tmp;
											} // closing inner join bracket (2)
												// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_14 = false;

										tos_count_tMap_14++;

										/**
										 * [tMap_14 main ] stop
										 */
										// Start of branch "out10"
										if (out10 != null) {

											/**
											 * [tUniqRow_2 main ] start
											 */

											currentComponent = "tUniqRow_2";

											row8 = null;
											if (out10.StudyID == null) {
												finder_tUniqRow_2.StudyID = null;
											} else {
												finder_tUniqRow_2.StudyID = out10.StudyID
														.toLowerCase();
											}
											if (out10.MetaID == null) {
												finder_tUniqRow_2.MetaID = null;
											} else {
												finder_tUniqRow_2.MetaID = out10.MetaID
														.toLowerCase();
											}
											if (out10.VisitID == null) {
												finder_tUniqRow_2.VisitID = null;
											} else {
												finder_tUniqRow_2.VisitID = out10.VisitID
														.toLowerCase();
											}
											if (out10.FormID == null) {
												finder_tUniqRow_2.FormID = null;
											} else {
												finder_tUniqRow_2.FormID = out10.FormID
														.toLowerCase();
											}
											if (out10.QuestionID == null) {
												finder_tUniqRow_2.QuestionID = null;
											} else {
												finder_tUniqRow_2.QuestionID = out10.QuestionID
														.toLowerCase();
											}
											finder_tUniqRow_2.hashCodeDirty = true;
											if (!keystUniqRow_2
													.contains(finder_tUniqRow_2)) {
												KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

												if (out10.StudyID == null) {
													new_tUniqRow_2.StudyID = null;
												} else {
													new_tUniqRow_2.StudyID = out10.StudyID
															.toLowerCase();
												}
												if (out10.MetaID == null) {
													new_tUniqRow_2.MetaID = null;
												} else {
													new_tUniqRow_2.MetaID = out10.MetaID
															.toLowerCase();
												}
												if (out10.VisitID == null) {
													new_tUniqRow_2.VisitID = null;
												} else {
													new_tUniqRow_2.VisitID = out10.VisitID
															.toLowerCase();
												}
												if (out10.FormID == null) {
													new_tUniqRow_2.FormID = null;
												} else {
													new_tUniqRow_2.FormID = out10.FormID
															.toLowerCase();
												}
												if (out10.QuestionID == null) {
													new_tUniqRow_2.QuestionID = null;
												} else {
													new_tUniqRow_2.QuestionID = out10.QuestionID
															.toLowerCase();
												}

												keystUniqRow_2
														.add(new_tUniqRow_2);
												if (row8 == null) {
													row8 = new row8Struct();
												}
												row8.StudyID = out10.StudyID;
												row8.MetaID = out10.MetaID;
												row8.VisitID = out10.VisitID;
												row8.FormID = out10.FormID;
												row8.QuestionID = out10.QuestionID;
												row8.ItemID = out10.ItemID;
												row8.ParentItem = out10.ParentItem;
												row8.Name = out10.Name;
												row8.VisitNo = out10.VisitNo;
												row8.Sequence = out10.Sequence;
												row8.hidden = out10.hidden;
												row8.FormFamily = out10.FormFamily;
												row8.AdditionalData = out10.AdditionalData;
												row8.item_Datatype = out10.item_Datatype;
												row8.HLEVEL = out10.HLEVEL;
												nb_uniques_tUniqRow_2++;
											} else {
												nb_duplicates_tUniqRow_2++;
											}

											tos_count_tUniqRow_2++;

											/**
											 * [tUniqRow_2 main ] stop
											 */
											// Start of branch "row8"
											if (row8 != null) {

												/**
												 * [tFileOutputDelimited_22 main
												 * ] start
												 */

												currentComponent = "tFileOutputDelimited_22";

												StringBuilder sb_tFileOutputDelimited_22 = new StringBuilder();

												if (row8.StudyID != null) {

													sb_tFileOutputDelimited_22
															.append(

															row8.StudyID

															);

												}

												sb_tFileOutputDelimited_22
														.append(OUT_DELIM_tFileOutputDelimited_22);

												if (row8.MetaID != null) {

													sb_tFileOutputDelimited_22
															.append(

															row8.MetaID

															);

												}

												sb_tFileOutputDelimited_22
														.append(OUT_DELIM_tFileOutputDelimited_22);

												if (row8.VisitID != null) {

													sb_tFileOutputDelimited_22
															.append(

															row8.VisitID

															);

												}

												sb_tFileOutputDelimited_22
														.append(OUT_DELIM_tFileOutputDelimited_22);

												if (row8.FormID != null) {

													sb_tFileOutputDelimited_22
															.append(

															row8.FormID

															);

												}

												sb_tFileOutputDelimited_22
														.append(OUT_DELIM_tFileOutputDelimited_22);

												if (row8.QuestionID != null) {

													sb_tFileOutputDelimited_22
															.append(

															row8.QuestionID

															);

												}

												sb_tFileOutputDelimited_22
														.append(OUT_DELIM_tFileOutputDelimited_22);

												if (row8.ItemID != null) {

													sb_tFileOutputDelimited_22
															.append(

															row8.ItemID

															);

												}

												sb_tFileOutputDelimited_22
														.append(OUT_DELIM_tFileOutputDelimited_22);

												if (row8.ParentItem != null) {

													sb_tFileOutputDelimited_22
															.append(

															row8.ParentItem

															);

												}

												sb_tFileOutputDelimited_22
														.append(OUT_DELIM_tFileOutputDelimited_22);

												if (row8.Name != null) {

													sb_tFileOutputDelimited_22
															.append(

															row8.Name

															);

												}

												sb_tFileOutputDelimited_22
														.append(OUT_DELIM_tFileOutputDelimited_22);

												if (row8.VisitNo != null) {

													sb_tFileOutputDelimited_22
															.append(

															row8.VisitNo

															);

												}

												sb_tFileOutputDelimited_22
														.append(OUT_DELIM_tFileOutputDelimited_22);

												if (row8.Sequence != null) {

													sb_tFileOutputDelimited_22
															.append(

															row8.Sequence

															);

												}

												sb_tFileOutputDelimited_22
														.append(OUT_DELIM_tFileOutputDelimited_22);

												if (row8.hidden != null) {

													sb_tFileOutputDelimited_22
															.append(

															row8.hidden

															);

												}

												sb_tFileOutputDelimited_22
														.append(OUT_DELIM_tFileOutputDelimited_22);

												if (row8.FormFamily != null) {

													sb_tFileOutputDelimited_22
															.append(

															row8.FormFamily

															);

												}

												sb_tFileOutputDelimited_22
														.append(OUT_DELIM_tFileOutputDelimited_22);

												if (row8.AdditionalData != null) {

													sb_tFileOutputDelimited_22
															.append(

															row8.AdditionalData

															);

												}

												sb_tFileOutputDelimited_22
														.append(OUT_DELIM_tFileOutputDelimited_22);

												if (row8.item_Datatype != null) {

													sb_tFileOutputDelimited_22
															.append(

															row8.item_Datatype

															);

												}

												sb_tFileOutputDelimited_22
														.append(OUT_DELIM_tFileOutputDelimited_22);

												if (row8.HLEVEL != null) {

													sb_tFileOutputDelimited_22
															.append(

															row8.HLEVEL

															);

												}

												sb_tFileOutputDelimited_22
														.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_22);

												nb_line_tFileOutputDelimited_22++;

												outtFileOutputDelimited_22
														.write(sb_tFileOutputDelimited_22
																.toString());

												tos_count_tFileOutputDelimited_22++;

												/**
												 * [tFileOutputDelimited_22 main
												 * ] stop
												 */

											} // End of branch "row8"

										} // End of branch "out10"

									} // close loop of lookup 'temp4Forms' //
										// G_TM_M_043

								} // G_TM_M_280 close main tMap filter for table
									// 'row13'

							} // End of branch "ItemGroup"

							/**
							 * [tFileInputXML_15 end ] start
							 */

							currentComponent = "tFileInputXML_15";

						}
					}
					globalMap.put("tFileInputXML_15_NB_LINE",
							nb_line_tFileInputXML_15);

					ok_Hash.put("tFileInputXML_15", true);
					end_Hash.put("tFileInputXML_15", System.currentTimeMillis());

					/**
					 * [tFileInputXML_15 end ] stop
					 */

					/**
					 * [tJavaRow_1 end ] start
					 */

					currentComponent = "tJavaRow_1";

					globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

					ok_Hash.put("tJavaRow_1", true);
					end_Hash.put("tJavaRow_1", System.currentTimeMillis());

					/**
					 * [tJavaRow_1 end ] stop
					 */

					/**
					 * [tMap_14 end ] start
					 */

					currentComponent = "tMap_14";

					// ###############################
					// # Lookup hashes releasing
					if (tHash_Lookup_temp4Forms != null) {
						tHash_Lookup_temp4Forms.endGet();
					}
					globalMap.remove("tHash_Lookup_temp4Forms");

					if (tHash_Lookup_ItemGroupNames != null) {
						tHash_Lookup_ItemGroupNames.endGet();
					}
					globalMap.remove("tHash_Lookup_ItemGroupNames");

					// ###############################

					ok_Hash.put("tMap_14", true);
					end_Hash.put("tMap_14", System.currentTimeMillis());

					/**
					 * [tMap_14 end ] stop
					 */

					/**
					 * [tUniqRow_2 end ] start
					 */

					currentComponent = "tUniqRow_2";

					globalMap.put("tUniqRow_2_NB_UNIQUES",
							nb_uniques_tUniqRow_2);
					globalMap.put("tUniqRow_2_NB_DUPLICATES",
							nb_duplicates_tUniqRow_2);

					ok_Hash.put("tUniqRow_2", true);
					end_Hash.put("tUniqRow_2", System.currentTimeMillis());

					/**
					 * [tUniqRow_2 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_22 end ] start
					 */

					currentComponent = "tFileOutputDelimited_22";

				} finally {
					if (outtFileOutputDelimited_22 != null) {
						outtFileOutputDelimited_22.flush();
						outtFileOutputDelimited_22.close();
					}
					globalMap.put("tFileOutputDelimited_22_NB_LINE",
							nb_line_tFileOutputDelimited_22);
					globalMap.put("tFileOutputDelimited_22_FILE_NAME",
							fileName_tFileOutputDelimited_22);
				} // finally

				ok_Hash.put("tFileOutputDelimited_22", true);
				end_Hash.put("tFileOutputDelimited_22",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_22 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputXML_15:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_9Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		} finally {
			// free memory for "tMap_14"
			globalMap.remove("tHash_Lookup_temp4Forms");

			// free memory for "tMap_14"
			globalMap.remove("tHash_Lookup_ItemGroupNames");

		}

		globalMap.put("tFileInputXML_15_SUBPROCESS_STATE", 1);
	}

	public void tJava_9Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_9 begin ] start
				 */

				ok_Hash.put("tJava_9", false);
				start_Hash.put("tJava_9", System.currentTimeMillis());
				currentComponent = "tJava_9";

				int tos_count_tJava_9 = 0;

				StatusListener.setSubStatus(90.0f, (int) (90.0f) + "%");

				/**
				 * [tJava_9 begin ] stop
				 */
				/**
				 * [tJava_9 main ] start
				 */

				currentComponent = "tJava_9";

				tos_count_tJava_9++;

				/**
				 * [tJava_9 main ] stop
				 */
				/**
				 * [tJava_9 end ] start
				 */

				currentComponent = "tJava_9";

				ok_Hash.put("tJava_9", true);
				end_Hash.put("tJava_9", System.currentTimeMillis());

				/**
				 * [tJava_9 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_9:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputXML_16Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJava_9_SUBPROCESS_STATE", 1);
	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String StudyID;

		public String getStudyID() {
			return this.StudyID;
		}

		public String MetaID;

		public String getMetaID() {
			return this.MetaID;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String QuestionID;

		public String getQuestionID() {
			return this.QuestionID;
		}

		public String ItemID;

		public String getItemID() {
			return this.ItemID;
		}

		public String ParentItem;

		public String getParentItem() {
			return this.ParentItem;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String VisitNo;

		public String getVisitNo() {
			return this.VisitNo;
		}

		public String Sequence;

		public String getSequence() {
			return this.Sequence;
		}

		public String hidden;

		public String getHidden() {
			return this.hidden;
		}

		public String FormFamily;

		public String getFormFamily() {
			return this.FormFamily;
		}

		public String AdditionalData;

		public String getAdditionalData() {
			return this.AdditionalData;
		}

		public String item_Datatype;

		public String getItem_Datatype() {
			return this.item_Datatype;
		}

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.StudyID = readString(dis);

					this.MetaID = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.QuestionID = readString(dis);

					this.ItemID = readString(dis);

					this.ParentItem = readString(dis);

					this.Name = readString(dis);

					this.VisitNo = readString(dis);

					this.Sequence = readString(dis);

					this.hidden = readString(dis);

					this.FormFamily = readString(dis);

					this.AdditionalData = readString(dis);

					this.item_Datatype = readString(dis);

					this.HLEVEL = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.StudyID, dos);

				// String

				writeString(this.MetaID, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.QuestionID, dos);

				// String

				writeString(this.ItemID, dos);

				// String

				writeString(this.ParentItem, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.VisitNo, dos);

				// String

				writeString(this.Sequence, dos);

				// String

				writeString(this.hidden, dos);

				// String

				writeString(this.FormFamily, dos);

				// String

				writeString(this.AdditionalData, dos);

				// String

				writeString(this.item_Datatype, dos);

				// Integer

				writeInteger(this.HLEVEL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("StudyID=" + StudyID);
			sb.append(",MetaID=" + MetaID);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",QuestionID=" + QuestionID);
			sb.append(",ItemID=" + ItemID);
			sb.append(",ParentItem=" + ParentItem);
			sb.append(",Name=" + Name);
			sb.append(",VisitNo=" + VisitNo);
			sb.append(",Sequence=" + Sequence);
			sb.append(",hidden=" + hidden);
			sb.append(",FormFamily=" + FormFamily);
			sb.append(",AdditionalData=" + AdditionalData);
			sb.append(",item_Datatype=" + item_Datatype);
			sb.append(",HLEVEL=" + String.valueOf(HLEVEL));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class asdStruct implements
			routines.system.IPersistableRow<asdStruct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String StudyID;

		public String getStudyID() {
			return this.StudyID;
		}

		public String MetaID;

		public String getMetaID() {
			return this.MetaID;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String QuestionID;

		public String getQuestionID() {
			return this.QuestionID;
		}

		public String ItemID;

		public String getItemID() {
			return this.ItemID;
		}

		public String ParentItem;

		public String getParentItem() {
			return this.ParentItem;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String VisitNo;

		public String getVisitNo() {
			return this.VisitNo;
		}

		public String Sequence;

		public String getSequence() {
			return this.Sequence;
		}

		public String hidden;

		public String getHidden() {
			return this.hidden;
		}

		public String FormFamily;

		public String getFormFamily() {
			return this.FormFamily;
		}

		public String AdditionalData;

		public String getAdditionalData() {
			return this.AdditionalData;
		}

		public String item_Datatype;

		public String getItem_Datatype() {
			return this.item_Datatype;
		}

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.StudyID = readString(dis);

					this.MetaID = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.QuestionID = readString(dis);

					this.ItemID = readString(dis);

					this.ParentItem = readString(dis);

					this.Name = readString(dis);

					this.VisitNo = readString(dis);

					this.Sequence = readString(dis);

					this.hidden = readString(dis);

					this.FormFamily = readString(dis);

					this.AdditionalData = readString(dis);

					this.item_Datatype = readString(dis);

					this.HLEVEL = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.StudyID, dos);

				// String

				writeString(this.MetaID, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.QuestionID, dos);

				// String

				writeString(this.ItemID, dos);

				// String

				writeString(this.ParentItem, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.VisitNo, dos);

				// String

				writeString(this.Sequence, dos);

				// String

				writeString(this.hidden, dos);

				// String

				writeString(this.FormFamily, dos);

				// String

				writeString(this.AdditionalData, dos);

				// String

				writeString(this.item_Datatype, dos);

				// Integer

				writeInteger(this.HLEVEL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("StudyID=" + StudyID);
			sb.append(",MetaID=" + MetaID);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",QuestionID=" + QuestionID);
			sb.append(",ItemID=" + ItemID);
			sb.append(",ParentItem=" + ParentItem);
			sb.append(",Name=" + Name);
			sb.append(",VisitNo=" + VisitNo);
			sb.append(",Sequence=" + Sequence);
			sb.append(",hidden=" + hidden);
			sb.append(",FormFamily=" + FormFamily);
			sb.append(",AdditionalData=" + AdditionalData);
			sb.append(",item_Datatype=" + item_Datatype);
			sb.append(",HLEVEL=" + String.valueOf(HLEVEL));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(asdStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row16Struct implements
			routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String StudyID;

		public String getStudyID() {
			return this.StudyID;
		}

		public String MetaID;

		public String getMetaID() {
			return this.MetaID;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String QuestionID;

		public String getQuestionID() {
			return this.QuestionID;
		}

		public String ItemID;

		public String getItemID() {
			return this.ItemID;
		}

		public String ParentItem;

		public String getParentItem() {
			return this.ParentItem;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String VisitNo;

		public String getVisitNo() {
			return this.VisitNo;
		}

		public String Sequence;

		public String getSequence() {
			return this.Sequence;
		}

		public String hidden;

		public String getHidden() {
			return this.hidden;
		}

		public String FormFamily;

		public String getFormFamily() {
			return this.FormFamily;
		}

		public String AdditionalData;

		public String getAdditionalData() {
			return this.AdditionalData;
		}

		public String item_Datatype;

		public String getItem_Datatype() {
			return this.item_Datatype;
		}

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String order;

		public String getOrder() {
			return this.order;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.StudyID = readString(dis);

					this.MetaID = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.QuestionID = readString(dis);

					this.ItemID = readString(dis);

					this.ParentItem = readString(dis);

					this.Name = readString(dis);

					this.VisitNo = readString(dis);

					this.Sequence = readString(dis);

					this.hidden = readString(dis);

					this.FormFamily = readString(dis);

					this.AdditionalData = readString(dis);

					this.item_Datatype = readString(dis);

					this.HLEVEL = readInteger(dis);

					this.order = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.StudyID, dos);

				// String

				writeString(this.MetaID, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.QuestionID, dos);

				// String

				writeString(this.ItemID, dos);

				// String

				writeString(this.ParentItem, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.VisitNo, dos);

				// String

				writeString(this.Sequence, dos);

				// String

				writeString(this.hidden, dos);

				// String

				writeString(this.FormFamily, dos);

				// String

				writeString(this.AdditionalData, dos);

				// String

				writeString(this.item_Datatype, dos);

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.order, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("StudyID=" + StudyID);
			sb.append(",MetaID=" + MetaID);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",QuestionID=" + QuestionID);
			sb.append(",ItemID=" + ItemID);
			sb.append(",ParentItem=" + ParentItem);
			sb.append(",Name=" + Name);
			sb.append(",VisitNo=" + VisitNo);
			sb.append(",Sequence=" + Sequence);
			sb.append(",hidden=" + hidden);
			sb.append(",FormFamily=" + FormFamily);
			sb.append(",AdditionalData=" + AdditionalData);
			sb.append(",item_Datatype=" + item_Datatype);
			sb.append(",HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",order=" + order);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out11Struct implements
			routines.system.IPersistableRow<out11Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String StudyID;

		public String getStudyID() {
			return this.StudyID;
		}

		public String MetaID;

		public String getMetaID() {
			return this.MetaID;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String QuestionID;

		public String getQuestionID() {
			return this.QuestionID;
		}

		public String ItemID;

		public String getItemID() {
			return this.ItemID;
		}

		public String ParentItem;

		public String getParentItem() {
			return this.ParentItem;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String VisitNo;

		public String getVisitNo() {
			return this.VisitNo;
		}

		public String Sequence;

		public String getSequence() {
			return this.Sequence;
		}

		public String hidden;

		public String getHidden() {
			return this.hidden;
		}

		public String FormFamily;

		public String getFormFamily() {
			return this.FormFamily;
		}

		public String AdditionalData;

		public String getAdditionalData() {
			return this.AdditionalData;
		}

		public String item_Datatype;

		public String getItem_Datatype() {
			return this.item_Datatype;
		}

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String order;

		public String getOrder() {
			return this.order;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.StudyID = readString(dis);

					this.MetaID = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.QuestionID = readString(dis);

					this.ItemID = readString(dis);

					this.ParentItem = readString(dis);

					this.Name = readString(dis);

					this.VisitNo = readString(dis);

					this.Sequence = readString(dis);

					this.hidden = readString(dis);

					this.FormFamily = readString(dis);

					this.AdditionalData = readString(dis);

					this.item_Datatype = readString(dis);

					this.HLEVEL = readInteger(dis);

					this.order = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.StudyID, dos);

				// String

				writeString(this.MetaID, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.QuestionID, dos);

				// String

				writeString(this.ItemID, dos);

				// String

				writeString(this.ParentItem, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.VisitNo, dos);

				// String

				writeString(this.Sequence, dos);

				// String

				writeString(this.hidden, dos);

				// String

				writeString(this.FormFamily, dos);

				// String

				writeString(this.AdditionalData, dos);

				// String

				writeString(this.item_Datatype, dos);

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.order, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("StudyID=" + StudyID);
			sb.append(",MetaID=" + MetaID);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",QuestionID=" + QuestionID);
			sb.append(",ItemID=" + ItemID);
			sb.append(",ParentItem=" + ParentItem);
			sb.append(",Name=" + Name);
			sb.append(",VisitNo=" + VisitNo);
			sb.append(",Sequence=" + Sequence);
			sb.append(",hidden=" + hidden);
			sb.append(",FormFamily=" + FormFamily);
			sb.append(",AdditionalData=" + AdditionalData);
			sb.append(",item_Datatype=" + item_Datatype);
			sb.append(",HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",order=" + order);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class fromItemStruct implements
			routines.system.IPersistableRow<fromItemStruct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String ItemOID;

		public String getItemOID() {
			return this.ItemOID;
		}

		public String ItemGroupOID;

		public String getItemGroupOID() {
			return this.ItemGroupOID;
		}

		public String hidden;

		public String getHidden() {
			return this.hidden;
		}

		public String order;

		public String getOrder() {
			return this.order;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.ItemOID = readString(dis);

					this.ItemGroupOID = readString(dis);

					this.hidden = readString(dis);

					this.order = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ItemOID, dos);

				// String

				writeString(this.ItemGroupOID, dos);

				// String

				writeString(this.hidden, dos);

				// String

				writeString(this.order, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ItemOID=" + ItemOID);
			sb.append(",ItemGroupOID=" + ItemGroupOID);
			sb.append(",hidden=" + hidden);
			sb.append(",order=" + order);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(fromItemStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row27Struct implements
			routines.system.IPersistableRow<row27Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String ItemOID;

		public String getItemOID() {
			return this.ItemOID;
		}

		public String ItemGroupOID;

		public String getItemGroupOID() {
			return this.ItemGroupOID;
		}

		public String hidden;

		public String getHidden() {
			return this.hidden;
		}

		public String order;

		public String getOrder() {
			return this.order;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.ItemOID = readString(dis);

					this.ItemGroupOID = readString(dis);

					this.hidden = readString(dis);

					this.order = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ItemOID, dos);

				// String

				writeString(this.ItemGroupOID, dos);

				// String

				writeString(this.hidden, dos);

				// String

				writeString(this.order, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ItemOID=" + ItemOID);
			sb.append(",ItemGroupOID=" + ItemGroupOID);
			sb.append(",hidden=" + hidden);
			sb.append(",order=" + order);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row27Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputXML_16Struct implements
			routines.system.IPersistableRow<after_tFileInputXML_16Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String ItemOID;

		public String getItemOID() {
			return this.ItemOID;
		}

		public String ItemGroupOID;

		public String getItemGroupOID() {
			return this.ItemGroupOID;
		}

		public String hidden;

		public String getHidden() {
			return this.hidden;
		}

		public String order;

		public String getOrder() {
			return this.order;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.ItemOID = readString(dis);

					this.ItemGroupOID = readString(dis);

					this.hidden = readString(dis);

					this.order = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ItemOID, dos);

				// String

				writeString(this.ItemGroupOID, dos);

				// String

				writeString(this.hidden, dos);

				// String

				writeString(this.order, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ItemOID=" + ItemOID);
			sb.append(",ItemGroupOID=" + ItemGroupOID);
			sb.append(",hidden=" + hidden);
			sb.append(",order=" + order);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputXML_16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputXML_16Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputXML_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_15Process(globalMap);
				tFileInputDelimited_23Process(globalMap);
				tFileInputDelimited_16Process(globalMap);

				row27Struct row27 = new row27Struct();
				fromItemStruct fromItem = new fromItemStruct();
				out11Struct out11 = new out11Struct();
				row16Struct row16 = new row16Struct();
				asdStruct asd = new asdStruct();
				row9Struct row9 = new row9Struct();

				/**
				 * [tFileOutputDelimited_23 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_23", false);
				start_Hash.put("tFileOutputDelimited_23",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_23";

				int tos_count_tFileOutputDelimited_23 = 0;

				String fileName_tFileOutputDelimited_23 = "";
				fileName_tFileOutputDelimited_23 = (new java.io.File(
						((String) globalMap
								.get("tCreateTemporaryFile_12_FILEPATH"))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_23 = null;
				String extension_tFileOutputDelimited_23 = null;
				String directory_tFileOutputDelimited_23 = null;
				if ((fileName_tFileOutputDelimited_23.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_23.lastIndexOf(".") < fileName_tFileOutputDelimited_23
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_23 = fileName_tFileOutputDelimited_23;
						extension_tFileOutputDelimited_23 = "";
					} else {
						fullName_tFileOutputDelimited_23 = fileName_tFileOutputDelimited_23
								.substring(0, fileName_tFileOutputDelimited_23
										.lastIndexOf("."));
						extension_tFileOutputDelimited_23 = fileName_tFileOutputDelimited_23
								.substring(fileName_tFileOutputDelimited_23
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_23 = fileName_tFileOutputDelimited_23
							.substring(0, fileName_tFileOutputDelimited_23
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_23.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_23 = fileName_tFileOutputDelimited_23
								.substring(0, fileName_tFileOutputDelimited_23
										.lastIndexOf("."));
						extension_tFileOutputDelimited_23 = fileName_tFileOutputDelimited_23
								.substring(fileName_tFileOutputDelimited_23
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_23 = fileName_tFileOutputDelimited_23;
						extension_tFileOutputDelimited_23 = "";
					}
					directory_tFileOutputDelimited_23 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_23 = true;
				java.io.File filetFileOutputDelimited_23 = new java.io.File(
						fileName_tFileOutputDelimited_23);
				globalMap.put("tFileOutputDelimited_23_FILE_NAME",
						fileName_tFileOutputDelimited_23);

				int nb_line_tFileOutputDelimited_23 = 0;
				int splitEvery_tFileOutputDelimited_23 = 1000;
				int splitedFileNo_tFileOutputDelimited_23 = 0;
				int currentRow_tFileOutputDelimited_23 = 0;

				final String OUT_DELIM_tFileOutputDelimited_23 = /**
				 * Start field
				 * tFileOutputDelimited_23:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_23:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_23 = /**
				 * Start
				 * field tFileOutputDelimited_23:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_23:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_23 != null
						&& directory_tFileOutputDelimited_23.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_23 = new java.io.File(
							directory_tFileOutputDelimited_23);
					if (!dir_tFileOutputDelimited_23.exists()) {
						dir_tFileOutputDelimited_23.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_23 = null;
				try {
					outtFileOutputDelimited_23 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_23,
											false), "ISO-8859-15"));

					/**
					 * [tFileOutputDelimited_23 begin ] stop
					 */

					/**
					 * [tUniqRow_3 begin ] start
					 */

					ok_Hash.put("tUniqRow_3", false);
					start_Hash.put("tUniqRow_3", System.currentTimeMillis());
					currentComponent = "tUniqRow_3";

					int tos_count_tUniqRow_3 = 0;

					class KeyStruct_tUniqRow_3 {

						private static final int DEFAULT_HASHCODE = 1;
						private static final int PRIME = 31;
						private int hashCode = DEFAULT_HASHCODE;
						public boolean hashCodeDirty = true;

						String StudyID;
						String MetaID;
						String VisitID;
						String FormID;
						String QuestionID;
						String ItemID;

						@Override
						public int hashCode() {
							if (this.hashCodeDirty) {
								final int prime = PRIME;
								int result = DEFAULT_HASHCODE;

								result = prime
										* result
										+ ((this.StudyID == null) ? 0
												: this.StudyID.hashCode());

								result = prime
										* result
										+ ((this.MetaID == null) ? 0
												: this.MetaID.hashCode());

								result = prime
										* result
										+ ((this.VisitID == null) ? 0
												: this.VisitID.hashCode());

								result = prime
										* result
										+ ((this.FormID == null) ? 0
												: this.FormID.hashCode());

								result = prime
										* result
										+ ((this.QuestionID == null) ? 0
												: this.QuestionID.hashCode());

								result = prime
										* result
										+ ((this.ItemID == null) ? 0
												: this.ItemID.hashCode());

								this.hashCode = result;
								this.hashCodeDirty = false;
							}
							return this.hashCode;
						}

						@Override
						public boolean equals(Object obj) {
							if (this == obj)
								return true;
							if (obj == null)
								return false;
							if (getClass() != obj.getClass())
								return false;
							final KeyStruct_tUniqRow_3 other = (KeyStruct_tUniqRow_3) obj;

							if (this.StudyID == null) {
								if (other.StudyID != null)
									return false;
							} else if (!this.StudyID.equals(other.StudyID))
								return false;

							if (this.MetaID == null) {
								if (other.MetaID != null)
									return false;
							} else if (!this.MetaID.equals(other.MetaID))
								return false;

							if (this.VisitID == null) {
								if (other.VisitID != null)
									return false;
							} else if (!this.VisitID.equals(other.VisitID))
								return false;

							if (this.FormID == null) {
								if (other.FormID != null)
									return false;
							} else if (!this.FormID.equals(other.FormID))
								return false;

							if (this.QuestionID == null) {
								if (other.QuestionID != null)
									return false;
							} else if (!this.QuestionID
									.equals(other.QuestionID))
								return false;

							if (this.ItemID == null) {
								if (other.ItemID != null)
									return false;
							} else if (!this.ItemID.equals(other.ItemID))
								return false;

							return true;
						}

					}

					int nb_uniques_tUniqRow_3 = 0;
					int nb_duplicates_tUniqRow_3 = 0;
					KeyStruct_tUniqRow_3 finder_tUniqRow_3 = new KeyStruct_tUniqRow_3();
					java.util.Set<KeyStruct_tUniqRow_3> keystUniqRow_3 = new java.util.HashSet<KeyStruct_tUniqRow_3>();

					/**
					 * [tUniqRow_3 begin ] stop
					 */

					/**
					 * [tMap_29 begin ] start
					 */

					ok_Hash.put("tMap_29", false);
					start_Hash.put("tMap_29", System.currentTimeMillis());
					currentComponent = "tMap_29";

					int tos_count_tMap_29 = 0;

					// ###############################
					// # Lookup's keys initialization

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) globalMap
							.get("tHash_Lookup_row14"));

					row14Struct row14HashKey = new row14Struct();
					row14Struct row14Default = new row14Struct();
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_29__Struct {
					}
					Var__tMap_29__Struct Var__tMap_29 = new Var__tMap_29__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					asdStruct asd_tmp = new asdStruct();
					// ###############################

					/**
					 * [tMap_29 begin ] stop
					 */

					/**
					 * [tJavaRow_10 begin ] start
					 */

					ok_Hash.put("tJavaRow_10", false);
					start_Hash.put("tJavaRow_10", System.currentTimeMillis());
					currentComponent = "tJavaRow_10";

					int tos_count_tJavaRow_10 = 0;

					int nb_line_tJavaRow_10 = 0;

					/**
					 * [tJavaRow_10 begin ] stop
					 */

					/**
					 * [tMap_15 begin ] start
					 */

					ok_Hash.put("tMap_15", false);
					start_Hash.put("tMap_15", System.currentTimeMillis());
					currentComponent = "tMap_15";

					int tos_count_tMap_15 = 0;

					// ###############################
					// # Lookup's keys initialization

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<fromTemp5ItemGroupStruct> tHash_Lookup_fromTemp5ItemGroup = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<fromTemp5ItemGroupStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<fromTemp5ItemGroupStruct>) globalMap
							.get("tHash_Lookup_fromTemp5ItemGroup"));

					fromTemp5ItemGroupStruct fromTemp5ItemGroupHashKey = new fromTemp5ItemGroupStruct();
					fromTemp5ItemGroupStruct fromTemp5ItemGroupDefault = new fromTemp5ItemGroupStruct();

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<fromItemNamesStruct> tHash_Lookup_fromItemNames = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<fromItemNamesStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<fromItemNamesStruct>) globalMap
							.get("tHash_Lookup_fromItemNames"));

					fromItemNamesStruct fromItemNamesHashKey = new fromItemNamesStruct();
					fromItemNamesStruct fromItemNamesDefault = new fromItemNamesStruct();
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_15__Struct {
					}
					Var__tMap_15__Struct Var__tMap_15 = new Var__tMap_15__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					out11Struct out11_tmp = new out11Struct();
					// ###############################

					/**
					 * [tMap_15 begin ] stop
					 */

					/**
					 * [tJavaRow_2 begin ] start
					 */

					ok_Hash.put("tJavaRow_2", false);
					start_Hash.put("tJavaRow_2", System.currentTimeMillis());
					currentComponent = "tJavaRow_2";

					int tos_count_tJavaRow_2 = 0;

					int nb_line_tJavaRow_2 = 0;

					/**
					 * [tJavaRow_2 begin ] stop
					 */

					/**
					 * [tFileInputXML_16 begin ] start
					 */

					ok_Hash.put("tFileInputXML_16", false);
					start_Hash.put("tFileInputXML_16",
							System.currentTimeMillis());
					currentComponent = "tFileInputXML_16";

					int tos_count_tFileInputXML_16 = 0;

					int nb_line_tFileInputXML_16 = 0;

					class IgnoreDTDEntityResolver_tFileInputXML_16 implements
							org.xml.sax.EntityResolver {

						public org.xml.sax.InputSource resolveEntity(
								String publicId, String systemId)
								throws org.xml.sax.SAXException,
								java.io.IOException {
							return new org.xml.sax.InputSource(
									new java.io.ByteArrayInputStream(
											"<?xml version='1.0' encoding='UTF-8'?>"
													.getBytes()));
						}

					}
					String os_tFileInputXML_16 = System.getProperty("os.name")
							.toLowerCase();
					boolean isWindows_tFileInputXML_16 = false;
					if (os_tFileInputXML_16.indexOf("windows") > -1
							|| os_tFileInputXML_16.indexOf("nt") > -1) {
						isWindows_tFileInputXML_16 = true;
					}
					class NameSpaceTool_tFileInputXML_16 {

						public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

						private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

						public void countNSMap(org.dom4j.Element el) {
							for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
									.declaredNamespaces()) {
								if (ns.getPrefix().trim().length() == 0) {
									xmlNameSpaceMap.put(
											"pre" + defualtNSPath.size(),
											ns.getURI());
									String path = "";
									org.dom4j.Element elTmp = el;
									while (elTmp != null) {
										if (elTmp.getNamespacePrefix() != null
												&& elTmp.getNamespacePrefix()
														.length() > 0) {
											path = "/"
													+ elTmp.getNamespacePrefix()
													+ ":" + elTmp.getName()
													+ path;
										} else {
											path = "/" + elTmp.getName() + path;
										}
										elTmp = elTmp.getParent();
									}
									defualtNSPath.add(path);
								} else {
									xmlNameSpaceMap.put(ns.getPrefix(),
											ns.getURI());
								}

							}
							for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
									.elements()) {
								countNSMap(e);
							}
						}

						public String addDefaultNSPrefix(String path,
								String loopPath) {
							if (defualtNSPath.size() > 0) {
								String fullPath = loopPath;
								if (!path.equals(fullPath)) {
									for (String tmp : path.split("/")) {
										if (("..").equals(tmp)) {
											fullPath = fullPath.substring(0,
													fullPath.lastIndexOf("/"));
										} else {
											fullPath += "/" + tmp;
										}
									}
								}
								int size = fullPath.split("/").length - 1;
								if (size < 0) {
									return fullPath;
								}
								int[] indexs = new int[size];
								java.util.Arrays.fill(indexs, -1);
								int length = 0;
								for (int i = 0; i < defualtNSPath.size(); i++) {
									if (defualtNSPath.get(i).length() > length
											&& fullPath
													.startsWith(defualtNSPath
															.get(i))) {
										java.util.Arrays
												.fill(indexs,
														defualtNSPath.get(i)
																.split("/").length - 2,
														indexs.length, i);
										length = defualtNSPath.get(i).length();
									}
								}

								StringBuilder newPath = new StringBuilder();
								String[] pathStrs = path.split("/");
								for (int i = 0; i < pathStrs.length; i++) {
									String tmp = pathStrs[i];
									if (newPath.length() > 0) {
										newPath.append("/");
									}
									if (tmp.length() > 0
											&& tmp.indexOf(":") == -1
											&& tmp.indexOf(".") == -1 /*
																	 * &&
																	 * tmp.indexOf
																	 * ("@") ==
																	 * -1
																	 */) {
										int index = indexs[i + indexs.length
												- pathStrs.length];
										if (index >= 0) {
											// ==== add by wliu to support both
											// filter and functions==
											if (tmp.indexOf("[") > 0
													&& tmp.indexOf("]") > tmp
															.indexOf("[")) {// include
																			// filter
												String tmpStr = replaceElementWithNS(
														tmp, "pre" + index
																+ ":");
												newPath.append(tmpStr);
											} else {
												if (tmp.indexOf("@") != -1
														|| tmp.indexOf("(") < tmp
																.indexOf(")")) { // include
																					// attribute
													newPath.append(tmp);
												} else {
													// ==add end=======
													newPath.append("pre")
															.append(index)
															.append(":")
															.append(tmp);
												}
											}
										} else {
											newPath.append(tmp);
										}
									} else {
										newPath.append(tmp);
									}
								}
								return newPath.toString();
							}
							return path;
						}

						private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
						private java.util.regex.Pattern pattern = java.util.regex.Pattern
								.compile(matches);

						private String replaceElementWithNS(String global,
								String pre) {

							java.util.regex.Matcher match = pattern
									.matcher(global);
							StringBuffer sb = new StringBuffer();
							match.reset();
							while (match.find()) {
								String group = match.group();
								String tmp = "";
								if (group.toLowerCase().matches(
										"\\b(div|mod|and|or)\\b.*")
										|| group.matches("@.*")) {
									tmp = group;
								} else {
									tmp = tmp + pre + group;
								}
								match.appendReplacement(sb, tmp);
							}
							match.appendTail(sb);

							return sb.toString();
						}

					}

					class XML_API_tFileInputXML_16 {
						public boolean isDefNull(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							if (node != null
									&& node instanceof org.dom4j.Element) {
								org.dom4j.Attribute attri = ((org.dom4j.Element) node)
										.attribute("nil");
								if (attri != null
										&& ("true").equals(attri.getText())) {
									return true;
								}
							}
							return false;
						}

						public boolean isMissing(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							return node == null ? true : false;
						}

						public boolean isEmpty(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							if (node != null) {
								return node.getText().length() == 0;
							}
							return false;
						}
					}

					org.dom4j.io.SAXReader reader_tFileInputXML_16 = new org.dom4j.io.SAXReader();
					reader_tFileInputXML_16
							.setEntityResolver(new IgnoreDTDEntityResolver_tFileInputXML_16());
					Object filename_tFileInputXML_16 = null;
					try {
						filename_tFileInputXML_16 = context.currentFile;
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}
					if (filename_tFileInputXML_16 != null
							&& filename_tFileInputXML_16 instanceof String
							&& filename_tFileInputXML_16.toString().startsWith(
									"//")) {
						if (!isWindows_tFileInputXML_16) {
							filename_tFileInputXML_16 = filename_tFileInputXML_16
									.toString().replaceFirst("//", "/");
						}
					}

					boolean isValidFile_tFileInputXML_16 = true;
					org.dom4j.Document doc_tFileInputXML_16 = null;
					java.io.Closeable toClose_tFileInputXML_16 = null;
					try {
						if (filename_tFileInputXML_16 instanceof java.io.InputStream) {
							java.io.InputStream inputStream_tFileInputXML_16 = (java.io.InputStream) filename_tFileInputXML_16;
							toClose_tFileInputXML_16 = inputStream_tFileInputXML_16;
							doc_tFileInputXML_16 = reader_tFileInputXML_16
									.read(inputStream_tFileInputXML_16);
						} else {
							java.io.Reader unicodeReader_tFileInputXML_16 = new UnicodeReader(
									new java.io.FileInputStream(String
											.valueOf(filename_tFileInputXML_16)),
									context.encoding);
							toClose_tFileInputXML_16 = unicodeReader_tFileInputXML_16;
							org.xml.sax.InputSource in_tFileInputXML_16 = new org.xml.sax.InputSource(
									unicodeReader_tFileInputXML_16);
							doc_tFileInputXML_16 = reader_tFileInputXML_16
									.read(in_tFileInputXML_16);
						}
					} catch (java.lang.Exception e) {
						System.err.println(e.getMessage());
						isValidFile_tFileInputXML_16 = false;
					} finally {
						if (toClose_tFileInputXML_16 != null) {
							toClose_tFileInputXML_16.close();
						}
					}
					if (isValidFile_tFileInputXML_16) {
						NameSpaceTool_tFileInputXML_16 nsTool_tFileInputXML_16 = new NameSpaceTool_tFileInputXML_16();
						nsTool_tFileInputXML_16.countNSMap(doc_tFileInputXML_16
								.getRootElement());
						java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_16 = nsTool_tFileInputXML_16.xmlNameSpaceMap;

						org.dom4j.XPath x_tFileInputXML_16 = doc_tFileInputXML_16
								.createXPath(nsTool_tFileInputXML_16
										.addDefaultNSPrefix(
												"/ODM/Study/MetaDataVersion/ItemGroupDef/ItemRef",
												"/ODM/Study/MetaDataVersion/ItemGroupDef/ItemRef"));
						x_tFileInputXML_16
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_16);

						java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_16 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tFileInputXML_16
								.selectNodes(doc_tFileInputXML_16);
						XML_API_tFileInputXML_16 xml_api_tFileInputXML_16 = new XML_API_tFileInputXML_16();
						String str_tFileInputXML_16 = "";
						org.dom4j.Node node_tFileInputXML_16 = null;

						// init all mapping xpaths
						org.dom4j.XPath xTmp0_tFileInputXML_16 = org.dom4j.DocumentHelper
								.createXPath(nsTool_tFileInputXML_16
										.addDefaultNSPrefix("@ItemOID",
												"/ODM/Study/MetaDataVersion/ItemGroupDef/ItemRef"));
						xTmp0_tFileInputXML_16
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_16);
						org.dom4j.XPath xTmp1_tFileInputXML_16 = org.dom4j.DocumentHelper
								.createXPath(nsTool_tFileInputXML_16
										.addDefaultNSPrefix("../@OID",
												"/ODM/Study/MetaDataVersion/ItemGroupDef/ItemRef"));
						xTmp1_tFileInputXML_16
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_16);
						org.dom4j.XPath xTmp2_tFileInputXML_16 = org.dom4j.DocumentHelper
								.createXPath(nsTool_tFileInputXML_16
										.addDefaultNSPrefix("../@hidden",
												"/ODM/Study/MetaDataVersion/ItemGroupDef/ItemRef"));
						xTmp2_tFileInputXML_16
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_16);
						org.dom4j.XPath xTmp3_tFileInputXML_16 = org.dom4j.DocumentHelper
								.createXPath(nsTool_tFileInputXML_16
										.addDefaultNSPrefix("@OrderNumber",
												"/ODM/Study/MetaDataVersion/ItemGroupDef/ItemRef"));
						xTmp3_tFileInputXML_16
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_16);

						for (org.dom4j.tree.AbstractNode temp_tFileInputXML_16 : nodeList_tFileInputXML_16) {
							nb_line_tFileInputXML_16++;
							row27 = null;
							boolean whetherReject_tFileInputXML_16 = false;
							row27 = new row27Struct();
							try {
								Object obj0_tFileInputXML_16 = xTmp0_tFileInputXML_16
										.evaluate(temp_tFileInputXML_16);
								if (obj0_tFileInputXML_16 == null) {
									node_tFileInputXML_16 = null;
									str_tFileInputXML_16 = "";

								} else if (obj0_tFileInputXML_16 instanceof org.dom4j.Node) {
									node_tFileInputXML_16 = (org.dom4j.Node) obj0_tFileInputXML_16;
									str_tFileInputXML_16 = org.jaxen.function.StringFunction
											.evaluate(
													node_tFileInputXML_16,
													org.jaxen.dom4j.DocumentNavigator
															.getInstance());
								} else if (obj0_tFileInputXML_16 instanceof String
										|| obj0_tFileInputXML_16 instanceof Number) {
									node_tFileInputXML_16 = temp_tFileInputXML_16;
									str_tFileInputXML_16 = String
											.valueOf(obj0_tFileInputXML_16);
								} else if (obj0_tFileInputXML_16 instanceof java.util.List) {
									java.util.List<org.dom4j.Node> nodes_tFileInputXML_16 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_16;
									node_tFileInputXML_16 = nodes_tFileInputXML_16
											.size() > 0 ? nodes_tFileInputXML_16
											.get(0) : null;
									str_tFileInputXML_16 = node_tFileInputXML_16 == null ? ""
											: org.jaxen.function.StringFunction
													.evaluate(
															node_tFileInputXML_16,
															org.jaxen.dom4j.DocumentNavigator
																	.getInstance());
								}
								if (xml_api_tFileInputXML_16
										.isDefNull(node_tFileInputXML_16)) {
									row27.ItemOID = null;
								} else if (xml_api_tFileInputXML_16
										.isEmpty(node_tFileInputXML_16)) {
									row27.ItemOID = "";
								} else if (xml_api_tFileInputXML_16
										.isMissing(node_tFileInputXML_16)) {
									row27.ItemOID = null;
								} else {
									row27.ItemOID = str_tFileInputXML_16;
								}
								Object obj1_tFileInputXML_16 = xTmp1_tFileInputXML_16
										.evaluate(temp_tFileInputXML_16);
								if (obj1_tFileInputXML_16 == null) {
									node_tFileInputXML_16 = null;
									str_tFileInputXML_16 = "";

								} else if (obj1_tFileInputXML_16 instanceof org.dom4j.Node) {
									node_tFileInputXML_16 = (org.dom4j.Node) obj1_tFileInputXML_16;
									str_tFileInputXML_16 = org.jaxen.function.StringFunction
											.evaluate(
													node_tFileInputXML_16,
													org.jaxen.dom4j.DocumentNavigator
															.getInstance());
								} else if (obj1_tFileInputXML_16 instanceof String
										|| obj1_tFileInputXML_16 instanceof Number) {
									node_tFileInputXML_16 = temp_tFileInputXML_16;
									str_tFileInputXML_16 = String
											.valueOf(obj1_tFileInputXML_16);
								} else if (obj1_tFileInputXML_16 instanceof java.util.List) {
									java.util.List<org.dom4j.Node> nodes_tFileInputXML_16 = (java.util.List<org.dom4j.Node>) obj1_tFileInputXML_16;
									node_tFileInputXML_16 = nodes_tFileInputXML_16
											.size() > 0 ? nodes_tFileInputXML_16
											.get(0) : null;
									str_tFileInputXML_16 = node_tFileInputXML_16 == null ? ""
											: org.jaxen.function.StringFunction
													.evaluate(
															node_tFileInputXML_16,
															org.jaxen.dom4j.DocumentNavigator
																	.getInstance());
								}
								if (xml_api_tFileInputXML_16
										.isDefNull(node_tFileInputXML_16)) {
									row27.ItemGroupOID = null;
								} else if (xml_api_tFileInputXML_16
										.isEmpty(node_tFileInputXML_16)) {
									row27.ItemGroupOID = "";
								} else if (xml_api_tFileInputXML_16
										.isMissing(node_tFileInputXML_16)) {
									row27.ItemGroupOID = null;
								} else {
									row27.ItemGroupOID = str_tFileInputXML_16;
								}
								Object obj2_tFileInputXML_16 = xTmp2_tFileInputXML_16
										.evaluate(temp_tFileInputXML_16);
								if (obj2_tFileInputXML_16 == null) {
									node_tFileInputXML_16 = null;
									str_tFileInputXML_16 = "";

								} else if (obj2_tFileInputXML_16 instanceof org.dom4j.Node) {
									node_tFileInputXML_16 = (org.dom4j.Node) obj2_tFileInputXML_16;
									str_tFileInputXML_16 = org.jaxen.function.StringFunction
											.evaluate(
													node_tFileInputXML_16,
													org.jaxen.dom4j.DocumentNavigator
															.getInstance());
								} else if (obj2_tFileInputXML_16 instanceof String
										|| obj2_tFileInputXML_16 instanceof Number) {
									node_tFileInputXML_16 = temp_tFileInputXML_16;
									str_tFileInputXML_16 = String
											.valueOf(obj2_tFileInputXML_16);
								} else if (obj2_tFileInputXML_16 instanceof java.util.List) {
									java.util.List<org.dom4j.Node> nodes_tFileInputXML_16 = (java.util.List<org.dom4j.Node>) obj2_tFileInputXML_16;
									node_tFileInputXML_16 = nodes_tFileInputXML_16
											.size() > 0 ? nodes_tFileInputXML_16
											.get(0) : null;
									str_tFileInputXML_16 = node_tFileInputXML_16 == null ? ""
											: org.jaxen.function.StringFunction
													.evaluate(
															node_tFileInputXML_16,
															org.jaxen.dom4j.DocumentNavigator
																	.getInstance());
								}
								if (xml_api_tFileInputXML_16
										.isDefNull(node_tFileInputXML_16)) {
									row27.hidden = null;
								} else if (xml_api_tFileInputXML_16
										.isEmpty(node_tFileInputXML_16)) {
									row27.hidden = "";
								} else if (xml_api_tFileInputXML_16
										.isMissing(node_tFileInputXML_16)) {
									row27.hidden = "false";
								} else {
									row27.hidden = str_tFileInputXML_16;
								}
								Object obj3_tFileInputXML_16 = xTmp3_tFileInputXML_16
										.evaluate(temp_tFileInputXML_16);
								if (obj3_tFileInputXML_16 == null) {
									node_tFileInputXML_16 = null;
									str_tFileInputXML_16 = "";

								} else if (obj3_tFileInputXML_16 instanceof org.dom4j.Node) {
									node_tFileInputXML_16 = (org.dom4j.Node) obj3_tFileInputXML_16;
									str_tFileInputXML_16 = org.jaxen.function.StringFunction
											.evaluate(
													node_tFileInputXML_16,
													org.jaxen.dom4j.DocumentNavigator
															.getInstance());
								} else if (obj3_tFileInputXML_16 instanceof String
										|| obj3_tFileInputXML_16 instanceof Number) {
									node_tFileInputXML_16 = temp_tFileInputXML_16;
									str_tFileInputXML_16 = String
											.valueOf(obj3_tFileInputXML_16);
								} else if (obj3_tFileInputXML_16 instanceof java.util.List) {
									java.util.List<org.dom4j.Node> nodes_tFileInputXML_16 = (java.util.List<org.dom4j.Node>) obj3_tFileInputXML_16;
									node_tFileInputXML_16 = nodes_tFileInputXML_16
											.size() > 0 ? nodes_tFileInputXML_16
											.get(0) : null;
									str_tFileInputXML_16 = node_tFileInputXML_16 == null ? ""
											: org.jaxen.function.StringFunction
													.evaluate(
															node_tFileInputXML_16,
															org.jaxen.dom4j.DocumentNavigator
																	.getInstance());
								}
								if (xml_api_tFileInputXML_16
										.isDefNull(node_tFileInputXML_16)) {
									row27.order = null;
								} else if (xml_api_tFileInputXML_16
										.isEmpty(node_tFileInputXML_16)) {
									row27.order = "";
								} else if (xml_api_tFileInputXML_16
										.isMissing(node_tFileInputXML_16)) {
									row27.order = null;
								} else {
									row27.order = str_tFileInputXML_16;
								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputXML_16 = true;
								System.err.println(e.getMessage());
								row27 = null;
							}

							/**
							 * [tFileInputXML_16 begin ] stop
							 */
							/**
							 * [tFileInputXML_16 main ] start
							 */

							currentComponent = "tFileInputXML_16";

							tos_count_tFileInputXML_16++;

							/**
							 * [tFileInputXML_16 main ] stop
							 */
							// Start of branch "row27"
							if (row27 != null) {

								/**
								 * [tJavaRow_2 main ] start
								 */

								currentComponent = "tJavaRow_2";

								// Code generated according to input schema and
								// output schema
								fromItem.ItemOID = row27.ItemOID.trim();
								fromItem.ItemGroupOID = row27.ItemGroupOID
										.trim();
								fromItem.hidden = row27.hidden.trim();
								if (row27.order == null) {
									row27.order = "";
								} else {
									while (row27.order.length() < 3) {
										row27.order = "0" + row27.order.trim();
									}
								}
								fromItem.order = row27.order.trim();

								nb_line_tJavaRow_2++;

								tos_count_tJavaRow_2++;

								/**
								 * [tJavaRow_2 main ] stop
								 */

								/**
								 * [tMap_15 main ] start
								 */

								currentComponent = "tMap_15";

								boolean hasCasePrimitiveKeyWithNull_tMap_15 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_15 = false;
								boolean mainRowRejected_tMap_15 = false;

								if (

								(

								!fromItem.hidden.equals("true")

								)

								) { // G_TM_M_280

									// CALL close main tMap filter for table
									// 'fromItem'

									// /////////////////////////////////////////////
									// Starting Lookup Table
									// "fromTemp5ItemGroup"
									// /////////////////////////////////////////////

									boolean forceLoopfromTemp5ItemGroup = false;

									fromTemp5ItemGroupStruct fromTemp5ItemGroupObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_15) { // G_TM_M_020

										hasCasePrimitiveKeyWithNull_tMap_15 = false;

										fromTemp5ItemGroupHashKey.QuestionID = fromItem.ItemGroupOID;

										fromTemp5ItemGroupHashKey.hashCodeDirty = true;

										tHash_Lookup_fromTemp5ItemGroup
												.lookup(fromTemp5ItemGroupHashKey);

										if (!tHash_Lookup_fromTemp5ItemGroup
												.hasNext()) { // G_TM_M_090

											rejectedInnerJoin_tMap_15 = true;

											forceLoopfromTemp5ItemGroup = true;

										} // G_TM_M_090

									} // G_TM_M_020

									else { // G 20 - G 21
										forceLoopfromTemp5ItemGroup = true;
									} // G 21

									fromTemp5ItemGroupStruct fromTemp5ItemGroup = null;

									while ((tHash_Lookup_fromTemp5ItemGroup != null && tHash_Lookup_fromTemp5ItemGroup
											.hasNext())
											|| forceLoopfromTemp5ItemGroup) { // G_TM_M_043

										// CALL close loop of lookup
										// 'fromTemp5ItemGroup'

										fromTemp5ItemGroupStruct fromLookup_fromTemp5ItemGroup = null;
										fromTemp5ItemGroup = fromTemp5ItemGroupDefault;

										if (!forceLoopfromTemp5ItemGroup) { // G
																			// 46

											fromLookup_fromTemp5ItemGroup = tHash_Lookup_fromTemp5ItemGroup
													.next();

											if (fromLookup_fromTemp5ItemGroup != null) {
												fromTemp5ItemGroup = fromLookup_fromTemp5ItemGroup;
											}

										} // G 46

										forceLoopfromTemp5ItemGroup = false;

										// /////////////////////////////////////////////
										// Starting Lookup Table "fromItemNames"
										// /////////////////////////////////////////////

										boolean forceLoopfromItemNames = false;

										fromItemNamesStruct fromItemNamesObjectFromLookup = null;

										if (!rejectedInnerJoin_tMap_15) { // G_TM_M_020

											hasCasePrimitiveKeyWithNull_tMap_15 = false;

											fromItemNamesHashKey.ItemGroupOID = fromItem.ItemOID;

											fromItemNamesHashKey.hashCodeDirty = true;

											tHash_Lookup_fromItemNames
													.lookup(fromItemNamesHashKey);

										} // G_TM_M_020

										if (tHash_Lookup_fromItemNames != null
												&& tHash_Lookup_fromItemNames
														.getCount(fromItemNamesHashKey) > 1) { // G
																								// 071

											// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'fromItemNames' and it contains more one result from keys :  fromItemNames.ItemGroupOID = '"
											// +
											// fromItemNamesHashKey.ItemGroupOID
											// + "'");
										} // G 071

										fromItemNamesStruct fromItemNames = null;

										fromItemNamesStruct fromLookup_fromItemNames = null;
										fromItemNames = fromItemNamesDefault;

										if (tHash_Lookup_fromItemNames != null
												&& tHash_Lookup_fromItemNames
														.hasNext()) { // G 099

											fromLookup_fromItemNames = tHash_Lookup_fromItemNames
													.next();

										} // G 099

										if (fromLookup_fromItemNames != null) {
											fromItemNames = fromLookup_fromItemNames;
										}

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_15__Struct Var = Var__tMap_15;// ###############################
											// ###############################
											// # Output tables

											out11 = null;

											if (!rejectedInnerJoin_tMap_15) {

												// # Output table : 'out11'
												out11_tmp.StudyID = fromTemp5ItemGroup.StudyID;
												out11_tmp.MetaID = fromTemp5ItemGroup.MetaID;
												out11_tmp.VisitID = fromTemp5ItemGroup.VisitID;
												out11_tmp.FormID = fromTemp5ItemGroup.FormID;
												out11_tmp.QuestionID = fromTemp5ItemGroup.QuestionID;
												out11_tmp.ItemID = fromItem.ItemOID;
												out11_tmp.ParentItem = fromTemp5ItemGroup.ParentItem;
												out11_tmp.Name = fromItemNames.TransText != null ? fromItemNames.TransText
														: fromItemNames.Name;
												out11_tmp.VisitNo = fromTemp5ItemGroup.VisitNo;
												out11_tmp.Sequence = fromTemp5ItemGroup.Sequence;
												out11_tmp.hidden = fromTemp5ItemGroup.hidden;
												out11_tmp.FormFamily = fromTemp5ItemGroup.FormFamily;
												out11_tmp.AdditionalData = fromTemp5ItemGroup.AdditionalData;
												out11_tmp.item_Datatype = fromItemNames.dataType;
												out11_tmp.HLEVEL = 7;
												out11_tmp.order = fromItem.order != null ? fromItem.order
														: "";
												out11 = out11_tmp;
											} // closing inner join bracket (2)
												// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_15 = false;

										tos_count_tMap_15++;

										/**
										 * [tMap_15 main ] stop
										 */
										// Start of branch "out11"
										if (out11 != null) {

											/**
											 * [tJavaRow_10 main ] start
											 */

											currentComponent = "tJavaRow_10";

											row16.StudyID = out11.StudyID;
											row16.MetaID = out11.MetaID;
											row16.VisitID = out11.VisitID;
											row16.FormID = out11.FormID;
											row16.QuestionID = out11.QuestionID;
											row16.ItemID = out11.ItemID;
											row16.ParentItem = out11.ParentItem;
											row16.Name = out11.Name;
											row16.VisitNo = out11.VisitNo;
											row16.Sequence = out11.Sequence;
											row16.hidden = out11.hidden;
											row16.FormFamily = out11.FormFamily;
											row16.AdditionalData = out11.AdditionalData;
											row16.item_Datatype = out11.item_Datatype;
											row16.HLEVEL = out11.HLEVEL;
											row16.order = out11.order;

											nb_line_tJavaRow_10++;

											tos_count_tJavaRow_10++;

											/**
											 * [tJavaRow_10 main ] stop
											 */

											/**
											 * [tMap_29 main ] start
											 */

											currentComponent = "tMap_29";

											boolean hasCasePrimitiveKeyWithNull_tMap_29 = false;

											// ###############################
											// # Input tables (lookups)
											boolean rejectedInnerJoin_tMap_29 = false;
											boolean mainRowRejected_tMap_29 = false;

											// /////////////////////////////////////////////
											// Starting Lookup Table "row14"
											// /////////////////////////////////////////////

											boolean forceLooprow14 = false;

											row14Struct row14ObjectFromLookup = null;

											if (!rejectedInnerJoin_tMap_29) { // G_TM_M_020

												hasCasePrimitiveKeyWithNull_tMap_29 = false;

												row14HashKey.ItemGroupOID = row16.ItemID;

												row14HashKey.hashCodeDirty = true;

												tHash_Lookup_row14
														.lookup(row14HashKey);

											} // G_TM_M_020

											if (tHash_Lookup_row14 != null
													&& tHash_Lookup_row14
															.getCount(row14HashKey) > 1) { // G
																							// 071

												// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row14' and it contains more one result from keys :  row14.ItemGroupOID = '"
												// + row14HashKey.ItemGroupOID +
												// "'");
											} // G 071

											row14Struct row14 = null;

											row14Struct fromLookup_row14 = null;
											row14 = row14Default;

											if (tHash_Lookup_row14 != null
													&& tHash_Lookup_row14
															.hasNext()) { // G
																			// 099

												fromLookup_row14 = tHash_Lookup_row14
														.next();

											} // G 099

											if (fromLookup_row14 != null) {
												row14 = fromLookup_row14;
											}

											// ###############################
											{ // start of Var scope

												// ###############################
												// # Vars tables

												Var__tMap_29__Struct Var = Var__tMap_29;// ###############################
												// ###############################
												// # Output tables

												asd = null;

												// # Output table : 'asd'
												asd_tmp.StudyID = row16.StudyID;
												asd_tmp.MetaID = row16.MetaID;
												asd_tmp.VisitID = row16.VisitID;
												asd_tmp.FormID = row16.FormID;
												asd_tmp.QuestionID = row16.QuestionID;
												asd_tmp.ItemID = row16.ItemID;
												asd_tmp.ParentItem = row16.ParentItem;
												asd_tmp.Name = StringHandling
														.LEN(row16.order) > 0 ? row16.order
														+ " " + row16.Name
														: row16.Name;
												asd_tmp.VisitNo = row16.VisitNo;
												asd_tmp.Sequence = row16.Sequence;
												asd_tmp.hidden = row16.hidden;
												asd_tmp.FormFamily = row14.OID;
												asd_tmp.AdditionalData = row16.AdditionalData;
												asd_tmp.item_Datatype = row16.item_Datatype;
												asd_tmp.HLEVEL = row16.HLEVEL;
												asd = asd_tmp;
												// ###############################

											} // end of Var scope

											rejectedInnerJoin_tMap_29 = false;

											tos_count_tMap_29++;

											/**
											 * [tMap_29 main ] stop
											 */
											// Start of branch "asd"
											if (asd != null) {

												/**
												 * [tUniqRow_3 main ] start
												 */

												currentComponent = "tUniqRow_3";

												row9 = null;
												if (asd.StudyID == null) {
													finder_tUniqRow_3.StudyID = null;
												} else {
													finder_tUniqRow_3.StudyID = asd.StudyID
															.toLowerCase();
												}
												if (asd.MetaID == null) {
													finder_tUniqRow_3.MetaID = null;
												} else {
													finder_tUniqRow_3.MetaID = asd.MetaID
															.toLowerCase();
												}
												if (asd.VisitID == null) {
													finder_tUniqRow_3.VisitID = null;
												} else {
													finder_tUniqRow_3.VisitID = asd.VisitID
															.toLowerCase();
												}
												if (asd.FormID == null) {
													finder_tUniqRow_3.FormID = null;
												} else {
													finder_tUniqRow_3.FormID = asd.FormID
															.toLowerCase();
												}
												if (asd.QuestionID == null) {
													finder_tUniqRow_3.QuestionID = null;
												} else {
													finder_tUniqRow_3.QuestionID = asd.QuestionID
															.toLowerCase();
												}
												if (asd.ItemID == null) {
													finder_tUniqRow_3.ItemID = null;
												} else {
													finder_tUniqRow_3.ItemID = asd.ItemID
															.toLowerCase();
												}
												finder_tUniqRow_3.hashCodeDirty = true;
												if (!keystUniqRow_3
														.contains(finder_tUniqRow_3)) {
													KeyStruct_tUniqRow_3 new_tUniqRow_3 = new KeyStruct_tUniqRow_3();

													if (asd.StudyID == null) {
														new_tUniqRow_3.StudyID = null;
													} else {
														new_tUniqRow_3.StudyID = asd.StudyID
																.toLowerCase();
													}
													if (asd.MetaID == null) {
														new_tUniqRow_3.MetaID = null;
													} else {
														new_tUniqRow_3.MetaID = asd.MetaID
																.toLowerCase();
													}
													if (asd.VisitID == null) {
														new_tUniqRow_3.VisitID = null;
													} else {
														new_tUniqRow_3.VisitID = asd.VisitID
																.toLowerCase();
													}
													if (asd.FormID == null) {
														new_tUniqRow_3.FormID = null;
													} else {
														new_tUniqRow_3.FormID = asd.FormID
																.toLowerCase();
													}
													if (asd.QuestionID == null) {
														new_tUniqRow_3.QuestionID = null;
													} else {
														new_tUniqRow_3.QuestionID = asd.QuestionID
																.toLowerCase();
													}
													if (asd.ItemID == null) {
														new_tUniqRow_3.ItemID = null;
													} else {
														new_tUniqRow_3.ItemID = asd.ItemID
																.toLowerCase();
													}

													keystUniqRow_3
															.add(new_tUniqRow_3);
													if (row9 == null) {
														row9 = new row9Struct();
													}
													row9.StudyID = asd.StudyID;
													row9.MetaID = asd.MetaID;
													row9.VisitID = asd.VisitID;
													row9.FormID = asd.FormID;
													row9.QuestionID = asd.QuestionID;
													row9.ItemID = asd.ItemID;
													row9.ParentItem = asd.ParentItem;
													row9.Name = asd.Name;
													row9.VisitNo = asd.VisitNo;
													row9.Sequence = asd.Sequence;
													row9.hidden = asd.hidden;
													row9.FormFamily = asd.FormFamily;
													row9.AdditionalData = asd.AdditionalData;
													row9.item_Datatype = asd.item_Datatype;
													row9.HLEVEL = asd.HLEVEL;
													nb_uniques_tUniqRow_3++;
												} else {
													nb_duplicates_tUniqRow_3++;
												}

												tos_count_tUniqRow_3++;

												/**
												 * [tUniqRow_3 main ] stop
												 */
												// Start of branch "row9"
												if (row9 != null) {

													/**
													 * [tFileOutputDelimited_23
													 * main ] start
													 */

													currentComponent = "tFileOutputDelimited_23";

													StringBuilder sb_tFileOutputDelimited_23 = new StringBuilder();

													if (row9.StudyID != null) {

														sb_tFileOutputDelimited_23
																.append(

																row9.StudyID

																);

													}

													sb_tFileOutputDelimited_23
															.append(OUT_DELIM_tFileOutputDelimited_23);

													if (row9.MetaID != null) {

														sb_tFileOutputDelimited_23
																.append(

																row9.MetaID

																);

													}

													sb_tFileOutputDelimited_23
															.append(OUT_DELIM_tFileOutputDelimited_23);

													if (row9.VisitID != null) {

														sb_tFileOutputDelimited_23
																.append(

																row9.VisitID

																);

													}

													sb_tFileOutputDelimited_23
															.append(OUT_DELIM_tFileOutputDelimited_23);

													if (row9.FormID != null) {

														sb_tFileOutputDelimited_23
																.append(

																row9.FormID

																);

													}

													sb_tFileOutputDelimited_23
															.append(OUT_DELIM_tFileOutputDelimited_23);

													if (row9.QuestionID != null) {

														sb_tFileOutputDelimited_23
																.append(

																row9.QuestionID

																);

													}

													sb_tFileOutputDelimited_23
															.append(OUT_DELIM_tFileOutputDelimited_23);

													if (row9.ItemID != null) {

														sb_tFileOutputDelimited_23
																.append(

																row9.ItemID

																);

													}

													sb_tFileOutputDelimited_23
															.append(OUT_DELIM_tFileOutputDelimited_23);

													if (row9.ParentItem != null) {

														sb_tFileOutputDelimited_23
																.append(

																row9.ParentItem

																);

													}

													sb_tFileOutputDelimited_23
															.append(OUT_DELIM_tFileOutputDelimited_23);

													if (row9.Name != null) {

														sb_tFileOutputDelimited_23
																.append(

																row9.Name

																);

													}

													sb_tFileOutputDelimited_23
															.append(OUT_DELIM_tFileOutputDelimited_23);

													if (row9.VisitNo != null) {

														sb_tFileOutputDelimited_23
																.append(

																row9.VisitNo

																);

													}

													sb_tFileOutputDelimited_23
															.append(OUT_DELIM_tFileOutputDelimited_23);

													if (row9.Sequence != null) {

														sb_tFileOutputDelimited_23
																.append(

																row9.Sequence

																);

													}

													sb_tFileOutputDelimited_23
															.append(OUT_DELIM_tFileOutputDelimited_23);

													if (row9.hidden != null) {

														sb_tFileOutputDelimited_23
																.append(

																row9.hidden

																);

													}

													sb_tFileOutputDelimited_23
															.append(OUT_DELIM_tFileOutputDelimited_23);

													if (row9.FormFamily != null) {

														sb_tFileOutputDelimited_23
																.append(

																row9.FormFamily

																);

													}

													sb_tFileOutputDelimited_23
															.append(OUT_DELIM_tFileOutputDelimited_23);

													if (row9.AdditionalData != null) {

														sb_tFileOutputDelimited_23
																.append(

																row9.AdditionalData

																);

													}

													sb_tFileOutputDelimited_23
															.append(OUT_DELIM_tFileOutputDelimited_23);

													if (row9.item_Datatype != null) {

														sb_tFileOutputDelimited_23
																.append(

																row9.item_Datatype

																);

													}

													sb_tFileOutputDelimited_23
															.append(OUT_DELIM_tFileOutputDelimited_23);

													if (row9.HLEVEL != null) {

														sb_tFileOutputDelimited_23
																.append(

																row9.HLEVEL

																);

													}

													sb_tFileOutputDelimited_23
															.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_23);

													nb_line_tFileOutputDelimited_23++;

													outtFileOutputDelimited_23
															.write(sb_tFileOutputDelimited_23
																	.toString());

													tos_count_tFileOutputDelimited_23++;

													/**
													 * [tFileOutputDelimited_23
													 * main ] stop
													 */

												} // End of branch "row9"

											} // End of branch "asd"

										} // End of branch "out11"

									} // close loop of lookup
										// 'fromTemp5ItemGroup' // G_TM_M_043

								} // G_TM_M_280 close main tMap filter for table
									// 'fromItem'

							} // End of branch "row27"

							/**
							 * [tFileInputXML_16 end ] start
							 */

							currentComponent = "tFileInputXML_16";

						}
					}
					globalMap.put("tFileInputXML_16_NB_LINE",
							nb_line_tFileInputXML_16);

					ok_Hash.put("tFileInputXML_16", true);
					end_Hash.put("tFileInputXML_16", System.currentTimeMillis());

					/**
					 * [tFileInputXML_16 end ] stop
					 */

					/**
					 * [tJavaRow_2 end ] start
					 */

					currentComponent = "tJavaRow_2";

					globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);

					ok_Hash.put("tJavaRow_2", true);
					end_Hash.put("tJavaRow_2", System.currentTimeMillis());

					/**
					 * [tJavaRow_2 end ] stop
					 */

					/**
					 * [tMap_15 end ] start
					 */

					currentComponent = "tMap_15";

					// ###############################
					// # Lookup hashes releasing
					if (tHash_Lookup_fromTemp5ItemGroup != null) {
						tHash_Lookup_fromTemp5ItemGroup.endGet();
					}
					globalMap.remove("tHash_Lookup_fromTemp5ItemGroup");

					if (tHash_Lookup_fromItemNames != null) {
						tHash_Lookup_fromItemNames.endGet();
					}
					globalMap.remove("tHash_Lookup_fromItemNames");

					// ###############################

					ok_Hash.put("tMap_15", true);
					end_Hash.put("tMap_15", System.currentTimeMillis());

					/**
					 * [tMap_15 end ] stop
					 */

					/**
					 * [tJavaRow_10 end ] start
					 */

					currentComponent = "tJavaRow_10";

					globalMap.put("tJavaRow_10_NB_LINE", nb_line_tJavaRow_10);

					ok_Hash.put("tJavaRow_10", true);
					end_Hash.put("tJavaRow_10", System.currentTimeMillis());

					/**
					 * [tJavaRow_10 end ] stop
					 */

					/**
					 * [tMap_29 end ] start
					 */

					currentComponent = "tMap_29";

					// ###############################
					// # Lookup hashes releasing
					if (tHash_Lookup_row14 != null) {
						tHash_Lookup_row14.endGet();
					}
					globalMap.remove("tHash_Lookup_row14");

					// ###############################

					ok_Hash.put("tMap_29", true);
					end_Hash.put("tMap_29", System.currentTimeMillis());

					/**
					 * [tMap_29 end ] stop
					 */

					/**
					 * [tUniqRow_3 end ] start
					 */

					currentComponent = "tUniqRow_3";

					globalMap.put("tUniqRow_3_NB_UNIQUES",
							nb_uniques_tUniqRow_3);
					globalMap.put("tUniqRow_3_NB_DUPLICATES",
							nb_duplicates_tUniqRow_3);

					ok_Hash.put("tUniqRow_3", true);
					end_Hash.put("tUniqRow_3", System.currentTimeMillis());

					/**
					 * [tUniqRow_3 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_23 end ] start
					 */

					currentComponent = "tFileOutputDelimited_23";

				} finally {
					if (outtFileOutputDelimited_23 != null) {
						outtFileOutputDelimited_23.flush();
						outtFileOutputDelimited_23.close();
					}
					globalMap.put("tFileOutputDelimited_23_NB_LINE",
							nb_line_tFileOutputDelimited_23);
					globalMap.put("tFileOutputDelimited_23_FILE_NAME",
							fileName_tFileOutputDelimited_23);
				} // finally

				ok_Hash.put("tFileOutputDelimited_23", true);
				end_Hash.put("tFileOutputDelimited_23",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_23 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputXML_16:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tRowGenerator_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		} finally {
			// free memory for "tMap_29"
			globalMap.remove("tHash_Lookup_row14");

			// free memory for "tMap_15"
			globalMap.remove("tHash_Lookup_fromTemp5ItemGroup");

			// free memory for "tMap_15"
			globalMap.remove("tHash_Lookup_fromItemNames");

		}

		globalMap.put("tFileInputXML_16_SUBPROCESS_STATE", 1);
	}

	public static class out6Struct implements
			routines.system.IPersistableRow<out6Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public java.util.Date Update_Date;

		public java.util.Date getUpdate_Date() {
			return this.Update_Date;
		}

		public java.util.Date Import_Date;

		public java.util.Date getImport_Date() {
			return this.Import_Date;
		}

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String visual;

		public String getVisual() {
			return this.visual;
		}

		public String itemCode;

		public String getItemCode() {
			return this.itemCode;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String xml;

		public String getXml() {
			return this.xml;
		}

		public String m_applied_path;

		public String getM_applied_path() {
			return this.m_applied_path;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readDate(dis);

					this.Import_Date = readDate(dis);

					this.Download_Date = readDate(dis);

					this.PathID = readString(dis);

					this.visual = readString(dis);

					this.itemCode = readString(dis);

					this.source = readString(dis);

					this.xml = readString(dis);

					this.m_applied_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// java.util.Date

				writeDate(this.Update_Date, dos);

				// java.util.Date

				writeDate(this.Import_Date, dos);

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.visual, dos);

				// String

				writeString(this.itemCode, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.xml, dos);

				// String

				writeString(this.m_applied_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + String.valueOf(Update_Date));
			sb.append(",Import_Date=" + String.valueOf(Import_Date));
			sb.append(",Download_Date=" + String.valueOf(Download_Date));
			sb.append(",PathID=" + PathID);
			sb.append(",visual=" + visual);
			sb.append(",itemCode=" + itemCode);
			sb.append(",source=" + source);
			sb.append(",xml=" + xml);
			sb.append(",m_applied_path=" + m_applied_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row31Struct implements
			routines.system.IPersistableRow<row31Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String itemCode;

		public String getItemCode() {
			return this.itemCode;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.PathID = readString(dis);

					this.itemCode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.itemCode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",PathID=" + PathID);
			sb.append(",itemCode=" + itemCode);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row31Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfout6Struct implements
			routines.system.IPersistableRow<copyOfout6Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String itemCode;

		public String getItemCode() {
			return this.itemCode;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.PathID = readString(dis);

					this.itemCode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.itemCode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",PathID=" + PathID);
			sb.append(",itemCode=" + itemCode);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfout6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row32Struct implements
			routines.system.IPersistableRow<row32Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String newColumn;

		public String getNewColumn() {
			return this.newColumn;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.newColumn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.newColumn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("newColumn=" + newColumn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row32Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tRowGenerator_1Struct implements
			routines.system.IPersistableRow<after_tRowGenerator_1Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String newColumn;

		public String getNewColumn() {
			return this.newColumn;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.newColumn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.newColumn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("newColumn=" + newColumn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tRowGenerator_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfout6_0Struct implements
			routines.system.IPersistableRow<copyOfout6_0Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String itemCode;

		public String getItemCode() {
			return this.itemCode;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.PathID = readString(dis);

					this.itemCode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.itemCode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",PathID=" + PathID);
			sb.append(",itemCode=" + itemCode);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfout6_0Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row30Struct implements
			routines.system.IPersistableRow<row30Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String StudyID;

		public String getStudyID() {
			return this.StudyID;
		}

		public String MetaID;

		public String getMetaID() {
			return this.MetaID;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String QuestionID;

		public String getQuestionID() {
			return this.QuestionID;
		}

		public String ItemID;

		public String getItemID() {
			return this.ItemID;
		}

		public String ParentItem;

		public String getParentItem() {
			return this.ParentItem;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String VisitNo;

		public String getVisitNo() {
			return this.VisitNo;
		}

		public String Sequence;

		public String getSequence() {
			return this.Sequence;
		}

		public String hidden;

		public String getHidden() {
			return this.hidden;
		}

		public String FormFamily;

		public String getFormFamily() {
			return this.FormFamily;
		}

		public String AdditionalData;

		public String getAdditionalData() {
			return this.AdditionalData;
		}

		public String item_Datatype;

		public String getItem_Datatype() {
			return this.item_Datatype;
		}

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.StudyID = readString(dis);

					this.MetaID = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.QuestionID = readString(dis);

					this.ItemID = readString(dis);

					this.ParentItem = readString(dis);

					this.Name = readString(dis);

					this.VisitNo = readString(dis);

					this.Sequence = readString(dis);

					this.hidden = readString(dis);

					this.FormFamily = readString(dis);

					this.AdditionalData = readString(dis);

					this.item_Datatype = readString(dis);

					this.HLEVEL = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.StudyID, dos);

				// String

				writeString(this.MetaID, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.QuestionID, dos);

				// String

				writeString(this.ItemID, dos);

				// String

				writeString(this.ParentItem, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.VisitNo, dos);

				// String

				writeString(this.Sequence, dos);

				// String

				writeString(this.hidden, dos);

				// String

				writeString(this.FormFamily, dos);

				// String

				writeString(this.AdditionalData, dos);

				// String

				writeString(this.item_Datatype, dos);

				// Integer

				writeInteger(this.HLEVEL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("StudyID=" + StudyID);
			sb.append(",MetaID=" + MetaID);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",QuestionID=" + QuestionID);
			sb.append(",ItemID=" + ItemID);
			sb.append(",ParentItem=" + ParentItem);
			sb.append(",Name=" + Name);
			sb.append(",VisitNo=" + VisitNo);
			sb.append(",Sequence=" + Sequence);
			sb.append(",hidden=" + hidden);
			sb.append(",FormFamily=" + FormFamily);
			sb.append(",AdditionalData=" + AdditionalData);
			sb.append(",item_Datatype=" + item_Datatype);
			sb.append(",HLEVEL=" + String.valueOf(HLEVEL));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row30Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfcopyOfout6_0Struct implements
			routines.system.IPersistableRow<copyOfcopyOfout6_0Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String itemCode;

		public String getItemCode() {
			return this.itemCode;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.PathID = readString(dis);

					this.itemCode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.itemCode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",PathID=" + PathID);
			sb.append(",itemCode=" + itemCode);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfout6_0Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row33Struct implements
			routines.system.IPersistableRow<row33Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String StudyID;

		public String getStudyID() {
			return this.StudyID;
		}

		public String MetaID;

		public String getMetaID() {
			return this.MetaID;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String QuestionID;

		public String getQuestionID() {
			return this.QuestionID;
		}

		public String ItemID;

		public String getItemID() {
			return this.ItemID;
		}

		public String ParentItem;

		public String getParentItem() {
			return this.ParentItem;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String VisitNo;

		public String getVisitNo() {
			return this.VisitNo;
		}

		public String Sequence;

		public String getSequence() {
			return this.Sequence;
		}

		public String hidden;

		public String getHidden() {
			return this.hidden;
		}

		public String FormFamily;

		public String getFormFamily() {
			return this.FormFamily;
		}

		public String AdditionalData;

		public String getAdditionalData() {
			return this.AdditionalData;
		}

		public String item_Datatype;

		public String getItem_Datatype() {
			return this.item_Datatype;
		}

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.StudyID = readString(dis);

					this.MetaID = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.QuestionID = readString(dis);

					this.ItemID = readString(dis);

					this.ParentItem = readString(dis);

					this.Name = readString(dis);

					this.VisitNo = readString(dis);

					this.Sequence = readString(dis);

					this.hidden = readString(dis);

					this.FormFamily = readString(dis);

					this.AdditionalData = readString(dis);

					this.item_Datatype = readString(dis);

					this.HLEVEL = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.StudyID, dos);

				// String

				writeString(this.MetaID, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.QuestionID, dos);

				// String

				writeString(this.ItemID, dos);

				// String

				writeString(this.ParentItem, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.VisitNo, dos);

				// String

				writeString(this.Sequence, dos);

				// String

				writeString(this.hidden, dos);

				// String

				writeString(this.FormFamily, dos);

				// String

				writeString(this.AdditionalData, dos);

				// String

				writeString(this.item_Datatype, dos);

				// Integer

				writeInteger(this.HLEVEL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("StudyID=" + StudyID);
			sb.append(",MetaID=" + MetaID);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",QuestionID=" + QuestionID);
			sb.append(",ItemID=" + ItemID);
			sb.append(",ParentItem=" + ParentItem);
			sb.append(",Name=" + Name);
			sb.append(",VisitNo=" + VisitNo);
			sb.append(",Sequence=" + Sequence);
			sb.append(",hidden=" + hidden);
			sb.append(",FormFamily=" + FormFamily);
			sb.append(",AdditionalData=" + AdditionalData);
			sb.append(",item_Datatype=" + item_Datatype);
			sb.append(",HLEVEL=" + String.valueOf(HLEVEL));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row33Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfcopyOfcopyOfout6_0Struct implements
			routines.system.IPersistableRow<copyOfcopyOfcopyOfout6_0Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String itemCode;

		public String getItemCode() {
			return this.itemCode;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.PathID = readString(dis);

					this.itemCode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.itemCode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",PathID=" + PathID);
			sb.append(",itemCode=" + itemCode);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfcopyOfout6_0Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row34Struct implements
			routines.system.IPersistableRow<row34Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String StudyID;

		public String getStudyID() {
			return this.StudyID;
		}

		public String MetaID;

		public String getMetaID() {
			return this.MetaID;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String QuestionID;

		public String getQuestionID() {
			return this.QuestionID;
		}

		public String ItemID;

		public String getItemID() {
			return this.ItemID;
		}

		public String ParentItem;

		public String getParentItem() {
			return this.ParentItem;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String VisitNo;

		public String getVisitNo() {
			return this.VisitNo;
		}

		public String Sequence;

		public String getSequence() {
			return this.Sequence;
		}

		public String hidden;

		public String getHidden() {
			return this.hidden;
		}

		public String FormFamily;

		public String getFormFamily() {
			return this.FormFamily;
		}

		public String AdditionalData;

		public String getAdditionalData() {
			return this.AdditionalData;
		}

		public String item_Datatype;

		public String getItem_Datatype() {
			return this.item_Datatype;
		}

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.StudyID = readString(dis);

					this.MetaID = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.QuestionID = readString(dis);

					this.ItemID = readString(dis);

					this.ParentItem = readString(dis);

					this.Name = readString(dis);

					this.VisitNo = readString(dis);

					this.Sequence = readString(dis);

					this.hidden = readString(dis);

					this.FormFamily = readString(dis);

					this.AdditionalData = readString(dis);

					this.item_Datatype = readString(dis);

					this.HLEVEL = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.StudyID, dos);

				// String

				writeString(this.MetaID, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.QuestionID, dos);

				// String

				writeString(this.ItemID, dos);

				// String

				writeString(this.ParentItem, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.VisitNo, dos);

				// String

				writeString(this.Sequence, dos);

				// String

				writeString(this.hidden, dos);

				// String

				writeString(this.FormFamily, dos);

				// String

				writeString(this.AdditionalData, dos);

				// String

				writeString(this.item_Datatype, dos);

				// Integer

				writeInteger(this.HLEVEL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("StudyID=" + StudyID);
			sb.append(",MetaID=" + MetaID);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",QuestionID=" + QuestionID);
			sb.append(",ItemID=" + ItemID);
			sb.append(",ParentItem=" + ParentItem);
			sb.append(",Name=" + Name);
			sb.append(",VisitNo=" + VisitNo);
			sb.append(",Sequence=" + Sequence);
			sb.append(",hidden=" + hidden);
			sb.append(",FormFamily=" + FormFamily);
			sb.append(",AdditionalData=" + AdditionalData);
			sb.append(",item_Datatype=" + item_Datatype);
			sb.append(",HLEVEL=" + String.valueOf(HLEVEL));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row34Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfcopyOfcopyOfout6_0_0Struct implements
			routines.system.IPersistableRow<copyOfcopyOfcopyOfout6_0_0Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String itemCode;

		public String getItemCode() {
			return this.itemCode;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.PathID = readString(dis);

					this.itemCode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.itemCode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",PathID=" + PathID);
			sb.append(",itemCode=" + itemCode);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfcopyOfout6_0_0Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row35Struct implements
			routines.system.IPersistableRow<row35Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String StudyID;

		public String getStudyID() {
			return this.StudyID;
		}

		public String MetaID;

		public String getMetaID() {
			return this.MetaID;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String QuestionID;

		public String getQuestionID() {
			return this.QuestionID;
		}

		public String ItemID;

		public String getItemID() {
			return this.ItemID;
		}

		public String ParentItem;

		public String getParentItem() {
			return this.ParentItem;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String VisitNo;

		public String getVisitNo() {
			return this.VisitNo;
		}

		public String Sequence;

		public String getSequence() {
			return this.Sequence;
		}

		public String hidden;

		public String getHidden() {
			return this.hidden;
		}

		public String FormFamily;

		public String getFormFamily() {
			return this.FormFamily;
		}

		public String AdditionalData;

		public String getAdditionalData() {
			return this.AdditionalData;
		}

		public String item_Datatype;

		public String getItem_Datatype() {
			return this.item_Datatype;
		}

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.StudyID = readString(dis);

					this.MetaID = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.QuestionID = readString(dis);

					this.ItemID = readString(dis);

					this.ParentItem = readString(dis);

					this.Name = readString(dis);

					this.VisitNo = readString(dis);

					this.Sequence = readString(dis);

					this.hidden = readString(dis);

					this.FormFamily = readString(dis);

					this.AdditionalData = readString(dis);

					this.item_Datatype = readString(dis);

					this.HLEVEL = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.StudyID, dos);

				// String

				writeString(this.MetaID, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.QuestionID, dos);

				// String

				writeString(this.ItemID, dos);

				// String

				writeString(this.ParentItem, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.VisitNo, dos);

				// String

				writeString(this.Sequence, dos);

				// String

				writeString(this.hidden, dos);

				// String

				writeString(this.FormFamily, dos);

				// String

				writeString(this.AdditionalData, dos);

				// String

				writeString(this.item_Datatype, dos);

				// Integer

				writeInteger(this.HLEVEL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("StudyID=" + StudyID);
			sb.append(",MetaID=" + MetaID);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",QuestionID=" + QuestionID);
			sb.append(",ItemID=" + ItemID);
			sb.append(",ParentItem=" + ParentItem);
			sb.append(",Name=" + Name);
			sb.append(",VisitNo=" + VisitNo);
			sb.append(",Sequence=" + Sequence);
			sb.append(",hidden=" + hidden);
			sb.append(",FormFamily=" + FormFamily);
			sb.append(",AdditionalData=" + AdditionalData);
			sb.append(",item_Datatype=" + item_Datatype);
			sb.append(",HLEVEL=" + String.valueOf(HLEVEL));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row35Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfcopyOfcopyOfout6_0_1Struct implements
			routines.system.IPersistableRow<copyOfcopyOfcopyOfout6_0_1Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String itemCode;

		public String getItemCode() {
			return this.itemCode;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.PathID = readString(dis);

					this.itemCode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.itemCode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",PathID=" + PathID);
			sb.append(",itemCode=" + itemCode);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfcopyOfout6_0_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row36Struct implements
			routines.system.IPersistableRow<row36Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String StudyID;

		public String getStudyID() {
			return this.StudyID;
		}

		public String MetaID;

		public String getMetaID() {
			return this.MetaID;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String QuestionID;

		public String getQuestionID() {
			return this.QuestionID;
		}

		public String ItemID;

		public String getItemID() {
			return this.ItemID;
		}

		public String ParentItem;

		public String getParentItem() {
			return this.ParentItem;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String VisitNo;

		public String getVisitNo() {
			return this.VisitNo;
		}

		public String Sequence;

		public String getSequence() {
			return this.Sequence;
		}

		public String hidden;

		public String getHidden() {
			return this.hidden;
		}

		public String FormFamily;

		public String getFormFamily() {
			return this.FormFamily;
		}

		public String AdditionalData;

		public String getAdditionalData() {
			return this.AdditionalData;
		}

		public String item_Datatype;

		public String getItem_Datatype() {
			return this.item_Datatype;
		}

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.StudyID = readString(dis);

					this.MetaID = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.QuestionID = readString(dis);

					this.ItemID = readString(dis);

					this.ParentItem = readString(dis);

					this.Name = readString(dis);

					this.VisitNo = readString(dis);

					this.Sequence = readString(dis);

					this.hidden = readString(dis);

					this.FormFamily = readString(dis);

					this.AdditionalData = readString(dis);

					this.item_Datatype = readString(dis);

					this.HLEVEL = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.StudyID, dos);

				// String

				writeString(this.MetaID, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.QuestionID, dos);

				// String

				writeString(this.ItemID, dos);

				// String

				writeString(this.ParentItem, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.VisitNo, dos);

				// String

				writeString(this.Sequence, dos);

				// String

				writeString(this.hidden, dos);

				// String

				writeString(this.FormFamily, dos);

				// String

				writeString(this.AdditionalData, dos);

				// String

				writeString(this.item_Datatype, dos);

				// Integer

				writeInteger(this.HLEVEL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("StudyID=" + StudyID);
			sb.append(",MetaID=" + MetaID);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",QuestionID=" + QuestionID);
			sb.append(",ItemID=" + ItemID);
			sb.append(",ParentItem=" + ParentItem);
			sb.append(",Name=" + Name);
			sb.append(",VisitNo=" + VisitNo);
			sb.append(",Sequence=" + Sequence);
			sb.append(",hidden=" + hidden);
			sb.append(",FormFamily=" + FormFamily);
			sb.append(",AdditionalData=" + AdditionalData);
			sb.append(",item_Datatype=" + item_Datatype);
			sb.append(",HLEVEL=" + String.valueOf(HLEVEL));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row36Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfcopyOfcopyOfout6_0_2Struct implements
			routines.system.IPersistableRow<copyOfcopyOfcopyOfout6_0_2Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String itemCode;

		public String getItemCode() {
			return this.itemCode;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.PathID = readString(dis);

					this.itemCode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.itemCode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",PathID=" + PathID);
			sb.append(",itemCode=" + itemCode);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfcopyOfout6_0_2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row38Struct implements
			routines.system.IPersistableRow<row38Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String StudyID;

		public String getStudyID() {
			return this.StudyID;
		}

		public String MetaID;

		public String getMetaID() {
			return this.MetaID;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String QuestionID;

		public String getQuestionID() {
			return this.QuestionID;
		}

		public String ItemID;

		public String getItemID() {
			return this.ItemID;
		}

		public String ParentItem;

		public String getParentItem() {
			return this.ParentItem;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String VisitNo;

		public String getVisitNo() {
			return this.VisitNo;
		}

		public String Sequence;

		public String getSequence() {
			return this.Sequence;
		}

		public String hidden;

		public String getHidden() {
			return this.hidden;
		}

		public String FormFamily;

		public String getFormFamily() {
			return this.FormFamily;
		}

		public String AdditionalData;

		public String getAdditionalData() {
			return this.AdditionalData;
		}

		public String item_Datatype;

		public String getItem_Datatype() {
			return this.item_Datatype;
		}

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.StudyID = readString(dis);

					this.MetaID = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.QuestionID = readString(dis);

					this.ItemID = readString(dis);

					this.ParentItem = readString(dis);

					this.Name = readString(dis);

					this.VisitNo = readString(dis);

					this.Sequence = readString(dis);

					this.hidden = readString(dis);

					this.FormFamily = readString(dis);

					this.AdditionalData = readString(dis);

					this.item_Datatype = readString(dis);

					this.HLEVEL = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.StudyID, dos);

				// String

				writeString(this.MetaID, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.QuestionID, dos);

				// String

				writeString(this.ItemID, dos);

				// String

				writeString(this.ParentItem, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.VisitNo, dos);

				// String

				writeString(this.Sequence, dos);

				// String

				writeString(this.hidden, dos);

				// String

				writeString(this.FormFamily, dos);

				// String

				writeString(this.AdditionalData, dos);

				// String

				writeString(this.item_Datatype, dos);

				// Integer

				writeInteger(this.HLEVEL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("StudyID=" + StudyID);
			sb.append(",MetaID=" + MetaID);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",QuestionID=" + QuestionID);
			sb.append(",ItemID=" + ItemID);
			sb.append(",ParentItem=" + ParentItem);
			sb.append(",Name=" + Name);
			sb.append(",VisitNo=" + VisitNo);
			sb.append(",Sequence=" + Sequence);
			sb.append(",hidden=" + hidden);
			sb.append(",FormFamily=" + FormFamily);
			sb.append(",AdditionalData=" + AdditionalData);
			sb.append(",item_Datatype=" + item_Datatype);
			sb.append(",HLEVEL=" + String.valueOf(HLEVEL));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row38Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfcopyOfout6Struct implements
			routines.system.IPersistableRow<copyOfcopyOfout6Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Path;

		public String getPath() {
			return this.Path;
		}

		public String DataType;

		public String getDataType() {
			return this.DataType;
		}

		public String Update_Date;

		public String getUpdate_Date() {
			return this.Update_Date;
		}

		public String Import_Date;

		public String getImport_Date() {
			return this.Import_Date;
		}

		public String Download_Date;

		public String getDownload_Date() {
			return this.Download_Date;
		}

		public String PathID;

		public String getPathID() {
			return this.PathID;
		}

		public String itemCode;

		public String getItemCode() {
			return this.itemCode;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.HLEVEL = readInteger(dis);

					this.Name = readString(dis);

					this.Path = readString(dis);

					this.DataType = readString(dis);

					this.Update_Date = readString(dis);

					this.Import_Date = readString(dis);

					this.Download_Date = readString(dis);

					this.PathID = readString(dis);

					this.itemCode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.HLEVEL, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Path, dos);

				// String

				writeString(this.DataType, dos);

				// String

				writeString(this.Update_Date, dos);

				// String

				writeString(this.Import_Date, dos);

				// String

				writeString(this.Download_Date, dos);

				// String

				writeString(this.PathID, dos);

				// String

				writeString(this.itemCode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HLEVEL=" + String.valueOf(HLEVEL));
			sb.append(",Name=" + Name);
			sb.append(",Path=" + Path);
			sb.append(",DataType=" + DataType);
			sb.append(",Update_Date=" + Update_Date);
			sb.append(",Import_Date=" + Import_Date);
			sb.append(",Download_Date=" + Download_Date);
			sb.append(",PathID=" + PathID);
			sb.append(",itemCode=" + itemCode);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfout6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String newColumn;

		public String getNewColumn() {
			return this.newColumn;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.newColumn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.newColumn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("newColumn=" + newColumn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRowGenerator_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputXML_17Process(globalMap);

				row32Struct row32 = new row32Struct();
				copyOfout6Struct copyOfout6 = new copyOfout6Struct();

				row6Struct row6 = new row6Struct();
				copyOfcopyOfout6Struct copyOfcopyOfout6 = new copyOfcopyOfout6Struct();

				row30Struct row30 = new row30Struct();
				copyOfout6_0Struct copyOfout6_0 = new copyOfout6_0Struct();

				row33Struct row33 = new row33Struct();
				copyOfcopyOfout6_0Struct copyOfcopyOfout6_0 = new copyOfcopyOfout6_0Struct();

				row34Struct row34 = new row34Struct();
				copyOfcopyOfcopyOfout6_0Struct copyOfcopyOfcopyOfout6_0 = new copyOfcopyOfcopyOfout6_0Struct();

				row35Struct row35 = new row35Struct();
				copyOfcopyOfcopyOfout6_0_0Struct copyOfcopyOfcopyOfout6_0_0 = new copyOfcopyOfcopyOfout6_0_0Struct();

				row36Struct row36 = new row36Struct();
				copyOfcopyOfcopyOfout6_0_1Struct copyOfcopyOfcopyOfout6_0_1 = new copyOfcopyOfcopyOfout6_0_1Struct();

				row38Struct row38 = new row38Struct();
				copyOfcopyOfcopyOfout6_0_2Struct copyOfcopyOfcopyOfout6_0_2 = new copyOfcopyOfcopyOfout6_0_2Struct();

				row31Struct row31 = new row31Struct();
				out6Struct out6 = new out6Struct();

				/**
				 * [tFileOutputDelimited_26 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_26", false);
				start_Hash.put("tFileOutputDelimited_26",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_26";

				int tos_count_tFileOutputDelimited_26 = 0;

				String fileName_tFileOutputDelimited_26 = "";
				fileName_tFileOutputDelimited_26 = (new java.io.File(
						context.folderMain + context.folderOutput + "ont.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_26 = null;
				String extension_tFileOutputDelimited_26 = null;
				String directory_tFileOutputDelimited_26 = null;
				if ((fileName_tFileOutputDelimited_26.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_26.lastIndexOf(".") < fileName_tFileOutputDelimited_26
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_26 = fileName_tFileOutputDelimited_26;
						extension_tFileOutputDelimited_26 = "";
					} else {
						fullName_tFileOutputDelimited_26 = fileName_tFileOutputDelimited_26
								.substring(0, fileName_tFileOutputDelimited_26
										.lastIndexOf("."));
						extension_tFileOutputDelimited_26 = fileName_tFileOutputDelimited_26
								.substring(fileName_tFileOutputDelimited_26
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_26 = fileName_tFileOutputDelimited_26
							.substring(0, fileName_tFileOutputDelimited_26
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_26.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_26 = fileName_tFileOutputDelimited_26
								.substring(0, fileName_tFileOutputDelimited_26
										.lastIndexOf("."));
						extension_tFileOutputDelimited_26 = fileName_tFileOutputDelimited_26
								.substring(fileName_tFileOutputDelimited_26
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_26 = fileName_tFileOutputDelimited_26;
						extension_tFileOutputDelimited_26 = "";
					}
					directory_tFileOutputDelimited_26 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_26 = true;
				java.io.File filetFileOutputDelimited_26 = new java.io.File(
						fileName_tFileOutputDelimited_26);
				globalMap.put("tFileOutputDelimited_26_FILE_NAME",
						fileName_tFileOutputDelimited_26);

				int nb_line_tFileOutputDelimited_26 = 0;
				int splitEvery_tFileOutputDelimited_26 = 1000;
				int splitedFileNo_tFileOutputDelimited_26 = 0;
				int currentRow_tFileOutputDelimited_26 = 0;

				final String OUT_DELIM_tFileOutputDelimited_26 = /**
				 * Start field
				 * tFileOutputDelimited_26:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_26:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_26 = /**
				 * Start
				 * field tFileOutputDelimited_26:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_26:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_26 != null
						&& directory_tFileOutputDelimited_26.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_26 = new java.io.File(
							directory_tFileOutputDelimited_26);
					if (!dir_tFileOutputDelimited_26.exists()) {
						dir_tFileOutputDelimited_26.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_26 = null;
				try {
					outtFileOutputDelimited_26 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_26,
											false), "ISO-8859-15"));

					if (filetFileOutputDelimited_26.length() == 0) {

						outtFileOutputDelimited_26.write("HLEVEL");

						outtFileOutputDelimited_26
								.write(OUT_DELIM_tFileOutputDelimited_26);

						outtFileOutputDelimited_26.write("Name");

						outtFileOutputDelimited_26
								.write(OUT_DELIM_tFileOutputDelimited_26);

						outtFileOutputDelimited_26.write("Path");

						outtFileOutputDelimited_26
								.write(OUT_DELIM_tFileOutputDelimited_26);

						outtFileOutputDelimited_26.write("DataType");

						outtFileOutputDelimited_26
								.write(OUT_DELIM_tFileOutputDelimited_26);

						outtFileOutputDelimited_26.write("Update_Date");

						outtFileOutputDelimited_26
								.write(OUT_DELIM_tFileOutputDelimited_26);

						outtFileOutputDelimited_26.write("Import_Date");

						outtFileOutputDelimited_26
								.write(OUT_DELIM_tFileOutputDelimited_26);

						outtFileOutputDelimited_26.write("Download_Date");

						outtFileOutputDelimited_26
								.write(OUT_DELIM_tFileOutputDelimited_26);

						outtFileOutputDelimited_26.write("PathID");

						outtFileOutputDelimited_26
								.write(OUT_DELIM_tFileOutputDelimited_26);

						outtFileOutputDelimited_26.write("visual");

						outtFileOutputDelimited_26
								.write(OUT_DELIM_tFileOutputDelimited_26);

						outtFileOutputDelimited_26.write("itemCode");

						outtFileOutputDelimited_26
								.write(OUT_DELIM_tFileOutputDelimited_26);

						outtFileOutputDelimited_26.write("source");

						outtFileOutputDelimited_26
								.write(OUT_DELIM_tFileOutputDelimited_26);

						outtFileOutputDelimited_26.write("xml");

						outtFileOutputDelimited_26
								.write(OUT_DELIM_tFileOutputDelimited_26);

						outtFileOutputDelimited_26.write("m_applied_path");

						outtFileOutputDelimited_26
								.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_26);
						outtFileOutputDelimited_26.flush();
					}

					/**
					 * [tFileOutputDelimited_26 begin ] stop
					 */

					/**
					 * [tMap_10 begin ] start
					 */

					ok_Hash.put("tMap_10", false);
					start_Hash.put("tMap_10", System.currentTimeMillis());
					currentComponent = "tMap_10";

					int tos_count_tMap_10 = 0;

					// ###############################
					// # Lookup's keys initialization

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) globalMap
							.get("tHash_Lookup_row5"));

					tHash_Lookup_row5.initGet();

					row5Struct row5HashKey = new row5Struct();
					row5Struct row5Default = new row5Struct();
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_10__Struct {
						boolean var1;
					}
					Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					out6Struct out6_tmp = new out6Struct();
					// ###############################

					/**
					 * [tMap_10 begin ] stop
					 */

					/**
					 * [tUnite_1 begin ] start
					 */

					ok_Hash.put("tUnite_1", false);
					start_Hash.put("tUnite_1", System.currentTimeMillis());
					currentComponent = "tUnite_1";

					int tos_count_tUnite_1 = 0;

					int nb_line_tUnite_1 = 0;

					/**
					 * [tUnite_1 begin ] stop
					 */

					/**
					 * [tMap_17 begin ] start
					 */

					ok_Hash.put("tMap_17", false);
					start_Hash.put("tMap_17", System.currentTimeMillis());
					currentComponent = "tMap_17";

					int tos_count_tMap_17 = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_17__Struct {
					}
					Var__tMap_17__Struct Var__tMap_17 = new Var__tMap_17__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					copyOfout6Struct copyOfout6_tmp = new copyOfout6Struct();
					// ###############################

					/**
					 * [tMap_17 begin ] stop
					 */

					/**
					 * [tRowGenerator_1 begin ] start
					 */

					ok_Hash.put("tRowGenerator_1", false);
					start_Hash.put("tRowGenerator_1",
							System.currentTimeMillis());
					currentComponent = "tRowGenerator_1";

					int tos_count_tRowGenerator_1 = 0;

					int nb_line_tRowGenerator_1 = 0;
					int nb_max_row_tRowGenerator_1 = 1;

					class tRowGenerator_1Randomizer {
						public String getRandomnewColumn() {

							return TalendString.getAsciiRandomString(6);

						}
					}
					tRowGenerator_1Randomizer randtRowGenerator_1 = new tRowGenerator_1Randomizer();

					for (int itRowGenerator_1 = 0; itRowGenerator_1 < nb_max_row_tRowGenerator_1; itRowGenerator_1++) {
						row32.newColumn = randtRowGenerator_1
								.getRandomnewColumn();
						nb_line_tRowGenerator_1++;

						/**
						 * [tRowGenerator_1 begin ] stop
						 */
						/**
						 * [tRowGenerator_1 main ] start
						 */

						currentComponent = "tRowGenerator_1";

						tos_count_tRowGenerator_1++;

						/**
						 * [tRowGenerator_1 main ] stop
						 */

						/**
						 * [tMap_17 main ] start
						 */

						currentComponent = "tMap_17";

						boolean hasCasePrimitiveKeyWithNull_tMap_17 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_17 = false;
						boolean mainRowRejected_tMap_17 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_17__Struct Var = Var__tMap_17;// ###############################
							// ###############################
							// # Output tables

							copyOfout6 = null;

							// # Output table : 'copyOfout6'
							copyOfout6_tmp.HLEVEL = 0;
							copyOfout6_tmp.Name = context.i2b2HeadNodeName;
							copyOfout6_tmp.Path = "\\" + context.i2b2HeadNode;
							copyOfout6_tmp.DataType = null;
							copyOfout6_tmp.Update_Date = null;
							copyOfout6_tmp.Import_Date = null;
							copyOfout6_tmp.Download_Date = null;
							copyOfout6_tmp.PathID = null;
							copyOfout6_tmp.itemCode = null;
							copyOfout6 = copyOfout6_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_17 = false;

						tos_count_tMap_17++;

						/**
						 * [tMap_17 main ] stop
						 */
						// Start of branch "copyOfout6"
						if (copyOfout6 != null) {

							/**
							 * [tUnite_1 main ] start
							 */

							currentComponent = "tUnite_1";

							// ////////

							// for output
							row31 = new row31Struct();

							row31.HLEVEL = copyOfout6.HLEVEL;
							row31.Name = copyOfout6.Name;
							row31.Path = copyOfout6.Path;
							row31.DataType = copyOfout6.DataType;
							row31.Update_Date = copyOfout6.Update_Date;
							row31.Import_Date = copyOfout6.Import_Date;
							row31.Download_Date = copyOfout6.Download_Date;
							row31.PathID = copyOfout6.PathID;
							row31.itemCode = copyOfout6.itemCode;

							nb_line_tUnite_1++;

							// ////////

							tos_count_tUnite_1++;

							/**
							 * [tUnite_1 main ] stop
							 */

							/**
							 * [tMap_10 main ] start
							 */

							currentComponent = "tMap_10";

							boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_10 = false;
							boolean mainRowRejected_tMap_10 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row5"
							// /////////////////////////////////////////////

							boolean forceLooprow5 = false;

							row5Struct row5ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_10) { // G_TM_M_020

								tHash_Lookup_row5.lookup(row5HashKey);

								if (!tHash_Lookup_row5.hasNext()) { // G_TM_M_090

									forceLooprow5 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							else { // G 20 - G 21
								forceLooprow5 = true;
							} // G 21

							row5Struct row5 = null;

							while ((tHash_Lookup_row5 != null && tHash_Lookup_row5
									.hasNext()) || forceLooprow5) { // G_TM_M_043

								// CALL close loop of lookup 'row5'

								row5Struct fromLookup_row5 = null;
								row5 = row5Default;

								if (!forceLooprow5) { // G 46

									fromLookup_row5 = tHash_Lookup_row5.next();

									if (fromLookup_row5 != null) {
										row5 = fromLookup_row5;
									}

								} // G 46

								forceLooprow5 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_10__Struct Var = Var__tMap_10;
									Var.var1 = false;// ###############################
									// ###############################
									// # Output tables

									out6 = null;

									// # Output table : 'out6'
									out6_tmp.HLEVEL = row31.HLEVEL;
									out6_tmp.Name = row31.Name;
									out6_tmp.Path = row31.Path + "\\";
									out6_tmp.DataType = row31.DataType;
									out6_tmp.Update_Date = null;
									out6_tmp.Import_Date = TalendDate
											.getCurrentDate();
									out6_tmp.Download_Date = row5.Download_Date;
									out6_tmp.PathID = row31.PathID;
									out6_tmp.visual = "FAE";
									out6_tmp.itemCode = row31.itemCode;
									out6_tmp.source = (row5.source != null) ? row5.source
											+ " " + row5.SourceSystemVersion
											: "";
									out6_tmp.xml = null;
									out6_tmp.m_applied_path = "@";
									out6 = out6_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_10 = false;

								tos_count_tMap_10++;

								/**
								 * [tMap_10 main ] stop
								 */
								// Start of branch "out6"
								if (out6 != null) {

									/**
									 * [tFileOutputDelimited_26 main ] start
									 */

									currentComponent = "tFileOutputDelimited_26";

									StringBuilder sb_tFileOutputDelimited_26 = new StringBuilder();

									if (out6.HLEVEL != null) {

										sb_tFileOutputDelimited_26.append(

										out6.HLEVEL

										);

									}

									sb_tFileOutputDelimited_26
											.append(OUT_DELIM_tFileOutputDelimited_26);

									if (out6.Name != null) {

										sb_tFileOutputDelimited_26.append(

										out6.Name

										);

									}

									sb_tFileOutputDelimited_26
											.append(OUT_DELIM_tFileOutputDelimited_26);

									if (out6.Path != null) {

										sb_tFileOutputDelimited_26.append(

										out6.Path

										);

									}

									sb_tFileOutputDelimited_26
											.append(OUT_DELIM_tFileOutputDelimited_26);

									if (out6.DataType != null) {

										sb_tFileOutputDelimited_26.append(

										out6.DataType

										);

									}

									sb_tFileOutputDelimited_26
											.append(OUT_DELIM_tFileOutputDelimited_26);

									if (out6.Update_Date != null) {

										sb_tFileOutputDelimited_26.append(

										FormatterUtils.format_Date(
												out6.Update_Date, "yyyy-MM-dd")

										);

									}

									sb_tFileOutputDelimited_26
											.append(OUT_DELIM_tFileOutputDelimited_26);

									if (out6.Import_Date != null) {

										sb_tFileOutputDelimited_26.append(

										FormatterUtils.format_Date(
												out6.Import_Date, "yyyy-MM-dd")

										);

									}

									sb_tFileOutputDelimited_26
											.append(OUT_DELIM_tFileOutputDelimited_26);

									if (out6.Download_Date != null) {

										sb_tFileOutputDelimited_26.append(

										FormatterUtils.format_Date(
												out6.Download_Date,
												"yyyy-MM-dd")

										);

									}

									sb_tFileOutputDelimited_26
											.append(OUT_DELIM_tFileOutputDelimited_26);

									if (out6.PathID != null) {

										sb_tFileOutputDelimited_26.append(

										out6.PathID

										);

									}

									sb_tFileOutputDelimited_26
											.append(OUT_DELIM_tFileOutputDelimited_26);

									if (out6.visual != null) {

										sb_tFileOutputDelimited_26.append(

										out6.visual

										);

									}

									sb_tFileOutputDelimited_26
											.append(OUT_DELIM_tFileOutputDelimited_26);

									if (out6.itemCode != null) {

										sb_tFileOutputDelimited_26.append(

										out6.itemCode

										);

									}

									sb_tFileOutputDelimited_26
											.append(OUT_DELIM_tFileOutputDelimited_26);

									if (out6.source != null) {

										sb_tFileOutputDelimited_26.append(

										out6.source

										);

									}

									sb_tFileOutputDelimited_26
											.append(OUT_DELIM_tFileOutputDelimited_26);

									if (out6.xml != null) {

										sb_tFileOutputDelimited_26.append(

										out6.xml

										);

									}

									sb_tFileOutputDelimited_26
											.append(OUT_DELIM_tFileOutputDelimited_26);

									if (out6.m_applied_path != null) {

										sb_tFileOutputDelimited_26.append(

										out6.m_applied_path

										);

									}

									sb_tFileOutputDelimited_26
											.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_26);

									nb_line_tFileOutputDelimited_26++;

									outtFileOutputDelimited_26
											.write(sb_tFileOutputDelimited_26
													.toString());

									tos_count_tFileOutputDelimited_26++;

									/**
									 * [tFileOutputDelimited_26 main ] stop
									 */

								} // End of branch "out6"

							} // close loop of lookup 'row5' // G_TM_M_043

						} // End of branch "copyOfout6"

						/**
						 * [tRowGenerator_1 end ] start
						 */

						currentComponent = "tRowGenerator_1";

					}
					globalMap.put("tRowGenerator_1_NB_LINE",
							nb_line_tRowGenerator_1);

					ok_Hash.put("tRowGenerator_1", true);
					end_Hash.put("tRowGenerator_1", System.currentTimeMillis());

					/**
					 * [tRowGenerator_1 end ] stop
					 */

					/**
					 * [tMap_17 end ] start
					 */

					currentComponent = "tMap_17";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					ok_Hash.put("tMap_17", true);
					end_Hash.put("tMap_17", System.currentTimeMillis());

					/**
					 * [tMap_17 end ] stop
					 */

					/**
					 * [tMap_27 begin ] start
					 */

					ok_Hash.put("tMap_27", false);
					start_Hash.put("tMap_27", System.currentTimeMillis());
					currentComponent = "tMap_27";

					int tos_count_tMap_27 = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_27__Struct {
					}
					Var__tMap_27__Struct Var__tMap_27 = new Var__tMap_27__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					copyOfcopyOfout6Struct copyOfcopyOfout6_tmp = new copyOfcopyOfout6Struct();
					// ###############################

					/**
					 * [tMap_27 begin ] stop
					 */

					/**
					 * [tRowGenerator_2 begin ] start
					 */

					ok_Hash.put("tRowGenerator_2", false);
					start_Hash.put("tRowGenerator_2",
							System.currentTimeMillis());
					currentComponent = "tRowGenerator_2";

					int tos_count_tRowGenerator_2 = 0;

					int nb_line_tRowGenerator_2 = 0;
					int nb_max_row_tRowGenerator_2 = 1;

					class tRowGenerator_2Randomizer {
						public String getRandomnewColumn() {

							return TalendString.getAsciiRandomString(6);

						}
					}
					tRowGenerator_2Randomizer randtRowGenerator_2 = new tRowGenerator_2Randomizer();

					for (int itRowGenerator_2 = 0; itRowGenerator_2 < nb_max_row_tRowGenerator_2; itRowGenerator_2++) {
						row6.newColumn = randtRowGenerator_2
								.getRandomnewColumn();
						nb_line_tRowGenerator_2++;

						/**
						 * [tRowGenerator_2 begin ] stop
						 */
						/**
						 * [tRowGenerator_2 main ] start
						 */

						currentComponent = "tRowGenerator_2";

						tos_count_tRowGenerator_2++;

						/**
						 * [tRowGenerator_2 main ] stop
						 */

						/**
						 * [tMap_27 main ] start
						 */

						currentComponent = "tMap_27";

						boolean hasCasePrimitiveKeyWithNull_tMap_27 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_27 = false;
						boolean mainRowRejected_tMap_27 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_27__Struct Var = Var__tMap_27;// ###############################
							// ###############################
							// # Output tables

							copyOfcopyOfout6 = null;

							// # Output table : 'copyOfcopyOfout6'
							copyOfcopyOfout6_tmp.HLEVEL = 1;
							copyOfcopyOfout6_tmp.Name = context.MDPDName;
							copyOfcopyOfout6_tmp.Path = "\\"
									+ context.i2b2HeadNode + "\\"
									+ context.MDPD;
							copyOfcopyOfout6_tmp.DataType = null;
							copyOfcopyOfout6_tmp.Update_Date = null;
							copyOfcopyOfout6_tmp.Import_Date = null;
							copyOfcopyOfout6_tmp.Download_Date = null;
							copyOfcopyOfout6_tmp.PathID = null;
							copyOfcopyOfout6_tmp.itemCode = null;
							copyOfcopyOfout6 = copyOfcopyOfout6_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_27 = false;

						tos_count_tMap_27++;

						/**
						 * [tMap_27 main ] stop
						 */
						// Start of branch "copyOfcopyOfout6"
						if (copyOfcopyOfout6 != null) {

							/**
							 * [tUnite_1 main ] start
							 */

							currentComponent = "tUnite_1";

							// ////////

							// for output
							row31 = new row31Struct();

							row31.HLEVEL = copyOfcopyOfout6.HLEVEL;
							row31.Name = copyOfcopyOfout6.Name;
							row31.Path = copyOfcopyOfout6.Path;
							row31.DataType = copyOfcopyOfout6.DataType;
							row31.Update_Date = copyOfcopyOfout6.Update_Date;
							row31.Import_Date = copyOfcopyOfout6.Import_Date;
							row31.Download_Date = copyOfcopyOfout6.Download_Date;
							row31.PathID = copyOfcopyOfout6.PathID;
							row31.itemCode = copyOfcopyOfout6.itemCode;

							nb_line_tUnite_1++;

							// ////////

							tos_count_tUnite_1++;

							/**
							 * [tUnite_1 main ] stop
							 */

							/**
							 * [tMap_10 main ] start
							 */

							currentComponent = "tMap_10";

							boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_10 = false;
							boolean mainRowRejected_tMap_10 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row5"
							// /////////////////////////////////////////////

							boolean forceLooprow5 = false;

							row5Struct row5ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_10) { // G_TM_M_020

								tHash_Lookup_row5.lookup(row5HashKey);

								if (!tHash_Lookup_row5.hasNext()) { // G_TM_M_090

									forceLooprow5 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							else { // G 20 - G 21
								forceLooprow5 = true;
							} // G 21

							row5Struct row5 = null;

							while ((tHash_Lookup_row5 != null && tHash_Lookup_row5
									.hasNext()) || forceLooprow5) { // G_TM_M_043

								// CALL close loop of lookup 'row5'

								row5Struct fromLookup_row5 = null;
								row5 = row5Default;

								if (!forceLooprow5) { // G 46

									fromLookup_row5 = tHash_Lookup_row5.next();

									if (fromLookup_row5 != null) {
										row5 = fromLookup_row5;
									}

								} // G 46

								forceLooprow5 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_10__Struct Var = Var__tMap_10;
									Var.var1 = false;// ###############################
									// ###############################
									// # Output tables

									out6 = null;

									// # Output table : 'out6'
									out6_tmp.HLEVEL = row31.HLEVEL;
									out6_tmp.Name = row31.Name;
									out6_tmp.Path = row31.Path + "\\";
									out6_tmp.DataType = row31.DataType;
									out6_tmp.Update_Date = null;
									out6_tmp.Import_Date = TalendDate
											.getCurrentDate();
									out6_tmp.Download_Date = row5.Download_Date;
									out6_tmp.PathID = row31.PathID;
									out6_tmp.visual = "FAE";
									out6_tmp.itemCode = row31.itemCode;
									out6_tmp.source = (row5.source != null) ? row5.source
											+ " " + row5.SourceSystemVersion
											: "";
									out6_tmp.xml = null;
									out6_tmp.m_applied_path = "@";
									out6 = out6_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_10 = false;

								tos_count_tMap_10++;

								/**
								 * [tMap_10 main ] stop
								 */
								// Start of branch "out6"
								if (out6 != null) {

									/**
									 * [tFileOutputDelimited_26 main ] start
									 */

									currentComponent = "tFileOutputDelimited_26";

									StringBuilder sb_tFileOutputDelimited_26 = new StringBuilder();

									if (out6.HLEVEL != null) {

										sb_tFileOutputDelimited_26.append(

										out6.HLEVEL

										);

									}

									sb_tFileOutputDelimited_26
											.append(OUT_DELIM_tFileOutputDelimited_26);

									if (out6.Name != null) {

										sb_tFileOutputDelimited_26.append(

										out6.Name

										);

									}

									sb_tFileOutputDelimited_26
											.append(OUT_DELIM_tFileOutputDelimited_26);

									if (out6.Path != null) {

										sb_tFileOutputDelimited_26.append(

										out6.Path

										);

									}

									sb_tFileOutputDelimited_26
											.append(OUT_DELIM_tFileOutputDelimited_26);

									if (out6.DataType != null) {

										sb_tFileOutputDelimited_26.append(

										out6.DataType

										);

									}

									sb_tFileOutputDelimited_26
											.append(OUT_DELIM_tFileOutputDelimited_26);

									if (out6.Update_Date != null) {

										sb_tFileOutputDelimited_26.append(

										FormatterUtils.format_Date(
												out6.Update_Date, "yyyy-MM-dd")

										);

									}

									sb_tFileOutputDelimited_26
											.append(OUT_DELIM_tFileOutputDelimited_26);

									if (out6.Import_Date != null) {

										sb_tFileOutputDelimited_26.append(

										FormatterUtils.format_Date(
												out6.Import_Date, "yyyy-MM-dd")

										);

									}

									sb_tFileOutputDelimited_26
											.append(OUT_DELIM_tFileOutputDelimited_26);

									if (out6.Download_Date != null) {

										sb_tFileOutputDelimited_26.append(

										FormatterUtils.format_Date(
												out6.Download_Date,
												"yyyy-MM-dd")

										);

									}

									sb_tFileOutputDelimited_26
											.append(OUT_DELIM_tFileOutputDelimited_26);

									if (out6.PathID != null) {

										sb_tFileOutputDelimited_26.append(

										out6.PathID

										);

									}

									sb_tFileOutputDelimited_26
											.append(OUT_DELIM_tFileOutputDelimited_26);

									if (out6.visual != null) {

										sb_tFileOutputDelimited_26.append(

										out6.visual

										);

									}

									sb_tFileOutputDelimited_26
											.append(OUT_DELIM_tFileOutputDelimited_26);

									if (out6.itemCode != null) {

										sb_tFileOutputDelimited_26.append(

										out6.itemCode

										);

									}

									sb_tFileOutputDelimited_26
											.append(OUT_DELIM_tFileOutputDelimited_26);

									if (out6.source != null) {

										sb_tFileOutputDelimited_26.append(

										out6.source

										);

									}

									sb_tFileOutputDelimited_26
											.append(OUT_DELIM_tFileOutputDelimited_26);

									if (out6.xml != null) {

										sb_tFileOutputDelimited_26.append(

										out6.xml

										);

									}

									sb_tFileOutputDelimited_26
											.append(OUT_DELIM_tFileOutputDelimited_26);

									if (out6.m_applied_path != null) {

										sb_tFileOutputDelimited_26.append(

										out6.m_applied_path

										);

									}

									sb_tFileOutputDelimited_26
											.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_26);

									nb_line_tFileOutputDelimited_26++;

									outtFileOutputDelimited_26
											.write(sb_tFileOutputDelimited_26
													.toString());

									tos_count_tFileOutputDelimited_26++;

									/**
									 * [tFileOutputDelimited_26 main ] stop
									 */

								} // End of branch "out6"

							} // close loop of lookup 'row5' // G_TM_M_043

						} // End of branch "copyOfcopyOfout6"

						/**
						 * [tRowGenerator_2 end ] start
						 */

						currentComponent = "tRowGenerator_2";

					}
					globalMap.put("tRowGenerator_2_NB_LINE",
							nb_line_tRowGenerator_2);

					ok_Hash.put("tRowGenerator_2", true);
					end_Hash.put("tRowGenerator_2", System.currentTimeMillis());

					/**
					 * [tRowGenerator_2 end ] stop
					 */

					/**
					 * [tMap_27 end ] start
					 */

					currentComponent = "tMap_27";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					ok_Hash.put("tMap_27", true);
					end_Hash.put("tMap_27", System.currentTimeMillis());

					/**
					 * [tMap_27 end ] stop
					 */

					/**
					 * [tMap_18 begin ] start
					 */

					ok_Hash.put("tMap_18", false);
					start_Hash.put("tMap_18", System.currentTimeMillis());
					currentComponent = "tMap_18";

					int tos_count_tMap_18 = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_18__Struct {
					}
					Var__tMap_18__Struct Var__tMap_18 = new Var__tMap_18__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					copyOfout6_0Struct copyOfout6_0_tmp = new copyOfout6_0Struct();
					// ###############################

					/**
					 * [tMap_18 begin ] stop
					 */

					/**
					 * [tFileInputDelimited_17 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_17", false);
					start_Hash.put("tFileInputDelimited_17",
							System.currentTimeMillis());
					currentComponent = "tFileInputDelimited_17";

					int tos_count_tFileInputDelimited_17 = 0;

					int nb_line_tFileInputDelimited_17 = 0;
					org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_17 = null;
					try {

						Object filename_tFileInputDelimited_17 = ((String) globalMap
								.get("tCreateTemporaryFile_3_FILEPATH"));
						if (filename_tFileInputDelimited_17 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_17 = 0, random_value_tFileInputDelimited_17 = -1;
							if (footer_value_tFileInputDelimited_17 > 0
									|| random_value_tFileInputDelimited_17 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer and random shouldn't be bigger than 0.");
							}

						}
						try {
							fid_tFileInputDelimited_17 = new org.talend.fileprocess.FileInputDelimited(
									((String) globalMap
											.get("tCreateTemporaryFile_3_FILEPATH")),
									"ISO-8859-15", "\t", "\n", true, 0, 0, -1,
									-1, false);
						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());

						}

						while (fid_tFileInputDelimited_17 != null
								&& fid_tFileInputDelimited_17.nextRecord()) {

							row30 = null;

							boolean whetherReject_tFileInputDelimited_17 = false;
							row30 = new row30Struct();
							try {

								int columnIndexWithD_tFileInputDelimited_17 = 0;

								String temp = "";

								columnIndexWithD_tFileInputDelimited_17 = 0;

								row30.StudyID = fid_tFileInputDelimited_17
										.get(columnIndexWithD_tFileInputDelimited_17);

								columnIndexWithD_tFileInputDelimited_17 = 1;

								row30.MetaID = fid_tFileInputDelimited_17
										.get(columnIndexWithD_tFileInputDelimited_17);

								columnIndexWithD_tFileInputDelimited_17 = 2;

								row30.VisitID = fid_tFileInputDelimited_17
										.get(columnIndexWithD_tFileInputDelimited_17);

								columnIndexWithD_tFileInputDelimited_17 = 3;

								row30.FormID = fid_tFileInputDelimited_17
										.get(columnIndexWithD_tFileInputDelimited_17);

								columnIndexWithD_tFileInputDelimited_17 = 4;

								row30.QuestionID = fid_tFileInputDelimited_17
										.get(columnIndexWithD_tFileInputDelimited_17);

								columnIndexWithD_tFileInputDelimited_17 = 5;

								row30.ItemID = fid_tFileInputDelimited_17
										.get(columnIndexWithD_tFileInputDelimited_17);

								columnIndexWithD_tFileInputDelimited_17 = 6;

								row30.ParentItem = fid_tFileInputDelimited_17
										.get(columnIndexWithD_tFileInputDelimited_17);

								columnIndexWithD_tFileInputDelimited_17 = 7;

								row30.Name = fid_tFileInputDelimited_17
										.get(columnIndexWithD_tFileInputDelimited_17);

								columnIndexWithD_tFileInputDelimited_17 = 8;

								row30.VisitNo = fid_tFileInputDelimited_17
										.get(columnIndexWithD_tFileInputDelimited_17);

								columnIndexWithD_tFileInputDelimited_17 = 9;

								row30.Sequence = fid_tFileInputDelimited_17
										.get(columnIndexWithD_tFileInputDelimited_17);

								columnIndexWithD_tFileInputDelimited_17 = 10;

								row30.hidden = fid_tFileInputDelimited_17
										.get(columnIndexWithD_tFileInputDelimited_17);

								columnIndexWithD_tFileInputDelimited_17 = 11;

								row30.FormFamily = fid_tFileInputDelimited_17
										.get(columnIndexWithD_tFileInputDelimited_17);

								columnIndexWithD_tFileInputDelimited_17 = 12;

								row30.AdditionalData = fid_tFileInputDelimited_17
										.get(columnIndexWithD_tFileInputDelimited_17);

								columnIndexWithD_tFileInputDelimited_17 = 13;

								row30.item_Datatype = fid_tFileInputDelimited_17
										.get(columnIndexWithD_tFileInputDelimited_17);

								columnIndexWithD_tFileInputDelimited_17 = 14;

								temp = fid_tFileInputDelimited_17
										.get(columnIndexWithD_tFileInputDelimited_17);
								if (temp.length() > 0) {

									row30.HLEVEL = ParserUtils
											.parseTo_Integer(temp);

								} else {

									row30.HLEVEL = null;

								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputDelimited_17 = true;

								System.err.println(e.getMessage());
								row30 = null;

							}

							/**
							 * [tFileInputDelimited_17 begin ] stop
							 */
							/**
							 * [tFileInputDelimited_17 main ] start
							 */

							currentComponent = "tFileInputDelimited_17";

							tos_count_tFileInputDelimited_17++;

							/**
							 * [tFileInputDelimited_17 main ] stop
							 */
							// Start of branch "row30"
							if (row30 != null) {

								/**
								 * [tMap_18 main ] start
								 */

								currentComponent = "tMap_18";

								boolean hasCasePrimitiveKeyWithNull_tMap_18 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_18 = false;
								boolean mainRowRejected_tMap_18 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_18__Struct Var = Var__tMap_18;// ###############################
									// ###############################
									// # Output tables

									copyOfout6_0 = null;

									// # Output table : 'copyOfout6_0'
									copyOfout6_0_tmp.HLEVEL = row30.HLEVEL;
									copyOfout6_0_tmp.Name = row30.Name;
									copyOfout6_0_tmp.Path = "\\"
											+ context.i2b2HeadNode + "\\"
											+ context.MDPD + "\\"
											+ row30.StudyID;
									copyOfout6_0_tmp.DataType = row30.item_Datatype;
									copyOfout6_0_tmp.Update_Date = null;
									copyOfout6_0_tmp.Import_Date = null;
									copyOfout6_0_tmp.Download_Date = null;
									copyOfout6_0_tmp.PathID = row30.StudyID;
									copyOfout6_0_tmp.itemCode = row30.FormFamily;
									copyOfout6_0 = copyOfout6_0_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_18 = false;

								tos_count_tMap_18++;

								/**
								 * [tMap_18 main ] stop
								 */
								// Start of branch "copyOfout6_0"
								if (copyOfout6_0 != null) {

									/**
									 * [tUnite_1 main ] start
									 */

									currentComponent = "tUnite_1";

									// ////////

									// for output
									row31 = new row31Struct();

									row31.HLEVEL = copyOfout6_0.HLEVEL;
									row31.Name = copyOfout6_0.Name;
									row31.Path = copyOfout6_0.Path;
									row31.DataType = copyOfout6_0.DataType;
									row31.Update_Date = copyOfout6_0.Update_Date;
									row31.Import_Date = copyOfout6_0.Import_Date;
									row31.Download_Date = copyOfout6_0.Download_Date;
									row31.PathID = copyOfout6_0.PathID;
									row31.itemCode = copyOfout6_0.itemCode;

									nb_line_tUnite_1++;

									// ////////

									tos_count_tUnite_1++;

									/**
									 * [tUnite_1 main ] stop
									 */

									/**
									 * [tMap_10 main ] start
									 */

									currentComponent = "tMap_10";

									boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_10 = false;
									boolean mainRowRejected_tMap_10 = false;

									// /////////////////////////////////////////////
									// Starting Lookup Table "row5"
									// /////////////////////////////////////////////

									boolean forceLooprow5 = false;

									row5Struct row5ObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_10) { // G_TM_M_020

										tHash_Lookup_row5.lookup(row5HashKey);

										if (!tHash_Lookup_row5.hasNext()) { // G_TM_M_090

											forceLooprow5 = true;

										} // G_TM_M_090

									} // G_TM_M_020

									else { // G 20 - G 21
										forceLooprow5 = true;
									} // G 21

									row5Struct row5 = null;

									while ((tHash_Lookup_row5 != null && tHash_Lookup_row5
											.hasNext()) || forceLooprow5) { // G_TM_M_043

										// CALL close loop of lookup 'row5'

										row5Struct fromLookup_row5 = null;
										row5 = row5Default;

										if (!forceLooprow5) { // G 46

											fromLookup_row5 = tHash_Lookup_row5
													.next();

											if (fromLookup_row5 != null) {
												row5 = fromLookup_row5;
											}

										} // G 46

										forceLooprow5 = false;

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_10__Struct Var = Var__tMap_10;
											Var.var1 = false;// ###############################
											// ###############################
											// # Output tables

											out6 = null;

											// # Output table : 'out6'
											out6_tmp.HLEVEL = row31.HLEVEL;
											out6_tmp.Name = row31.Name;
											out6_tmp.Path = row31.Path + "\\";
											out6_tmp.DataType = row31.DataType;
											out6_tmp.Update_Date = null;
											out6_tmp.Import_Date = TalendDate
													.getCurrentDate();
											out6_tmp.Download_Date = row5.Download_Date;
											out6_tmp.PathID = row31.PathID;
											out6_tmp.visual = "FAE";
											out6_tmp.itemCode = row31.itemCode;
											out6_tmp.source = (row5.source != null) ? row5.source
													+ " "
													+ row5.SourceSystemVersion
													: "";
											out6_tmp.xml = null;
											out6_tmp.m_applied_path = "@";
											out6 = out6_tmp;
											// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_10 = false;

										tos_count_tMap_10++;

										/**
										 * [tMap_10 main ] stop
										 */
										// Start of branch "out6"
										if (out6 != null) {

											/**
											 * [tFileOutputDelimited_26 main ]
											 * start
											 */

											currentComponent = "tFileOutputDelimited_26";

											StringBuilder sb_tFileOutputDelimited_26 = new StringBuilder();

											if (out6.HLEVEL != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.HLEVEL

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.Name != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.Name

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.Path != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.Path

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.DataType != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.DataType

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.Update_Date != null) {

												sb_tFileOutputDelimited_26
														.append(

														FormatterUtils
																.format_Date(
																		out6.Update_Date,
																		"yyyy-MM-dd")

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.Import_Date != null) {

												sb_tFileOutputDelimited_26
														.append(

														FormatterUtils
																.format_Date(
																		out6.Import_Date,
																		"yyyy-MM-dd")

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.Download_Date != null) {

												sb_tFileOutputDelimited_26
														.append(

														FormatterUtils
																.format_Date(
																		out6.Download_Date,
																		"yyyy-MM-dd")

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.PathID != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.PathID

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.visual != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.visual

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.itemCode != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.itemCode

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.source != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.source

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.xml != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.xml

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.m_applied_path != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.m_applied_path

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_26);

											nb_line_tFileOutputDelimited_26++;

											outtFileOutputDelimited_26
													.write(sb_tFileOutputDelimited_26
															.toString());

											tos_count_tFileOutputDelimited_26++;

											/**
											 * [tFileOutputDelimited_26 main ]
											 * stop
											 */

										} // End of branch "out6"

									} // close loop of lookup 'row5' //
										// G_TM_M_043

								} // End of branch "copyOfout6_0"

							} // End of branch "row30"

							/**
							 * [tFileInputDelimited_17 end ] start
							 */

							currentComponent = "tFileInputDelimited_17";

						}
					} finally {
						if (!((Object) (((String) globalMap
								.get("tCreateTemporaryFile_3_FILEPATH"))) instanceof java.io.InputStream)) {
							if (fid_tFileInputDelimited_17 != null) {
								fid_tFileInputDelimited_17.close();
							}
						}
						if (fid_tFileInputDelimited_17 != null) {
							globalMap.put("tFileInputDelimited_17_NB_LINE",
									fid_tFileInputDelimited_17.getRowNumber());
						}
					}

					ok_Hash.put("tFileInputDelimited_17", true);
					end_Hash.put("tFileInputDelimited_17",
							System.currentTimeMillis());

					/**
					 * [tFileInputDelimited_17 end ] stop
					 */

					/**
					 * [tMap_18 end ] start
					 */

					currentComponent = "tMap_18";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					ok_Hash.put("tMap_18", true);
					end_Hash.put("tMap_18", System.currentTimeMillis());

					/**
					 * [tMap_18 end ] stop
					 */

					/**
					 * [tMap_19 begin ] start
					 */

					ok_Hash.put("tMap_19", false);
					start_Hash.put("tMap_19", System.currentTimeMillis());
					currentComponent = "tMap_19";

					int tos_count_tMap_19 = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_19__Struct {
					}
					Var__tMap_19__Struct Var__tMap_19 = new Var__tMap_19__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					copyOfcopyOfout6_0Struct copyOfcopyOfout6_0_tmp = new copyOfcopyOfout6_0Struct();
					// ###############################

					/**
					 * [tMap_19 begin ] stop
					 */

					/**
					 * [tFileInputDelimited_18 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_18", false);
					start_Hash.put("tFileInputDelimited_18",
							System.currentTimeMillis());
					currentComponent = "tFileInputDelimited_18";

					int tos_count_tFileInputDelimited_18 = 0;

					int nb_line_tFileInputDelimited_18 = 0;
					org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_18 = null;
					try {

						Object filename_tFileInputDelimited_18 = ((String) globalMap
								.get("tCreateTemporaryFile_4_FILEPATH"));
						if (filename_tFileInputDelimited_18 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_18 = 0, random_value_tFileInputDelimited_18 = -1;
							if (footer_value_tFileInputDelimited_18 > 0
									|| random_value_tFileInputDelimited_18 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer and random shouldn't be bigger than 0.");
							}

						}
						try {
							fid_tFileInputDelimited_18 = new org.talend.fileprocess.FileInputDelimited(
									((String) globalMap
											.get("tCreateTemporaryFile_4_FILEPATH")),
									"ISO-8859-15", "\t", "\n", true, 0, 0, -1,
									-1, false);
						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());

						}

						while (fid_tFileInputDelimited_18 != null
								&& fid_tFileInputDelimited_18.nextRecord()) {

							row33 = null;

							boolean whetherReject_tFileInputDelimited_18 = false;
							row33 = new row33Struct();
							try {

								int columnIndexWithD_tFileInputDelimited_18 = 0;

								String temp = "";

								columnIndexWithD_tFileInputDelimited_18 = 0;

								row33.StudyID = fid_tFileInputDelimited_18
										.get(columnIndexWithD_tFileInputDelimited_18);

								columnIndexWithD_tFileInputDelimited_18 = 1;

								row33.MetaID = fid_tFileInputDelimited_18
										.get(columnIndexWithD_tFileInputDelimited_18);

								columnIndexWithD_tFileInputDelimited_18 = 2;

								row33.VisitID = fid_tFileInputDelimited_18
										.get(columnIndexWithD_tFileInputDelimited_18);

								columnIndexWithD_tFileInputDelimited_18 = 3;

								row33.FormID = fid_tFileInputDelimited_18
										.get(columnIndexWithD_tFileInputDelimited_18);

								columnIndexWithD_tFileInputDelimited_18 = 4;

								row33.QuestionID = fid_tFileInputDelimited_18
										.get(columnIndexWithD_tFileInputDelimited_18);

								columnIndexWithD_tFileInputDelimited_18 = 5;

								row33.ItemID = fid_tFileInputDelimited_18
										.get(columnIndexWithD_tFileInputDelimited_18);

								columnIndexWithD_tFileInputDelimited_18 = 6;

								row33.ParentItem = fid_tFileInputDelimited_18
										.get(columnIndexWithD_tFileInputDelimited_18);

								columnIndexWithD_tFileInputDelimited_18 = 7;

								row33.Name = fid_tFileInputDelimited_18
										.get(columnIndexWithD_tFileInputDelimited_18);

								columnIndexWithD_tFileInputDelimited_18 = 8;

								row33.VisitNo = fid_tFileInputDelimited_18
										.get(columnIndexWithD_tFileInputDelimited_18);

								columnIndexWithD_tFileInputDelimited_18 = 9;

								row33.Sequence = fid_tFileInputDelimited_18
										.get(columnIndexWithD_tFileInputDelimited_18);

								columnIndexWithD_tFileInputDelimited_18 = 10;

								row33.hidden = fid_tFileInputDelimited_18
										.get(columnIndexWithD_tFileInputDelimited_18);

								columnIndexWithD_tFileInputDelimited_18 = 11;

								row33.FormFamily = fid_tFileInputDelimited_18
										.get(columnIndexWithD_tFileInputDelimited_18);

								columnIndexWithD_tFileInputDelimited_18 = 12;

								row33.AdditionalData = fid_tFileInputDelimited_18
										.get(columnIndexWithD_tFileInputDelimited_18);

								columnIndexWithD_tFileInputDelimited_18 = 13;

								row33.item_Datatype = fid_tFileInputDelimited_18
										.get(columnIndexWithD_tFileInputDelimited_18);

								columnIndexWithD_tFileInputDelimited_18 = 14;

								temp = fid_tFileInputDelimited_18
										.get(columnIndexWithD_tFileInputDelimited_18);
								if (temp.length() > 0) {

									row33.HLEVEL = ParserUtils
											.parseTo_Integer(temp);

								} else {

									row33.HLEVEL = null;

								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputDelimited_18 = true;

								System.err.println(e.getMessage());
								row33 = null;

							}

							/**
							 * [tFileInputDelimited_18 begin ] stop
							 */
							/**
							 * [tFileInputDelimited_18 main ] start
							 */

							currentComponent = "tFileInputDelimited_18";

							tos_count_tFileInputDelimited_18++;

							/**
							 * [tFileInputDelimited_18 main ] stop
							 */
							// Start of branch "row33"
							if (row33 != null) {

								/**
								 * [tMap_19 main ] start
								 */

								currentComponent = "tMap_19";

								boolean hasCasePrimitiveKeyWithNull_tMap_19 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_19 = false;
								boolean mainRowRejected_tMap_19 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_19__Struct Var = Var__tMap_19;// ###############################
									// ###############################
									// # Output tables

									copyOfcopyOfout6_0 = null;

									// # Output table : 'copyOfcopyOfout6_0'
									copyOfcopyOfout6_0_tmp.HLEVEL = row33.HLEVEL;
									copyOfcopyOfout6_0_tmp.Name = row33.Name;
									copyOfcopyOfout6_0_tmp.Path = "\\"
											+ context.i2b2HeadNode + "\\"
											+ context.MDPD + "\\"
											+ row33.StudyID + "\\"
											+ row33.MetaID;
									copyOfcopyOfout6_0_tmp.DataType = row33.item_Datatype;
									copyOfcopyOfout6_0_tmp.Update_Date = null;
									copyOfcopyOfout6_0_tmp.Import_Date = null;
									copyOfcopyOfout6_0_tmp.Download_Date = null;
									copyOfcopyOfout6_0_tmp.PathID = row33.MetaID;
									copyOfcopyOfout6_0_tmp.itemCode = row33.FormFamily;
									copyOfcopyOfout6_0 = copyOfcopyOfout6_0_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_19 = false;

								tos_count_tMap_19++;

								/**
								 * [tMap_19 main ] stop
								 */
								// Start of branch "copyOfcopyOfout6_0"
								if (copyOfcopyOfout6_0 != null) {

									/**
									 * [tUnite_1 main ] start
									 */

									currentComponent = "tUnite_1";

									// ////////

									// for output
									row31 = new row31Struct();

									row31.HLEVEL = copyOfcopyOfout6_0.HLEVEL;
									row31.Name = copyOfcopyOfout6_0.Name;
									row31.Path = copyOfcopyOfout6_0.Path;
									row31.DataType = copyOfcopyOfout6_0.DataType;
									row31.Update_Date = copyOfcopyOfout6_0.Update_Date;
									row31.Import_Date = copyOfcopyOfout6_0.Import_Date;
									row31.Download_Date = copyOfcopyOfout6_0.Download_Date;
									row31.PathID = copyOfcopyOfout6_0.PathID;
									row31.itemCode = copyOfcopyOfout6_0.itemCode;

									nb_line_tUnite_1++;

									// ////////

									tos_count_tUnite_1++;

									/**
									 * [tUnite_1 main ] stop
									 */

									/**
									 * [tMap_10 main ] start
									 */

									currentComponent = "tMap_10";

									boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_10 = false;
									boolean mainRowRejected_tMap_10 = false;

									// /////////////////////////////////////////////
									// Starting Lookup Table "row5"
									// /////////////////////////////////////////////

									boolean forceLooprow5 = false;

									row5Struct row5ObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_10) { // G_TM_M_020

										tHash_Lookup_row5.lookup(row5HashKey);

										if (!tHash_Lookup_row5.hasNext()) { // G_TM_M_090

											forceLooprow5 = true;

										} // G_TM_M_090

									} // G_TM_M_020

									else { // G 20 - G 21
										forceLooprow5 = true;
									} // G 21

									row5Struct row5 = null;

									while ((tHash_Lookup_row5 != null && tHash_Lookup_row5
											.hasNext()) || forceLooprow5) { // G_TM_M_043

										// CALL close loop of lookup 'row5'

										row5Struct fromLookup_row5 = null;
										row5 = row5Default;

										if (!forceLooprow5) { // G 46

											fromLookup_row5 = tHash_Lookup_row5
													.next();

											if (fromLookup_row5 != null) {
												row5 = fromLookup_row5;
											}

										} // G 46

										forceLooprow5 = false;

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_10__Struct Var = Var__tMap_10;
											Var.var1 = false;// ###############################
											// ###############################
											// # Output tables

											out6 = null;

											// # Output table : 'out6'
											out6_tmp.HLEVEL = row31.HLEVEL;
											out6_tmp.Name = row31.Name;
											out6_tmp.Path = row31.Path + "\\";
											out6_tmp.DataType = row31.DataType;
											out6_tmp.Update_Date = null;
											out6_tmp.Import_Date = TalendDate
													.getCurrentDate();
											out6_tmp.Download_Date = row5.Download_Date;
											out6_tmp.PathID = row31.PathID;
											out6_tmp.visual = "FAE";
											out6_tmp.itemCode = row31.itemCode;
											out6_tmp.source = (row5.source != null) ? row5.source
													+ " "
													+ row5.SourceSystemVersion
													: "";
											out6_tmp.xml = null;
											out6_tmp.m_applied_path = "@";
											out6 = out6_tmp;
											// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_10 = false;

										tos_count_tMap_10++;

										/**
										 * [tMap_10 main ] stop
										 */
										// Start of branch "out6"
										if (out6 != null) {

											/**
											 * [tFileOutputDelimited_26 main ]
											 * start
											 */

											currentComponent = "tFileOutputDelimited_26";

											StringBuilder sb_tFileOutputDelimited_26 = new StringBuilder();

											if (out6.HLEVEL != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.HLEVEL

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.Name != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.Name

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.Path != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.Path

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.DataType != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.DataType

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.Update_Date != null) {

												sb_tFileOutputDelimited_26
														.append(

														FormatterUtils
																.format_Date(
																		out6.Update_Date,
																		"yyyy-MM-dd")

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.Import_Date != null) {

												sb_tFileOutputDelimited_26
														.append(

														FormatterUtils
																.format_Date(
																		out6.Import_Date,
																		"yyyy-MM-dd")

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.Download_Date != null) {

												sb_tFileOutputDelimited_26
														.append(

														FormatterUtils
																.format_Date(
																		out6.Download_Date,
																		"yyyy-MM-dd")

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.PathID != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.PathID

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.visual != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.visual

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.itemCode != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.itemCode

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.source != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.source

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.xml != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.xml

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.m_applied_path != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.m_applied_path

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_26);

											nb_line_tFileOutputDelimited_26++;

											outtFileOutputDelimited_26
													.write(sb_tFileOutputDelimited_26
															.toString());

											tos_count_tFileOutputDelimited_26++;

											/**
											 * [tFileOutputDelimited_26 main ]
											 * stop
											 */

										} // End of branch "out6"

									} // close loop of lookup 'row5' //
										// G_TM_M_043

								} // End of branch "copyOfcopyOfout6_0"

							} // End of branch "row33"

							/**
							 * [tFileInputDelimited_18 end ] start
							 */

							currentComponent = "tFileInputDelimited_18";

						}
					} finally {
						if (!((Object) (((String) globalMap
								.get("tCreateTemporaryFile_4_FILEPATH"))) instanceof java.io.InputStream)) {
							if (fid_tFileInputDelimited_18 != null) {
								fid_tFileInputDelimited_18.close();
							}
						}
						if (fid_tFileInputDelimited_18 != null) {
							globalMap.put("tFileInputDelimited_18_NB_LINE",
									fid_tFileInputDelimited_18.getRowNumber());
						}
					}

					ok_Hash.put("tFileInputDelimited_18", true);
					end_Hash.put("tFileInputDelimited_18",
							System.currentTimeMillis());

					/**
					 * [tFileInputDelimited_18 end ] stop
					 */

					/**
					 * [tMap_19 end ] start
					 */

					currentComponent = "tMap_19";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					ok_Hash.put("tMap_19", true);
					end_Hash.put("tMap_19", System.currentTimeMillis());

					/**
					 * [tMap_19 end ] stop
					 */

					/**
					 * [tMap_20 begin ] start
					 */

					ok_Hash.put("tMap_20", false);
					start_Hash.put("tMap_20", System.currentTimeMillis());
					currentComponent = "tMap_20";

					int tos_count_tMap_20 = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_20__Struct {
					}
					Var__tMap_20__Struct Var__tMap_20 = new Var__tMap_20__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					copyOfcopyOfcopyOfout6_0Struct copyOfcopyOfcopyOfout6_0_tmp = new copyOfcopyOfcopyOfout6_0Struct();
					// ###############################

					/**
					 * [tMap_20 begin ] stop
					 */

					/**
					 * [tFileInputDelimited_19 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_19", false);
					start_Hash.put("tFileInputDelimited_19",
							System.currentTimeMillis());
					currentComponent = "tFileInputDelimited_19";

					int tos_count_tFileInputDelimited_19 = 0;

					int nb_line_tFileInputDelimited_19 = 0;
					org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_19 = null;
					try {

						Object filename_tFileInputDelimited_19 = ((String) globalMap
								.get("tCreateTemporaryFile_16_FILEPATH"));
						if (filename_tFileInputDelimited_19 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_19 = 0, random_value_tFileInputDelimited_19 = -1;
							if (footer_value_tFileInputDelimited_19 > 0
									|| random_value_tFileInputDelimited_19 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer and random shouldn't be bigger than 0.");
							}

						}
						try {
							fid_tFileInputDelimited_19 = new org.talend.fileprocess.FileInputDelimited(
									((String) globalMap
											.get("tCreateTemporaryFile_16_FILEPATH")),
									"ISO-8859-15", "\t", "\n", true, 1, 0, -1,
									-1, false);
						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());

						}

						while (fid_tFileInputDelimited_19 != null
								&& fid_tFileInputDelimited_19.nextRecord()) {

							row34 = null;

							boolean whetherReject_tFileInputDelimited_19 = false;
							row34 = new row34Struct();
							try {

								int columnIndexWithD_tFileInputDelimited_19 = 0;

								String temp = "";

								columnIndexWithD_tFileInputDelimited_19 = 0;

								row34.StudyID = fid_tFileInputDelimited_19
										.get(columnIndexWithD_tFileInputDelimited_19);

								columnIndexWithD_tFileInputDelimited_19 = 1;

								row34.MetaID = fid_tFileInputDelimited_19
										.get(columnIndexWithD_tFileInputDelimited_19);

								columnIndexWithD_tFileInputDelimited_19 = 2;

								row34.VisitID = fid_tFileInputDelimited_19
										.get(columnIndexWithD_tFileInputDelimited_19);

								columnIndexWithD_tFileInputDelimited_19 = 3;

								row34.FormID = fid_tFileInputDelimited_19
										.get(columnIndexWithD_tFileInputDelimited_19);

								columnIndexWithD_tFileInputDelimited_19 = 4;

								row34.QuestionID = fid_tFileInputDelimited_19
										.get(columnIndexWithD_tFileInputDelimited_19);

								columnIndexWithD_tFileInputDelimited_19 = 5;

								row34.ItemID = fid_tFileInputDelimited_19
										.get(columnIndexWithD_tFileInputDelimited_19);

								columnIndexWithD_tFileInputDelimited_19 = 6;

								row34.ParentItem = fid_tFileInputDelimited_19
										.get(columnIndexWithD_tFileInputDelimited_19);

								columnIndexWithD_tFileInputDelimited_19 = 7;

								row34.Name = fid_tFileInputDelimited_19
										.get(columnIndexWithD_tFileInputDelimited_19);

								columnIndexWithD_tFileInputDelimited_19 = 8;

								row34.VisitNo = fid_tFileInputDelimited_19
										.get(columnIndexWithD_tFileInputDelimited_19);

								columnIndexWithD_tFileInputDelimited_19 = 9;

								row34.Sequence = fid_tFileInputDelimited_19
										.get(columnIndexWithD_tFileInputDelimited_19);

								columnIndexWithD_tFileInputDelimited_19 = 10;

								row34.hidden = fid_tFileInputDelimited_19
										.get(columnIndexWithD_tFileInputDelimited_19);

								columnIndexWithD_tFileInputDelimited_19 = 11;

								row34.FormFamily = fid_tFileInputDelimited_19
										.get(columnIndexWithD_tFileInputDelimited_19);

								columnIndexWithD_tFileInputDelimited_19 = 12;

								row34.AdditionalData = fid_tFileInputDelimited_19
										.get(columnIndexWithD_tFileInputDelimited_19);

								columnIndexWithD_tFileInputDelimited_19 = 13;

								row34.item_Datatype = fid_tFileInputDelimited_19
										.get(columnIndexWithD_tFileInputDelimited_19);

								columnIndexWithD_tFileInputDelimited_19 = 14;

								temp = fid_tFileInputDelimited_19
										.get(columnIndexWithD_tFileInputDelimited_19);
								if (temp.length() > 0) {

									row34.HLEVEL = ParserUtils
											.parseTo_Integer(temp);

								} else {

									row34.HLEVEL = null;

								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputDelimited_19 = true;

								System.err.println(e.getMessage());
								row34 = null;

							}

							/**
							 * [tFileInputDelimited_19 begin ] stop
							 */
							/**
							 * [tFileInputDelimited_19 main ] start
							 */

							currentComponent = "tFileInputDelimited_19";

							tos_count_tFileInputDelimited_19++;

							/**
							 * [tFileInputDelimited_19 main ] stop
							 */
							// Start of branch "row34"
							if (row34 != null) {

								/**
								 * [tMap_20 main ] start
								 */

								currentComponent = "tMap_20";

								boolean hasCasePrimitiveKeyWithNull_tMap_20 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_20 = false;
								boolean mainRowRejected_tMap_20 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_20__Struct Var = Var__tMap_20;// ###############################
									// ###############################
									// # Output tables

									copyOfcopyOfcopyOfout6_0 = null;

									// # Output table :
									// 'copyOfcopyOfcopyOfout6_0'
									copyOfcopyOfcopyOfout6_0_tmp.HLEVEL = row34.HLEVEL;
									copyOfcopyOfcopyOfout6_0_tmp.Name = row34.Name;
									copyOfcopyOfcopyOfout6_0_tmp.Path = "\\"
											+ context.i2b2HeadNode + "\\"
											+ context.MDPD + "\\"
											+ row34.StudyID + "\\"
											+ row34.MetaID + "\\"
											+ row34.VisitID;
									copyOfcopyOfcopyOfout6_0_tmp.DataType = row34.item_Datatype;
									copyOfcopyOfcopyOfout6_0_tmp.Update_Date = null;
									copyOfcopyOfcopyOfout6_0_tmp.Import_Date = null;
									copyOfcopyOfcopyOfout6_0_tmp.Download_Date = null;
									copyOfcopyOfcopyOfout6_0_tmp.PathID = row34.VisitID;
									copyOfcopyOfcopyOfout6_0_tmp.itemCode = row34.FormFamily;
									copyOfcopyOfcopyOfout6_0 = copyOfcopyOfcopyOfout6_0_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_20 = false;

								tos_count_tMap_20++;

								/**
								 * [tMap_20 main ] stop
								 */
								// Start of branch "copyOfcopyOfcopyOfout6_0"
								if (copyOfcopyOfcopyOfout6_0 != null) {

									/**
									 * [tUnite_1 main ] start
									 */

									currentComponent = "tUnite_1";

									// ////////

									// for output
									row31 = new row31Struct();

									row31.HLEVEL = copyOfcopyOfcopyOfout6_0.HLEVEL;
									row31.Name = copyOfcopyOfcopyOfout6_0.Name;
									row31.Path = copyOfcopyOfcopyOfout6_0.Path;
									row31.DataType = copyOfcopyOfcopyOfout6_0.DataType;
									row31.Update_Date = copyOfcopyOfcopyOfout6_0.Update_Date;
									row31.Import_Date = copyOfcopyOfcopyOfout6_0.Import_Date;
									row31.Download_Date = copyOfcopyOfcopyOfout6_0.Download_Date;
									row31.PathID = copyOfcopyOfcopyOfout6_0.PathID;
									row31.itemCode = copyOfcopyOfcopyOfout6_0.itemCode;

									nb_line_tUnite_1++;

									// ////////

									tos_count_tUnite_1++;

									/**
									 * [tUnite_1 main ] stop
									 */

									/**
									 * [tMap_10 main ] start
									 */

									currentComponent = "tMap_10";

									boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_10 = false;
									boolean mainRowRejected_tMap_10 = false;

									// /////////////////////////////////////////////
									// Starting Lookup Table "row5"
									// /////////////////////////////////////////////

									boolean forceLooprow5 = false;

									row5Struct row5ObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_10) { // G_TM_M_020

										tHash_Lookup_row5.lookup(row5HashKey);

										if (!tHash_Lookup_row5.hasNext()) { // G_TM_M_090

											forceLooprow5 = true;

										} // G_TM_M_090

									} // G_TM_M_020

									else { // G 20 - G 21
										forceLooprow5 = true;
									} // G 21

									row5Struct row5 = null;

									while ((tHash_Lookup_row5 != null && tHash_Lookup_row5
											.hasNext()) || forceLooprow5) { // G_TM_M_043

										// CALL close loop of lookup 'row5'

										row5Struct fromLookup_row5 = null;
										row5 = row5Default;

										if (!forceLooprow5) { // G 46

											fromLookup_row5 = tHash_Lookup_row5
													.next();

											if (fromLookup_row5 != null) {
												row5 = fromLookup_row5;
											}

										} // G 46

										forceLooprow5 = false;

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_10__Struct Var = Var__tMap_10;
											Var.var1 = false;// ###############################
											// ###############################
											// # Output tables

											out6 = null;

											// # Output table : 'out6'
											out6_tmp.HLEVEL = row31.HLEVEL;
											out6_tmp.Name = row31.Name;
											out6_tmp.Path = row31.Path + "\\";
											out6_tmp.DataType = row31.DataType;
											out6_tmp.Update_Date = null;
											out6_tmp.Import_Date = TalendDate
													.getCurrentDate();
											out6_tmp.Download_Date = row5.Download_Date;
											out6_tmp.PathID = row31.PathID;
											out6_tmp.visual = "FAE";
											out6_tmp.itemCode = row31.itemCode;
											out6_tmp.source = (row5.source != null) ? row5.source
													+ " "
													+ row5.SourceSystemVersion
													: "";
											out6_tmp.xml = null;
											out6_tmp.m_applied_path = "@";
											out6 = out6_tmp;
											// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_10 = false;

										tos_count_tMap_10++;

										/**
										 * [tMap_10 main ] stop
										 */
										// Start of branch "out6"
										if (out6 != null) {

											/**
											 * [tFileOutputDelimited_26 main ]
											 * start
											 */

											currentComponent = "tFileOutputDelimited_26";

											StringBuilder sb_tFileOutputDelimited_26 = new StringBuilder();

											if (out6.HLEVEL != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.HLEVEL

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.Name != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.Name

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.Path != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.Path

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.DataType != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.DataType

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.Update_Date != null) {

												sb_tFileOutputDelimited_26
														.append(

														FormatterUtils
																.format_Date(
																		out6.Update_Date,
																		"yyyy-MM-dd")

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.Import_Date != null) {

												sb_tFileOutputDelimited_26
														.append(

														FormatterUtils
																.format_Date(
																		out6.Import_Date,
																		"yyyy-MM-dd")

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.Download_Date != null) {

												sb_tFileOutputDelimited_26
														.append(

														FormatterUtils
																.format_Date(
																		out6.Download_Date,
																		"yyyy-MM-dd")

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.PathID != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.PathID

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.visual != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.visual

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.itemCode != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.itemCode

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.source != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.source

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.xml != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.xml

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.m_applied_path != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.m_applied_path

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_26);

											nb_line_tFileOutputDelimited_26++;

											outtFileOutputDelimited_26
													.write(sb_tFileOutputDelimited_26
															.toString());

											tos_count_tFileOutputDelimited_26++;

											/**
											 * [tFileOutputDelimited_26 main ]
											 * stop
											 */

										} // End of branch "out6"

									} // close loop of lookup 'row5' //
										// G_TM_M_043

								} // End of branch "copyOfcopyOfcopyOfout6_0"

							} // End of branch "row34"

							/**
							 * [tFileInputDelimited_19 end ] start
							 */

							currentComponent = "tFileInputDelimited_19";

						}
					} finally {
						if (!((Object) (((String) globalMap
								.get("tCreateTemporaryFile_16_FILEPATH"))) instanceof java.io.InputStream)) {
							if (fid_tFileInputDelimited_19 != null) {
								fid_tFileInputDelimited_19.close();
							}
						}
						if (fid_tFileInputDelimited_19 != null) {
							globalMap.put("tFileInputDelimited_19_NB_LINE",
									fid_tFileInputDelimited_19.getRowNumber());
						}
					}

					ok_Hash.put("tFileInputDelimited_19", true);
					end_Hash.put("tFileInputDelimited_19",
							System.currentTimeMillis());

					/**
					 * [tFileInputDelimited_19 end ] stop
					 */

					/**
					 * [tMap_20 end ] start
					 */

					currentComponent = "tMap_20";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					ok_Hash.put("tMap_20", true);
					end_Hash.put("tMap_20", System.currentTimeMillis());

					/**
					 * [tMap_20 end ] stop
					 */

					/**
					 * [tMap_21 begin ] start
					 */

					ok_Hash.put("tMap_21", false);
					start_Hash.put("tMap_21", System.currentTimeMillis());
					currentComponent = "tMap_21";

					int tos_count_tMap_21 = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_21__Struct {
					}
					Var__tMap_21__Struct Var__tMap_21 = new Var__tMap_21__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					copyOfcopyOfcopyOfout6_0_0Struct copyOfcopyOfcopyOfout6_0_0_tmp = new copyOfcopyOfcopyOfout6_0_0Struct();
					// ###############################

					/**
					 * [tMap_21 begin ] stop
					 */

					/**
					 * [tFileInputDelimited_20 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_20", false);
					start_Hash.put("tFileInputDelimited_20",
							System.currentTimeMillis());
					currentComponent = "tFileInputDelimited_20";

					int tos_count_tFileInputDelimited_20 = 0;

					int nb_line_tFileInputDelimited_20 = 0;
					org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_20 = null;
					try {

						Object filename_tFileInputDelimited_20 = ((String) globalMap
								.get("tCreateTemporaryFile_6_FILEPATH"));
						if (filename_tFileInputDelimited_20 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_20 = 0, random_value_tFileInputDelimited_20 = -1;
							if (footer_value_tFileInputDelimited_20 > 0
									|| random_value_tFileInputDelimited_20 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer and random shouldn't be bigger than 0.");
							}

						}
						try {
							fid_tFileInputDelimited_20 = new org.talend.fileprocess.FileInputDelimited(
									((String) globalMap
											.get("tCreateTemporaryFile_6_FILEPATH")),
									"ISO-8859-15", "\t", "\n", true, 0, 0, -1,
									-1, false);
						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());

						}

						while (fid_tFileInputDelimited_20 != null
								&& fid_tFileInputDelimited_20.nextRecord()) {

							row35 = null;

							boolean whetherReject_tFileInputDelimited_20 = false;
							row35 = new row35Struct();
							try {

								int columnIndexWithD_tFileInputDelimited_20 = 0;

								String temp = "";

								columnIndexWithD_tFileInputDelimited_20 = 0;

								row35.StudyID = fid_tFileInputDelimited_20
										.get(columnIndexWithD_tFileInputDelimited_20);

								columnIndexWithD_tFileInputDelimited_20 = 1;

								row35.MetaID = fid_tFileInputDelimited_20
										.get(columnIndexWithD_tFileInputDelimited_20);

								columnIndexWithD_tFileInputDelimited_20 = 2;

								row35.VisitID = fid_tFileInputDelimited_20
										.get(columnIndexWithD_tFileInputDelimited_20);

								columnIndexWithD_tFileInputDelimited_20 = 3;

								row35.FormID = fid_tFileInputDelimited_20
										.get(columnIndexWithD_tFileInputDelimited_20);

								columnIndexWithD_tFileInputDelimited_20 = 4;

								row35.QuestionID = fid_tFileInputDelimited_20
										.get(columnIndexWithD_tFileInputDelimited_20);

								columnIndexWithD_tFileInputDelimited_20 = 5;

								row35.ItemID = fid_tFileInputDelimited_20
										.get(columnIndexWithD_tFileInputDelimited_20);

								columnIndexWithD_tFileInputDelimited_20 = 6;

								row35.ParentItem = fid_tFileInputDelimited_20
										.get(columnIndexWithD_tFileInputDelimited_20);

								columnIndexWithD_tFileInputDelimited_20 = 7;

								row35.Name = fid_tFileInputDelimited_20
										.get(columnIndexWithD_tFileInputDelimited_20);

								columnIndexWithD_tFileInputDelimited_20 = 8;

								row35.VisitNo = fid_tFileInputDelimited_20
										.get(columnIndexWithD_tFileInputDelimited_20);

								columnIndexWithD_tFileInputDelimited_20 = 9;

								row35.Sequence = fid_tFileInputDelimited_20
										.get(columnIndexWithD_tFileInputDelimited_20);

								columnIndexWithD_tFileInputDelimited_20 = 10;

								row35.hidden = fid_tFileInputDelimited_20
										.get(columnIndexWithD_tFileInputDelimited_20);

								columnIndexWithD_tFileInputDelimited_20 = 11;

								row35.FormFamily = fid_tFileInputDelimited_20
										.get(columnIndexWithD_tFileInputDelimited_20);

								columnIndexWithD_tFileInputDelimited_20 = 12;

								row35.AdditionalData = fid_tFileInputDelimited_20
										.get(columnIndexWithD_tFileInputDelimited_20);

								columnIndexWithD_tFileInputDelimited_20 = 13;

								row35.item_Datatype = fid_tFileInputDelimited_20
										.get(columnIndexWithD_tFileInputDelimited_20);

								columnIndexWithD_tFileInputDelimited_20 = 14;

								temp = fid_tFileInputDelimited_20
										.get(columnIndexWithD_tFileInputDelimited_20);
								if (temp.length() > 0) {

									row35.HLEVEL = ParserUtils
											.parseTo_Integer(temp);

								} else {

									row35.HLEVEL = null;

								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputDelimited_20 = true;

								System.err.println(e.getMessage());
								row35 = null;

							}

							/**
							 * [tFileInputDelimited_20 begin ] stop
							 */
							/**
							 * [tFileInputDelimited_20 main ] start
							 */

							currentComponent = "tFileInputDelimited_20";

							tos_count_tFileInputDelimited_20++;

							/**
							 * [tFileInputDelimited_20 main ] stop
							 */
							// Start of branch "row35"
							if (row35 != null) {

								/**
								 * [tMap_21 main ] start
								 */

								currentComponent = "tMap_21";

								boolean hasCasePrimitiveKeyWithNull_tMap_21 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_21 = false;
								boolean mainRowRejected_tMap_21 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_21__Struct Var = Var__tMap_21;// ###############################
									// ###############################
									// # Output tables

									copyOfcopyOfcopyOfout6_0_0 = null;

									// # Output table :
									// 'copyOfcopyOfcopyOfout6_0_0'
									copyOfcopyOfcopyOfout6_0_0_tmp.HLEVEL = row35.HLEVEL;
									copyOfcopyOfcopyOfout6_0_0_tmp.Name = row35.Name;
									copyOfcopyOfcopyOfout6_0_0_tmp.Path = "\\"
											+ context.i2b2HeadNode + "\\"
											+ context.MDPD + "\\"
											+ row35.StudyID + "\\"
											+ row35.MetaID + "\\"
											+ row35.VisitID + "\\"
											+ row35.FormID;
									copyOfcopyOfcopyOfout6_0_0_tmp.DataType = row35.item_Datatype;
									copyOfcopyOfcopyOfout6_0_0_tmp.Update_Date = null;
									copyOfcopyOfcopyOfout6_0_0_tmp.Import_Date = null;
									copyOfcopyOfcopyOfout6_0_0_tmp.Download_Date = null;
									copyOfcopyOfcopyOfout6_0_0_tmp.PathID = row35.FormID;
									copyOfcopyOfcopyOfout6_0_0_tmp.itemCode = row35.FormFamily;
									copyOfcopyOfcopyOfout6_0_0 = copyOfcopyOfcopyOfout6_0_0_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_21 = false;

								tos_count_tMap_21++;

								/**
								 * [tMap_21 main ] stop
								 */
								// Start of branch "copyOfcopyOfcopyOfout6_0_0"
								if (copyOfcopyOfcopyOfout6_0_0 != null) {

									/**
									 * [tUnite_1 main ] start
									 */

									currentComponent = "tUnite_1";

									// ////////

									// for output
									row31 = new row31Struct();

									row31.HLEVEL = copyOfcopyOfcopyOfout6_0_0.HLEVEL;
									row31.Name = copyOfcopyOfcopyOfout6_0_0.Name;
									row31.Path = copyOfcopyOfcopyOfout6_0_0.Path;
									row31.DataType = copyOfcopyOfcopyOfout6_0_0.DataType;
									row31.Update_Date = copyOfcopyOfcopyOfout6_0_0.Update_Date;
									row31.Import_Date = copyOfcopyOfcopyOfout6_0_0.Import_Date;
									row31.Download_Date = copyOfcopyOfcopyOfout6_0_0.Download_Date;
									row31.PathID = copyOfcopyOfcopyOfout6_0_0.PathID;
									row31.itemCode = copyOfcopyOfcopyOfout6_0_0.itemCode;

									nb_line_tUnite_1++;

									// ////////

									tos_count_tUnite_1++;

									/**
									 * [tUnite_1 main ] stop
									 */

									/**
									 * [tMap_10 main ] start
									 */

									currentComponent = "tMap_10";

									boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_10 = false;
									boolean mainRowRejected_tMap_10 = false;

									// /////////////////////////////////////////////
									// Starting Lookup Table "row5"
									// /////////////////////////////////////////////

									boolean forceLooprow5 = false;

									row5Struct row5ObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_10) { // G_TM_M_020

										tHash_Lookup_row5.lookup(row5HashKey);

										if (!tHash_Lookup_row5.hasNext()) { // G_TM_M_090

											forceLooprow5 = true;

										} // G_TM_M_090

									} // G_TM_M_020

									else { // G 20 - G 21
										forceLooprow5 = true;
									} // G 21

									row5Struct row5 = null;

									while ((tHash_Lookup_row5 != null && tHash_Lookup_row5
											.hasNext()) || forceLooprow5) { // G_TM_M_043

										// CALL close loop of lookup 'row5'

										row5Struct fromLookup_row5 = null;
										row5 = row5Default;

										if (!forceLooprow5) { // G 46

											fromLookup_row5 = tHash_Lookup_row5
													.next();

											if (fromLookup_row5 != null) {
												row5 = fromLookup_row5;
											}

										} // G 46

										forceLooprow5 = false;

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_10__Struct Var = Var__tMap_10;
											Var.var1 = false;// ###############################
											// ###############################
											// # Output tables

											out6 = null;

											// # Output table : 'out6'
											out6_tmp.HLEVEL = row31.HLEVEL;
											out6_tmp.Name = row31.Name;
											out6_tmp.Path = row31.Path + "\\";
											out6_tmp.DataType = row31.DataType;
											out6_tmp.Update_Date = null;
											out6_tmp.Import_Date = TalendDate
													.getCurrentDate();
											out6_tmp.Download_Date = row5.Download_Date;
											out6_tmp.PathID = row31.PathID;
											out6_tmp.visual = "FAE";
											out6_tmp.itemCode = row31.itemCode;
											out6_tmp.source = (row5.source != null) ? row5.source
													+ " "
													+ row5.SourceSystemVersion
													: "";
											out6_tmp.xml = null;
											out6_tmp.m_applied_path = "@";
											out6 = out6_tmp;
											// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_10 = false;

										tos_count_tMap_10++;

										/**
										 * [tMap_10 main ] stop
										 */
										// Start of branch "out6"
										if (out6 != null) {

											/**
											 * [tFileOutputDelimited_26 main ]
											 * start
											 */

											currentComponent = "tFileOutputDelimited_26";

											StringBuilder sb_tFileOutputDelimited_26 = new StringBuilder();

											if (out6.HLEVEL != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.HLEVEL

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.Name != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.Name

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.Path != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.Path

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.DataType != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.DataType

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.Update_Date != null) {

												sb_tFileOutputDelimited_26
														.append(

														FormatterUtils
																.format_Date(
																		out6.Update_Date,
																		"yyyy-MM-dd")

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.Import_Date != null) {

												sb_tFileOutputDelimited_26
														.append(

														FormatterUtils
																.format_Date(
																		out6.Import_Date,
																		"yyyy-MM-dd")

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.Download_Date != null) {

												sb_tFileOutputDelimited_26
														.append(

														FormatterUtils
																.format_Date(
																		out6.Download_Date,
																		"yyyy-MM-dd")

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.PathID != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.PathID

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.visual != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.visual

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.itemCode != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.itemCode

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.source != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.source

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.xml != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.xml

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.m_applied_path != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.m_applied_path

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_26);

											nb_line_tFileOutputDelimited_26++;

											outtFileOutputDelimited_26
													.write(sb_tFileOutputDelimited_26
															.toString());

											tos_count_tFileOutputDelimited_26++;

											/**
											 * [tFileOutputDelimited_26 main ]
											 * stop
											 */

										} // End of branch "out6"

									} // close loop of lookup 'row5' //
										// G_TM_M_043

								} // End of branch "copyOfcopyOfcopyOfout6_0_0"

							} // End of branch "row35"

							/**
							 * [tFileInputDelimited_20 end ] start
							 */

							currentComponent = "tFileInputDelimited_20";

						}
					} finally {
						if (!((Object) (((String) globalMap
								.get("tCreateTemporaryFile_6_FILEPATH"))) instanceof java.io.InputStream)) {
							if (fid_tFileInputDelimited_20 != null) {
								fid_tFileInputDelimited_20.close();
							}
						}
						if (fid_tFileInputDelimited_20 != null) {
							globalMap.put("tFileInputDelimited_20_NB_LINE",
									fid_tFileInputDelimited_20.getRowNumber());
						}
					}

					ok_Hash.put("tFileInputDelimited_20", true);
					end_Hash.put("tFileInputDelimited_20",
							System.currentTimeMillis());

					/**
					 * [tFileInputDelimited_20 end ] stop
					 */

					/**
					 * [tMap_21 end ] start
					 */

					currentComponent = "tMap_21";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					ok_Hash.put("tMap_21", true);
					end_Hash.put("tMap_21", System.currentTimeMillis());

					/**
					 * [tMap_21 end ] stop
					 */

					/**
					 * [tMap_22 begin ] start
					 */

					ok_Hash.put("tMap_22", false);
					start_Hash.put("tMap_22", System.currentTimeMillis());
					currentComponent = "tMap_22";

					int tos_count_tMap_22 = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_22__Struct {
					}
					Var__tMap_22__Struct Var__tMap_22 = new Var__tMap_22__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					copyOfcopyOfcopyOfout6_0_1Struct copyOfcopyOfcopyOfout6_0_1_tmp = new copyOfcopyOfcopyOfout6_0_1Struct();
					// ###############################

					/**
					 * [tMap_22 begin ] stop
					 */

					/**
					 * [tFileInputDelimited_21 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_21", false);
					start_Hash.put("tFileInputDelimited_21",
							System.currentTimeMillis());
					currentComponent = "tFileInputDelimited_21";

					int tos_count_tFileInputDelimited_21 = 0;

					int nb_line_tFileInputDelimited_21 = 0;
					org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_21 = null;
					try {

						Object filename_tFileInputDelimited_21 = ((String) globalMap
								.get("tCreateTemporaryFile_7_FILEPATH"));
						if (filename_tFileInputDelimited_21 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_21 = 0, random_value_tFileInputDelimited_21 = -1;
							if (footer_value_tFileInputDelimited_21 > 0
									|| random_value_tFileInputDelimited_21 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer and random shouldn't be bigger than 0.");
							}

						}
						try {
							fid_tFileInputDelimited_21 = new org.talend.fileprocess.FileInputDelimited(
									((String) globalMap
											.get("tCreateTemporaryFile_7_FILEPATH")),
									"ISO-8859-15", "\t", "\n", true, 0, 0, -1,
									-1, false);
						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());

						}

						while (fid_tFileInputDelimited_21 != null
								&& fid_tFileInputDelimited_21.nextRecord()) {

							row36 = null;

							boolean whetherReject_tFileInputDelimited_21 = false;
							row36 = new row36Struct();
							try {

								int columnIndexWithD_tFileInputDelimited_21 = 0;

								String temp = "";

								columnIndexWithD_tFileInputDelimited_21 = 0;

								row36.StudyID = fid_tFileInputDelimited_21
										.get(columnIndexWithD_tFileInputDelimited_21);

								columnIndexWithD_tFileInputDelimited_21 = 1;

								row36.MetaID = fid_tFileInputDelimited_21
										.get(columnIndexWithD_tFileInputDelimited_21);

								columnIndexWithD_tFileInputDelimited_21 = 2;

								row36.VisitID = fid_tFileInputDelimited_21
										.get(columnIndexWithD_tFileInputDelimited_21);

								columnIndexWithD_tFileInputDelimited_21 = 3;

								row36.FormID = fid_tFileInputDelimited_21
										.get(columnIndexWithD_tFileInputDelimited_21);

								columnIndexWithD_tFileInputDelimited_21 = 4;

								row36.QuestionID = fid_tFileInputDelimited_21
										.get(columnIndexWithD_tFileInputDelimited_21);

								columnIndexWithD_tFileInputDelimited_21 = 5;

								row36.ItemID = fid_tFileInputDelimited_21
										.get(columnIndexWithD_tFileInputDelimited_21);

								columnIndexWithD_tFileInputDelimited_21 = 6;

								row36.ParentItem = fid_tFileInputDelimited_21
										.get(columnIndexWithD_tFileInputDelimited_21);

								columnIndexWithD_tFileInputDelimited_21 = 7;

								row36.Name = fid_tFileInputDelimited_21
										.get(columnIndexWithD_tFileInputDelimited_21);

								columnIndexWithD_tFileInputDelimited_21 = 8;

								row36.VisitNo = fid_tFileInputDelimited_21
										.get(columnIndexWithD_tFileInputDelimited_21);

								columnIndexWithD_tFileInputDelimited_21 = 9;

								row36.Sequence = fid_tFileInputDelimited_21
										.get(columnIndexWithD_tFileInputDelimited_21);

								columnIndexWithD_tFileInputDelimited_21 = 10;

								row36.hidden = fid_tFileInputDelimited_21
										.get(columnIndexWithD_tFileInputDelimited_21);

								columnIndexWithD_tFileInputDelimited_21 = 11;

								row36.FormFamily = fid_tFileInputDelimited_21
										.get(columnIndexWithD_tFileInputDelimited_21);

								columnIndexWithD_tFileInputDelimited_21 = 12;

								row36.AdditionalData = fid_tFileInputDelimited_21
										.get(columnIndexWithD_tFileInputDelimited_21);

								columnIndexWithD_tFileInputDelimited_21 = 13;

								row36.item_Datatype = fid_tFileInputDelimited_21
										.get(columnIndexWithD_tFileInputDelimited_21);

								columnIndexWithD_tFileInputDelimited_21 = 14;

								temp = fid_tFileInputDelimited_21
										.get(columnIndexWithD_tFileInputDelimited_21);
								if (temp.length() > 0) {

									row36.HLEVEL = ParserUtils
											.parseTo_Integer(temp);

								} else {

									row36.HLEVEL = null;

								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputDelimited_21 = true;

								System.err.println(e.getMessage());
								row36 = null;

							}

							/**
							 * [tFileInputDelimited_21 begin ] stop
							 */
							/**
							 * [tFileInputDelimited_21 main ] start
							 */

							currentComponent = "tFileInputDelimited_21";

							tos_count_tFileInputDelimited_21++;

							/**
							 * [tFileInputDelimited_21 main ] stop
							 */
							// Start of branch "row36"
							if (row36 != null) {

								/**
								 * [tMap_22 main ] start
								 */

								currentComponent = "tMap_22";

								boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_22 = false;
								boolean mainRowRejected_tMap_22 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
									// ###############################
									// # Output tables

									copyOfcopyOfcopyOfout6_0_1 = null;

									// # Output table :
									// 'copyOfcopyOfcopyOfout6_0_1'
									copyOfcopyOfcopyOfout6_0_1_tmp.HLEVEL = row36.HLEVEL;
									copyOfcopyOfcopyOfout6_0_1_tmp.Name = row36.Name;
									copyOfcopyOfcopyOfout6_0_1_tmp.Path = "\\"
											+ context.i2b2HeadNode + "\\"
											+ context.MDPD + "\\"
											+ row36.StudyID + "\\"
											+ row36.MetaID + "\\"
											+ row36.VisitID + "\\"
											+ row36.FormID + "\\"
											+ row36.QuestionID;
									copyOfcopyOfcopyOfout6_0_1_tmp.DataType = row36.item_Datatype;
									copyOfcopyOfcopyOfout6_0_1_tmp.Update_Date = null;
									copyOfcopyOfcopyOfout6_0_1_tmp.Import_Date = null;
									copyOfcopyOfcopyOfout6_0_1_tmp.Download_Date = null;
									copyOfcopyOfcopyOfout6_0_1_tmp.PathID = row36.FormID
											+ "|" + row36.QuestionID;
									copyOfcopyOfcopyOfout6_0_1_tmp.itemCode = row36.FormFamily;
									copyOfcopyOfcopyOfout6_0_1 = copyOfcopyOfcopyOfout6_0_1_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_22 = false;

								tos_count_tMap_22++;

								/**
								 * [tMap_22 main ] stop
								 */
								// Start of branch "copyOfcopyOfcopyOfout6_0_1"
								if (copyOfcopyOfcopyOfout6_0_1 != null) {

									/**
									 * [tUnite_1 main ] start
									 */

									currentComponent = "tUnite_1";

									// ////////

									// for output
									row31 = new row31Struct();

									row31.HLEVEL = copyOfcopyOfcopyOfout6_0_1.HLEVEL;
									row31.Name = copyOfcopyOfcopyOfout6_0_1.Name;
									row31.Path = copyOfcopyOfcopyOfout6_0_1.Path;
									row31.DataType = copyOfcopyOfcopyOfout6_0_1.DataType;
									row31.Update_Date = copyOfcopyOfcopyOfout6_0_1.Update_Date;
									row31.Import_Date = copyOfcopyOfcopyOfout6_0_1.Import_Date;
									row31.Download_Date = copyOfcopyOfcopyOfout6_0_1.Download_Date;
									row31.PathID = copyOfcopyOfcopyOfout6_0_1.PathID;
									row31.itemCode = copyOfcopyOfcopyOfout6_0_1.itemCode;

									nb_line_tUnite_1++;

									// ////////

									tos_count_tUnite_1++;

									/**
									 * [tUnite_1 main ] stop
									 */

									/**
									 * [tMap_10 main ] start
									 */

									currentComponent = "tMap_10";

									boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_10 = false;
									boolean mainRowRejected_tMap_10 = false;

									// /////////////////////////////////////////////
									// Starting Lookup Table "row5"
									// /////////////////////////////////////////////

									boolean forceLooprow5 = false;

									row5Struct row5ObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_10) { // G_TM_M_020

										tHash_Lookup_row5.lookup(row5HashKey);

										if (!tHash_Lookup_row5.hasNext()) { // G_TM_M_090

											forceLooprow5 = true;

										} // G_TM_M_090

									} // G_TM_M_020

									else { // G 20 - G 21
										forceLooprow5 = true;
									} // G 21

									row5Struct row5 = null;

									while ((tHash_Lookup_row5 != null && tHash_Lookup_row5
											.hasNext()) || forceLooprow5) { // G_TM_M_043

										// CALL close loop of lookup 'row5'

										row5Struct fromLookup_row5 = null;
										row5 = row5Default;

										if (!forceLooprow5) { // G 46

											fromLookup_row5 = tHash_Lookup_row5
													.next();

											if (fromLookup_row5 != null) {
												row5 = fromLookup_row5;
											}

										} // G 46

										forceLooprow5 = false;

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_10__Struct Var = Var__tMap_10;
											Var.var1 = false;// ###############################
											// ###############################
											// # Output tables

											out6 = null;

											// # Output table : 'out6'
											out6_tmp.HLEVEL = row31.HLEVEL;
											out6_tmp.Name = row31.Name;
											out6_tmp.Path = row31.Path + "\\";
											out6_tmp.DataType = row31.DataType;
											out6_tmp.Update_Date = null;
											out6_tmp.Import_Date = TalendDate
													.getCurrentDate();
											out6_tmp.Download_Date = row5.Download_Date;
											out6_tmp.PathID = row31.PathID;
											out6_tmp.visual = "FAE";
											out6_tmp.itemCode = row31.itemCode;
											out6_tmp.source = (row5.source != null) ? row5.source
													+ " "
													+ row5.SourceSystemVersion
													: "";
											out6_tmp.xml = null;
											out6_tmp.m_applied_path = "@";
											out6 = out6_tmp;
											// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_10 = false;

										tos_count_tMap_10++;

										/**
										 * [tMap_10 main ] stop
										 */
										// Start of branch "out6"
										if (out6 != null) {

											/**
											 * [tFileOutputDelimited_26 main ]
											 * start
											 */

											currentComponent = "tFileOutputDelimited_26";

											StringBuilder sb_tFileOutputDelimited_26 = new StringBuilder();

											if (out6.HLEVEL != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.HLEVEL

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.Name != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.Name

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.Path != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.Path

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.DataType != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.DataType

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.Update_Date != null) {

												sb_tFileOutputDelimited_26
														.append(

														FormatterUtils
																.format_Date(
																		out6.Update_Date,
																		"yyyy-MM-dd")

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.Import_Date != null) {

												sb_tFileOutputDelimited_26
														.append(

														FormatterUtils
																.format_Date(
																		out6.Import_Date,
																		"yyyy-MM-dd")

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.Download_Date != null) {

												sb_tFileOutputDelimited_26
														.append(

														FormatterUtils
																.format_Date(
																		out6.Download_Date,
																		"yyyy-MM-dd")

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.PathID != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.PathID

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.visual != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.visual

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.itemCode != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.itemCode

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.source != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.source

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.xml != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.xml

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.m_applied_path != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.m_applied_path

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_26);

											nb_line_tFileOutputDelimited_26++;

											outtFileOutputDelimited_26
													.write(sb_tFileOutputDelimited_26
															.toString());

											tos_count_tFileOutputDelimited_26++;

											/**
											 * [tFileOutputDelimited_26 main ]
											 * stop
											 */

										} // End of branch "out6"

									} // close loop of lookup 'row5' //
										// G_TM_M_043

								} // End of branch "copyOfcopyOfcopyOfout6_0_1"

							} // End of branch "row36"

							/**
							 * [tFileInputDelimited_21 end ] start
							 */

							currentComponent = "tFileInputDelimited_21";

						}
					} finally {
						if (!((Object) (((String) globalMap
								.get("tCreateTemporaryFile_7_FILEPATH"))) instanceof java.io.InputStream)) {
							if (fid_tFileInputDelimited_21 != null) {
								fid_tFileInputDelimited_21.close();
							}
						}
						if (fid_tFileInputDelimited_21 != null) {
							globalMap.put("tFileInputDelimited_21_NB_LINE",
									fid_tFileInputDelimited_21.getRowNumber());
						}
					}

					ok_Hash.put("tFileInputDelimited_21", true);
					end_Hash.put("tFileInputDelimited_21",
							System.currentTimeMillis());

					/**
					 * [tFileInputDelimited_21 end ] stop
					 */

					/**
					 * [tMap_22 end ] start
					 */

					currentComponent = "tMap_22";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					ok_Hash.put("tMap_22", true);
					end_Hash.put("tMap_22", System.currentTimeMillis());

					/**
					 * [tMap_22 end ] stop
					 */

					/**
					 * [tMap_23 begin ] start
					 */

					ok_Hash.put("tMap_23", false);
					start_Hash.put("tMap_23", System.currentTimeMillis());
					currentComponent = "tMap_23";

					int tos_count_tMap_23 = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_23__Struct {
					}
					Var__tMap_23__Struct Var__tMap_23 = new Var__tMap_23__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					copyOfcopyOfcopyOfout6_0_2Struct copyOfcopyOfcopyOfout6_0_2_tmp = new copyOfcopyOfcopyOfout6_0_2Struct();
					// ###############################

					/**
					 * [tMap_23 begin ] stop
					 */

					/**
					 * [tFileInputDelimited_22 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_22", false);
					start_Hash.put("tFileInputDelimited_22",
							System.currentTimeMillis());
					currentComponent = "tFileInputDelimited_22";

					int tos_count_tFileInputDelimited_22 = 0;

					int nb_line_tFileInputDelimited_22 = 0;
					org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_22 = null;
					try {

						Object filename_tFileInputDelimited_22 = ((String) globalMap
								.get("tCreateTemporaryFile_12_FILEPATH"));
						if (filename_tFileInputDelimited_22 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_22 = 0, random_value_tFileInputDelimited_22 = -1;
							if (footer_value_tFileInputDelimited_22 > 0
									|| random_value_tFileInputDelimited_22 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer and random shouldn't be bigger than 0.");
							}

						}
						try {
							fid_tFileInputDelimited_22 = new org.talend.fileprocess.FileInputDelimited(
									((String) globalMap
											.get("tCreateTemporaryFile_12_FILEPATH")),
									"ISO-8859-15", "\t", "\n", true, 0, 0, -1,
									-1, false);
						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());

						}

						while (fid_tFileInputDelimited_22 != null
								&& fid_tFileInputDelimited_22.nextRecord()) {

							row38 = null;

							boolean whetherReject_tFileInputDelimited_22 = false;
							row38 = new row38Struct();
							try {

								int columnIndexWithD_tFileInputDelimited_22 = 0;

								String temp = "";

								columnIndexWithD_tFileInputDelimited_22 = 0;

								row38.StudyID = fid_tFileInputDelimited_22
										.get(columnIndexWithD_tFileInputDelimited_22);

								columnIndexWithD_tFileInputDelimited_22 = 1;

								row38.MetaID = fid_tFileInputDelimited_22
										.get(columnIndexWithD_tFileInputDelimited_22);

								columnIndexWithD_tFileInputDelimited_22 = 2;

								row38.VisitID = fid_tFileInputDelimited_22
										.get(columnIndexWithD_tFileInputDelimited_22);

								columnIndexWithD_tFileInputDelimited_22 = 3;

								row38.FormID = fid_tFileInputDelimited_22
										.get(columnIndexWithD_tFileInputDelimited_22);

								columnIndexWithD_tFileInputDelimited_22 = 4;

								row38.QuestionID = fid_tFileInputDelimited_22
										.get(columnIndexWithD_tFileInputDelimited_22);

								columnIndexWithD_tFileInputDelimited_22 = 5;

								row38.ItemID = fid_tFileInputDelimited_22
										.get(columnIndexWithD_tFileInputDelimited_22);

								columnIndexWithD_tFileInputDelimited_22 = 6;

								row38.ParentItem = fid_tFileInputDelimited_22
										.get(columnIndexWithD_tFileInputDelimited_22);

								columnIndexWithD_tFileInputDelimited_22 = 7;

								row38.Name = fid_tFileInputDelimited_22
										.get(columnIndexWithD_tFileInputDelimited_22);

								columnIndexWithD_tFileInputDelimited_22 = 8;

								row38.VisitNo = fid_tFileInputDelimited_22
										.get(columnIndexWithD_tFileInputDelimited_22);

								columnIndexWithD_tFileInputDelimited_22 = 9;

								row38.Sequence = fid_tFileInputDelimited_22
										.get(columnIndexWithD_tFileInputDelimited_22);

								columnIndexWithD_tFileInputDelimited_22 = 10;

								row38.hidden = fid_tFileInputDelimited_22
										.get(columnIndexWithD_tFileInputDelimited_22);

								columnIndexWithD_tFileInputDelimited_22 = 11;

								row38.FormFamily = fid_tFileInputDelimited_22
										.get(columnIndexWithD_tFileInputDelimited_22);

								columnIndexWithD_tFileInputDelimited_22 = 12;

								row38.AdditionalData = fid_tFileInputDelimited_22
										.get(columnIndexWithD_tFileInputDelimited_22);

								columnIndexWithD_tFileInputDelimited_22 = 13;

								row38.item_Datatype = fid_tFileInputDelimited_22
										.get(columnIndexWithD_tFileInputDelimited_22);

								columnIndexWithD_tFileInputDelimited_22 = 14;

								temp = fid_tFileInputDelimited_22
										.get(columnIndexWithD_tFileInputDelimited_22);
								if (temp.length() > 0) {

									row38.HLEVEL = ParserUtils
											.parseTo_Integer(temp);

								} else {

									row38.HLEVEL = null;

								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputDelimited_22 = true;

								System.err.println(e.getMessage());
								row38 = null;

							}

							/**
							 * [tFileInputDelimited_22 begin ] stop
							 */
							/**
							 * [tFileInputDelimited_22 main ] start
							 */

							currentComponent = "tFileInputDelimited_22";

							tos_count_tFileInputDelimited_22++;

							/**
							 * [tFileInputDelimited_22 main ] stop
							 */
							// Start of branch "row38"
							if (row38 != null) {

								/**
								 * [tMap_23 main ] start
								 */

								currentComponent = "tMap_23";

								boolean hasCasePrimitiveKeyWithNull_tMap_23 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_23 = false;
								boolean mainRowRejected_tMap_23 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_23__Struct Var = Var__tMap_23;// ###############################
									// ###############################
									// # Output tables

									copyOfcopyOfcopyOfout6_0_2 = null;

									// # Output table :
									// 'copyOfcopyOfcopyOfout6_0_2'
									copyOfcopyOfcopyOfout6_0_2_tmp.HLEVEL = row38.HLEVEL;
									copyOfcopyOfcopyOfout6_0_2_tmp.Name = row38.Name;
									copyOfcopyOfcopyOfout6_0_2_tmp.Path = "\\"
											+ context.i2b2HeadNode + "\\"
											+ context.MDPD + "\\"
											+ row38.StudyID + "\\"
											+ row38.MetaID + "\\"
											+ row38.VisitID + "\\"
											+ row38.FormID + "\\"
											+ row38.QuestionID + "\\"
											+ row38.ItemID;
									copyOfcopyOfcopyOfout6_0_2_tmp.DataType = row38.item_Datatype;
									copyOfcopyOfcopyOfout6_0_2_tmp.Update_Date = null;
									copyOfcopyOfcopyOfout6_0_2_tmp.Import_Date = null;
									copyOfcopyOfcopyOfout6_0_2_tmp.Download_Date = null;
									copyOfcopyOfcopyOfout6_0_2_tmp.PathID = row38.MetaID
											+ "|"
											+ row38.VisitID
											+ "|"
											+ row38.FormID
											+ "|"
											+ row38.QuestionID
											+ "|"
											+ row38.ItemID;
									copyOfcopyOfcopyOfout6_0_2_tmp.itemCode = row38.FormFamily;
									copyOfcopyOfcopyOfout6_0_2 = copyOfcopyOfcopyOfout6_0_2_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_23 = false;

								tos_count_tMap_23++;

								/**
								 * [tMap_23 main ] stop
								 */
								// Start of branch "copyOfcopyOfcopyOfout6_0_2"
								if (copyOfcopyOfcopyOfout6_0_2 != null) {

									/**
									 * [tUnite_1 main ] start
									 */

									currentComponent = "tUnite_1";

									// ////////

									// for output
									row31 = new row31Struct();

									row31.HLEVEL = copyOfcopyOfcopyOfout6_0_2.HLEVEL;
									row31.Name = copyOfcopyOfcopyOfout6_0_2.Name;
									row31.Path = copyOfcopyOfcopyOfout6_0_2.Path;
									row31.DataType = copyOfcopyOfcopyOfout6_0_2.DataType;
									row31.Update_Date = copyOfcopyOfcopyOfout6_0_2.Update_Date;
									row31.Import_Date = copyOfcopyOfcopyOfout6_0_2.Import_Date;
									row31.Download_Date = copyOfcopyOfcopyOfout6_0_2.Download_Date;
									row31.PathID = copyOfcopyOfcopyOfout6_0_2.PathID;
									row31.itemCode = copyOfcopyOfcopyOfout6_0_2.itemCode;

									nb_line_tUnite_1++;

									// ////////

									tos_count_tUnite_1++;

									/**
									 * [tUnite_1 main ] stop
									 */

									/**
									 * [tMap_10 main ] start
									 */

									currentComponent = "tMap_10";

									boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_10 = false;
									boolean mainRowRejected_tMap_10 = false;

									// /////////////////////////////////////////////
									// Starting Lookup Table "row5"
									// /////////////////////////////////////////////

									boolean forceLooprow5 = false;

									row5Struct row5ObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_10) { // G_TM_M_020

										tHash_Lookup_row5.lookup(row5HashKey);

										if (!tHash_Lookup_row5.hasNext()) { // G_TM_M_090

											forceLooprow5 = true;

										} // G_TM_M_090

									} // G_TM_M_020

									else { // G 20 - G 21
										forceLooprow5 = true;
									} // G 21

									row5Struct row5 = null;

									while ((tHash_Lookup_row5 != null && tHash_Lookup_row5
											.hasNext()) || forceLooprow5) { // G_TM_M_043

										// CALL close loop of lookup 'row5'

										row5Struct fromLookup_row5 = null;
										row5 = row5Default;

										if (!forceLooprow5) { // G 46

											fromLookup_row5 = tHash_Lookup_row5
													.next();

											if (fromLookup_row5 != null) {
												row5 = fromLookup_row5;
											}

										} // G 46

										forceLooprow5 = false;

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_10__Struct Var = Var__tMap_10;
											Var.var1 = false;// ###############################
											// ###############################
											// # Output tables

											out6 = null;

											// # Output table : 'out6'
											out6_tmp.HLEVEL = row31.HLEVEL;
											out6_tmp.Name = row31.Name;
											out6_tmp.Path = row31.Path + "\\";
											out6_tmp.DataType = row31.DataType;
											out6_tmp.Update_Date = null;
											out6_tmp.Import_Date = TalendDate
													.getCurrentDate();
											out6_tmp.Download_Date = row5.Download_Date;
											out6_tmp.PathID = row31.PathID;
											out6_tmp.visual = "FAE";
											out6_tmp.itemCode = row31.itemCode;
											out6_tmp.source = (row5.source != null) ? row5.source
													+ " "
													+ row5.SourceSystemVersion
													: "";
											out6_tmp.xml = null;
											out6_tmp.m_applied_path = "@";
											out6 = out6_tmp;
											// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_10 = false;

										tos_count_tMap_10++;

										/**
										 * [tMap_10 main ] stop
										 */
										// Start of branch "out6"
										if (out6 != null) {

											/**
											 * [tFileOutputDelimited_26 main ]
											 * start
											 */

											currentComponent = "tFileOutputDelimited_26";

											StringBuilder sb_tFileOutputDelimited_26 = new StringBuilder();

											if (out6.HLEVEL != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.HLEVEL

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.Name != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.Name

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.Path != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.Path

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.DataType != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.DataType

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.Update_Date != null) {

												sb_tFileOutputDelimited_26
														.append(

														FormatterUtils
																.format_Date(
																		out6.Update_Date,
																		"yyyy-MM-dd")

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.Import_Date != null) {

												sb_tFileOutputDelimited_26
														.append(

														FormatterUtils
																.format_Date(
																		out6.Import_Date,
																		"yyyy-MM-dd")

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.Download_Date != null) {

												sb_tFileOutputDelimited_26
														.append(

														FormatterUtils
																.format_Date(
																		out6.Download_Date,
																		"yyyy-MM-dd")

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.PathID != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.PathID

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.visual != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.visual

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.itemCode != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.itemCode

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.source != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.source

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.xml != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.xml

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_tFileOutputDelimited_26);

											if (out6.m_applied_path != null) {

												sb_tFileOutputDelimited_26
														.append(

														out6.m_applied_path

														);

											}

											sb_tFileOutputDelimited_26
													.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_26);

											nb_line_tFileOutputDelimited_26++;

											outtFileOutputDelimited_26
													.write(sb_tFileOutputDelimited_26
															.toString());

											tos_count_tFileOutputDelimited_26++;

											/**
											 * [tFileOutputDelimited_26 main ]
											 * stop
											 */

										} // End of branch "out6"

									} // close loop of lookup 'row5' //
										// G_TM_M_043

								} // End of branch "copyOfcopyOfcopyOfout6_0_2"

							} // End of branch "row38"

							/**
							 * [tFileInputDelimited_22 end ] start
							 */

							currentComponent = "tFileInputDelimited_22";

						}
					} finally {
						if (!((Object) (((String) globalMap
								.get("tCreateTemporaryFile_12_FILEPATH"))) instanceof java.io.InputStream)) {
							if (fid_tFileInputDelimited_22 != null) {
								fid_tFileInputDelimited_22.close();
							}
						}
						if (fid_tFileInputDelimited_22 != null) {
							globalMap.put("tFileInputDelimited_22_NB_LINE",
									fid_tFileInputDelimited_22.getRowNumber());
						}
					}

					ok_Hash.put("tFileInputDelimited_22", true);
					end_Hash.put("tFileInputDelimited_22",
							System.currentTimeMillis());

					/**
					 * [tFileInputDelimited_22 end ] stop
					 */

					/**
					 * [tMap_23 end ] start
					 */

					currentComponent = "tMap_23";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					ok_Hash.put("tMap_23", true);
					end_Hash.put("tMap_23", System.currentTimeMillis());

					/**
					 * [tMap_23 end ] stop
					 */

					/**
					 * [tUnite_1 end ] start
					 */

					currentComponent = "tUnite_1";

					globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);

					ok_Hash.put("tUnite_1", true);
					end_Hash.put("tUnite_1", System.currentTimeMillis());

					/**
					 * [tUnite_1 end ] stop
					 */

					/**
					 * [tMap_10 end ] start
					 */

					currentComponent = "tMap_10";

					// ###############################
					// # Lookup hashes releasing
					if (tHash_Lookup_row5 != null) {
						tHash_Lookup_row5.endGet();
					}
					globalMap.remove("tHash_Lookup_row5");

					// ###############################

					ok_Hash.put("tMap_10", true);
					end_Hash.put("tMap_10", System.currentTimeMillis());

					/**
					 * [tMap_10 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_26 end ] start
					 */

					currentComponent = "tFileOutputDelimited_26";

				} finally {
					if (outtFileOutputDelimited_26 != null) {
						outtFileOutputDelimited_26.flush();
						outtFileOutputDelimited_26.close();
					}
					globalMap.put("tFileOutputDelimited_26_NB_LINE",
							nb_line_tFileOutputDelimited_26);
					globalMap.put("tFileOutputDelimited_26_FILE_NAME",
							fileName_tFileOutputDelimited_26);
				} // finally

				ok_Hash.put("tFileOutputDelimited_26", true);
				end_Hash.put("tFileOutputDelimited_26",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_26 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tRowGenerator_1:OnSubjobOk1",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_2Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tRowGenerator_1:OnSubjobOk2",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_10Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		} finally {
			// free memory for "tMap_10"
			globalMap.remove("tHash_Lookup_row5");

		}

		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());
				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				System.out.println("DONE: Creating Ontology!");

				/**
				 * [tJava_2 begin ] stop
				 */
				/**
				 * [tJava_2 main ] start
				 */

				currentComponent = "tJava_2";

				tos_count_tJava_2++;

				/**
				 * [tJava_2 main ] stop
				 */
				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				/**
				 * [tJava_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_10Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_10 begin ] start
				 */

				ok_Hash.put("tJava_10", false);
				start_Hash.put("tJava_10", System.currentTimeMillis());
				currentComponent = "tJava_10";

				int tos_count_tJava_10 = 0;

				StatusListener.setSubStatus(100.0f, (int) (100.0f) + "%");

				/**
				 * [tJava_10 begin ] stop
				 */
				/**
				 * [tJava_10 main ] start
				 */

				currentComponent = "tJava_10";

				tos_count_tJava_10++;

				/**
				 * [tJava_10 main ] stop
				 */
				/**
				 * [tJava_10 end ] start
				 */

				currentComponent = "tJava_10";

				ok_Hash.put("tJava_10", true);
				end_Hash.put("tJava_10", System.currentTimeMillis());

				/**
				 * [tJava_10 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJava_10_SUBPROCESS_STATE", 1);
	}

	public static class row15Struct implements
			routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String StudyID;

		public String getStudyID() {
			return this.StudyID;
		}

		public String MetaID;

		public String getMetaID() {
			return this.MetaID;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String QuestionID;

		public String getQuestionID() {
			return this.QuestionID;
		}

		public String ItemID;

		public String getItemID() {
			return this.ItemID;
		}

		public String ParentItem;

		public String getParentItem() {
			return this.ParentItem;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String VisitNo;

		public String getVisitNo() {
			return this.VisitNo;
		}

		public String Sequence;

		public String getSequence() {
			return this.Sequence;
		}

		public String hidden;

		public String getHidden() {
			return this.hidden;
		}

		public String FormFamily;

		public String getFormFamily() {
			return this.FormFamily;
		}

		public String AdditionalData;

		public String getAdditionalData() {
			return this.AdditionalData;
		}

		public String item_Datatype;

		public String getItem_Datatype() {
			return this.item_Datatype;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.StudyID = readString(dis);

					this.MetaID = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.QuestionID = readString(dis);

					this.ItemID = readString(dis);

					this.ParentItem = readString(dis);

					this.Name = readString(dis);

					this.VisitNo = readString(dis);

					this.Sequence = readString(dis);

					this.hidden = readString(dis);

					this.FormFamily = readString(dis);

					this.AdditionalData = readString(dis);

					this.item_Datatype = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.StudyID, dos);

				// String

				writeString(this.MetaID, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.QuestionID, dos);

				// String

				writeString(this.ItemID, dos);

				// String

				writeString(this.ParentItem, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.VisitNo, dos);

				// String

				writeString(this.Sequence, dos);

				// String

				writeString(this.hidden, dos);

				// String

				writeString(this.FormFamily, dos);

				// String

				writeString(this.AdditionalData, dos);

				// String

				writeString(this.item_Datatype, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("StudyID=" + StudyID);
			sb.append(",MetaID=" + MetaID);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",QuestionID=" + QuestionID);
			sb.append(",ItemID=" + ItemID);
			sb.append(",ParentItem=" + ParentItem);
			sb.append(",Name=" + Name);
			sb.append(",VisitNo=" + VisitNo);
			sb.append(",Sequence=" + Sequence);
			sb.append(",hidden=" + hidden);
			sb.append(",FormFamily=" + FormFamily);
			sb.append(",AdditionalData=" + AdditionalData);
			sb.append(",item_Datatype=" + item_Datatype);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_8Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row15Struct row15 = new row15Struct();

				/**
				 * [tAdvancedHash_row15 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row15", false);
				start_Hash.put("tAdvancedHash_row15",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row15";

				int tos_count_tAdvancedHash_row15 = 0;

				// connection name:row15
				// source node:tFileInputDelimited_8 -
				// inputs:(after_tFileInputXML_3) outputs:(row15,row15) | target
				// node:tAdvancedHash_row15 - inputs:(row15) outputs:()
				// linked node: tMap_9 - inputs:(row21,row15,row22)
				// outputs:(out8)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row15 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row15Struct> getLookup(matchingModeEnum_row15);

				globalMap.put("tHash_Lookup_row15", tHash_Lookup_row15);

				/**
				 * [tAdvancedHash_row15 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_8 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_8", false);
				start_Hash.put("tFileInputDelimited_8",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_8";

				int tos_count_tFileInputDelimited_8 = 0;

				int nb_line_tFileInputDelimited_8 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_8 = null;
				try {

					Object filename_tFileInputDelimited_8 = ((String) globalMap
							.get("tCreateTemporaryFile_4_FILEPATH"));
					if (filename_tFileInputDelimited_8 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_8 = 0, random_value_tFileInputDelimited_8 = -1;
						if (footer_value_tFileInputDelimited_8 > 0
								|| random_value_tFileInputDelimited_8 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_8 = new org.talend.fileprocess.FileInputDelimited(
								((String) globalMap
										.get("tCreateTemporaryFile_4_FILEPATH")),
								"ISO-8859-15", "\t", "\n", true, 0, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_8 != null
							&& fid_tFileInputDelimited_8.nextRecord()) {

						row15 = null;

						row15 = null;

						boolean whetherReject_tFileInputDelimited_8 = false;
						row15 = new row15Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_8 = 0;

							columnIndexWithD_tFileInputDelimited_8 = 0;

							row15.StudyID = fid_tFileInputDelimited_8
									.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 1;

							row15.MetaID = fid_tFileInputDelimited_8
									.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 2;

							row15.VisitID = fid_tFileInputDelimited_8
									.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 3;

							row15.FormID = fid_tFileInputDelimited_8
									.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 4;

							row15.QuestionID = fid_tFileInputDelimited_8
									.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 5;

							row15.ItemID = fid_tFileInputDelimited_8
									.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 6;

							row15.ParentItem = fid_tFileInputDelimited_8
									.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 7;

							row15.Name = fid_tFileInputDelimited_8
									.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 8;

							row15.VisitNo = fid_tFileInputDelimited_8
									.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 9;

							row15.Sequence = fid_tFileInputDelimited_8
									.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 10;

							row15.hidden = fid_tFileInputDelimited_8
									.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 11;

							row15.FormFamily = fid_tFileInputDelimited_8
									.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 12;

							row15.AdditionalData = fid_tFileInputDelimited_8
									.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 13;

							row15.item_Datatype = fid_tFileInputDelimited_8
									.get(columnIndexWithD_tFileInputDelimited_8);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_8 = true;

							System.err.println(e.getMessage());
							row15 = null;

						}

						/**
						 * [tFileInputDelimited_8 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_8 main ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						tos_count_tFileInputDelimited_8++;

						/**
						 * [tFileInputDelimited_8 main ] stop
						 */
						// Start of branch "row15"
						if (row15 != null) {

							/**
							 * [tAdvancedHash_row15 main ] start
							 */

							currentComponent = "tAdvancedHash_row15";

							row15Struct row15_HashRow = new row15Struct();

							row15_HashRow.StudyID = row15.StudyID;

							row15_HashRow.MetaID = row15.MetaID;

							row15_HashRow.VisitID = row15.VisitID;

							row15_HashRow.FormID = row15.FormID;

							row15_HashRow.QuestionID = row15.QuestionID;

							row15_HashRow.ItemID = row15.ItemID;

							row15_HashRow.ParentItem = row15.ParentItem;

							row15_HashRow.Name = row15.Name;

							row15_HashRow.VisitNo = row15.VisitNo;

							row15_HashRow.Sequence = row15.Sequence;

							row15_HashRow.hidden = row15.hidden;

							row15_HashRow.FormFamily = row15.FormFamily;

							row15_HashRow.AdditionalData = row15.AdditionalData;

							row15_HashRow.item_Datatype = row15.item_Datatype;

							tHash_Lookup_row15.put(row15_HashRow);

							tos_count_tAdvancedHash_row15++;

							/**
							 * [tAdvancedHash_row15 main ] stop
							 */

						} // End of branch "row15"

						/**
						 * [tFileInputDelimited_8 end ] start
						 */

						currentComponent = "tFileInputDelimited_8";

					}
				} finally {
					if (!((Object) (((String) globalMap
							.get("tCreateTemporaryFile_4_FILEPATH"))) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_8 != null) {
							fid_tFileInputDelimited_8.close();
						}
					}
					if (fid_tFileInputDelimited_8 != null) {
						globalMap.put("tFileInputDelimited_8_NB_LINE",
								fid_tFileInputDelimited_8.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_8", true);
				end_Hash.put("tFileInputDelimited_8",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_8 end ] stop
				 */

				/**
				 * [tAdvancedHash_row15 end ] start
				 */

				currentComponent = "tAdvancedHash_row15";

				tHash_Lookup_row15.endPut();

				ok_Hash.put("tAdvancedHash_row15", true);
				end_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row15 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 1);
	}

	public static class row22Struct implements
			routines.system.IPersistableComparableLookupRow<row22Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String VisitOID;

		public String getVisitOID() {
			return this.VisitOID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.VisitOID == null) ? 0 : this.VisitOID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row22Struct other = (row22Struct) obj;

			if (this.VisitOID == null) {
				if (other.VisitOID != null)
					return false;
			} else if (!this.VisitOID.equals(other.VisitOID))
				return false;

			return true;
		}

		public void copyDataTo(row22Struct other) {

			other.VisitOID = this.VisitOID;
			other.Name = this.Name;

		}

		public void copyKeysDataTo(row22Struct other) {

			other.VisitOID = this.VisitOID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.VisitOID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.VisitOID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Name = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Name, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("VisitOID=" + VisitOID);
			sb.append(",Name=" + Name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.VisitOID, other.VisitOID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_11Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row22Struct row22 = new row22Struct();

				/**
				 * [tAdvancedHash_row22 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row22", false);
				start_Hash.put("tAdvancedHash_row22",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row22";

				int tos_count_tAdvancedHash_row22 = 0;

				// connection name:row22
				// source node:tFileInputDelimited_11 -
				// inputs:(after_tFileInputXML_3) outputs:(row22,row22) | target
				// node:tAdvancedHash_row22 - inputs:(row22) outputs:()
				// linked node: tMap_9 - inputs:(row21,row15,row22)
				// outputs:(out8)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row22 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row22Struct> getLookup(matchingModeEnum_row22);

				globalMap.put("tHash_Lookup_row22", tHash_Lookup_row22);

				/**
				 * [tAdvancedHash_row22 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_11 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_11", false);
				start_Hash.put("tFileInputDelimited_11",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_11";

				int tos_count_tFileInputDelimited_11 = 0;

				int nb_line_tFileInputDelimited_11 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_11 = null;
				try {

					Object filename_tFileInputDelimited_11 = ((String) globalMap
							.get("tCreateTemporaryFile_8_FILEPATH"));
					if (filename_tFileInputDelimited_11 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_11 = 0, random_value_tFileInputDelimited_11 = -1;
						if (footer_value_tFileInputDelimited_11 > 0
								|| random_value_tFileInputDelimited_11 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_11 = new org.talend.fileprocess.FileInputDelimited(
								((String) globalMap
										.get("tCreateTemporaryFile_8_FILEPATH")),
								"ISO-8859-15", "\t", "\n", true, 0, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_11 != null
							&& fid_tFileInputDelimited_11.nextRecord()) {

						row22 = null;

						row22 = null;

						boolean whetherReject_tFileInputDelimited_11 = false;
						row22 = new row22Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_11 = 0;

							columnIndexWithD_tFileInputDelimited_11 = 0;

							row22.VisitOID = fid_tFileInputDelimited_11
									.get(columnIndexWithD_tFileInputDelimited_11);

							columnIndexWithD_tFileInputDelimited_11 = 1;

							row22.Name = fid_tFileInputDelimited_11
									.get(columnIndexWithD_tFileInputDelimited_11);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_11 = true;

							System.err.println(e.getMessage());
							row22 = null;

						}

						/**
						 * [tFileInputDelimited_11 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_11 main ] start
						 */

						currentComponent = "tFileInputDelimited_11";

						tos_count_tFileInputDelimited_11++;

						/**
						 * [tFileInputDelimited_11 main ] stop
						 */
						// Start of branch "row22"
						if (row22 != null) {

							/**
							 * [tAdvancedHash_row22 main ] start
							 */

							currentComponent = "tAdvancedHash_row22";

							row22Struct row22_HashRow = new row22Struct();

							row22_HashRow.VisitOID = row22.VisitOID;

							row22_HashRow.Name = row22.Name;

							tHash_Lookup_row22.put(row22_HashRow);

							tos_count_tAdvancedHash_row22++;

							/**
							 * [tAdvancedHash_row22 main ] stop
							 */

						} // End of branch "row22"

						/**
						 * [tFileInputDelimited_11 end ] start
						 */

						currentComponent = "tFileInputDelimited_11";

					}
				} finally {
					if (!((Object) (((String) globalMap
							.get("tCreateTemporaryFile_8_FILEPATH"))) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_11 != null) {
							fid_tFileInputDelimited_11.close();
						}
					}
					if (fid_tFileInputDelimited_11 != null) {
						globalMap.put("tFileInputDelimited_11_NB_LINE",
								fid_tFileInputDelimited_11.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_11", true);
				end_Hash.put("tFileInputDelimited_11",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_11 end ] stop
				 */

				/**
				 * [tAdvancedHash_row22 end ] start
				 */

				currentComponent = "tAdvancedHash_row22";

				tHash_Lookup_row22.endPut();

				ok_Hash.put("tAdvancedHash_row22", true);
				end_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row22 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_11_SUBPROCESS_STATE", 1);
	}

	public static class Temp3VisitStruct implements
			routines.system.IPersistableComparableLookupRow<Temp3VisitStruct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String StudyID;

		public String getStudyID() {
			return this.StudyID;
		}

		public String MetaID;

		public String getMetaID() {
			return this.MetaID;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String QuestionID;

		public String getQuestionID() {
			return this.QuestionID;
		}

		public String ItemID;

		public String getItemID() {
			return this.ItemID;
		}

		public String ParentItem;

		public String getParentItem() {
			return this.ParentItem;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String VisitNo;

		public String getVisitNo() {
			return this.VisitNo;
		}

		public String Sequence;

		public String getSequence() {
			return this.Sequence;
		}

		public String hidden;

		public String getHidden() {
			return this.hidden;
		}

		public String FormFamily;

		public String getFormFamily() {
			return this.FormFamily;
		}

		public String AdditionalData;

		public String getAdditionalData() {
			return this.AdditionalData;
		}

		public String item_Datatype;

		public String getItem_Datatype() {
			return this.item_Datatype;
		}

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.VisitID == null) ? 0 : this.VisitID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final Temp3VisitStruct other = (Temp3VisitStruct) obj;

			if (this.VisitID == null) {
				if (other.VisitID != null)
					return false;
			} else if (!this.VisitID.equals(other.VisitID))
				return false;

			return true;
		}

		public void copyDataTo(Temp3VisitStruct other) {

			other.StudyID = this.StudyID;
			other.MetaID = this.MetaID;
			other.VisitID = this.VisitID;
			other.FormID = this.FormID;
			other.QuestionID = this.QuestionID;
			other.ItemID = this.ItemID;
			other.ParentItem = this.ParentItem;
			other.Name = this.Name;
			other.VisitNo = this.VisitNo;
			other.Sequence = this.Sequence;
			other.hidden = this.hidden;
			other.FormFamily = this.FormFamily;
			other.AdditionalData = this.AdditionalData;
			other.item_Datatype = this.item_Datatype;
			other.HLEVEL = this.HLEVEL;

		}

		public void copyKeysDataTo(Temp3VisitStruct other) {

			other.VisitID = this.VisitID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.VisitID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.VisitID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.StudyID = readString(dis, ois);

				this.MetaID = readString(dis, ois);

				this.FormID = readString(dis, ois);

				this.QuestionID = readString(dis, ois);

				this.ItemID = readString(dis, ois);

				this.ParentItem = readString(dis, ois);

				this.Name = readString(dis, ois);

				this.VisitNo = readString(dis, ois);

				this.Sequence = readString(dis, ois);

				this.hidden = readString(dis, ois);

				this.FormFamily = readString(dis, ois);

				this.AdditionalData = readString(dis, ois);

				this.item_Datatype = readString(dis, ois);

				this.HLEVEL = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.StudyID, dos, oos);

				writeString(this.MetaID, dos, oos);

				writeString(this.FormID, dos, oos);

				writeString(this.QuestionID, dos, oos);

				writeString(this.ItemID, dos, oos);

				writeString(this.ParentItem, dos, oos);

				writeString(this.Name, dos, oos);

				writeString(this.VisitNo, dos, oos);

				writeString(this.Sequence, dos, oos);

				writeString(this.hidden, dos, oos);

				writeString(this.FormFamily, dos, oos);

				writeString(this.AdditionalData, dos, oos);

				writeString(this.item_Datatype, dos, oos);

				writeInteger(this.HLEVEL, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("StudyID=" + StudyID);
			sb.append(",MetaID=" + MetaID);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",QuestionID=" + QuestionID);
			sb.append(",ItemID=" + ItemID);
			sb.append(",ParentItem=" + ParentItem);
			sb.append(",Name=" + Name);
			sb.append(",VisitNo=" + VisitNo);
			sb.append(",Sequence=" + Sequence);
			sb.append(",hidden=" + hidden);
			sb.append(",FormFamily=" + FormFamily);
			sb.append(",AdditionalData=" + AdditionalData);
			sb.append(",item_Datatype=" + item_Datatype);
			sb.append(",HLEVEL=" + String.valueOf(HLEVEL));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(Temp3VisitStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.VisitID, other.VisitID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_10Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				Temp3VisitStruct Temp3Visit = new Temp3VisitStruct();

				/**
				 * [tAdvancedHash_Temp3Visit begin ] start
				 */

				ok_Hash.put("tAdvancedHash_Temp3Visit", false);
				start_Hash.put("tAdvancedHash_Temp3Visit",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_Temp3Visit";

				int tos_count_tAdvancedHash_Temp3Visit = 0;

				// connection name:Temp3Visit
				// source node:tFileInputDelimited_10 -
				// inputs:(after_tFileInputXML_2)
				// outputs:(Temp3Visit,Temp3Visit) | target
				// node:tAdvancedHash_Temp3Visit - inputs:(Temp3Visit)
				// outputs:()
				// linked node: tMap_12 - inputs:(row17,Temp3Visit,FormNames)
				// outputs:(out9)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_Temp3Visit = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Temp3VisitStruct> tHash_Lookup_Temp3Visit = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<Temp3VisitStruct> getLookup(matchingModeEnum_Temp3Visit);

				globalMap.put("tHash_Lookup_Temp3Visit",
						tHash_Lookup_Temp3Visit);

				/**
				 * [tAdvancedHash_Temp3Visit begin ] stop
				 */

				/**
				 * [tFileInputDelimited_10 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_10", false);
				start_Hash.put("tFileInputDelimited_10",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_10";

				int tos_count_tFileInputDelimited_10 = 0;

				int nb_line_tFileInputDelimited_10 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_10 = null;
				try {

					Object filename_tFileInputDelimited_10 = ((String) globalMap
							.get("tCreateTemporaryFile_16_FILEPATH"));
					if (filename_tFileInputDelimited_10 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_10 = 0, random_value_tFileInputDelimited_10 = -1;
						if (footer_value_tFileInputDelimited_10 > 0
								|| random_value_tFileInputDelimited_10 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_10 = new org.talend.fileprocess.FileInputDelimited(
								((String) globalMap
										.get("tCreateTemporaryFile_16_FILEPATH")),
								"ISO-8859-15", "\t", "\n", true, 1, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_10 != null
							&& fid_tFileInputDelimited_10.nextRecord()) {

						Temp3Visit = null;

						Temp3Visit = null;

						boolean whetherReject_tFileInputDelimited_10 = false;
						Temp3Visit = new Temp3VisitStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_10 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_10 = 0;

							Temp3Visit.StudyID = fid_tFileInputDelimited_10
									.get(columnIndexWithD_tFileInputDelimited_10);

							columnIndexWithD_tFileInputDelimited_10 = 1;

							Temp3Visit.MetaID = fid_tFileInputDelimited_10
									.get(columnIndexWithD_tFileInputDelimited_10);

							columnIndexWithD_tFileInputDelimited_10 = 2;

							Temp3Visit.VisitID = fid_tFileInputDelimited_10
									.get(columnIndexWithD_tFileInputDelimited_10);

							columnIndexWithD_tFileInputDelimited_10 = 3;

							Temp3Visit.FormID = fid_tFileInputDelimited_10
									.get(columnIndexWithD_tFileInputDelimited_10);

							columnIndexWithD_tFileInputDelimited_10 = 4;

							Temp3Visit.QuestionID = fid_tFileInputDelimited_10
									.get(columnIndexWithD_tFileInputDelimited_10);

							columnIndexWithD_tFileInputDelimited_10 = 5;

							Temp3Visit.ItemID = fid_tFileInputDelimited_10
									.get(columnIndexWithD_tFileInputDelimited_10);

							columnIndexWithD_tFileInputDelimited_10 = 6;

							Temp3Visit.ParentItem = fid_tFileInputDelimited_10
									.get(columnIndexWithD_tFileInputDelimited_10);

							columnIndexWithD_tFileInputDelimited_10 = 7;

							Temp3Visit.Name = fid_tFileInputDelimited_10
									.get(columnIndexWithD_tFileInputDelimited_10);

							columnIndexWithD_tFileInputDelimited_10 = 8;

							Temp3Visit.VisitNo = fid_tFileInputDelimited_10
									.get(columnIndexWithD_tFileInputDelimited_10);

							columnIndexWithD_tFileInputDelimited_10 = 9;

							Temp3Visit.Sequence = fid_tFileInputDelimited_10
									.get(columnIndexWithD_tFileInputDelimited_10);

							columnIndexWithD_tFileInputDelimited_10 = 10;

							Temp3Visit.hidden = fid_tFileInputDelimited_10
									.get(columnIndexWithD_tFileInputDelimited_10);

							columnIndexWithD_tFileInputDelimited_10 = 11;

							Temp3Visit.FormFamily = fid_tFileInputDelimited_10
									.get(columnIndexWithD_tFileInputDelimited_10);

							columnIndexWithD_tFileInputDelimited_10 = 12;

							Temp3Visit.AdditionalData = fid_tFileInputDelimited_10
									.get(columnIndexWithD_tFileInputDelimited_10);

							columnIndexWithD_tFileInputDelimited_10 = 13;

							Temp3Visit.item_Datatype = fid_tFileInputDelimited_10
									.get(columnIndexWithD_tFileInputDelimited_10);

							columnIndexWithD_tFileInputDelimited_10 = 14;

							temp = fid_tFileInputDelimited_10
									.get(columnIndexWithD_tFileInputDelimited_10);
							if (temp.length() > 0) {

								Temp3Visit.HLEVEL = ParserUtils
										.parseTo_Integer(temp);

							} else {

								Temp3Visit.HLEVEL = null;

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_10 = true;

							System.err.println(e.getMessage());
							Temp3Visit = null;

						}

						/**
						 * [tFileInputDelimited_10 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_10 main ] start
						 */

						currentComponent = "tFileInputDelimited_10";

						tos_count_tFileInputDelimited_10++;

						/**
						 * [tFileInputDelimited_10 main ] stop
						 */
						// Start of branch "Temp3Visit"
						if (Temp3Visit != null) {

							/**
							 * [tAdvancedHash_Temp3Visit main ] start
							 */

							currentComponent = "tAdvancedHash_Temp3Visit";

							Temp3VisitStruct Temp3Visit_HashRow = new Temp3VisitStruct();

							Temp3Visit_HashRow.StudyID = Temp3Visit.StudyID;

							Temp3Visit_HashRow.MetaID = Temp3Visit.MetaID;

							Temp3Visit_HashRow.VisitID = Temp3Visit.VisitID;

							Temp3Visit_HashRow.FormID = Temp3Visit.FormID;

							Temp3Visit_HashRow.QuestionID = Temp3Visit.QuestionID;

							Temp3Visit_HashRow.ItemID = Temp3Visit.ItemID;

							Temp3Visit_HashRow.ParentItem = Temp3Visit.ParentItem;

							Temp3Visit_HashRow.Name = Temp3Visit.Name;

							Temp3Visit_HashRow.VisitNo = Temp3Visit.VisitNo;

							Temp3Visit_HashRow.Sequence = Temp3Visit.Sequence;

							Temp3Visit_HashRow.hidden = Temp3Visit.hidden;

							Temp3Visit_HashRow.FormFamily = Temp3Visit.FormFamily;

							Temp3Visit_HashRow.AdditionalData = Temp3Visit.AdditionalData;

							Temp3Visit_HashRow.item_Datatype = Temp3Visit.item_Datatype;

							Temp3Visit_HashRow.HLEVEL = Temp3Visit.HLEVEL;

							tHash_Lookup_Temp3Visit.put(Temp3Visit_HashRow);

							tos_count_tAdvancedHash_Temp3Visit++;

							/**
							 * [tAdvancedHash_Temp3Visit main ] stop
							 */

						} // End of branch "Temp3Visit"

						/**
						 * [tFileInputDelimited_10 end ] start
						 */

						currentComponent = "tFileInputDelimited_10";

					}
				} finally {
					if (!((Object) (((String) globalMap
							.get("tCreateTemporaryFile_16_FILEPATH"))) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_10 != null) {
							fid_tFileInputDelimited_10.close();
						}
					}
					if (fid_tFileInputDelimited_10 != null) {
						globalMap.put("tFileInputDelimited_10_NB_LINE",
								fid_tFileInputDelimited_10.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_10", true);
				end_Hash.put("tFileInputDelimited_10",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_10 end ] stop
				 */

				/**
				 * [tAdvancedHash_Temp3Visit end ] start
				 */

				currentComponent = "tAdvancedHash_Temp3Visit";

				tHash_Lookup_Temp3Visit.endPut();

				ok_Hash.put("tAdvancedHash_Temp3Visit", true);
				end_Hash.put("tAdvancedHash_Temp3Visit",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_Temp3Visit end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_10_SUBPROCESS_STATE", 1);
	}

	public static class FormNamesStruct implements
			routines.system.IPersistableComparableLookupRow<FormNamesStruct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String FormOID;

		public String getFormOID() {
			return this.FormOID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.FormOID == null) ? 0 : this.FormOID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final FormNamesStruct other = (FormNamesStruct) obj;

			if (this.FormOID == null) {
				if (other.FormOID != null)
					return false;
			} else if (!this.FormOID.equals(other.FormOID))
				return false;

			return true;
		}

		public void copyDataTo(FormNamesStruct other) {

			other.FormOID = this.FormOID;
			other.Name = this.Name;

		}

		public void copyKeysDataTo(FormNamesStruct other) {

			other.FormOID = this.FormOID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.FormOID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FormOID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Name = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Name, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FormOID=" + FormOID);
			sb.append(",Name=" + Name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(FormNamesStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.FormOID, other.FormOID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_12Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				FormNamesStruct FormNames = new FormNamesStruct();

				/**
				 * [tAdvancedHash_FormNames begin ] start
				 */

				ok_Hash.put("tAdvancedHash_FormNames", false);
				start_Hash.put("tAdvancedHash_FormNames",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_FormNames";

				int tos_count_tAdvancedHash_FormNames = 0;

				// connection name:FormNames
				// source node:tFileInputDelimited_12 -
				// inputs:(after_tFileInputXML_2) outputs:(FormNames,FormNames)
				// | target node:tAdvancedHash_FormNames - inputs:(FormNames)
				// outputs:()
				// linked node: tMap_12 - inputs:(row17,Temp3Visit,FormNames)
				// outputs:(out9)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_FormNames = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<FormNamesStruct> tHash_Lookup_FormNames = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<FormNamesStruct> getLookup(matchingModeEnum_FormNames);

				globalMap.put("tHash_Lookup_FormNames", tHash_Lookup_FormNames);

				/**
				 * [tAdvancedHash_FormNames begin ] stop
				 */

				/**
				 * [tFileInputDelimited_12 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_12", false);
				start_Hash.put("tFileInputDelimited_12",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_12";

				int tos_count_tFileInputDelimited_12 = 0;

				int nb_line_tFileInputDelimited_12 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_12 = null;
				try {

					Object filename_tFileInputDelimited_12 = ((String) globalMap
							.get("tCreateTemporaryFile_9_FILEPATH"));
					if (filename_tFileInputDelimited_12 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_12 = 0, random_value_tFileInputDelimited_12 = -1;
						if (footer_value_tFileInputDelimited_12 > 0
								|| random_value_tFileInputDelimited_12 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_12 = new org.talend.fileprocess.FileInputDelimited(
								((String) globalMap
										.get("tCreateTemporaryFile_9_FILEPATH")),
								"ISO-8859-15", "\t", "\n", true, 0, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_12 != null
							&& fid_tFileInputDelimited_12.nextRecord()) {

						FormNames = null;

						FormNames = null;

						boolean whetherReject_tFileInputDelimited_12 = false;
						FormNames = new FormNamesStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_12 = 0;

							columnIndexWithD_tFileInputDelimited_12 = 0;

							FormNames.FormOID = fid_tFileInputDelimited_12
									.get(columnIndexWithD_tFileInputDelimited_12);

							columnIndexWithD_tFileInputDelimited_12 = 1;

							FormNames.Name = fid_tFileInputDelimited_12
									.get(columnIndexWithD_tFileInputDelimited_12);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_12 = true;

							System.err.println(e.getMessage());
							FormNames = null;

						}

						/**
						 * [tFileInputDelimited_12 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_12 main ] start
						 */

						currentComponent = "tFileInputDelimited_12";

						tos_count_tFileInputDelimited_12++;

						/**
						 * [tFileInputDelimited_12 main ] stop
						 */
						// Start of branch "FormNames"
						if (FormNames != null) {

							/**
							 * [tAdvancedHash_FormNames main ] start
							 */

							currentComponent = "tAdvancedHash_FormNames";

							FormNamesStruct FormNames_HashRow = new FormNamesStruct();

							FormNames_HashRow.FormOID = FormNames.FormOID;

							FormNames_HashRow.Name = FormNames.Name;

							tHash_Lookup_FormNames.put(FormNames_HashRow);

							tos_count_tAdvancedHash_FormNames++;

							/**
							 * [tAdvancedHash_FormNames main ] stop
							 */

						} // End of branch "FormNames"

						/**
						 * [tFileInputDelimited_12 end ] start
						 */

						currentComponent = "tFileInputDelimited_12";

					}
				} finally {
					if (!((Object) (((String) globalMap
							.get("tCreateTemporaryFile_9_FILEPATH"))) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_12 != null) {
							fid_tFileInputDelimited_12.close();
						}
					}
					if (fid_tFileInputDelimited_12 != null) {
						globalMap.put("tFileInputDelimited_12_NB_LINE",
								fid_tFileInputDelimited_12.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_12", true);
				end_Hash.put("tFileInputDelimited_12",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_12 end ] stop
				 */

				/**
				 * [tAdvancedHash_FormNames end ] start
				 */

				currentComponent = "tAdvancedHash_FormNames";

				tHash_Lookup_FormNames.endPut();

				ok_Hash.put("tAdvancedHash_FormNames", true);
				end_Hash.put("tAdvancedHash_FormNames",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_FormNames end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_12_SUBPROCESS_STATE", 1);
	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String StudyID;

		public String getStudyID() {
			return this.StudyID;
		}

		public String MetaID;

		public String getMetaID() {
			return this.MetaID;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String QuestionID;

		public String getQuestionID() {
			return this.QuestionID;
		}

		public String ItemID;

		public String getItemID() {
			return this.ItemID;
		}

		public String ParentItem;

		public String getParentItem() {
			return this.ParentItem;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String VisitNo;

		public String getVisitNo() {
			return this.VisitNo;
		}

		public String Sequence;

		public String getSequence() {
			return this.Sequence;
		}

		public String hidden;

		public String getHidden() {
			return this.hidden;
		}

		public String FormFamily;

		public String getFormFamily() {
			return this.FormFamily;
		}

		public String AdditionalData;

		public String getAdditionalData() {
			return this.AdditionalData;
		}

		public String item_Datatype;

		public String getItem_Datatype() {
			return this.item_Datatype;
		}

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.StudyID = readString(dis);

					this.MetaID = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.QuestionID = readString(dis);

					this.ItemID = readString(dis);

					this.ParentItem = readString(dis);

					this.Name = readString(dis);

					this.VisitNo = readString(dis);

					this.Sequence = readString(dis);

					this.hidden = readString(dis);

					this.FormFamily = readString(dis);

					this.AdditionalData = readString(dis);

					this.item_Datatype = readString(dis);

					this.HLEVEL = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.StudyID, dos);

				// String

				writeString(this.MetaID, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.QuestionID, dos);

				// String

				writeString(this.ItemID, dos);

				// String

				writeString(this.ParentItem, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.VisitNo, dos);

				// String

				writeString(this.Sequence, dos);

				// String

				writeString(this.hidden, dos);

				// String

				writeString(this.FormFamily, dos);

				// String

				writeString(this.AdditionalData, dos);

				// String

				writeString(this.item_Datatype, dos);

				// Integer

				writeInteger(this.HLEVEL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("StudyID=" + StudyID);
			sb.append(",MetaID=" + MetaID);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",QuestionID=" + QuestionID);
			sb.append(",ItemID=" + ItemID);
			sb.append(",ParentItem=" + ParentItem);
			sb.append(",Name=" + Name);
			sb.append(",VisitNo=" + VisitNo);
			sb.append(",Sequence=" + Sequence);
			sb.append(",hidden=" + hidden);
			sb.append(",FormFamily=" + FormFamily);
			sb.append(",AdditionalData=" + AdditionalData);
			sb.append(",item_Datatype=" + item_Datatype);
			sb.append(",HLEVEL=" + String.valueOf(HLEVEL));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out7Struct implements
			routines.system.IPersistableRow<out7Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String StudyID;

		public String getStudyID() {
			return this.StudyID;
		}

		public String MetaID;

		public String getMetaID() {
			return this.MetaID;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String QuestionID;

		public String getQuestionID() {
			return this.QuestionID;
		}

		public String ItemID;

		public String getItemID() {
			return this.ItemID;
		}

		public String ParentItem;

		public String getParentItem() {
			return this.ParentItem;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String VisitNo;

		public String getVisitNo() {
			return this.VisitNo;
		}

		public String Sequence;

		public String getSequence() {
			return this.Sequence;
		}

		public String hidden;

		public String getHidden() {
			return this.hidden;
		}

		public String FormFamily;

		public String getFormFamily() {
			return this.FormFamily;
		}

		public String AdditionalData;

		public String getAdditionalData() {
			return this.AdditionalData;
		}

		public String item_Datatype;

		public String getItem_Datatype() {
			return this.item_Datatype;
		}

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.StudyID = readString(dis);

					this.MetaID = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.QuestionID = readString(dis);

					this.ItemID = readString(dis);

					this.ParentItem = readString(dis);

					this.Name = readString(dis);

					this.VisitNo = readString(dis);

					this.Sequence = readString(dis);

					this.hidden = readString(dis);

					this.FormFamily = readString(dis);

					this.AdditionalData = readString(dis);

					this.item_Datatype = readString(dis);

					this.HLEVEL = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.StudyID, dos);

				// String

				writeString(this.MetaID, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.QuestionID, dos);

				// String

				writeString(this.ItemID, dos);

				// String

				writeString(this.ParentItem, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.VisitNo, dos);

				// String

				writeString(this.Sequence, dos);

				// String

				writeString(this.hidden, dos);

				// String

				writeString(this.FormFamily, dos);

				// String

				writeString(this.AdditionalData, dos);

				// String

				writeString(this.item_Datatype, dos);

				// Integer

				writeInteger(this.HLEVEL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("StudyID=" + StudyID);
			sb.append(",MetaID=" + MetaID);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",QuestionID=" + QuestionID);
			sb.append(",ItemID=" + ItemID);
			sb.append(",ParentItem=" + ParentItem);
			sb.append(",Name=" + Name);
			sb.append(",VisitNo=" + VisitNo);
			sb.append(",Sequence=" + Sequence);
			sb.append(",hidden=" + hidden);
			sb.append(",FormFamily=" + FormFamily);
			sb.append(",AdditionalData=" + AdditionalData);
			sb.append(",item_Datatype=" + item_Datatype);
			sb.append(",HLEVEL=" + String.valueOf(HLEVEL));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class fromMetaIDStruct implements
			routines.system.IPersistableRow<fromMetaIDStruct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String OID;

		public String getOID() {
			return this.OID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String StudyOID;

		public String getStudyOID() {
			return this.StudyOID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.OID = readString(dis);

					this.Name = readString(dis);

					this.StudyOID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.OID, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.StudyOID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OID=" + OID);
			sb.append(",Name=" + Name);
			sb.append(",StudyOID=" + StudyOID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(fromMetaIDStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputXML_8Struct implements
			routines.system.IPersistableRow<after_tFileInputXML_8Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String OID;

		public String getOID() {
			return this.OID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String StudyOID;

		public String getStudyOID() {
			return this.StudyOID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.OID = readString(dis);

					this.Name = readString(dis);

					this.StudyOID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.OID, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.StudyOID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OID=" + OID);
			sb.append(",Name=" + Name);
			sb.append(",StudyOID=" + StudyOID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputXML_8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputXML_8Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputXML_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputDelimited_7Process(globalMap);

				fromMetaIDStruct fromMetaID = new fromMetaIDStruct();
				out7Struct out7 = new out7Struct();
				row11Struct row11 = new row11Struct();

				/**
				 * [tFileOutputDelimited_12 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_12", false);
				start_Hash.put("tFileOutputDelimited_12",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_12";

				int tos_count_tFileOutputDelimited_12 = 0;

				String fileName_tFileOutputDelimited_12 = "";
				fileName_tFileOutputDelimited_12 = (new java.io.File(
						((String) globalMap
								.get("tCreateTemporaryFile_4_FILEPATH"))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_12 = null;
				String extension_tFileOutputDelimited_12 = null;
				String directory_tFileOutputDelimited_12 = null;
				if ((fileName_tFileOutputDelimited_12.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_12.lastIndexOf(".") < fileName_tFileOutputDelimited_12
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12;
						extension_tFileOutputDelimited_12 = "";
					} else {
						fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12
								.substring(0, fileName_tFileOutputDelimited_12
										.lastIndexOf("."));
						extension_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12
								.substring(fileName_tFileOutputDelimited_12
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12
							.substring(0, fileName_tFileOutputDelimited_12
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_12.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12
								.substring(0, fileName_tFileOutputDelimited_12
										.lastIndexOf("."));
						extension_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12
								.substring(fileName_tFileOutputDelimited_12
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12;
						extension_tFileOutputDelimited_12 = "";
					}
					directory_tFileOutputDelimited_12 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_12 = true;
				java.io.File filetFileOutputDelimited_12 = new java.io.File(
						fileName_tFileOutputDelimited_12);
				globalMap.put("tFileOutputDelimited_12_FILE_NAME",
						fileName_tFileOutputDelimited_12);

				int nb_line_tFileOutputDelimited_12 = 0;
				int splitEvery_tFileOutputDelimited_12 = 1000;
				int splitedFileNo_tFileOutputDelimited_12 = 0;
				int currentRow_tFileOutputDelimited_12 = 0;

				final String OUT_DELIM_tFileOutputDelimited_12 = /**
				 * Start field
				 * tFileOutputDelimited_12:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_12:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_12 = /**
				 * Start
				 * field tFileOutputDelimited_12:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_12:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_12 != null
						&& directory_tFileOutputDelimited_12.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_12 = new java.io.File(
							directory_tFileOutputDelimited_12);
					if (!dir_tFileOutputDelimited_12.exists()) {
						dir_tFileOutputDelimited_12.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_12 = null;
				try {
					outtFileOutputDelimited_12 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_12,
											false), "ISO-8859-15"));

					/**
					 * [tFileOutputDelimited_12 begin ] stop
					 */

					/**
					 * [tUniqRow_5 begin ] start
					 */

					ok_Hash.put("tUniqRow_5", false);
					start_Hash.put("tUniqRow_5", System.currentTimeMillis());
					currentComponent = "tUniqRow_5";

					int tos_count_tUniqRow_5 = 0;

					class KeyStruct_tUniqRow_5 {

						private static final int DEFAULT_HASHCODE = 1;
						private static final int PRIME = 31;
						private int hashCode = DEFAULT_HASHCODE;
						public boolean hashCodeDirty = true;

						String StudyID;
						String MetaID;

						@Override
						public int hashCode() {
							if (this.hashCodeDirty) {
								final int prime = PRIME;
								int result = DEFAULT_HASHCODE;

								result = prime
										* result
										+ ((this.StudyID == null) ? 0
												: this.StudyID.hashCode());

								result = prime
										* result
										+ ((this.MetaID == null) ? 0
												: this.MetaID.hashCode());

								this.hashCode = result;
								this.hashCodeDirty = false;
							}
							return this.hashCode;
						}

						@Override
						public boolean equals(Object obj) {
							if (this == obj)
								return true;
							if (obj == null)
								return false;
							if (getClass() != obj.getClass())
								return false;
							final KeyStruct_tUniqRow_5 other = (KeyStruct_tUniqRow_5) obj;

							if (this.StudyID == null) {
								if (other.StudyID != null)
									return false;
							} else if (!this.StudyID.equals(other.StudyID))
								return false;

							if (this.MetaID == null) {
								if (other.MetaID != null)
									return false;
							} else if (!this.MetaID.equals(other.MetaID))
								return false;

							return true;
						}

					}

					int nb_uniques_tUniqRow_5 = 0;
					int nb_duplicates_tUniqRow_5 = 0;
					KeyStruct_tUniqRow_5 finder_tUniqRow_5 = new KeyStruct_tUniqRow_5();
					java.util.Set<KeyStruct_tUniqRow_5> keystUniqRow_5 = new java.util.HashSet<KeyStruct_tUniqRow_5>();

					/**
					 * [tUniqRow_5 begin ] stop
					 */

					/**
					 * [tMap_7 begin ] start
					 */

					ok_Hash.put("tMap_7", false);
					start_Hash.put("tMap_7", System.currentTimeMillis());
					currentComponent = "tMap_7";

					int tos_count_tMap_7 = 0;

					// ###############################
					// # Lookup's keys initialization

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<fromTemp1Struct> tHash_Lookup_fromTemp1 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<fromTemp1Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<fromTemp1Struct>) globalMap
							.get("tHash_Lookup_fromTemp1"));

					fromTemp1Struct fromTemp1HashKey = new fromTemp1Struct();
					fromTemp1Struct fromTemp1Default = new fromTemp1Struct();
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_7__Struct {
					}
					Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					out7Struct out7_tmp = new out7Struct();
					// ###############################

					/**
					 * [tMap_7 begin ] stop
					 */

					/**
					 * [tFileInputXML_8 begin ] start
					 */

					ok_Hash.put("tFileInputXML_8", false);
					start_Hash.put("tFileInputXML_8",
							System.currentTimeMillis());
					currentComponent = "tFileInputXML_8";

					int tos_count_tFileInputXML_8 = 0;

					int nb_line_tFileInputXML_8 = 0;

					class IgnoreDTDEntityResolver_tFileInputXML_8 implements
							org.xml.sax.EntityResolver {

						public org.xml.sax.InputSource resolveEntity(
								String publicId, String systemId)
								throws org.xml.sax.SAXException,
								java.io.IOException {
							return new org.xml.sax.InputSource(
									new java.io.ByteArrayInputStream(
											"<?xml version='1.0' encoding='UTF-8'?>"
													.getBytes()));
						}

					}
					String os_tFileInputXML_8 = System.getProperty("os.name")
							.toLowerCase();
					boolean isWindows_tFileInputXML_8 = false;
					if (os_tFileInputXML_8.indexOf("windows") > -1
							|| os_tFileInputXML_8.indexOf("nt") > -1) {
						isWindows_tFileInputXML_8 = true;
					}
					class NameSpaceTool_tFileInputXML_8 {

						public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

						private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

						public void countNSMap(org.dom4j.Element el) {
							for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
									.declaredNamespaces()) {
								if (ns.getPrefix().trim().length() == 0) {
									xmlNameSpaceMap.put(
											"pre" + defualtNSPath.size(),
											ns.getURI());
									String path = "";
									org.dom4j.Element elTmp = el;
									while (elTmp != null) {
										if (elTmp.getNamespacePrefix() != null
												&& elTmp.getNamespacePrefix()
														.length() > 0) {
											path = "/"
													+ elTmp.getNamespacePrefix()
													+ ":" + elTmp.getName()
													+ path;
										} else {
											path = "/" + elTmp.getName() + path;
										}
										elTmp = elTmp.getParent();
									}
									defualtNSPath.add(path);
								} else {
									xmlNameSpaceMap.put(ns.getPrefix(),
											ns.getURI());
								}

							}
							for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
									.elements()) {
								countNSMap(e);
							}
						}

						public String addDefaultNSPrefix(String path,
								String loopPath) {
							if (defualtNSPath.size() > 0) {
								String fullPath = loopPath;
								if (!path.equals(fullPath)) {
									for (String tmp : path.split("/")) {
										if (("..").equals(tmp)) {
											fullPath = fullPath.substring(0,
													fullPath.lastIndexOf("/"));
										} else {
											fullPath += "/" + tmp;
										}
									}
								}
								int size = fullPath.split("/").length - 1;
								if (size < 0) {
									return fullPath;
								}
								int[] indexs = new int[size];
								java.util.Arrays.fill(indexs, -1);
								int length = 0;
								for (int i = 0; i < defualtNSPath.size(); i++) {
									if (defualtNSPath.get(i).length() > length
											&& fullPath
													.startsWith(defualtNSPath
															.get(i))) {
										java.util.Arrays
												.fill(indexs,
														defualtNSPath.get(i)
																.split("/").length - 2,
														indexs.length, i);
										length = defualtNSPath.get(i).length();
									}
								}

								StringBuilder newPath = new StringBuilder();
								String[] pathStrs = path.split("/");
								for (int i = 0; i < pathStrs.length; i++) {
									String tmp = pathStrs[i];
									if (newPath.length() > 0) {
										newPath.append("/");
									}
									if (tmp.length() > 0
											&& tmp.indexOf(":") == -1
											&& tmp.indexOf(".") == -1 /*
																	 * &&
																	 * tmp.indexOf
																	 * ("@") ==
																	 * -1
																	 */) {
										int index = indexs[i + indexs.length
												- pathStrs.length];
										if (index >= 0) {
											// ==== add by wliu to support both
											// filter and functions==
											if (tmp.indexOf("[") > 0
													&& tmp.indexOf("]") > tmp
															.indexOf("[")) {// include
																			// filter
												String tmpStr = replaceElementWithNS(
														tmp, "pre" + index
																+ ":");
												newPath.append(tmpStr);
											} else {
												if (tmp.indexOf("@") != -1
														|| tmp.indexOf("(") < tmp
																.indexOf(")")) { // include
																					// attribute
													newPath.append(tmp);
												} else {
													// ==add end=======
													newPath.append("pre")
															.append(index)
															.append(":")
															.append(tmp);
												}
											}
										} else {
											newPath.append(tmp);
										}
									} else {
										newPath.append(tmp);
									}
								}
								return newPath.toString();
							}
							return path;
						}

						private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
						private java.util.regex.Pattern pattern = java.util.regex.Pattern
								.compile(matches);

						private String replaceElementWithNS(String global,
								String pre) {

							java.util.regex.Matcher match = pattern
									.matcher(global);
							StringBuffer sb = new StringBuffer();
							match.reset();
							while (match.find()) {
								String group = match.group();
								String tmp = "";
								if (group.toLowerCase().matches(
										"\\b(div|mod|and|or)\\b.*")
										|| group.matches("@.*")) {
									tmp = group;
								} else {
									tmp = tmp + pre + group;
								}
								match.appendReplacement(sb, tmp);
							}
							match.appendTail(sb);

							return sb.toString();
						}

					}

					class XML_API_tFileInputXML_8 {
						public boolean isDefNull(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							if (node != null
									&& node instanceof org.dom4j.Element) {
								org.dom4j.Attribute attri = ((org.dom4j.Element) node)
										.attribute("nil");
								if (attri != null
										&& ("true").equals(attri.getText())) {
									return true;
								}
							}
							return false;
						}

						public boolean isMissing(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							return node == null ? true : false;
						}

						public boolean isEmpty(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							if (node != null) {
								return node.getText().length() == 0;
							}
							return false;
						}
					}

					org.dom4j.io.SAXReader reader_tFileInputXML_8 = new org.dom4j.io.SAXReader();
					reader_tFileInputXML_8
							.setEntityResolver(new IgnoreDTDEntityResolver_tFileInputXML_8());
					Object filename_tFileInputXML_8 = null;
					try {
						filename_tFileInputXML_8 = context.currentFile;
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}
					if (filename_tFileInputXML_8 != null
							&& filename_tFileInputXML_8 instanceof String
							&& filename_tFileInputXML_8.toString().startsWith(
									"//")) {
						if (!isWindows_tFileInputXML_8) {
							filename_tFileInputXML_8 = filename_tFileInputXML_8
									.toString().replaceFirst("//", "/");
						}
					}

					boolean isValidFile_tFileInputXML_8 = true;
					org.dom4j.Document doc_tFileInputXML_8 = null;
					java.io.Closeable toClose_tFileInputXML_8 = null;
					try {
						if (filename_tFileInputXML_8 instanceof java.io.InputStream) {
							java.io.InputStream inputStream_tFileInputXML_8 = (java.io.InputStream) filename_tFileInputXML_8;
							toClose_tFileInputXML_8 = inputStream_tFileInputXML_8;
							doc_tFileInputXML_8 = reader_tFileInputXML_8
									.read(inputStream_tFileInputXML_8);
						} else {
							java.io.Reader unicodeReader_tFileInputXML_8 = new UnicodeReader(
									new java.io.FileInputStream(String
											.valueOf(filename_tFileInputXML_8)),
									context.encoding);
							toClose_tFileInputXML_8 = unicodeReader_tFileInputXML_8;
							org.xml.sax.InputSource in_tFileInputXML_8 = new org.xml.sax.InputSource(
									unicodeReader_tFileInputXML_8);
							doc_tFileInputXML_8 = reader_tFileInputXML_8
									.read(in_tFileInputXML_8);
						}
					} catch (java.lang.Exception e) {
						System.err.println(e.getMessage());
						isValidFile_tFileInputXML_8 = false;
					} finally {
						if (toClose_tFileInputXML_8 != null) {
							toClose_tFileInputXML_8.close();
						}
					}
					if (isValidFile_tFileInputXML_8) {
						NameSpaceTool_tFileInputXML_8 nsTool_tFileInputXML_8 = new NameSpaceTool_tFileInputXML_8();
						nsTool_tFileInputXML_8.countNSMap(doc_tFileInputXML_8
								.getRootElement());
						java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_8 = nsTool_tFileInputXML_8.xmlNameSpaceMap;

						org.dom4j.XPath x_tFileInputXML_8 = doc_tFileInputXML_8
								.createXPath(nsTool_tFileInputXML_8
										.addDefaultNSPrefix(
												"/ODM/Study/MetaDataVersion",
												"/ODM/Study/MetaDataVersion"));
						x_tFileInputXML_8
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_8);

						java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_8 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tFileInputXML_8
								.selectNodes(doc_tFileInputXML_8);
						XML_API_tFileInputXML_8 xml_api_tFileInputXML_8 = new XML_API_tFileInputXML_8();
						String str_tFileInputXML_8 = "";
						org.dom4j.Node node_tFileInputXML_8 = null;

						// init all mapping xpaths
						org.dom4j.XPath xTmp0_tFileInputXML_8 = org.dom4j.DocumentHelper
								.createXPath(nsTool_tFileInputXML_8
										.addDefaultNSPrefix("@OID",
												"/ODM/Study/MetaDataVersion"));
						xTmp0_tFileInputXML_8
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_8);
						org.dom4j.XPath xTmp1_tFileInputXML_8 = org.dom4j.DocumentHelper
								.createXPath(nsTool_tFileInputXML_8
										.addDefaultNSPrefix("@Name",
												"/ODM/Study/MetaDataVersion"));
						xTmp1_tFileInputXML_8
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_8);
						org.dom4j.XPath xTmp2_tFileInputXML_8 = org.dom4j.DocumentHelper
								.createXPath(nsTool_tFileInputXML_8
										.addDefaultNSPrefix("../@OID",
												"/ODM/Study/MetaDataVersion"));
						xTmp2_tFileInputXML_8
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_8);

						for (org.dom4j.tree.AbstractNode temp_tFileInputXML_8 : nodeList_tFileInputXML_8) {
							nb_line_tFileInputXML_8++;
							fromMetaID = null;
							boolean whetherReject_tFileInputXML_8 = false;
							fromMetaID = new fromMetaIDStruct();
							try {
								Object obj0_tFileInputXML_8 = xTmp0_tFileInputXML_8
										.evaluate(temp_tFileInputXML_8);
								if (obj0_tFileInputXML_8 == null) {
									node_tFileInputXML_8 = null;
									str_tFileInputXML_8 = "";

								} else if (obj0_tFileInputXML_8 instanceof org.dom4j.Node) {
									node_tFileInputXML_8 = (org.dom4j.Node) obj0_tFileInputXML_8;
									str_tFileInputXML_8 = org.jaxen.function.StringFunction
											.evaluate(
													node_tFileInputXML_8,
													org.jaxen.dom4j.DocumentNavigator
															.getInstance());
								} else if (obj0_tFileInputXML_8 instanceof String
										|| obj0_tFileInputXML_8 instanceof Number) {
									node_tFileInputXML_8 = temp_tFileInputXML_8;
									str_tFileInputXML_8 = String
											.valueOf(obj0_tFileInputXML_8);
								} else if (obj0_tFileInputXML_8 instanceof java.util.List) {
									java.util.List<org.dom4j.Node> nodes_tFileInputXML_8 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_8;
									node_tFileInputXML_8 = nodes_tFileInputXML_8
											.size() > 0 ? nodes_tFileInputXML_8
											.get(0) : null;
									str_tFileInputXML_8 = node_tFileInputXML_8 == null ? ""
											: org.jaxen.function.StringFunction
													.evaluate(
															node_tFileInputXML_8,
															org.jaxen.dom4j.DocumentNavigator
																	.getInstance());
								}
								if (xml_api_tFileInputXML_8
										.isDefNull(node_tFileInputXML_8)) {
									fromMetaID.OID = null;
								} else if (xml_api_tFileInputXML_8
										.isEmpty(node_tFileInputXML_8)) {
									fromMetaID.OID = "";
								} else if (xml_api_tFileInputXML_8
										.isMissing(node_tFileInputXML_8)) {
									fromMetaID.OID = null;
								} else {
									fromMetaID.OID = str_tFileInputXML_8;
								}
								Object obj1_tFileInputXML_8 = xTmp1_tFileInputXML_8
										.evaluate(temp_tFileInputXML_8);
								if (obj1_tFileInputXML_8 == null) {
									node_tFileInputXML_8 = null;
									str_tFileInputXML_8 = "";

								} else if (obj1_tFileInputXML_8 instanceof org.dom4j.Node) {
									node_tFileInputXML_8 = (org.dom4j.Node) obj1_tFileInputXML_8;
									str_tFileInputXML_8 = org.jaxen.function.StringFunction
											.evaluate(
													node_tFileInputXML_8,
													org.jaxen.dom4j.DocumentNavigator
															.getInstance());
								} else if (obj1_tFileInputXML_8 instanceof String
										|| obj1_tFileInputXML_8 instanceof Number) {
									node_tFileInputXML_8 = temp_tFileInputXML_8;
									str_tFileInputXML_8 = String
											.valueOf(obj1_tFileInputXML_8);
								} else if (obj1_tFileInputXML_8 instanceof java.util.List) {
									java.util.List<org.dom4j.Node> nodes_tFileInputXML_8 = (java.util.List<org.dom4j.Node>) obj1_tFileInputXML_8;
									node_tFileInputXML_8 = nodes_tFileInputXML_8
											.size() > 0 ? nodes_tFileInputXML_8
											.get(0) : null;
									str_tFileInputXML_8 = node_tFileInputXML_8 == null ? ""
											: org.jaxen.function.StringFunction
													.evaluate(
															node_tFileInputXML_8,
															org.jaxen.dom4j.DocumentNavigator
																	.getInstance());
								}
								if (xml_api_tFileInputXML_8
										.isDefNull(node_tFileInputXML_8)) {
									fromMetaID.Name = null;
								} else if (xml_api_tFileInputXML_8
										.isEmpty(node_tFileInputXML_8)) {
									fromMetaID.Name = "";
								} else if (xml_api_tFileInputXML_8
										.isMissing(node_tFileInputXML_8)) {
									fromMetaID.Name = null;
								} else {
									fromMetaID.Name = str_tFileInputXML_8;
								}
								Object obj2_tFileInputXML_8 = xTmp2_tFileInputXML_8
										.evaluate(temp_tFileInputXML_8);
								if (obj2_tFileInputXML_8 == null) {
									node_tFileInputXML_8 = null;
									str_tFileInputXML_8 = "";

								} else if (obj2_tFileInputXML_8 instanceof org.dom4j.Node) {
									node_tFileInputXML_8 = (org.dom4j.Node) obj2_tFileInputXML_8;
									str_tFileInputXML_8 = org.jaxen.function.StringFunction
											.evaluate(
													node_tFileInputXML_8,
													org.jaxen.dom4j.DocumentNavigator
															.getInstance());
								} else if (obj2_tFileInputXML_8 instanceof String
										|| obj2_tFileInputXML_8 instanceof Number) {
									node_tFileInputXML_8 = temp_tFileInputXML_8;
									str_tFileInputXML_8 = String
											.valueOf(obj2_tFileInputXML_8);
								} else if (obj2_tFileInputXML_8 instanceof java.util.List) {
									java.util.List<org.dom4j.Node> nodes_tFileInputXML_8 = (java.util.List<org.dom4j.Node>) obj2_tFileInputXML_8;
									node_tFileInputXML_8 = nodes_tFileInputXML_8
											.size() > 0 ? nodes_tFileInputXML_8
											.get(0) : null;
									str_tFileInputXML_8 = node_tFileInputXML_8 == null ? ""
											: org.jaxen.function.StringFunction
													.evaluate(
															node_tFileInputXML_8,
															org.jaxen.dom4j.DocumentNavigator
																	.getInstance());
								}
								if (xml_api_tFileInputXML_8
										.isDefNull(node_tFileInputXML_8)) {
									fromMetaID.StudyOID = null;
								} else if (xml_api_tFileInputXML_8
										.isEmpty(node_tFileInputXML_8)) {
									fromMetaID.StudyOID = "";
								} else if (xml_api_tFileInputXML_8
										.isMissing(node_tFileInputXML_8)) {
									fromMetaID.StudyOID = null;
								} else {
									fromMetaID.StudyOID = str_tFileInputXML_8;
								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputXML_8 = true;
								System.err.println(e.getMessage());
								fromMetaID = null;
							}

							/**
							 * [tFileInputXML_8 begin ] stop
							 */
							/**
							 * [tFileInputXML_8 main ] start
							 */

							currentComponent = "tFileInputXML_8";

							tos_count_tFileInputXML_8++;

							/**
							 * [tFileInputXML_8 main ] stop
							 */
							// Start of branch "fromMetaID"
							if (fromMetaID != null) {

								/**
								 * [tMap_7 main ] start
								 */

								currentComponent = "tMap_7";

								boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_7 = false;
								boolean mainRowRejected_tMap_7 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "fromTemp1"
								// /////////////////////////////////////////////

								boolean forceLoopfromTemp1 = false;

								fromTemp1Struct fromTemp1ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_7) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_7 = false;

									fromTemp1HashKey.StudyID = fromMetaID.StudyOID;

									fromTemp1HashKey.hashCodeDirty = true;

									tHash_Lookup_fromTemp1
											.lookup(fromTemp1HashKey);

								} // G_TM_M_020

								if (tHash_Lookup_fromTemp1 != null
										&& tHash_Lookup_fromTemp1
												.getCount(fromTemp1HashKey) > 1) { // G
																					// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'fromTemp1' and it contains more one result from keys :  fromTemp1.StudyID = '"
									// + fromTemp1HashKey.StudyID + "'");
								} // G 071

								fromTemp1Struct fromTemp1 = null;

								fromTemp1Struct fromLookup_fromTemp1 = null;
								fromTemp1 = fromTemp1Default;

								if (tHash_Lookup_fromTemp1 != null
										&& tHash_Lookup_fromTemp1.hasNext()) { // G
																				// 099

									fromLookup_fromTemp1 = tHash_Lookup_fromTemp1
											.next();

								} // G 099

								if (fromLookup_fromTemp1 != null) {
									fromTemp1 = fromLookup_fromTemp1;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
									// ###############################
									// # Output tables

									out7 = null;

									// # Output table : 'out7'
									out7_tmp.StudyID = fromTemp1.StudyID;
									out7_tmp.MetaID = fromMetaID.OID;
									out7_tmp.VisitID = null;
									out7_tmp.FormID = null;
									out7_tmp.QuestionID = null;
									out7_tmp.ItemID = null;
									out7_tmp.ParentItem = null;
									out7_tmp.Name = fromMetaID.Name;
									out7_tmp.VisitNo = null;
									out7_tmp.Sequence = null;
									out7_tmp.hidden = null;
									out7_tmp.FormFamily = null;
									out7_tmp.AdditionalData = null;
									out7_tmp.item_Datatype = null;
									out7_tmp.HLEVEL = 3;
									out7 = out7_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_7 = false;

								tos_count_tMap_7++;

								/**
								 * [tMap_7 main ] stop
								 */
								// Start of branch "out7"
								if (out7 != null) {

									/**
									 * [tUniqRow_5 main ] start
									 */

									currentComponent = "tUniqRow_5";

									row11 = null;
									if (out7.StudyID == null) {
										finder_tUniqRow_5.StudyID = null;
									} else {
										finder_tUniqRow_5.StudyID = out7.StudyID
												.toLowerCase();
									}
									if (out7.MetaID == null) {
										finder_tUniqRow_5.MetaID = null;
									} else {
										finder_tUniqRow_5.MetaID = out7.MetaID
												.toLowerCase();
									}
									finder_tUniqRow_5.hashCodeDirty = true;
									if (!keystUniqRow_5
											.contains(finder_tUniqRow_5)) {
										KeyStruct_tUniqRow_5 new_tUniqRow_5 = new KeyStruct_tUniqRow_5();

										if (out7.StudyID == null) {
											new_tUniqRow_5.StudyID = null;
										} else {
											new_tUniqRow_5.StudyID = out7.StudyID
													.toLowerCase();
										}
										if (out7.MetaID == null) {
											new_tUniqRow_5.MetaID = null;
										} else {
											new_tUniqRow_5.MetaID = out7.MetaID
													.toLowerCase();
										}

										keystUniqRow_5.add(new_tUniqRow_5);
										if (row11 == null) {
											row11 = new row11Struct();
										}
										row11.StudyID = out7.StudyID;
										row11.MetaID = out7.MetaID;
										row11.VisitID = out7.VisitID;
										row11.FormID = out7.FormID;
										row11.QuestionID = out7.QuestionID;
										row11.ItemID = out7.ItemID;
										row11.ParentItem = out7.ParentItem;
										row11.Name = out7.Name;
										row11.VisitNo = out7.VisitNo;
										row11.Sequence = out7.Sequence;
										row11.hidden = out7.hidden;
										row11.FormFamily = out7.FormFamily;
										row11.AdditionalData = out7.AdditionalData;
										row11.item_Datatype = out7.item_Datatype;
										row11.HLEVEL = out7.HLEVEL;
										nb_uniques_tUniqRow_5++;
									} else {
										nb_duplicates_tUniqRow_5++;
									}

									tos_count_tUniqRow_5++;

									/**
									 * [tUniqRow_5 main ] stop
									 */
									// Start of branch "row11"
									if (row11 != null) {

										/**
										 * [tFileOutputDelimited_12 main ] start
										 */

										currentComponent = "tFileOutputDelimited_12";

										StringBuilder sb_tFileOutputDelimited_12 = new StringBuilder();

										if (row11.StudyID != null) {

											sb_tFileOutputDelimited_12.append(

											row11.StudyID

											);

										}

										sb_tFileOutputDelimited_12
												.append(OUT_DELIM_tFileOutputDelimited_12);

										if (row11.MetaID != null) {

											sb_tFileOutputDelimited_12.append(

											row11.MetaID

											);

										}

										sb_tFileOutputDelimited_12
												.append(OUT_DELIM_tFileOutputDelimited_12);

										if (row11.VisitID != null) {

											sb_tFileOutputDelimited_12.append(

											row11.VisitID

											);

										}

										sb_tFileOutputDelimited_12
												.append(OUT_DELIM_tFileOutputDelimited_12);

										if (row11.FormID != null) {

											sb_tFileOutputDelimited_12.append(

											row11.FormID

											);

										}

										sb_tFileOutputDelimited_12
												.append(OUT_DELIM_tFileOutputDelimited_12);

										if (row11.QuestionID != null) {

											sb_tFileOutputDelimited_12.append(

											row11.QuestionID

											);

										}

										sb_tFileOutputDelimited_12
												.append(OUT_DELIM_tFileOutputDelimited_12);

										if (row11.ItemID != null) {

											sb_tFileOutputDelimited_12.append(

											row11.ItemID

											);

										}

										sb_tFileOutputDelimited_12
												.append(OUT_DELIM_tFileOutputDelimited_12);

										if (row11.ParentItem != null) {

											sb_tFileOutputDelimited_12.append(

											row11.ParentItem

											);

										}

										sb_tFileOutputDelimited_12
												.append(OUT_DELIM_tFileOutputDelimited_12);

										if (row11.Name != null) {

											sb_tFileOutputDelimited_12.append(

											row11.Name

											);

										}

										sb_tFileOutputDelimited_12
												.append(OUT_DELIM_tFileOutputDelimited_12);

										if (row11.VisitNo != null) {

											sb_tFileOutputDelimited_12.append(

											row11.VisitNo

											);

										}

										sb_tFileOutputDelimited_12
												.append(OUT_DELIM_tFileOutputDelimited_12);

										if (row11.Sequence != null) {

											sb_tFileOutputDelimited_12.append(

											row11.Sequence

											);

										}

										sb_tFileOutputDelimited_12
												.append(OUT_DELIM_tFileOutputDelimited_12);

										if (row11.hidden != null) {

											sb_tFileOutputDelimited_12.append(

											row11.hidden

											);

										}

										sb_tFileOutputDelimited_12
												.append(OUT_DELIM_tFileOutputDelimited_12);

										if (row11.FormFamily != null) {

											sb_tFileOutputDelimited_12.append(

											row11.FormFamily

											);

										}

										sb_tFileOutputDelimited_12
												.append(OUT_DELIM_tFileOutputDelimited_12);

										if (row11.AdditionalData != null) {

											sb_tFileOutputDelimited_12.append(

											row11.AdditionalData

											);

										}

										sb_tFileOutputDelimited_12
												.append(OUT_DELIM_tFileOutputDelimited_12);

										if (row11.item_Datatype != null) {

											sb_tFileOutputDelimited_12.append(

											row11.item_Datatype

											);

										}

										sb_tFileOutputDelimited_12
												.append(OUT_DELIM_tFileOutputDelimited_12);

										if (row11.HLEVEL != null) {

											sb_tFileOutputDelimited_12.append(

											row11.HLEVEL

											);

										}

										sb_tFileOutputDelimited_12
												.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_12);

										nb_line_tFileOutputDelimited_12++;

										outtFileOutputDelimited_12
												.write(sb_tFileOutputDelimited_12
														.toString());

										tos_count_tFileOutputDelimited_12++;

										/**
										 * [tFileOutputDelimited_12 main ] stop
										 */

									} // End of branch "row11"

								} // End of branch "out7"

							} // End of branch "fromMetaID"

							/**
							 * [tFileInputXML_8 end ] start
							 */

							currentComponent = "tFileInputXML_8";

						}
					}
					globalMap.put("tFileInputXML_8_NB_LINE",
							nb_line_tFileInputXML_8);

					ok_Hash.put("tFileInputXML_8", true);
					end_Hash.put("tFileInputXML_8", System.currentTimeMillis());

					/**
					 * [tFileInputXML_8 end ] stop
					 */

					/**
					 * [tMap_7 end ] start
					 */

					currentComponent = "tMap_7";

					// ###############################
					// # Lookup hashes releasing
					if (tHash_Lookup_fromTemp1 != null) {
						tHash_Lookup_fromTemp1.endGet();
					}
					globalMap.remove("tHash_Lookup_fromTemp1");

					// ###############################

					ok_Hash.put("tMap_7", true);
					end_Hash.put("tMap_7", System.currentTimeMillis());

					/**
					 * [tMap_7 end ] stop
					 */

					/**
					 * [tUniqRow_5 end ] start
					 */

					currentComponent = "tUniqRow_5";

					globalMap.put("tUniqRow_5_NB_UNIQUES",
							nb_uniques_tUniqRow_5);
					globalMap.put("tUniqRow_5_NB_DUPLICATES",
							nb_duplicates_tUniqRow_5);

					ok_Hash.put("tUniqRow_5", true);
					end_Hash.put("tUniqRow_5", System.currentTimeMillis());

					/**
					 * [tUniqRow_5 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_12 end ] start
					 */

					currentComponent = "tFileOutputDelimited_12";

				} finally {
					if (outtFileOutputDelimited_12 != null) {
						outtFileOutputDelimited_12.flush();
						outtFileOutputDelimited_12.close();
					}
					globalMap.put("tFileOutputDelimited_12_NB_LINE",
							nb_line_tFileOutputDelimited_12);
					globalMap.put("tFileOutputDelimited_12_FILE_NAME",
							fileName_tFileOutputDelimited_12);
				} // finally

				ok_Hash.put("tFileOutputDelimited_12", true);
				end_Hash.put("tFileOutputDelimited_12",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_12 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputXML_8:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_6Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		} finally {
			// free memory for "tMap_7"
			globalMap.remove("tHash_Lookup_fromTemp1");

		}

		globalMap.put("tFileInputXML_8_SUBPROCESS_STATE", 1);
	}

	public void tJava_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_6 begin ] start
				 */

				ok_Hash.put("tJava_6", false);
				start_Hash.put("tJava_6", System.currentTimeMillis());
				currentComponent = "tJava_6";

				int tos_count_tJava_6 = 0;

				StatusListener.setSubStatus(55.0f, (int) (55.0f) + "%");

				/**
				 * [tJava_6 begin ] stop
				 */
				/**
				 * [tJava_6 main ] start
				 */

				currentComponent = "tJava_6";

				tos_count_tJava_6++;

				/**
				 * [tJava_6 main ] stop
				 */
				/**
				 * [tJava_6 end ] start
				 */

				currentComponent = "tJava_6";

				ok_Hash.put("tJava_6", true);
				end_Hash.put("tJava_6", System.currentTimeMillis());

				/**
				 * [tJava_6 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_6:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputXML_3Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJava_6_SUBPROCESS_STATE", 1);
	}

	public static class fromTemp1Struct implements
			routines.system.IPersistableComparableLookupRow<fromTemp1Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String StudyID;

		public String getStudyID() {
			return this.StudyID;
		}

		public String MetaID;

		public String getMetaID() {
			return this.MetaID;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String QuestionID;

		public String getQuestionID() {
			return this.QuestionID;
		}

		public String ItemID;

		public String getItemID() {
			return this.ItemID;
		}

		public String ParentItem;

		public String getParentItem() {
			return this.ParentItem;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String VisitNo;

		public String getVisitNo() {
			return this.VisitNo;
		}

		public String Sequence;

		public String getSequence() {
			return this.Sequence;
		}

		public String hidden;

		public String getHidden() {
			return this.hidden;
		}

		public String FormFamily;

		public String getFormFamily() {
			return this.FormFamily;
		}

		public String AdditionalData;

		public String getAdditionalData() {
			return this.AdditionalData;
		}

		public String item_Datatype;

		public String getItem_Datatype() {
			return this.item_Datatype;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.StudyID == null) ? 0 : this.StudyID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final fromTemp1Struct other = (fromTemp1Struct) obj;

			if (this.StudyID == null) {
				if (other.StudyID != null)
					return false;
			} else if (!this.StudyID.equals(other.StudyID))
				return false;

			return true;
		}

		public void copyDataTo(fromTemp1Struct other) {

			other.StudyID = this.StudyID;
			other.MetaID = this.MetaID;
			other.VisitID = this.VisitID;
			other.FormID = this.FormID;
			other.QuestionID = this.QuestionID;
			other.ItemID = this.ItemID;
			other.ParentItem = this.ParentItem;
			other.Name = this.Name;
			other.VisitNo = this.VisitNo;
			other.Sequence = this.Sequence;
			other.hidden = this.hidden;
			other.FormFamily = this.FormFamily;
			other.AdditionalData = this.AdditionalData;
			other.item_Datatype = this.item_Datatype;

		}

		public void copyKeysDataTo(fromTemp1Struct other) {

			other.StudyID = this.StudyID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.StudyID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.StudyID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.MetaID = readString(dis, ois);

				this.VisitID = readString(dis, ois);

				this.FormID = readString(dis, ois);

				this.QuestionID = readString(dis, ois);

				this.ItemID = readString(dis, ois);

				this.ParentItem = readString(dis, ois);

				this.Name = readString(dis, ois);

				this.VisitNo = readString(dis, ois);

				this.Sequence = readString(dis, ois);

				this.hidden = readString(dis, ois);

				this.FormFamily = readString(dis, ois);

				this.AdditionalData = readString(dis, ois);

				this.item_Datatype = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.MetaID, dos, oos);

				writeString(this.VisitID, dos, oos);

				writeString(this.FormID, dos, oos);

				writeString(this.QuestionID, dos, oos);

				writeString(this.ItemID, dos, oos);

				writeString(this.ParentItem, dos, oos);

				writeString(this.Name, dos, oos);

				writeString(this.VisitNo, dos, oos);

				writeString(this.Sequence, dos, oos);

				writeString(this.hidden, dos, oos);

				writeString(this.FormFamily, dos, oos);

				writeString(this.AdditionalData, dos, oos);

				writeString(this.item_Datatype, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("StudyID=" + StudyID);
			sb.append(",MetaID=" + MetaID);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",QuestionID=" + QuestionID);
			sb.append(",ItemID=" + ItemID);
			sb.append(",ParentItem=" + ParentItem);
			sb.append(",Name=" + Name);
			sb.append(",VisitNo=" + VisitNo);
			sb.append(",Sequence=" + Sequence);
			sb.append(",hidden=" + hidden);
			sb.append(",FormFamily=" + FormFamily);
			sb.append(",AdditionalData=" + AdditionalData);
			sb.append(",item_Datatype=" + item_Datatype);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(fromTemp1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.StudyID, other.StudyID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				fromTemp1Struct fromTemp1 = new fromTemp1Struct();

				/**
				 * [tAdvancedHash_fromTemp1 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_fromTemp1", false);
				start_Hash.put("tAdvancedHash_fromTemp1",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_fromTemp1";

				int tos_count_tAdvancedHash_fromTemp1 = 0;

				// connection name:fromTemp1
				// source node:tFileInputDelimited_7 -
				// inputs:(after_tFileInputXML_8) outputs:(fromTemp1,fromTemp1)
				// | target node:tAdvancedHash_fromTemp1 - inputs:(fromTemp1)
				// outputs:()
				// linked node: tMap_7 - inputs:(fromMetaID,fromTemp1)
				// outputs:(out7)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_fromTemp1 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<fromTemp1Struct> tHash_Lookup_fromTemp1 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<fromTemp1Struct> getLookup(matchingModeEnum_fromTemp1);

				globalMap.put("tHash_Lookup_fromTemp1", tHash_Lookup_fromTemp1);

				/**
				 * [tAdvancedHash_fromTemp1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_7", false);
				start_Hash.put("tFileInputDelimited_7",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_7";

				int tos_count_tFileInputDelimited_7 = 0;

				int nb_line_tFileInputDelimited_7 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_7 = null;
				try {

					Object filename_tFileInputDelimited_7 = ((String) globalMap
							.get("tCreateTemporaryFile_3_FILEPATH"));
					if (filename_tFileInputDelimited_7 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_7 = 0, random_value_tFileInputDelimited_7 = -1;
						if (footer_value_tFileInputDelimited_7 > 0
								|| random_value_tFileInputDelimited_7 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_7 = new org.talend.fileprocess.FileInputDelimited(
								((String) globalMap
										.get("tCreateTemporaryFile_3_FILEPATH")),
								"ISO-8859-15", "\t", "\n", true, 0, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_7 != null
							&& fid_tFileInputDelimited_7.nextRecord()) {

						fromTemp1 = null;

						fromTemp1 = null;

						boolean whetherReject_tFileInputDelimited_7 = false;
						fromTemp1 = new fromTemp1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_7 = 0;

							columnIndexWithD_tFileInputDelimited_7 = 0;

							fromTemp1.StudyID = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 1;

							fromTemp1.MetaID = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 2;

							fromTemp1.VisitID = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 3;

							fromTemp1.FormID = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 4;

							fromTemp1.QuestionID = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 5;

							fromTemp1.ItemID = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 6;

							fromTemp1.ParentItem = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 7;

							fromTemp1.Name = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 8;

							fromTemp1.VisitNo = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 9;

							fromTemp1.Sequence = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 10;

							fromTemp1.hidden = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 11;

							fromTemp1.FormFamily = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 12;

							fromTemp1.AdditionalData = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 13;

							fromTemp1.item_Datatype = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_7 = true;

							System.err.println(e.getMessage());
							fromTemp1 = null;

						}

						/**
						 * [tFileInputDelimited_7 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_7 main ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						tos_count_tFileInputDelimited_7++;

						/**
						 * [tFileInputDelimited_7 main ] stop
						 */
						// Start of branch "fromTemp1"
						if (fromTemp1 != null) {

							/**
							 * [tAdvancedHash_fromTemp1 main ] start
							 */

							currentComponent = "tAdvancedHash_fromTemp1";

							fromTemp1Struct fromTemp1_HashRow = new fromTemp1Struct();

							fromTemp1_HashRow.StudyID = fromTemp1.StudyID;

							fromTemp1_HashRow.MetaID = fromTemp1.MetaID;

							fromTemp1_HashRow.VisitID = fromTemp1.VisitID;

							fromTemp1_HashRow.FormID = fromTemp1.FormID;

							fromTemp1_HashRow.QuestionID = fromTemp1.QuestionID;

							fromTemp1_HashRow.ItemID = fromTemp1.ItemID;

							fromTemp1_HashRow.ParentItem = fromTemp1.ParentItem;

							fromTemp1_HashRow.Name = fromTemp1.Name;

							fromTemp1_HashRow.VisitNo = fromTemp1.VisitNo;

							fromTemp1_HashRow.Sequence = fromTemp1.Sequence;

							fromTemp1_HashRow.hidden = fromTemp1.hidden;

							fromTemp1_HashRow.FormFamily = fromTemp1.FormFamily;

							fromTemp1_HashRow.AdditionalData = fromTemp1.AdditionalData;

							fromTemp1_HashRow.item_Datatype = fromTemp1.item_Datatype;

							tHash_Lookup_fromTemp1.put(fromTemp1_HashRow);

							tos_count_tAdvancedHash_fromTemp1++;

							/**
							 * [tAdvancedHash_fromTemp1 main ] stop
							 */

						} // End of branch "fromTemp1"

						/**
						 * [tFileInputDelimited_7 end ] start
						 */

						currentComponent = "tFileInputDelimited_7";

					}
				} finally {
					if (!((Object) (((String) globalMap
							.get("tCreateTemporaryFile_3_FILEPATH"))) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_7 != null) {
							fid_tFileInputDelimited_7.close();
						}
					}
					if (fid_tFileInputDelimited_7 != null) {
						globalMap.put("tFileInputDelimited_7_NB_LINE",
								fid_tFileInputDelimited_7.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_7", true);
				end_Hash.put("tFileInputDelimited_7",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_7 end ] stop
				 */

				/**
				 * [tAdvancedHash_fromTemp1 end ] start
				 */

				currentComponent = "tAdvancedHash_fromTemp1";

				tHash_Lookup_fromTemp1.endPut();

				ok_Hash.put("tAdvancedHash_fromTemp1", true);
				end_Hash.put("tAdvancedHash_fromTemp1",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_fromTemp1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String StudyID;

		public String getStudyID() {
			return this.StudyID;
		}

		public String MetaID;

		public String getMetaID() {
			return this.MetaID;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String QuestionID;

		public String getQuestionID() {
			return this.QuestionID;
		}

		public String ItemID;

		public String getItemID() {
			return this.ItemID;
		}

		public String ParentItem;

		public String getParentItem() {
			return this.ParentItem;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String VisitNo;

		public String getVisitNo() {
			return this.VisitNo;
		}

		public String Sequence;

		public String getSequence() {
			return this.Sequence;
		}

		public String hidden;

		public String getHidden() {
			return this.hidden;
		}

		public String FormFamily;

		public String getFormFamily() {
			return this.FormFamily;
		}

		public String AdditionalData;

		public String getAdditionalData() {
			return this.AdditionalData;
		}

		public String item_Datatype;

		public String getItem_Datatype() {
			return this.item_Datatype;
		}

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.StudyID = readString(dis);

					this.MetaID = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.QuestionID = readString(dis);

					this.ItemID = readString(dis);

					this.ParentItem = readString(dis);

					this.Name = readString(dis);

					this.VisitNo = readString(dis);

					this.Sequence = readString(dis);

					this.hidden = readString(dis);

					this.FormFamily = readString(dis);

					this.AdditionalData = readString(dis);

					this.item_Datatype = readString(dis);

					this.HLEVEL = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.StudyID, dos);

				// String

				writeString(this.MetaID, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.QuestionID, dos);

				// String

				writeString(this.ItemID, dos);

				// String

				writeString(this.ParentItem, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.VisitNo, dos);

				// String

				writeString(this.Sequence, dos);

				// String

				writeString(this.hidden, dos);

				// String

				writeString(this.FormFamily, dos);

				// String

				writeString(this.AdditionalData, dos);

				// String

				writeString(this.item_Datatype, dos);

				// Integer

				writeInteger(this.HLEVEL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("StudyID=" + StudyID);
			sb.append(",MetaID=" + MetaID);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",QuestionID=" + QuestionID);
			sb.append(",ItemID=" + ItemID);
			sb.append(",ParentItem=" + ParentItem);
			sb.append(",Name=" + Name);
			sb.append(",VisitNo=" + VisitNo);
			sb.append(",Sequence=" + Sequence);
			sb.append(",hidden=" + hidden);
			sb.append(",FormFamily=" + FormFamily);
			sb.append(",AdditionalData=" + AdditionalData);
			sb.append(",item_Datatype=" + item_Datatype);
			sb.append(",HLEVEL=" + String.valueOf(HLEVEL));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out5Struct implements
			routines.system.IPersistableRow<out5Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String StudyID;

		public String getStudyID() {
			return this.StudyID;
		}

		public String MetaID;

		public String getMetaID() {
			return this.MetaID;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String QuestionID;

		public String getQuestionID() {
			return this.QuestionID;
		}

		public String ItemID;

		public String getItemID() {
			return this.ItemID;
		}

		public String ParentItem;

		public String getParentItem() {
			return this.ParentItem;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String VisitNo;

		public String getVisitNo() {
			return this.VisitNo;
		}

		public String Sequence;

		public String getSequence() {
			return this.Sequence;
		}

		public String hidden;

		public String getHidden() {
			return this.hidden;
		}

		public String FormFamily;

		public String getFormFamily() {
			return this.FormFamily;
		}

		public String AdditionalData;

		public String getAdditionalData() {
			return this.AdditionalData;
		}

		public String item_Datatype;

		public String getItem_Datatype() {
			return this.item_Datatype;
		}

		public Integer HLEVEL;

		public Integer getHLEVEL() {
			return this.HLEVEL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.StudyID = readString(dis);

					this.MetaID = readString(dis);

					this.VisitID = readString(dis);

					this.FormID = readString(dis);

					this.QuestionID = readString(dis);

					this.ItemID = readString(dis);

					this.ParentItem = readString(dis);

					this.Name = readString(dis);

					this.VisitNo = readString(dis);

					this.Sequence = readString(dis);

					this.hidden = readString(dis);

					this.FormFamily = readString(dis);

					this.AdditionalData = readString(dis);

					this.item_Datatype = readString(dis);

					this.HLEVEL = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.StudyID, dos);

				// String

				writeString(this.MetaID, dos);

				// String

				writeString(this.VisitID, dos);

				// String

				writeString(this.FormID, dos);

				// String

				writeString(this.QuestionID, dos);

				// String

				writeString(this.ItemID, dos);

				// String

				writeString(this.ParentItem, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.VisitNo, dos);

				// String

				writeString(this.Sequence, dos);

				// String

				writeString(this.hidden, dos);

				// String

				writeString(this.FormFamily, dos);

				// String

				writeString(this.AdditionalData, dos);

				// String

				writeString(this.item_Datatype, dos);

				// Integer

				writeInteger(this.HLEVEL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("StudyID=" + StudyID);
			sb.append(",MetaID=" + MetaID);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",QuestionID=" + QuestionID);
			sb.append(",ItemID=" + ItemID);
			sb.append(",ParentItem=" + ParentItem);
			sb.append(",Name=" + Name);
			sb.append(",VisitNo=" + VisitNo);
			sb.append(",Sequence=" + Sequence);
			sb.append(",hidden=" + hidden);
			sb.append(",FormFamily=" + FormFamily);
			sb.append(",AdditionalData=" + AdditionalData);
			sb.append(",item_Datatype=" + item_Datatype);
			sb.append(",HLEVEL=" + String.valueOf(HLEVEL));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String OID;

		public String getOID() {
			return this.OID;
		}

		public String StudyName;

		public String getStudyName() {
			return this.StudyName;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.OID = readString(dis);

					this.StudyName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.OID, dos);

				// String

				writeString(this.StudyName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OID=" + OID);
			sb.append(",StudyName=" + StudyName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputXML_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				out5Struct out5 = new out5Struct();
				row12Struct row12 = new row12Struct();

				/**
				 * [tFileOutputDelimited_9 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_9", false);
				start_Hash.put("tFileOutputDelimited_9",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_9";

				int tos_count_tFileOutputDelimited_9 = 0;

				String fileName_tFileOutputDelimited_9 = "";
				fileName_tFileOutputDelimited_9 = (new java.io.File(
						((String) globalMap
								.get("tCreateTemporaryFile_3_FILEPATH"))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_9 = null;
				String extension_tFileOutputDelimited_9 = null;
				String directory_tFileOutputDelimited_9 = null;
				if ((fileName_tFileOutputDelimited_9.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_9.lastIndexOf(".") < fileName_tFileOutputDelimited_9
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9;
						extension_tFileOutputDelimited_9 = "";
					} else {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
								.substring(0, fileName_tFileOutputDelimited_9
										.lastIndexOf("."));
						extension_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
								.substring(fileName_tFileOutputDelimited_9
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
							.substring(0, fileName_tFileOutputDelimited_9
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_9.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
								.substring(0, fileName_tFileOutputDelimited_9
										.lastIndexOf("."));
						extension_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
								.substring(fileName_tFileOutputDelimited_9
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9;
						extension_tFileOutputDelimited_9 = "";
					}
					directory_tFileOutputDelimited_9 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_9 = true;
				java.io.File filetFileOutputDelimited_9 = new java.io.File(
						fileName_tFileOutputDelimited_9);
				globalMap.put("tFileOutputDelimited_9_FILE_NAME",
						fileName_tFileOutputDelimited_9);

				int nb_line_tFileOutputDelimited_9 = 0;
				int splitEvery_tFileOutputDelimited_9 = 1000;
				int splitedFileNo_tFileOutputDelimited_9 = 0;
				int currentRow_tFileOutputDelimited_9 = 0;

				final String OUT_DELIM_tFileOutputDelimited_9 = /**
				 * Start field
				 * tFileOutputDelimited_9:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_9:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_9 = /**
				 * Start
				 * field tFileOutputDelimited_9:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_9:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_9 != null
						&& directory_tFileOutputDelimited_9.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_9 = new java.io.File(
							directory_tFileOutputDelimited_9);
					if (!dir_tFileOutputDelimited_9.exists()) {
						dir_tFileOutputDelimited_9.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_9 = null;
				try {
					outtFileOutputDelimited_9 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_9,
											false), "ISO-8859-15"));

					/**
					 * [tFileOutputDelimited_9 begin ] stop
					 */

					/**
					 * [tUniqRow_6 begin ] start
					 */

					ok_Hash.put("tUniqRow_6", false);
					start_Hash.put("tUniqRow_6", System.currentTimeMillis());
					currentComponent = "tUniqRow_6";

					int tos_count_tUniqRow_6 = 0;

					class KeyStruct_tUniqRow_6 {

						private static final int DEFAULT_HASHCODE = 1;
						private static final int PRIME = 31;
						private int hashCode = DEFAULT_HASHCODE;
						public boolean hashCodeDirty = true;

						String StudyID;

						@Override
						public int hashCode() {
							if (this.hashCodeDirty) {
								final int prime = PRIME;
								int result = DEFAULT_HASHCODE;

								result = prime
										* result
										+ ((this.StudyID == null) ? 0
												: this.StudyID.hashCode());

								this.hashCode = result;
								this.hashCodeDirty = false;
							}
							return this.hashCode;
						}

						@Override
						public boolean equals(Object obj) {
							if (this == obj)
								return true;
							if (obj == null)
								return false;
							if (getClass() != obj.getClass())
								return false;
							final KeyStruct_tUniqRow_6 other = (KeyStruct_tUniqRow_6) obj;

							if (this.StudyID == null) {
								if (other.StudyID != null)
									return false;
							} else if (!this.StudyID.equals(other.StudyID))
								return false;

							return true;
						}

					}

					int nb_uniques_tUniqRow_6 = 0;
					int nb_duplicates_tUniqRow_6 = 0;
					KeyStruct_tUniqRow_6 finder_tUniqRow_6 = new KeyStruct_tUniqRow_6();
					java.util.Set<KeyStruct_tUniqRow_6> keystUniqRow_6 = new java.util.HashSet<KeyStruct_tUniqRow_6>();

					/**
					 * [tUniqRow_6 begin ] stop
					 */

					/**
					 * [tMap_6 begin ] start
					 */

					ok_Hash.put("tMap_6", false);
					start_Hash.put("tMap_6", System.currentTimeMillis());
					currentComponent = "tMap_6";

					int tos_count_tMap_6 = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_6__Struct {
					}
					Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					out5Struct out5_tmp = new out5Struct();
					// ###############################

					/**
					 * [tMap_6 begin ] stop
					 */

					/**
					 * [tFileInputXML_1 begin ] start
					 */

					ok_Hash.put("tFileInputXML_1", false);
					start_Hash.put("tFileInputXML_1",
							System.currentTimeMillis());
					currentComponent = "tFileInputXML_1";

					int tos_count_tFileInputXML_1 = 0;

					int nb_line_tFileInputXML_1 = 0;

					class IgnoreDTDEntityResolver_tFileInputXML_1 implements
							org.xml.sax.EntityResolver {

						public org.xml.sax.InputSource resolveEntity(
								String publicId, String systemId)
								throws org.xml.sax.SAXException,
								java.io.IOException {
							return new org.xml.sax.InputSource(
									new java.io.ByteArrayInputStream(
											"<?xml version='1.0' encoding='UTF-8'?>"
													.getBytes()));
						}

					}
					String os_tFileInputXML_1 = System.getProperty("os.name")
							.toLowerCase();
					boolean isWindows_tFileInputXML_1 = false;
					if (os_tFileInputXML_1.indexOf("windows") > -1
							|| os_tFileInputXML_1.indexOf("nt") > -1) {
						isWindows_tFileInputXML_1 = true;
					}
					class NameSpaceTool_tFileInputXML_1 {

						public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

						private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

						public void countNSMap(org.dom4j.Element el) {
							for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
									.declaredNamespaces()) {
								if (ns.getPrefix().trim().length() == 0) {
									xmlNameSpaceMap.put(
											"pre" + defualtNSPath.size(),
											ns.getURI());
									String path = "";
									org.dom4j.Element elTmp = el;
									while (elTmp != null) {
										if (elTmp.getNamespacePrefix() != null
												&& elTmp.getNamespacePrefix()
														.length() > 0) {
											path = "/"
													+ elTmp.getNamespacePrefix()
													+ ":" + elTmp.getName()
													+ path;
										} else {
											path = "/" + elTmp.getName() + path;
										}
										elTmp = elTmp.getParent();
									}
									defualtNSPath.add(path);
								} else {
									xmlNameSpaceMap.put(ns.getPrefix(),
											ns.getURI());
								}

							}
							for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
									.elements()) {
								countNSMap(e);
							}
						}

						public String addDefaultNSPrefix(String path,
								String loopPath) {
							if (defualtNSPath.size() > 0) {
								String fullPath = loopPath;
								if (!path.equals(fullPath)) {
									for (String tmp : path.split("/")) {
										if (("..").equals(tmp)) {
											fullPath = fullPath.substring(0,
													fullPath.lastIndexOf("/"));
										} else {
											fullPath += "/" + tmp;
										}
									}
								}
								int size = fullPath.split("/").length - 1;
								if (size < 0) {
									return fullPath;
								}
								int[] indexs = new int[size];
								java.util.Arrays.fill(indexs, -1);
								int length = 0;
								for (int i = 0; i < defualtNSPath.size(); i++) {
									if (defualtNSPath.get(i).length() > length
											&& fullPath
													.startsWith(defualtNSPath
															.get(i))) {
										java.util.Arrays
												.fill(indexs,
														defualtNSPath.get(i)
																.split("/").length - 2,
														indexs.length, i);
										length = defualtNSPath.get(i).length();
									}
								}

								StringBuilder newPath = new StringBuilder();
								String[] pathStrs = path.split("/");
								for (int i = 0; i < pathStrs.length; i++) {
									String tmp = pathStrs[i];
									if (newPath.length() > 0) {
										newPath.append("/");
									}
									if (tmp.length() > 0
											&& tmp.indexOf(":") == -1
											&& tmp.indexOf(".") == -1 /*
																	 * &&
																	 * tmp.indexOf
																	 * ("@") ==
																	 * -1
																	 */) {
										int index = indexs[i + indexs.length
												- pathStrs.length];
										if (index >= 0) {
											// ==== add by wliu to support both
											// filter and functions==
											if (tmp.indexOf("[") > 0
													&& tmp.indexOf("]") > tmp
															.indexOf("[")) {// include
																			// filter
												String tmpStr = replaceElementWithNS(
														tmp, "pre" + index
																+ ":");
												newPath.append(tmpStr);
											} else {
												if (tmp.indexOf("@") != -1
														|| tmp.indexOf("(") < tmp
																.indexOf(")")) { // include
																					// attribute
													newPath.append(tmp);
												} else {
													// ==add end=======
													newPath.append("pre")
															.append(index)
															.append(":")
															.append(tmp);
												}
											}
										} else {
											newPath.append(tmp);
										}
									} else {
										newPath.append(tmp);
									}
								}
								return newPath.toString();
							}
							return path;
						}

						private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
						private java.util.regex.Pattern pattern = java.util.regex.Pattern
								.compile(matches);

						private String replaceElementWithNS(String global,
								String pre) {

							java.util.regex.Matcher match = pattern
									.matcher(global);
							StringBuffer sb = new StringBuffer();
							match.reset();
							while (match.find()) {
								String group = match.group();
								String tmp = "";
								if (group.toLowerCase().matches(
										"\\b(div|mod|and|or)\\b.*")
										|| group.matches("@.*")) {
									tmp = group;
								} else {
									tmp = tmp + pre + group;
								}
								match.appendReplacement(sb, tmp);
							}
							match.appendTail(sb);

							return sb.toString();
						}

					}

					class XML_API_tFileInputXML_1 {
						public boolean isDefNull(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							if (node != null
									&& node instanceof org.dom4j.Element) {
								org.dom4j.Attribute attri = ((org.dom4j.Element) node)
										.attribute("nil");
								if (attri != null
										&& ("true").equals(attri.getText())) {
									return true;
								}
							}
							return false;
						}

						public boolean isMissing(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							return node == null ? true : false;
						}

						public boolean isEmpty(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							if (node != null) {
								return node.getText().length() == 0;
							}
							return false;
						}
					}

					org.dom4j.io.SAXReader reader_tFileInputXML_1 = new org.dom4j.io.SAXReader();
					reader_tFileInputXML_1
							.setEntityResolver(new IgnoreDTDEntityResolver_tFileInputXML_1());
					Object filename_tFileInputXML_1 = null;
					try {
						filename_tFileInputXML_1 = context.currentFile;
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}
					if (filename_tFileInputXML_1 != null
							&& filename_tFileInputXML_1 instanceof String
							&& filename_tFileInputXML_1.toString().startsWith(
									"//")) {
						if (!isWindows_tFileInputXML_1) {
							filename_tFileInputXML_1 = filename_tFileInputXML_1
									.toString().replaceFirst("//", "/");
						}
					}

					boolean isValidFile_tFileInputXML_1 = true;
					org.dom4j.Document doc_tFileInputXML_1 = null;
					java.io.Closeable toClose_tFileInputXML_1 = null;
					try {
						if (filename_tFileInputXML_1 instanceof java.io.InputStream) {
							java.io.InputStream inputStream_tFileInputXML_1 = (java.io.InputStream) filename_tFileInputXML_1;
							toClose_tFileInputXML_1 = inputStream_tFileInputXML_1;
							doc_tFileInputXML_1 = reader_tFileInputXML_1
									.read(inputStream_tFileInputXML_1);
						} else {
							java.io.Reader unicodeReader_tFileInputXML_1 = new UnicodeReader(
									new java.io.FileInputStream(String
											.valueOf(filename_tFileInputXML_1)),
									context.encoding);
							toClose_tFileInputXML_1 = unicodeReader_tFileInputXML_1;
							org.xml.sax.InputSource in_tFileInputXML_1 = new org.xml.sax.InputSource(
									unicodeReader_tFileInputXML_1);
							doc_tFileInputXML_1 = reader_tFileInputXML_1
									.read(in_tFileInputXML_1);
						}
					} catch (java.lang.Exception e) {
						System.err.println(e.getMessage());
						isValidFile_tFileInputXML_1 = false;
					} finally {
						if (toClose_tFileInputXML_1 != null) {
							toClose_tFileInputXML_1.close();
						}
					}
					if (isValidFile_tFileInputXML_1) {
						NameSpaceTool_tFileInputXML_1 nsTool_tFileInputXML_1 = new NameSpaceTool_tFileInputXML_1();
						nsTool_tFileInputXML_1.countNSMap(doc_tFileInputXML_1
								.getRootElement());
						java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_1 = nsTool_tFileInputXML_1.xmlNameSpaceMap;

						org.dom4j.XPath x_tFileInputXML_1 = doc_tFileInputXML_1
								.createXPath(nsTool_tFileInputXML_1
										.addDefaultNSPrefix("/ODM/Study",
												"/ODM/Study"));
						x_tFileInputXML_1
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1);

						java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_1 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tFileInputXML_1
								.selectNodes(doc_tFileInputXML_1);
						XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();
						String str_tFileInputXML_1 = "";
						org.dom4j.Node node_tFileInputXML_1 = null;

						// init all mapping xpaths
						org.dom4j.XPath xTmp0_tFileInputXML_1 = org.dom4j.DocumentHelper
								.createXPath(nsTool_tFileInputXML_1
										.addDefaultNSPrefix("@OID",
												"/ODM/Study"));
						xTmp0_tFileInputXML_1
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1);
						org.dom4j.XPath xTmp1_tFileInputXML_1 = org.dom4j.DocumentHelper
								.createXPath(nsTool_tFileInputXML_1
										.addDefaultNSPrefix(
												"/GlobalVariables/StudyName/.",
												"/ODM/Study"));
						xTmp1_tFileInputXML_1
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1);

						for (org.dom4j.tree.AbstractNode temp_tFileInputXML_1 : nodeList_tFileInputXML_1) {
							nb_line_tFileInputXML_1++;
							row1 = null;
							boolean whetherReject_tFileInputXML_1 = false;
							row1 = new row1Struct();
							try {
								Object obj0_tFileInputXML_1 = xTmp0_tFileInputXML_1
										.evaluate(temp_tFileInputXML_1);
								if (obj0_tFileInputXML_1 == null) {
									node_tFileInputXML_1 = null;
									str_tFileInputXML_1 = "";

								} else if (obj0_tFileInputXML_1 instanceof org.dom4j.Node) {
									node_tFileInputXML_1 = (org.dom4j.Node) obj0_tFileInputXML_1;
									str_tFileInputXML_1 = org.jaxen.function.StringFunction
											.evaluate(
													node_tFileInputXML_1,
													org.jaxen.dom4j.DocumentNavigator
															.getInstance());
								} else if (obj0_tFileInputXML_1 instanceof String
										|| obj0_tFileInputXML_1 instanceof Number) {
									node_tFileInputXML_1 = temp_tFileInputXML_1;
									str_tFileInputXML_1 = String
											.valueOf(obj0_tFileInputXML_1);
								} else if (obj0_tFileInputXML_1 instanceof java.util.List) {
									java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_1;
									node_tFileInputXML_1 = nodes_tFileInputXML_1
											.size() > 0 ? nodes_tFileInputXML_1
											.get(0) : null;
									str_tFileInputXML_1 = node_tFileInputXML_1 == null ? ""
											: org.jaxen.function.StringFunction
													.evaluate(
															node_tFileInputXML_1,
															org.jaxen.dom4j.DocumentNavigator
																	.getInstance());
								}
								if (xml_api_tFileInputXML_1
										.isDefNull(node_tFileInputXML_1)) {
									row1.OID = null;
								} else if (xml_api_tFileInputXML_1
										.isEmpty(node_tFileInputXML_1)) {
									row1.OID = "";
								} else if (xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
									row1.OID = null;
								} else {
									row1.OID = str_tFileInputXML_1;
								}
								Object obj1_tFileInputXML_1 = xTmp1_tFileInputXML_1
										.evaluate(temp_tFileInputXML_1);
								if (obj1_tFileInputXML_1 == null) {
									node_tFileInputXML_1 = null;
									str_tFileInputXML_1 = "";

								} else if (obj1_tFileInputXML_1 instanceof org.dom4j.Node) {
									node_tFileInputXML_1 = (org.dom4j.Node) obj1_tFileInputXML_1;
									str_tFileInputXML_1 = org.jaxen.function.StringFunction
											.evaluate(
													node_tFileInputXML_1,
													org.jaxen.dom4j.DocumentNavigator
															.getInstance());
								} else if (obj1_tFileInputXML_1 instanceof String
										|| obj1_tFileInputXML_1 instanceof Number) {
									node_tFileInputXML_1 = temp_tFileInputXML_1;
									str_tFileInputXML_1 = String
											.valueOf(obj1_tFileInputXML_1);
								} else if (obj1_tFileInputXML_1 instanceof java.util.List) {
									java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>) obj1_tFileInputXML_1;
									node_tFileInputXML_1 = nodes_tFileInputXML_1
											.size() > 0 ? nodes_tFileInputXML_1
											.get(0) : null;
									str_tFileInputXML_1 = node_tFileInputXML_1 == null ? ""
											: org.jaxen.function.StringFunction
													.evaluate(
															node_tFileInputXML_1,
															org.jaxen.dom4j.DocumentNavigator
																	.getInstance());
								}
								if (xml_api_tFileInputXML_1
										.isDefNull(node_tFileInputXML_1)) {
									row1.StudyName = null;
								} else if (xml_api_tFileInputXML_1
										.isEmpty(node_tFileInputXML_1)) {
									row1.StudyName = "";
								} else if (xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
									row1.StudyName = null;
								} else {
									row1.StudyName = str_tFileInputXML_1;
								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputXML_1 = true;
								System.err.println(e.getMessage());
								row1 = null;
							}

							/**
							 * [tFileInputXML_1 begin ] stop
							 */
							/**
							 * [tFileInputXML_1 main ] start
							 */

							currentComponent = "tFileInputXML_1";

							tos_count_tFileInputXML_1++;

							/**
							 * [tFileInputXML_1 main ] stop
							 */
							// Start of branch "row1"
							if (row1 != null) {

								/**
								 * [tMap_6 main ] start
								 */

								currentComponent = "tMap_6";

								boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_6 = false;
								boolean mainRowRejected_tMap_6 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
									// ###############################
									// # Output tables

									out5 = null;

									// # Output table : 'out5'
									out5_tmp.StudyID = row1.OID;
									out5_tmp.MetaID = null;
									out5_tmp.VisitID = null;
									out5_tmp.FormID = null;
									out5_tmp.QuestionID = null;
									out5_tmp.ItemID = null;
									out5_tmp.ParentItem = null;
									out5_tmp.Name = row1.StudyName != null ? row1.StudyName
											: row1.OID;
									out5_tmp.VisitNo = null;
									out5_tmp.Sequence = null;
									out5_tmp.hidden = null;
									out5_tmp.FormFamily = null;
									out5_tmp.AdditionalData = null;
									out5_tmp.item_Datatype = null;
									out5_tmp.HLEVEL = 2;
									out5 = out5_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_6 = false;

								tos_count_tMap_6++;

								/**
								 * [tMap_6 main ] stop
								 */
								// Start of branch "out5"
								if (out5 != null) {

									/**
									 * [tUniqRow_6 main ] start
									 */

									currentComponent = "tUniqRow_6";

									row12 = null;
									if (out5.StudyID == null) {
										finder_tUniqRow_6.StudyID = null;
									} else {
										finder_tUniqRow_6.StudyID = out5.StudyID
												.toLowerCase();
									}
									finder_tUniqRow_6.hashCodeDirty = true;
									if (!keystUniqRow_6
											.contains(finder_tUniqRow_6)) {
										KeyStruct_tUniqRow_6 new_tUniqRow_6 = new KeyStruct_tUniqRow_6();

										if (out5.StudyID == null) {
											new_tUniqRow_6.StudyID = null;
										} else {
											new_tUniqRow_6.StudyID = out5.StudyID
													.toLowerCase();
										}

										keystUniqRow_6.add(new_tUniqRow_6);
										if (row12 == null) {
											row12 = new row12Struct();
										}
										row12.StudyID = out5.StudyID;
										row12.MetaID = out5.MetaID;
										row12.VisitID = out5.VisitID;
										row12.FormID = out5.FormID;
										row12.QuestionID = out5.QuestionID;
										row12.ItemID = out5.ItemID;
										row12.ParentItem = out5.ParentItem;
										row12.Name = out5.Name;
										row12.VisitNo = out5.VisitNo;
										row12.Sequence = out5.Sequence;
										row12.hidden = out5.hidden;
										row12.FormFamily = out5.FormFamily;
										row12.AdditionalData = out5.AdditionalData;
										row12.item_Datatype = out5.item_Datatype;
										row12.HLEVEL = out5.HLEVEL;
										nb_uniques_tUniqRow_6++;
									} else {
										nb_duplicates_tUniqRow_6++;
									}

									tos_count_tUniqRow_6++;

									/**
									 * [tUniqRow_6 main ] stop
									 */
									// Start of branch "row12"
									if (row12 != null) {

										/**
										 * [tFileOutputDelimited_9 main ] start
										 */

										currentComponent = "tFileOutputDelimited_9";

										StringBuilder sb_tFileOutputDelimited_9 = new StringBuilder();

										if (row12.StudyID != null) {

											sb_tFileOutputDelimited_9.append(

											row12.StudyID

											);

										}

										sb_tFileOutputDelimited_9
												.append(OUT_DELIM_tFileOutputDelimited_9);

										if (row12.MetaID != null) {

											sb_tFileOutputDelimited_9.append(

											row12.MetaID

											);

										}

										sb_tFileOutputDelimited_9
												.append(OUT_DELIM_tFileOutputDelimited_9);

										if (row12.VisitID != null) {

											sb_tFileOutputDelimited_9.append(

											row12.VisitID

											);

										}

										sb_tFileOutputDelimited_9
												.append(OUT_DELIM_tFileOutputDelimited_9);

										if (row12.FormID != null) {

											sb_tFileOutputDelimited_9.append(

											row12.FormID

											);

										}

										sb_tFileOutputDelimited_9
												.append(OUT_DELIM_tFileOutputDelimited_9);

										if (row12.QuestionID != null) {

											sb_tFileOutputDelimited_9.append(

											row12.QuestionID

											);

										}

										sb_tFileOutputDelimited_9
												.append(OUT_DELIM_tFileOutputDelimited_9);

										if (row12.ItemID != null) {

											sb_tFileOutputDelimited_9.append(

											row12.ItemID

											);

										}

										sb_tFileOutputDelimited_9
												.append(OUT_DELIM_tFileOutputDelimited_9);

										if (row12.ParentItem != null) {

											sb_tFileOutputDelimited_9.append(

											row12.ParentItem

											);

										}

										sb_tFileOutputDelimited_9
												.append(OUT_DELIM_tFileOutputDelimited_9);

										if (row12.Name != null) {

											sb_tFileOutputDelimited_9.append(

											row12.Name

											);

										}

										sb_tFileOutputDelimited_9
												.append(OUT_DELIM_tFileOutputDelimited_9);

										if (row12.VisitNo != null) {

											sb_tFileOutputDelimited_9.append(

											row12.VisitNo

											);

										}

										sb_tFileOutputDelimited_9
												.append(OUT_DELIM_tFileOutputDelimited_9);

										if (row12.Sequence != null) {

											sb_tFileOutputDelimited_9.append(

											row12.Sequence

											);

										}

										sb_tFileOutputDelimited_9
												.append(OUT_DELIM_tFileOutputDelimited_9);

										if (row12.hidden != null) {

											sb_tFileOutputDelimited_9.append(

											row12.hidden

											);

										}

										sb_tFileOutputDelimited_9
												.append(OUT_DELIM_tFileOutputDelimited_9);

										if (row12.FormFamily != null) {

											sb_tFileOutputDelimited_9.append(

											row12.FormFamily

											);

										}

										sb_tFileOutputDelimited_9
												.append(OUT_DELIM_tFileOutputDelimited_9);

										if (row12.AdditionalData != null) {

											sb_tFileOutputDelimited_9.append(

											row12.AdditionalData

											);

										}

										sb_tFileOutputDelimited_9
												.append(OUT_DELIM_tFileOutputDelimited_9);

										if (row12.item_Datatype != null) {

											sb_tFileOutputDelimited_9.append(

											row12.item_Datatype

											);

										}

										sb_tFileOutputDelimited_9
												.append(OUT_DELIM_tFileOutputDelimited_9);

										if (row12.HLEVEL != null) {

											sb_tFileOutputDelimited_9.append(

											row12.HLEVEL

											);

										}

										sb_tFileOutputDelimited_9
												.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_9);

										nb_line_tFileOutputDelimited_9++;

										outtFileOutputDelimited_9
												.write(sb_tFileOutputDelimited_9
														.toString());

										tos_count_tFileOutputDelimited_9++;

										/**
										 * [tFileOutputDelimited_9 main ] stop
										 */

									} // End of branch "row12"

								} // End of branch "out5"

							} // End of branch "row1"

							/**
							 * [tFileInputXML_1 end ] start
							 */

							currentComponent = "tFileInputXML_1";

						}
					}
					globalMap.put("tFileInputXML_1_NB_LINE",
							nb_line_tFileInputXML_1);

					ok_Hash.put("tFileInputXML_1", true);
					end_Hash.put("tFileInputXML_1", System.currentTimeMillis());

					/**
					 * [tFileInputXML_1 end ] stop
					 */

					/**
					 * [tMap_6 end ] start
					 */

					currentComponent = "tMap_6";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					ok_Hash.put("tMap_6", true);
					end_Hash.put("tMap_6", System.currentTimeMillis());

					/**
					 * [tMap_6 end ] stop
					 */

					/**
					 * [tUniqRow_6 end ] start
					 */

					currentComponent = "tUniqRow_6";

					globalMap.put("tUniqRow_6_NB_UNIQUES",
							nb_uniques_tUniqRow_6);
					globalMap.put("tUniqRow_6_NB_DUPLICATES",
							nb_duplicates_tUniqRow_6);

					ok_Hash.put("tUniqRow_6", true);
					end_Hash.put("tUniqRow_6", System.currentTimeMillis());

					/**
					 * [tUniqRow_6 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_9 end ] start
					 */

					currentComponent = "tFileOutputDelimited_9";

				} finally {
					if (outtFileOutputDelimited_9 != null) {
						outtFileOutputDelimited_9.flush();
						outtFileOutputDelimited_9.close();
					}
					globalMap.put("tFileOutputDelimited_9_NB_LINE",
							nb_line_tFileOutputDelimited_9);
					globalMap.put("tFileOutputDelimited_9_FILE_NAME",
							fileName_tFileOutputDelimited_9);
				} // finally

				ok_Hash.put("tFileOutputDelimited_9", true);
				end_Hash.put("tFileOutputDelimited_9",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_9 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputXML_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_5Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_5 begin ] start
				 */

				ok_Hash.put("tJava_5", false);
				start_Hash.put("tJava_5", System.currentTimeMillis());
				currentComponent = "tJava_5";

				int tos_count_tJava_5 = 0;

				StatusListener.setSubStatus(40.0f, (int) (40.0f) + "%");

				/**
				 * [tJava_5 begin ] stop
				 */
				/**
				 * [tJava_5 main ] start
				 */

				currentComponent = "tJava_5";

				tos_count_tJava_5++;

				/**
				 * [tJava_5 main ] stop
				 */
				/**
				 * [tJava_5 end ] start
				 */

				currentComponent = "tJava_5";

				ok_Hash.put("tJava_5", true);
				end_Hash.put("tJava_5", System.currentTimeMillis());

				/**
				 * [tJava_5 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_5:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputXML_8Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}

	public static class temp4FormsStruct implements
			routines.system.IPersistableComparableLookupRow<temp4FormsStruct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String StudyID;

		public String getStudyID() {
			return this.StudyID;
		}

		public String MetaID;

		public String getMetaID() {
			return this.MetaID;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String QuestionID;

		public String getQuestionID() {
			return this.QuestionID;
		}

		public String ItemID;

		public String getItemID() {
			return this.ItemID;
		}

		public String ParentItem;

		public String getParentItem() {
			return this.ParentItem;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String VisitNo;

		public String getVisitNo() {
			return this.VisitNo;
		}

		public String Sequence;

		public String getSequence() {
			return this.Sequence;
		}

		public String hidden;

		public String getHidden() {
			return this.hidden;
		}

		public String FormFamily;

		public String getFormFamily() {
			return this.FormFamily;
		}

		public String AdditionalData;

		public String getAdditionalData() {
			return this.AdditionalData;
		}

		public String item_Datatype;

		public String getItem_Datatype() {
			return this.item_Datatype;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.FormID == null) ? 0 : this.FormID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final temp4FormsStruct other = (temp4FormsStruct) obj;

			if (this.FormID == null) {
				if (other.FormID != null)
					return false;
			} else if (!this.FormID.equals(other.FormID))
				return false;

			return true;
		}

		public void copyDataTo(temp4FormsStruct other) {

			other.StudyID = this.StudyID;
			other.MetaID = this.MetaID;
			other.VisitID = this.VisitID;
			other.FormID = this.FormID;
			other.QuestionID = this.QuestionID;
			other.ItemID = this.ItemID;
			other.ParentItem = this.ParentItem;
			other.Name = this.Name;
			other.VisitNo = this.VisitNo;
			other.Sequence = this.Sequence;
			other.hidden = this.hidden;
			other.FormFamily = this.FormFamily;
			other.AdditionalData = this.AdditionalData;
			other.item_Datatype = this.item_Datatype;

		}

		public void copyKeysDataTo(temp4FormsStruct other) {

			other.FormID = this.FormID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.FormID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FormID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.StudyID = readString(dis, ois);

				this.MetaID = readString(dis, ois);

				this.VisitID = readString(dis, ois);

				this.QuestionID = readString(dis, ois);

				this.ItemID = readString(dis, ois);

				this.ParentItem = readString(dis, ois);

				this.Name = readString(dis, ois);

				this.VisitNo = readString(dis, ois);

				this.Sequence = readString(dis, ois);

				this.hidden = readString(dis, ois);

				this.FormFamily = readString(dis, ois);

				this.AdditionalData = readString(dis, ois);

				this.item_Datatype = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.StudyID, dos, oos);

				writeString(this.MetaID, dos, oos);

				writeString(this.VisitID, dos, oos);

				writeString(this.QuestionID, dos, oos);

				writeString(this.ItemID, dos, oos);

				writeString(this.ParentItem, dos, oos);

				writeString(this.Name, dos, oos);

				writeString(this.VisitNo, dos, oos);

				writeString(this.Sequence, dos, oos);

				writeString(this.hidden, dos, oos);

				writeString(this.FormFamily, dos, oos);

				writeString(this.AdditionalData, dos, oos);

				writeString(this.item_Datatype, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("StudyID=" + StudyID);
			sb.append(",MetaID=" + MetaID);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",QuestionID=" + QuestionID);
			sb.append(",ItemID=" + ItemID);
			sb.append(",ParentItem=" + ParentItem);
			sb.append(",Name=" + Name);
			sb.append(",VisitNo=" + VisitNo);
			sb.append(",Sequence=" + Sequence);
			sb.append(",hidden=" + hidden);
			sb.append(",FormFamily=" + FormFamily);
			sb.append(",AdditionalData=" + AdditionalData);
			sb.append(",item_Datatype=" + item_Datatype);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(temp4FormsStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.FormID, other.FormID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_13Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				temp4FormsStruct temp4Forms = new temp4FormsStruct();

				/**
				 * [tAdvancedHash_temp4Forms begin ] start
				 */

				ok_Hash.put("tAdvancedHash_temp4Forms", false);
				start_Hash.put("tAdvancedHash_temp4Forms",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_temp4Forms";

				int tos_count_tAdvancedHash_temp4Forms = 0;

				// connection name:temp4Forms
				// source node:tFileInputDelimited_13 -
				// inputs:(after_tFileInputXML_15)
				// outputs:(temp4Forms,temp4Forms) | target
				// node:tAdvancedHash_temp4Forms - inputs:(temp4Forms)
				// outputs:()
				// linked node: tMap_14 -
				// inputs:(row13,temp4Forms,ItemGroupNames) outputs:(out10)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_temp4Forms = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<temp4FormsStruct> tHash_Lookup_temp4Forms = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<temp4FormsStruct> getLookup(matchingModeEnum_temp4Forms);

				globalMap.put("tHash_Lookup_temp4Forms",
						tHash_Lookup_temp4Forms);

				/**
				 * [tAdvancedHash_temp4Forms begin ] stop
				 */

				/**
				 * [tFileInputDelimited_13 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_13", false);
				start_Hash.put("tFileInputDelimited_13",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_13";

				int tos_count_tFileInputDelimited_13 = 0;

				int nb_line_tFileInputDelimited_13 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_13 = null;
				try {

					Object filename_tFileInputDelimited_13 = ((String) globalMap
							.get("tCreateTemporaryFile_6_FILEPATH"));
					if (filename_tFileInputDelimited_13 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_13 = 0, random_value_tFileInputDelimited_13 = -1;
						if (footer_value_tFileInputDelimited_13 > 0
								|| random_value_tFileInputDelimited_13 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_13 = new org.talend.fileprocess.FileInputDelimited(
								((String) globalMap
										.get("tCreateTemporaryFile_6_FILEPATH")),
								"ISO-8859-15", "\t", "\n", true, 0, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_13 != null
							&& fid_tFileInputDelimited_13.nextRecord()) {

						temp4Forms = null;

						temp4Forms = null;

						boolean whetherReject_tFileInputDelimited_13 = false;
						temp4Forms = new temp4FormsStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_13 = 0;

							columnIndexWithD_tFileInputDelimited_13 = 0;

							temp4Forms.StudyID = fid_tFileInputDelimited_13
									.get(columnIndexWithD_tFileInputDelimited_13);

							columnIndexWithD_tFileInputDelimited_13 = 1;

							temp4Forms.MetaID = fid_tFileInputDelimited_13
									.get(columnIndexWithD_tFileInputDelimited_13);

							columnIndexWithD_tFileInputDelimited_13 = 2;

							temp4Forms.VisitID = fid_tFileInputDelimited_13
									.get(columnIndexWithD_tFileInputDelimited_13);

							columnIndexWithD_tFileInputDelimited_13 = 3;

							temp4Forms.FormID = fid_tFileInputDelimited_13
									.get(columnIndexWithD_tFileInputDelimited_13);

							columnIndexWithD_tFileInputDelimited_13 = 4;

							temp4Forms.QuestionID = fid_tFileInputDelimited_13
									.get(columnIndexWithD_tFileInputDelimited_13);

							columnIndexWithD_tFileInputDelimited_13 = 5;

							temp4Forms.ItemID = fid_tFileInputDelimited_13
									.get(columnIndexWithD_tFileInputDelimited_13);

							columnIndexWithD_tFileInputDelimited_13 = 6;

							temp4Forms.ParentItem = fid_tFileInputDelimited_13
									.get(columnIndexWithD_tFileInputDelimited_13);

							columnIndexWithD_tFileInputDelimited_13 = 7;

							temp4Forms.Name = fid_tFileInputDelimited_13
									.get(columnIndexWithD_tFileInputDelimited_13);

							columnIndexWithD_tFileInputDelimited_13 = 8;

							temp4Forms.VisitNo = fid_tFileInputDelimited_13
									.get(columnIndexWithD_tFileInputDelimited_13);

							columnIndexWithD_tFileInputDelimited_13 = 9;

							temp4Forms.Sequence = fid_tFileInputDelimited_13
									.get(columnIndexWithD_tFileInputDelimited_13);

							columnIndexWithD_tFileInputDelimited_13 = 10;

							temp4Forms.hidden = fid_tFileInputDelimited_13
									.get(columnIndexWithD_tFileInputDelimited_13);

							columnIndexWithD_tFileInputDelimited_13 = 11;

							temp4Forms.FormFamily = fid_tFileInputDelimited_13
									.get(columnIndexWithD_tFileInputDelimited_13);

							columnIndexWithD_tFileInputDelimited_13 = 12;

							temp4Forms.AdditionalData = fid_tFileInputDelimited_13
									.get(columnIndexWithD_tFileInputDelimited_13);

							columnIndexWithD_tFileInputDelimited_13 = 13;

							temp4Forms.item_Datatype = fid_tFileInputDelimited_13
									.get(columnIndexWithD_tFileInputDelimited_13);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_13 = true;

							System.err.println(e.getMessage());
							temp4Forms = null;

						}

						/**
						 * [tFileInputDelimited_13 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_13 main ] start
						 */

						currentComponent = "tFileInputDelimited_13";

						tos_count_tFileInputDelimited_13++;

						/**
						 * [tFileInputDelimited_13 main ] stop
						 */
						// Start of branch "temp4Forms"
						if (temp4Forms != null) {

							/**
							 * [tAdvancedHash_temp4Forms main ] start
							 */

							currentComponent = "tAdvancedHash_temp4Forms";

							temp4FormsStruct temp4Forms_HashRow = new temp4FormsStruct();

							temp4Forms_HashRow.StudyID = temp4Forms.StudyID;

							temp4Forms_HashRow.MetaID = temp4Forms.MetaID;

							temp4Forms_HashRow.VisitID = temp4Forms.VisitID;

							temp4Forms_HashRow.FormID = temp4Forms.FormID;

							temp4Forms_HashRow.QuestionID = temp4Forms.QuestionID;

							temp4Forms_HashRow.ItemID = temp4Forms.ItemID;

							temp4Forms_HashRow.ParentItem = temp4Forms.ParentItem;

							temp4Forms_HashRow.Name = temp4Forms.Name;

							temp4Forms_HashRow.VisitNo = temp4Forms.VisitNo;

							temp4Forms_HashRow.Sequence = temp4Forms.Sequence;

							temp4Forms_HashRow.hidden = temp4Forms.hidden;

							temp4Forms_HashRow.FormFamily = temp4Forms.FormFamily;

							temp4Forms_HashRow.AdditionalData = temp4Forms.AdditionalData;

							temp4Forms_HashRow.item_Datatype = temp4Forms.item_Datatype;

							tHash_Lookup_temp4Forms.put(temp4Forms_HashRow);

							tos_count_tAdvancedHash_temp4Forms++;

							/**
							 * [tAdvancedHash_temp4Forms main ] stop
							 */

						} // End of branch "temp4Forms"

						/**
						 * [tFileInputDelimited_13 end ] start
						 */

						currentComponent = "tFileInputDelimited_13";

					}
				} finally {
					if (!((Object) (((String) globalMap
							.get("tCreateTemporaryFile_6_FILEPATH"))) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_13 != null) {
							fid_tFileInputDelimited_13.close();
						}
					}
					if (fid_tFileInputDelimited_13 != null) {
						globalMap.put("tFileInputDelimited_13_NB_LINE",
								fid_tFileInputDelimited_13.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_13", true);
				end_Hash.put("tFileInputDelimited_13",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_13 end ] stop
				 */

				/**
				 * [tAdvancedHash_temp4Forms end ] start
				 */

				currentComponent = "tAdvancedHash_temp4Forms";

				tHash_Lookup_temp4Forms.endPut();

				ok_Hash.put("tAdvancedHash_temp4Forms", true);
				end_Hash.put("tAdvancedHash_temp4Forms",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_temp4Forms end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_13_SUBPROCESS_STATE", 1);
	}

	public static class ItemGroupNamesStruct
			implements
			routines.system.IPersistableComparableLookupRow<ItemGroupNamesStruct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ItemGroupOID;

		public String getItemGroupOID() {
			return this.ItemGroupOID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.ItemGroupOID == null) ? 0 : this.ItemGroupOID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final ItemGroupNamesStruct other = (ItemGroupNamesStruct) obj;

			if (this.ItemGroupOID == null) {
				if (other.ItemGroupOID != null)
					return false;
			} else if (!this.ItemGroupOID.equals(other.ItemGroupOID))
				return false;

			return true;
		}

		public void copyDataTo(ItemGroupNamesStruct other) {

			other.ItemGroupOID = this.ItemGroupOID;
			other.Name = this.Name;

		}

		public void copyKeysDataTo(ItemGroupNamesStruct other) {

			other.ItemGroupOID = this.ItemGroupOID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.ItemGroupOID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ItemGroupOID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Name = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Name, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ItemGroupOID=" + ItemGroupOID);
			sb.append(",Name=" + Name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ItemGroupNamesStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ItemGroupOID,
					other.ItemGroupOID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_14Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				ItemGroupNamesStruct ItemGroupNames = new ItemGroupNamesStruct();

				/**
				 * [tAdvancedHash_ItemGroupNames begin ] start
				 */

				ok_Hash.put("tAdvancedHash_ItemGroupNames", false);
				start_Hash.put("tAdvancedHash_ItemGroupNames",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_ItemGroupNames";

				int tos_count_tAdvancedHash_ItemGroupNames = 0;

				// connection name:ItemGroupNames
				// source node:tFileInputDelimited_14 -
				// inputs:(after_tFileInputXML_15)
				// outputs:(ItemGroupNames,ItemGroupNames) | target
				// node:tAdvancedHash_ItemGroupNames - inputs:(ItemGroupNames)
				// outputs:()
				// linked node: tMap_14 -
				// inputs:(row13,temp4Forms,ItemGroupNames) outputs:(out10)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ItemGroupNames = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ItemGroupNamesStruct> tHash_Lookup_ItemGroupNames = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<ItemGroupNamesStruct> getLookup(matchingModeEnum_ItemGroupNames);

				globalMap.put("tHash_Lookup_ItemGroupNames",
						tHash_Lookup_ItemGroupNames);

				/**
				 * [tAdvancedHash_ItemGroupNames begin ] stop
				 */

				/**
				 * [tFileInputDelimited_14 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_14", false);
				start_Hash.put("tFileInputDelimited_14",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_14";

				int tos_count_tFileInputDelimited_14 = 0;

				int nb_line_tFileInputDelimited_14 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_14 = null;
				try {

					Object filename_tFileInputDelimited_14 = ((String) globalMap
							.get("tCreateTemporaryFile_10_FILEPATH"));
					if (filename_tFileInputDelimited_14 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_14 = 0, random_value_tFileInputDelimited_14 = -1;
						if (footer_value_tFileInputDelimited_14 > 0
								|| random_value_tFileInputDelimited_14 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_14 = new org.talend.fileprocess.FileInputDelimited(
								((String) globalMap
										.get("tCreateTemporaryFile_10_FILEPATH")),
								"ISO-8859-15", "\t", "\n", true, 0, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_14 != null
							&& fid_tFileInputDelimited_14.nextRecord()) {

						ItemGroupNames = null;

						ItemGroupNames = null;

						boolean whetherReject_tFileInputDelimited_14 = false;
						ItemGroupNames = new ItemGroupNamesStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_14 = 0;

							columnIndexWithD_tFileInputDelimited_14 = 0;

							ItemGroupNames.ItemGroupOID = fid_tFileInputDelimited_14
									.get(columnIndexWithD_tFileInputDelimited_14);

							columnIndexWithD_tFileInputDelimited_14 = 1;

							ItemGroupNames.Name = fid_tFileInputDelimited_14
									.get(columnIndexWithD_tFileInputDelimited_14);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_14 = true;

							System.err.println(e.getMessage());
							ItemGroupNames = null;

						}

						/**
						 * [tFileInputDelimited_14 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_14 main ] start
						 */

						currentComponent = "tFileInputDelimited_14";

						tos_count_tFileInputDelimited_14++;

						/**
						 * [tFileInputDelimited_14 main ] stop
						 */
						// Start of branch "ItemGroupNames"
						if (ItemGroupNames != null) {

							/**
							 * [tAdvancedHash_ItemGroupNames main ] start
							 */

							currentComponent = "tAdvancedHash_ItemGroupNames";

							ItemGroupNamesStruct ItemGroupNames_HashRow = new ItemGroupNamesStruct();

							ItemGroupNames_HashRow.ItemGroupOID = ItemGroupNames.ItemGroupOID;

							ItemGroupNames_HashRow.Name = ItemGroupNames.Name;

							tHash_Lookup_ItemGroupNames
									.put(ItemGroupNames_HashRow);

							tos_count_tAdvancedHash_ItemGroupNames++;

							/**
							 * [tAdvancedHash_ItemGroupNames main ] stop
							 */

						} // End of branch "ItemGroupNames"

						/**
						 * [tFileInputDelimited_14 end ] start
						 */

						currentComponent = "tFileInputDelimited_14";

					}
				} finally {
					if (!((Object) (((String) globalMap
							.get("tCreateTemporaryFile_10_FILEPATH"))) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_14 != null) {
							fid_tFileInputDelimited_14.close();
						}
					}
					if (fid_tFileInputDelimited_14 != null) {
						globalMap.put("tFileInputDelimited_14_NB_LINE",
								fid_tFileInputDelimited_14.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_14", true);
				end_Hash.put("tFileInputDelimited_14",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_14 end ] stop
				 */

				/**
				 * [tAdvancedHash_ItemGroupNames end ] start
				 */

				currentComponent = "tAdvancedHash_ItemGroupNames";

				tHash_Lookup_ItemGroupNames.endPut();

				ok_Hash.put("tAdvancedHash_ItemGroupNames", true);
				end_Hash.put("tAdvancedHash_ItemGroupNames",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_ItemGroupNames end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_14_SUBPROCESS_STATE", 1);
	}

	public static class fromTemp5ItemGroupStruct
			implements
			routines.system.IPersistableComparableLookupRow<fromTemp5ItemGroupStruct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String StudyID;

		public String getStudyID() {
			return this.StudyID;
		}

		public String MetaID;

		public String getMetaID() {
			return this.MetaID;
		}

		public String VisitID;

		public String getVisitID() {
			return this.VisitID;
		}

		public String FormID;

		public String getFormID() {
			return this.FormID;
		}

		public String QuestionID;

		public String getQuestionID() {
			return this.QuestionID;
		}

		public String ItemID;

		public String getItemID() {
			return this.ItemID;
		}

		public String ParentItem;

		public String getParentItem() {
			return this.ParentItem;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String VisitNo;

		public String getVisitNo() {
			return this.VisitNo;
		}

		public String Sequence;

		public String getSequence() {
			return this.Sequence;
		}

		public String hidden;

		public String getHidden() {
			return this.hidden;
		}

		public String FormFamily;

		public String getFormFamily() {
			return this.FormFamily;
		}

		public String AdditionalData;

		public String getAdditionalData() {
			return this.AdditionalData;
		}

		public String item_Datatype;

		public String getItem_Datatype() {
			return this.item_Datatype;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.QuestionID == null) ? 0 : this.QuestionID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final fromTemp5ItemGroupStruct other = (fromTemp5ItemGroupStruct) obj;

			if (this.QuestionID == null) {
				if (other.QuestionID != null)
					return false;
			} else if (!this.QuestionID.equals(other.QuestionID))
				return false;

			return true;
		}

		public void copyDataTo(fromTemp5ItemGroupStruct other) {

			other.StudyID = this.StudyID;
			other.MetaID = this.MetaID;
			other.VisitID = this.VisitID;
			other.FormID = this.FormID;
			other.QuestionID = this.QuestionID;
			other.ItemID = this.ItemID;
			other.ParentItem = this.ParentItem;
			other.Name = this.Name;
			other.VisitNo = this.VisitNo;
			other.Sequence = this.Sequence;
			other.hidden = this.hidden;
			other.FormFamily = this.FormFamily;
			other.AdditionalData = this.AdditionalData;
			other.item_Datatype = this.item_Datatype;

		}

		public void copyKeysDataTo(fromTemp5ItemGroupStruct other) {

			other.QuestionID = this.QuestionID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.QuestionID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.QuestionID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.StudyID = readString(dis, ois);

				this.MetaID = readString(dis, ois);

				this.VisitID = readString(dis, ois);

				this.FormID = readString(dis, ois);

				this.ItemID = readString(dis, ois);

				this.ParentItem = readString(dis, ois);

				this.Name = readString(dis, ois);

				this.VisitNo = readString(dis, ois);

				this.Sequence = readString(dis, ois);

				this.hidden = readString(dis, ois);

				this.FormFamily = readString(dis, ois);

				this.AdditionalData = readString(dis, ois);

				this.item_Datatype = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.StudyID, dos, oos);

				writeString(this.MetaID, dos, oos);

				writeString(this.VisitID, dos, oos);

				writeString(this.FormID, dos, oos);

				writeString(this.ItemID, dos, oos);

				writeString(this.ParentItem, dos, oos);

				writeString(this.Name, dos, oos);

				writeString(this.VisitNo, dos, oos);

				writeString(this.Sequence, dos, oos);

				writeString(this.hidden, dos, oos);

				writeString(this.FormFamily, dos, oos);

				writeString(this.AdditionalData, dos, oos);

				writeString(this.item_Datatype, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("StudyID=" + StudyID);
			sb.append(",MetaID=" + MetaID);
			sb.append(",VisitID=" + VisitID);
			sb.append(",FormID=" + FormID);
			sb.append(",QuestionID=" + QuestionID);
			sb.append(",ItemID=" + ItemID);
			sb.append(",ParentItem=" + ParentItem);
			sb.append(",Name=" + Name);
			sb.append(",VisitNo=" + VisitNo);
			sb.append(",Sequence=" + Sequence);
			sb.append(",hidden=" + hidden);
			sb.append(",FormFamily=" + FormFamily);
			sb.append(",AdditionalData=" + AdditionalData);
			sb.append(",item_Datatype=" + item_Datatype);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(fromTemp5ItemGroupStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.QuestionID,
					other.QuestionID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_15Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				fromTemp5ItemGroupStruct fromTemp5ItemGroup = new fromTemp5ItemGroupStruct();

				/**
				 * [tAdvancedHash_fromTemp5ItemGroup begin ] start
				 */

				ok_Hash.put("tAdvancedHash_fromTemp5ItemGroup", false);
				start_Hash.put("tAdvancedHash_fromTemp5ItemGroup",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_fromTemp5ItemGroup";

				int tos_count_tAdvancedHash_fromTemp5ItemGroup = 0;

				// connection name:fromTemp5ItemGroup
				// source node:tFileInputDelimited_15 -
				// inputs:(after_tFileInputXML_16)
				// outputs:(fromTemp5ItemGroup,fromTemp5ItemGroup) | target
				// node:tAdvancedHash_fromTemp5ItemGroup -
				// inputs:(fromTemp5ItemGroup) outputs:()
				// linked node: tMap_15 -
				// inputs:(fromItem,fromTemp5ItemGroup,fromItemNames)
				// outputs:(out11)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_fromTemp5ItemGroup = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<fromTemp5ItemGroupStruct> tHash_Lookup_fromTemp5ItemGroup = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<fromTemp5ItemGroupStruct> getLookup(matchingModeEnum_fromTemp5ItemGroup);

				globalMap.put("tHash_Lookup_fromTemp5ItemGroup",
						tHash_Lookup_fromTemp5ItemGroup);

				/**
				 * [tAdvancedHash_fromTemp5ItemGroup begin ] stop
				 */

				/**
				 * [tFileInputDelimited_15 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_15", false);
				start_Hash.put("tFileInputDelimited_15",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_15";

				int tos_count_tFileInputDelimited_15 = 0;

				int nb_line_tFileInputDelimited_15 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_15 = null;
				try {

					Object filename_tFileInputDelimited_15 = ((String) globalMap
							.get("tCreateTemporaryFile_7_FILEPATH"));
					if (filename_tFileInputDelimited_15 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_15 = 0, random_value_tFileInputDelimited_15 = -1;
						if (footer_value_tFileInputDelimited_15 > 0
								|| random_value_tFileInputDelimited_15 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_15 = new org.talend.fileprocess.FileInputDelimited(
								((String) globalMap
										.get("tCreateTemporaryFile_7_FILEPATH")),
								"ISO-8859-15", "\t", "\n", true, 0, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_15 != null
							&& fid_tFileInputDelimited_15.nextRecord()) {

						fromTemp5ItemGroup = null;

						fromTemp5ItemGroup = null;

						boolean whetherReject_tFileInputDelimited_15 = false;
						fromTemp5ItemGroup = new fromTemp5ItemGroupStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_15 = 0;

							columnIndexWithD_tFileInputDelimited_15 = 0;

							fromTemp5ItemGroup.StudyID = fid_tFileInputDelimited_15
									.get(columnIndexWithD_tFileInputDelimited_15);

							columnIndexWithD_tFileInputDelimited_15 = 1;

							fromTemp5ItemGroup.MetaID = fid_tFileInputDelimited_15
									.get(columnIndexWithD_tFileInputDelimited_15);

							columnIndexWithD_tFileInputDelimited_15 = 2;

							fromTemp5ItemGroup.VisitID = fid_tFileInputDelimited_15
									.get(columnIndexWithD_tFileInputDelimited_15);

							columnIndexWithD_tFileInputDelimited_15 = 3;

							fromTemp5ItemGroup.FormID = fid_tFileInputDelimited_15
									.get(columnIndexWithD_tFileInputDelimited_15);

							columnIndexWithD_tFileInputDelimited_15 = 4;

							fromTemp5ItemGroup.QuestionID = fid_tFileInputDelimited_15
									.get(columnIndexWithD_tFileInputDelimited_15);

							columnIndexWithD_tFileInputDelimited_15 = 5;

							fromTemp5ItemGroup.ItemID = fid_tFileInputDelimited_15
									.get(columnIndexWithD_tFileInputDelimited_15);

							columnIndexWithD_tFileInputDelimited_15 = 6;

							fromTemp5ItemGroup.ParentItem = fid_tFileInputDelimited_15
									.get(columnIndexWithD_tFileInputDelimited_15);

							columnIndexWithD_tFileInputDelimited_15 = 7;

							fromTemp5ItemGroup.Name = fid_tFileInputDelimited_15
									.get(columnIndexWithD_tFileInputDelimited_15);

							columnIndexWithD_tFileInputDelimited_15 = 8;

							fromTemp5ItemGroup.VisitNo = fid_tFileInputDelimited_15
									.get(columnIndexWithD_tFileInputDelimited_15);

							columnIndexWithD_tFileInputDelimited_15 = 9;

							fromTemp5ItemGroup.Sequence = fid_tFileInputDelimited_15
									.get(columnIndexWithD_tFileInputDelimited_15);

							columnIndexWithD_tFileInputDelimited_15 = 10;

							fromTemp5ItemGroup.hidden = fid_tFileInputDelimited_15
									.get(columnIndexWithD_tFileInputDelimited_15);

							columnIndexWithD_tFileInputDelimited_15 = 11;

							fromTemp5ItemGroup.FormFamily = fid_tFileInputDelimited_15
									.get(columnIndexWithD_tFileInputDelimited_15);

							columnIndexWithD_tFileInputDelimited_15 = 12;

							fromTemp5ItemGroup.AdditionalData = fid_tFileInputDelimited_15
									.get(columnIndexWithD_tFileInputDelimited_15);

							columnIndexWithD_tFileInputDelimited_15 = 13;

							fromTemp5ItemGroup.item_Datatype = fid_tFileInputDelimited_15
									.get(columnIndexWithD_tFileInputDelimited_15);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_15 = true;

							System.err.println(e.getMessage());
							fromTemp5ItemGroup = null;

						}

						/**
						 * [tFileInputDelimited_15 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_15 main ] start
						 */

						currentComponent = "tFileInputDelimited_15";

						tos_count_tFileInputDelimited_15++;

						/**
						 * [tFileInputDelimited_15 main ] stop
						 */
						// Start of branch "fromTemp5ItemGroup"
						if (fromTemp5ItemGroup != null) {

							/**
							 * [tAdvancedHash_fromTemp5ItemGroup main ] start
							 */

							currentComponent = "tAdvancedHash_fromTemp5ItemGroup";

							fromTemp5ItemGroupStruct fromTemp5ItemGroup_HashRow = new fromTemp5ItemGroupStruct();

							fromTemp5ItemGroup_HashRow.StudyID = fromTemp5ItemGroup.StudyID;

							fromTemp5ItemGroup_HashRow.MetaID = fromTemp5ItemGroup.MetaID;

							fromTemp5ItemGroup_HashRow.VisitID = fromTemp5ItemGroup.VisitID;

							fromTemp5ItemGroup_HashRow.FormID = fromTemp5ItemGroup.FormID;

							fromTemp5ItemGroup_HashRow.QuestionID = fromTemp5ItemGroup.QuestionID;

							fromTemp5ItemGroup_HashRow.ItemID = fromTemp5ItemGroup.ItemID;

							fromTemp5ItemGroup_HashRow.ParentItem = fromTemp5ItemGroup.ParentItem;

							fromTemp5ItemGroup_HashRow.Name = fromTemp5ItemGroup.Name;

							fromTemp5ItemGroup_HashRow.VisitNo = fromTemp5ItemGroup.VisitNo;

							fromTemp5ItemGroup_HashRow.Sequence = fromTemp5ItemGroup.Sequence;

							fromTemp5ItemGroup_HashRow.hidden = fromTemp5ItemGroup.hidden;

							fromTemp5ItemGroup_HashRow.FormFamily = fromTemp5ItemGroup.FormFamily;

							fromTemp5ItemGroup_HashRow.AdditionalData = fromTemp5ItemGroup.AdditionalData;

							fromTemp5ItemGroup_HashRow.item_Datatype = fromTemp5ItemGroup.item_Datatype;

							tHash_Lookup_fromTemp5ItemGroup
									.put(fromTemp5ItemGroup_HashRow);

							tos_count_tAdvancedHash_fromTemp5ItemGroup++;

							/**
							 * [tAdvancedHash_fromTemp5ItemGroup main ] stop
							 */

						} // End of branch "fromTemp5ItemGroup"

						/**
						 * [tFileInputDelimited_15 end ] start
						 */

						currentComponent = "tFileInputDelimited_15";

					}
				} finally {
					if (!((Object) (((String) globalMap
							.get("tCreateTemporaryFile_7_FILEPATH"))) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_15 != null) {
							fid_tFileInputDelimited_15.close();
						}
					}
					if (fid_tFileInputDelimited_15 != null) {
						globalMap.put("tFileInputDelimited_15_NB_LINE",
								fid_tFileInputDelimited_15.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_15", true);
				end_Hash.put("tFileInputDelimited_15",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_15 end ] stop
				 */

				/**
				 * [tAdvancedHash_fromTemp5ItemGroup end ] start
				 */

				currentComponent = "tAdvancedHash_fromTemp5ItemGroup";

				tHash_Lookup_fromTemp5ItemGroup.endPut();

				ok_Hash.put("tAdvancedHash_fromTemp5ItemGroup", true);
				end_Hash.put("tAdvancedHash_fromTemp5ItemGroup",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_fromTemp5ItemGroup end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_15_SUBPROCESS_STATE", 1);
	}

	public static class row14Struct implements
			routines.system.IPersistableComparableLookupRow<row14Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String OID;

		public String getOID() {
			return this.OID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String CodeListItem;

		public String getCodeListItem() {
			return this.CodeListItem;
		}

		public String TranslatedText;

		public String getTranslatedText() {
			return this.TranslatedText;
		}

		public String ItemGroupOID;

		public String getItemGroupOID() {
			return this.ItemGroupOID;
		}

		public String Datatype;

		public String getDatatype() {
			return this.Datatype;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.ItemGroupOID == null) ? 0 : this.ItemGroupOID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row14Struct other = (row14Struct) obj;

			if (this.ItemGroupOID == null) {
				if (other.ItemGroupOID != null)
					return false;
			} else if (!this.ItemGroupOID.equals(other.ItemGroupOID))
				return false;

			return true;
		}

		public void copyDataTo(row14Struct other) {

			other.OID = this.OID;
			other.Name = this.Name;
			other.CodeListItem = this.CodeListItem;
			other.TranslatedText = this.TranslatedText;
			other.ItemGroupOID = this.ItemGroupOID;
			other.Datatype = this.Datatype;

		}

		public void copyKeysDataTo(row14Struct other) {

			other.ItemGroupOID = this.ItemGroupOID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.ItemGroupOID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ItemGroupOID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.OID = readString(dis, ois);

				this.Name = readString(dis, ois);

				this.CodeListItem = readString(dis, ois);

				this.TranslatedText = readString(dis, ois);

				this.Datatype = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.OID, dos, oos);

				writeString(this.Name, dos, oos);

				writeString(this.CodeListItem, dos, oos);

				writeString(this.TranslatedText, dos, oos);

				writeString(this.Datatype, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OID=" + OID);
			sb.append(",Name=" + Name);
			sb.append(",CodeListItem=" + CodeListItem);
			sb.append(",TranslatedText=" + TranslatedText);
			sb.append(",ItemGroupOID=" + ItemGroupOID);
			sb.append(",Datatype=" + Datatype);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ItemGroupOID,
					other.ItemGroupOID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_23Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_23_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row14Struct row14 = new row14Struct();

				/**
				 * [tAdvancedHash_row14 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row14", false);
				start_Hash.put("tAdvancedHash_row14",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row14";

				int tos_count_tAdvancedHash_row14 = 0;

				// connection name:row14
				// source node:tFileInputDelimited_23 -
				// inputs:(after_tFileInputXML_16) outputs:(row14,row14) |
				// target node:tAdvancedHash_row14 - inputs:(row14) outputs:()
				// linked node: tMap_29 - inputs:(row16,row14) outputs:(asd)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row14 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row14Struct> getLookup(matchingModeEnum_row14);

				globalMap.put("tHash_Lookup_row14", tHash_Lookup_row14);

				/**
				 * [tAdvancedHash_row14 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_23 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_23", false);
				start_Hash.put("tFileInputDelimited_23",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_23";

				int tos_count_tFileInputDelimited_23 = 0;

				int nb_line_tFileInputDelimited_23 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_23 = null;
				try {

					Object filename_tFileInputDelimited_23 = context.folderMain
							+ context.folderOutput + "codelist.csv";
					if (filename_tFileInputDelimited_23 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_23 = 0, random_value_tFileInputDelimited_23 = -1;
						if (footer_value_tFileInputDelimited_23 > 0
								|| random_value_tFileInputDelimited_23 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_23 = new org.talend.fileprocess.FileInputDelimited(
								context.folderMain + context.folderOutput
										+ "codelist.csv", "ISO-8859-15", "\t",
								"\n", true, 0, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_23 != null
							&& fid_tFileInputDelimited_23.nextRecord()) {

						row14 = null;

						row14 = null;

						boolean whetherReject_tFileInputDelimited_23 = false;
						row14 = new row14Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_23 = 0;

							columnIndexWithD_tFileInputDelimited_23 = 0;

							row14.OID = fid_tFileInputDelimited_23
									.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 1;

							row14.Name = fid_tFileInputDelimited_23
									.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 2;

							row14.CodeListItem = fid_tFileInputDelimited_23
									.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 3;

							row14.TranslatedText = fid_tFileInputDelimited_23
									.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 4;

							row14.ItemGroupOID = fid_tFileInputDelimited_23
									.get(columnIndexWithD_tFileInputDelimited_23);

							columnIndexWithD_tFileInputDelimited_23 = 5;

							row14.Datatype = fid_tFileInputDelimited_23
									.get(columnIndexWithD_tFileInputDelimited_23);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_23 = true;

							System.err.println(e.getMessage());
							row14 = null;

						}

						/**
						 * [tFileInputDelimited_23 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_23 main ] start
						 */

						currentComponent = "tFileInputDelimited_23";

						tos_count_tFileInputDelimited_23++;

						/**
						 * [tFileInputDelimited_23 main ] stop
						 */
						// Start of branch "row14"
						if (row14 != null) {

							/**
							 * [tAdvancedHash_row14 main ] start
							 */

							currentComponent = "tAdvancedHash_row14";

							row14Struct row14_HashRow = new row14Struct();

							row14_HashRow.OID = row14.OID;

							row14_HashRow.Name = row14.Name;

							row14_HashRow.CodeListItem = row14.CodeListItem;

							row14_HashRow.TranslatedText = row14.TranslatedText;

							row14_HashRow.ItemGroupOID = row14.ItemGroupOID;

							row14_HashRow.Datatype = row14.Datatype;

							tHash_Lookup_row14.put(row14_HashRow);

							tos_count_tAdvancedHash_row14++;

							/**
							 * [tAdvancedHash_row14 main ] stop
							 */

						} // End of branch "row14"

						/**
						 * [tFileInputDelimited_23 end ] start
						 */

						currentComponent = "tFileInputDelimited_23";

					}
				} finally {
					if (!((Object) (context.folderMain + context.folderOutput + "codelist.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_23 != null) {
							fid_tFileInputDelimited_23.close();
						}
					}
					if (fid_tFileInputDelimited_23 != null) {
						globalMap.put("tFileInputDelimited_23_NB_LINE",
								fid_tFileInputDelimited_23.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_23", true);
				end_Hash.put("tFileInputDelimited_23",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_23 end ] stop
				 */

				/**
				 * [tAdvancedHash_row14 end ] start
				 */

				currentComponent = "tAdvancedHash_row14";

				tHash_Lookup_row14.endPut();

				ok_Hash.put("tAdvancedHash_row14", true);
				end_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row14 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_23_SUBPROCESS_STATE", 1);
	}

	public static class fromItemNamesStruct
			implements
			routines.system.IPersistableComparableLookupRow<fromItemNamesStruct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ItemGroupOID;

		public String getItemGroupOID() {
			return this.ItemGroupOID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String TransText;

		public String getTransText() {
			return this.TransText;
		}

		public String dataType;

		public String getDataType() {
			return this.dataType;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.ItemGroupOID == null) ? 0 : this.ItemGroupOID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final fromItemNamesStruct other = (fromItemNamesStruct) obj;

			if (this.ItemGroupOID == null) {
				if (other.ItemGroupOID != null)
					return false;
			} else if (!this.ItemGroupOID.equals(other.ItemGroupOID))
				return false;

			return true;
		}

		public void copyDataTo(fromItemNamesStruct other) {

			other.ItemGroupOID = this.ItemGroupOID;
			other.Name = this.Name;
			other.TransText = this.TransText;
			other.dataType = this.dataType;
			other.codeList = this.codeList;

		}

		public void copyKeysDataTo(fromItemNamesStruct other) {

			other.ItemGroupOID = this.ItemGroupOID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.ItemGroupOID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ItemGroupOID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Name = readString(dis, ois);

				this.TransText = readString(dis, ois);

				this.dataType = readString(dis, ois);

				this.codeList = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Name, dos, oos);

				writeString(this.TransText, dos, oos);

				writeString(this.dataType, dos, oos);

				writeString(this.codeList, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ItemGroupOID=" + ItemGroupOID);
			sb.append(",Name=" + Name);
			sb.append(",TransText=" + TransText);
			sb.append(",dataType=" + dataType);
			sb.append(",codeList=" + codeList);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(fromItemNamesStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ItemGroupOID,
					other.ItemGroupOID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_16Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				fromItemNamesStruct fromItemNames = new fromItemNamesStruct();

				/**
				 * [tAdvancedHash_fromItemNames begin ] start
				 */

				ok_Hash.put("tAdvancedHash_fromItemNames", false);
				start_Hash.put("tAdvancedHash_fromItemNames",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_fromItemNames";

				int tos_count_tAdvancedHash_fromItemNames = 0;

				// connection name:fromItemNames
				// source node:tFileInputDelimited_16 -
				// inputs:(after_tFileInputXML_16)
				// outputs:(fromItemNames,fromItemNames) | target
				// node:tAdvancedHash_fromItemNames - inputs:(fromItemNames)
				// outputs:()
				// linked node: tMap_15 -
				// inputs:(fromItem,fromTemp5ItemGroup,fromItemNames)
				// outputs:(out11)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_fromItemNames = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<fromItemNamesStruct> tHash_Lookup_fromItemNames = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<fromItemNamesStruct> getLookup(matchingModeEnum_fromItemNames);

				globalMap.put("tHash_Lookup_fromItemNames",
						tHash_Lookup_fromItemNames);

				/**
				 * [tAdvancedHash_fromItemNames begin ] stop
				 */

				/**
				 * [tFileInputDelimited_16 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_16", false);
				start_Hash.put("tFileInputDelimited_16",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_16";

				int tos_count_tFileInputDelimited_16 = 0;

				int nb_line_tFileInputDelimited_16 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_16 = null;
				try {

					Object filename_tFileInputDelimited_16 = ((String) globalMap
							.get("tCreateTemporaryFile_11_FILEPATH"));
					if (filename_tFileInputDelimited_16 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_16 = 0, random_value_tFileInputDelimited_16 = -1;
						if (footer_value_tFileInputDelimited_16 > 0
								|| random_value_tFileInputDelimited_16 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_16 = new org.talend.fileprocess.FileInputDelimited(
								((String) globalMap
										.get("tCreateTemporaryFile_11_FILEPATH")),
								"ISO-8859-15", "\t", "\n", true, 0, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_16 != null
							&& fid_tFileInputDelimited_16.nextRecord()) {

						fromItemNames = null;

						fromItemNames = null;

						boolean whetherReject_tFileInputDelimited_16 = false;
						fromItemNames = new fromItemNamesStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_16 = 0;

							columnIndexWithD_tFileInputDelimited_16 = 0;

							fromItemNames.ItemGroupOID = fid_tFileInputDelimited_16
									.get(columnIndexWithD_tFileInputDelimited_16);

							columnIndexWithD_tFileInputDelimited_16 = 1;

							fromItemNames.Name = fid_tFileInputDelimited_16
									.get(columnIndexWithD_tFileInputDelimited_16);

							columnIndexWithD_tFileInputDelimited_16 = 2;

							fromItemNames.TransText = fid_tFileInputDelimited_16
									.get(columnIndexWithD_tFileInputDelimited_16);

							columnIndexWithD_tFileInputDelimited_16 = 3;

							fromItemNames.dataType = fid_tFileInputDelimited_16
									.get(columnIndexWithD_tFileInputDelimited_16);

							columnIndexWithD_tFileInputDelimited_16 = 4;

							fromItemNames.codeList = fid_tFileInputDelimited_16
									.get(columnIndexWithD_tFileInputDelimited_16);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_16 = true;

							System.err.println(e.getMessage());
							fromItemNames = null;

						}

						/**
						 * [tFileInputDelimited_16 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_16 main ] start
						 */

						currentComponent = "tFileInputDelimited_16";

						tos_count_tFileInputDelimited_16++;

						/**
						 * [tFileInputDelimited_16 main ] stop
						 */
						// Start of branch "fromItemNames"
						if (fromItemNames != null) {

							/**
							 * [tAdvancedHash_fromItemNames main ] start
							 */

							currentComponent = "tAdvancedHash_fromItemNames";

							fromItemNamesStruct fromItemNames_HashRow = new fromItemNamesStruct();

							fromItemNames_HashRow.ItemGroupOID = fromItemNames.ItemGroupOID;

							fromItemNames_HashRow.Name = fromItemNames.Name;

							fromItemNames_HashRow.TransText = fromItemNames.TransText;

							fromItemNames_HashRow.dataType = fromItemNames.dataType;

							fromItemNames_HashRow.codeList = fromItemNames.codeList;

							tHash_Lookup_fromItemNames
									.put(fromItemNames_HashRow);

							tos_count_tAdvancedHash_fromItemNames++;

							/**
							 * [tAdvancedHash_fromItemNames main ] stop
							 */

						} // End of branch "fromItemNames"

						/**
						 * [tFileInputDelimited_16 end ] start
						 */

						currentComponent = "tFileInputDelimited_16";

					}
				} finally {
					if (!((Object) (((String) globalMap
							.get("tCreateTemporaryFile_11_FILEPATH"))) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_16 != null) {
							fid_tFileInputDelimited_16.close();
						}
					}
					if (fid_tFileInputDelimited_16 != null) {
						globalMap.put("tFileInputDelimited_16_NB_LINE",
								fid_tFileInputDelimited_16.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_16", true);
				end_Hash.put("tFileInputDelimited_16",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_16 end ] stop
				 */

				/**
				 * [tAdvancedHash_fromItemNames end ] start
				 */

				currentComponent = "tAdvancedHash_fromItemNames";

				tHash_Lookup_fromItemNames.endPut();

				ok_Hash.put("tAdvancedHash_fromItemNames", true);
				end_Hash.put("tAdvancedHash_fromItemNames",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_fromItemNames end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_16_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public java.util.Date Download_Date;

		public java.util.Date getDownload_Date() {
			return this.Download_Date;
		}

		public String source;

		public String getSource() {
			return this.source;
		}

		public String SourceSystemVersion;

		public String getSourceSystemVersion() {
			return this.SourceSystemVersion;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.Download_Date = readDate(dis);

					this.source = readString(dis);

					this.SourceSystemVersion = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.Download_Date, dos);

				// String

				writeString(this.source, dos);

				// String

				writeString(this.SourceSystemVersion, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Download_Date=" + String.valueOf(Download_Date));
			sb.append(",source=" + source);
			sb.append(",SourceSystemVersion=" + SourceSystemVersion);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputXML_17Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputXML_17_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tAdvancedHash_row5 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row5", false);
				start_Hash
						.put("tAdvancedHash_row5", System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row5";

				int tos_count_tAdvancedHash_row5 = 0;

				// connection name:row5
				// source node:tFileInputXML_17 - inputs:(after_tRowGenerator_1)
				// outputs:(row5,row5) | target node:tAdvancedHash_row5 -
				// inputs:(row5) outputs:()
				// linked node: tMap_10 - inputs:(row31,row5) outputs:(out6)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row5Struct> getLookup(matchingModeEnum_row5);

				globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);

				/**
				 * [tAdvancedHash_row5 begin ] stop
				 */

				/**
				 * [tFileInputXML_17 begin ] start
				 */

				ok_Hash.put("tFileInputXML_17", false);
				start_Hash.put("tFileInputXML_17", System.currentTimeMillis());
				currentComponent = "tFileInputXML_17";

				int tos_count_tFileInputXML_17 = 0;

				int nb_line_tFileInputXML_17 = 0;

				class IgnoreDTDEntityResolver_tFileInputXML_17 implements
						org.xml.sax.EntityResolver {

					public org.xml.sax.InputSource resolveEntity(
							String publicId, String systemId)
							throws org.xml.sax.SAXException,
							java.io.IOException {
						return new org.xml.sax.InputSource(
								new java.io.ByteArrayInputStream(
										"<?xml version='1.0' encoding='UTF-8'?>"
												.getBytes()));
					}

				}
				String os_tFileInputXML_17 = System.getProperty("os.name")
						.toLowerCase();
				boolean isWindows_tFileInputXML_17 = false;
				if (os_tFileInputXML_17.indexOf("windows") > -1
						|| os_tFileInputXML_17.indexOf("nt") > -1) {
					isWindows_tFileInputXML_17 = true;
				}
				class NameSpaceTool_tFileInputXML_17 {

					public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

					private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

					public void countNSMap(org.dom4j.Element el) {
						for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
								.declaredNamespaces()) {
							if (ns.getPrefix().trim().length() == 0) {
								xmlNameSpaceMap.put(
										"pre" + defualtNSPath.size(),
										ns.getURI());
								String path = "";
								org.dom4j.Element elTmp = el;
								while (elTmp != null) {
									if (elTmp.getNamespacePrefix() != null
											&& elTmp.getNamespacePrefix()
													.length() > 0) {
										path = "/" + elTmp.getNamespacePrefix()
												+ ":" + elTmp.getName() + path;
									} else {
										path = "/" + elTmp.getName() + path;
									}
									elTmp = elTmp.getParent();
								}
								defualtNSPath.add(path);
							} else {
								xmlNameSpaceMap
										.put(ns.getPrefix(), ns.getURI());
							}

						}
						for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
								.elements()) {
							countNSMap(e);
						}
					}

					public String addDefaultNSPrefix(String path,
							String loopPath) {
						if (defualtNSPath.size() > 0) {
							String fullPath = loopPath;
							if (!path.equals(fullPath)) {
								for (String tmp : path.split("/")) {
									if (("..").equals(tmp)) {
										fullPath = fullPath.substring(0,
												fullPath.lastIndexOf("/"));
									} else {
										fullPath += "/" + tmp;
									}
								}
							}
							int size = fullPath.split("/").length - 1;
							if (size < 0) {
								return fullPath;
							}
							int[] indexs = new int[size];
							java.util.Arrays.fill(indexs, -1);
							int length = 0;
							for (int i = 0; i < defualtNSPath.size(); i++) {
								if (defualtNSPath.get(i).length() > length
										&& fullPath.startsWith(defualtNSPath
												.get(i))) {
									java.util.Arrays.fill(indexs, defualtNSPath
											.get(i).split("/").length - 2,
											indexs.length, i);
									length = defualtNSPath.get(i).length();
								}
							}

							StringBuilder newPath = new StringBuilder();
							String[] pathStrs = path.split("/");
							for (int i = 0; i < pathStrs.length; i++) {
								String tmp = pathStrs[i];
								if (newPath.length() > 0) {
									newPath.append("/");
								}
								if (tmp.length() > 0 && tmp.indexOf(":") == -1
										&& tmp.indexOf(".") == -1 /*
																 * &&
																 * tmp.indexOf
																 * ("@") == -1
																 */) {
									int index = indexs[i + indexs.length
											- pathStrs.length];
									if (index >= 0) {
										// ==== add by wliu to support both
										// filter and functions==
										if (tmp.indexOf("[") > 0
												&& tmp.indexOf("]") > tmp
														.indexOf("[")) {// include
																		// filter
											String tmpStr = replaceElementWithNS(
													tmp, "pre" + index + ":");
											newPath.append(tmpStr);
										} else {
											if (tmp.indexOf("@") != -1
													|| tmp.indexOf("(") < tmp
															.indexOf(")")) { // include
																				// attribute
												newPath.append(tmp);
											} else {
												// ==add end=======
												newPath.append("pre")
														.append(index)
														.append(":")
														.append(tmp);
											}
										}
									} else {
										newPath.append(tmp);
									}
								} else {
									newPath.append(tmp);
								}
							}
							return newPath.toString();
						}
						return path;
					}

					private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
					private java.util.regex.Pattern pattern = java.util.regex.Pattern
							.compile(matches);

					private String replaceElementWithNS(String global,
							String pre) {

						java.util.regex.Matcher match = pattern.matcher(global);
						StringBuffer sb = new StringBuffer();
						match.reset();
						while (match.find()) {
							String group = match.group();
							String tmp = "";
							if (group.toLowerCase().matches(
									"\\b(div|mod|and|or)\\b.*")
									|| group.matches("@.*")) {
								tmp = group;
							} else {
								tmp = tmp + pre + group;
							}
							match.appendReplacement(sb, tmp);
						}
						match.appendTail(sb);

						return sb.toString();
					}

				}

				class XML_API_tFileInputXML_17 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				org.dom4j.io.SAXReader reader_tFileInputXML_17 = new org.dom4j.io.SAXReader();
				reader_tFileInputXML_17
						.setEntityResolver(new IgnoreDTDEntityResolver_tFileInputXML_17());
				Object filename_tFileInputXML_17 = null;
				try {
					filename_tFileInputXML_17 = context.currentFile;
				} catch (java.lang.Exception e) {

					System.err.println(e.getMessage());

				}
				if (filename_tFileInputXML_17 != null
						&& filename_tFileInputXML_17 instanceof String
						&& filename_tFileInputXML_17.toString()
								.startsWith("//")) {
					if (!isWindows_tFileInputXML_17) {
						filename_tFileInputXML_17 = filename_tFileInputXML_17
								.toString().replaceFirst("//", "/");
					}
				}

				boolean isValidFile_tFileInputXML_17 = true;
				org.dom4j.Document doc_tFileInputXML_17 = null;
				java.io.Closeable toClose_tFileInputXML_17 = null;
				try {
					if (filename_tFileInputXML_17 instanceof java.io.InputStream) {
						java.io.InputStream inputStream_tFileInputXML_17 = (java.io.InputStream) filename_tFileInputXML_17;
						toClose_tFileInputXML_17 = inputStream_tFileInputXML_17;
						doc_tFileInputXML_17 = reader_tFileInputXML_17
								.read(inputStream_tFileInputXML_17);
					} else {
						java.io.Reader unicodeReader_tFileInputXML_17 = new UnicodeReader(
								new java.io.FileInputStream(String
										.valueOf(filename_tFileInputXML_17)),
								context.encoding);
						toClose_tFileInputXML_17 = unicodeReader_tFileInputXML_17;
						org.xml.sax.InputSource in_tFileInputXML_17 = new org.xml.sax.InputSource(
								unicodeReader_tFileInputXML_17);
						doc_tFileInputXML_17 = reader_tFileInputXML_17
								.read(in_tFileInputXML_17);
					}
				} catch (java.lang.Exception e) {
					System.err.println(e.getMessage());
					isValidFile_tFileInputXML_17 = false;
				} finally {
					if (toClose_tFileInputXML_17 != null) {
						toClose_tFileInputXML_17.close();
					}
				}
				if (isValidFile_tFileInputXML_17) {
					NameSpaceTool_tFileInputXML_17 nsTool_tFileInputXML_17 = new NameSpaceTool_tFileInputXML_17();
					nsTool_tFileInputXML_17.countNSMap(doc_tFileInputXML_17
							.getRootElement());
					java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_17 = nsTool_tFileInputXML_17.xmlNameSpaceMap;

					org.dom4j.XPath x_tFileInputXML_17 = doc_tFileInputXML_17
							.createXPath(nsTool_tFileInputXML_17
									.addDefaultNSPrefix("/ODM", "/ODM"));
					x_tFileInputXML_17
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_17);

					java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_17 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tFileInputXML_17
							.selectNodes(doc_tFileInputXML_17);
					XML_API_tFileInputXML_17 xml_api_tFileInputXML_17 = new XML_API_tFileInputXML_17();
					String str_tFileInputXML_17 = "";
					org.dom4j.Node node_tFileInputXML_17 = null;

					// init all mapping xpaths
					org.dom4j.XPath xTmp0_tFileInputXML_17 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_17
									.addDefaultNSPrefix("@CreationDateTime",
											"/ODM"));
					xTmp0_tFileInputXML_17
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_17);
					org.dom4j.XPath xTmp1_tFileInputXML_17 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_17
									.addDefaultNSPrefix("@SourceSystem", "/ODM"));
					xTmp1_tFileInputXML_17
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_17);
					org.dom4j.XPath xTmp2_tFileInputXML_17 = org.dom4j.DocumentHelper
							.createXPath(nsTool_tFileInputXML_17
									.addDefaultNSPrefix("@SourceSystemVersion",
											"/ODM"));
					xTmp2_tFileInputXML_17
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_17);

					for (org.dom4j.tree.AbstractNode temp_tFileInputXML_17 : nodeList_tFileInputXML_17) {
						nb_line_tFileInputXML_17++;
						row5 = null;
						row5 = null;
						boolean whetherReject_tFileInputXML_17 = false;
						row5 = new row5Struct();
						try {
							Object obj0_tFileInputXML_17 = xTmp0_tFileInputXML_17
									.evaluate(temp_tFileInputXML_17);
							if (obj0_tFileInputXML_17 == null) {
								node_tFileInputXML_17 = null;
								str_tFileInputXML_17 = "";

							} else if (obj0_tFileInputXML_17 instanceof org.dom4j.Node) {
								node_tFileInputXML_17 = (org.dom4j.Node) obj0_tFileInputXML_17;
								str_tFileInputXML_17 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_17,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj0_tFileInputXML_17 instanceof String
									|| obj0_tFileInputXML_17 instanceof Number) {
								node_tFileInputXML_17 = temp_tFileInputXML_17;
								str_tFileInputXML_17 = String
										.valueOf(obj0_tFileInputXML_17);
							} else if (obj0_tFileInputXML_17 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_17 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_17;
								node_tFileInputXML_17 = nodes_tFileInputXML_17
										.size() > 0 ? nodes_tFileInputXML_17
										.get(0) : null;
								str_tFileInputXML_17 = node_tFileInputXML_17 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_17,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_17
									.isDefNull(node_tFileInputXML_17)) {
								row5.Download_Date = null;
							} else if (xml_api_tFileInputXML_17
									.isEmpty(node_tFileInputXML_17)
									|| xml_api_tFileInputXML_17
											.isMissing(node_tFileInputXML_17)) {
								row5.Download_Date = null;
							} else {
								row5.Download_Date = ParserUtils.parseTo_Date(
										str_tFileInputXML_17, "yyyy-MM-dd");
							}
							Object obj1_tFileInputXML_17 = xTmp1_tFileInputXML_17
									.evaluate(temp_tFileInputXML_17);
							if (obj1_tFileInputXML_17 == null) {
								node_tFileInputXML_17 = null;
								str_tFileInputXML_17 = "";

							} else if (obj1_tFileInputXML_17 instanceof org.dom4j.Node) {
								node_tFileInputXML_17 = (org.dom4j.Node) obj1_tFileInputXML_17;
								str_tFileInputXML_17 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_17,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj1_tFileInputXML_17 instanceof String
									|| obj1_tFileInputXML_17 instanceof Number) {
								node_tFileInputXML_17 = temp_tFileInputXML_17;
								str_tFileInputXML_17 = String
										.valueOf(obj1_tFileInputXML_17);
							} else if (obj1_tFileInputXML_17 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_17 = (java.util.List<org.dom4j.Node>) obj1_tFileInputXML_17;
								node_tFileInputXML_17 = nodes_tFileInputXML_17
										.size() > 0 ? nodes_tFileInputXML_17
										.get(0) : null;
								str_tFileInputXML_17 = node_tFileInputXML_17 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_17,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_17
									.isDefNull(node_tFileInputXML_17)) {
								row5.source = null;
							} else if (xml_api_tFileInputXML_17
									.isEmpty(node_tFileInputXML_17)) {
								row5.source = "";
							} else if (xml_api_tFileInputXML_17
									.isMissing(node_tFileInputXML_17)) {
								row5.source = null;
							} else {
								row5.source = str_tFileInputXML_17;
							}
							Object obj2_tFileInputXML_17 = xTmp2_tFileInputXML_17
									.evaluate(temp_tFileInputXML_17);
							if (obj2_tFileInputXML_17 == null) {
								node_tFileInputXML_17 = null;
								str_tFileInputXML_17 = "";

							} else if (obj2_tFileInputXML_17 instanceof org.dom4j.Node) {
								node_tFileInputXML_17 = (org.dom4j.Node) obj2_tFileInputXML_17;
								str_tFileInputXML_17 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_17,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj2_tFileInputXML_17 instanceof String
									|| obj2_tFileInputXML_17 instanceof Number) {
								node_tFileInputXML_17 = temp_tFileInputXML_17;
								str_tFileInputXML_17 = String
										.valueOf(obj2_tFileInputXML_17);
							} else if (obj2_tFileInputXML_17 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_17 = (java.util.List<org.dom4j.Node>) obj2_tFileInputXML_17;
								node_tFileInputXML_17 = nodes_tFileInputXML_17
										.size() > 0 ? nodes_tFileInputXML_17
										.get(0) : null;
								str_tFileInputXML_17 = node_tFileInputXML_17 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_17,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_17
									.isDefNull(node_tFileInputXML_17)) {
								row5.SourceSystemVersion = null;
							} else if (xml_api_tFileInputXML_17
									.isEmpty(node_tFileInputXML_17)) {
								row5.SourceSystemVersion = "";
							} else if (xml_api_tFileInputXML_17
									.isMissing(node_tFileInputXML_17)) {
								row5.SourceSystemVersion = null;
							} else {
								row5.SourceSystemVersion = str_tFileInputXML_17;
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputXML_17 = true;
							System.err.println(e.getMessage());
							row5 = null;
						}

						/**
						 * [tFileInputXML_17 begin ] stop
						 */
						/**
						 * [tFileInputXML_17 main ] start
						 */

						currentComponent = "tFileInputXML_17";

						tos_count_tFileInputXML_17++;

						/**
						 * [tFileInputXML_17 main ] stop
						 */
						// Start of branch "row5"
						if (row5 != null) {

							/**
							 * [tAdvancedHash_row5 main ] start
							 */

							currentComponent = "tAdvancedHash_row5";

							row5Struct row5_HashRow = new row5Struct();

							row5_HashRow.Download_Date = row5.Download_Date;

							row5_HashRow.source = row5.source;

							row5_HashRow.SourceSystemVersion = row5.SourceSystemVersion;

							tHash_Lookup_row5.put(row5_HashRow);

							tos_count_tAdvancedHash_row5++;

							/**
							 * [tAdvancedHash_row5 main ] stop
							 */

						} // End of branch "row5"

						/**
						 * [tFileInputXML_17 end ] start
						 */

						currentComponent = "tFileInputXML_17";

					}
				}
				globalMap.put("tFileInputXML_17_NB_LINE",
						nb_line_tFileInputXML_17);

				ok_Hash.put("tFileInputXML_17", true);
				end_Hash.put("tFileInputXML_17", System.currentTimeMillis());

				/**
				 * [tFileInputXML_17 end ] stop
				 */

				/**
				 * [tAdvancedHash_row5 end ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				tHash_Lookup_row5.endPut();

				ok_Hash.put("tAdvancedHash_row5", true);
				end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputXML_17_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_3 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_3", false);
				start_Hash.put("tCreateTemporaryFile_3",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_3";

				int tos_count_tCreateTemporaryFile_3 = 0;

				java.io.File dir_tCreateTemporaryFile_3 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_3.mkdirs();
				String name_tCreateTemporaryFile_3 = "talend1_XXXX".replaceAll(
						"XXXX", routines.TalendString.getAsciiRandomString(4)
								.toUpperCase());
				String suffix_tCreateTemporaryFile_3 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_3 = new java.io.File(
						dir_tCreateTemporaryFile_3, name_tCreateTemporaryFile_3
								+ "." + suffix_tCreateTemporaryFile_3);
				if (file_tCreateTemporaryFile_3.createNewFile()) {
					file_tCreateTemporaryFile_3.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_3_FILEPATH",
						file_tCreateTemporaryFile_3.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_3 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_3 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_3";

				tos_count_tCreateTemporaryFile_3++;

				/**
				 * [tCreateTemporaryFile_3 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_3 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_3";

				ok_Hash.put("tCreateTemporaryFile_3", true);
				end_Hash.put("tCreateTemporaryFile_3",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_3:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_4Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tCreateTemporaryFile_3_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_4 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_4", false);
				start_Hash.put("tCreateTemporaryFile_4",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_4";

				int tos_count_tCreateTemporaryFile_4 = 0;

				java.io.File dir_tCreateTemporaryFile_4 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_4.mkdirs();
				String name_tCreateTemporaryFile_4 = "talend2_XXXX".replaceAll(
						"XXXX", routines.TalendString.getAsciiRandomString(4)
								.toUpperCase());
				String suffix_tCreateTemporaryFile_4 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_4 = new java.io.File(
						dir_tCreateTemporaryFile_4, name_tCreateTemporaryFile_4
								+ "." + suffix_tCreateTemporaryFile_4);
				if (file_tCreateTemporaryFile_4.createNewFile()) {
					file_tCreateTemporaryFile_4.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_4_FILEPATH",
						file_tCreateTemporaryFile_4.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_4 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_4 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_4";

				tos_count_tCreateTemporaryFile_4++;

				/**
				 * [tCreateTemporaryFile_4 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_4 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_4";

				ok_Hash.put("tCreateTemporaryFile_4", true);
				end_Hash.put("tCreateTemporaryFile_4",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_4 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_4:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_3Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tCreateTemporaryFile_4_SUBPROCESS_STATE", 1);
	}

	public void tJava_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_3 begin ] start
				 */

				ok_Hash.put("tJava_3", false);
				start_Hash.put("tJava_3", System.currentTimeMillis());
				currentComponent = "tJava_3";

				int tos_count_tJava_3 = 0;

				StatusListener.setSubStatus(5.0f, (int) (5.0f) + "%");

				/**
				 * [tJava_3 begin ] stop
				 */
				/**
				 * [tJava_3 main ] start
				 */

				currentComponent = "tJava_3";

				tos_count_tJava_3++;

				/**
				 * [tJava_3 main ] stop
				 */
				/**
				 * [tJava_3 end ] start
				 */

				currentComponent = "tJava_3";

				ok_Hash.put("tJava_3", true);
				end_Hash.put("tJava_3", System.currentTimeMillis());

				/**
				 * [tJava_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_3:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputXML_29Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String OID;

		public String getOID() {
			return this.OID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String CodeListItem;

		public String getCodeListItem() {
			return this.CodeListItem;
		}

		public String TranslatedText;

		public String getTranslatedText() {
			return this.TranslatedText;
		}

		public String ItemGroupOID;

		public String getItemGroupOID() {
			return this.ItemGroupOID;
		}

		public String Datatype;

		public String getDatatype() {
			return this.Datatype;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.OID = readString(dis);

					this.Name = readString(dis);

					this.CodeListItem = readString(dis);

					this.TranslatedText = readString(dis);

					this.ItemGroupOID = readString(dis);

					this.Datatype = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.OID, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.CodeListItem, dos);

				// String

				writeString(this.TranslatedText, dos);

				// String

				writeString(this.ItemGroupOID, dos);

				// String

				writeString(this.Datatype, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OID=" + OID);
			sb.append(",Name=" + Name);
			sb.append(",CodeListItem=" + CodeListItem);
			sb.append(",TranslatedText=" + TranslatedText);
			sb.append(",ItemGroupOID=" + ItemGroupOID);
			sb.append(",Datatype=" + Datatype);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class codeListStruct implements
			routines.system.IPersistableRow<codeListStruct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String OID;

		public String getOID() {
			return this.OID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String CodeListItem;

		public String getCodeListItem() {
			return this.CodeListItem;
		}

		public String TranslatedText;

		public String getTranslatedText() {
			return this.TranslatedText;
		}

		public String Datatype;

		public String getDatatype() {
			return this.Datatype;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.OID = readString(dis);

					this.Name = readString(dis);

					this.CodeListItem = readString(dis);

					this.TranslatedText = readString(dis);

					this.Datatype = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.OID, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.CodeListItem, dos);

				// String

				writeString(this.TranslatedText, dos);

				// String

				writeString(this.Datatype, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OID=" + OID);
			sb.append(",Name=" + Name);
			sb.append(",CodeListItem=" + CodeListItem);
			sb.append(",TranslatedText=" + TranslatedText);
			sb.append(",Datatype=" + Datatype);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(codeListStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputXML_29Struct implements
			routines.system.IPersistableRow<after_tFileInputXML_29Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String OID;

		public String getOID() {
			return this.OID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String CodeListItem;

		public String getCodeListItem() {
			return this.CodeListItem;
		}

		public String TranslatedText;

		public String getTranslatedText() {
			return this.TranslatedText;
		}

		public String Datatype;

		public String getDatatype() {
			return this.Datatype;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.OID = readString(dis);

					this.Name = readString(dis);

					this.CodeListItem = readString(dis);

					this.TranslatedText = readString(dis);

					this.Datatype = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.OID, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.CodeListItem, dos);

				// String

				writeString(this.TranslatedText, dos);

				// String

				writeString(this.Datatype, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OID=" + OID);
			sb.append(",Name=" + Name);
			sb.append(",CodeListItem=" + CodeListItem);
			sb.append(",TranslatedText=" + TranslatedText);
			sb.append(",Datatype=" + Datatype);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputXML_29Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputXML_29Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputXML_29_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputXML_10Process(globalMap);

				codeListStruct codeList = new codeListStruct();
				out1Struct out1 = new out1Struct();

				/**
				 * [tFileOutputDelimited_34 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_34", false);
				start_Hash.put("tFileOutputDelimited_34",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_34";

				int tos_count_tFileOutputDelimited_34 = 0;

				String fileName_tFileOutputDelimited_34 = "";
				fileName_tFileOutputDelimited_34 = (new java.io.File(
						context.folderMain + context.folderOutput
								+ "codelist.csv")).getAbsolutePath().replace(
						"\\", "/");
				String fullName_tFileOutputDelimited_34 = null;
				String extension_tFileOutputDelimited_34 = null;
				String directory_tFileOutputDelimited_34 = null;
				if ((fileName_tFileOutputDelimited_34.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_34.lastIndexOf(".") < fileName_tFileOutputDelimited_34
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_34 = fileName_tFileOutputDelimited_34;
						extension_tFileOutputDelimited_34 = "";
					} else {
						fullName_tFileOutputDelimited_34 = fileName_tFileOutputDelimited_34
								.substring(0, fileName_tFileOutputDelimited_34
										.lastIndexOf("."));
						extension_tFileOutputDelimited_34 = fileName_tFileOutputDelimited_34
								.substring(fileName_tFileOutputDelimited_34
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_34 = fileName_tFileOutputDelimited_34
							.substring(0, fileName_tFileOutputDelimited_34
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_34.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_34 = fileName_tFileOutputDelimited_34
								.substring(0, fileName_tFileOutputDelimited_34
										.lastIndexOf("."));
						extension_tFileOutputDelimited_34 = fileName_tFileOutputDelimited_34
								.substring(fileName_tFileOutputDelimited_34
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_34 = fileName_tFileOutputDelimited_34;
						extension_tFileOutputDelimited_34 = "";
					}
					directory_tFileOutputDelimited_34 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_34 = true;
				java.io.File filetFileOutputDelimited_34 = new java.io.File(
						fileName_tFileOutputDelimited_34);
				globalMap.put("tFileOutputDelimited_34_FILE_NAME",
						fileName_tFileOutputDelimited_34);

				int nb_line_tFileOutputDelimited_34 = 0;
				int splitEvery_tFileOutputDelimited_34 = 1000;
				int splitedFileNo_tFileOutputDelimited_34 = 0;
				int currentRow_tFileOutputDelimited_34 = 0;

				final String OUT_DELIM_tFileOutputDelimited_34 = /**
				 * Start field
				 * tFileOutputDelimited_34:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_34:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_34 = /**
				 * Start
				 * field tFileOutputDelimited_34:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_34:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_34 != null
						&& directory_tFileOutputDelimited_34.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_34 = new java.io.File(
							directory_tFileOutputDelimited_34);
					if (!dir_tFileOutputDelimited_34.exists()) {
						dir_tFileOutputDelimited_34.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_34 = null;
				try {
					outtFileOutputDelimited_34 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_34,
											false), "ISO-8859-15"));

					/**
					 * [tFileOutputDelimited_34 begin ] stop
					 */

					/**
					 * [tMap_39 begin ] start
					 */

					ok_Hash.put("tMap_39", false);
					start_Hash.put("tMap_39", System.currentTimeMillis());
					currentComponent = "tMap_39";

					int tos_count_tMap_39 = 0;

					// ###############################
					// # Lookup's keys initialization

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<outasdStruct> tHash_Lookup_outasd = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<outasdStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<outasdStruct>) globalMap
							.get("tHash_Lookup_outasd"));

					outasdStruct outasdHashKey = new outasdStruct();
					outasdStruct outasdDefault = new outasdStruct();
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_39__Struct {
					}
					Var__tMap_39__Struct Var__tMap_39 = new Var__tMap_39__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					out1Struct out1_tmp = new out1Struct();
					// ###############################

					/**
					 * [tMap_39 begin ] stop
					 */

					/**
					 * [tFileInputXML_29 begin ] start
					 */

					ok_Hash.put("tFileInputXML_29", false);
					start_Hash.put("tFileInputXML_29",
							System.currentTimeMillis());
					currentComponent = "tFileInputXML_29";

					int tos_count_tFileInputXML_29 = 0;

					int nb_line_tFileInputXML_29 = 0;

					class IgnoreDTDEntityResolver_tFileInputXML_29 implements
							org.xml.sax.EntityResolver {

						public org.xml.sax.InputSource resolveEntity(
								String publicId, String systemId)
								throws org.xml.sax.SAXException,
								java.io.IOException {
							return new org.xml.sax.InputSource(
									new java.io.ByteArrayInputStream(
											"<?xml version='1.0' encoding='UTF-8'?>"
													.getBytes()));
						}

					}
					String os_tFileInputXML_29 = System.getProperty("os.name")
							.toLowerCase();
					boolean isWindows_tFileInputXML_29 = false;
					if (os_tFileInputXML_29.indexOf("windows") > -1
							|| os_tFileInputXML_29.indexOf("nt") > -1) {
						isWindows_tFileInputXML_29 = true;
					}
					class NameSpaceTool_tFileInputXML_29 {

						public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

						private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

						public void countNSMap(org.dom4j.Element el) {
							for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
									.declaredNamespaces()) {
								if (ns.getPrefix().trim().length() == 0) {
									xmlNameSpaceMap.put(
											"pre" + defualtNSPath.size(),
											ns.getURI());
									String path = "";
									org.dom4j.Element elTmp = el;
									while (elTmp != null) {
										if (elTmp.getNamespacePrefix() != null
												&& elTmp.getNamespacePrefix()
														.length() > 0) {
											path = "/"
													+ elTmp.getNamespacePrefix()
													+ ":" + elTmp.getName()
													+ path;
										} else {
											path = "/" + elTmp.getName() + path;
										}
										elTmp = elTmp.getParent();
									}
									defualtNSPath.add(path);
								} else {
									xmlNameSpaceMap.put(ns.getPrefix(),
											ns.getURI());
								}

							}
							for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
									.elements()) {
								countNSMap(e);
							}
						}

						public String addDefaultNSPrefix(String path,
								String loopPath) {
							if (defualtNSPath.size() > 0) {
								String fullPath = loopPath;
								if (!path.equals(fullPath)) {
									for (String tmp : path.split("/")) {
										if (("..").equals(tmp)) {
											fullPath = fullPath.substring(0,
													fullPath.lastIndexOf("/"));
										} else {
											fullPath += "/" + tmp;
										}
									}
								}
								int size = fullPath.split("/").length - 1;
								if (size < 0) {
									return fullPath;
								}
								int[] indexs = new int[size];
								java.util.Arrays.fill(indexs, -1);
								int length = 0;
								for (int i = 0; i < defualtNSPath.size(); i++) {
									if (defualtNSPath.get(i).length() > length
											&& fullPath
													.startsWith(defualtNSPath
															.get(i))) {
										java.util.Arrays
												.fill(indexs,
														defualtNSPath.get(i)
																.split("/").length - 2,
														indexs.length, i);
										length = defualtNSPath.get(i).length();
									}
								}

								StringBuilder newPath = new StringBuilder();
								String[] pathStrs = path.split("/");
								for (int i = 0; i < pathStrs.length; i++) {
									String tmp = pathStrs[i];
									if (newPath.length() > 0) {
										newPath.append("/");
									}
									if (tmp.length() > 0
											&& tmp.indexOf(":") == -1
											&& tmp.indexOf(".") == -1 /*
																	 * &&
																	 * tmp.indexOf
																	 * ("@") ==
																	 * -1
																	 */) {
										int index = indexs[i + indexs.length
												- pathStrs.length];
										if (index >= 0) {
											// ==== add by wliu to support both
											// filter and functions==
											if (tmp.indexOf("[") > 0
													&& tmp.indexOf("]") > tmp
															.indexOf("[")) {// include
																			// filter
												String tmpStr = replaceElementWithNS(
														tmp, "pre" + index
																+ ":");
												newPath.append(tmpStr);
											} else {
												if (tmp.indexOf("@") != -1
														|| tmp.indexOf("(") < tmp
																.indexOf(")")) { // include
																					// attribute
													newPath.append(tmp);
												} else {
													// ==add end=======
													newPath.append("pre")
															.append(index)
															.append(":")
															.append(tmp);
												}
											}
										} else {
											newPath.append(tmp);
										}
									} else {
										newPath.append(tmp);
									}
								}
								return newPath.toString();
							}
							return path;
						}

						private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
						private java.util.regex.Pattern pattern = java.util.regex.Pattern
								.compile(matches);

						private String replaceElementWithNS(String global,
								String pre) {

							java.util.regex.Matcher match = pattern
									.matcher(global);
							StringBuffer sb = new StringBuffer();
							match.reset();
							while (match.find()) {
								String group = match.group();
								String tmp = "";
								if (group.toLowerCase().matches(
										"\\b(div|mod|and|or)\\b.*")
										|| group.matches("@.*")) {
									tmp = group;
								} else {
									tmp = tmp + pre + group;
								}
								match.appendReplacement(sb, tmp);
							}
							match.appendTail(sb);

							return sb.toString();
						}

					}

					class XML_API_tFileInputXML_29 {
						public boolean isDefNull(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							if (node != null
									&& node instanceof org.dom4j.Element) {
								org.dom4j.Attribute attri = ((org.dom4j.Element) node)
										.attribute("nil");
								if (attri != null
										&& ("true").equals(attri.getText())) {
									return true;
								}
							}
							return false;
						}

						public boolean isMissing(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							return node == null ? true : false;
						}

						public boolean isEmpty(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							if (node != null) {
								return node.getText().length() == 0;
							}
							return false;
						}
					}

					org.dom4j.io.SAXReader reader_tFileInputXML_29 = new org.dom4j.io.SAXReader();
					reader_tFileInputXML_29
							.setEntityResolver(new IgnoreDTDEntityResolver_tFileInputXML_29());
					Object filename_tFileInputXML_29 = null;
					try {
						filename_tFileInputXML_29 = context.currentFile;
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}
					if (filename_tFileInputXML_29 != null
							&& filename_tFileInputXML_29 instanceof String
							&& filename_tFileInputXML_29.toString().startsWith(
									"//")) {
						if (!isWindows_tFileInputXML_29) {
							filename_tFileInputXML_29 = filename_tFileInputXML_29
									.toString().replaceFirst("//", "/");
						}
					}

					boolean isValidFile_tFileInputXML_29 = true;
					org.dom4j.Document doc_tFileInputXML_29 = null;
					java.io.Closeable toClose_tFileInputXML_29 = null;
					try {
						if (filename_tFileInputXML_29 instanceof java.io.InputStream) {
							java.io.InputStream inputStream_tFileInputXML_29 = (java.io.InputStream) filename_tFileInputXML_29;
							toClose_tFileInputXML_29 = inputStream_tFileInputXML_29;
							doc_tFileInputXML_29 = reader_tFileInputXML_29
									.read(inputStream_tFileInputXML_29);
						} else {
							java.io.Reader unicodeReader_tFileInputXML_29 = new UnicodeReader(
									new java.io.FileInputStream(String
											.valueOf(filename_tFileInputXML_29)),
									context.encoding);
							toClose_tFileInputXML_29 = unicodeReader_tFileInputXML_29;
							org.xml.sax.InputSource in_tFileInputXML_29 = new org.xml.sax.InputSource(
									unicodeReader_tFileInputXML_29);
							doc_tFileInputXML_29 = reader_tFileInputXML_29
									.read(in_tFileInputXML_29);
						}
					} catch (java.lang.Exception e) {
						System.err.println(e.getMessage());
						isValidFile_tFileInputXML_29 = false;
					} finally {
						if (toClose_tFileInputXML_29 != null) {
							toClose_tFileInputXML_29.close();
						}
					}
					if (isValidFile_tFileInputXML_29) {
						NameSpaceTool_tFileInputXML_29 nsTool_tFileInputXML_29 = new NameSpaceTool_tFileInputXML_29();
						nsTool_tFileInputXML_29.countNSMap(doc_tFileInputXML_29
								.getRootElement());
						java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_29 = nsTool_tFileInputXML_29.xmlNameSpaceMap;

						org.dom4j.XPath x_tFileInputXML_29 = doc_tFileInputXML_29
								.createXPath(nsTool_tFileInputXML_29
										.addDefaultNSPrefix(
												"/ODM/Study/MetaDataVersion/CodeList/CodeListItem",
												"/ODM/Study/MetaDataVersion/CodeList/CodeListItem"));
						x_tFileInputXML_29
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_29);

						java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_29 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tFileInputXML_29
								.selectNodes(doc_tFileInputXML_29);
						XML_API_tFileInputXML_29 xml_api_tFileInputXML_29 = new XML_API_tFileInputXML_29();
						String str_tFileInputXML_29 = "";
						org.dom4j.Node node_tFileInputXML_29 = null;

						// init all mapping xpaths
						org.dom4j.XPath xTmp0_tFileInputXML_29 = org.dom4j.DocumentHelper
								.createXPath(nsTool_tFileInputXML_29
										.addDefaultNSPrefix("../@OID",
												"/ODM/Study/MetaDataVersion/CodeList/CodeListItem"));
						xTmp0_tFileInputXML_29
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_29);
						org.dom4j.XPath xTmp1_tFileInputXML_29 = org.dom4j.DocumentHelper
								.createXPath(nsTool_tFileInputXML_29
										.addDefaultNSPrefix("../@Name",
												"/ODM/Study/MetaDataVersion/CodeList/CodeListItem"));
						xTmp1_tFileInputXML_29
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_29);
						org.dom4j.XPath xTmp2_tFileInputXML_29 = org.dom4j.DocumentHelper
								.createXPath(nsTool_tFileInputXML_29
										.addDefaultNSPrefix("@CodedValue",
												"/ODM/Study/MetaDataVersion/CodeList/CodeListItem"));
						xTmp2_tFileInputXML_29
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_29);
						org.dom4j.XPath xTmp3_tFileInputXML_29 = org.dom4j.DocumentHelper
								.createXPath(nsTool_tFileInputXML_29
										.addDefaultNSPrefix(
												"/Decode/TranslatedText",
												"/ODM/Study/MetaDataVersion/CodeList/CodeListItem"));
						xTmp3_tFileInputXML_29
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_29);
						org.dom4j.XPath xTmp4_tFileInputXML_29 = org.dom4j.DocumentHelper
								.createXPath(nsTool_tFileInputXML_29
										.addDefaultNSPrefix("../@DataType",
												"/ODM/Study/MetaDataVersion/CodeList/CodeListItem"));
						xTmp4_tFileInputXML_29
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_29);

						for (org.dom4j.tree.AbstractNode temp_tFileInputXML_29 : nodeList_tFileInputXML_29) {
							nb_line_tFileInputXML_29++;
							codeList = null;
							boolean whetherReject_tFileInputXML_29 = false;
							codeList = new codeListStruct();
							try {
								Object obj0_tFileInputXML_29 = xTmp0_tFileInputXML_29
										.evaluate(temp_tFileInputXML_29);
								if (obj0_tFileInputXML_29 == null) {
									node_tFileInputXML_29 = null;
									str_tFileInputXML_29 = "";

								} else if (obj0_tFileInputXML_29 instanceof org.dom4j.Node) {
									node_tFileInputXML_29 = (org.dom4j.Node) obj0_tFileInputXML_29;
									str_tFileInputXML_29 = org.jaxen.function.StringFunction
											.evaluate(
													node_tFileInputXML_29,
													org.jaxen.dom4j.DocumentNavigator
															.getInstance());
								} else if (obj0_tFileInputXML_29 instanceof String
										|| obj0_tFileInputXML_29 instanceof Number) {
									node_tFileInputXML_29 = temp_tFileInputXML_29;
									str_tFileInputXML_29 = String
											.valueOf(obj0_tFileInputXML_29);
								} else if (obj0_tFileInputXML_29 instanceof java.util.List) {
									java.util.List<org.dom4j.Node> nodes_tFileInputXML_29 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_29;
									node_tFileInputXML_29 = nodes_tFileInputXML_29
											.size() > 0 ? nodes_tFileInputXML_29
											.get(0) : null;
									str_tFileInputXML_29 = node_tFileInputXML_29 == null ? ""
											: org.jaxen.function.StringFunction
													.evaluate(
															node_tFileInputXML_29,
															org.jaxen.dom4j.DocumentNavigator
																	.getInstance());
								}
								if (xml_api_tFileInputXML_29
										.isDefNull(node_tFileInputXML_29)) {
									codeList.OID = null;
								} else if (xml_api_tFileInputXML_29
										.isEmpty(node_tFileInputXML_29)) {
									codeList.OID = "";
								} else if (xml_api_tFileInputXML_29
										.isMissing(node_tFileInputXML_29)) {
									codeList.OID = null;
								} else {
									codeList.OID = str_tFileInputXML_29;
								}
								Object obj1_tFileInputXML_29 = xTmp1_tFileInputXML_29
										.evaluate(temp_tFileInputXML_29);
								if (obj1_tFileInputXML_29 == null) {
									node_tFileInputXML_29 = null;
									str_tFileInputXML_29 = "";

								} else if (obj1_tFileInputXML_29 instanceof org.dom4j.Node) {
									node_tFileInputXML_29 = (org.dom4j.Node) obj1_tFileInputXML_29;
									str_tFileInputXML_29 = org.jaxen.function.StringFunction
											.evaluate(
													node_tFileInputXML_29,
													org.jaxen.dom4j.DocumentNavigator
															.getInstance());
								} else if (obj1_tFileInputXML_29 instanceof String
										|| obj1_tFileInputXML_29 instanceof Number) {
									node_tFileInputXML_29 = temp_tFileInputXML_29;
									str_tFileInputXML_29 = String
											.valueOf(obj1_tFileInputXML_29);
								} else if (obj1_tFileInputXML_29 instanceof java.util.List) {
									java.util.List<org.dom4j.Node> nodes_tFileInputXML_29 = (java.util.List<org.dom4j.Node>) obj1_tFileInputXML_29;
									node_tFileInputXML_29 = nodes_tFileInputXML_29
											.size() > 0 ? nodes_tFileInputXML_29
											.get(0) : null;
									str_tFileInputXML_29 = node_tFileInputXML_29 == null ? ""
											: org.jaxen.function.StringFunction
													.evaluate(
															node_tFileInputXML_29,
															org.jaxen.dom4j.DocumentNavigator
																	.getInstance());
								}
								if (xml_api_tFileInputXML_29
										.isDefNull(node_tFileInputXML_29)) {
									codeList.Name = null;
								} else if (xml_api_tFileInputXML_29
										.isEmpty(node_tFileInputXML_29)) {
									codeList.Name = "";
								} else if (xml_api_tFileInputXML_29
										.isMissing(node_tFileInputXML_29)) {
									codeList.Name = null;
								} else {
									codeList.Name = str_tFileInputXML_29;
								}
								Object obj2_tFileInputXML_29 = xTmp2_tFileInputXML_29
										.evaluate(temp_tFileInputXML_29);
								if (obj2_tFileInputXML_29 == null) {
									node_tFileInputXML_29 = null;
									str_tFileInputXML_29 = "";

								} else if (obj2_tFileInputXML_29 instanceof org.dom4j.Node) {
									node_tFileInputXML_29 = (org.dom4j.Node) obj2_tFileInputXML_29;
									str_tFileInputXML_29 = org.jaxen.function.StringFunction
											.evaluate(
													node_tFileInputXML_29,
													org.jaxen.dom4j.DocumentNavigator
															.getInstance());
								} else if (obj2_tFileInputXML_29 instanceof String
										|| obj2_tFileInputXML_29 instanceof Number) {
									node_tFileInputXML_29 = temp_tFileInputXML_29;
									str_tFileInputXML_29 = String
											.valueOf(obj2_tFileInputXML_29);
								} else if (obj2_tFileInputXML_29 instanceof java.util.List) {
									java.util.List<org.dom4j.Node> nodes_tFileInputXML_29 = (java.util.List<org.dom4j.Node>) obj2_tFileInputXML_29;
									node_tFileInputXML_29 = nodes_tFileInputXML_29
											.size() > 0 ? nodes_tFileInputXML_29
											.get(0) : null;
									str_tFileInputXML_29 = node_tFileInputXML_29 == null ? ""
											: org.jaxen.function.StringFunction
													.evaluate(
															node_tFileInputXML_29,
															org.jaxen.dom4j.DocumentNavigator
																	.getInstance());
								}
								if (xml_api_tFileInputXML_29
										.isDefNull(node_tFileInputXML_29)) {
									codeList.CodeListItem = null;
								} else if (xml_api_tFileInputXML_29
										.isEmpty(node_tFileInputXML_29)) {
									codeList.CodeListItem = "";
								} else if (xml_api_tFileInputXML_29
										.isMissing(node_tFileInputXML_29)) {
									codeList.CodeListItem = null;
								} else {
									codeList.CodeListItem = str_tFileInputXML_29;
								}
								Object obj3_tFileInputXML_29 = xTmp3_tFileInputXML_29
										.evaluate(temp_tFileInputXML_29);
								if (obj3_tFileInputXML_29 == null) {
									node_tFileInputXML_29 = null;
									str_tFileInputXML_29 = "";

								} else if (obj3_tFileInputXML_29 instanceof org.dom4j.Node) {
									node_tFileInputXML_29 = (org.dom4j.Node) obj3_tFileInputXML_29;
									str_tFileInputXML_29 = org.jaxen.function.StringFunction
											.evaluate(
													node_tFileInputXML_29,
													org.jaxen.dom4j.DocumentNavigator
															.getInstance());
								} else if (obj3_tFileInputXML_29 instanceof String
										|| obj3_tFileInputXML_29 instanceof Number) {
									node_tFileInputXML_29 = temp_tFileInputXML_29;
									str_tFileInputXML_29 = String
											.valueOf(obj3_tFileInputXML_29);
								} else if (obj3_tFileInputXML_29 instanceof java.util.List) {
									java.util.List<org.dom4j.Node> nodes_tFileInputXML_29 = (java.util.List<org.dom4j.Node>) obj3_tFileInputXML_29;
									node_tFileInputXML_29 = nodes_tFileInputXML_29
											.size() > 0 ? nodes_tFileInputXML_29
											.get(0) : null;
									str_tFileInputXML_29 = node_tFileInputXML_29 == null ? ""
											: org.jaxen.function.StringFunction
													.evaluate(
															node_tFileInputXML_29,
															org.jaxen.dom4j.DocumentNavigator
																	.getInstance());
								}
								if (xml_api_tFileInputXML_29
										.isDefNull(node_tFileInputXML_29)) {
									codeList.TranslatedText = null;
								} else if (xml_api_tFileInputXML_29
										.isEmpty(node_tFileInputXML_29)) {
									codeList.TranslatedText = "";
								} else if (xml_api_tFileInputXML_29
										.isMissing(node_tFileInputXML_29)) {
									codeList.TranslatedText = null;
								} else {
									codeList.TranslatedText = str_tFileInputXML_29;
								}
								Object obj4_tFileInputXML_29 = xTmp4_tFileInputXML_29
										.evaluate(temp_tFileInputXML_29);
								if (obj4_tFileInputXML_29 == null) {
									node_tFileInputXML_29 = null;
									str_tFileInputXML_29 = "";

								} else if (obj4_tFileInputXML_29 instanceof org.dom4j.Node) {
									node_tFileInputXML_29 = (org.dom4j.Node) obj4_tFileInputXML_29;
									str_tFileInputXML_29 = org.jaxen.function.StringFunction
											.evaluate(
													node_tFileInputXML_29,
													org.jaxen.dom4j.DocumentNavigator
															.getInstance());
								} else if (obj4_tFileInputXML_29 instanceof String
										|| obj4_tFileInputXML_29 instanceof Number) {
									node_tFileInputXML_29 = temp_tFileInputXML_29;
									str_tFileInputXML_29 = String
											.valueOf(obj4_tFileInputXML_29);
								} else if (obj4_tFileInputXML_29 instanceof java.util.List) {
									java.util.List<org.dom4j.Node> nodes_tFileInputXML_29 = (java.util.List<org.dom4j.Node>) obj4_tFileInputXML_29;
									node_tFileInputXML_29 = nodes_tFileInputXML_29
											.size() > 0 ? nodes_tFileInputXML_29
											.get(0) : null;
									str_tFileInputXML_29 = node_tFileInputXML_29 == null ? ""
											: org.jaxen.function.StringFunction
													.evaluate(
															node_tFileInputXML_29,
															org.jaxen.dom4j.DocumentNavigator
																	.getInstance());
								}
								if (xml_api_tFileInputXML_29
										.isDefNull(node_tFileInputXML_29)) {
									codeList.Datatype = null;
								} else if (xml_api_tFileInputXML_29
										.isEmpty(node_tFileInputXML_29)) {
									codeList.Datatype = "";
								} else if (xml_api_tFileInputXML_29
										.isMissing(node_tFileInputXML_29)) {
									codeList.Datatype = null;
								} else {
									codeList.Datatype = str_tFileInputXML_29;
								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputXML_29 = true;
								System.err.println(e.getMessage());
								codeList = null;
							}

							/**
							 * [tFileInputXML_29 begin ] stop
							 */
							/**
							 * [tFileInputXML_29 main ] start
							 */

							currentComponent = "tFileInputXML_29";

							tos_count_tFileInputXML_29++;

							/**
							 * [tFileInputXML_29 main ] stop
							 */
							// Start of branch "codeList"
							if (codeList != null) {

								/**
								 * [tMap_39 main ] start
								 */

								currentComponent = "tMap_39";

								boolean hasCasePrimitiveKeyWithNull_tMap_39 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_39 = false;
								boolean mainRowRejected_tMap_39 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "outasd"
								// /////////////////////////////////////////////

								boolean forceLoopoutasd = false;

								outasdStruct outasdObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_39) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_39 = false;

									outasdHashKey.codeList = codeList.OID;

									outasdHashKey.hashCodeDirty = true;

									tHash_Lookup_outasd.lookup(outasdHashKey);

								} // G_TM_M_020

								if (tHash_Lookup_outasd != null
										&& tHash_Lookup_outasd
												.getCount(outasdHashKey) > 1) { // G
																				// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'outasd' and it contains more one result from keys :  outasd.codeList = '"
									// + outasdHashKey.codeList + "'");
								} // G 071

								outasdStruct outasd = null;

								outasdStruct fromLookup_outasd = null;
								outasd = outasdDefault;

								if (tHash_Lookup_outasd != null
										&& tHash_Lookup_outasd.hasNext()) { // G
																			// 099

									fromLookup_outasd = tHash_Lookup_outasd
											.next();

								} // G 099

								if (fromLookup_outasd != null) {
									outasd = fromLookup_outasd;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_39__Struct Var = Var__tMap_39;// ###############################
									// ###############################
									// # Output tables

									out1 = null;

									// # Output table : 'out1'
									// # Filter conditions
									if (

									outasd.ItemGroupOID != null

									) {
										out1_tmp.OID = codeList.OID;
										out1_tmp.Name = codeList.Name;
										out1_tmp.CodeListItem = codeList.CodeListItem;
										out1_tmp.TranslatedText = codeList.TranslatedText;
										out1_tmp.ItemGroupOID = outasd.ItemGroupOID;
										out1_tmp.Datatype = codeList.Datatype;
										out1 = out1_tmp;
									} // closing filter/reject
										// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_39 = false;

								tos_count_tMap_39++;

								/**
								 * [tMap_39 main ] stop
								 */
								// Start of branch "out1"
								if (out1 != null) {

									/**
									 * [tFileOutputDelimited_34 main ] start
									 */

									currentComponent = "tFileOutputDelimited_34";

									StringBuilder sb_tFileOutputDelimited_34 = new StringBuilder();

									if (out1.OID != null) {

										sb_tFileOutputDelimited_34.append(

										out1.OID

										);

									}

									sb_tFileOutputDelimited_34
											.append(OUT_DELIM_tFileOutputDelimited_34);

									if (out1.Name != null) {

										sb_tFileOutputDelimited_34.append(

										out1.Name

										);

									}

									sb_tFileOutputDelimited_34
											.append(OUT_DELIM_tFileOutputDelimited_34);

									if (out1.CodeListItem != null) {

										sb_tFileOutputDelimited_34.append(

										out1.CodeListItem

										);

									}

									sb_tFileOutputDelimited_34
											.append(OUT_DELIM_tFileOutputDelimited_34);

									if (out1.TranslatedText != null) {

										sb_tFileOutputDelimited_34.append(

										out1.TranslatedText

										);

									}

									sb_tFileOutputDelimited_34
											.append(OUT_DELIM_tFileOutputDelimited_34);

									if (out1.ItemGroupOID != null) {

										sb_tFileOutputDelimited_34.append(

										out1.ItemGroupOID

										);

									}

									sb_tFileOutputDelimited_34
											.append(OUT_DELIM_tFileOutputDelimited_34);

									if (out1.Datatype != null) {

										sb_tFileOutputDelimited_34.append(

										out1.Datatype

										);

									}

									sb_tFileOutputDelimited_34
											.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_34);

									nb_line_tFileOutputDelimited_34++;

									outtFileOutputDelimited_34
											.write(sb_tFileOutputDelimited_34
													.toString());

									tos_count_tFileOutputDelimited_34++;

									/**
									 * [tFileOutputDelimited_34 main ] stop
									 */

								} // End of branch "out1"

							} // End of branch "codeList"

							/**
							 * [tFileInputXML_29 end ] start
							 */

							currentComponent = "tFileInputXML_29";

						}
					}
					globalMap.put("tFileInputXML_29_NB_LINE",
							nb_line_tFileInputXML_29);

					ok_Hash.put("tFileInputXML_29", true);
					end_Hash.put("tFileInputXML_29", System.currentTimeMillis());

					/**
					 * [tFileInputXML_29 end ] stop
					 */

					/**
					 * [tMap_39 end ] start
					 */

					currentComponent = "tMap_39";

					// ###############################
					// # Lookup hashes releasing
					if (tHash_Lookup_outasd != null) {
						tHash_Lookup_outasd.endGet();
					}
					globalMap.remove("tHash_Lookup_outasd");

					// ###############################

					ok_Hash.put("tMap_39", true);
					end_Hash.put("tMap_39", System.currentTimeMillis());

					/**
					 * [tMap_39 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_34 end ] start
					 */

					currentComponent = "tFileOutputDelimited_34";

				} finally {
					if (outtFileOutputDelimited_34 != null) {
						outtFileOutputDelimited_34.flush();
						outtFileOutputDelimited_34.close();
					}
					globalMap.put("tFileOutputDelimited_34_NB_LINE",
							nb_line_tFileOutputDelimited_34);
					globalMap.put("tFileOutputDelimited_34_FILE_NAME",
							fileName_tFileOutputDelimited_34);
				} // finally

				ok_Hash.put("tFileOutputDelimited_34", true);
				end_Hash.put("tFileOutputDelimited_34",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_34 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputXML_29:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_4Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		} finally {
			// free memory for "tMap_39"
			globalMap.remove("tHash_Lookup_outasd");

		}

		globalMap.put("tFileInputXML_29_SUBPROCESS_STATE", 1);
	}

	public void tJava_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_4 begin ] start
				 */

				ok_Hash.put("tJava_4", false);
				start_Hash.put("tJava_4", System.currentTimeMillis());
				currentComponent = "tJava_4";

				int tos_count_tJava_4 = 0;

				StatusListener.setSubStatus(25.0f, (int) (25.0f) + "%");

				/**
				 * [tJava_4 begin ] stop
				 */
				/**
				 * [tJava_4 main ] start
				 */

				currentComponent = "tJava_4";

				tos_count_tJava_4++;

				/**
				 * [tJava_4 main ] stop
				 */
				/**
				 * [tJava_4 end ] start
				 */

				currentComponent = "tJava_4";

				ok_Hash.put("tJava_4", true);
				end_Hash.put("tJava_4", System.currentTimeMillis());

				/**
				 * [tJava_4 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_4:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputXML_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_5 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_5", false);
				start_Hash.put("tCreateTemporaryFile_5",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_5";

				int tos_count_tCreateTemporaryFile_5 = 0;

				java.io.File dir_tCreateTemporaryFile_5 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_5.mkdirs();
				String name_tCreateTemporaryFile_5 = "temp3_XXXX".replaceAll(
						"XXXX", routines.TalendString.getAsciiRandomString(4)
								.toUpperCase());
				String suffix_tCreateTemporaryFile_5 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_5 = new java.io.File(
						dir_tCreateTemporaryFile_5, name_tCreateTemporaryFile_5
								+ "." + suffix_tCreateTemporaryFile_5);
				if (file_tCreateTemporaryFile_5.createNewFile()) {
					file_tCreateTemporaryFile_5.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_5_FILEPATH",
						file_tCreateTemporaryFile_5.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_5 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_5 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_5";

				tos_count_tCreateTemporaryFile_5++;

				/**
				 * [tCreateTemporaryFile_5 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_5 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_5";

				ok_Hash.put("tCreateTemporaryFile_5", true);
				end_Hash.put("tCreateTemporaryFile_5",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_5 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_5:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_6Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tCreateTemporaryFile_5_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_6 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_6", false);
				start_Hash.put("tCreateTemporaryFile_6",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_6";

				int tos_count_tCreateTemporaryFile_6 = 0;

				java.io.File dir_tCreateTemporaryFile_6 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_6.mkdirs();
				String name_tCreateTemporaryFile_6 = "talend4_XXXX".replaceAll(
						"XXXX", routines.TalendString.getAsciiRandomString(4)
								.toUpperCase());
				String suffix_tCreateTemporaryFile_6 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_6 = new java.io.File(
						dir_tCreateTemporaryFile_6, name_tCreateTemporaryFile_6
								+ "." + suffix_tCreateTemporaryFile_6);
				if (file_tCreateTemporaryFile_6.createNewFile()) {
					file_tCreateTemporaryFile_6.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_6_FILEPATH",
						file_tCreateTemporaryFile_6.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_6 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_6 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_6";

				tos_count_tCreateTemporaryFile_6++;

				/**
				 * [tCreateTemporaryFile_6 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_6 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_6";

				ok_Hash.put("tCreateTemporaryFile_6", true);
				end_Hash.put("tCreateTemporaryFile_6",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_6 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_6:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_7Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tCreateTemporaryFile_6_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_7 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_7", false);
				start_Hash.put("tCreateTemporaryFile_7",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_7";

				int tos_count_tCreateTemporaryFile_7 = 0;

				java.io.File dir_tCreateTemporaryFile_7 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_7.mkdirs();
				String name_tCreateTemporaryFile_7 = "talend5_XXXX".replaceAll(
						"XXXX", routines.TalendString.getAsciiRandomString(4)
								.toUpperCase());
				String suffix_tCreateTemporaryFile_7 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_7 = new java.io.File(
						dir_tCreateTemporaryFile_7, name_tCreateTemporaryFile_7
								+ "." + suffix_tCreateTemporaryFile_7);
				if (file_tCreateTemporaryFile_7.createNewFile()) {
					file_tCreateTemporaryFile_7.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_7_FILEPATH",
						file_tCreateTemporaryFile_7.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_7 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_7 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_7";

				tos_count_tCreateTemporaryFile_7++;

				/**
				 * [tCreateTemporaryFile_7 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_7 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_7";

				ok_Hash.put("tCreateTemporaryFile_7", true);
				end_Hash.put("tCreateTemporaryFile_7",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_7 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_7:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_27Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tCreateTemporaryFile_7_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_27Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_27_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_27 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_27", false);
				start_Hash.put("tCreateTemporaryFile_27",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_27";

				int tos_count_tCreateTemporaryFile_27 = 0;

				java.io.File dir_tCreateTemporaryFile_27 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_27.mkdirs();
				String name_tCreateTemporaryFile_27 = "codeListtmp_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_27 = ("tmp".replaceAll(
						"\\.", "").length() == 0) ? "tmp" : "tmp".replaceAll(
						"\\.", "");
				java.io.File file_tCreateTemporaryFile_27 = new java.io.File(
						dir_tCreateTemporaryFile_27,
						name_tCreateTemporaryFile_27 + "."
								+ suffix_tCreateTemporaryFile_27);
				if (file_tCreateTemporaryFile_27.createNewFile()) {
					file_tCreateTemporaryFile_27.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_27_FILEPATH",
						file_tCreateTemporaryFile_27.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_27 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_27 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_27";

				tos_count_tCreateTemporaryFile_27++;

				/**
				 * [tCreateTemporaryFile_27 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_27 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_27";

				ok_Hash.put("tCreateTemporaryFile_27", true);
				end_Hash.put("tCreateTemporaryFile_27",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_27 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_27:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_25Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tCreateTemporaryFile_27_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_25Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_25_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_25 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_25", false);
				start_Hash.put("tCreateTemporaryFile_25",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_25";

				int tos_count_tCreateTemporaryFile_25 = 0;

				java.io.File dir_tCreateTemporaryFile_25 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_25.mkdirs();
				String name_tCreateTemporaryFile_25 = "codeListtmp_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_25 = ("tmp".replaceAll(
						"\\.", "").length() == 0) ? "tmp" : "tmp".replaceAll(
						"\\.", "");
				java.io.File file_tCreateTemporaryFile_25 = new java.io.File(
						dir_tCreateTemporaryFile_25,
						name_tCreateTemporaryFile_25 + "."
								+ suffix_tCreateTemporaryFile_25);
				if (file_tCreateTemporaryFile_25.createNewFile()) {
					file_tCreateTemporaryFile_25.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_25_FILEPATH",
						file_tCreateTemporaryFile_25.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_25 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_25 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_25";

				tos_count_tCreateTemporaryFile_25++;

				/**
				 * [tCreateTemporaryFile_25 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_25 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_25";

				ok_Hash.put("tCreateTemporaryFile_25", true);
				end_Hash.put("tCreateTemporaryFile_25",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_25 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_25:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_11Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tCreateTemporaryFile_25_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_11Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_11 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_11", false);
				start_Hash.put("tCreateTemporaryFile_11",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_11";

				int tos_count_tCreateTemporaryFile_11 = 0;

				java.io.File dir_tCreateTemporaryFile_11 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_11.mkdirs();
				String name_tCreateTemporaryFile_11 = "t11_XXXX".replaceAll(
						"XXXX", routines.TalendString.getAsciiRandomString(4)
								.toUpperCase());
				String suffix_tCreateTemporaryFile_11 = ("tmp".replaceAll(
						"\\.", "").length() == 0) ? "tmp" : "tmp".replaceAll(
						"\\.", "");
				java.io.File file_tCreateTemporaryFile_11 = new java.io.File(
						dir_tCreateTemporaryFile_11,
						name_tCreateTemporaryFile_11 + "."
								+ suffix_tCreateTemporaryFile_11);
				if (file_tCreateTemporaryFile_11.createNewFile()) {
					file_tCreateTemporaryFile_11.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_11_FILEPATH",
						file_tCreateTemporaryFile_11.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_11 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_11 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_11";

				tos_count_tCreateTemporaryFile_11++;

				/**
				 * [tCreateTemporaryFile_11 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_11 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_11";

				ok_Hash.put("tCreateTemporaryFile_11", true);
				end_Hash.put("tCreateTemporaryFile_11",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_11 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_11:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_10Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tCreateTemporaryFile_11_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_10Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_10 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_10", false);
				start_Hash.put("tCreateTemporaryFile_10",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_10";

				int tos_count_tCreateTemporaryFile_10 = 0;

				java.io.File dir_tCreateTemporaryFile_10 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_10.mkdirs();
				String name_tCreateTemporaryFile_10 = "talend6_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_10 = ("tmp".replaceAll(
						"\\.", "").length() == 0) ? "tmp" : "tmp".replaceAll(
						"\\.", "");
				java.io.File file_tCreateTemporaryFile_10 = new java.io.File(
						dir_tCreateTemporaryFile_10,
						name_tCreateTemporaryFile_10 + "."
								+ suffix_tCreateTemporaryFile_10);
				if (file_tCreateTemporaryFile_10.createNewFile()) {
					file_tCreateTemporaryFile_10.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_10_FILEPATH",
						file_tCreateTemporaryFile_10.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_10 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_10 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_10";

				tos_count_tCreateTemporaryFile_10++;

				/**
				 * [tCreateTemporaryFile_10 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_10 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_10";

				ok_Hash.put("tCreateTemporaryFile_10", true);
				end_Hash.put("tCreateTemporaryFile_10",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_10 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_10:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_9Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tCreateTemporaryFile_10_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_9Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_9 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_9", false);
				start_Hash.put("tCreateTemporaryFile_9",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_9";

				int tos_count_tCreateTemporaryFile_9 = 0;

				java.io.File dir_tCreateTemporaryFile_9 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_9.mkdirs();
				String name_tCreateTemporaryFile_9 = "talend6_XXXX".replaceAll(
						"XXXX", routines.TalendString.getAsciiRandomString(4)
								.toUpperCase());
				String suffix_tCreateTemporaryFile_9 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_9 = new java.io.File(
						dir_tCreateTemporaryFile_9, name_tCreateTemporaryFile_9
								+ "." + suffix_tCreateTemporaryFile_9);
				if (file_tCreateTemporaryFile_9.createNewFile()) {
					file_tCreateTemporaryFile_9.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_9_FILEPATH",
						file_tCreateTemporaryFile_9.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_9 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_9 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_9";

				tos_count_tCreateTemporaryFile_9++;

				/**
				 * [tCreateTemporaryFile_9 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_9 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_9";

				ok_Hash.put("tCreateTemporaryFile_9", true);
				end_Hash.put("tCreateTemporaryFile_9",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_9 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_9:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_8Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tCreateTemporaryFile_9_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_8Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_8 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_8", false);
				start_Hash.put("tCreateTemporaryFile_8",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_8";

				int tos_count_tCreateTemporaryFile_8 = 0;

				java.io.File dir_tCreateTemporaryFile_8 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_8.mkdirs();
				String name_tCreateTemporaryFile_8 = "talend6_XXXX".replaceAll(
						"XXXX", routines.TalendString.getAsciiRandomString(4)
								.toUpperCase());
				String suffix_tCreateTemporaryFile_8 = ("tmp".replaceAll("\\.",
						"").length() == 0) ? "tmp" : "tmp"
						.replaceAll("\\.", "");
				java.io.File file_tCreateTemporaryFile_8 = new java.io.File(
						dir_tCreateTemporaryFile_8, name_tCreateTemporaryFile_8
								+ "." + suffix_tCreateTemporaryFile_8);
				if (file_tCreateTemporaryFile_8.createNewFile()) {
					file_tCreateTemporaryFile_8.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_8_FILEPATH",
						file_tCreateTemporaryFile_8.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_8 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_8 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_8";

				tos_count_tCreateTemporaryFile_8++;

				/**
				 * [tCreateTemporaryFile_8 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_8 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_8";

				ok_Hash.put("tCreateTemporaryFile_8", true);
				end_Hash.put("tCreateTemporaryFile_8",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_8 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_8:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_3Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tCreateTemporaryFile_8_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_12Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_12 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_12", false);
				start_Hash.put("tCreateTemporaryFile_12",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_12";

				int tos_count_tCreateTemporaryFile_12 = 0;

				java.io.File dir_tCreateTemporaryFile_12 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_12.mkdirs();
				String name_tCreateTemporaryFile_12 = "talendFINAL_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_12 = ("tmp".replaceAll(
						"\\.", "").length() == 0) ? "tmp" : "tmp".replaceAll(
						"\\.", "");
				java.io.File file_tCreateTemporaryFile_12 = new java.io.File(
						dir_tCreateTemporaryFile_12,
						name_tCreateTemporaryFile_12 + "."
								+ suffix_tCreateTemporaryFile_12);
				if (file_tCreateTemporaryFile_12.createNewFile()) {
					file_tCreateTemporaryFile_12.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_12_FILEPATH",
						file_tCreateTemporaryFile_12.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_12 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_12 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_12";

				tos_count_tCreateTemporaryFile_12++;

				/**
				 * [tCreateTemporaryFile_12 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_12 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_12";

				ok_Hash.put("tCreateTemporaryFile_12", true);
				end_Hash.put("tCreateTemporaryFile_12",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_12 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_12:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_5Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tCreateTemporaryFile_12_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_13Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_13 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_13", false);
				start_Hash.put("tCreateTemporaryFile_13",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_13";

				int tos_count_tCreateTemporaryFile_13 = 0;

				java.io.File dir_tCreateTemporaryFile_13 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_13.mkdirs();
				String name_tCreateTemporaryFile_13 = "ONTOLOGY_XXXX"
						.replaceAll("XXXX", routines.TalendString
								.getAsciiRandomString(4).toUpperCase());
				String suffix_tCreateTemporaryFile_13 = ("tmp".replaceAll(
						"\\.", "").length() == 0) ? "tmp" : "tmp".replaceAll(
						"\\.", "");
				java.io.File file_tCreateTemporaryFile_13 = new java.io.File(
						dir_tCreateTemporaryFile_13,
						name_tCreateTemporaryFile_13 + "."
								+ suffix_tCreateTemporaryFile_13);
				if (file_tCreateTemporaryFile_13.createNewFile()) {
					file_tCreateTemporaryFile_13.deleteOnExit();
				}
				globalMap.put("tCreateTemporaryFile_13_FILEPATH",
						file_tCreateTemporaryFile_13.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_13 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_13 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_13";

				tos_count_tCreateTemporaryFile_13++;

				/**
				 * [tCreateTemporaryFile_13 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_13 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_13";

				ok_Hash.put("tCreateTemporaryFile_13", true);
				end_Hash.put("tCreateTemporaryFile_13",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_13 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_13:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_12Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tCreateTemporaryFile_13_SUBPROCESS_STATE", 1);
	}

	public static class row25Struct implements
			routines.system.IPersistableRow<row25Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String ItemGroupOID;

		public String getItemGroupOID() {
			return this.ItemGroupOID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String TransText;

		public String getTransText() {
			return this.TransText;
		}

		public String dataType;

		public String getDataType() {
			return this.dataType;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.ItemGroupOID = readString(dis);

					this.Name = readString(dis);

					this.TransText = readString(dis);

					this.dataType = readString(dis);

					this.codeList = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ItemGroupOID, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.TransText, dos);

				// String

				writeString(this.dataType, dos);

				// String

				writeString(this.codeList, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ItemGroupOID=" + ItemGroupOID);
			sb.append(",Name=" + Name);
			sb.append(",TransText=" + TransText);
			sb.append(",dataType=" + dataType);
			sb.append(",codeList=" + codeList);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class outasdStruct implements
			routines.system.IPersistableComparableLookupRow<outasdStruct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ItemGroupOID;

		public String getItemGroupOID() {
			return this.ItemGroupOID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String TransText;

		public String getTransText() {
			return this.TransText;
		}

		public String dataType;

		public String getDataType() {
			return this.dataType;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.codeList == null) ? 0 : this.codeList
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final outasdStruct other = (outasdStruct) obj;

			if (this.codeList == null) {
				if (other.codeList != null)
					return false;
			} else if (!this.codeList.equals(other.codeList))
				return false;

			return true;
		}

		public void copyDataTo(outasdStruct other) {

			other.ItemGroupOID = this.ItemGroupOID;
			other.Name = this.Name;
			other.TransText = this.TransText;
			other.dataType = this.dataType;
			other.codeList = this.codeList;

		}

		public void copyKeysDataTo(outasdStruct other) {

			other.codeList = this.codeList;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.codeList = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.codeList, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ItemGroupOID = readString(dis, ois);

				this.Name = readString(dis, ois);

				this.TransText = readString(dis, ois);

				this.dataType = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.ItemGroupOID, dos, oos);

				writeString(this.Name, dos, oos);

				writeString(this.TransText, dos, oos);

				writeString(this.dataType, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ItemGroupOID=" + ItemGroupOID);
			sb.append(",Name=" + Name);
			sb.append(",TransText=" + TransText);
			sb.append(",dataType=" + dataType);
			sb.append(",codeList=" + codeList);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(outasdStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.codeList, other.codeList);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out3Struct implements
			routines.system.IPersistableRow<out3Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String ItemGroupOID;

		public String getItemGroupOID() {
			return this.ItemGroupOID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String TransText;

		public String getTransText() {
			return this.TransText;
		}

		public String dataType;

		public String getDataType() {
			return this.dataType;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.ItemGroupOID = readString(dis);

					this.Name = readString(dis);

					this.TransText = readString(dis);

					this.dataType = readString(dis);

					this.codeList = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ItemGroupOID, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.TransText, dos);

				// String

				writeString(this.dataType, dos);

				// String

				writeString(this.codeList, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ItemGroupOID=" + ItemGroupOID);
			sb.append(",Name=" + Name);
			sb.append(",TransText=" + TransText);
			sb.append(",dataType=" + dataType);
			sb.append(",codeList=" + codeList);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row23Struct implements
			routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String ItemGroupOID;

		public String getItemGroupOID() {
			return this.ItemGroupOID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String TransText;

		public String getTransText() {
			return this.TransText;
		}

		public String dataType;

		public String getDataType() {
			return this.dataType;
		}

		public String codeList;

		public String getCodeList() {
			return this.codeList;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.ItemGroupOID = readString(dis);

					this.Name = readString(dis);

					this.TransText = readString(dis);

					this.dataType = readString(dis);

					this.codeList = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ItemGroupOID, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.TransText, dos);

				// String

				writeString(this.dataType, dos);

				// String

				writeString(this.codeList, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ItemGroupOID=" + ItemGroupOID);
			sb.append(",Name=" + Name);
			sb.append(",TransText=" + TransText);
			sb.append(",dataType=" + dataType);
			sb.append(",codeList=" + codeList);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputXML_14Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputXML_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row23Struct row23 = new row23Struct();
				out3Struct out3 = new out3Struct();
				row25Struct row25 = new row25Struct();
				outasdStruct outasd = new outasdStruct();

				/**
				 * [tFileOutputDelimited_21 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_21", false);
				start_Hash.put("tFileOutputDelimited_21",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_21";

				int tos_count_tFileOutputDelimited_21 = 0;

				String fileName_tFileOutputDelimited_21 = "";
				fileName_tFileOutputDelimited_21 = (new java.io.File(
						((String) globalMap
								.get("tCreateTemporaryFile_11_FILEPATH"))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_21 = null;
				String extension_tFileOutputDelimited_21 = null;
				String directory_tFileOutputDelimited_21 = null;
				if ((fileName_tFileOutputDelimited_21.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_21.lastIndexOf(".") < fileName_tFileOutputDelimited_21
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_21 = fileName_tFileOutputDelimited_21;
						extension_tFileOutputDelimited_21 = "";
					} else {
						fullName_tFileOutputDelimited_21 = fileName_tFileOutputDelimited_21
								.substring(0, fileName_tFileOutputDelimited_21
										.lastIndexOf("."));
						extension_tFileOutputDelimited_21 = fileName_tFileOutputDelimited_21
								.substring(fileName_tFileOutputDelimited_21
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_21 = fileName_tFileOutputDelimited_21
							.substring(0, fileName_tFileOutputDelimited_21
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_21.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_21 = fileName_tFileOutputDelimited_21
								.substring(0, fileName_tFileOutputDelimited_21
										.lastIndexOf("."));
						extension_tFileOutputDelimited_21 = fileName_tFileOutputDelimited_21
								.substring(fileName_tFileOutputDelimited_21
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_21 = fileName_tFileOutputDelimited_21;
						extension_tFileOutputDelimited_21 = "";
					}
					directory_tFileOutputDelimited_21 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_21 = true;
				java.io.File filetFileOutputDelimited_21 = new java.io.File(
						fileName_tFileOutputDelimited_21);
				globalMap.put("tFileOutputDelimited_21_FILE_NAME",
						fileName_tFileOutputDelimited_21);

				int nb_line_tFileOutputDelimited_21 = 0;
				int splitEvery_tFileOutputDelimited_21 = 1000;
				int splitedFileNo_tFileOutputDelimited_21 = 0;
				int currentRow_tFileOutputDelimited_21 = 0;

				final String OUT_DELIM_tFileOutputDelimited_21 = /**
				 * Start field
				 * tFileOutputDelimited_21:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_21:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_21 = /**
				 * Start
				 * field tFileOutputDelimited_21:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_21:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_21 != null
						&& directory_tFileOutputDelimited_21.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_21 = new java.io.File(
							directory_tFileOutputDelimited_21);
					if (!dir_tFileOutputDelimited_21.exists()) {
						dir_tFileOutputDelimited_21.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_21 = null;
				try {
					outtFileOutputDelimited_21 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_21,
											false), "ISO-8859-15"));

					/**
					 * [tFileOutputDelimited_21 begin ] stop
					 */

					/**
					 * [tJavaRow_8 begin ] start
					 */

					ok_Hash.put("tJavaRow_8", false);
					start_Hash.put("tJavaRow_8", System.currentTimeMillis());
					currentComponent = "tJavaRow_8";

					int tos_count_tJavaRow_8 = 0;

					int nb_line_tJavaRow_8 = 0;

					/**
					 * [tJavaRow_8 begin ] stop
					 */

					/**
					 * [tAdvancedHash_outasd begin ] start
					 */

					ok_Hash.put("tAdvancedHash_outasd", false);
					start_Hash.put("tAdvancedHash_outasd",
							System.currentTimeMillis());
					currentComponent = "tAdvancedHash_outasd";

					int tos_count_tAdvancedHash_outasd = 0;

					// connection name:outasd
					// source node:tMap_26 - inputs:(row23)
					// outputs:(outasd,out3,outasd) | target
					// node:tAdvancedHash_outasd - inputs:(outasd) outputs:()
					// linked node: tMap_39 - inputs:(codeList,outasd)
					// outputs:(out1)

					org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_outasd = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<outasdStruct> tHash_Lookup_outasd = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
							.<outasdStruct> getLookup(matchingModeEnum_outasd);

					globalMap.put("tHash_Lookup_outasd", tHash_Lookup_outasd);

					/**
					 * [tAdvancedHash_outasd begin ] stop
					 */

					/**
					 * [tMap_26 begin ] start
					 */

					ok_Hash.put("tMap_26", false);
					start_Hash.put("tMap_26", System.currentTimeMillis());
					currentComponent = "tMap_26";

					int tos_count_tMap_26 = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_26__Struct {
					}
					Var__tMap_26__Struct Var__tMap_26 = new Var__tMap_26__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					outasdStruct outasd_tmp = new outasdStruct();
					out3Struct out3_tmp = new out3Struct();
					// ###############################

					/**
					 * [tMap_26 begin ] stop
					 */

					/**
					 * [tFileInputXML_14 begin ] start
					 */

					ok_Hash.put("tFileInputXML_14", false);
					start_Hash.put("tFileInputXML_14",
							System.currentTimeMillis());
					currentComponent = "tFileInputXML_14";

					int tos_count_tFileInputXML_14 = 0;

					int nb_line_tFileInputXML_14 = 0;

					class IgnoreDTDEntityResolver_tFileInputXML_14 implements
							org.xml.sax.EntityResolver {

						public org.xml.sax.InputSource resolveEntity(
								String publicId, String systemId)
								throws org.xml.sax.SAXException,
								java.io.IOException {
							return new org.xml.sax.InputSource(
									new java.io.ByteArrayInputStream(
											"<?xml version='1.0' encoding='UTF-8'?>"
													.getBytes()));
						}

					}
					String os_tFileInputXML_14 = System.getProperty("os.name")
							.toLowerCase();
					boolean isWindows_tFileInputXML_14 = false;
					if (os_tFileInputXML_14.indexOf("windows") > -1
							|| os_tFileInputXML_14.indexOf("nt") > -1) {
						isWindows_tFileInputXML_14 = true;
					}
					class NameSpaceTool_tFileInputXML_14 {

						public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

						private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

						public void countNSMap(org.dom4j.Element el) {
							for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
									.declaredNamespaces()) {
								if (ns.getPrefix().trim().length() == 0) {
									xmlNameSpaceMap.put(
											"pre" + defualtNSPath.size(),
											ns.getURI());
									String path = "";
									org.dom4j.Element elTmp = el;
									while (elTmp != null) {
										if (elTmp.getNamespacePrefix() != null
												&& elTmp.getNamespacePrefix()
														.length() > 0) {
											path = "/"
													+ elTmp.getNamespacePrefix()
													+ ":" + elTmp.getName()
													+ path;
										} else {
											path = "/" + elTmp.getName() + path;
										}
										elTmp = elTmp.getParent();
									}
									defualtNSPath.add(path);
								} else {
									xmlNameSpaceMap.put(ns.getPrefix(),
											ns.getURI());
								}

							}
							for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
									.elements()) {
								countNSMap(e);
							}
						}

						public String addDefaultNSPrefix(String path,
								String loopPath) {
							if (defualtNSPath.size() > 0) {
								String fullPath = loopPath;
								if (!path.equals(fullPath)) {
									for (String tmp : path.split("/")) {
										if (("..").equals(tmp)) {
											fullPath = fullPath.substring(0,
													fullPath.lastIndexOf("/"));
										} else {
											fullPath += "/" + tmp;
										}
									}
								}
								int size = fullPath.split("/").length - 1;
								if (size < 0) {
									return fullPath;
								}
								int[] indexs = new int[size];
								java.util.Arrays.fill(indexs, -1);
								int length = 0;
								for (int i = 0; i < defualtNSPath.size(); i++) {
									if (defualtNSPath.get(i).length() > length
											&& fullPath
													.startsWith(defualtNSPath
															.get(i))) {
										java.util.Arrays
												.fill(indexs,
														defualtNSPath.get(i)
																.split("/").length - 2,
														indexs.length, i);
										length = defualtNSPath.get(i).length();
									}
								}

								StringBuilder newPath = new StringBuilder();
								String[] pathStrs = path.split("/");
								for (int i = 0; i < pathStrs.length; i++) {
									String tmp = pathStrs[i];
									if (newPath.length() > 0) {
										newPath.append("/");
									}
									if (tmp.length() > 0
											&& tmp.indexOf(":") == -1
											&& tmp.indexOf(".") == -1 /*
																	 * &&
																	 * tmp.indexOf
																	 * ("@") ==
																	 * -1
																	 */) {
										int index = indexs[i + indexs.length
												- pathStrs.length];
										if (index >= 0) {
											// ==== add by wliu to support both
											// filter and functions==
											if (tmp.indexOf("[") > 0
													&& tmp.indexOf("]") > tmp
															.indexOf("[")) {// include
																			// filter
												String tmpStr = replaceElementWithNS(
														tmp, "pre" + index
																+ ":");
												newPath.append(tmpStr);
											} else {
												if (tmp.indexOf("@") != -1
														|| tmp.indexOf("(") < tmp
																.indexOf(")")) { // include
																					// attribute
													newPath.append(tmp);
												} else {
													// ==add end=======
													newPath.append("pre")
															.append(index)
															.append(":")
															.append(tmp);
												}
											}
										} else {
											newPath.append(tmp);
										}
									} else {
										newPath.append(tmp);
									}
								}
								return newPath.toString();
							}
							return path;
						}

						private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
						private java.util.regex.Pattern pattern = java.util.regex.Pattern
								.compile(matches);

						private String replaceElementWithNS(String global,
								String pre) {

							java.util.regex.Matcher match = pattern
									.matcher(global);
							StringBuffer sb = new StringBuffer();
							match.reset();
							while (match.find()) {
								String group = match.group();
								String tmp = "";
								if (group.toLowerCase().matches(
										"\\b(div|mod|and|or)\\b.*")
										|| group.matches("@.*")) {
									tmp = group;
								} else {
									tmp = tmp + pre + group;
								}
								match.appendReplacement(sb, tmp);
							}
							match.appendTail(sb);

							return sb.toString();
						}

					}

					class XML_API_tFileInputXML_14 {
						public boolean isDefNull(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							if (node != null
									&& node instanceof org.dom4j.Element) {
								org.dom4j.Attribute attri = ((org.dom4j.Element) node)
										.attribute("nil");
								if (attri != null
										&& ("true").equals(attri.getText())) {
									return true;
								}
							}
							return false;
						}

						public boolean isMissing(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							return node == null ? true : false;
						}

						public boolean isEmpty(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							if (node != null) {
								return node.getText().length() == 0;
							}
							return false;
						}
					}

					org.dom4j.io.SAXReader reader_tFileInputXML_14 = new org.dom4j.io.SAXReader();
					reader_tFileInputXML_14
							.setEntityResolver(new IgnoreDTDEntityResolver_tFileInputXML_14());
					Object filename_tFileInputXML_14 = null;
					try {
						filename_tFileInputXML_14 = context.currentFile;
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}
					if (filename_tFileInputXML_14 != null
							&& filename_tFileInputXML_14 instanceof String
							&& filename_tFileInputXML_14.toString().startsWith(
									"//")) {
						if (!isWindows_tFileInputXML_14) {
							filename_tFileInputXML_14 = filename_tFileInputXML_14
									.toString().replaceFirst("//", "/");
						}
					}

					boolean isValidFile_tFileInputXML_14 = true;
					org.dom4j.Document doc_tFileInputXML_14 = null;
					java.io.Closeable toClose_tFileInputXML_14 = null;
					try {
						if (filename_tFileInputXML_14 instanceof java.io.InputStream) {
							java.io.InputStream inputStream_tFileInputXML_14 = (java.io.InputStream) filename_tFileInputXML_14;
							toClose_tFileInputXML_14 = inputStream_tFileInputXML_14;
							doc_tFileInputXML_14 = reader_tFileInputXML_14
									.read(inputStream_tFileInputXML_14);
						} else {
							java.io.Reader unicodeReader_tFileInputXML_14 = new UnicodeReader(
									new java.io.FileInputStream(String
											.valueOf(filename_tFileInputXML_14)),
									context.encoding);
							toClose_tFileInputXML_14 = unicodeReader_tFileInputXML_14;
							org.xml.sax.InputSource in_tFileInputXML_14 = new org.xml.sax.InputSource(
									unicodeReader_tFileInputXML_14);
							doc_tFileInputXML_14 = reader_tFileInputXML_14
									.read(in_tFileInputXML_14);
						}
					} catch (java.lang.Exception e) {
						System.err.println(e.getMessage());
						isValidFile_tFileInputXML_14 = false;
					} finally {
						if (toClose_tFileInputXML_14 != null) {
							toClose_tFileInputXML_14.close();
						}
					}
					if (isValidFile_tFileInputXML_14) {
						NameSpaceTool_tFileInputXML_14 nsTool_tFileInputXML_14 = new NameSpaceTool_tFileInputXML_14();
						nsTool_tFileInputXML_14.countNSMap(doc_tFileInputXML_14
								.getRootElement());
						java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_14 = nsTool_tFileInputXML_14.xmlNameSpaceMap;

						org.dom4j.XPath x_tFileInputXML_14 = doc_tFileInputXML_14
								.createXPath(nsTool_tFileInputXML_14
										.addDefaultNSPrefix(
												"/ODM/Study/MetaDataVersion/ItemDef",
												"/ODM/Study/MetaDataVersion/ItemDef"));
						x_tFileInputXML_14
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_14);

						java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_14 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tFileInputXML_14
								.selectNodes(doc_tFileInputXML_14);
						XML_API_tFileInputXML_14 xml_api_tFileInputXML_14 = new XML_API_tFileInputXML_14();
						String str_tFileInputXML_14 = "";
						org.dom4j.Node node_tFileInputXML_14 = null;

						// init all mapping xpaths
						org.dom4j.XPath xTmp0_tFileInputXML_14 = org.dom4j.DocumentHelper
								.createXPath(nsTool_tFileInputXML_14
										.addDefaultNSPrefix("@OID",
												"/ODM/Study/MetaDataVersion/ItemDef"));
						xTmp0_tFileInputXML_14
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_14);
						org.dom4j.XPath xTmp1_tFileInputXML_14 = org.dom4j.DocumentHelper
								.createXPath(nsTool_tFileInputXML_14
										.addDefaultNSPrefix("@Name",
												"/ODM/Study/MetaDataVersion/ItemDef"));
						xTmp1_tFileInputXML_14
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_14);
						org.dom4j.XPath xTmp2_tFileInputXML_14 = org.dom4j.DocumentHelper
								.createXPath(nsTool_tFileInputXML_14
										.addDefaultNSPrefix(
												"/Question/TranslatedText",
												"/ODM/Study/MetaDataVersion/ItemDef"));
						xTmp2_tFileInputXML_14
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_14);
						org.dom4j.XPath xTmp3_tFileInputXML_14 = org.dom4j.DocumentHelper
								.createXPath(nsTool_tFileInputXML_14
										.addDefaultNSPrefix("@DataType",
												"/ODM/Study/MetaDataVersion/ItemDef"));
						xTmp3_tFileInputXML_14
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_14);
						org.dom4j.XPath xTmp4_tFileInputXML_14 = org.dom4j.DocumentHelper
								.createXPath(nsTool_tFileInputXML_14
										.addDefaultNSPrefix(
												"/CodeListRef/@CodeListOID",
												"/ODM/Study/MetaDataVersion/ItemDef"));
						xTmp4_tFileInputXML_14
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_14);

						for (org.dom4j.tree.AbstractNode temp_tFileInputXML_14 : nodeList_tFileInputXML_14) {
							nb_line_tFileInputXML_14++;
							row23 = null;
							boolean whetherReject_tFileInputXML_14 = false;
							row23 = new row23Struct();
							try {
								Object obj0_tFileInputXML_14 = xTmp0_tFileInputXML_14
										.evaluate(temp_tFileInputXML_14);
								if (obj0_tFileInputXML_14 == null) {
									node_tFileInputXML_14 = null;
									str_tFileInputXML_14 = "";

								} else if (obj0_tFileInputXML_14 instanceof org.dom4j.Node) {
									node_tFileInputXML_14 = (org.dom4j.Node) obj0_tFileInputXML_14;
									str_tFileInputXML_14 = org.jaxen.function.StringFunction
											.evaluate(
													node_tFileInputXML_14,
													org.jaxen.dom4j.DocumentNavigator
															.getInstance());
								} else if (obj0_tFileInputXML_14 instanceof String
										|| obj0_tFileInputXML_14 instanceof Number) {
									node_tFileInputXML_14 = temp_tFileInputXML_14;
									str_tFileInputXML_14 = String
											.valueOf(obj0_tFileInputXML_14);
								} else if (obj0_tFileInputXML_14 instanceof java.util.List) {
									java.util.List<org.dom4j.Node> nodes_tFileInputXML_14 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_14;
									node_tFileInputXML_14 = nodes_tFileInputXML_14
											.size() > 0 ? nodes_tFileInputXML_14
											.get(0) : null;
									str_tFileInputXML_14 = node_tFileInputXML_14 == null ? ""
											: org.jaxen.function.StringFunction
													.evaluate(
															node_tFileInputXML_14,
															org.jaxen.dom4j.DocumentNavigator
																	.getInstance());
								}
								if (xml_api_tFileInputXML_14
										.isDefNull(node_tFileInputXML_14)) {
									row23.ItemGroupOID = null;
								} else if (xml_api_tFileInputXML_14
										.isEmpty(node_tFileInputXML_14)) {
									row23.ItemGroupOID = "";
								} else if (xml_api_tFileInputXML_14
										.isMissing(node_tFileInputXML_14)) {
									row23.ItemGroupOID = null;
								} else {
									row23.ItemGroupOID = str_tFileInputXML_14;
								}
								Object obj1_tFileInputXML_14 = xTmp1_tFileInputXML_14
										.evaluate(temp_tFileInputXML_14);
								if (obj1_tFileInputXML_14 == null) {
									node_tFileInputXML_14 = null;
									str_tFileInputXML_14 = "";

								} else if (obj1_tFileInputXML_14 instanceof org.dom4j.Node) {
									node_tFileInputXML_14 = (org.dom4j.Node) obj1_tFileInputXML_14;
									str_tFileInputXML_14 = org.jaxen.function.StringFunction
											.evaluate(
													node_tFileInputXML_14,
													org.jaxen.dom4j.DocumentNavigator
															.getInstance());
								} else if (obj1_tFileInputXML_14 instanceof String
										|| obj1_tFileInputXML_14 instanceof Number) {
									node_tFileInputXML_14 = temp_tFileInputXML_14;
									str_tFileInputXML_14 = String
											.valueOf(obj1_tFileInputXML_14);
								} else if (obj1_tFileInputXML_14 instanceof java.util.List) {
									java.util.List<org.dom4j.Node> nodes_tFileInputXML_14 = (java.util.List<org.dom4j.Node>) obj1_tFileInputXML_14;
									node_tFileInputXML_14 = nodes_tFileInputXML_14
											.size() > 0 ? nodes_tFileInputXML_14
											.get(0) : null;
									str_tFileInputXML_14 = node_tFileInputXML_14 == null ? ""
											: org.jaxen.function.StringFunction
													.evaluate(
															node_tFileInputXML_14,
															org.jaxen.dom4j.DocumentNavigator
																	.getInstance());
								}
								if (xml_api_tFileInputXML_14
										.isDefNull(node_tFileInputXML_14)) {
									row23.Name = null;
								} else if (xml_api_tFileInputXML_14
										.isEmpty(node_tFileInputXML_14)) {
									row23.Name = "";
								} else if (xml_api_tFileInputXML_14
										.isMissing(node_tFileInputXML_14)) {
									row23.Name = null;
								} else {
									row23.Name = str_tFileInputXML_14;
								}
								Object obj2_tFileInputXML_14 = xTmp2_tFileInputXML_14
										.evaluate(temp_tFileInputXML_14);
								if (obj2_tFileInputXML_14 == null) {
									node_tFileInputXML_14 = null;
									str_tFileInputXML_14 = "";

								} else if (obj2_tFileInputXML_14 instanceof org.dom4j.Node) {
									node_tFileInputXML_14 = (org.dom4j.Node) obj2_tFileInputXML_14;
									str_tFileInputXML_14 = org.jaxen.function.StringFunction
											.evaluate(
													node_tFileInputXML_14,
													org.jaxen.dom4j.DocumentNavigator
															.getInstance());
								} else if (obj2_tFileInputXML_14 instanceof String
										|| obj2_tFileInputXML_14 instanceof Number) {
									node_tFileInputXML_14 = temp_tFileInputXML_14;
									str_tFileInputXML_14 = String
											.valueOf(obj2_tFileInputXML_14);
								} else if (obj2_tFileInputXML_14 instanceof java.util.List) {
									java.util.List<org.dom4j.Node> nodes_tFileInputXML_14 = (java.util.List<org.dom4j.Node>) obj2_tFileInputXML_14;
									node_tFileInputXML_14 = nodes_tFileInputXML_14
											.size() > 0 ? nodes_tFileInputXML_14
											.get(0) : null;
									str_tFileInputXML_14 = node_tFileInputXML_14 == null ? ""
											: org.jaxen.function.StringFunction
													.evaluate(
															node_tFileInputXML_14,
															org.jaxen.dom4j.DocumentNavigator
																	.getInstance());
								}
								if (xml_api_tFileInputXML_14
										.isDefNull(node_tFileInputXML_14)) {
									row23.TransText = null;
								} else if (xml_api_tFileInputXML_14
										.isEmpty(node_tFileInputXML_14)) {
									row23.TransText = "";
								} else if (xml_api_tFileInputXML_14
										.isMissing(node_tFileInputXML_14)) {
									row23.TransText = null;
								} else {
									row23.TransText = str_tFileInputXML_14;
								}
								Object obj3_tFileInputXML_14 = xTmp3_tFileInputXML_14
										.evaluate(temp_tFileInputXML_14);
								if (obj3_tFileInputXML_14 == null) {
									node_tFileInputXML_14 = null;
									str_tFileInputXML_14 = "";

								} else if (obj3_tFileInputXML_14 instanceof org.dom4j.Node) {
									node_tFileInputXML_14 = (org.dom4j.Node) obj3_tFileInputXML_14;
									str_tFileInputXML_14 = org.jaxen.function.StringFunction
											.evaluate(
													node_tFileInputXML_14,
													org.jaxen.dom4j.DocumentNavigator
															.getInstance());
								} else if (obj3_tFileInputXML_14 instanceof String
										|| obj3_tFileInputXML_14 instanceof Number) {
									node_tFileInputXML_14 = temp_tFileInputXML_14;
									str_tFileInputXML_14 = String
											.valueOf(obj3_tFileInputXML_14);
								} else if (obj3_tFileInputXML_14 instanceof java.util.List) {
									java.util.List<org.dom4j.Node> nodes_tFileInputXML_14 = (java.util.List<org.dom4j.Node>) obj3_tFileInputXML_14;
									node_tFileInputXML_14 = nodes_tFileInputXML_14
											.size() > 0 ? nodes_tFileInputXML_14
											.get(0) : null;
									str_tFileInputXML_14 = node_tFileInputXML_14 == null ? ""
											: org.jaxen.function.StringFunction
													.evaluate(
															node_tFileInputXML_14,
															org.jaxen.dom4j.DocumentNavigator
																	.getInstance());
								}
								if (xml_api_tFileInputXML_14
										.isDefNull(node_tFileInputXML_14)) {
									row23.dataType = null;
								} else if (xml_api_tFileInputXML_14
										.isEmpty(node_tFileInputXML_14)) {
									row23.dataType = "";
								} else if (xml_api_tFileInputXML_14
										.isMissing(node_tFileInputXML_14)) {
									row23.dataType = null;
								} else {
									row23.dataType = str_tFileInputXML_14;
								}
								Object obj4_tFileInputXML_14 = xTmp4_tFileInputXML_14
										.evaluate(temp_tFileInputXML_14);
								if (obj4_tFileInputXML_14 == null) {
									node_tFileInputXML_14 = null;
									str_tFileInputXML_14 = "";

								} else if (obj4_tFileInputXML_14 instanceof org.dom4j.Node) {
									node_tFileInputXML_14 = (org.dom4j.Node) obj4_tFileInputXML_14;
									str_tFileInputXML_14 = org.jaxen.function.StringFunction
											.evaluate(
													node_tFileInputXML_14,
													org.jaxen.dom4j.DocumentNavigator
															.getInstance());
								} else if (obj4_tFileInputXML_14 instanceof String
										|| obj4_tFileInputXML_14 instanceof Number) {
									node_tFileInputXML_14 = temp_tFileInputXML_14;
									str_tFileInputXML_14 = String
											.valueOf(obj4_tFileInputXML_14);
								} else if (obj4_tFileInputXML_14 instanceof java.util.List) {
									java.util.List<org.dom4j.Node> nodes_tFileInputXML_14 = (java.util.List<org.dom4j.Node>) obj4_tFileInputXML_14;
									node_tFileInputXML_14 = nodes_tFileInputXML_14
											.size() > 0 ? nodes_tFileInputXML_14
											.get(0) : null;
									str_tFileInputXML_14 = node_tFileInputXML_14 == null ? ""
											: org.jaxen.function.StringFunction
													.evaluate(
															node_tFileInputXML_14,
															org.jaxen.dom4j.DocumentNavigator
																	.getInstance());
								}
								if (xml_api_tFileInputXML_14
										.isDefNull(node_tFileInputXML_14)) {
									row23.codeList = null;
								} else if (xml_api_tFileInputXML_14
										.isEmpty(node_tFileInputXML_14)) {
									row23.codeList = "";
								} else if (xml_api_tFileInputXML_14
										.isMissing(node_tFileInputXML_14)) {
									row23.codeList = null;
								} else {
									row23.codeList = str_tFileInputXML_14;
								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputXML_14 = true;
								System.err.println(e.getMessage());
								row23 = null;
							}

							/**
							 * [tFileInputXML_14 begin ] stop
							 */
							/**
							 * [tFileInputXML_14 main ] start
							 */

							currentComponent = "tFileInputXML_14";

							tos_count_tFileInputXML_14++;

							/**
							 * [tFileInputXML_14 main ] stop
							 */
							// Start of branch "row23"
							if (row23 != null) {

								/**
								 * [tMap_26 main ] start
								 */

								currentComponent = "tMap_26";

								boolean hasCasePrimitiveKeyWithNull_tMap_26 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_26 = false;
								boolean mainRowRejected_tMap_26 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_26__Struct Var = Var__tMap_26;// ###############################
									// ###############################
									// # Output tables

									outasd = null;
									out3 = null;

									// # Output table : 'outasd'
									outasd_tmp.ItemGroupOID = row23.ItemGroupOID;
									outasd_tmp.Name = row23.Name;
									outasd_tmp.TransText = row23.TransText;
									outasd_tmp.dataType = row23.dataType;
									outasd_tmp.codeList = row23.codeList;
									outasd = outasd_tmp;

									// # Output table : 'out3'
									out3_tmp.ItemGroupOID = row23.ItemGroupOID;
									out3_tmp.Name = row23.Name;
									out3_tmp.TransText = row23.TransText;
									out3_tmp.dataType = row23.dataType;
									out3_tmp.codeList = row23.codeList;
									out3 = out3_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_26 = false;

								tos_count_tMap_26++;

								/**
								 * [tMap_26 main ] stop
								 */
								// Start of branch "out3"
								if (out3 != null) {

									/**
									 * [tJavaRow_8 main ] start
									 */

									currentComponent = "tJavaRow_8";

									if (out3.ItemGroupOID != null)
										row25.ItemGroupOID = out3.ItemGroupOID
												.trim();

									if (out3.Name != null)
										row25.Name = out3.Name.trim();

									if (out3.TransText != null)
										row25.TransText = out3.TransText.trim()
												.replaceAll("\n", " ");

									if (out3.dataType != null)
										row25.dataType = out3.dataType.trim();

									if (out3.codeList != null)
										row25.codeList = out3.codeList.trim();

									nb_line_tJavaRow_8++;

									tos_count_tJavaRow_8++;

									/**
									 * [tJavaRow_8 main ] stop
									 */

									/**
									 * [tFileOutputDelimited_21 main ] start
									 */

									currentComponent = "tFileOutputDelimited_21";

									StringBuilder sb_tFileOutputDelimited_21 = new StringBuilder();

									if (row25.ItemGroupOID != null) {

										sb_tFileOutputDelimited_21.append(

										row25.ItemGroupOID

										);

									}

									sb_tFileOutputDelimited_21
											.append(OUT_DELIM_tFileOutputDelimited_21);

									if (row25.Name != null) {

										sb_tFileOutputDelimited_21.append(

										row25.Name

										);

									}

									sb_tFileOutputDelimited_21
											.append(OUT_DELIM_tFileOutputDelimited_21);

									if (row25.TransText != null) {

										sb_tFileOutputDelimited_21.append(

										row25.TransText

										);

									}

									sb_tFileOutputDelimited_21
											.append(OUT_DELIM_tFileOutputDelimited_21);

									if (row25.dataType != null) {

										sb_tFileOutputDelimited_21.append(

										row25.dataType

										);

									}

									sb_tFileOutputDelimited_21
											.append(OUT_DELIM_tFileOutputDelimited_21);

									if (row25.codeList != null) {

										sb_tFileOutputDelimited_21.append(

										row25.codeList

										);

									}

									sb_tFileOutputDelimited_21
											.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_21);

									nb_line_tFileOutputDelimited_21++;

									outtFileOutputDelimited_21
											.write(sb_tFileOutputDelimited_21
													.toString());

									tos_count_tFileOutputDelimited_21++;

									/**
									 * [tFileOutputDelimited_21 main ] stop
									 */

								} // End of branch "out3"

								// Start of branch "outasd"
								if (outasd != null) {

									/**
									 * [tAdvancedHash_outasd main ] start
									 */

									currentComponent = "tAdvancedHash_outasd";

									outasdStruct outasd_HashRow = new outasdStruct();

									outasd_HashRow.ItemGroupOID = outasd.ItemGroupOID;

									outasd_HashRow.Name = outasd.Name;

									outasd_HashRow.TransText = outasd.TransText;

									outasd_HashRow.dataType = outasd.dataType;

									outasd_HashRow.codeList = outasd.codeList;

									tHash_Lookup_outasd.put(outasd_HashRow);

									tos_count_tAdvancedHash_outasd++;

									/**
									 * [tAdvancedHash_outasd main ] stop
									 */

								} // End of branch "outasd"

							} // End of branch "row23"

							/**
							 * [tFileInputXML_14 end ] start
							 */

							currentComponent = "tFileInputXML_14";

						}
					}
					globalMap.put("tFileInputXML_14_NB_LINE",
							nb_line_tFileInputXML_14);

					ok_Hash.put("tFileInputXML_14", true);
					end_Hash.put("tFileInputXML_14", System.currentTimeMillis());

					/**
					 * [tFileInputXML_14 end ] stop
					 */

					/**
					 * [tMap_26 end ] start
					 */

					currentComponent = "tMap_26";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					ok_Hash.put("tMap_26", true);
					end_Hash.put("tMap_26", System.currentTimeMillis());

					/**
					 * [tMap_26 end ] stop
					 */

					/**
					 * [tAdvancedHash_outasd end ] start
					 */

					currentComponent = "tAdvancedHash_outasd";

					tHash_Lookup_outasd.endPut();

					ok_Hash.put("tAdvancedHash_outasd", true);
					end_Hash.put("tAdvancedHash_outasd",
							System.currentTimeMillis());

					/**
					 * [tAdvancedHash_outasd end ] stop
					 */

					/**
					 * [tJavaRow_8 end ] start
					 */

					currentComponent = "tJavaRow_8";

					globalMap.put("tJavaRow_8_NB_LINE", nb_line_tJavaRow_8);

					ok_Hash.put("tJavaRow_8", true);
					end_Hash.put("tJavaRow_8", System.currentTimeMillis());

					/**
					 * [tJavaRow_8 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_21 end ] start
					 */

					currentComponent = "tFileOutputDelimited_21";

				} finally {
					if (outtFileOutputDelimited_21 != null) {
						outtFileOutputDelimited_21.flush();
						outtFileOutputDelimited_21.close();
					}
					globalMap.put("tFileOutputDelimited_21_NB_LINE",
							nb_line_tFileOutputDelimited_21);
					globalMap.put("tFileOutputDelimited_21_FILE_NAME",
							fileName_tFileOutputDelimited_21);
				} // finally

				ok_Hash.put("tFileOutputDelimited_21", true);
				end_Hash.put("tFileOutputDelimited_21",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_21 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputXML_14_SUBPROCESS_STATE", 1);
	}

	public static class row18Struct implements
			routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String VisitOID;

		public String getVisitOID() {
			return this.VisitOID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.VisitOID = readString(dis);

					this.Name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.VisitOID, dos);

				// String

				writeString(this.Name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("VisitOID=" + VisitOID);
			sb.append(",Name=" + Name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputXML_10Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputXML_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row18Struct row18 = new row18Struct();

				/**
				 * [tFileOutputDelimited_18 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_18", false);
				start_Hash.put("tFileOutputDelimited_18",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_18";

				int tos_count_tFileOutputDelimited_18 = 0;

				String fileName_tFileOutputDelimited_18 = "";
				fileName_tFileOutputDelimited_18 = (new java.io.File(
						((String) globalMap
								.get("tCreateTemporaryFile_8_FILEPATH"))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_18 = null;
				String extension_tFileOutputDelimited_18 = null;
				String directory_tFileOutputDelimited_18 = null;
				if ((fileName_tFileOutputDelimited_18.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_18.lastIndexOf(".") < fileName_tFileOutputDelimited_18
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18;
						extension_tFileOutputDelimited_18 = "";
					} else {
						fullName_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18
								.substring(0, fileName_tFileOutputDelimited_18
										.lastIndexOf("."));
						extension_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18
								.substring(fileName_tFileOutputDelimited_18
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18
							.substring(0, fileName_tFileOutputDelimited_18
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_18.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18
								.substring(0, fileName_tFileOutputDelimited_18
										.lastIndexOf("."));
						extension_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18
								.substring(fileName_tFileOutputDelimited_18
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18;
						extension_tFileOutputDelimited_18 = "";
					}
					directory_tFileOutputDelimited_18 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_18 = true;
				java.io.File filetFileOutputDelimited_18 = new java.io.File(
						fileName_tFileOutputDelimited_18);
				globalMap.put("tFileOutputDelimited_18_FILE_NAME",
						fileName_tFileOutputDelimited_18);

				int nb_line_tFileOutputDelimited_18 = 0;
				int splitEvery_tFileOutputDelimited_18 = 1000;
				int splitedFileNo_tFileOutputDelimited_18 = 0;
				int currentRow_tFileOutputDelimited_18 = 0;

				final String OUT_DELIM_tFileOutputDelimited_18 = /**
				 * Start field
				 * tFileOutputDelimited_18:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_18:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_18 = /**
				 * Start
				 * field tFileOutputDelimited_18:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_18:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_18 != null
						&& directory_tFileOutputDelimited_18.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_18 = new java.io.File(
							directory_tFileOutputDelimited_18);
					if (!dir_tFileOutputDelimited_18.exists()) {
						dir_tFileOutputDelimited_18.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_18 = null;
				try {
					outtFileOutputDelimited_18 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_18,
											false), "ISO-8859-15"));

					/**
					 * [tFileOutputDelimited_18 begin ] stop
					 */

					/**
					 * [tFileInputXML_10 begin ] start
					 */

					ok_Hash.put("tFileInputXML_10", false);
					start_Hash.put("tFileInputXML_10",
							System.currentTimeMillis());
					currentComponent = "tFileInputXML_10";

					int tos_count_tFileInputXML_10 = 0;

					int nb_line_tFileInputXML_10 = 0;

					class IgnoreDTDEntityResolver_tFileInputXML_10 implements
							org.xml.sax.EntityResolver {

						public org.xml.sax.InputSource resolveEntity(
								String publicId, String systemId)
								throws org.xml.sax.SAXException,
								java.io.IOException {
							return new org.xml.sax.InputSource(
									new java.io.ByteArrayInputStream(
											"<?xml version='1.0' encoding='UTF-8'?>"
													.getBytes()));
						}

					}
					String os_tFileInputXML_10 = System.getProperty("os.name")
							.toLowerCase();
					boolean isWindows_tFileInputXML_10 = false;
					if (os_tFileInputXML_10.indexOf("windows") > -1
							|| os_tFileInputXML_10.indexOf("nt") > -1) {
						isWindows_tFileInputXML_10 = true;
					}
					class NameSpaceTool_tFileInputXML_10 {

						public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

						private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

						public void countNSMap(org.dom4j.Element el) {
							for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
									.declaredNamespaces()) {
								if (ns.getPrefix().trim().length() == 0) {
									xmlNameSpaceMap.put(
											"pre" + defualtNSPath.size(),
											ns.getURI());
									String path = "";
									org.dom4j.Element elTmp = el;
									while (elTmp != null) {
										if (elTmp.getNamespacePrefix() != null
												&& elTmp.getNamespacePrefix()
														.length() > 0) {
											path = "/"
													+ elTmp.getNamespacePrefix()
													+ ":" + elTmp.getName()
													+ path;
										} else {
											path = "/" + elTmp.getName() + path;
										}
										elTmp = elTmp.getParent();
									}
									defualtNSPath.add(path);
								} else {
									xmlNameSpaceMap.put(ns.getPrefix(),
											ns.getURI());
								}

							}
							for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
									.elements()) {
								countNSMap(e);
							}
						}

						public String addDefaultNSPrefix(String path,
								String loopPath) {
							if (defualtNSPath.size() > 0) {
								String fullPath = loopPath;
								if (!path.equals(fullPath)) {
									for (String tmp : path.split("/")) {
										if (("..").equals(tmp)) {
											fullPath = fullPath.substring(0,
													fullPath.lastIndexOf("/"));
										} else {
											fullPath += "/" + tmp;
										}
									}
								}
								int size = fullPath.split("/").length - 1;
								if (size < 0) {
									return fullPath;
								}
								int[] indexs = new int[size];
								java.util.Arrays.fill(indexs, -1);
								int length = 0;
								for (int i = 0; i < defualtNSPath.size(); i++) {
									if (defualtNSPath.get(i).length() > length
											&& fullPath
													.startsWith(defualtNSPath
															.get(i))) {
										java.util.Arrays
												.fill(indexs,
														defualtNSPath.get(i)
																.split("/").length - 2,
														indexs.length, i);
										length = defualtNSPath.get(i).length();
									}
								}

								StringBuilder newPath = new StringBuilder();
								String[] pathStrs = path.split("/");
								for (int i = 0; i < pathStrs.length; i++) {
									String tmp = pathStrs[i];
									if (newPath.length() > 0) {
										newPath.append("/");
									}
									if (tmp.length() > 0
											&& tmp.indexOf(":") == -1
											&& tmp.indexOf(".") == -1 /*
																	 * &&
																	 * tmp.indexOf
																	 * ("@") ==
																	 * -1
																	 */) {
										int index = indexs[i + indexs.length
												- pathStrs.length];
										if (index >= 0) {
											// ==== add by wliu to support both
											// filter and functions==
											if (tmp.indexOf("[") > 0
													&& tmp.indexOf("]") > tmp
															.indexOf("[")) {// include
																			// filter
												String tmpStr = replaceElementWithNS(
														tmp, "pre" + index
																+ ":");
												newPath.append(tmpStr);
											} else {
												if (tmp.indexOf("@") != -1
														|| tmp.indexOf("(") < tmp
																.indexOf(")")) { // include
																					// attribute
													newPath.append(tmp);
												} else {
													// ==add end=======
													newPath.append("pre")
															.append(index)
															.append(":")
															.append(tmp);
												}
											}
										} else {
											newPath.append(tmp);
										}
									} else {
										newPath.append(tmp);
									}
								}
								return newPath.toString();
							}
							return path;
						}

						private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
						private java.util.regex.Pattern pattern = java.util.regex.Pattern
								.compile(matches);

						private String replaceElementWithNS(String global,
								String pre) {

							java.util.regex.Matcher match = pattern
									.matcher(global);
							StringBuffer sb = new StringBuffer();
							match.reset();
							while (match.find()) {
								String group = match.group();
								String tmp = "";
								if (group.toLowerCase().matches(
										"\\b(div|mod|and|or)\\b.*")
										|| group.matches("@.*")) {
									tmp = group;
								} else {
									tmp = tmp + pre + group;
								}
								match.appendReplacement(sb, tmp);
							}
							match.appendTail(sb);

							return sb.toString();
						}

					}

					class XML_API_tFileInputXML_10 {
						public boolean isDefNull(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							if (node != null
									&& node instanceof org.dom4j.Element) {
								org.dom4j.Attribute attri = ((org.dom4j.Element) node)
										.attribute("nil");
								if (attri != null
										&& ("true").equals(attri.getText())) {
									return true;
								}
							}
							return false;
						}

						public boolean isMissing(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							return node == null ? true : false;
						}

						public boolean isEmpty(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							if (node != null) {
								return node.getText().length() == 0;
							}
							return false;
						}
					}

					org.dom4j.io.SAXReader reader_tFileInputXML_10 = new org.dom4j.io.SAXReader();
					reader_tFileInputXML_10
							.setEntityResolver(new IgnoreDTDEntityResolver_tFileInputXML_10());
					Object filename_tFileInputXML_10 = null;
					try {
						filename_tFileInputXML_10 = context.currentFile;
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}
					if (filename_tFileInputXML_10 != null
							&& filename_tFileInputXML_10 instanceof String
							&& filename_tFileInputXML_10.toString().startsWith(
									"//")) {
						if (!isWindows_tFileInputXML_10) {
							filename_tFileInputXML_10 = filename_tFileInputXML_10
									.toString().replaceFirst("//", "/");
						}
					}

					boolean isValidFile_tFileInputXML_10 = true;
					org.dom4j.Document doc_tFileInputXML_10 = null;
					java.io.Closeable toClose_tFileInputXML_10 = null;
					try {
						if (filename_tFileInputXML_10 instanceof java.io.InputStream) {
							java.io.InputStream inputStream_tFileInputXML_10 = (java.io.InputStream) filename_tFileInputXML_10;
							toClose_tFileInputXML_10 = inputStream_tFileInputXML_10;
							doc_tFileInputXML_10 = reader_tFileInputXML_10
									.read(inputStream_tFileInputXML_10);
						} else {
							java.io.Reader unicodeReader_tFileInputXML_10 = new UnicodeReader(
									new java.io.FileInputStream(String
											.valueOf(filename_tFileInputXML_10)),
									context.encoding);
							toClose_tFileInputXML_10 = unicodeReader_tFileInputXML_10;
							org.xml.sax.InputSource in_tFileInputXML_10 = new org.xml.sax.InputSource(
									unicodeReader_tFileInputXML_10);
							doc_tFileInputXML_10 = reader_tFileInputXML_10
									.read(in_tFileInputXML_10);
						}
					} catch (java.lang.Exception e) {
						System.err.println(e.getMessage());
						isValidFile_tFileInputXML_10 = false;
					} finally {
						if (toClose_tFileInputXML_10 != null) {
							toClose_tFileInputXML_10.close();
						}
					}
					if (isValidFile_tFileInputXML_10) {
						NameSpaceTool_tFileInputXML_10 nsTool_tFileInputXML_10 = new NameSpaceTool_tFileInputXML_10();
						nsTool_tFileInputXML_10.countNSMap(doc_tFileInputXML_10
								.getRootElement());
						java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_10 = nsTool_tFileInputXML_10.xmlNameSpaceMap;

						org.dom4j.XPath x_tFileInputXML_10 = doc_tFileInputXML_10
								.createXPath(nsTool_tFileInputXML_10
										.addDefaultNSPrefix(
												"/ODM/Study/MetaDataVersion/StudyEventDef",
												"/ODM/Study/MetaDataVersion/StudyEventDef"));
						x_tFileInputXML_10
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_10);

						java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_10 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tFileInputXML_10
								.selectNodes(doc_tFileInputXML_10);
						XML_API_tFileInputXML_10 xml_api_tFileInputXML_10 = new XML_API_tFileInputXML_10();
						String str_tFileInputXML_10 = "";
						org.dom4j.Node node_tFileInputXML_10 = null;

						// init all mapping xpaths
						org.dom4j.XPath xTmp0_tFileInputXML_10 = org.dom4j.DocumentHelper
								.createXPath(nsTool_tFileInputXML_10
										.addDefaultNSPrefix("@OID",
												"/ODM/Study/MetaDataVersion/StudyEventDef"));
						xTmp0_tFileInputXML_10
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_10);
						org.dom4j.XPath xTmp1_tFileInputXML_10 = org.dom4j.DocumentHelper
								.createXPath(nsTool_tFileInputXML_10
										.addDefaultNSPrefix("@Name",
												"/ODM/Study/MetaDataVersion/StudyEventDef"));
						xTmp1_tFileInputXML_10
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_10);

						for (org.dom4j.tree.AbstractNode temp_tFileInputXML_10 : nodeList_tFileInputXML_10) {
							nb_line_tFileInputXML_10++;
							row18 = null;
							boolean whetherReject_tFileInputXML_10 = false;
							row18 = new row18Struct();
							try {
								Object obj0_tFileInputXML_10 = xTmp0_tFileInputXML_10
										.evaluate(temp_tFileInputXML_10);
								if (obj0_tFileInputXML_10 == null) {
									node_tFileInputXML_10 = null;
									str_tFileInputXML_10 = "";

								} else if (obj0_tFileInputXML_10 instanceof org.dom4j.Node) {
									node_tFileInputXML_10 = (org.dom4j.Node) obj0_tFileInputXML_10;
									str_tFileInputXML_10 = org.jaxen.function.StringFunction
											.evaluate(
													node_tFileInputXML_10,
													org.jaxen.dom4j.DocumentNavigator
															.getInstance());
								} else if (obj0_tFileInputXML_10 instanceof String
										|| obj0_tFileInputXML_10 instanceof Number) {
									node_tFileInputXML_10 = temp_tFileInputXML_10;
									str_tFileInputXML_10 = String
											.valueOf(obj0_tFileInputXML_10);
								} else if (obj0_tFileInputXML_10 instanceof java.util.List) {
									java.util.List<org.dom4j.Node> nodes_tFileInputXML_10 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_10;
									node_tFileInputXML_10 = nodes_tFileInputXML_10
											.size() > 0 ? nodes_tFileInputXML_10
											.get(0) : null;
									str_tFileInputXML_10 = node_tFileInputXML_10 == null ? ""
											: org.jaxen.function.StringFunction
													.evaluate(
															node_tFileInputXML_10,
															org.jaxen.dom4j.DocumentNavigator
																	.getInstance());
								}
								if (xml_api_tFileInputXML_10
										.isDefNull(node_tFileInputXML_10)) {
									row18.VisitOID = null;
								} else if (xml_api_tFileInputXML_10
										.isEmpty(node_tFileInputXML_10)) {
									row18.VisitOID = "";
								} else if (xml_api_tFileInputXML_10
										.isMissing(node_tFileInputXML_10)) {
									row18.VisitOID = null;
								} else {
									row18.VisitOID = str_tFileInputXML_10;
								}
								Object obj1_tFileInputXML_10 = xTmp1_tFileInputXML_10
										.evaluate(temp_tFileInputXML_10);
								if (obj1_tFileInputXML_10 == null) {
									node_tFileInputXML_10 = null;
									str_tFileInputXML_10 = "";

								} else if (obj1_tFileInputXML_10 instanceof org.dom4j.Node) {
									node_tFileInputXML_10 = (org.dom4j.Node) obj1_tFileInputXML_10;
									str_tFileInputXML_10 = org.jaxen.function.StringFunction
											.evaluate(
													node_tFileInputXML_10,
													org.jaxen.dom4j.DocumentNavigator
															.getInstance());
								} else if (obj1_tFileInputXML_10 instanceof String
										|| obj1_tFileInputXML_10 instanceof Number) {
									node_tFileInputXML_10 = temp_tFileInputXML_10;
									str_tFileInputXML_10 = String
											.valueOf(obj1_tFileInputXML_10);
								} else if (obj1_tFileInputXML_10 instanceof java.util.List) {
									java.util.List<org.dom4j.Node> nodes_tFileInputXML_10 = (java.util.List<org.dom4j.Node>) obj1_tFileInputXML_10;
									node_tFileInputXML_10 = nodes_tFileInputXML_10
											.size() > 0 ? nodes_tFileInputXML_10
											.get(0) : null;
									str_tFileInputXML_10 = node_tFileInputXML_10 == null ? ""
											: org.jaxen.function.StringFunction
													.evaluate(
															node_tFileInputXML_10,
															org.jaxen.dom4j.DocumentNavigator
																	.getInstance());
								}
								if (xml_api_tFileInputXML_10
										.isDefNull(node_tFileInputXML_10)) {
									row18.Name = null;
								} else if (xml_api_tFileInputXML_10
										.isEmpty(node_tFileInputXML_10)) {
									row18.Name = "";
								} else if (xml_api_tFileInputXML_10
										.isMissing(node_tFileInputXML_10)) {
									row18.Name = null;
								} else {
									row18.Name = str_tFileInputXML_10;
								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputXML_10 = true;
								System.err.println(e.getMessage());
								row18 = null;
							}

							/**
							 * [tFileInputXML_10 begin ] stop
							 */
							/**
							 * [tFileInputXML_10 main ] start
							 */

							currentComponent = "tFileInputXML_10";

							tos_count_tFileInputXML_10++;

							/**
							 * [tFileInputXML_10 main ] stop
							 */
							// Start of branch "row18"
							if (row18 != null) {

								/**
								 * [tFileOutputDelimited_18 main ] start
								 */

								currentComponent = "tFileOutputDelimited_18";

								StringBuilder sb_tFileOutputDelimited_18 = new StringBuilder();

								if (row18.VisitOID != null) {

									sb_tFileOutputDelimited_18.append(

									row18.VisitOID

									);

								}

								sb_tFileOutputDelimited_18
										.append(OUT_DELIM_tFileOutputDelimited_18);

								if (row18.Name != null) {

									sb_tFileOutputDelimited_18.append(

									row18.Name

									);

								}

								sb_tFileOutputDelimited_18
										.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_18);

								nb_line_tFileOutputDelimited_18++;

								outtFileOutputDelimited_18
										.write(sb_tFileOutputDelimited_18
												.toString());

								tos_count_tFileOutputDelimited_18++;

								/**
								 * [tFileOutputDelimited_18 main ] stop
								 */

							} // End of branch "row18"

							/**
							 * [tFileInputXML_10 end ] start
							 */

							currentComponent = "tFileInputXML_10";

						}
					}
					globalMap.put("tFileInputXML_10_NB_LINE",
							nb_line_tFileInputXML_10);

					ok_Hash.put("tFileInputXML_10", true);
					end_Hash.put("tFileInputXML_10", System.currentTimeMillis());

					/**
					 * [tFileInputXML_10 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_18 end ] start
					 */

					currentComponent = "tFileOutputDelimited_18";

				} finally {
					if (outtFileOutputDelimited_18 != null) {
						outtFileOutputDelimited_18.flush();
						outtFileOutputDelimited_18.close();
					}
					globalMap.put("tFileOutputDelimited_18_NB_LINE",
							nb_line_tFileOutputDelimited_18);
					globalMap.put("tFileOutputDelimited_18_FILE_NAME",
							fileName_tFileOutputDelimited_18);
				} // finally

				ok_Hash.put("tFileOutputDelimited_18", true);
				end_Hash.put("tFileOutputDelimited_18",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_18 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputXML_10:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputXML_11Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputXML_10_SUBPROCESS_STATE", 1);
	}

	public static class row19Struct implements
			routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String FormOID;

		public String getFormOID() {
			return this.FormOID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.FormOID = readString(dis);

					this.Name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FormOID, dos);

				// String

				writeString(this.Name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FormOID=" + FormOID);
			sb.append(",Name=" + Name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputXML_11Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputXML_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row19Struct row19 = new row19Struct();

				/**
				 * [tFileOutputDelimited_19 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_19", false);
				start_Hash.put("tFileOutputDelimited_19",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_19";

				int tos_count_tFileOutputDelimited_19 = 0;

				String fileName_tFileOutputDelimited_19 = "";
				fileName_tFileOutputDelimited_19 = (new java.io.File(
						((String) globalMap
								.get("tCreateTemporaryFile_9_FILEPATH"))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_19 = null;
				String extension_tFileOutputDelimited_19 = null;
				String directory_tFileOutputDelimited_19 = null;
				if ((fileName_tFileOutputDelimited_19.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_19.lastIndexOf(".") < fileName_tFileOutputDelimited_19
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_19 = fileName_tFileOutputDelimited_19;
						extension_tFileOutputDelimited_19 = "";
					} else {
						fullName_tFileOutputDelimited_19 = fileName_tFileOutputDelimited_19
								.substring(0, fileName_tFileOutputDelimited_19
										.lastIndexOf("."));
						extension_tFileOutputDelimited_19 = fileName_tFileOutputDelimited_19
								.substring(fileName_tFileOutputDelimited_19
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_19 = fileName_tFileOutputDelimited_19
							.substring(0, fileName_tFileOutputDelimited_19
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_19.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_19 = fileName_tFileOutputDelimited_19
								.substring(0, fileName_tFileOutputDelimited_19
										.lastIndexOf("."));
						extension_tFileOutputDelimited_19 = fileName_tFileOutputDelimited_19
								.substring(fileName_tFileOutputDelimited_19
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_19 = fileName_tFileOutputDelimited_19;
						extension_tFileOutputDelimited_19 = "";
					}
					directory_tFileOutputDelimited_19 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_19 = true;
				java.io.File filetFileOutputDelimited_19 = new java.io.File(
						fileName_tFileOutputDelimited_19);
				globalMap.put("tFileOutputDelimited_19_FILE_NAME",
						fileName_tFileOutputDelimited_19);

				int nb_line_tFileOutputDelimited_19 = 0;
				int splitEvery_tFileOutputDelimited_19 = 1000;
				int splitedFileNo_tFileOutputDelimited_19 = 0;
				int currentRow_tFileOutputDelimited_19 = 0;

				final String OUT_DELIM_tFileOutputDelimited_19 = /**
				 * Start field
				 * tFileOutputDelimited_19:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_19:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_19 = /**
				 * Start
				 * field tFileOutputDelimited_19:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_19:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_19 != null
						&& directory_tFileOutputDelimited_19.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_19 = new java.io.File(
							directory_tFileOutputDelimited_19);
					if (!dir_tFileOutputDelimited_19.exists()) {
						dir_tFileOutputDelimited_19.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_19 = null;
				try {
					outtFileOutputDelimited_19 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_19,
											false), "ISO-8859-15"));

					/**
					 * [tFileOutputDelimited_19 begin ] stop
					 */

					/**
					 * [tFileInputXML_11 begin ] start
					 */

					ok_Hash.put("tFileInputXML_11", false);
					start_Hash.put("tFileInputXML_11",
							System.currentTimeMillis());
					currentComponent = "tFileInputXML_11";

					int tos_count_tFileInputXML_11 = 0;

					int nb_line_tFileInputXML_11 = 0;

					class IgnoreDTDEntityResolver_tFileInputXML_11 implements
							org.xml.sax.EntityResolver {

						public org.xml.sax.InputSource resolveEntity(
								String publicId, String systemId)
								throws org.xml.sax.SAXException,
								java.io.IOException {
							return new org.xml.sax.InputSource(
									new java.io.ByteArrayInputStream(
											"<?xml version='1.0' encoding='UTF-8'?>"
													.getBytes()));
						}

					}
					String os_tFileInputXML_11 = System.getProperty("os.name")
							.toLowerCase();
					boolean isWindows_tFileInputXML_11 = false;
					if (os_tFileInputXML_11.indexOf("windows") > -1
							|| os_tFileInputXML_11.indexOf("nt") > -1) {
						isWindows_tFileInputXML_11 = true;
					}
					class NameSpaceTool_tFileInputXML_11 {

						public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

						private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

						public void countNSMap(org.dom4j.Element el) {
							for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
									.declaredNamespaces()) {
								if (ns.getPrefix().trim().length() == 0) {
									xmlNameSpaceMap.put(
											"pre" + defualtNSPath.size(),
											ns.getURI());
									String path = "";
									org.dom4j.Element elTmp = el;
									while (elTmp != null) {
										if (elTmp.getNamespacePrefix() != null
												&& elTmp.getNamespacePrefix()
														.length() > 0) {
											path = "/"
													+ elTmp.getNamespacePrefix()
													+ ":" + elTmp.getName()
													+ path;
										} else {
											path = "/" + elTmp.getName() + path;
										}
										elTmp = elTmp.getParent();
									}
									defualtNSPath.add(path);
								} else {
									xmlNameSpaceMap.put(ns.getPrefix(),
											ns.getURI());
								}

							}
							for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
									.elements()) {
								countNSMap(e);
							}
						}

						public String addDefaultNSPrefix(String path,
								String loopPath) {
							if (defualtNSPath.size() > 0) {
								String fullPath = loopPath;
								if (!path.equals(fullPath)) {
									for (String tmp : path.split("/")) {
										if (("..").equals(tmp)) {
											fullPath = fullPath.substring(0,
													fullPath.lastIndexOf("/"));
										} else {
											fullPath += "/" + tmp;
										}
									}
								}
								int size = fullPath.split("/").length - 1;
								if (size < 0) {
									return fullPath;
								}
								int[] indexs = new int[size];
								java.util.Arrays.fill(indexs, -1);
								int length = 0;
								for (int i = 0; i < defualtNSPath.size(); i++) {
									if (defualtNSPath.get(i).length() > length
											&& fullPath
													.startsWith(defualtNSPath
															.get(i))) {
										java.util.Arrays
												.fill(indexs,
														defualtNSPath.get(i)
																.split("/").length - 2,
														indexs.length, i);
										length = defualtNSPath.get(i).length();
									}
								}

								StringBuilder newPath = new StringBuilder();
								String[] pathStrs = path.split("/");
								for (int i = 0; i < pathStrs.length; i++) {
									String tmp = pathStrs[i];
									if (newPath.length() > 0) {
										newPath.append("/");
									}
									if (tmp.length() > 0
											&& tmp.indexOf(":") == -1
											&& tmp.indexOf(".") == -1 /*
																	 * &&
																	 * tmp.indexOf
																	 * ("@") ==
																	 * -1
																	 */) {
										int index = indexs[i + indexs.length
												- pathStrs.length];
										if (index >= 0) {
											// ==== add by wliu to support both
											// filter and functions==
											if (tmp.indexOf("[") > 0
													&& tmp.indexOf("]") > tmp
															.indexOf("[")) {// include
																			// filter
												String tmpStr = replaceElementWithNS(
														tmp, "pre" + index
																+ ":");
												newPath.append(tmpStr);
											} else {
												if (tmp.indexOf("@") != -1
														|| tmp.indexOf("(") < tmp
																.indexOf(")")) { // include
																					// attribute
													newPath.append(tmp);
												} else {
													// ==add end=======
													newPath.append("pre")
															.append(index)
															.append(":")
															.append(tmp);
												}
											}
										} else {
											newPath.append(tmp);
										}
									} else {
										newPath.append(tmp);
									}
								}
								return newPath.toString();
							}
							return path;
						}

						private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
						private java.util.regex.Pattern pattern = java.util.regex.Pattern
								.compile(matches);

						private String replaceElementWithNS(String global,
								String pre) {

							java.util.regex.Matcher match = pattern
									.matcher(global);
							StringBuffer sb = new StringBuffer();
							match.reset();
							while (match.find()) {
								String group = match.group();
								String tmp = "";
								if (group.toLowerCase().matches(
										"\\b(div|mod|and|or)\\b.*")
										|| group.matches("@.*")) {
									tmp = group;
								} else {
									tmp = tmp + pre + group;
								}
								match.appendReplacement(sb, tmp);
							}
							match.appendTail(sb);

							return sb.toString();
						}

					}

					class XML_API_tFileInputXML_11 {
						public boolean isDefNull(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							if (node != null
									&& node instanceof org.dom4j.Element) {
								org.dom4j.Attribute attri = ((org.dom4j.Element) node)
										.attribute("nil");
								if (attri != null
										&& ("true").equals(attri.getText())) {
									return true;
								}
							}
							return false;
						}

						public boolean isMissing(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							return node == null ? true : false;
						}

						public boolean isEmpty(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							if (node != null) {
								return node.getText().length() == 0;
							}
							return false;
						}
					}

					org.dom4j.io.SAXReader reader_tFileInputXML_11 = new org.dom4j.io.SAXReader();
					reader_tFileInputXML_11
							.setEntityResolver(new IgnoreDTDEntityResolver_tFileInputXML_11());
					Object filename_tFileInputXML_11 = null;
					try {
						filename_tFileInputXML_11 = context.currentFile;
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}
					if (filename_tFileInputXML_11 != null
							&& filename_tFileInputXML_11 instanceof String
							&& filename_tFileInputXML_11.toString().startsWith(
									"//")) {
						if (!isWindows_tFileInputXML_11) {
							filename_tFileInputXML_11 = filename_tFileInputXML_11
									.toString().replaceFirst("//", "/");
						}
					}

					boolean isValidFile_tFileInputXML_11 = true;
					org.dom4j.Document doc_tFileInputXML_11 = null;
					java.io.Closeable toClose_tFileInputXML_11 = null;
					try {
						if (filename_tFileInputXML_11 instanceof java.io.InputStream) {
							java.io.InputStream inputStream_tFileInputXML_11 = (java.io.InputStream) filename_tFileInputXML_11;
							toClose_tFileInputXML_11 = inputStream_tFileInputXML_11;
							doc_tFileInputXML_11 = reader_tFileInputXML_11
									.read(inputStream_tFileInputXML_11);
						} else {
							java.io.Reader unicodeReader_tFileInputXML_11 = new UnicodeReader(
									new java.io.FileInputStream(String
											.valueOf(filename_tFileInputXML_11)),
									context.encoding);
							toClose_tFileInputXML_11 = unicodeReader_tFileInputXML_11;
							org.xml.sax.InputSource in_tFileInputXML_11 = new org.xml.sax.InputSource(
									unicodeReader_tFileInputXML_11);
							doc_tFileInputXML_11 = reader_tFileInputXML_11
									.read(in_tFileInputXML_11);
						}
					} catch (java.lang.Exception e) {
						System.err.println(e.getMessage());
						isValidFile_tFileInputXML_11 = false;
					} finally {
						if (toClose_tFileInputXML_11 != null) {
							toClose_tFileInputXML_11.close();
						}
					}
					if (isValidFile_tFileInputXML_11) {
						NameSpaceTool_tFileInputXML_11 nsTool_tFileInputXML_11 = new NameSpaceTool_tFileInputXML_11();
						nsTool_tFileInputXML_11.countNSMap(doc_tFileInputXML_11
								.getRootElement());
						java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_11 = nsTool_tFileInputXML_11.xmlNameSpaceMap;

						org.dom4j.XPath x_tFileInputXML_11 = doc_tFileInputXML_11
								.createXPath(nsTool_tFileInputXML_11
										.addDefaultNSPrefix(
												"/ODM/Study/MetaDataVersion/FormDef",
												"/ODM/Study/MetaDataVersion/FormDef"));
						x_tFileInputXML_11
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_11);

						java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_11 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tFileInputXML_11
								.selectNodes(doc_tFileInputXML_11);
						XML_API_tFileInputXML_11 xml_api_tFileInputXML_11 = new XML_API_tFileInputXML_11();
						String str_tFileInputXML_11 = "";
						org.dom4j.Node node_tFileInputXML_11 = null;

						// init all mapping xpaths
						org.dom4j.XPath xTmp0_tFileInputXML_11 = org.dom4j.DocumentHelper
								.createXPath(nsTool_tFileInputXML_11
										.addDefaultNSPrefix("@OID",
												"/ODM/Study/MetaDataVersion/FormDef"));
						xTmp0_tFileInputXML_11
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_11);
						org.dom4j.XPath xTmp1_tFileInputXML_11 = org.dom4j.DocumentHelper
								.createXPath(nsTool_tFileInputXML_11
										.addDefaultNSPrefix("@Name",
												"/ODM/Study/MetaDataVersion/FormDef"));
						xTmp1_tFileInputXML_11
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_11);

						for (org.dom4j.tree.AbstractNode temp_tFileInputXML_11 : nodeList_tFileInputXML_11) {
							nb_line_tFileInputXML_11++;
							row19 = null;
							boolean whetherReject_tFileInputXML_11 = false;
							row19 = new row19Struct();
							try {
								Object obj0_tFileInputXML_11 = xTmp0_tFileInputXML_11
										.evaluate(temp_tFileInputXML_11);
								if (obj0_tFileInputXML_11 == null) {
									node_tFileInputXML_11 = null;
									str_tFileInputXML_11 = "";

								} else if (obj0_tFileInputXML_11 instanceof org.dom4j.Node) {
									node_tFileInputXML_11 = (org.dom4j.Node) obj0_tFileInputXML_11;
									str_tFileInputXML_11 = org.jaxen.function.StringFunction
											.evaluate(
													node_tFileInputXML_11,
													org.jaxen.dom4j.DocumentNavigator
															.getInstance());
								} else if (obj0_tFileInputXML_11 instanceof String
										|| obj0_tFileInputXML_11 instanceof Number) {
									node_tFileInputXML_11 = temp_tFileInputXML_11;
									str_tFileInputXML_11 = String
											.valueOf(obj0_tFileInputXML_11);
								} else if (obj0_tFileInputXML_11 instanceof java.util.List) {
									java.util.List<org.dom4j.Node> nodes_tFileInputXML_11 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_11;
									node_tFileInputXML_11 = nodes_tFileInputXML_11
											.size() > 0 ? nodes_tFileInputXML_11
											.get(0) : null;
									str_tFileInputXML_11 = node_tFileInputXML_11 == null ? ""
											: org.jaxen.function.StringFunction
													.evaluate(
															node_tFileInputXML_11,
															org.jaxen.dom4j.DocumentNavigator
																	.getInstance());
								}
								if (xml_api_tFileInputXML_11
										.isDefNull(node_tFileInputXML_11)) {
									row19.FormOID = null;
								} else if (xml_api_tFileInputXML_11
										.isEmpty(node_tFileInputXML_11)) {
									row19.FormOID = "";
								} else if (xml_api_tFileInputXML_11
										.isMissing(node_tFileInputXML_11)) {
									row19.FormOID = null;
								} else {
									row19.FormOID = str_tFileInputXML_11;
								}
								Object obj1_tFileInputXML_11 = xTmp1_tFileInputXML_11
										.evaluate(temp_tFileInputXML_11);
								if (obj1_tFileInputXML_11 == null) {
									node_tFileInputXML_11 = null;
									str_tFileInputXML_11 = "";

								} else if (obj1_tFileInputXML_11 instanceof org.dom4j.Node) {
									node_tFileInputXML_11 = (org.dom4j.Node) obj1_tFileInputXML_11;
									str_tFileInputXML_11 = org.jaxen.function.StringFunction
											.evaluate(
													node_tFileInputXML_11,
													org.jaxen.dom4j.DocumentNavigator
															.getInstance());
								} else if (obj1_tFileInputXML_11 instanceof String
										|| obj1_tFileInputXML_11 instanceof Number) {
									node_tFileInputXML_11 = temp_tFileInputXML_11;
									str_tFileInputXML_11 = String
											.valueOf(obj1_tFileInputXML_11);
								} else if (obj1_tFileInputXML_11 instanceof java.util.List) {
									java.util.List<org.dom4j.Node> nodes_tFileInputXML_11 = (java.util.List<org.dom4j.Node>) obj1_tFileInputXML_11;
									node_tFileInputXML_11 = nodes_tFileInputXML_11
											.size() > 0 ? nodes_tFileInputXML_11
											.get(0) : null;
									str_tFileInputXML_11 = node_tFileInputXML_11 == null ? ""
											: org.jaxen.function.StringFunction
													.evaluate(
															node_tFileInputXML_11,
															org.jaxen.dom4j.DocumentNavigator
																	.getInstance());
								}
								if (xml_api_tFileInputXML_11
										.isDefNull(node_tFileInputXML_11)) {
									row19.Name = null;
								} else if (xml_api_tFileInputXML_11
										.isEmpty(node_tFileInputXML_11)) {
									row19.Name = "";
								} else if (xml_api_tFileInputXML_11
										.isMissing(node_tFileInputXML_11)) {
									row19.Name = null;
								} else {
									row19.Name = str_tFileInputXML_11;
								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputXML_11 = true;
								System.err.println(e.getMessage());
								row19 = null;
							}

							/**
							 * [tFileInputXML_11 begin ] stop
							 */
							/**
							 * [tFileInputXML_11 main ] start
							 */

							currentComponent = "tFileInputXML_11";

							tos_count_tFileInputXML_11++;

							/**
							 * [tFileInputXML_11 main ] stop
							 */
							// Start of branch "row19"
							if (row19 != null) {

								/**
								 * [tFileOutputDelimited_19 main ] start
								 */

								currentComponent = "tFileOutputDelimited_19";

								StringBuilder sb_tFileOutputDelimited_19 = new StringBuilder();

								if (row19.FormOID != null) {

									sb_tFileOutputDelimited_19.append(

									row19.FormOID

									);

								}

								sb_tFileOutputDelimited_19
										.append(OUT_DELIM_tFileOutputDelimited_19);

								if (row19.Name != null) {

									sb_tFileOutputDelimited_19.append(

									row19.Name

									);

								}

								sb_tFileOutputDelimited_19
										.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_19);

								nb_line_tFileOutputDelimited_19++;

								outtFileOutputDelimited_19
										.write(sb_tFileOutputDelimited_19
												.toString());

								tos_count_tFileOutputDelimited_19++;

								/**
								 * [tFileOutputDelimited_19 main ] stop
								 */

							} // End of branch "row19"

							/**
							 * [tFileInputXML_11 end ] start
							 */

							currentComponent = "tFileInputXML_11";

						}
					}
					globalMap.put("tFileInputXML_11_NB_LINE",
							nb_line_tFileInputXML_11);

					ok_Hash.put("tFileInputXML_11", true);
					end_Hash.put("tFileInputXML_11", System.currentTimeMillis());

					/**
					 * [tFileInputXML_11 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_19 end ] start
					 */

					currentComponent = "tFileOutputDelimited_19";

				} finally {
					if (outtFileOutputDelimited_19 != null) {
						outtFileOutputDelimited_19.flush();
						outtFileOutputDelimited_19.close();
					}
					globalMap.put("tFileOutputDelimited_19_NB_LINE",
							nb_line_tFileOutputDelimited_19);
					globalMap.put("tFileOutputDelimited_19_FILE_NAME",
							fileName_tFileOutputDelimited_19);
				} // finally

				ok_Hash.put("tFileOutputDelimited_19", true);
				end_Hash.put("tFileOutputDelimited_19",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_19 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputXML_11:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputXML_13Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputXML_11_SUBPROCESS_STATE", 1);
	}

	public static class row20Struct implements
			routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_IDRT52_ODM_Create_Ontology = new byte[0];
		static byte[] commonByteArray_IDRT52_ODM_Create_Ontology = new byte[0];

		public String ItemGroupOID;

		public String getItemGroupOID() {
			return this.ItemGroupOID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_IDRT52_ODM_Create_Ontology.length) {
					if (length < 1024
							&& commonByteArray_IDRT52_ODM_Create_Ontology.length == 0) {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[1024];
					} else {
						commonByteArray_IDRT52_ODM_Create_Ontology = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_IDRT52_ODM_Create_Ontology, 0,
						length);
				strReturn = new String(
						commonByteArray_IDRT52_ODM_Create_Ontology, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_IDRT52_ODM_Create_Ontology) {

				try {

					int length = 0;

					this.ItemGroupOID = readString(dis);

					this.Name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ItemGroupOID, dos);

				// String

				writeString(this.Name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ItemGroupOID=" + ItemGroupOID);
			sb.append(",Name=" + Name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputXML_13Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputXML_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row20Struct row20 = new row20Struct();

				/**
				 * [tFileOutputDelimited_20 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_20", false);
				start_Hash.put("tFileOutputDelimited_20",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_20";

				int tos_count_tFileOutputDelimited_20 = 0;

				String fileName_tFileOutputDelimited_20 = "";
				fileName_tFileOutputDelimited_20 = (new java.io.File(
						((String) globalMap
								.get("tCreateTemporaryFile_10_FILEPATH"))))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_20 = null;
				String extension_tFileOutputDelimited_20 = null;
				String directory_tFileOutputDelimited_20 = null;
				if ((fileName_tFileOutputDelimited_20.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_20.lastIndexOf(".") < fileName_tFileOutputDelimited_20
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_20 = fileName_tFileOutputDelimited_20;
						extension_tFileOutputDelimited_20 = "";
					} else {
						fullName_tFileOutputDelimited_20 = fileName_tFileOutputDelimited_20
								.substring(0, fileName_tFileOutputDelimited_20
										.lastIndexOf("."));
						extension_tFileOutputDelimited_20 = fileName_tFileOutputDelimited_20
								.substring(fileName_tFileOutputDelimited_20
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_20 = fileName_tFileOutputDelimited_20
							.substring(0, fileName_tFileOutputDelimited_20
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_20.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_20 = fileName_tFileOutputDelimited_20
								.substring(0, fileName_tFileOutputDelimited_20
										.lastIndexOf("."));
						extension_tFileOutputDelimited_20 = fileName_tFileOutputDelimited_20
								.substring(fileName_tFileOutputDelimited_20
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_20 = fileName_tFileOutputDelimited_20;
						extension_tFileOutputDelimited_20 = "";
					}
					directory_tFileOutputDelimited_20 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_20 = true;
				java.io.File filetFileOutputDelimited_20 = new java.io.File(
						fileName_tFileOutputDelimited_20);
				globalMap.put("tFileOutputDelimited_20_FILE_NAME",
						fileName_tFileOutputDelimited_20);

				int nb_line_tFileOutputDelimited_20 = 0;
				int splitEvery_tFileOutputDelimited_20 = 1000;
				int splitedFileNo_tFileOutputDelimited_20 = 0;
				int currentRow_tFileOutputDelimited_20 = 0;

				final String OUT_DELIM_tFileOutputDelimited_20 = /**
				 * Start field
				 * tFileOutputDelimited_20:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_20:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_20 = /**
				 * Start
				 * field tFileOutputDelimited_20:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_20:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_20 != null
						&& directory_tFileOutputDelimited_20.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_20 = new java.io.File(
							directory_tFileOutputDelimited_20);
					if (!dir_tFileOutputDelimited_20.exists()) {
						dir_tFileOutputDelimited_20.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_20 = null;
				try {
					outtFileOutputDelimited_20 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_20,
											false), "ISO-8859-15"));

					/**
					 * [tFileOutputDelimited_20 begin ] stop
					 */

					/**
					 * [tFileInputXML_13 begin ] start
					 */

					ok_Hash.put("tFileInputXML_13", false);
					start_Hash.put("tFileInputXML_13",
							System.currentTimeMillis());
					currentComponent = "tFileInputXML_13";

					int tos_count_tFileInputXML_13 = 0;

					int nb_line_tFileInputXML_13 = 0;

					class IgnoreDTDEntityResolver_tFileInputXML_13 implements
							org.xml.sax.EntityResolver {

						public org.xml.sax.InputSource resolveEntity(
								String publicId, String systemId)
								throws org.xml.sax.SAXException,
								java.io.IOException {
							return new org.xml.sax.InputSource(
									new java.io.ByteArrayInputStream(
											"<?xml version='1.0' encoding='UTF-8'?>"
													.getBytes()));
						}

					}
					String os_tFileInputXML_13 = System.getProperty("os.name")
							.toLowerCase();
					boolean isWindows_tFileInputXML_13 = false;
					if (os_tFileInputXML_13.indexOf("windows") > -1
							|| os_tFileInputXML_13.indexOf("nt") > -1) {
						isWindows_tFileInputXML_13 = true;
					}
					class NameSpaceTool_tFileInputXML_13 {

						public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

						private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

						public void countNSMap(org.dom4j.Element el) {
							for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
									.declaredNamespaces()) {
								if (ns.getPrefix().trim().length() == 0) {
									xmlNameSpaceMap.put(
											"pre" + defualtNSPath.size(),
											ns.getURI());
									String path = "";
									org.dom4j.Element elTmp = el;
									while (elTmp != null) {
										if (elTmp.getNamespacePrefix() != null
												&& elTmp.getNamespacePrefix()
														.length() > 0) {
											path = "/"
													+ elTmp.getNamespacePrefix()
													+ ":" + elTmp.getName()
													+ path;
										} else {
											path = "/" + elTmp.getName() + path;
										}
										elTmp = elTmp.getParent();
									}
									defualtNSPath.add(path);
								} else {
									xmlNameSpaceMap.put(ns.getPrefix(),
											ns.getURI());
								}

							}
							for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
									.elements()) {
								countNSMap(e);
							}
						}

						public String addDefaultNSPrefix(String path,
								String loopPath) {
							if (defualtNSPath.size() > 0) {
								String fullPath = loopPath;
								if (!path.equals(fullPath)) {
									for (String tmp : path.split("/")) {
										if (("..").equals(tmp)) {
											fullPath = fullPath.substring(0,
													fullPath.lastIndexOf("/"));
										} else {
											fullPath += "/" + tmp;
										}
									}
								}
								int size = fullPath.split("/").length - 1;
								if (size < 0) {
									return fullPath;
								}
								int[] indexs = new int[size];
								java.util.Arrays.fill(indexs, -1);
								int length = 0;
								for (int i = 0; i < defualtNSPath.size(); i++) {
									if (defualtNSPath.get(i).length() > length
											&& fullPath
													.startsWith(defualtNSPath
															.get(i))) {
										java.util.Arrays
												.fill(indexs,
														defualtNSPath.get(i)
																.split("/").length - 2,
														indexs.length, i);
										length = defualtNSPath.get(i).length();
									}
								}

								StringBuilder newPath = new StringBuilder();
								String[] pathStrs = path.split("/");
								for (int i = 0; i < pathStrs.length; i++) {
									String tmp = pathStrs[i];
									if (newPath.length() > 0) {
										newPath.append("/");
									}
									if (tmp.length() > 0
											&& tmp.indexOf(":") == -1
											&& tmp.indexOf(".") == -1 /*
																	 * &&
																	 * tmp.indexOf
																	 * ("@") ==
																	 * -1
																	 */) {
										int index = indexs[i + indexs.length
												- pathStrs.length];
										if (index >= 0) {
											// ==== add by wliu to support both
											// filter and functions==
											if (tmp.indexOf("[") > 0
													&& tmp.indexOf("]") > tmp
															.indexOf("[")) {// include
																			// filter
												String tmpStr = replaceElementWithNS(
														tmp, "pre" + index
																+ ":");
												newPath.append(tmpStr);
											} else {
												if (tmp.indexOf("@") != -1
														|| tmp.indexOf("(") < tmp
																.indexOf(")")) { // include
																					// attribute
													newPath.append(tmp);
												} else {
													// ==add end=======
													newPath.append("pre")
															.append(index)
															.append(":")
															.append(tmp);
												}
											}
										} else {
											newPath.append(tmp);
										}
									} else {
										newPath.append(tmp);
									}
								}
								return newPath.toString();
							}
							return path;
						}

						private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
						private java.util.regex.Pattern pattern = java.util.regex.Pattern
								.compile(matches);

						private String replaceElementWithNS(String global,
								String pre) {

							java.util.regex.Matcher match = pattern
									.matcher(global);
							StringBuffer sb = new StringBuffer();
							match.reset();
							while (match.find()) {
								String group = match.group();
								String tmp = "";
								if (group.toLowerCase().matches(
										"\\b(div|mod|and|or)\\b.*")
										|| group.matches("@.*")) {
									tmp = group;
								} else {
									tmp = tmp + pre + group;
								}
								match.appendReplacement(sb, tmp);
							}
							match.appendTail(sb);

							return sb.toString();
						}

					}

					class XML_API_tFileInputXML_13 {
						public boolean isDefNull(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							if (node != null
									&& node instanceof org.dom4j.Element) {
								org.dom4j.Attribute attri = ((org.dom4j.Element) node)
										.attribute("nil");
								if (attri != null
										&& ("true").equals(attri.getText())) {
									return true;
								}
							}
							return false;
						}

						public boolean isMissing(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							return node == null ? true : false;
						}

						public boolean isEmpty(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							if (node != null) {
								return node.getText().length() == 0;
							}
							return false;
						}
					}

					org.dom4j.io.SAXReader reader_tFileInputXML_13 = new org.dom4j.io.SAXReader();
					reader_tFileInputXML_13
							.setEntityResolver(new IgnoreDTDEntityResolver_tFileInputXML_13());
					Object filename_tFileInputXML_13 = null;
					try {
						filename_tFileInputXML_13 = context.currentFile;
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}
					if (filename_tFileInputXML_13 != null
							&& filename_tFileInputXML_13 instanceof String
							&& filename_tFileInputXML_13.toString().startsWith(
									"//")) {
						if (!isWindows_tFileInputXML_13) {
							filename_tFileInputXML_13 = filename_tFileInputXML_13
									.toString().replaceFirst("//", "/");
						}
					}

					boolean isValidFile_tFileInputXML_13 = true;
					org.dom4j.Document doc_tFileInputXML_13 = null;
					java.io.Closeable toClose_tFileInputXML_13 = null;
					try {
						if (filename_tFileInputXML_13 instanceof java.io.InputStream) {
							java.io.InputStream inputStream_tFileInputXML_13 = (java.io.InputStream) filename_tFileInputXML_13;
							toClose_tFileInputXML_13 = inputStream_tFileInputXML_13;
							doc_tFileInputXML_13 = reader_tFileInputXML_13
									.read(inputStream_tFileInputXML_13);
						} else {
							java.io.Reader unicodeReader_tFileInputXML_13 = new UnicodeReader(
									new java.io.FileInputStream(String
											.valueOf(filename_tFileInputXML_13)),
									context.encoding);
							toClose_tFileInputXML_13 = unicodeReader_tFileInputXML_13;
							org.xml.sax.InputSource in_tFileInputXML_13 = new org.xml.sax.InputSource(
									unicodeReader_tFileInputXML_13);
							doc_tFileInputXML_13 = reader_tFileInputXML_13
									.read(in_tFileInputXML_13);
						}
					} catch (java.lang.Exception e) {
						System.err.println(e.getMessage());
						isValidFile_tFileInputXML_13 = false;
					} finally {
						if (toClose_tFileInputXML_13 != null) {
							toClose_tFileInputXML_13.close();
						}
					}
					if (isValidFile_tFileInputXML_13) {
						NameSpaceTool_tFileInputXML_13 nsTool_tFileInputXML_13 = new NameSpaceTool_tFileInputXML_13();
						nsTool_tFileInputXML_13.countNSMap(doc_tFileInputXML_13
								.getRootElement());
						java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_13 = nsTool_tFileInputXML_13.xmlNameSpaceMap;

						org.dom4j.XPath x_tFileInputXML_13 = doc_tFileInputXML_13
								.createXPath(nsTool_tFileInputXML_13
										.addDefaultNSPrefix(
												"/ODM/Study/MetaDataVersion/ItemGroupDef",
												"/ODM/Study/MetaDataVersion/ItemGroupDef"));
						x_tFileInputXML_13
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_13);

						java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_13 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tFileInputXML_13
								.selectNodes(doc_tFileInputXML_13);
						XML_API_tFileInputXML_13 xml_api_tFileInputXML_13 = new XML_API_tFileInputXML_13();
						String str_tFileInputXML_13 = "";
						org.dom4j.Node node_tFileInputXML_13 = null;

						// init all mapping xpaths
						org.dom4j.XPath xTmp0_tFileInputXML_13 = org.dom4j.DocumentHelper
								.createXPath(nsTool_tFileInputXML_13
										.addDefaultNSPrefix("@OID",
												"/ODM/Study/MetaDataVersion/ItemGroupDef"));
						xTmp0_tFileInputXML_13
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_13);
						org.dom4j.XPath xTmp1_tFileInputXML_13 = org.dom4j.DocumentHelper
								.createXPath(nsTool_tFileInputXML_13
										.addDefaultNSPrefix("@Name",
												"/ODM/Study/MetaDataVersion/ItemGroupDef"));
						xTmp1_tFileInputXML_13
								.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_13);

						for (org.dom4j.tree.AbstractNode temp_tFileInputXML_13 : nodeList_tFileInputXML_13) {
							nb_line_tFileInputXML_13++;
							row20 = null;
							boolean whetherReject_tFileInputXML_13 = false;
							row20 = new row20Struct();
							try {
								Object obj0_tFileInputXML_13 = xTmp0_tFileInputXML_13
										.evaluate(temp_tFileInputXML_13);
								if (obj0_tFileInputXML_13 == null) {
									node_tFileInputXML_13 = null;
									str_tFileInputXML_13 = "";

								} else if (obj0_tFileInputXML_13 instanceof org.dom4j.Node) {
									node_tFileInputXML_13 = (org.dom4j.Node) obj0_tFileInputXML_13;
									str_tFileInputXML_13 = org.jaxen.function.StringFunction
											.evaluate(
													node_tFileInputXML_13,
													org.jaxen.dom4j.DocumentNavigator
															.getInstance());
								} else if (obj0_tFileInputXML_13 instanceof String
										|| obj0_tFileInputXML_13 instanceof Number) {
									node_tFileInputXML_13 = temp_tFileInputXML_13;
									str_tFileInputXML_13 = String
											.valueOf(obj0_tFileInputXML_13);
								} else if (obj0_tFileInputXML_13 instanceof java.util.List) {
									java.util.List<org.dom4j.Node> nodes_tFileInputXML_13 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_13;
									node_tFileInputXML_13 = nodes_tFileInputXML_13
											.size() > 0 ? nodes_tFileInputXML_13
											.get(0) : null;
									str_tFileInputXML_13 = node_tFileInputXML_13 == null ? ""
											: org.jaxen.function.StringFunction
													.evaluate(
															node_tFileInputXML_13,
															org.jaxen.dom4j.DocumentNavigator
																	.getInstance());
								}
								if (xml_api_tFileInputXML_13
										.isDefNull(node_tFileInputXML_13)) {
									row20.ItemGroupOID = null;
								} else if (xml_api_tFileInputXML_13
										.isEmpty(node_tFileInputXML_13)) {
									row20.ItemGroupOID = "";
								} else if (xml_api_tFileInputXML_13
										.isMissing(node_tFileInputXML_13)) {
									row20.ItemGroupOID = null;
								} else {
									row20.ItemGroupOID = str_tFileInputXML_13;
								}
								Object obj1_tFileInputXML_13 = xTmp1_tFileInputXML_13
										.evaluate(temp_tFileInputXML_13);
								if (obj1_tFileInputXML_13 == null) {
									node_tFileInputXML_13 = null;
									str_tFileInputXML_13 = "";

								} else if (obj1_tFileInputXML_13 instanceof org.dom4j.Node) {
									node_tFileInputXML_13 = (org.dom4j.Node) obj1_tFileInputXML_13;
									str_tFileInputXML_13 = org.jaxen.function.StringFunction
											.evaluate(
													node_tFileInputXML_13,
													org.jaxen.dom4j.DocumentNavigator
															.getInstance());
								} else if (obj1_tFileInputXML_13 instanceof String
										|| obj1_tFileInputXML_13 instanceof Number) {
									node_tFileInputXML_13 = temp_tFileInputXML_13;
									str_tFileInputXML_13 = String
											.valueOf(obj1_tFileInputXML_13);
								} else if (obj1_tFileInputXML_13 instanceof java.util.List) {
									java.util.List<org.dom4j.Node> nodes_tFileInputXML_13 = (java.util.List<org.dom4j.Node>) obj1_tFileInputXML_13;
									node_tFileInputXML_13 = nodes_tFileInputXML_13
											.size() > 0 ? nodes_tFileInputXML_13
											.get(0) : null;
									str_tFileInputXML_13 = node_tFileInputXML_13 == null ? ""
											: org.jaxen.function.StringFunction
													.evaluate(
															node_tFileInputXML_13,
															org.jaxen.dom4j.DocumentNavigator
																	.getInstance());
								}
								if (xml_api_tFileInputXML_13
										.isDefNull(node_tFileInputXML_13)) {
									row20.Name = null;
								} else if (xml_api_tFileInputXML_13
										.isEmpty(node_tFileInputXML_13)) {
									row20.Name = "";
								} else if (xml_api_tFileInputXML_13
										.isMissing(node_tFileInputXML_13)) {
									row20.Name = null;
								} else {
									row20.Name = str_tFileInputXML_13;
								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputXML_13 = true;
								System.err.println(e.getMessage());
								row20 = null;
							}

							/**
							 * [tFileInputXML_13 begin ] stop
							 */
							/**
							 * [tFileInputXML_13 main ] start
							 */

							currentComponent = "tFileInputXML_13";

							tos_count_tFileInputXML_13++;

							/**
							 * [tFileInputXML_13 main ] stop
							 */
							// Start of branch "row20"
							if (row20 != null) {

								/**
								 * [tFileOutputDelimited_20 main ] start
								 */

								currentComponent = "tFileOutputDelimited_20";

								StringBuilder sb_tFileOutputDelimited_20 = new StringBuilder();

								if (row20.ItemGroupOID != null) {

									sb_tFileOutputDelimited_20.append(

									row20.ItemGroupOID

									);

								}

								sb_tFileOutputDelimited_20
										.append(OUT_DELIM_tFileOutputDelimited_20);

								if (row20.Name != null) {

									sb_tFileOutputDelimited_20.append(

									row20.Name

									);

								}

								sb_tFileOutputDelimited_20
										.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_20);

								nb_line_tFileOutputDelimited_20++;

								outtFileOutputDelimited_20
										.write(sb_tFileOutputDelimited_20
												.toString());

								tos_count_tFileOutputDelimited_20++;

								/**
								 * [tFileOutputDelimited_20 main ] stop
								 */

							} // End of branch "row20"

							/**
							 * [tFileInputXML_13 end ] start
							 */

							currentComponent = "tFileInputXML_13";

						}
					}
					globalMap.put("tFileInputXML_13_NB_LINE",
							nb_line_tFileInputXML_13);

					ok_Hash.put("tFileInputXML_13", true);
					end_Hash.put("tFileInputXML_13", System.currentTimeMillis());

					/**
					 * [tFileInputXML_13 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_20 end ] start
					 */

					currentComponent = "tFileOutputDelimited_20";

				} finally {
					if (outtFileOutputDelimited_20 != null) {
						outtFileOutputDelimited_20.flush();
						outtFileOutputDelimited_20.close();
					}
					globalMap.put("tFileOutputDelimited_20_NB_LINE",
							nb_line_tFileOutputDelimited_20);
					globalMap.put("tFileOutputDelimited_20_FILE_NAME",
							fileName_tFileOutputDelimited_20);
				} // finally

				ok_Hash.put("tFileOutputDelimited_20", true);
				end_Hash.put("tFileOutputDelimited_20",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_20 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputXML_13:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputXML_14Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputXML_13_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());
				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				System.out.println("Creating Ontology for: "
						+ context.currentFile);

				/**
				 * [tJava_1 begin ] stop
				 */
				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */
				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tLibraryLoad_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public void tLibraryLoad_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLibraryLoad_1 begin ] start
				 */

				ok_Hash.put("tLibraryLoad_1", false);
				start_Hash.put("tLibraryLoad_1", System.currentTimeMillis());
				currentComponent = "tLibraryLoad_1";

				int tos_count_tLibraryLoad_1 = 0;

				/**
				 * [tLibraryLoad_1 begin ] stop
				 */
				/**
				 * [tLibraryLoad_1 main ] start
				 */

				currentComponent = "tLibraryLoad_1";

				tos_count_tLibraryLoad_1++;

				/**
				 * [tLibraryLoad_1 main ] stop
				 */
				/**
				 * [tLibraryLoad_1 end ] start
				 */

				currentComponent = "tLibraryLoad_1";

				ok_Hash.put("tLibraryLoad_1", true);
				end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				/**
				 * [tLibraryLoad_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tLibraryLoad_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_16Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 1);
	}

	public void tCreateTemporaryFile_16Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCreateTemporaryFile_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tCreateTemporaryFile_16 begin ] start
				 */

				ok_Hash.put("tCreateTemporaryFile_16", false);
				start_Hash.put("tCreateTemporaryFile_16",
						System.currentTimeMillis());
				currentComponent = "tCreateTemporaryFile_16";

				int tos_count_tCreateTemporaryFile_16 = 0;

				java.io.File dir_tCreateTemporaryFile_16 = new java.io.File(
						context.folderMain + context.folderTmp);
				dir_tCreateTemporaryFile_16.mkdirs();
				String name_tCreateTemporaryFile_16 = "talend_XXXX".replaceAll(
						"XXXX", routines.TalendString.getAsciiRandomString(4)
								.toUpperCase());
				String suffix_tCreateTemporaryFile_16 = ("tmp".replaceAll(
						"\\.", "").length() == 0) ? "tmp" : "tmp".replaceAll(
						"\\.", "");
				java.io.File file_tCreateTemporaryFile_16 = new java.io.File(
						dir_tCreateTemporaryFile_16,
						name_tCreateTemporaryFile_16 + "."
								+ suffix_tCreateTemporaryFile_16);
				if (file_tCreateTemporaryFile_16.createNewFile()) {
				}
				globalMap.put("tCreateTemporaryFile_16_FILEPATH",
						file_tCreateTemporaryFile_16.getCanonicalPath());

				/**
				 * [tCreateTemporaryFile_16 begin ] stop
				 */
				/**
				 * [tCreateTemporaryFile_16 main ] start
				 */

				currentComponent = "tCreateTemporaryFile_16";

				tos_count_tCreateTemporaryFile_16++;

				/**
				 * [tCreateTemporaryFile_16 main ] stop
				 */
				/**
				 * [tCreateTemporaryFile_16 end ] start
				 */

				currentComponent = "tCreateTemporaryFile_16";

				ok_Hash.put("tCreateTemporaryFile_16", true);
				end_Hash.put("tCreateTemporaryFile_16",
						System.currentTimeMillis());

				/**
				 * [tCreateTemporaryFile_16 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCreateTemporaryFile_16:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tCreateTemporaryFile_13Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tCreateTemporaryFile_16_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final ODM_Create_Ontology ODM_Create_OntologyClass = new ODM_Create_Ontology();

		int exitCode = ODM_Create_OntologyClass.runJobInTOS(args);
		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = ODM_Create_Ontology.class
					.getClassLoader().getResourceAsStream(
							"idrt52/odm_create_ontology_1_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.currentFile = (String) context.getProperty("currentFile");
			try {
				context.startDate = routines.system.ParserUtils
						.parseTo_Long(context.getProperty("startDate"));
			} catch (NumberFormatException e) {
				context.startDate = null;
			}
			context.concept_cd = (String) context.getProperty("concept_cd");
			context.concept_path = (String) context.getProperty("concept_path");
			context.encoding = (String) context.getProperty("encoding");
			context.folderMain = (String) context.getProperty("folderMain");
			context.folderODM = (String) context.getProperty("folderODM");
			context.folderOutput = (String) context.getProperty("folderOutput");
			context.folderTmp = (String) context.getProperty("folderTmp");
			context.i2b2HeadNode = (String) context.getProperty("i2b2HeadNode");
			context.i2b2HeadNodeName = (String) context
					.getProperty("i2b2HeadNodeName");
			try {
				context.includePids = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("includePids"));
			} catch (NumberFormatException e) {
				context.includePids = null;
			}
			context.ItemData = (String) context.getProperty("ItemData");
			context.ItemDataAny = (String) context.getProperty("ItemDataAny");
			context.ItemDataBase64Binary = (String) context
					.getProperty("ItemDataBase64Binary");
			context.ItemDataBase64Float = (String) context
					.getProperty("ItemDataBase64Float");
			context.ItemDataBoolean = (String) context
					.getProperty("ItemDataBoolean");
			context.ItemDataDate = (String) context.getProperty("ItemDataDate");
			context.ItemDataDatetime = (String) context
					.getProperty("ItemDataDatetime");
			context.ItemDataDouble = (String) context
					.getProperty("ItemDataDouble");
			context.ItemDataDurationDatetime = (String) context
					.getProperty("ItemDataDurationDatetime");
			context.ItemDataFloat = (String) context
					.getProperty("ItemDataFloat");
			context.ItemDataHexBinary = (String) context
					.getProperty("ItemDataHexBinary");
			context.ItemDataHexFloat = (String) context
					.getProperty("ItemDataHexFloat");
			context.ItemDataIncompleteDatetime = (String) context
					.getProperty("ItemDataIncompleteDatetime");
			context.ItemDataInteger = (String) context
					.getProperty("ItemDataInteger");
			context.ItemDataIntervalDatetime = (String) context
					.getProperty("ItemDataIntervalDatetime");
			context.ItemDataPartialDate = (String) context
					.getProperty("ItemDataPartialDate");
			context.ItemDataPartialDatetime = (String) context
					.getProperty("ItemDataPartialDatetime");
			context.ItemDataPartialTime = (String) context
					.getProperty("ItemDataPartialTime");
			context.ItemDataString = (String) context
					.getProperty("ItemDataString");
			context.ItemDataTime = (String) context.getProperty("ItemDataTime");
			context.ItemDataURI = (String) context.getProperty("ItemDataURI");
			context.MDPD = (String) context.getProperty("MDPD");
			context.MDPDName = (String) context.getProperty("MDPDName");
			context.xslt = (String) context.getProperty("xslt");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("currentFile")) {
				context.currentFile = (String) parentContextMap
						.get("currentFile");
			}
			if (parentContextMap.containsKey("startDate")) {
				context.startDate = (Long) parentContextMap.get("startDate");
			}
			if (parentContextMap.containsKey("concept_cd")) {
				context.concept_cd = (String) parentContextMap
						.get("concept_cd");
			}
			if (parentContextMap.containsKey("concept_path")) {
				context.concept_path = (String) parentContextMap
						.get("concept_path");
			}
			if (parentContextMap.containsKey("encoding")) {
				context.encoding = (String) parentContextMap.get("encoding");
			}
			if (parentContextMap.containsKey("folderMain")) {
				context.folderMain = (String) parentContextMap
						.get("folderMain");
			}
			if (parentContextMap.containsKey("folderODM")) {
				context.folderODM = (String) parentContextMap.get("folderODM");
			}
			if (parentContextMap.containsKey("folderOutput")) {
				context.folderOutput = (String) parentContextMap
						.get("folderOutput");
			}
			if (parentContextMap.containsKey("folderTmp")) {
				context.folderTmp = (String) parentContextMap.get("folderTmp");
			}
			if (parentContextMap.containsKey("i2b2HeadNode")) {
				context.i2b2HeadNode = (String) parentContextMap
						.get("i2b2HeadNode");
			}
			if (parentContextMap.containsKey("i2b2HeadNodeName")) {
				context.i2b2HeadNodeName = (String) parentContextMap
						.get("i2b2HeadNodeName");
			}
			if (parentContextMap.containsKey("includePids")) {
				context.includePids = (Boolean) parentContextMap
						.get("includePids");
			}
			if (parentContextMap.containsKey("ItemData")) {
				context.ItemData = (String) parentContextMap.get("ItemData");
			}
			if (parentContextMap.containsKey("ItemDataAny")) {
				context.ItemDataAny = (String) parentContextMap
						.get("ItemDataAny");
			}
			if (parentContextMap.containsKey("ItemDataBase64Binary")) {
				context.ItemDataBase64Binary = (String) parentContextMap
						.get("ItemDataBase64Binary");
			}
			if (parentContextMap.containsKey("ItemDataBase64Float")) {
				context.ItemDataBase64Float = (String) parentContextMap
						.get("ItemDataBase64Float");
			}
			if (parentContextMap.containsKey("ItemDataBoolean")) {
				context.ItemDataBoolean = (String) parentContextMap
						.get("ItemDataBoolean");
			}
			if (parentContextMap.containsKey("ItemDataDate")) {
				context.ItemDataDate = (String) parentContextMap
						.get("ItemDataDate");
			}
			if (parentContextMap.containsKey("ItemDataDatetime")) {
				context.ItemDataDatetime = (String) parentContextMap
						.get("ItemDataDatetime");
			}
			if (parentContextMap.containsKey("ItemDataDouble")) {
				context.ItemDataDouble = (String) parentContextMap
						.get("ItemDataDouble");
			}
			if (parentContextMap.containsKey("ItemDataDurationDatetime")) {
				context.ItemDataDurationDatetime = (String) parentContextMap
						.get("ItemDataDurationDatetime");
			}
			if (parentContextMap.containsKey("ItemDataFloat")) {
				context.ItemDataFloat = (String) parentContextMap
						.get("ItemDataFloat");
			}
			if (parentContextMap.containsKey("ItemDataHexBinary")) {
				context.ItemDataHexBinary = (String) parentContextMap
						.get("ItemDataHexBinary");
			}
			if (parentContextMap.containsKey("ItemDataHexFloat")) {
				context.ItemDataHexFloat = (String) parentContextMap
						.get("ItemDataHexFloat");
			}
			if (parentContextMap.containsKey("ItemDataIncompleteDatetime")) {
				context.ItemDataIncompleteDatetime = (String) parentContextMap
						.get("ItemDataIncompleteDatetime");
			}
			if (parentContextMap.containsKey("ItemDataInteger")) {
				context.ItemDataInteger = (String) parentContextMap
						.get("ItemDataInteger");
			}
			if (parentContextMap.containsKey("ItemDataIntervalDatetime")) {
				context.ItemDataIntervalDatetime = (String) parentContextMap
						.get("ItemDataIntervalDatetime");
			}
			if (parentContextMap.containsKey("ItemDataPartialDate")) {
				context.ItemDataPartialDate = (String) parentContextMap
						.get("ItemDataPartialDate");
			}
			if (parentContextMap.containsKey("ItemDataPartialDatetime")) {
				context.ItemDataPartialDatetime = (String) parentContextMap
						.get("ItemDataPartialDatetime");
			}
			if (parentContextMap.containsKey("ItemDataPartialTime")) {
				context.ItemDataPartialTime = (String) parentContextMap
						.get("ItemDataPartialTime");
			}
			if (parentContextMap.containsKey("ItemDataString")) {
				context.ItemDataString = (String) parentContextMap
						.get("ItemDataString");
			}
			if (parentContextMap.containsKey("ItemDataTime")) {
				context.ItemDataTime = (String) parentContextMap
						.get("ItemDataTime");
			}
			if (parentContextMap.containsKey("ItemDataURI")) {
				context.ItemDataURI = (String) parentContextMap
						.get("ItemDataURI");
			}
			if (parentContextMap.containsKey("MDPD")) {
				context.MDPD = (String) parentContextMap.get("MDPD");
			}
			if (parentContextMap.containsKey("MDPDName")) {
				context.MDPDName = (String) parentContextMap.get("MDPDName");
			}
			if (parentContextMap.containsKey("xslt")) {
				context.xslt = (String) parentContextMap.get("xslt");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_1) {

			e_tJava_1.printStackTrace();
			globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : ODM_Create_Ontology");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 1181609 characters generated by Talend Open Studio for Data Integration on
 * the October 1, 2013 10:28:19 AM CEST
 ************************************************************************************************/
